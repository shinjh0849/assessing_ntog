assertNotNull ( schema )
assertEquals ( "<expected value>" , schema )
assertEquals ( "expectedValue" , schema )
assertEquals ( "jms:queue:foo" , uri )
assertEquals ( "timer:foo?period=5000" , uri )
assertEquals ( "jms:cheese?maxMessagesPerTask=-1" , uri )
assertEquals ( "rest:user/{id}" , uri )
assertEquals ( "jms:queue:foo" , name )
out
assertNotNull ( fromCamelWithNamespace )
assertEquals ( "Expected element tag name to be 'from'" , "from" , element . getTagName ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( expectedBody , response )
assertEquals ( null , collection . getDocument ( myObject . getKey ( ) , BaseDocument . class ) )
assertEquals ( null , documentDeleted )
assertEquals ( null , verticesCollection . getDocument ( myObject . getKey ( ) , BaseDocument . class ) )
assertEquals ( TEXT_PLAIN_CONTENT , text )
assertEquals ( "{ \"order\": { \"orderId\": \"A123\" }}" , body )
assertEquals ( "{ \"order\": { \"orderId\": \"A123\" }}" , body )
assertEquals ( "JavaFirstName" , javaTarget . getFirstName ( ) )
assertEquals ( true , doneFlag . get ( ) )
assertEquals ( "atom:file:src/test/data/feed.atom?splitEntries=false" , endpoint . getFeedUri ( ) )
assertEquals ( "expectedValue" , exchange . getProperty ( "foo" ) )
exchange . getIn ( ) . getHeader ( "bar" , String . class )
assertEquals ( "expectedName" , reflectRequestor . getName ( ) )
assertEquals ( "100" , getAge ( ) )
assertEquals ( "pojo1" , getTestPojo ( ) . getPojoName ( ) )
assertEquals ( value , response )
assertEquals ( value , response )
assertEquals ( REFLECTION_TEST_AGE + 1 , response )
assertEquals ( "pojo2" , ( ( TestPojo ) response ) . getPojoName ( ) )
assertEquals ( REQUIRED , get ( "required" ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "Chuck" , getName ( ) )
assertEquals ( cloudtrailClient , CloudtrailClientFactory . getCloudtrailClient ( cloudtrailConf ) )
assertEquals ( expectedClient , cloudtrailClient )
assertEquals ( expectedClient , cloudtrailClient )
assertNotNull ( secretsManagerClient )
assertEquals ( secretsManagerClient , ? ? ? )
assertNotNull ( secretsManagerClient )
helper . getRetry ( ) != null
helper . getRetry ( ) . equals ( "never" )
assertEquals ( "always" , helper . getRetry ( ) )
assertEquals ( "retryable" , helper . getRetry ( ) )
assertEquals ( "generic" , helper . getRetry ( ) )
assertEquals ( "exhausted" , helper . getRetry ( ) )
helper . getRetry ( ) . equals ( "exhausted,generic" )
assertEquals ( false , helper . shouldRetry ( ) )
assertEquals ( true , helper . shouldRetry ( ) )
assertEquals ( true , helper . shouldRetryReturnsTrueForGenericInternalError ( ) )
assertEquals ( false , helper . shouldRetryReturnsFalseForUnexpectedError ( ) )
assertTrue ( athenaClient instanceof Athena2ClientStandardImpl )
assertThat ( athenaClient , instanceOf ( Athena2ClientStandardImpl . class ) )
assertThat ( athenaClient , instanceOf ( Athena2ClientIAMOptimizedImpl . class ) )
assertEquals ( clientMock , endpoint . getAmazonAthenaClient ( ) )
assertEquals ( cwClient , cwClient . getCloudWatchClient ( ) )
assertEquals ( cwClient , cw2ClientFactory . getCloudWatchClient ( ) )
assertEquals ( cwClient , cw2ClientFactory . getCloudWatchClient ( ) )
assertSame ( cloudWatchClient , endpoint . getConfiguration ( ) . getAmazonCwClient ( ) )
assertEquals ( Boolean . TRUE . equals ( ddb2Configuration . isUseDefaultCredentialsProvider ( ) ) , ddb2Client instanceof Ddb2ClientIAMOptimizedImpl )
assertEquals ( ddb2Client . getClass ( ) , Ddb2ClientStandardImpl . class )
assertEquals ( Ddb2ClientIAMOptimizedImpl . class , ddb2Client . getClass ( ) )
assertEquals ( "myTable" , endpoint . getTableName ( ) )
assertSame ( ddbClient , endpoint . getConfiguration ( ) . getAmazonDDBClient ( ) )
exchange . getIn ( ) . getHeader ( Ddb2Constants . CONSISTENT_READ )
assertEquals ( Ddb2StreamClientStandardImpl . class , ddb2StreamClient . getClass ( ) )
assertEquals ( ddb2StreamClient . getClass ( ) , Ddb2StreamClientStandardImpl . class )
assertEquals ( Ddb2StreamClientIAMOptimizedImpl . class , ddb2StreamClient . getClass ( ) )
assertEquals ( "expectedValue" , underTest . shardId ( "shardId" ) . doSetProperty ( "shardId" , "expectedValue" ) )
assertEquals ( updatedShardIterator5 , underTest . getShardIterator ( SHARD_5 . shardId ( ) ) )
assertEquals ( null , underTest . getShardIterators ( ) . get ( SHARD_3 . shardId ( ) ) )
assertEquals ( Collections . emptyList ( ) , underTest . asList ( ) )
assertEquals ( 0 , underTest . asList ( ) . size ( ) )
assertEquals ( ec2Client , ? ? ? )
ec2Client should  not be  null .
assertEquals ( ec2Client , ? ? ? getIAMOptimizedEC2Client ( ) )
assertEquals ( clientMock , endpoint . getAmazonEc2Client ( ) )
assertSame ( clientMock , endpoint . getConfiguration ( ) . getAmazonEc2Client ( ) )
assertEquals ( "Expected address component" , expectedAddressComponent , getComponent ( ep . getResults ( ) , AddressType . TEST ) )
assertEquals ( ec2Client , getEcsClient ( ) )
assertEquals ( ec2Client , ecsClient )
assertEquals ( ec2Client , ecsClient )
assertEquals ( clientMock , endpoint . getEcsClient ( ) )
assertEquals ( "Test" , exchange . getIn ( ) . getHeader ( ECS2Constants . CLUSTER_NAME ) )
assertEquals ( "Test" , exchange . getIn ( ) . getHeader ( ECS2Constants . CLUSTER_NAME ) )
assertEquals ( "Test" , exchange . getIn ( ) . getHeader ( ECS2Constants . CLUSTER_NAME ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( null ) )
assertEquals ( eks2Client , eks2ClientFactory . getEksClient ( eks2Configuration ) )
assertEquals ( eks2Client , EKS2ClientFactory . getEksClient ( eks2Configuration ) )
assertEquals ( eks2Client , EKS2ClientFactory . getEksClient ( eks2Configuration ) )
assertEquals ( clientMock , endpoint . getEksClient ( ) )
assertEquals ( "Test" , exchange . getIn ( ) . getHeader ( EKS2Constants . CLUSTER_NAME ) )
assertEquals ( "Test" , exchange . getIn ( ) . getHeader ( EKS2Constants . CLUSTER_NAME ) )
assertEquals ( "Test" , resultGet . getClusterName ( ) )
assertEquals ( eventbridgeClient , getEventbridgeClient ( ) )
assertEquals ( eventbridgeClient , ? ? ? )
assertEquals ( eventbridgeClient , ? ? ? getIAMOptimizedEventbridgeClient ( ) )
assertEquals ( iamClient , iam2ClientDefault . getIamClient ( ) )
assertEquals ( iamClient , iam2Client . getIamClient ( ) )
assertEquals ( iamClient , ? ? ? getIAMOptimizedIamClient ( ) . getIamClient ( ) )
assertNotNull ( endpoint )
assertEquals ( "test" , exchange . getIn ( ) . getHeader ( IAM2Constants . USERNAME ) )
assertEquals ( "test" , resultGet . getUserName ( ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "test" , exchange . getIn ( ) . getHeader ( IAM2Constants . USERNAME ) )
assertEquals ( StatusType . INACTIVE . name ( ) , resultGet . getStatus ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( KinesisFirehoseClientStandardImpl . class , kinesisFirehoseClient . getClass ( ) )
assertEquals ( KinesisFirehoseClientStandardImpl . class , kinesisFirehoseClient . getClass ( ) )
assertEquals ( KinesisFirehoseClientIAMOptimizedImpl . class , kinesisFirehoseClient . getClass ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
exchange . getIn ( ) . getBody ( ) . equals ( "my message text" )
assertEquals ( 2 , exchange . getIn ( ) . getBody ( List . class ) . size ( ) )
assertEquals ( KinesisClientStandardImpl . class , kinesisClient . getClass ( ) )
assertThat ( kinesisClient , instanceOf ( KinesisClientStandardImpl . class ) )
assertEquals ( KinesisClientIAMOptimizedImpl . class , kinesisClient . getClass ( ) )
assertEquals ( 1 , getRecordsReqCap . getAllValues ( ) . size ( ) )
assertNotNull ( kmsClient )
kmsClient = ? ? ? getStandardKMSClient ( ) . getKmsClient ( )
assertEquals ( kmsClient , ? ? ? getIAMOptimizedKMSClient ( ) )
assertEquals ( clientMock , endpoint . getKmsClient ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( < expectedValue > , lambdaClient )
assertEquals ( true , lambdaClient instanceof Lambda2ClientOptimizedImpl )
assertEquals ( awsLambdaClient , endpoint . getAwsLambdaClient ( ) )
assertEquals ( "aws2-lambda://myFunction?operation=getFunction&awsLambdaClient=#awsLambdaClient" , ep . getEndpointUri ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
assertEquals ( functionName , result . getFunctionName ( ) )
assertEquals ( "GetHelloWithName" , functionName )
assertEquals ( HealthCheck . State . UP , state )
assertEquals ( "arn:aws:lambda:eu-central-1:643534317684:function:GetHelloWithName" , exchange . getIn ( ) . getHeader ( Lambda2Constants . RESOURCE_ARN ) )
assertEquals ( "expectedValue" , result . getExpectedValue ( ) )
exchange . getIn ( ) . getHeader ( Lambda2Constants . RESOURCE_TAG_KEYS )  shouldEqual tagKeys
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( MQ2ClientStandardImpl . class , mqClient . getClass ( ) )
assertEquals ( new MQ2ClientStandardImpl ( mq2Configuration ) , mqClient )
assertEquals ( MQ2ClientOptimizedImpl . class , mqClient . getClass ( ) )
assertEquals ( awsMQClient , endpoint . getAmazonMqClient ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
mskClient instanceof MSK2ClientOptimizedImpl || mskClient instanceof MSK2ClientStandardImpl
assertTrue ( mskClient instanceof MSK2ClientStandardImpl || mskClient instanceof MSK2ClientOptimizedImpl )
mskClient instanceof MSK2ClientOptimizedImpl
assertEquals ( awsMSKClient , endpoint . getMskClient ( ) )
assertEquals ( AWS2S3ClientStandardImpl . class , awss3Client . getClass ( ) )
assertEquals ( AWS2S3ClientStandardImpl . class , awss3Client . getClass ( ) )
assertEquals ( AWS2S3ClientIAMOptimizedImpl . class , awss3Client . getClass ( ) )
assertSame ( client , endpoint . getConfiguration ( ) . getAmazonS3Client ( ) )
assertSame ( client , endpoint . getConfiguration ( ) . getAmazonS3Client ( ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
result . expectedMessageCount ( 1 )
assertEquals ( 1 , result . expectedMessageCount ( ) )
resp . size ( ) == 1000
resp . size ( ) == 23
assertEquals ( awsSESClient , endpoint . getAmazonSESClient ( ) )
Ses2InternalClient expectedClient = Boolean . TRUE . equals ( ses2Configuration . isUseDefaultCredentialsProvider ( ) ) ? new Ses2ClientOptimizedImpl ( ses2Configuration ) : new Ses2ClientStandardImpl ( ses2Configuration )
assertEquals ( expectedClient , sesClient )
Ses2InternalClient expectedClient = Boolean . TRUE . equals ( ses2Configuration . isUseDefaultCredentialsProvider ( ) ) ? new Ses2ClientOptimizedImpl ( ses2Configuration ) : new Ses2ClientStandardImpl ( ses2Configuration )
assertEquals ( "aws2-ses://from@example.com?amazonSESClient=#amazonSESClient" , ep . getEndpointUri ( ) )
assertEquals ( "This is my message text." , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "direct:start" , exchange . getFromEndpoint ( ) . getEndpointUri ( ) )
assertEquals ( "aws2-sns://MyTopic" , endpoint . getEndpointUri ( ) )
assertEquals ( "aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient" , ep . getEndpointUri ( ) )
assertEquals ( "This is my subject text." , exchange . getIn ( ) . getHeader ( Sns2Constants . SUBJECT ) )
assertNotNull ( exchange . getIn ( ) . getHeader ( headerName ) )
assertEquals ( "This is my subject" , exchange . getIn ( ) . getHeader ( Sns2Constants . SUBJECT ) )
assertNotNull ( exchange . getIn ( ) . getHeader ( headerName ) )
assertEquals ( "awsSQSClient" , awsSQSClient , context . getRegistry ( ) . lookupByName ( "awsSQSClient" ) )
assertEquals ( "aws2-sqs://MyQueue?amazonSQSClient=#amazonSQSClient" , ep . getEndpointUri ( ) )
assertEquals ( expectedCount , res . getExchanges ( ) . size ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( storageObject ) )
assertEquals ( "Hi from sqs 1" , res )
result . expectedMessageCount ( 1 )
assertEquals ( 1 , res . getExchanges ( ) . size ( ) )
result . expectedMessageCount ( 1 )
assertEquals ( stsClient , sts2ClientDefault . getStsClient ( ) )
assertEquals ( stsClient , sts2Client . getStsClient ( ) )
assertEquals ( stsClient , ? ? ? )
assertEquals ( "aws2-sts://TestDomain" , endpoint . getEndpointUri ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( "expectedValue" , resultGet . getAccessKeyId ( ) )
assertEquals ( "expectedValue" , resultGet . getAccessKeyId ( ) )
assertEquals ( expected , ? ? ? )
assertEquals ( translateClient , ? ? ? )
assertEquals ( translateClient , translate2Configuration . getTranslateClient ( ) )
assertEquals ( "hello" , resultGet )
assertEquals ( "hello" , resultGet )
assertEquals ( "expectedValue" , resultGet )
assertEquals ( "hello" , resultGet )
assertEquals ( "Expected result" , "Expected result" , resultGet )
assertEquals ( "Expected result" , "Actual result" , resultGet )
assertEquals ( "Expected result" , "Expected result" , resultGet )
assertNotNull ( clientWrapper . getDatabase ( databaseName ) . read ( ) . block ( ) )
assertEquals ( 2 , containerOperations . readAllItems ( new PartitionKey ( "test-1" ) , null ) . stream ( ) . count ( ) )
assertEquals ( count , containerOperations . count ( ) )
assertNotNull ( operations . getContainerOperations ( containerId ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 1 , processedEvents . get ( ) )
assertEquals ( null , get ( "invalid" ) )
assertEquals ( true , batch1Exists )
assertThat ( exists ) . isTrue ( )
assertThat ( exists ) . isTrue ( )
assertEquals ( "blob/sub" , endpoint . getBlobName ( ) )
assertEquals ( 1 , result . getExchanges ( ) . size ( ) )
assertEquals ( "keep me" , result . getHeader ( "DoNotDelete" ) )
assertEquals ( "expectedFileName" , fileName )
assertEquals ( "keep me" , result . getIn ( ) . getHeader ( "DoNotDelete" ) )
assertEquals ( 200 , response . getStatusCode ( ) )
result . expectedMessageCount ( 0 )
assertNotNull ( getHeader ( "DoNotDelete" ) )
assertEquals ( expectedResult , result )
assertNotNull ( exchange . getHeader ( headerName ) )
assertEquals ( "bean-validator://x" , endpoint . getEndpointUri ( ) )
assertSame ( this . messageInterpolator , endpoint . getMessageInterpolator ( ) )
assertEquals ( ExchangePattern . InOut , exchange . getPattern ( ) )
assertEquals ( ExchangePattern . InOut , exchange . getPattern ( ) )
assertEquals ( ExchangePattern . InOut , exchange . getPattern ( ) )
assertEquals ( "expectedValue" , body )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
list . size ( ) , is ( list . size ( ) , equalTo ( expectedSize ) )
assertEquals ( BigInteger . valueOf ( 10 ) , size ( storageObject ) )
mock . expectedMessageCount ( 1 )
assertEquals ( "Pauline de \"Quotes\"" , order . getFirstName ( ) )
assertThat ( e . getCause ( ) , isInstanceOf ( Exception . class ) )
assertThat ( e . getCause ( ) , instanceOf ( Exception . class ) )
resultEndpoint . assertMessageReceived ( 0 )
assertThat ( cause . getCause ( ) , instanceOf ( Exception . class ) )
assertThat ( cause . getCause ( ) , instanceOf ( FormatException . class ) )
assertThat ( cause . getCause ( ) , instanceOf ( FormatException . class ) )
assertEquals ( 1 , data . size ( ) )
assertEquals ( 8 , data . size ( ) )
assertEquals ( 1 , data . size ( ) )
assertEquals ( "foo bar \r\n" , myBindyModel . getField ( ) )
assertEquals ( 1 , uresult . getReceivedExchanges ( ) . size ( ) )
bd . getGrouping ( ) . equals ( new BigDecimal ( "123456.24" ) )
bd . getRoundingUp ( ) . equals ( new BigDecimal ( "12345.79" ) )
assertEquals ( "JSESSIONID=something" , headers . getFirst ( "Set-Cookie" ) )
assertEquals ( "JSESSIONID=something; X-Bonita-API-Token=something" , headers . get ( "Set-Cookie" ) )
config . getBaseBonitaURI ( )
assertEquals ( null , size ( so ) )
assertEquals ( BigInteger . valueOf ( 1 ) , size ( so ) )
assertEquals ( BigInteger . valueOf ( file . getBytes ( ) . length ) , size ( file ) )
assertEquals ( REQUIRED , Importance . get ( "required" ) )
assertEquals ( BoxCollaboration . Role . EDITOR , result . getRole ( ) )
assertEquals ( expectedResult , result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 0 , result . size ( ) )
assertEquals ( BoxSharedLink . Access . DEFAULT , headers . get ( "CamelBox.access" ) )
assertThat ( exists ) . isFalse ( )
assertThat ( onlyOneVersion ) . isTrue ( )
assertEquals ( output . toByteArray ( ) . length , expectedLength )
assertEquals ( 0 , output . size ( ) )
assertEquals ( "expectedURL" , result . toString ( ) )
assertEquals ( testFile . getID ( ) , headers . get ( "CamelBox.fileId" ) )
assertEquals ( new Metadata ( ) , result )
assertEquals ( "expectedValue" , result )
assertEquals ( 32 , result . length )
assertNotNull ( result )
assertEquals ( 1 , result . getVersion ( ) )
assertEquals ( "Expected result to be not null" , true , result != null )
assertEquals ( testFile . getID ( ) , result . getID ( ) )
assert search . equals ( "expected search" )
assertEquals ( BoxSharedLink . Access . COLLABORATORS , headers . get ( "CamelBox.access" ) )
assertNotNull ( result )
result . assertNotNull ( )
assertEquals ( testGroup . getID ( ) , headers . get ( "CamelBox.groupId" ) )
assertEquals ( 0 , searchResults )
assertNotNull ( result )
assertEquals ( testGroup . getID ( ) , result . getID ( ) )
assertEquals ( testGroup . getInfo ( ) . getDescription ( ) , CAMEL_TEST_GROUP_DESCRIPTION )
assertEquals ( info . getID ( ) , result . getID ( ) )
assertNotNull ( result )
assertEquals ( BoxGroupMembership . Role . ADMIN , info . getRole ( ) )
assertNotNull ( result )
assertEquals ( testTask . getID ( ) , headers . get ( "CamelBox.taskId" ) )
assertNotNull ( result )
AssertPlaceHolder = "assertEquals(0, tasks.size());"
assertNull ( assignments )
assertEquals ( testFile . getID ( ) , result . get ( 0 ) . getID ( ) )
assertEquals ( info . getID ( ) , result . getID ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( testTask . getID ( ) , result . getID ( ) )
assertEquals ( testTask . getInfo ( ) , result . getInfo ( ) )
assertEquals ( CAMEL_TEST_USER_EMAIL_ALIAS , result . getEmail ( ) )
assertEquals ( 1073741824 , result . getSpaceAmount ( ) )
assertEquals ( 0 , searchResults )
assertNotNull ( result )
assertEquals ( testUser . getID ( ) , result . getID ( ) )
assertNotNull ( result )
assertEquals ( testUser . getID ( ) , result . getID ( ) )
assertEquals ( CAMEL_TEST_USER_JOB_TITLE , result . getInfo ( ) . getJobTitle ( ) )
result != null
assertEquals ( false , component . getConfiguration ( ) . isLogHandlerEnabled ( ) )
assertEquals ( false , configuration . isLogHandlerEnabled ( ) )
assertEquals ( null , result )
result . assertNotNull ( )
result . stream ( ) . allMatch ( discount -> discount instanceof Discount )
assertEquals ( System . getenv ( "CAMEL_BRAINTREE_MERCHANT_ACCOUNT_ID" ) , headers . get ( BraintreeConstants . PROPERTY_PREFIX + "id" ) )
assertEquals ( Result . class , result . getClass ( ) )
assertEquals ( result , < expectedValue >  )
// Assertion code here
assertNotNull ( result )
assertEquals ( null , headers . get ( "CamelBraintree.settlementDate" ) )
assertEquals ( Result . Status . CANCELED , result . getStatus ( ) )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( result , < expectedValue >  )
assertEquals ( "expectedValue" , result )
assertEquals ( "Expected result to be success" , com . braintreegateway . Result . Status . SUCCESS , result . getStatus ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( null , headers . get ( "CamelBraintree.id" ) )
assertEquals ( Result . Status . SUCCESS , result . getStatus ( ) )
mock1 . assertIsSatisfied ( context )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( count , < expectedCount >  )
assertEquals ( count , expectedCount )
assertEquals ( 0 , cache . size ( ) )
assertThat ( keySet , containsInAnyOrder ( keys ) )
assertThat ( exchangeIdSet , contains ( key ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertSame ( rows , body )
assertNotNull ( body )
assertEquals ( expectedCount , mock . getReceivedCounter ( ) )
assertEquals ( expectedCount , mock . getReceivedCounter ( ) )
assertNotNull ( body )
assertNotNull ( response )
assertNotNull ( response )
assertEquals ( ConsistencyLevel . ANY , endpoint . getConsistencyLevel ( ) )
assertNotNull ( response )
assertThat ( exchangeIdSet , contains ( key ) )
assertNull ( configuration . getProductToken ( ) )
assertNull ( configuration . getDefaultFrom ( ) )
assertNull ( size ( so ) )
assertNull ( size ( so ) )
assertNotNull ( constraintViolations )
assertNull ( size ( so ) )
assertNull ( constraintViolations )
assertNull ( constraintViolations )
assertThat ( constraintViolations . size ( ) , is ( 0 ) )
assertThat ( constraintViolations . size ( ) , is ( 0 ) )
assertNotNull ( constraintViolations )
assertThat ( constraintViolations . size ( ) , is ( 0 ) )
assertNull ( constraintViolations )
assertThat ( constraintViolations . size ( ) , is ( 0 ) )
assertThat ( constraintViolations , hasSize ( 1 ) )
assertThat ( constraintViolations ) . isEmpty ( )
assertNull ( constraintViolations )
assertEquals ( "expectedValue" , result )
assertEquals ( "Expected result" , "Camel" , result )
assertNotNull ( result )
assertEquals ( ResponseCode . METHOD_NOT_ALLOWED , rsp . getCode ( ) )
assertEquals ( ResponseCode . NOT_FOUND , rsp . getCode ( ) )
assertEquals ( expectedService , result )
assertEquals ( expectedService , result )
assertEquals ( null , result )
assertNull ( consulTestClassClone )
assertEquals ( "Hello John" , hello ( "John" ) )
assertEquals ( BigInteger . valueOf ( 1 ) , result . size ( ) )
assertEquals ( BigInteger . valueOf ( 1 ) , result . size ( ) )
assertEquals ( 1 , mockResult . getExchanges ( ) . size ( ) )
assertEquals ( null , exchange . getException ( ) )
exchange . getIn ( ) . getHeader ( SECURE_HASH ) == TEST_SHA_256
assertNull ( exchange . getException ( ) )
assertEquals ( null , exchange . getException ( ) )
assertEquals ( null , exchange . getException ( ) )
assertEquals ( "couchbase:http://localhost:9191?bucket=bucket" , endpoint . getEndpointUri ( ) )
assertEquals ( null , endpointArray [ 0 ] . getHost ( ) )
assertThat ( endpoint , is ( sameInstance ( sut ) ) )
assertEquals ( "8091" , endpoint . getPort ( ) )
assertEquals ( "Expected address component not found" , expectedAddressComponent , getComponent ( results , addressType ) )
assertThat ( endpoint , is ( sameInstance ( endpoint ) ) )
assertEquals ( "5984" , endpoint . getPort ( ) )
assertEquals ( "dummy2" , getCamelCronService ( ) . getName ( ) )
assertEquals ( "dummy3" , getCamelCronService ( ) . getName ( ) )
assertEquals ( 1L , bi . getInvokedCounter ( ) )
assertEquals ( expectedValue , result . getHeader ( headerName ) )
assertEquals ( payload , signed . getIn ( ) . getBody ( ) )
assertEquals ( "Expected header value" , expectedValue , result . getHeader ( headerName ) )
assertNotNull ( ex . getCause ( ) )
assertEquals ( "<expected value>" , result )
assertEquals ( "expectedValue" , byteArrayToHexString ( inputArray ) )
assertEquals ( "Hello Camel" , out )
assertNotNull ( e )
assertNull ( resolveLanguage ( null ) )
assertNotNull ( exp )
assertNotNull ( exp )
assertNotNull ( exp )
assertNotNull ( exp )
assertNotNull ( e )
assertPredicate ( "${bodyAs(byte[]).toUpperCase()} == \"HELLO WORLD\"" , true )
assertEquals ( expectedValue , out )
assertEquals ( expectedValue , out )
assertEquals ( "bad expression!" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception message" , e . getMessage ( ) )
assertNotNull ( headers )
assertNotNull ( headers . get ( "some key" ) )
assertNotNull ( e )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> order . getLines ( ) . get ( 3 ) . getId ( ) )
assertThat ( cause . getMessage ( ) , is ( "Index: 3, Size: 2" ) )
assertNotNull ( cause . getMethodName ( ) )
assertNotNull ( cause . getMethodName ( ) )
assertEquals ( expectedCount , actuals . length )
assertEquals ( 1 , actuals . length )
assertEquals ( 0 , body . size ( ) )
assertEquals ( expectedSize , actualSize )
assertEquals ( endpointUri , endpoint . getAddress ( ) )
assertEquals ( "dataformat" , b . getName ( ) )
assertEquals ( "Expected output" , expectedOutput , bos . toString ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_CREATED , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "NON-XML-Payload" . getBytes ( ) , payload . getBody ( ) )
assertEquals ( payload , exchange . getIn ( ) . getBody ( InputStream . class ) )
assertEquals ( staxpayload , exchange . getIn ( ) . getBody ( ) )
assertEquals ( null , out )
assertNotNull ( personId . value )
assertEquals ( "Hello World" , out )
out . contains ( "Bye World" )
response . startsWith ( "<?xml" )
assertNotNull ( exception )
assertEquals ( "hello world" , result )
assertEquals ( REQUIRED , get ( "required" ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getCause ( ) . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( ValidationException . class , ex . getException ( ) . getClass ( ) )
assertEquals ( expectedSoapActionHeader , actualSoapActionHeader )
assertEquals ( "http://test123/testOperation" , actualSoapActionHeader )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "http://localhost:8080/cxf/service" , getEndpointURI ( ) )
assertNotNull ( getDataFormat ( MediaType . CXF_MESSAGE ) )
assertEquals ( DataFormat . RAW , getDataFormat ( MediaType . RAW ) )
assertEquals ( endpoint . getServiceClass ( ) , DummyProducer . class )
assertEquals ( expectedMessage , message )
assertEquals ( "Expected response" , expectedResponse , response )
assertEquals ( "GET" , template . getLastExchange ( ) . getIn ( ) . getHeader ( Exchange . HTTP_METHOD ) )
assertEquals ( "Expected response" , expectedResponse , response )
assertEquals ( "Expected result" , expectedValue , template . requestBodyAndHeader ( endpoint , body , header , headerValue , type ) )
assertEquals ( "123" , c . getId ( ) )
assertEquals ( 800000 , endpoint . getContinuationTimeout ( ) )
assertEquals ( "hello" , request . getPersonId ( ) )
assertEquals ( "Hello Willem" , response )
assertEquals ( null , body )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "john" , response . getFirstName ( ) )
assertEquals ( "expectedValue" , conduit . getAuthorization ( ) . getUserName ( ) )
assertEquals ( 1 , endpoint . getBus ( ) . getInInterceptors ( ) . stream ( ) . filter ( i -> i instanceof LoggingInInterceptor ) . count ( ) )
assertEquals ( DataFormat . PAYLOAD , getDataFormat ( MediaType . APPLICATION_JSON ) )
assertNotNull ( result )
assertEquals ( "Greet John" , greeter . greetMe ( "John" ) )
assertEquals ( "Greet Hi" , greeter . greetMe ( "Hi" ) )
assertEquals ( "Greet Hello" , greeter . greetMe ( "Hello" ) )
assertEquals ( "Greet Hello" , greeter . greetMe ( "Hello" ) )
assertEquals ( "http://schemas.xmlsoap.org/soap/" , s . getWSDLDocumentLocation ( ) . toString ( ) )
assertNotNull ( getSampleWSWithCXFAPI ( camelEndpoint ) )
assertEquals ( "http://schemas.xmlsoap.org/soap/" , s . getWSDLDocumentLocation ( ) . toString ( ) )
result . get ( )
assertEquals ( "gzip" , exchange . getIn ( ) . getHeader ( "Accept-Encoding" ) )
assertEquals ( "Hello World" , response )
assertEquals ( "datasonnet" , response )
debeziumConsumer . assertNotNull ( )
assertNotNull ( exchange . getMessage ( ) . getBody ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( storageObject ) )
assertEquals ( 1 , mockResultEndpoint . getExchanges ( ) . size ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
assertEquals ( REQUIRED , get ( "required" ) )
assertNotNull ( images )
assertEquals ( 1 , mockResultEndpoint . getExchanges ( ) . size ( ) )
assertEquals ( 1 , sizes . size ( ) )
assertEquals ( 1 , mockResultEndpoint . getExchanges ( ) . size ( ) )
getMockEndpoint ( MOCK_URI ) . assertIsSatisfied ( context )
assertThat ( disruptor . getRemainingCapacity ( ) ) . isEqualTo ( 0 )
assertEquals ( 3 , mockEndpoint . getReceivedCounter ( ) )
assertEquals ( 20 , mock . getExchanges ( ) . size ( ) )
assertEquals ( ProducerType . SINGLE , endpoint . getProducerType ( ) )
assertEquals ( 5 , endpoint . getConcurrentConsumers ( ) )
assertNotNull ( e . getCause ( ) )
out . get ( 0 , TimeUnit . MILLISECONDS )
assertEquals ( 1 , result . getExchanges ( ) . size ( ) )
assertEquals ( "Bye World" , out . getIn ( ) . getBody ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
result . assertIsSatisfied ( )
MockEndpoint . assertIsSatisfied ( context )
assertNotNull ( e . getCause ( ) )
assertThat ( cause . getTimeout ( ) ) . isEqualTo ( Duration . ofMillis ( 4000 ) )
assertEquals ( 4000 , cause . getTimeout ( ) . toMillis ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
assertThat ( ise . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( 98 , count )
assertNotNull ( t . getCause ( ) )
assertNotNull ( t . getCause ( ) )
assertNotNull ( t . getCause ( ) )
assertNotNull ( t . getCause ( ) )
assertEquals ( "tcp://localhost:2375" , profile . toUrl ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iaex . getMessage ( ) )
assertEquals ( "unix:///var/run/docker.sock" , profile . toUrl ( ) )
assertNotNull ( configurationProp )
assertEquals ( host , configurationProp )
assertEquals ( "dockerRegistry" , headerField )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( "dynamic-router:testname" , actualEndpoint . getEndpointUri ( ) )
assertEquals ( processor , component . getRoutingProcessor ( DYNAMIC_ROUTER_CHANNEL ) )
assertNull ( component . getRoutingProcessor ( DYNAMIC_ROUTER_CHANNEL ) )
assertNotNull ( result )
assertNotNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertThat ( result ) . isFalse ( )
assertEquals ( actualProducer . getClass ( ) , DummyProducer . class )
assertNotNull ( result )
assertNotNull ( processor . getFilter ( filterId ) )
assertEquals ( filterProcessor , result )
assertEquals ( 4 , matchingFilters . size ( ) )
assertEquals ( filterProcessor , result )
assertEquals ( result , processor . matchFilters ( exchange ) . get ( 0 ) )
assertEquals ( expectedResult , result )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , toString ( ) )
assertEquals ( "Expected trace label to be equal to id" , getId ( ) , ? ? ? )
assertThat ( result ) . isTrue ( )
assertThat ( result ) . isFalse ( )
assertEquals ( expected , result )
assertEquals ( ComponentVerifierExtension . Result . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertCollectionSize ( "Indexed documents should match the size of documents" , indexIds , documents . size ( ) )
assertCollectionSize ( "Indexed documents should match the size of documents" , indexIds , documents . size ( ) )
assertCollectionSize ( "Indexed documents should match the size of documents" , indexIds , documents . size ( ) )
assertCollectionSize ( "Indexed documents should match the size of documents" , indexIds , documents . size ( ) )
assertCollectionSize ( "Indexed documents should match the size of documents" , indexIds , documents . size ( ) )
assertEquals ( indexId , "<expectedValue>" )
assertEquals ( "twitter" , headers . get ( ElasticsearchConstants . PARAM_INDEX_NAME ) )
assertEquals ( true , pingResult )
assertEquals ( HttpStatus . UNAUTHORIZED , he . getStatusCode ( ) )
assertEquals ( Duration . ZERO , e . getTimeout ( ) )
assertEquals ( "arg1 \"arg2 \" arg3" , e . getArgs ( ) )
assertEquals ( "RAW(arg1+arg2 arg3)" , e . getArgs ( ) )
assertEquals ( timeout , e . getTimeout ( ) . toMillis ( ) )
assertEquals ( "1,2,3" , e . getExitValues ( ) )
assertEquals ( "" , e . getExitValues ( ) )
assertEquals ( outFile , e . getOutFile ( ) . getName ( ) )
assertEquals ( workingDir , e . getWorkingDir ( ) )
output . assertIsSatisfied ( )
output . assertEquals ( 1 , output . getReceivedCounter ( ) )
output . assertStreamEquals ( expectedInputStream , out )
assertEquals ( expected , inBody . getStdout ( ) )
assertEquals ( 0 , inBody . getExitValue ( ) )
output . assertEquals ( 1 , output . getReceivedCounter ( ) )
assertEquals ( "UTF-8" , defaultCharset )
assertNotNull ( e . getException ( ) )
assertEquals ( expected , inBody . getStdout ( ) )
assertEquals ( "Expected output string" , expectedString , e . toString ( ) )
assertEquals ( expectedByteArray , body )
assertEquals ( "expectedValue" , producerTemplate . sendBody ( "direct:input" , "test" ) )
assertEquals ( "noinput" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "noinput" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( 0 , exchange . getIn ( ) . getHeader ( EXEC_COMMAND_EXIT_VALUES ) )
assertEquals ( null , size ( so ) )
assertEquals ( workingDir , exchange . getIn ( ) . getHeader ( EXEC_COMMAND_WORKING_DIR ) )
assertEquals ( "inonly" , result . getBody ( ) )
assertEquals ( "inout" , result . getBody ( ) )
assertEquals ( "expectedValue" , body . getOutput ( ) )
assertEquals ( "arg 0" , args . get ( 0 ) )
assertEquals ( "\"arg0\"" , args . get ( 0 ) )
assertThat ( expectedType , equalTo ( actualType ) )
assertEquals ( "newpad" , map2 . get ( "product" ) )
assertEquals ( in , marshalled )
assertEquals ( marshalledAsString , "<expected marshalled string>" )
assertNotNull ( client , "Client should not be null" )
assertNotNull ( client , "Client should not be null" )
assertEquals ( expectedResult , result )
assertEquals ( Meta . class , headers . get ( "CamelFhir.metaType" ) )
assertNotNull ( result )
assertEquals ( Parameters . class , result . getClass ( ) )
assertEquals ( Parameters . class , result . getClass ( ) )
assertEquals ( null , headers . get ( "CamelFhir.respondToUri" ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( e . getCause ( ) )
assertNotNull ( patient . getActive ( ) )
mock . assertIsSatisfied ( )
assertNotNull ( map . get ( "importance" ) )
assertNotNull ( map . get ( "importance" ) )
assertNotNull ( map . get ( "importance" ) )
assertNotNull ( map . get ( "importance" ) )
assertEquals ( "JOHN" , s )
assertEquals ( 10L , linesCount )
assertEquals ( 100 , linesCount )
assertEquals ( 200L , linesCount )
assertTrue ( linesCount > 0 )
assertEquals ( output . exists ( ) , true )
assert pomLinesCount == expectedCount
assertEquals ( 1 , output . listFiles ( ) . length )
assert pomLinesCount == 100
assertEquals ( output . exists ( ) , true )
assertEquals ( "Test Content" , content )
assertEquals ( 72.0f , customSourceResolution )
assertEquals ( 72.0f , customSourceResolution )
assertEquals ( "Test User" , creator )
assertEquals ( "txt" , exchange . getIn ( ) . getHeader ( FopConstants . CAMEL_FOP_OUTPUT_FORMAT ) )
assertEquals ( pollStrategy , endpoint . getPollStrategy ( ) )
assertNotNull ( ex . getCause ( ) )
assertNotNull ( ex . getCause ( ) )
assertEquals ( "somewhere" , config . getHost ( ) )
assertThat ( ge . getCode ( ) , is ( equalTo ( "550" ) ) )
assertThat ( file . exists ( ) ) . isFalse ( )
assertThat ( file . exists ( ) ) . isTrue ( )
mock . message ( 0 ) . header ( Exchange . FILE_LAST_MODIFIED ) . isEqualTo ( t2 )
assertEquals ( t1 , t2 )
assertTrue ( file . exists ( ) )
assertThat ( file . exists ( ) ) . isTrue ( )
assertThat ( file . exists ( ) ) . isTrue ( )
assertTrue ( file . exists ( ) )
assertTrue ( file . exists ( ) )
assertThat ( file . exists ( ) ) . isTrue ( )
assertEquals ( "550 No such directory." , e . getMessage ( ) )
assertEquals ( null , out )
getMockEndpoint ( "mock:result" ) . expectedMessageCount ( 0 )
assertTrue ( exists ( "key" ) )
assertEquals ( "expectedValue" , endpoint . getDirectoryName ( ) )
assertNotNull ( consumer )
AssertPlaceHolder = "assertNotNull(producer);"
assertEquals ( true , file . exists ( ) )
assertThat ( cause . getExpression ( ) , endsWith ( "foo" ) )
assertThat ( cause . getMessage ( ) , startsWith ( "File name must not be empty" ) )
assertEquals ( "Expected exception message" , "Expected exception message" , iae . getMessage ( ) )
assertThat ( cause . getMessage ( ) , containsString ( "Invalid character" ) )
assertEquals ( "Bye World" , getTypeConverter ( ) . convertTo ( String . class , file ) )
assertEquals ( 0 , mock . getReceivedCounter ( ) )
resultEndpoint . assertIsSatisfied ( )
assertThat ( deletedFile . exists ( ) ) . isFalse ( )
assertThat ( file . exists ( ) ) . isFalse ( )
assertEquals ( expected , IOUtils . toString ( is , StandardCharsets . UTF_8 ) )
assertThat ( redisTemplate . hasKey ( key ) ) . isTrue ( )
assertTrue ( exists ( "key" ) )
assertThat ( exists ( "key" ) ) . isFalse ( )
assertThat ( status . getAdded ( ) , contains ( filenameToAdd ) )
assertTrue ( exists ( "key" ) )
assertEquals ( "delete from test.test_sql_table where id = 1" , answer )
assertEquals ( "classpath:sql/delete.sql" , answer )
assertThat ( answer , is ( equalTo ( expectedAnswer ) ) )
assertThat ( answer , is ( equalTo ( expectedAnswer ) ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertEquals ( expectedResult , result )
assertEquals ( 1 , result . getItems ( ) . size ( ) )
assertEquals ( "expectedValue" , result . getSetting ( ) )
assertEquals ( result , expected )
assertEquals ( result , expected )
assertEquals ( expectedResult , result )
assertEquals ( id , result . getId ( ) )
assertEquals ( expectedResult , result )
assertEquals ( fileId , result . getId ( ) )
assertEquals ( UPLOAD_FILE . getName ( ) , result . getTitle ( ) )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( theTestFile . getId ( ) , headers . get ( "CamelGoogleDrive.fileId" ) )
assertEquals ( "camel.png" , result . getTitle ( ) )
assertEquals ( null , headers . get ( "CamelGoogleDrive.fileId" ) )
assertEquals ( 1 , result . getItems ( ) . size ( ) )
assertEquals ( 1 , result . getItems ( ) . size ( ) )
assertEquals ( 1 , result . getItems ( ) . size ( ) )
assertEquals ( file . getName ( ) , "greeting.txt" )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ServiceStatus . Started , status )
assertEquals ( ServiceStatus . Started , status )
assertThat ( patches , hasItem ( "org.apache.camel/camel-stream/" + camelContext . getVersion ( ) ) )
assertEquals ( expectedBody , body )
assertEquals ( expectedBody , body )
result . assertIsSatisfied ( )
result . assertIsSatisfied ( )
assertEquals ( "Expected exception message does not match" , "Expected exception message" , message )
assertEquals ( inList , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( expected , marshalledAsString )
getMockEndpoint ( "mock:test" ) . assertIsSatisfied ( context )
getMockEndpoint ( "mock:allEvents" ) . assertIsSatisfied ( context )
getMockEndpoint ( "mock:wrapperEvents" ) . assertIsSatisfied ( context )
getMockEndpoint ( "mock:customListenerEvents" ) . assertIsSatisfied ( context )
assertEquals ( message , eventBus . getLastMessage ( ) )
assertEquals ( 1234L , body )
assertEquals ( 11L , body )
assertEquals ( 9L , body )
assertEquals ( 13L , result )
assertEquals ( TEST_VALUE , testValueReturn )
assertEquals ( "one" , template . requestBody ( "direct:add" , "one" ) )
assertEquals ( "two" , < AssertPlaceHolder >  )
assertEquals ( "three" , template . requestBody ( "direct:addWithOperationName" , "three" ) )
AssertPlaceHolder = "assertThat(list, hasItem(\"foo2\"));"
assertEquals ( "foo2" , receiveBody ( "direct:get" , timeout , String . class ) )
assertEquals ( "test" , list . get ( 1 ) )
assertThat ( list , not ( hasItem ( "foo2" ) ) )
assertEquals ( 1 , list . size ( ) )
assertNotNull ( receiveBody ( "direct:getAll" , timeout , type ) )
assertEquals ( "my-foo" , body )
assertEquals ( t , body )
assertEquals ( "my-foo" , body )
assertThat ( body , contains ( "my-foo" ) )
assertThat ( answer , is ( "foo" ) )
assertThat ( answer ) . isEqualTo ( "foo" )
assertThat ( answer , is ( 10 ) )
assertEquals ( 10 , answer )
assertEquals ( "pippo" , result )
assertEquals ( 13L , result )
assertEquals ( 13L , ringbuffer . capacity ( ) )
assertThat ( result ) . isEqualTo ( 2L )
assertEquals ( "pippo" , result )
assertEquals ( "pippo" , result )
assertThat ( result ) . isEqualTo ( 2L )
assertEquals ( "one" , template . requestBody ( "direct:add" , "one" ) )
assertEquals ( "two" , < AssertPlaceHolder >  )
assertEquals ( "three" , template . requestBody ( "direct:addWithOperationName" , "three" ) )
assertEquals ( 0 , set . size ( ) )
assertEquals ( "test" , receiveBody ( "direct:getAll" , 1000 , String . class ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , key . toString ( ) )
assertEquals ( aBoolean , rBoolean )
assertEquals ( aByte , rByte )
assertEquals ( anInt , rInt )
assertEquals ( aFloat , rFloat , 0.001 )
assertEquals ( aDouble , rDouble )
assertEquals ( aLong , rLong )
assertEquals ( txt , rTxt )
assertEquals ( "CIAO MONDO !" , value . toString ( ) )
assertEquals ( aByte , rByte )
assertEquals ( aByte , rByte )
assertEquals ( aByte , rByte )
assertEquals ( aByte , rByte )
assertEquals ( aByte , rByte )
assertEquals ( kerberosConfigFileLocation , actual )
assertEquals ( "line1\nline2\rline3" , result )
assertEquals ( 1 , mockEndpoint . getExchanges ( ) . size ( ) )
assertEquals ( 1 , mockEndpoint . getExchanges ( ) . size ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( "zh_CN" , value )
assertEquals ( ComponentVerifierExtension . Result . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( false , http . isFollowRedirects ( ) )
assertEquals ( false , http . isRedirectHandlingDisabled ( ) )
exchange . getIn ( ) . getHeader ( HTTP_URI ) . equals ( "/<>{}" )
assertEquals ( new URI ( "http://[2a00:8a00:6000:40::1413]:30300/test?test=true" ) , endpoint . getHttpUri ( ) )
assertThat ( cause . getMessage ( ) , equalTo ( "Expected error message" ) )
assertThat ( cause . getMessage ( ) , equalTo ( "Expected error message" ) )
assertEquals ( "camel rocks!" , body )
assertEquals ( "camel rocks!" , body )
assertEquals ( "camel rocks!" , body )
assertEquals ( expectedContent , body )
assertNotNull ( exchange . getIn ( ) . getBody ( ) )
assertNull ( exchange . getIn ( ) . getBody ( ) )
assertEquals ( 200 , result . getStatusCode ( ) )
assertEquals ( 403 , cause . getStatusCode ( ) )
assertEquals ( 421 , cause . getStatusCode ( ) )
assertNotNull ( e )
exchange . getIn ( ) . getHeader ( "socketTimeout" ) == 5000
assertEquals ( SocketTimeoutException . class , e . getClass ( ) )
assertNull ( out )
assertNull ( out )
assertEquals ( "1,2,3" , o )
assertEquals ( 200 , exchange . getResponse ( ) . getStatus ( ) )
assertEquals ( "http://camel.apache.org" , url )
assertEquals ( "http://camel.apache.org" , url )
assertEquals ( "http://camel.apache.org" , url )
assertEquals ( "http://www.google.com/search" , url )
assertEquals ( "http://www.google.com/search" , url )
assertEquals ( HttpMethods . POST , method )
assertEquals ( HttpMethods . GET , method . getMethod ( ) )
assertEquals ( "http://www.google.com/search?q=test" , endpoint . getHttpUri ( ) . toString ( ) )
assertEquals ( HttpMethods . GET , method . getMethod ( ) )
assertEquals ( true , method . isBridgeEndpoint ( ) )
assertEquals ( "http://www.google.com/" , url )
assertEquals ( "http://www.google.com/context/search?test=true" , url )
assertEquals ( "http://www.google.com/context/search?test=true" , url )
assertEquals ( ComponentVerifierExtension . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( "expectedValue" , getProperty ( responseExchange . getIn ( ) , "propertyName" ) )
assertEquals ( response , mockClient . deleteInstance ( Mockito . any ( DeleteInstanceRequest . class ) ) )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsNotSatisfied ( )
mock . assertIsSatisfied ( )
assertEquals ( "expectedValue" , getProperty ( responseExchange . getIn ( ) , "propertyName" ) )
assertEquals ( true , mockClient . headBucket ( Mockito . any ( String . class ) ) )
assertEquals ( credDefId , "<expected value>" )
assertThat ( first ) . isEqualTo ( PRESENTATION_ACKED )
assertEquals ( "credential_definition_id" , res )
assertEquals ( 100 , result . intValue ( ) )
assertThat ( results . size ( ) , equalTo ( 50 ) )
assertThat ( result , equalTo ( "---" ) )
assertEquals ( igniteComponent ( ) . getIgnite ( ) , ignite ( ) )
assertThat ( messages . size ( ) ) . isEqualTo ( 1 )
assertThat ( messages1 . size ( ) , equalTo ( 0 ) )
assertThat ( messages . size ( ) , is ( equalTo ( 1 ) ) )
assertEquals ( null , getIdempotentRepository ( ) . get ( "missingKey" ) )
assertEquals ( VALUE_ONE , value )
assertEquals ( true , getCache ( ) )
assertEquals ( true , getCache ( ) )
assertEquals ( false , getCache ( ) . containsKey ( KEY_ONE ) )
assertThat ( result ) . isFalse ( )
assertThat ( result ) . isTrue ( )
assertThat ( result ) . isFalse ( )
assertThat ( result ) . isTrue ( )
assertEquals ( false , getCache ( ) . containsKey ( KEY_ONE ) )
assertEquals ( "existing value" , result )
assertEquals ( "expected value" , getCache ( ) . get ( KEY_ONE ) )
assertEquals ( "existing value" , getCache ( ) . get ( KEY_ONE ) )
assertEquals ( VALUE_ONE , result )
assertEquals ( false , getCache ( ) )
assertEquals ( false , getCache ( ) )
assertEquals ( 0 , getCache ( ) . size ( ) )
assertEquals ( 2 , getCache ( ) . size ( ) )
assertEquals ( true , getCache ( ) )
assertEquals ( true , getCache ( ) )
assertThat ( keySet , containsInAnyOrder ( keys ) )
assertThat ( exchangeIdSet , contains ( key ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
resultEndpoint . assertIsSatisfied ( )
result . assertIsSatisfied ( context )
assertEquals ( 50 , exchanges . size ( ) )
assertEquals ( in , marshalledAsString )
assertEquals ( "2017-04-25T17:00:10Z" , marshalledAsString )
assertEquals ( in , marshalled )
assertEquals ( expected , marshalledAsString )
assertEquals ( marshalledAsString , context . getTypeConverter ( ) . convertTo ( String . class , marshalled ) )
assertEquals ( marshalledAsString , context . getTypeConverter ( ) . convertTo ( String . class , marshalled ) )
assertEquals ( marshalledAsString , template . requestBody ( "direct:in" , in ) )
assertNotNull ( marshalledAsString )
assertEquals ( "expectedValue" , marshalledAsString )
assertEquals ( expected , marshalledAsString )
assertEquals ( marshalledAsString , template . requestBody ( "direct:backAgeView" , marshalled ) )
assertEquals ( pojoAsMap , testByteBuffer )
assertEquals ( "{\"amount\":1,\"customerName\":\"Acme\",\"partName\":\"Camel\"}" , json )
assertEquals ( "{\"amount\":1,\"customerName\":\"Acme\",\"partName\":\"Camel\"}" , json )
assertEquals ( "" , convertedObject )
assertEquals ( Long . class , convertedObject . getClass ( ) )
assertEquals ( long . class , convertedObject . getClass ( ) )
assertEquals ( ExchangePattern . InOnly , convertedObject )
assertEquals ( name , testPojo . getName ( ) )
assertEquals ( in , marshalledAsString )
assertEquals ( "2017-04-25T17:00:10Z" , marshalledAsString )
assertEquals ( in , marshalled )
assertEquals ( expected , marshalledAsString )
assertEquals ( marshalledAsString , "<expected marshalled string>" )
assertEquals ( marshalledAsString , context . getTypeConverter ( ) . convertTo ( String . class , marshalled ) )
assertEquals ( marshalledAsString , context . getTypeConverter ( ) . convertTo ( String . class , marshalled ) )
assertNotNull ( marshalledAsString )
assertEquals ( expected , marshalledAsString )
assertEquals ( marshalledAsString , template . requestBody ( "direct:backAgeView" , marshalled ) )
assertEquals ( expected . toString ( ) , result )
assertEquals ( null , jasyptPropertiesParser . getEncryptor ( ) )
assertEquals ( "sys:myfoo" , jasyptPropertiesParser . getPassword ( ) )
assertEquals ( "ioc" , result )
assertEquals ( false , nonXmlCharFiltererMock . isFiltered ( '3' ) )
assertEquals ( name , obj . getName ( ) )
assertEquals ( 0 , is . available ( ) )
assertEquals ( "foo" , person . getFirstName ( ) )
assertEquals ( "foo\u0004" , person . getFirstName ( ) )
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( body , "<expected value>" )
assertEquals ( true , manager . getCache ( ) )
assertNull ( cache . get ( "key" ) )
assertThat ( exchange . getIn ( ) . getBody ( ) ) . isEqualTo ( val )
assertEquals ( testBody , gotEx . getIn ( ) . getBody ( ) )
assertEquals ( ex , gotEx )
assertEquals ( "UnsupportedOperationException should be thrown" , UnsupportedOperationException . class , assertThrows ( UnsupportedOperationException . class , ( ) -> remove ( ) ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( storageObject ) )
assertEquals ( 1 , mock . getExpecedMessageCount ( ) )
assertEquals ( 2 , mock . getExchanges ( ) . size ( ) )
assertNotNull ( body )
out = "application/myjson"
assertThat ( cause . getStatusCode ( ) , equalTo ( expectedStatusCode ) )
assertEquals ( expectedValue , out )
assertThat ( cause . getStatusCode ( ) , equalTo ( 401 ) )
assertEquals ( "expectedBody" , body )
assertEquals ( "Expected output" , expectedOutput , out )
assertNotNull ( out )
assertEquals ( "Hello World Thai Elephant \u0E08" , body )
assertEquals ( "http://localhost:" + port2 + "/querystring?id=test" , exchange . getIn ( ) . getHeader ( Exchange . HTTP_URI ) )
assertEquals ( "World" , out )
assertEquals ( "World" , out )
assertEquals ( new URI ( "http://[2a00:8a00:6000:40::1413]:30300/test?test=true" ) , endpoint . getHttpUri ( ) )
assertEquals ( out , template . requestBody ( uri , null , String . class ) )
assertEquals ( "http://localhost:{{port}}/myapp/mytest?columns=claus,s\u00F8ren&username=apiuser" , uri )
assertEquals ( "http://localhost:{{port}}/myapp/mytest?columns=totalsens,upsens&username=apiuser" , uri )
assertEquals ( "World" , response )
assertEquals ( "World" , response )
assertEquals ( "Hello World" , response )
assertEquals ( "gzip" , response . getHeader ( "Content-Encoding" ) )
assertEquals ( "expectedValue" , result )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Expected body" , expectedBody , body )
assertEquals ( "Expected body" , expectedBody , body )
assertEquals ( "Hello World" , out )
assertEquals ( "Hello World" , out )
mock . assertIsSatisfied ( context )
assertEquals ( "application/xml" , headerValue )
assertEquals ( "expectedValue" , out )
assertEquals ( HttpStatus . SC_MOVED_PERMANENTLY , cause . getStatusCode ( ) )
assertNotNull ( body )
out . assertNotNull ( )
assertEquals ( "Hello World!" , data )
out . assertEquals ( "HelloWorld" )
out , equalTo  ( "HelloWorld" )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertEquals ( "This is a test" , response )
assertEquals ( fileSize , response . length ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( response ) . isEqualTo ( "Hello World" )
assertEquals ( "Hello, World!" , data )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "expectedValue" , response )
assertEquals ( "Expected result" , "Actual result" , result )
assertEquals ( input , out )
assertEquals ( "Expected result" , expected , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , out )
assertEquals ( "Hello World" , out )
assertEquals ( "Kaboom" , e . getMessage ( ) )
getMockEndpoint ( "mock:result" ) . expectedMessageCount ( 1 )
assertNotNull ( out )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( "application/json" , out . getOut ( ) . getHeader ( Exchange . CONTENT_TYPE ) )
assertNotNull ( out )
out , equalTo  ( "expectedValue" )
out , equalTo  ( "expectedValue" )
out . assertEquals ( "expectedValue" , template . requestBody ( "http://localhost:" + getPort ( ) + "/users/456/name=g*" , null , String . class ) )
hofe . getStatusCode ( ) , equalTo ( StatusCode . SOME_STATUS_CODE )
assertEquals ( "POST" , headers . get ( Exchange . HTTP_METHOD ) )
assertNotNull ( out )
assertEquals ( "expectedValue" , out )
assertNotNull ( out )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
assertNotNull ( out )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertThat ( iae . getMessage ( ) , is ( "Invalid character '\\u0020' at index 0" ) )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( properties , endpoint . getProperties ( ) )
assertEquals ( "my-default-jgroups:" + CLUSTER_NAME , endpoint . getEndpointUri ( ) )
assertEquals ( CLUSTER_NAME , endpoint . getClusterName ( ) )
assertEquals ( endpoint . getResolvedChannel ( ) , resolvedChannel )
assertEquals ( MESSAGE , getMulticastChannelMessage ( ) )
assertEquals ( null , exchange . getIn ( ) . getBody ( ) )
assertEquals ( comment , lastComment )
assertEquals ( outbox . lastModified ( ) , offsetDateTime . toEpochSecond ( ) * 1000 )
assertTrue ( file . exists ( ) )
assertIsInstanceOf ( jakarta . jms . BytesMessage . class , msg )
assertIsInstanceOf ( jakarta . jms . BytesMessage . class , msg )
assertIsInstanceOf ( jakarta . jms . TextMessage . class , msg )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
AssertPlaceHolder = "Assert.assertTrue(consumer.isAutoStartup());"
assertEquals ( "foo" , value )
assertEquals ( Date . from ( instant ) , value )
assertEquals ( "Hello World" , reply )
assertSame ( sessions . get ( 0 ) , sessions . get ( 1 ) , "Should cache and reuse JMS session" )
assertEquals ( "Hello World" , out )
assertEquals ( "Kaboom" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertNotNull ( request )
assertEquals ( container , consumer . getListenerContainer ( ) )
assertEquals ( 5 , endpoint . getMaxConcurrentConsumers ( ) )
assertEquals ( 5 , endpoint . getMaxConcurrentConsumers ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( 4 , endpoint . getConcurrentConsumers ( ) )
assertEquals ( 4 , endpoint . getConcurrentConsumers ( ) )
assertEquals ( true , endpoint . isLazyCreateTransactionManager ( ) )
assertEquals ( EXPECTED_ISO_DATE , outDate )
assertEquals ( EXPECTED_ISO8601_DATE , outDate )
assertEquals ( 0 , errors . getExchanges ( ) . size ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "World" , msg )
out . assertNull ( )
out . assertNull ( )
MockEndpoint . assertIsSatisfied ( context , 30 , TimeUnit . SECONDS )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertEquals ( "expectedValue" , reply )
assertEquals ( expected , out )
assertEquals ( Map . class , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) . getClass ( ) )
mock . message ( 0 ) . body ( ) . isInstanceOf ( Map . class )
mock . message ( 0 ) . body ( ) . isInstanceOf ( Map . class )
assertEquals ( MyFooBean . class , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) . getClass ( ) )
mock . assertIsSatisfied ( )
assertEquals ( "Hello World" , reply )
AssertPlaceHolder = "assertNotNull(await(30, TimeUnit.SECONDS), " Response ");"
assertEquals ( "Hello World" , out )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertThat ( mock . getExchanges ( ) ) . hasSize ( 1 )
assertThat ( mock . getExchanges ( ) ) . isNotEmpty ( )
assertEquals ( "Hello World" , reply )
assertNotNull ( reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
assertNotNull ( reply )
assertNotNull ( reply )
assertNotNull ( e . getCause ( ) )
out is  not null
assertNotNull ( e . getCause ( ) )
out is  not null
assertEquals ( 2 , notifCollector . getExchanges ( ) . size ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertEquals ( null , body )
assertEquals ( "Hello bar" , out )
assertEquals ( 5 , count )
assertEquals ( 5 , count )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
mock . message ( 0 ) . body ( String . class ) . contains ( "James" )
mock . message ( 0 ) . body ( String . class ) . contains ( "Hiram" )
mock . message ( 0 ) . body ( String . class ) . contains ( "Hiram" )
mock . message ( 0 ) . body ( String . class ) . contains ( "Hiram" )
mock . message ( 0 ) . body ( String . class ) . contains ( "London" )
mock . message ( 0 ) . body ( String . class ) . contains ( "James" ) . isEqualTo ( true )
mock . message ( 0 ) . body ( String . class ) . contains ( "James" ) . assertIsSatisfied ( context )
assertEquals ( "custom-id" , reply )
assertNull ( context . getRouteController ( ) . getRoute ( "a" ) )
getMockEndpoint ( "mock:a" ) . assertIsEmpty ( )
out . assertEquals ( "Hello World" )
assertEquals ( "Hello World" , out )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertTrue ( file . exists ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
getMockEndpoint ( "mock:result" ) . message ( 0 ) . header ( "JMSCorrelationID" ) . isNull ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply . get ( ) )
assertEquals ( "Hello World" , out . getIn ( ) . getBody ( ) )
assertEquals ( "Hello World" , out . get ( ) . getIn ( ) . getBody ( ) )
mock . assertIsSatisfied ( )
response , equalTo  ( "Hello World" )
response , is  ( "Hello World" )
response , is  ( "Hello World" )
mock . expectedMessageCount ( 1 )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "What is your name?" , template . receiveBody ( "activemq:queue:JmsJMSReplyToConsumerEndpointUsingInOutTest" , 5000 , String . class ) )
assertEquals ( expectedStatus , context . getRouteController ( ) . getRouteStatus ( ROUTE_ID ) )
assertEquals ( expectedStatus , context . getRouteController ( ) . getRouteStatus ( ROUTE_ID ) )
assertEquals ( "Hello World" , dlqBody )
assertEquals ( "Hello World" , dlqBody )
assertEquals ( "Hello World" , dlqBody )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
out . assertEquals ( "Hello World" , template . requestBody ( "activemq:queue:TempReplyToIssueTest" , "World" , String . class ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "expectedId" , id )
assertEquals ( "expectedId" , id )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertSame ( on , ep . getJMXObjectNameCached ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( defaultsToPlatform ( ) , "<expected value>" )
assertEquals ( aFormat , getProperty ( "format" ) )
assertEquals ( aFormat , getProperty ( "user" ) )
// Add assertion here
assertEquals ( aHandback , ? ? ? handback ( ) )
assertEquals ( map , props )
assertEquals ( aReferenceToHashtable , getProperty ( "objectProperties" ) )
assertEquals ( "#" + aReferenceToHashtable , getProperty ( "objectProperties" ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertNotNull ( entity )
assertExpression ( "Object user = message.getHeader('user'); return user != null ? 'User: ' + user : 'No user exists';" , "No user exists" )
assertThat ( returnedCustomers . size ( ) , is ( 2 ) )
assertArrayEquals ( customers , returnedCustomers )
assertEquals ( "dummy" , email . getAddress ( ) )
assertEquals ( "foo@beer.org" , se . getAddress ( ) )
assertEquals ( marshalledAsString , template . requestBody ( "direct:in" , nc ) )
getMockEndpoint ( "mock:authors" ) . expectedMessageCount ( 1 ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:authors" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:authors" ) . assertIsSatisfied ( )
assertEquals ( "" , nofoo )
assertEquals ( "[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\",\"title\":\"Sword of Honour\",\"price\":12.99},{\"category\":\"fiction\",\"author\":\"Herman Melville\",\"title\":\"Moby Dick\",\"isbn\":\"0-553-21311-3\",\"price\":8.99},{\"category\":\"fiction\",\"author\":\"J. R. R. Tolkien\",\"title\":\"The Lord of the Rings\",\"isbn\":\"0-395-19395-8\",\"price\":22.99}]" , json )
assertEquals ( "[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\",\"title\":\"Sword of Honour\",\"price\":12.99},{\"category\":\"fiction\",\"author\":\"Herman Melville\",\"title\":\"Moby Dick\",\"isbn\":\"0-553-21311-3\",\"price\":8.99},{\"category\":\"fiction\",\"author\":\"J. R. R. Tolkien\",\"title\":\"The Lord of the Rings\",\"isbn\":\"0-395-19395-8\",\"price\":22.99}]" , json )
assertEquals ( "expectedValue" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( 1 , titles . size ( ) )
assertEquals ( "Invalid character '\\u00e9' at index 1" , e . getMessage ( ) )
assertNotNull ( connectionPool )
assertEquals ( AS400ConnectionPool . class , getConnectionPool ( ) . getClass ( ) )
testSystemName ( )  { assertEquals ( "expectedSystemName" , getSystemName ( ) ) ; }
testUserId ( )  { assertEquals ( "expectedUserId" , getUserId ( ) ) ; }
testSystemName ( )  { assertEquals ( "expectedSystemName" , getSystemName ( ) ) ; }
testUserID ( )  { assertEquals ( "expectedUserID" , getUserID ( ) ) ; }
assertEquals ( expectedPassword , getPassword ( ) )
assertEquals ( "<expected value>" , getObjectPath ( ) )
assertNotNull ( getFormat ( ) )
? ? ? assertEquals ( "Expected value" , actualValue )
assertEquals ( "PLAIN" , endpoint . getConfiguration ( ) . getSaslMechanism ( ) )
assertEquals ( props , producer . getProps ( ) )
assertEquals ( "sometopic" , endpoint . getConfiguration ( ) . getTopic ( ) )
assertEquals ( "anotherTopic" , in . getHeader ( KafkaConstants . OVERRIDE_TOPIC ) )
assertEquals ( 0 , offsetCache . getCacheSize ( ) )
to . assertIsSatisfied ( )
to . assertIsSatisfied ( )
assertEquals ( 2 , count )
assertEquals ( true , up )
assertThat ( up2 ) . isTrue ( )
assertThat ( up ) . isTrue ( )
assertEquals ( true , up )
assertArrayEquals ( expectedResult , result )
assertNotNull ( consumerRecords )
assertNull ( consumerRecords )
assertEquals ( "kamelet:mySetBody" , context . getRouteDefinition ( "direct:discovery" ) . getOutputs ( ) . get ( 0 ) . getEndpointUri ( ) )
assertThat ( members ) . containsExactly ( "one" , "two" , "three" )
assertDoesNotThrow ( ( ) -> doRefreshLeadership ( members ) )
assertEquals ( true , testNamespaceExists )
assertEquals ( true , podDeleted )
assertEquals ( true , rcDeleted )
assertNotNull ( result )
assertEquals ( 3 , result . size ( ) )
assertEquals ( "cm1" , result . getMetadata ( "name" ) )
assertEquals ( "cm1" , result . getMetadata ( "name" ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 200 , ex . getMessage ( ) . indexOf ( "Invalid character" ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( "test" , ns . getMetadata ( "name" ) )
assertEquals ( true , nsDeleted )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( true , nodeDeleted )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertNotNull ( result )
assertEquals ( 3 , result . size ( ) )
assertNotNull ( result )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
result . size ( )
result . size ( )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertNotNull ( searchResults )
assertEquals ( "ABCDE" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( String . class ) )
assertEquals ( "counter:99" , actual . getIn ( ) . getBody ( ) )
assertEquals ( "counter:" + i , actual . getIn ( ) . getBody ( ) )
assertEquals ( mock . getExchanges ( ) . size ( ) , 1 )
assertEquals ( null , out )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
assertEquals ( TEXT , result )
assertEquals ( prop . getProperty ( "mail.pop3.forgettopheaders" ) , "true" )
assertEquals ( expected , determinedType )
assertEquals ( "iso-8859-1" , exchange . getProperty ( Exchange . CHARSET_NAME ) )
assertEquals ( "text/plain; charset=ansi_x3.110-1983" , determinedType )
assertEquals ( 2500 , config . getConnectionTimeout ( ) . toMillis ( ) )
assertEquals ( "Hello World" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( 2000L , delta )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( null ) )
assertEquals ( BigInteger . valueOf ( 10 ) , size ( so ) )
assertNotNull ( replyTo )
assertEquals ( "=?US-ASCII?Q?My_Camel_=3F?=" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getHeader ( "subject" ) )
assertEquals ( BigInteger . valueOf ( 4 ) , mailbox . size ( storageObject ) )
assertEquals ( BigInteger . valueOf ( 10 ) , size ( so ) )
assertEquals ( BigInteger . valueOf ( 4 ) , mailbox . size ( storageObject ) )
assertEquals ( "Later date" , mailbox . get ( 1 ) )
MockEndpoint . assertIsSatisfied ( context )
assertEquals ( BigInteger . valueOf ( 3 ) , mailbox . size ( mockDesc ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
mock . assertIsSatisfied ( )
assertEquals ( "Hello Mailbox" , msg . getContent ( ) )
assertEquals ( "Body text" , result . getIn ( ) . getBody ( ) )
assertEquals ( "A" , in . getHeader ( HEADER_METRIC_NAME , String . class ) )
assertEquals ( null , in . getHeader ( HEADER_METRIC_NAME , String . class ) )
assertEquals ( "A" , getStringHeader ( in , HEADER_METRIC_NAME , defaultValue ) )
assertEquals ( null , in . getHeader ( HEADER_METRIC_NAME , String . class ) )
assertEquals ( " " , in . getHeader ( HEADER_METRIC_NAME , String . class ) )
assertEquals ( "" , in . getHeader ( HEADER_METRIC_NAME , String . class ) )
assertEquals ( 201L , in . getHeader ( HEADER_HISTOGRAM_VALUE , 19L , Long . class ) )
assertNull ( nullValue )
assertNull ( nullValue )
assertEquals ( AS2Endpoint . class , super . getEndpoint ( ) . getClass ( ) )
assertNull ( < AssertPlaceHolder > )
assertEquals ( VALUE , endpoint . getSubject ( ) )
assertEquals ( AS2Endpoint . class , super . getEndpoint ( ) . getClass ( ) )
assertNull ( < AssertPlaceHolder > )
assertEquals ( AS2Endpoint . class , getEndpoint ( ) . getClass ( ) )
assertNull ( < AssertPlaceHolder > )
assertNotNull ( type )
assertEquals ( DEFAULT_METRICS_TYPE , getMetricsType ( null ) )
? ? ? testIsSingleton ( ) { assertThat ( sut . isSingleton ( ) , is ( true ) ) ; } @ Test public void isSingleton  ( ) { "<AssertPlaceHolder>" ; } ? ? ?
assertNotNull ( getRegistry ( ) )
assertEquals ( "expectedValue" , getMetricsName ( "inputValue" ) )
assertNull ( < AssertPlaceHolder > )
assertEquals ( "expectedPropertyName" , getPropertyName ( ) )
assertEquals ( null , exchange . getProperty ( PROPERTY_NAME , Timer . Context . class ) )
assertEquals ( BigInteger . valueOf ( 10 ) , size ( so ) )
assertEquals ( 1 , endpoint . getExchanges ( ) . size ( ) )
assertEquals ( 1 , endpoint . getExpectedMessageCount ( ) )
assertEquals ( 1 , endpoint . getExpectedMessageCount ( ) )
assertEquals ( 1 , endpoint . getExpectedMessageCount ( ) )
assertEquals ( 1 , endpoint . getExchanges ( ) . size ( ) )
assertNotNull ( type )
assertEquals ( DEFAULT_METRICS_TYPE , getMetricsType ( null ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertThat ( checks , hasItem ( allOf (
assertThat ( checks , hasItem ( hasProperty ( "name" , equalTo ( "camel-components" ) ) ) )
assertEquals ( "Expected message count is 1" , 1 , mock . getReceivedCounter ( ) )
assertEquals ( "Chad" , out )
response . equals ( "World" )
out [ i ] == in [ i ]
assertEquals ( "Hello World 你好", ou t
assertEquals ( b , out )
assertEqual ( "200" , response ( fastEnough ) )
assertEqual ( "150" , response ( fastEnough ) )
assertEquals ( "Chad" , out )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertNotNull ( result )
assertEquals ( "Chad" , out )
assertEquals ( "Bye Chad" , out )
assertEquals ( "Bye Chad" , out )
assertEquals ( "Expected output" , expectedOutput , out )
assertEquals ( 4000 , out . length ( ) )
assertEquals ( filters1 . size ( ) , filters2 . size ( ) )
assertEquals ( "A" , out )
result . expectedBodiesReceived ( "Hello World" )
assertEquals ( null , out )
assertEquals ( "force-set-in-body" , out )
assertEquals ( in [ i ] , out [ i ] )
assertEquals ( "Hello" , out )
assertSame ( client , endpoint . getConfiguration ( ) . getMinioClient ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertFalse ( contains ( value ) )
assertThat ( contains ( value ) ) . isTrue ( )
assert contains ( value ) . test ( expression )
instance . getAcknowledgmentType ( ) , equalTo ( "AE" )
"<AssertPlaceHolder>" = assertEquals ( "AE" , instance . getAcknowledgmentType ( ) )
assertEquals ( "AE" , instance . getAcknowledgmentType ( ) )
assertEquals ( "AE" , instance . getAcknowledgmentType ( ) )
assertEquals ( 0 , mllpEndpoint . getMaxConcurrentConsumers ( ) )
assertEquals ( maxConcurrentConsumers , mllpEndpoint . getMllpConfiguration ( ) . getMaxConcurrentConsumers ( ) )
assertEquals ( "AE" , instance . getAcknowledgmentType ( ) )
assertNotNull ( acknowledgement )
assertEquals ( "HL7 payload is null" , message )
assertEquals ( "8859/1" , findMsh18 ( hl7Message , charset ) )
assertEquals ( "8859/1" , findMsh18 ( hl7Message , charset ) )
assertEquals ( "" , findMsh18 ( new byte [ ] { } , Charset . defaultCharset ( ) ) )
assertNull ( answer )
assertEquals ( expectedResult , result )
assertEquals ( "Invalid character '\\u0000' at index 0" , expectedEx . getMessage ( ) )
assertEquals ( "Expected HL7 string" , expectedHl7String , instance . toHl7String ( ) )
assertEquals ( "Invalid character '\\u0000' at index -5" , expectedEx . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , exception . getMessage ( ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertEquals ( b . get ( "field1" ) , "value1" )
assertEquals ( "expectedValue" , b . get ( "fieldName" ) )
assertEquals ( "{\"fruits\": [\"apple\", \"banana\"], \"veggie\": \"broccoli\", \"_id\": \"testInsertJsonString\"}" , b . toJson ( ) )
assertEquals ( "testInsertJsonStringWithSpaces" , b . get ( "_id" ) )
assertEquals ( document . toJson ( ) , b . toJson ( ) )
assertEquals ( IMPORTANCE , Importance . get ( importance ) )
assertNotNull ( oid )
assertEquals ( new ObjectId ( "5847e39e0824d6b54194e197" ) , oid )
assertEquals ( 2 , resultList . size ( ) )
assertEquals ( "foo" , ex . getMessage ( ) )
assertFalse ( found )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( 7 , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "{ \"text\": \"@{\"The result is \" + request.body * 3}\" }" , exchange . getIn ( ) . getHeader ( MvelConstants . MVEL_TEMPLATE ) )
assertEquals ( "Invalid character '\\u0007' at index 0" , getMessage ( ) )
mock . expectedMinimumMessageCount ( 2 )
assertEquals ( "John" , account . getFirstName ( ) )
assertEquals ( "John" , account . getFirstName ( ) )
assertEquals ( TEST_ACCOUNT_ID_BAD , account . getFirstName ( ) )
assertEquals ( "John" , account . getFirstName ( ) )
assertNotNull ( e . getCause ( ) . getCause ( ) )
assertNotNull ( cause . getExchange ( ) )
assertEquals ( "testError" , LogCaptureAppender . getLastLogMessage ( ) )
assertEquals ( "Hello World" , body )
assertEquals ( 401 , cause . getStatusCode ( ) . value ( ) )
getMockEndpoint ( "mock:input" ) . assertIsSatisfied ( context )
assertThat ( cause . getStatusCode ( ) ) . isEqualTo ( StatusCode . UNAUTHORIZED )
assertEquals ( "expectedBody" , body )
assertEquals ( "expectedBody" , body )
assertEquals ( "44777+7111222" , response )
mock . message ( 0 ) . header ( Exchange . HTTP_PATH ) . isEqualTo ( "/" + path )
assertEquals ( "expectedValue" , out )
assertEquals ( "text/plain; charset=\"UTF-8\"" , headers . get ( "content-type" ) )
assertEquals ( "Expected response" , expectedResponse , response )
assertEquals ( "31-03-2014" , date )
assertEquals ( "netty-http:http://localhost:{{port}}/myapp/mytest?columns=totalsens,upsens&username=apiuser" , uri )
assertEquals ( "expectedValue" , out )
assertEquals ( "expectedValue" , out )
assertTrue ( isException )
assertEquals ( true , isException )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Hello World" , out )
assertEquals ( "Hello World" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( "" , result )
assertEquals ( "GET" , headers . get ( Exchange . HTTP_METHOD ) )
assertEquals ( "GET" , headers . get ( Exchange . HTTP_METHOD ) )
assertEquals ( "" , result )
assertEquals ( "Hello World" , ex . getIn ( ) . getBody ( ) )
assertEquals ( "GET" , out )
getMockEndpoint ( "mock:input" ) . assertIsSatisfied ( context )
assertNotNull ( out )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , cause . getStatusCode ( ) )
MockEndpoint . assertIsSatisfied ( context )
assertEquals ( "Hello World" , out )
assertTrue ( ReadTimeoutException . class . isInstance ( cause ) , "Object should be of type " + ReadTimeoutException . class . getName ( ) + " but was: " + cause + " with the type: " + cause . getClass ( ) . getName ( ) )
assertEquals ( "Expected response" , expectedResponse , response )
assertEquals ( "Expected response" , expectedResponse , response )
out = "Hello World"
assertEquals ( "Hello Public" , out )
assertEquals ( 401 , cause . getStatusCode ( ) )
assertNotNull ( out )
assertEquals ( "Hello World" , out )
assertEquals ( HttpStatus . OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatus . OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , cause . getMessage ( ) )
assertThat ( e . getMessage ( ) , startsWith ( "Should have thrown exception" ) )
exchange . getProperty ( "buffer" , ByteBuf . class ) . release ( )
assertEquals ( "netty-http:proxy://localhost" , endpoint . getEndpointUri ( ) )
assertEquals ( "expectedValue" , out )
out , equalTo  ( "expectedValue" )
assertEquals ( "expectedValue" , out )
assertNotNull ( out )
assertEquals ( reply , ? ? ? )
receive . assertIsSatisfied ( )
assertEquals ( out , expectedOutput )
assertEquals ( "When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today." , response )
assertEquals ( out , expectedOutput )
assertEquals ( "Expected output" , expectedOutput , out )
assertThat ( e . getCause ( ) , instanceOf ( Exception . class ) )
assertEquals ( "Hello " + i , reply )
assertNotNull ( result )
assertEquals ( "Hello Camel" , out )
assertNotNull ( cause , "Expected an instance of type: ReadTimeoutException but was null" )
assertNotNull ( cause )
assertEquals ( expected , out )
assertEquals ( fromHexString ( SEND_STRING ) , exchange . getIn ( ) . getBody ( ) )
assertEquals ( REQUEST , response )
assertEquals ( SEND_STRING , template . requestBody ( "direct:in" , null , String . class ) )
assertEquals ( SEND_COUNT , exceptionCount )
assertEquals ( SEND_STRING , template . requestBody ( "direct:in" , null , String . class ) )
assertEquals ( SEND_COUNT , exceptionCount )
assertEquals ( date , receivedDate )
assertNotNull ( listIndices . getMessage ( ) . getBody ( ) )
assertNotNull ( listIndices . getMessage ( ) . getBody ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , ? ? ? getAttributesOperation ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , ? ? ? )
assertNotNull ( size ( so ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , ? ? ? getAttributesOperation ( ) )
assertNotNull ( size ( so ) )
assertNotNull ( ex )
assertEquals ( HttpStatusCodes . OK , statusCode )
assertEquals ( HttpStatusCodes . NO_CONTENT , statusCode )
assertNotNull ( serviceDocument )
assertEquals ( HttpStatusCode . OK , statusCode )
assertEquals ( HttpStatusCode . OK , statusCode )
assertNotNull ( value )
assertEquals ( "expectedValue" , value . getValue ( ) )
assertEquals ( HttpStatusCode . OK , status )
assertEquals ( HttpStatusCode . OK , status )
assertThat ( openApi . basePath , is ( expected ) )
assertEquals ( expected , openApi . getServers ( ) )
assertThat ( scheme , contains ( scheme ) )
assertThat ( schemas , contains ( scheme ) )
assertEquals ( id , captor . getValue ( ) )
assertEquals ( old . getName ( ) , newVolumeSn . getName ( ) )
assertEquals ( id , captor . getValue ( ) )
assertEquals ( id , out . getId ( ) )
assertEquals ( true , userInGroup )
assertNull ( out )
assertEquals ( "expectedValue" , out )
assertEqualsDomain ( domainCaptor . getValue ( ) , newDomain )
assertEquals ( networkID , domainIdCaptor . getValue ( ) )
assertEqualsGroup ( groupCaptor . getValue ( ) , dummyGroup )
assertEquals ( networkID , groupIdCaptor . getValue ( ) )
assertEquals ( old . getName ( ) , newProject . getName ( ) )
assertEquals ( networkID , projectIdCaptor . getValue ( ) )
assertEquals ( old . getDescription ( ) , newRegion . getDescription ( ) )
assertEquals ( networkID , regionIdCaptor . getValue ( ) )
assertEquals ( networkID , userIdCaptor . getValue ( ) )
assertEquals ( networkID , networkIdCaptor . getValue ( ) )
assertEquals ( portID , portIdCaptor . getValue ( ) )
assertEquals ( routerID , routerIdCaptor . getValue ( ) )
assertEquals ( subnetID , subnetIdCaptor . getValue ( ) )
assertEquals ( failReason , ActionResponse . actionFailed ( failReason , 401 ) . getReason ( ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertEquals ( CONTAINER_NAME , containerNameCaptor . getValue ( ) )
assertEquals ( "val" , msg . getHeader ( "key" ) )
assertEquals ( mockOsObject , objectService . get ( CONTAINER_NAME , OBJECT_NAME ) )
assertEquals ( 2 , objectsList . size ( ) )
assertEquals ( md , objectService . getMetadata ( CONTAINER_NAME , OBJECT_NAME ) )
assertEquals ( "asyncmock3:start" , template . sendBody ( "asyncmock3:start" , String . valueOf ( i ) ) )
assertEquals ( "Hello" , result . getIn ( ) . getBody ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( "paho-mqtt5" , this . pahoMqtt5SendDynamicAware . getScheme ( ) )
assertEquals ( "paho-mqtt5" , this . pahoMqtt5SendDynamicAware . getScheme ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( "Hello bar" , out )
buffer . toString ( )
assertEquals ( "text/html; charset=iso-8859-4" , exchange . getIn ( ) . getHeader ( Exchange . CONTENT_TYPE ) )
assertEquals ( BODY . getBytes ( ) , buffer . getBytes ( ) )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , buffer . toString ( ) )
assertEquals ( buffer . toString ( ) , "expectedValue" )
assertEquals ( "Expected result" , "BODY" , result )
assertEquals ( "text/html; charset=iso-8859-4" , exchange . getIn ( ) . getHeader ( Exchange . CONTENT_TYPE ) )
assertArrayEquals ( expectedByteArray , result )
assertEquals ( StreamCache . class , sc . getClass ( ) )
assertThat ( result , equalTo ( "TEST" ) )
// <AssertPlaceHolder>
assertNotNull ( mock ( 8080 ) )
? ? ? isSingleton ( ) { assertThat ( sut . isSingleton ( ) , is ( true ) ) ; } ? ? ?
assertEquals ( "wrong instance" , ex . getMessage ( ) )
assertEquals ( "pulsar://persistent/test/foobar/BatchCreated?numberOfConsumers=10&subscriptionName=batch-created-subscription&subscriptionType=Shared" , endpoint . getEndpointUri ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expectedExceptionMessage>" , e . getMessage ( ) )
assertNotNull ( factory )
assertEquals ( expected , PulsarMessageUtils . serialize ( in ) )
assertEquals ( expected , PulsarMessageUtils . serialize ( in ) )
assertEquals ( expected , PulsarMessageUtils . serialize ( 10 ) )
assertEquals ( 2 , mock . getExchanges ( ) . size ( ) )
assertEquals ( 0 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "Failed to create route" , reason )
assertNotNull ( e . getCause ( ) )
mock . assertExchangeReceived ( 0 , "foo" )
assertEquals ( "expectedValue" , getManagementName ( ) )
assertEquals ( "* * * * ?" , cronExpression )
assertEquals ( "0/2 * * * * ?" , cronExpression )
assertEquals ( ServiceStatus . Stopped , context . getRouteStatus ( "test" ) )
endpoint . assertIsSatisfied ( )
endpoint . assertIsSatisfied ( )
assertEquals ( 40 , endpoint . getExchanges ( ) . size ( ) )
exchange . getIn ( ) . getBody ( )
exchange . getIn ( ) . getBody ( ) instanceof Exception
exchange . getIn ( ) . getHeader ( "myheader" ) . equals ( 2 )
assertEquals ( service1 , CamelReactiveStreams . get ( context ) )
assertEquals ( 1000 , endpoint . getExchanges ( ) . size ( ) )
assertEquals ( "proxy to 1" , res )
assertEquals ( content , "after stream: " + ( - id ) )
assertEquals ( "onNext" , ex . getIn ( ) . getHeader ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE ) )
assertEquals ( "onError" , exch . getIn ( ) . getHeader ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE ) )
assertEquals ( numReqs , requests . size ( ) )
assertEquals ( "onNext" , ex . getIn ( ) . getHeader ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE ) )
assertEquals ( "onError" , exch . getIn ( ) . getHeader ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE ) )
ex . getIn ( ) . getBody ( Integer . class )
assertEquals ( componentJsonUri , component . getSpecificationUri ( ) )
assertEquals ( componentJsonUri , component . getSpecificationUri ( ) )
assertEquals ( null , endpoint . getSpecificationUri ( ) )
assertEquals ( "rest-openapi:#getPetById" , endpoint . getSpecificationUri ( ) . toString ( ) )
assertEquals ( "http://api.example.com" , isHostParam ( "http://api.example.com" ) )
assertEquals ( "http://api.example.com" , isHostParam ( "http://api.example.com" ) )
assertThat ( resource . getContentType ( ) , equalTo ( contentType ) )
assertEquals ( isValid , resource . isValid ( ) )
assertEquals ( "testName" , robotFrameworkEndpoint . getName ( ) )
assertNotNull ( robotFrameworkEndpoint . getOutput ( ) )
endpoint . expectedHeaderReceived ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE , "onNext" )
assertEquals ( "onError" , exch . getIn ( ) . getHeader ( ReactiveStreamsConstants . REACTIVE_STREAMS_EVENT_TYPE ) )
assertValueCount ( 3 )
assertEquals ( i , requestBody ( "direct:stream" , i , Integer . class ) )
assertThat ( requestBody ( "direct:stream" , i , Integer . class ) ) . isEqualTo ( - i )
ex . getIn ( ) . getBody ( Integer . class )
assertEquals ( 0 , recentReports . size ( ) )
assertEquals ( result , < expectedResult >  )
assertEquals ( result , < expectedResult >  )
assertEquals ( 0 , jobs . size ( ) )
assertEquals ( 0 , jobs . size ( ) )
assertEquals ( "optional" , get ( "optional" ) . toString ( ) )
assertEquals ( "SELECT Id, Name FROM Account" , batch . getQueries ( ) . get ( 0 ) )
assertEquals ( "SELECT Id, Name FROM Account" , batch . getQueries ( ) . get ( 0 ) )
assertEquals ( "Expected user name does not match" , expectedUserName , loginConfig . getUserName ( ) )
assertEquals ( expected , actual )
assertEquals ( null , got )
assertEquals ( merchandiseId , merchandise . getId ( ) )
assertNotNull ( sObjectDescription )
assertEquals ( 0 , globalObjects . size ( ) )
assertEquals ( 2 , versions . size ( ) )
assertEquals ( 1 , queryRecords . getRecords ( ) . size ( ) )
assertEquals ( result , expectedValue )
assertEquals ( 0 , queryRecords . getTotalSize ( ) )
assertEquals ( createCount , count )
assertEquals ( obj , expectedValue )
assertEquals ( limits , template . requestBody ( "salesforce:limits" , null , Limits . class ) )
assertEquals ( null , getHttpClient ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertThat ( configString , not ( containsString ( superSecretText ) ) )
assertEquals ( "expectedExtension" , getExtension ( ) )
assertEquals ( null , mspTest . getMspField ( ) )
assertEquals ( expectedJson , serialized )
assertEquals ( BigInteger . ZERO , size ( so ) )
assertEquals ( types , new Class [ ] { Account . class , Asset . class , Contact . class } )
assertEquals ( BigInteger . valueOf ( 1 ) , tree . size ( tree . getObject ( 0 ) ) )
assertEquals ( BigInteger . valueOf ( 2 ) , tree . size ( ) )
assertEquals ( BigInteger . valueOf ( 2 ) , tree . size ( ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( "expectedJwtAssertion" , jwtAssertion )
assertEquals ( "https://custom.salesforce.com:8443" , session . getInstanceUrl ( ) )
assertEquals ( "https://login.salesforce.com" , session . getInstanceUrl ( ) )
assertEquals ( 0 , elapsed )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( replayExtension ) )
assertEquals ( properCountExceptions , resultCountExceptions )
assertEquals ( properCountExceptions , resultCountExceptions )
assertEquals ( "def" , result )
assertEquals ( "def" , result )
assertEquals ( expectedOrderedIds , orderedIds )
assertEquals ( "<a>Hello|there|Camel</a>" , body )
assertEquals ( "<a>Hello|there|Camel</a>" , body )
assertEquals ( "<a>Hello|there|Camel</a>" , body )
assertEquals ( report , expectedReport )
assertEquals ( report , expectedReport )
assertNotNull ( exc . getOut ( ) . getBody ( ) )
assertNotNull ( exc . getOut ( ) . getBody ( ) )
assertNotNull ( exc . getOut ( ) . getBody ( String . class ) )
assertNotNull ( exc . getOut ( ) . getBody ( ) )
assertEquals ( ComponentVerifierExtension . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Status . PASSED , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( "Expected exception cause to be CamelExecutionException" , CamelExecutionException . class , ex . getClass ( ) )
assertNotNull ( response )
assertEquals ( 200 , response . getResponseCode ( ) )
assertEquals ( "expectedValue" , response . getText ( ) )
response . getResponseCode ( ) == 200
assertEquals ( "application/csv" , response . getHeaderField ( "Content-Type" ) )
assertNotNull ( ex . getCause ( ) )
assertNotNull ( component )
assertEquals ( "sjms:destination" , entry . getDestination ( ) )
assertEquals ( "sjms://destination" , exchange . getIn ( ) . getHeader ( "sjms" ) )
assertEquals ( expectedBody , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
getMockEndpoint ( MOCK_RESULT ) . assertIsSatisfied ( context )
assertEquals ( "Hello Claus" , body )
assertEquals ( "Hello Claus" , body )
assertEquals ( 5 , count )
assertEquals ( 3 , count )
assertNotNull ( t . getCause ( ) )
assertNotNull ( component )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( SlackConfig . DEFAULT , slackConfig )
assertEquals ( SlackConfig . DEFAULT , slackConfig )
assertEquals ( configuration , ? ? ? )
assertEquals ( "CancelSm" , exchange . getIn ( ) . getHeader ( SmppConstants . COMMAND ) )
assertEquals ( null , message . createBody ( ) )
assertEquals ( null , message . createBody ( ) )
assertEquals ( "Hello SMPP world!" , new String ( command . getShortMessage ( ) ) )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , message . toString ( ) )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , message . toString ( ) )
assertEquals ( "new short message body" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "expectedValue" , decodeBody ( body , dataCoding , defaultEncoding ) )
assertEquals ( null , decodeBody ( body , dataCoding , defaultEncoding ) )
assertNotNull ( exchange . getIn ( ) . getHeader ( headerName ) )
assertEquals ( "Hello Camel World!" , getHeader ( SmppConstants . COMMAND ) )
assertNotNull ( exchange . getIn ( ) . getHeader ( headerName ) )
assertNotNull ( actualElementName )
assertEquals ( "testName" , customer2 . getName ( ) )
assertEquals ( "none" , request . getName ( ) )
assertEquals ( "none" , request . getName ( ) )
assertEquals ( "Expected exception type" , expectedExceptionType , e . getClass ( ) )
assertEquals ( 1 , executeSolrQuery ( "id:" + TEST_ID ) . getResults ( ) . getNumFound ( ) )
config . getHost ( ) != null
assertEquals ( "mine" , config . getHost ( ) )
assertEquals ( "expectedSplunkEndpoint" , config . getSplunkEndpoint ( ) )
assertEquals ( "default" , config . getIndex ( ) )
assertEquals ( config . getSource ( ) , source )
config . setSourceType ( "expectedSourceType" )
assertEquals ( LocalTime . now ( ) , config . getTime ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertThat ( splunkEvent . getRaw ( ) , contains ( rawString ) )
assertEquals ( headerValue , parameter )
assertEquals ( null , parameter )
assertEquals ( headerValue , parameter )
assertEquals ( headerValue , parameter )
assertEquals ( headerValue , parameter )
assertEquals ( "total 10 of coffee ordered" , messageRead )
assertEquals ( null , messageRead )
assertEquals ( message , receiveBody ( endpointUri ) )
assertEquals ( expectedValue , receiveBody ( endpointUri ) )
assertEquals ( expectedValue , receiveBody ( endpointUri ) )
assertEquals ( dnToUnbind , dnCaptor . getValue ( ) )
assertNotNull ( main )
assertEquals ( "spring-rabbitmq:destination" , exchange . getTo ( ) . toString ( ) )
assertEquals ( "spring-rabbitmq" , this . springRabbitMQSendDynamicAware . getScheme ( ) )
assertEquals ( "Hello Claus" , body )
assertEquals ( "Hello World" , out )
assertEquals ( "value" , result )
assertEquals ( "PONG" , result )
assertNotNull ( result )
assertEquals ( 1L , result )
assertEquals ( fields , result )
assertEquals ( values , result )
assertEquals ( 2L , result )
assertEquals ( true , result )
assertEquals ( "value" , result )
assertEquals ( values , result )
assertEquals ( result , fields )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( "key*" , keys )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( "key" , result )
assertEquals ( true , result )
assertThat ( result , is ( list ) )
assertEquals ( 2L , result )
assertEquals ( DataType . STRING , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( "value" , result )
assertEquals ( 2L , result )
assertEquals ( 2L , result )
assertEquals ( 2L , result )
assertEquals ( 2L , result )
assertEquals ( values , result )
assertEquals ( 2L , result )
assertEquals ( 2L , result )
assertEquals ( 2L , result )
assertEquals ( null , result )
assertEquals ( 2L , result )
assertEquals ( difference , result )
assertEquals ( difference , result )
assertEquals ( field , result )
assertEquals ( field , result )
assertEquals ( Long . valueOf ( 1 ) , result )
assertEquals ( resultKeys , result )
assertEquals ( false , result )
assertEquals ( 2L , result )
assertEquals ( 3L , result )
assertEquals ( 3.0 , result )
assertEquals ( keys , result )
assertEquals ( null , result )
assertEquals ( keys , result )
assertEquals ( 1L , result )
assertEquals ( 1 , list . size ( ) )
assertEquals ( keys , result )
assertEquals ( null , result )
assertEquals ( keys , result )
assertEquals ( 1L , result )
assertEquals ( "test" , result )
assertEquals ( true , result )
assertEquals ( "value" , result )
assertEquals ( 5 , result )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( 2 , result )
assertEquals ( 3 , result )
assertEquals ( 5L , result )
assertEquals ( values , result )
assertEquals ( "new value" , result )
assertEquals ( "value" , get ( "required" ) )
assertEquals ( "value" , result )
assertEquals ( "expectedProcessorName" , processorName )
assertNotNull ( exception . getCause ( ) )
assertNotNull ( exception . getCause ( ) )
assertNotNull ( exception . getCause ( ) )
assertEquals ( "GOOG" , request . getSymbol ( ) )
assertEquals ( "expectedValue" , result )
assertEquals ( "http://default-ok.com/" , requestCallback . getEndpoint ( ) )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertEquals ( "http://uri-fault.com" , requestCallback . getUri ( ) )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertEquals ( "http://headerOnly-ok.com" , requestCallback . getEndpoint ( ) )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertEquals ( "http://uriFaultOnly-ok.com/" , requestCallback . getUri ( ) )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertNotNull ( requestCallback )
assertEquals ( "Expected value" , expectedValue , value )
assertEquals ( expectedValue , value )
assertEquals ( 4 , value )
assertEquals ( "expectedValue" , actualValue )
MockEndpoint . assertIsSatisfied ( context )
assertEquals ( "Expected result" , "Camel" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( uuidGenerator , factory . getContext ( ) . getUuidGenerator ( ) )
assertEquals ( SimpleUuidGenerator . class , uuidGenerator . getClass ( ) )
assertEquals ( expectedModelJAXBContextFactory , modelJAXBContextFactory )
assertEquals ( 10 , status . length )
assertEquals ( before + 1 , after )
assertThat ( camelContext . isStreamCaching ( ) ) . isTrue ( )
assertEquals ( before + 1 , after )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , testContextToString ( ) )
assertEquals ( true , agent . isStarted ( ) )
assertNotNull ( result )
assertEquals ( count , doSetProperty ( "count" , count ) )
assertEquals ( reg , context . getRegistry ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Hello World" , body )
assertEquals ( BigInteger . valueOf ( 1 ) , list . size ( ) )
assertEquals ( "expectedValue" , getRoutes ( r ) )
assertNotNull ( resolver )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( null , lookup )
assertEquals ( lookup , context . getRegistry ( ) . lookupByName ( "consumerTemplate" ) )
assertEquals ( lookup , context1 . getRegistry ( ) . lookupByNameAndType ( "template" , ProducerTemplate . class ) )
assertNotNull ( lookup )
assertNotNull ( lookup )
assertNull ( lookup )
assertEquals ( ServiceStatus . Started , camel . getRouteStatus ( "routeId" ) )
"<AssertPlaceHolder>"
assertEquals ( time1 , time2 )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "expectedValue" , getRoutes ( r ) )
assertEquals ( "expectedValue" , getRoutes ( r ) )
assertEquals ( InputStream . class , typeConverter . getClass ( ) )
out
out . trim ( ) . equals ( "World" )
out . trim ( ) . equals ( "Hello, World!" )
assertThat ( fileEndpoint , instanceOf ( FileEndpoint . class ) )
assertEquals ( 1 , delta )
assertEquals ( delta , 1 )
assertIsInstanceOf ( StreamSource . class , exchange . getIn ( ) . getBody ( ) )
assertEquals ( 1 , count )
assertIsInstanceOf ( StreamSource . class , exchange . getIn ( ) . getBody ( ) )
assertEquals ( 1 , count )
assertNotNull ( streamCache )
assertEquals ( "Expected response" , "Hello World" , response )
assertEquals ( "Expected response" , "Hello World" , response )
assertNotNull ( getCounter ( serializerType ) )
assertEquals ( expectedCount , count )
assertEquals ( 0 , count )
assertEquals ( expectedCount , count )
assertEquals ( count , 0 )
assertEquals ( expectedCount , count )
assertEquals ( 0 , count )
assertEquals ( dataResult , dataTap )
assertEquals ( "Hello A,Hello B" , out )
assertEquals ( 0 , counter . get ( ) )
assertThat ( e . getCause ( ) , instanceOf ( IllegalStateException . class ) )
assertThat ( e . getCause ( ) , instanceOf ( IllegalStateException . class ) )
getMockEndpoint ( "mock:result" ) . expectedHeaderReceived ( "foo" , "changed" )
assertThat ( set . size ( ) , is ( equalTo ( 1 ) ) )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( "expectedValue" , customFormatter . getFormattedLog ( ) )
assertEquals ( "expectedValue" , getId ( ) )
assertEquals ( "expectedValue" , getProperty ( exchange . getIn ( ) , "propertyName" ) )
assertThat ( getExecutorServiceManager ( ) . getThreadNamePattern ( ) , is ( notNullValue ( ) ) )
assertThat ( name , contains ( "report.txt" ) )
assertEquals ( "Order OK" , result . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Order ERROR" , error . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Order OK" , result . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Order ERROR" , error . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Order ERROR" , out )
assertNotNull ( e . getCause ( ) )
assertEquals ( "Nihao Willem" , response )
assertEquals ( expected , actual , 0.001 )
assertEquals ( 2 , filter . getScanTargets ( ) . size ( ) )
assertEquals ( filter , new InvertingPackageScanFilter ( new AnnotatedWithPackageScanFilter ( ScannableOne . class ) ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( type , object . getClass ( ) )
assertEquals ( results . getClass ( ) , hashSet . getClass ( ) )
out . expectedHeaderReceived ( "PersonID" , < expectedValue >  )
mock . assertIsSatisfied ( )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertThat ( e . getMessage ( ) , startsWith ( "Named parameter 'bar' does not exist in the message body" ) )
assertThat ( e . getMessage ( ) , containsString ( "Named parameter 'foo' does not exist in the message header" ) )
result . assertIsSatisfied ( )
assertEquals ( "Expected exception cause" , null , ex . getCause ( ) )
assertEquals ( "Expected exception cause" , expectedCause , ex . getCause ( ) )
assertNotNull ( row . get ( "importance" ) )
assertNotNull ( row . get ( "importance" ) )
assertEquals ( 2 , resultOfQuery . get ( "resultofsub" ) )
assertEquals ( REQUIRED , Importance . get ( "required" ) )
assertEquals ( "ADDNUMBERS2(1342 ${header.foo})" , template . toString ( ) )
assertEquals ( "ADDNUMBERS2(-1342 ${header.foo})" , template . getSql ( ) )
assertEquals ( - 1342 , template . getColonInLocation ( ) )
assertEquals ( "ADDNUMBERS2(OUT 1342 h1)" , template . getSql ( ) )
assertEquals ( "ADDNUMBERS2(OUT -1342 h1)" , template . getSql ( ) )
assertEquals ( "FOO('p_instance_id' INTEGER ${header.foo})" , template . toString ( ) )
assertEquals ( "FOO('p_instance_id' org.apache.camel.component.sql.stored.CustomType.INTEGER ${header.foo})" , template . toString ( ) )
assertEquals ( Importance . REQUIRED , template . getImportance ( ) )
assertEquals ( null , Importance . get ( null ) )
assertEquals ( "REQUIRED" , Importance . get ( "required" ) . toString ( ) )
assertEquals ( "FOO(OUT org.apache.camel.component.sql.stored.CustomType.INTEGER p_error_cd)" , template . parseTemplate ( "FOO(OUT org.apache.camel.component.sql.stored.CustomType.INTEGER p_error_cd)" ) )
assertEquals ( 11 , template . getParameters ( ) . get ( 0 ) . getScale ( ) )
assertEquals ( 10 , template . getParameters ( ) . get ( 0 ) . getScale ( ) )
exchange . getIn ( ) . getBody ( )
exchange . getIn ( ) . getBody ( ) != null
exchange . getIn ( ) . getBody ( )
assertEquals ( 2 , mock . getReceivedCounter ( ) )
assertEquals ( "ABCDE" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( String . class ) )
assertEquals ( "counter:99" , actual . getIn ( ) . getBody ( ) )
assertEquals ( "counter:" + i , actual . getIn ( ) . getBody ( ) )
assertEquals ( null , out )
// Example: Assert.assertTrue(condition)
assertFalse ( testLockNotGrantedForCurrentTimeStampPlus2Min ( ) )
assertNotNull ( < variable_name > )
assertEquals ( "Expected exception message" , expectedMessage , getException ( ) . getMessage ( ) )
stitchClient . withRegion ( StitchRegion . EUROPE )
assertEquals ( "Expected exception message" , expectedMessage , getException ( ) . getMessage ( ) )
assertEquals ( props , endpoint . getCustomHeaders ( ) )
assertEquals ( "A,B,C,D" , result )
assertEquals ( 1 , template . getReceivedCounter ( ) )
assertEquals ( "Hello" , template . requestBody ( "direct:in" , null ) )
assertEquals ( "Hello" . getBytes ( ) , template . getReceivedExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( byte [ ] . class ) )
assertEquals ( "Yay !" , response . getIn ( ) . getBody ( ) )
assertEquals ( "Yay !" , response . getIn ( ) . getBody ( ) )
exchange . getIn ( ) . getBody ( String . class )
exchange . getIn ( ) . getBody ( String . class )
exchange . getIn ( ) . getBody ( String . class )
assertTrue ( exists ( "hello_out" ) )
assertTrue ( exists ( "key" ) )
assertEquals ( false , exists ( "key" ) )
getMockEndpoint ( "mock:end" ) . assertIsSatisfied ( context )
assertEquals ( "wrapped message" , text )
assertEquals ( 2 , endpoint . getExchanges ( ) . size ( ) )
assertEquals ( res . getChat ( ) . getId ( ) , expectedChatId )
assertEquals ( newText , getText ( ) )
assertEquals ( newCaption , message . getCaption ( ) )
assertEquals ( "100" , streamConfig . getCapacity ( ) )
assertEquals ( null , extractCharset ( null , defaultValue ) )
assertEquals ( false , socket . getReuseAddress ( ) )
resultEndpoint . assertIsSatisfied ( )
resultEndpoint . assertIsSatisfied ( )
assertEquals ( null , get ( "invalid" ) )
out . assertEquals ( "Expected Output" , template . requestBody ( "direct:start" , "Hello World" , String . class ) )
assertEquals ( true , matches )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
mock . expectedBodiesReceived ( "Hello Will!" )
mock . expectedBodiesReceived ( value )
mock . assertIsSatisfied ( )
assertEquals ( 1 , result )
assertEquals ( 2 , result )
mock . expectedBodiesReceived ( "Hello Jack!" )
assertEquals ( "Hello Will!" , result )
mock . assertIsSatisfied ( )
mock . assertIsSatisfied ( )
getMockEndpoint ( "mock:a" ) . assertIsSatisfied ( )
assertEquals ( expectedManagementStrategy , testObj . getManagementStrategy ( ) )
assertEquals ( expectedManagementStrategy , testObj . getManagementStrategy ( ) )
assertNotNull ( getRoute ( ) )
assertEquals ( "David" , mockA . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertNotNull ( getRoute ( ) )
assertNotNull ( getDebugger ( ) )
assertEquals ( listenersInExpectedOrder , listenersSortedByPrecedence )
assertNotNull ( responseBody , "Response body" )
assertNotNull ( responseBody , "Response body" )
assertNotNull ( responseBody )
assertNotNull ( responseBody )
assertNotNull ( responseBody )
assertNotNull ( responseBody )
assertNotNull ( responseBody )
assertEquals ( expectedAddResult , addResult )
assertEquals ( "wrong instance" , ex . getMessage ( ) )
exchange . setProperty ( ACTIVE_SPAN_PROPERTY , null )
assertEquals ( "PUT" , decorator . getOperationName ( exchange , endpoint ) )
assertEquals ( "PUT" , getHttpMethod ( exchange , endpoint ) )
assertEquals ( HttpMethods . GET , getHttpMethod ( exchange , endpoint ) )
assertEquals ( 200 , message . getHeader ( Exchange . HTTP_RESPONSE_CODE , Integer . class ) )
assertEquals ( "jms://MyQueue?hello=world" , endpoint . getEndpointUri ( ) )
assertEquals ( "jms://MyQueue?hello=world" , endpoint . getEndpointUri ( ) )
assertEquals ( "abcd" , span . getTags ( ) . get ( "messageId" ) )
assertEquals ( "expectedOperationName" , getOperationName ( exchange , endpoint ) )
assertEquals ( "tags" , tags , doSetProperty ( "tags" , tags ) )
assertEquals ( "hello" , stripSchemeAndOptions ( endpoint ) )
assertEquals ( "hello" , stripSchemeAndOptions ( endpoint ) )
assertEquals ( "direct:hello" , stripSchemeAndOptions ( endpoint ) )
assertEquals ( messageId , decorator . getMessageId ( ) )
assertEquals ( "cometd://localhost:8080/service/mychannel" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( "INDEX" , opName )
assertEquals ( messageId , decorator . getMessageId ( ) )
assertEquals ( messageId , decorator . getMessageId ( ) )
assertEquals ( "cheese" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( "gauda" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( "test" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( "test" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( "Expected operation name" , "expectedOperationName" , getOperationName ( exchange , endpoint ) )
assertEquals ( "getOperationName(exchange, endpoint)" , "<expected value>" , getOperationName ( exchange , endpoint ) )
assertEquals ( expectedPath , getPath ( ) )
assertEquals ( "stomp:queue:test" , decorator . getDestination ( exchange , endpoint ) )
assertEquals ( TEST_NAME , exchange . getProperty ( Exchange . TIMER_NAME ) )
assertNotNull ( iterator . next ( ) )
assertEquals ( "key-1" , entry . getKey ( ) )
assertEquals ( "value1" , adapter . get ( "-key-1-" ) )
assertEquals ( "value1" , adapter . get ( "-key-1-" ) )
assertEquals ( ComponentVerifierExtension . Result . Status . SUCCESS , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . OK , result . getStatus ( ) )
assertEquals ( "twitter-search:foo?consumerKey=" + consumerKey + "&consumerSecret=" + consumerSecret + "&accessToken=" + accessToken + "&accessTokenSecret=" + accessTokenSecret , endpoint . getEndpointUri ( ) )
assertThat ( he . getStatusCode ( ) ) . isEqualTo ( StatusCode . UNAUTHORIZED )
he . getStatusCode ( ) == StatusCode . FORBIDDEN
assertEquals ( "expectedResult" , result )
assertEquals ( "expectedBody" , body )
assertEquals ( "/" , endpoint . getHttpURI ( ) . getPath ( ) )
assertEquals ( withSlash , endpoint . getHttpURI ( ) )
assertEquals ( "Hello World" , out )
assertEquals ( "POST" , out )
getMockEndpoint ( "mock:input" ) . assertIsSatisfied ( context )
assertEquals ( expected , actual )
assertThat ( actual , is ( expected ) )
assertEquals ( expected , actual )
AssertPlaceHolder = "assertNotNull(exchange);"
mock . assertIsSatisfied ( )
mock . assertEquals ( expectedLength , length )
assertEquals ( expectedStatusCode , status )
assertThat ( cause . getStatusCode ( ) , equalTo ( expectedStatusCode ) )
assertEquals ( "application/json" , out )
MockEndpoint . assertIsSatisfied ( context )
assertEquals ( "POST" , out )
assertEquals ( "Hello World" , out )
getMockEndpoint ( "mock:input" ) . assertIsSatisfied ( context )
assertNotNull ( out )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , cause . getStatusCode ( ) )
out . assertEquals ( "expectedValue" )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( "application/csv" , out )
out , equalTo  ( "expectedValue" )
out . contains ( "g*" )
hofe . getStatusCode ( ) , HttpStatus . METHOD_NOT_ALLOWED . getStatusCode ( )
assertNotNull ( out )
he . getStatusCode ( )
assertThat ( he . getStatusCode ( ) ) . isEqualTo ( StatusCode . UNAUTHORIZED )
getMockEndpoint ( "mock:input" ) . assertIsSatisfied ( context )
he . getStatusCode ( ) , is ( equalTo ( 403 ) ) )
assertThat ( he . getStatusCode ( ) ) . isEqualTo ( StatusCode . UNAUTHORIZED )
result . expectedBodiesReceived ( "1,2,3" )
result . expectedBodiesReceived ( "1,2,3" )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( "expectedResult" , result )
assertArrayEquals ( encodedString . getBytes ( "iso-8859-2" ) , buffer . getBytes ( ) )
assertEquals ( "Expected result" , expected , result )
assertEquals ( expectedValue , exchange . getIn ( ) . getHeader ( headerName ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( HttpMethod . PUT . name ( ) , result )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( "foo=bar&cheese=wine" , result )
assertEquals ( "Expected result" , "Actual result" , result )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( "PUT" , result )
assertEquals ( "Test Body" , result )
out , equalTo  ( "expectedValue" )
out . assertEquals ( "expectedValue" , template . requestBody ( "direct:static2" , null , String . class ) )
out , equalTo  ( "expectedValue" )
assertEquals ( out , expectedOutput )
assertEquals ( out , expectedOutput )
out . assertEquals ( "expectedValue" )
out . assertEquals ( "expectedValue" )
assertEquals ( "Expected result" , expected , result )
assertEquals ( "localhost" , comp . getProxyHost ( ) )
assertEquals ( "expectedValue" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "http://localhost:" + port + "?foo=bar#^[]" , result )
assertEquals ( "foo=bar#^[]" , result )
assertEquals ( "expectedResult" , result )
assertEquals ( BODY_PAYLOAD , result )
assertEquals ( BODY_PAYLOAD , result )
assertEquals ( BODY_PAYLOAD , result )
assertEquals ( fileContent , result )
assertEquals ( "Expected result" , expected , result )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( false , component . isAllowJavaSerializedObject ( ) )
assertEquals ( getTestServerUrl ( ) + "/alternate" , result )
assertEquals ( getTestServerUrl ( ) + "/alternate/with/path" , result )
assertEquals ( jsonArray , context . getTypeConverter ( ) . convertTo ( JsonArray . class , Buffer . buffer ( BODY ) ) )
jsonArray should  not be  null .
assertEquals ( jsonArray , ? ? ? )
assertEquals ( expectedJsonArray , jsonArray )
jsonArray should  not be  null .
assertEquals ( expectedJsonArray , jsonArray )
assertEquals ( "[{\"key\":\"value\"}]" , result . toString ( ) )
assertNotNull ( result )
assertArrayEquals ( expectedByteArray , result )
assertEquals ( 3 , result . size ( ) )
assertEquals ( jsonObject , expectedJsonObject )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , jsonObject . toString ( ) )
assertNotNull ( jsonObject )
assertNotNull ( jsonObject )
assertEquals ( new JsonObject ( BODY ) . getMap ( ) , jsonObject . getMap ( ) )
assertEquals ( jsonObject , expectedJsonObject )
result . assertEquals ( expectedResult )
assertEquals ( "Expected result" , expected , result )
assertArrayEquals ( expectedByteArray , result )
assertEquals ( result , expected )
assertThat ( body , startsWith ( "Geth-123" ) )
assertEquals ( "Net-123" , body )
assertThat ( body ) . isEqualTo ( "0x471" )
assertEquals ( true , body )
assertEquals ( peerCount , body )
assertEquals ( "123" , body )
assertThat ( body ) . isEqualTo ( "123" )
assertTrue ( body )
assertTrue ( body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( "test" , body )
assertThat ( body ) . isEqualTo ( BigInteger . ONE )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( "test" , body )
assertNotNull ( body )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( "test" , body )
assertNotNull ( body )
assertEquals ( Mockito . mock ( EthBlock . Block . class ) , body )
assertNotNull ( body )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( transaction , body )
assertEquals ( Optional . class , body . getClass ( ) )
assertEquals ( Mockito . mock ( EthBlock . Block . class ) , body )
assertEquals ( "test" , body )
assertNotNull ( body )
assertNotNull ( body )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( true , body )
assertEquals ( Collections . EMPTY_LIST , body )
assertEquals ( true , body )
assertEquals ( true , body )
assertEquals ( true , body )
assertThat ( body ) . isEqualTo ( "test" )
assertEquals ( true , body )
assertEquals ( "test" , body )
assertEquals ( true , body )
assertEquals ( "test" , body )
assertEquals ( "test" , body )
assertEquals ( true , body )
assertEquals ( "test" , body )
assertEquals ( true , body )
assertEquals ( BigInteger . ONE , body )
assertEquals ( true , body )
assertEquals ( nodeInfo , body )
assertThat ( body ) . isEqualTo ( "4444" )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( true , body )
assertEquals ( true , body )
assertEquals ( true , body )
assertEquals ( true , body )
assertEquals ( "secret" , body )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( "0x68656c6c6f20776f726c64" , body )
assertEquals ( "Expected body to be equal to NET_VERSION" , NET_VERSION , body )
assertEquals ( true , body )
assertNotNull ( body )
assertEquals ( ETH_PROTOCOL_VERSION , body )
assertEquals ( true , body )
assertEquals ( "ETH_COINBASE" , exchange . getIn ( ) . getBody ( String . class ) )
assertEquals ( true , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( 0 , body . size ( ) )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . valueOf ( 0 ) , body )
assertNotNull ( body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( "0x3B558E3a9ae7944FEe7a3A1010DD10f05a01034B" , exchange . getIn ( ) . getHeader ( ADDRESS ) )
assertEquals ( "expectedValue" , body )
assertEquals ( "0xc8CDceCE5d006dAB638029EBCf6Dd666efF5A952" , exchange . getIn ( ) . getHeader ( FROM_ADDRESS ) )
assertEquals ( "expectedValue" , body )
assertEquals ( "0xc8CDceCE5d006dAB638029EBCf6Dd666efF5A952" , exchange . getIn ( ) . getHeader ( FROM_ADDRESS ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertEquals ( "expectedValue" , body )
assertEquals ( "expectedValue" , body )
assertEquals ( "0xb082f44cb2faa0f33056d5a341d1a7be73ecfcc6eb3bcb643ab03016ce4b6772" , exchange . getIn ( ) . getHeader ( TRANSACTION_HASH ) )
assertEquals ( BigInteger . ZERO , exchange . getIn ( ) . getHeader ( INDEX ) )
assertEquals ( BigInteger . ZERO , exchange . getIn ( ) . getHeader ( INDEX ) )
assertEquals ( BigInteger . ZERO , exchange . getIn ( ) . getHeader ( INDEX ) )
assertEquals ( BigInteger . ZERO , exchange . getIn ( ) . getHeader ( INDEX ) )
assertEquals ( 1 , body . size ( ) )
assertNotNull ( body )
assertNotNull ( body )
assertEquals ( serpentSample , exchange . getIn ( ) . getHeader ( SOURCE_CODE ) )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( BigInteger . ZERO , body )
assertEquals ( true , body )
assertEquals ( 1 , body . size ( ) )
assertEquals ( 6 , exchange . getIn ( ) . getHeader ( FILTER_ID ) )
assertEquals ( 0 , body . size ( ) )
assertEquals ( 0 , body . size ( ) )
assertEquals ( true , body )
assertEquals ( true , body )
assertEquals ( SHH_VERSION , body )
assertNotNull ( body )
assertEquals ( "expectedValue" , body )
assertEquals ( true , body )
assertEquals ( SHH_NEW_GROUP , exchange . getIn ( ) . getHeader ( OPERATION ) )
assertEquals ( true , body )
assertEquals ( new BigInteger ( "0x04f96a5e25610293e42a73908e93ccc8c4d4dc0edcfa9fa872f50cb214e08ebf61a03e245533f97284d442460f2998cd41858798ddfd4d661997d3940272b717b1" ) , body )
assertEquals ( true , body )
assertEquals ( 1 , body . size ( ) )
assertEquals ( 1 , body . size ( ) )
assertThat ( body ) . startsWith ( value )
assertEquals ( "Expected body to be null" , null , body )
assertEquals ( "0x68656c6c6f20776f726c64" , body )
assertEquals ( "" , result )
assertEquals ( "expectedResult" , result )
assertEquals ( "/expectedValue" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( res , startsWith ( "expectedValue" ) )
assertEquals ( 1 , dataset . size ( ) )
assertEquals ( sourceUrl , dataset . getSourceUrl ( ) )
assertEquals ( absPath . toUri ( ) . toURL ( ) . openStream ( ) , input )
assertEquals ( 1 , dataset . size ( ) )
assertEquals ( absPath . toUri ( ) . toURL ( ) . openStream ( ) , input )
assertEquals ( outpath , dataset . getPath ( ) )
assertEquals ( outpath , dataset . getPath ( ) )
assertEquals ( inpath , outpath )
assertEquals ( 0 , balances . size ( ) )
assertEquals ( 0 , wallets . size ( ) )
assertEquals ( 0 , records . size ( ) )
assertEquals ( "direct:tickerBTCUSDT" , endpoint )
assertEquals ( Boolean . TRUE , headers . get ( XmlSignatureConstants . HEADER_OMIT_XML_DECLARATION ) )
assertEquals ( payload , mock . getReceivedExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "{wrongformat" , endpoint . getConfiguration ( ) . getOutputNodeSearch ( ) )
assertEquals ( "{wrongformat}" , context . getEndpoint ( "xmlsecurity-verify:outputnodesearchelementname?keySelector=#selectorKeyValue" + "&outputNodeSearchType=ElementName&outputNodeSearch={http://test/test}root&removeSignatureElements=true" , XmlVerifierEndpoint . class ) . getConfiguration ( ) . getOutputNodeSearch ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedExchanges ( ) . size ( ) )
assertEquals ( 0 , mockResult . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , mock . getReceivedCounter ( ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( attr )
assertEquals ( expectedBody , body )
assertEquals ( "expectedValue" , transformer . getOutputProperty ( "outputProperty" ) )
assertEquals ( 3 , count )
assertEquals ( "expectedResult" , result )
result . expectedMessageCount ( 1 )
assertTrue ( exists ( "hello_out" ) )
assertTrue ( exists ( "hello_out" ) )
getMockEndpoint ( "mock:end" ) . assertIsSatisfied ( context )
getMockEndpoint ( "mock:end" ) . assertIsSatisfied ( context )
assertEquals ( "RAW(_BEFORE_AMPERSAND_&_AFTER_AMPERSAND_)" , sftp . getPassword ( ) )
assertNotNull ( listing . getResult ( ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "expectedState" , zk . getState ( ) )
assertEquals ( operation , getExistsOrWaitOperation ( node ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertEquals ( 2 , connection . getChildren ( path , false ) . size ( ) )
assertEquals ( 0 , connection . getChildren ( path ) . size ( ) )
assertEquals ( null , get ( "invalid" ) )
result . assertSuccess ( )
assertEquals ( result . getData ( ) , null )
result . assertSuccess ( )
result . assertSuccess ( )
assertEquals ( CreateMode . EPHEMERAL_SEQUENTIAL , create . getCreateMode ( ) )
assertEquals ( result . getStatusCode ( ) , 200 )
assertArrayEquals ( "Really trust us" . getBytes ( ) , getBytes ( resultSet ) )
assertEquals ( null , get ( "invalid" ) )
assertTrue ( exists . getResult ( ) )
assertEquals ( true , exists . execute ( ) )
assertEquals ( null , Importance . get ( importance ) )
assertEquals ( REQUIRED , Importance . get ( "required" ) )
assertEquals ( "Updated" . getBytes ( ) , getStatistics ( result . getMessage ( ) ) )
assertEquals ( "Expected port to be 'foo'" , "foo" , loadBalancer . getPort ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , col . size ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( Integer . class , e . getType ( ) )
assertEquals ( 5000 , e . getTimeout ( ) . toMillis ( ) )
assertEquals ( "foo" , e . getMessage ( ) )
assertSame ( exchange , e . getExchange ( ) )
assertIsInstanceOf ( FailedToStartRouteException . class , e )
e . getUri ( ) , equalTo ( "foo:bar" )
assertEquals ( BigInteger . valueOf ( 3 ) , size ( storageObject ) )
exchange . getPattern ( ) . equals ( builtExchange . getPattern ( ) )
assertNotNull ( properties )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertNotNull ( result )
assertThat ( e . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Should have thrown an exception" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( routes . size ( ) , 2 )
getMockEndpoint ( "mock:result" ) . expectedMessageCount ( 1 )
getMockEndpoint ( "mock:result" ) . expectedMessageCount ( 1 )
getMockEndpoint ( "mock:out" ) . assertIsSatisfied ( )
assertNotNull ( getRoute ( ) )
getMockEndpoint ( "mock:out" ) . assertIsSatisfied ( )
assertEquals ( "200" , exchange . getIn ( ) . getHeader ( "head" ) )
assertEquals ( "Expected namespace URI" , expectedURI , uri )
mock . expectedBodiesReceived ( "<number xmlns=\"http://acme.com/cake\">55</number>" )
assertEquals ( expected , num )
assertEquals ( "123" , num )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<expectedValue>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "<hello>world!</hello>" , exchange . getOut ( ) . getBody ( String . class ) )
assertNotNull ( exchange . getMessage ( ) . getBody ( ) )
assertNotNull ( exchange . getMessage ( ) . getBody ( ) )
assertThat ( body , endsWith ( "<AssertPlaceHolder>" ) )
assertEquals ( false , builder . isFailOnNullBody ( ) )
assertThat ( nshe . getHeaderName ( ) , is ( equalTo ( headerName ) ) )
assertEquals ( "acme?name=foo&amount=123&port=4444&verbose=true" , uri )
assertEquals ( "acme://foo:123@localhost:4444?verbose=true" , uri )
assertEquals ( "acme?name=foo&verbose=false&port=4444&amount=123" , uri )
assertEquals ( "acme?name=bar&verbose=false&amount=123" , uri )
assertEquals ( "acme2?name=bar&path=moes&verbose=true&amount=123" , uri )
assertEquals ( "acme2?name=bar&path=moes&port=4444&verbose=true&amount=123" , uri )
assertEquals ( "acme2?name=bar&port=4444&verbose=true&amount=123" , uri )
assertEquals ( "acme2?name=bar&verbose=true&amount=123" , uri )
assertEquals ( "jms2:foo?destinationType=topic&deliveryPersistent=true" , uri )
assertEquals ( "jms2:queue:foo?deliveryPersistent=true" , uri )
assertEquals ( "jms2:foo?deliveryPersistent=true" , uri )
assertEquals ( "jmsx:foo?deliveryPersistent=true&username=usr&password=pwd" , uri )
assertEquals ( "timer:foo?period=123&repeatCount=5" , uri )
assertEquals ( "file:src/data/inbox?delay=5000&directoryName=src/data/inbox&noop=true" , uri )
assertThat ( results . size ( ) , equalTo ( events ) )
assertNull ( context . getRouteController ( ) . getRoute ( "foo" ) )
assertEquals ( ServiceStatus . Stopped , getRouteStatus ( routeId ) )
assertEquals ( true , cs . getView ( ) . isLeader ( ) )
assertThat ( iae . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( true , b )
assertNotNull ( size ( so ) )
out . assertEquals ( "Expected Output" , template . requestBody ( "direct:bye" , "Camel" , String . class ) )
out . assertEquals ( "Expected Output" , template . requestBody ( "direct:foo" , "Camel" , String . class ) )
out . assertEquals ( "Camel" , template . requestBody ( "direct:foo" , new ByteArrayInputStream ( "Camel" . getBytes ( ) ) , String . class ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Expected response" , expectedResponse , response )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , beanInfo . size ( new StorageObject ( ) ) )
assertEquals ( "Camel" , reply )
assertThat ( cause . getMethodName ( ) , is ( equalTo ( "methodName" ) ) )
assertNotNull ( cause . getMethodName ( ) )
assertEquals ( "expectedValue" , result )
assertNull ( result )
assertNotNull ( cause )
assertNotNull ( cause . getValue ( ) )
assertNotNull ( cause )
assertNotNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertThat ( cause . getMessage ( ) , containsString ( "Invalid value" ) )
assertEquals ( times , template . getExchanges ( ) . size ( ) )
assertEquals ( "<expected value>" , reply )
assertEquals ( "<expected value>" , reply )
assertEquals ( "<expected value>" , reply )
assertEquals ( "beer" , cause . getType ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "" , reply )
assertEquals ( "" , reply )
assertEquals ( "<expected value>" , reply )
assertEquals ( "<expected value>" , reply )
assertEquals ( "<expected value>" , reply )
assertEquals ( "beer" , cause . getType ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "" , reply )
assertEquals ( null , out )
out . assertNotNull ( )
assertNull ( size ( so ) )
assertNotNull ( mnfe . getBean ( ) )
assertNotNull ( mnfe . getBean ( ) )
assertEquals ( expectedBody , template . requestBodyAndHeader ( "direct:in" , null , "foo" , "bar" ) )
assertThat ( not . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( "<hello>world!</hello>" , exchange . getIn ( ) . getBody ( String . class ) )
assertEquals ( "bar" , template . getRequest ( ) . getHeader ( "foo" ) )
assertEquals ( response , expectedResponse )
assertEquals ( "expectedValue" , response )
assertEquals ( "Expected result" , "Hello World" , reply )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( expectedBody , template . requestBodyAndHeader ( "direct:in" , null , "foo" , "bar" ) )
assertEquals ( "4" , reply )
assertEquals ( "Hello World" , template . getAndClearBody ( ) )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( "Chris" , resultPerson . getName ( ) )
assertNotNull ( be )
assertNull ( size ( so ) )
assertEquals ( ServiceStatus . Started . name ( ) , getRouteStatus ( "routeId" ) )
assertEquals ( true , reported . get ( ) )
assertEquals ( "Hi" , ds . getDefaultBody ( ) )
assertThat ( endpoint . allMessages ( ) . body ( ) , startsWith ( "Hi " ) )
assertEquals ( "Expected response" , expectedResponse , response )
assertNotNull ( cause . getExchange ( ) )
assertEquals ( "Code must not be null" , exp . getMessage ( ) )
assertEquals ( "Attribute must not be null" , exp . getMessage ( ) )
assertEquals ( "unknown" , ComponentVerifierExtension . Scope . fromString ( "unknown" ) )
mock . expectedBodiesReceived ( "Hello World \u4f60\u597d" )
assertEquals ( false , Files . exists ( testDirectory ( ) ) )
assertThat ( getCounter ( SerializerType . SOME_SERIALIZER_TYPE ) . get ( ) , is ( equalTo ( 2 ) ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 0 , mock . getReceivedCounter ( ) )
assertThat ( mock . getExchanges ( ) ) . hasSize ( 1 )
assertThat ( LATCH . getCount ( ) ) . isEqualTo ( 0 )
assertTrue ( mock . getExchanges ( ) . isEmpty ( ) )
assertEquals ( 1 , mock . getExchanges ( ) . size ( ) )
getMockEndpoint ( "mock:foo" ) . expectedMessageCount ( 1 )
assertThat ( cnfe . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertThat ( e . getMessage ( ) , startsWith ( "Access is denied" ) )
assertEquals ( 2 , files )
assertEquals ( body , data )
assertEquals ( "expectedValue" , body )
assertThat ( e . getMessage ( ) , containsString ( "Invalid starting path" ) )
assertTrue ( exists ( "key" ) )
assertEquals ( true , exists ( "key" ) )
assertEquals ( "Expected exception message" , "Expected exception message" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0003' at index 0" , e . getMessage ( ) )
assertThat ( cause . getCode ( ) , is ( equalTo ( "FileExistFail" ) ) )
assertThat ( cause . getExpression ( ) , endsWith ( "foo" ) )
assertThat ( cause . getMessage ( ) , startsWith ( "File name cannot be empty" ) )
assertStringContains ( message . toString ( ) , "RouteCoverageNode[lineNumber=, count=, name='', level=, className='']" )
assertEquals ( "application/octet-stream" , message . getHeader ( "Content-Type" ) )
< AssertPlaceHolder >
assertThat ( writer . toString ( ) , containsString ( "1" + LS + "2" + LS + "3" ) )
assertEquals ( 2 , getCounter ( SerializerType . DEFAULT ) . get ( ) )
assertEquals ( 2 , getCounter ( SerializerType . JSON ) . get ( ) )
assertEquals ( "log:com.example.LogCustomLoggerTest" , endpointUri )
assertEquals ( 2 , context . getRegistry ( ) . findByType ( Logger . class ) . size ( ) )
assertEquals ( 1 , context . getRegistry ( ) . lookup ( "logger" ) . getAppenders ( ) . size ( ) )
assertMockEndpointsSatisfied ( )
assertNotNull ( logged . get ( ) )
assertEquals ( "password=passw0rd@" , customFormatter . getMaskedValue ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertIsInstanceOf ( IllegalArgumentException . class , e . getCause ( ) )
assertIsInstanceOf ( AssertionError . class , e . getCause ( ) )
assertEquals ( null , size ( so ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertThat ( s , startsWith ( "Assertion error at index 1 on mock mock://result with predicate: header(bar) == 444 evaluated as: 234 == 444" ) )
assertEquals ( s , e . getMessage ( ) )
assertThat ( mock . message ( 1 ) . header ( "bar" ) . getHeader ( ) ) . isInstanceOf ( String . class )
assertEquals ( "Good Bye!" , rc )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertSame ( foo , context . getRegistry ( ) . lookupByName ( "foo" ) )
assertThat ( hasComponent ( componentName ) ) . isTrue ( )
getMockEndpoint ( "mock:result" ) . allMessages ( ) . body ( ) . isNull ( )
assertNotNull ( size ( storageObject ) )
getMockEndpoint ( "mock:result" ) . allMessages ( ) . body ( ) . isNull ( )
assertEquals ( "myKey" , out )
assertNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
"<AssertPlaceHolder>"
getMockEndpoint ( "mock:hello" ) . expectedMessageCount ( 1 )
assertEquals ( 1 , def . getInputs ( ) . size ( ) )
assertEquals ( "#host-ref" , endpoint . getHost ( ) )
assertEquals ( "http://localhost:8080" , endpoint . getHost ( ) )
assertEquals ( "expectedValue" , result . getStatus ( ) )
assertEquals ( ComponentVerifierExtension . Result . Status . ERROR , result . getStatus ( ) )
assertEquals ( "json" , restEndpoint . getBindingMode ( ) )
assertEquals ( "" , actual )
assertEquals ( "rest:get:list/{id}_{val}" , actual )
assertEquals ( "rest:get:list/1/{val}" , actual )
assertEquals ( "rest:get:list/1_<val>" , actual )
assertEquals ( "rest:get:list/1_test" , actual )
assertEquals ( "rest:get:list/id}" , producer . getEndpoint ( ) . getEndpointUri ( ) )
assertEquals ( "rest:get:list/{id" , producer . getEndpointUri ( ) )
assertEquals ( "rest:get:list/{id_{val}" , producer . getEndpointUri ( ) )
assertEquals ( "rest:get:list/1" , actual )
assertEquals ( "rest:get:list/1_test" , actual )
assertEquals ( "items/item.xml" , actual )
assertNotNull ( get ( "required" ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , ise . getMessage ( ) )
assertNotNull ( refe . getCause ( ) )
assertNotNull ( seda . getQueue ( ) )
getMockEndpoint ( MOCK_URI ) . assertIsSatisfied ( )
getMockEndpoint ( MOCK_URI ) . assertIsSatisfied ( )
assertEquals ( 20 , mock . getReceivedCounter ( ) )
assertEquals ( 2000 , blockingQueue . remainingCapacity ( ) )
assertEquals ( 5 , endpoint . getConcurrentConsumers ( ) )
assertSame ( seda , consumer . getEndpoint ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( blockingQueue . remainingCapacity ( ) , queue . remainingCapacity ( ) )
assertEquals ( 100 , blockingQueue . remainingCapacity ( ) )
assertThat ( b ) . isTrue ( )
assertEquals ( "World" , out . get ( ) )
assertEquals ( "Expected result" , "World" , out . get ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , exception . getMessage ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
te . getTimerName ( ) , equalTo ( timerName )
assertNotNull ( get ( "required" ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , ise . getMessage ( ) )
result . assertIsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertEquals ( Duration . ofMillis ( 1000 ) , cause . getTimeout ( ) )
assertNotNull ( cause . getExchange ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertThat ( b , is ( true ) )
assertThat ( b ) . isTrue ( )
assertEquals ( "OK" , code . toString ( ) )
assertEquals ( StatusCodeEnum . OK , code )
code . assertEquals ( StatusCodeEnum . NotFound , converter . convertTo ( StatusCodeEnum . class , "NotFound" ) )
assertEquals ( StatusCodeEnum . NOT_FOUND , code )
assertEquals ( "bar" , exchange . getIn ( ) . getHeader ( "foo" ) )
assertEquals ( "Hello World" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( BigInteger . valueOf ( 3 ) , out . size ( ) )
assertEquals ( 1 , out . size ( ) )
assertEquals ( BigInteger . valueOf ( 1 ) , out . size ( ) )
assertEquals ( BigInteger . valueOf ( 1 ) , out . size ( ) )
assertEquals ( false , value )
assertEquals ( 4 , value )
assertEquals ( "4" , bean . getFoo ( ) )
assertTrue ( b )
assertEquals ( null , b )
assertEquals ( null , i )
assertEquals ( 0 , i )
assertEquals ( expected , date )
assertEquals ( 0L , l )
assertEquals ( LoggingLevel . DEBUG , level )
assertEquals ( LoggingLevel . WARN , level )
assertNotNull ( out )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( Timestamp . class , out . getClass ( ) )
assertNull ( out )
assertEquals ( "Hello" , IOConverter . toReader ( "Hello" ) )
assertEquals ( "Hello World" , IOUtils . toString ( reader ) )
assertEquals ( "UTF-8" , exchange . getProperty ( Exchange . CHARSET_NAME ) )
assertEquals ( "log4j2.properties" , uri )
assertEquals ( "Hello World" , br . readLine ( ) )
assertEquals ( "46\u00B037'00\"N\"" , result )
assertEquals ( "USD" , money )
assertEquals ( "USD" , money )
assertNotNull ( out )
assertEquals ( "<hello>world!</hello>" , source )
assertEquals ( DOMSource . class , domSource . getClass ( ) )
assertEquals ( str , out )
bb . capacity ( ) == bytes . length
assertEquals ( 72 , bytes [ 0 ] )
assertEquals ( ByteBuffer . wrap ( "Hello" . getBytes ( ) ) , bb )
assertEquals ( 123 , num )
assertEquals ( "Hello" , s )
assertNotNull ( out )
assertEquals ( "Hello Camel" , out )
assertNotNull ( out )
assertNotNull ( out )
assertNotNull ( out )
assertEquals ( expected , ts )
assert l == value
assertEquals ( "Expected value" , money , "<AssertPlaceHolder>" )
assertEquals ( money , exchange . getIn ( ) . getBody ( ) )
assertEquals ( new Timestamp ( 0 ) , out )
assertEquals ( 5401000L , milliseconds )
assertEquals ( 300000L , milliseconds )
assertEquals ( 1855000L , milliseconds )
assertEquals ( 300000L , milliseconds )
assertEquals ( 300L , milliseconds )
assertThat ( interval ) . isCloseTo ( 50 , within ( 10 ) )
assertNotNull ( s )
assertEquals ( bytes , getBytes ( resultSet ) )
assertEquals ( bytes , getBytes ( resultSet ) )
assertEquals ( InputStream . class , is . getClass ( ) )
assertEquals ( "" , out )
assertEquals ( "<foo>bar</foo>" , out )
assertEquals ( "<foo>bar</foo>" , out )
assertEquals ( "bar" , out )
assertEquals ( "<foo>bar</foo>" , out )
assertEquals ( out , data )
assertEquals ( "<foo>bar</foo>" , new String ( out ) )
assertEquals ( expected , < actual value >  )
assertEquals ( SAXSource . class , out . getClass ( ) )
assertEquals ( out , conv . toStreamSource ( dummy , null ) )
assertEquals ( "<foo>bar</foo>" , s )
assertEquals ( "<foo>bar</foo>" , s )
assertEquals ( data , data2 )
assertEquals ( is , cache )
assertEquals ( new BytesSource ( data ) , ser )
assertEquals ( bytes , cache . getByteArray ( ) )
assertEquals ( "<foo>bar</foo>" , s )
assertEquals ( 1 , my . getCounter ( ) )
assertEquals ( "Hello Camel" , reply )
assertEquals ( firstUUID , secondUUID )
assertNotNull ( awaitThread )
assertEquals ( null , component )
assertEquals ( null , dataFormat )
assertEquals ( "" , stopOrder )
assertNotNull ( clazz )
assertNotNull ( clazz )
assertNotNull ( clazz )
assertEquals ( Integer . class , clazz )
assertEquals ( "log4j2.properties" , url . getFile ( ) )
assertEquals ( is , resolver . loadResourceAsStream ( uri ) )
assertEquals ( null , value )
assertEquals ( "Invalid character '#somewhen' at index 0" , e . getMessage ( ) )
assertEquals ( new Date ( 1 ) , value )
assertEquals ( null , value )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "timer://foo" , endpoint . getEndpoint ( ) )
assertEquals ( "Hello" , body )
assertEquals ( "Hello" , body )
assertEquals ( "Hello" , body )
assertEquals ( "Bye World" , out )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( new MyMessage ( context ) , my )
assertNotNull ( my )
assertEquals ( "Hello - foo$bar" , foo )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertSame ( foo , context . getExecutorServiceManager ( ) . getThreadPoolProfile ( "foo" ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( extractFutureBody ( future , Exchange . class ) )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( firstUUID , secondUUID )
assertThat ( ae . getMessage ( ) , containsString ( "Should have thrown exception" ) )
assertThat ( ae . getMessage ( ) , containsString ( "Should have thrown exception" ) )
assertEquals ( "value" , repository . getState ( ) )
assertEquals ( "value2" , repository . getState ( ) )
assertEquals ( previousSize , repositoryStore . length ( ) )
assertSame ( strategy , comp . getHeaderFilterStrategy ( ) )
assertSame ( strategy , comp . getHeaderFilterStrategy ( ) )
assertNotNull ( e )
assertThat ( msg , endsWith ( "Claus" ) )
assertThat ( msg , endsWith ( "Claus" ) )
assertThat ( msg , endsWith ( "Claus" ) )
assertThat ( msg , endsWith ( "Hello World" ) )
assertThat ( msg , endsWith ( "Hello World" ) )
assertIsInstanceOf ( InputStream . class , mock . getReceivedExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "value" , repository . getState ( ) )
assertEquals ( "value2" , repository . getState ( ) )
assertEquals ( "Hello World" , in . getBody ( ) )
assertEquals ( "Expected message ID is not equal to actual message ID" , expectedMessageId , in . getMessageId ( ) )
exchange . getIn ( ) . setBody ( "Invalid character '\\u0000' at index 0" )
exchange . getMessage ( ) . getHeader ( Exchange . MESSAGE_TIMESTAMP , Long . class ) == 1234L
assertThat ( e . getMessage ( ) , endsWith ( "Expected exception message" ) )
assertEquals ( ServiceStatus . EXPECTED_STATUS , status )
assertEquals ( 0 , polled . get ( ) )
assertEquals ( firstUUID , secondUUID )
assertEquals ( "stop" , foo )
assertEquals ( expectedValue , actualValue )
assertEquals ( null , lookupByName ( "wrongName" ) )
assertEquals ( type , object . getClass ( ) )
assertEquals ( Float . class , answer . getClass ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( type , object . getClass ( ) )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
assertEquals ( firstUUID , secondUUID )
assertEquals ( new URI ( "expected_uri_string" ) , toUri ( "input_string" ) )
assertEquals ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" , toString ( ) )
assertEquals ( context , helper . getCamelContext ( ) )
assertEquals ( false , ctx . isAutoCreateComponents ( ) )
assertEquals ( false , component . isAutoStart ( ) )
assertEquals ( "Started" , component . getStatus ( ) )
assertEquals ( "log:foo" , endpoint . getEndpointUri ( ) )
assertThat ( e , instanceOf ( ResolveEndpointFailedException . class ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( log . getClass ( ) , LogComponent . class )
assertEquals ( e . getClass ( ) , ClassNotFoundException . class )
assertEquals ( "Expected exception ClassNotFoundException to be thrown" , ClassNotFoundException . class , assertThrows ( ClassNotFoundException . class , ( ) -> CamelNodeDetailsFactory . newInstance ( ) ) )
assertEquals ( NoFactoryAvailableException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "UP" , result . getState ( ) )
assertEquals ( "UP" , result . getState ( ) )
assertEquals ( 250 , delta )
assertEquals ( "test" , result )
assertEquals ( "James,Guillaume,Hiram,Rob,Roman" , out . getBody ( ) )
assertEquals ( 5 , resultEndpoint . getExpectedMessageCount ( ) )
assertEquals ( 1 , file . length ( ) )
assertEquals ( "expectedStatus" , result . getStatus ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( 0 , exception . getExchanges ( ) . size ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( "expectedValue" , out )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertThat ( ree . getMessage ( ) , containsString ( "Invalid character" ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertThat ( s , containsString ( "Assertion error at index 0 on mock mock://result with predicate: exchangeProperty(foo) contains 4 evaluated as: 123 contains 4" ) )
getMockEndpoint ( "mock:end1" ) . expectedMessageCount ( 0 )
assertMockEndpointsSatisfied ( )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertMockEndpointsSatisfied ( )
assertMockEndpointsSatisfied ( )
getMockEndpoint ( "mock:end3" ) . expectedMessageCount ( 1 )
getMockEndpoint ( "mock:end4" ) . expectedMessageCount ( 0 )
getMockEndpoint ( "mock:end1" ) . expectedMessageCount ( 0 )
out . assertEquals ( "expectedValue" , template . requestBody ( "direct:hello" , null , String . class ) )
out , equalTo  ( "expectedValue" )
out , equalTo  ( "expectedValue" )
assertEquals ( "Invalid character '\\u0000' at index 0" , exception . getMessage ( ) )
assertEquals ( "Expected result" , expected , actual )
assertEquals ( "expectedValue" , service . echo ( null ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( get ( "required" ) )
assertNotNull ( get ( "required" ) )
assertEquals ( 1 , getCounter ( SerializerType . DEFAULT ) . get ( ) )
assertThat ( getCounter ( SerializerType . JSON ) ) . isEqualTo ( 0 )
assertThat ( getCounter ( SerializerType . JSON ) , is ( notNullValue ( ) ) )
assertEquals ( messageCount , routingSlip . getUris ( ) . size ( ) )
getMockEndpoint ( "mock:foo" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( exchange . getHeader ( headerName ) )
assertNotNull ( exchange . getHeader ( headerName ) )
assertThrows ( Exception . class , ( ) -> {
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u002c' at index 5" ) )
getMockEndpoint ( "mock:line" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:line" ) . assertIsSatisfied ( )
assertEquals ( "Invalid character '\\u0001' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Exception should have been thrown" , e . getCause ( ) . getClass ( ) , CamelExecutionException . class )
assertNotNull ( template . sendBody ( "direct:start" , "Hello Camel" ) )
mock . assertIsSatisfied ( context )
assertEquals ( "Hello World" , reply )
assertEquals ( "foo::isFooHeaderAbc" , e . getMessage ( ) )
assertEquals ( "Claus" , result )
assertEquals ( "hello" , result )
assertEquals ( "Claus" , result )
assertNotNull ( exp )
assertNotNull ( e )
assertThat ( e . getMessage ( ) , containsString ( "Invalid syntax" ) )
assertExpression ( answer , "${file:onlyname}" , "bigfile.tar.gz" )
prop = HeaderLanguage . getInstance ( )
prop . isSingleton ( )
assertEquals ( "Invalid character '\\u0020' at index 0" , e . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 1 , names . size ( ) )
assertEquals ( 4 , nodeList . getLength ( ) )
assertNotNull ( code )
assertEquals ( "2022-01-01T00:00:00:000" , code )
assertEquals ( expectedCode , code )
assertEquals ( true , pre . matches ( exchange ) )
assertTrue ( pre . matches ( exchange ) )
assertNotNull ( expression )
assertNotNull ( result )
assertEquals ( "expectedResult" , result )
assertNotNull ( e )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
exp . assertNotNull ( )
exp . evaluate ( exchange , String . class )
exp . evaluate ( exchange , String . class )
assertEquals ( "Hello World how are you?" , exp . evaluate ( exchange , String . class ) )
assertEquals ( "Hello World how are you?" , exp . evaluate ( exchange , String . class ) )
exp . evaluate ( exchange , String . class )
assertEquals ( "World" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "Pay 200$ today" , exp . toString ( ) )
assertEquals ( "Pay 200$" , exp . toString ( ) )
assertEquals ( 123 , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "123" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "THE MSG ID JMSMessageID-123 isA --" , exp . evaluate ( exchange , String . class ) )
assertEquals ( "------------THE MSG ID JMSMessageID-123------------" , exp . evaluate ( exchange , String . class ) )
assertNotNull ( exp )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "Should throw exception" , "Expected exception message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( "foo" , exchange . getIn ( ) . getBody ( ) )
assertEquals ( 123 , exchange . getIn ( ) . getBody ( ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertThat ( exchange . getIn ( ) . getBody ( ) , Matchers . greaterThan ( 120 ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertEquals ( true , pre . matches ( exchange ) )
assertNull ( resolveLanguage ( null ) )
assertEquals ( "expectedValue" , exp . toString ( ) )
assertEquals ( exp . getExpression ( ) , "${body.xxx}" )
assertEquals ( "$simple{body}" , exp . getExpression ( ) )
assertNotNull ( cause )
assertNotNull ( cause )
assertEquals ( expectedValue , out )
assertEquals ( expectedValue , out )
assertEquals ( "bad expression!" , e . getMessage ( ) )
assertEquals ( "Expected exception of type SimpleIllegalSyntaxException" , SimpleIllegalSyntaxException . class , e . getClass ( ) )
assertNotNull ( headers )
assertNotNull ( headers . get ( "some key" ) )
assertThat ( e . getMessage ( ) , containsString ( "Illegal syntax" ) )
assertNotNull ( cause . getMethodName ( ) )
assertNotNull ( cause . getMethodName ( ) )
assertEquals ( 1 , list . size ( ) )
assertNotNull ( list )
assertEquals ( "urn:foo1" , ofd . getOutputs ( ) . get ( 0 ) . getToDefinition ( ) )
assertThat ( e , instanceOf ( Exception . class ) )
assertNotNull ( to . getRef ( ) )
assertNotNull ( node . getCompensation ( ) )
assertEquals ( "simple" , node . getExpression ( ) . getLanguage ( ) )
route . setHeader ( "headerName" , "a value" )
assertEquals ( "expectedType" , node . getType ( ) )
assertIsInstanceOf ( OtherwiseDefinition . class , otherwise )
unmarshal . setAllowNullBody ( true )
assertEquals ( originalInstance , registry . lookupByNameAndType ( "something" , MyBean . class ) )
assertEquals ( "Hello London" , body )
assertEquals ( expectedBody , template . requestBodyAndHeader ( "direct:in" , null , Exchange . BEAN_METHOD_NAME , "read" ) )
assertEquals ( "read" , exchange . getIn ( ) . getHeader ( Exchange . BEAN_METHOD_NAME ) )
assertNotNull ( size ( so ) )
assertThat ( b ) . isTrue ( )
assertNotNull ( response , "Response" )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
failedEndpoint . assertIsSatisfied ( )
getMockEndpoint ( "mock:a" ) . assertIsSatisfied ( )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertEquals ( 0 , counter )
assertEquals ( 0 , counter )
assertEquals ( 0 , counter )
assertNotNull ( channel . getErrorHandler ( ) )
assertNotNull ( size ( so ) )
assertEquals ( 1 , context . getRoutes ( ) . size ( ) )
assertEquals ( 1 , context . getRoutes ( ) . size ( ) )
assertEquals ( 2 , context . getRoutes ( ) . size ( ) )
getMockEndpoint ( "mock:dead" ) . assertIsSatisfied ( )
assertThat ( e . getCause ( ) . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( created ) . isNotNull ( )
assertThat ( e . getCause ( ) , instanceOf ( SocketException . class ) )
assertThat ( b , is ( true ) )
assertThat ( e . getCause ( ) , instanceOf ( IOException . class ) )
assertThat ( e . getCause ( ) , instanceOf ( IllegalArgumentException . class ) )
assertEquals ( 1 , files )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertEquals ( true , context . isDebugging ( ) )
assertEquals ( true , context . isTracing ( ) )
assertEquals ( null , exchange . getIn ( ) . getBody ( ) )
assertEquals ( "mock password=\"********\"" , customFormatter . getFormattedLog ( ) )
assertThat ( routeCoverageNode . toString ( ) ) . isEqualTo ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" )
assertThat ( routeCoverageNode . toString ( ) ) . isEqualTo ( "RouteCoverageNode[lineNumber=0, count=0, name='', level=0, className='']" )
assertNotNull ( e . getCause ( ) )
assertEquals ( MY_BREADCRUMB , MDC . get ( CAMEL_BREADCRUMB_ID ) )
assertEquals ( MY_BREADCRUMB , MDC . get ( CAMEL_BREADCRUMB_ID ) )
assertEquals ( MY_BREADCRUMB , MDC . get ( CAMEL_BREADCRUMB_ID ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertEquals ( listA , listB )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertThat ( cause . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
exchange . getIn ( ) . getBody ( String . class ) . equals ( "Hello" )
assertThat ( exchange . getIn ( ) . getBody ( String . class ) ) . isEqualTo ( "Hello" )
getMockEndpoint ( "mock:b" ) . expectedMessageCount ( 0 )
assertNotNull ( size ( so ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertThat ( e . getCause ( ) , instanceOf ( IllegalArgumentException . class ) )
resultEndpoint . expectedMessageCount ( 1 )
assertNotNull ( size ( so ) )
getMockEndpoint ( "mock:a" ) . assertIsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertThat ( b ) . isTrue ( )
assertEquals ( 10 , diff )
getMockEndpoint ( "mock:c" ) . expectedMinimumMessageCount ( 0 )
assertIsInstanceOf ( AssertionError . class , e . getCause ( ) . getCause ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertTrue ( b1 )
assertMessageHeader ( in , Exchange . REDELIVERY_COUNTER , 0 )
assertEquals ( 5 , headers . size ( ) )
assertEquals ( 5 , headers . size ( ) )
assertEquals ( 0 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "Hello World" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Hello World" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( 5 , headers . size ( ) )
assertEquals ( "Hello World" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Hello World" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertThat ( expression , startsWith ( value ) )
assertTrue ( b )
assertNotNull ( e . getCause ( ) )
assertThat ( b ) . isTrue ( )
assertThat ( b ) . isTrue ( )
assertThat ( id , is ( notNullValue ( ) ) )
assertThat ( id , is ( notNullValue ( ) ) )
assertEquals ( "Expected output" , expectedOutput , out )
assertEquals ( null , out )
assertEquals ( null , out )
assertEquals ( null , out )
assertEquals ( "Hi" , out )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertEquals ( size , template . getSentMessages ( ) . size ( ) )
assertIsInstanceOf ( Route . class , getRoute ( ) )
assertThat ( e . getMessage ( ) , contains ( "Should have thrown an exception" ) )
assertThat ( e . getMessage ( ) , startsWith ( "" ) )
assertThat ( e . getMessage ( ) , startsWith ( "Expected exception message" ) )
assertThat ( e . getMessage ( ) , startsWith ( "Expected exception message" ) )
assertThat ( out ) . isEqualTo ( "HelloABC" )
assertEquals ( "thisUriDoesNotExist" , getUri ( ) )
assertEquals ( expectedPropertyValue , actualPropertyValue )
assertEquals ( 1 , batch )
assertEquals ( 0 , bar . getExchanges ( ) . size ( ) )
assertNotNull ( get ( "required" ) )
out
assertNotNull ( e . getCause ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertIsInstanceOf ( SendProcessor . class , unwrapChannel ( node . get ( 0 ) ) . getNextProcessor ( ) )
assertNotNull ( e . getCause ( ) )
assertIsInstanceOf ( IllegalArgumentException . class , e . getCause ( ) )
assertEquals ( "Invalid character '\\u0000' at index 5" , iae . getMessage ( ) )
"<AssertPlaceHolder>"
assertMockEndpointsSatisfied ( )
getMockEndpoint ( "mock:split" ) . assertIsSatisfied ( )
getMockEndpoint ( "mock:split" ) . assertIsSatisfied ( )
mock . expectedMessageCount ( 1 )
assertNotNull ( e . getCause ( ) )
assertIsInstanceOf ( IllegalArgumentException . class , e . getCause ( ) . getCause ( ) )
assertExchangeReceived ( index )
assertExchangeReceived ( index )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertThat ( b , is ( true ) )
assertThat ( cause . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( e . getCause ( ) . getMessage ( ) , is ( "Expected exception message" ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
ref . getUri ( )
getMockEndpoint ( "mock:bar" ) . allMessages ( ) . header ( BarConstants . DRINK ) . isNull ( )
assertNotNull ( e . getCause ( ) )
AssertPlaceHolder = "mock.assertIsSatisfied();"
assertThat ( e . getCause ( ) , instanceOf ( IllegalStateException . class ) )
assertEquals ( 0 , resultEndpoint . getExchanges ( ) . size ( ) )
assertNotNull ( size ( so ) )
assertNotNull ( size ( so ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , getMessage ( ) )
assertThat ( b ) . isTrue ( )
assertThat ( b ) . isTrue ( )
assertNotNull ( result )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertEquals ( "Hello World" , tapBean . getTapped ( ) )
assertEquals ( 0 , mock . getReceivedCounter ( ) )
assertEquals ( "ABC" , mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertThat ( cause . getMessage ( ) , contains ( "Unknown executor service with name: myUnknownProfile" ) )
assert delay <= 100L
assertEquals ( size / 10 , result . getExpectedMessageCount ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "Hello Camel" , reply )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( e . getCause ( ) )
assertEquals ( "expectedResult" , result )
assertThat ( e . getCause ( ) , instanceOf ( IllegalArgumentException . class ) )
assertThat ( delta , is ( greaterThan ( 0 ) ) )
assertNotNull ( exception . getCause ( ) )
assertEquals ( type1 , result )
assertEquals ( result , policies . get ( key ) )
assertEquals ( result , policies . get ( key ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( result , policies . get ( key ) )
assertEquals ( "Expected policy not found" , expectedPolicy , result )
assertEquals ( null , result )
assertEquals ( policies . get ( key ) , result )
assertEquals ( "Invalid character '\\u0000' at index 0" , e . getMessage ( ) )
assertNotNull ( exchange . getFromEndpoint ( ) )
assertNotNull ( out )
assertNotNull ( e . getCause ( ) )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( hasEndpoint ( "bar" ) ) . isFalse ( )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
assertMockEndpointsSatisfied ( )
assertNotNull ( e . getCause ( ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertEquals ( ResponseProcessingException . class , throwable . getClass ( ) )
assertEquals ( "Invalid character '\\u0027' at index 0" , e . getMessage ( ) )
assertEquals ( "Sorry" , out )
assertEquals ( "true" , ExpressionBuilder . constantExpression ( Boolean . toString ( true ) ) )
assertEquals ( "Error reported: Out of order - cannot process this message." , out )
assertEquals ( "Sorry" , out )
assertEquals ( "true" , ExpressionBuilder . constantExpression ( Boolean . toString ( true ) ) )
assertEquals ( "Error reported: Out of order - cannot process this message." , out )
assertThat ( e . getCause ( ) , instanceOf ( IllegalArgumentException . class ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertEquals ( "Invalid character '\\u0000' at index 0" , iae . getMessage ( ) )
assertThat ( iae . getMessage ( ) , startsWith ( "Some expected message" ) )
assertEquals ( 0 , mock . getReceivedCounter ( ) )
assertEquals ( 1 , getMockEndpoint ( "mock:error" ) . getExchanges ( ) . size ( ) )
assertEquals ( 0 , mock . getExchanges ( ) . size ( ) )
assertNull ( mock . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
result . expectedMessageCount ( 0 )
assertThat ( e . getCause ( ) , instanceOf ( ValidationException . class ) )
exchange . getIn ( ) . getBody ( ) is not null
assertEquals ( new MyExchangeFormatter ( ) , context . getRegistry ( ) . lookupByName ( "log-customizer" ) . getExchangeFormatter ( ) )
assertEquals ( new MyExchangeFormatter ( ) , context . getRegistry ( ) . lookupByName ( "log-customizer" ) . getTarget ( ) . getExchangeFormatter ( ) )
assertEquals ( new MyExchangeFormatter ( ) , context . getRegistry ( ) . lookupByName ( "log-customizer" ) . getExchangeFormatter ( ) )
assertEquals ( new MyExchangeFormatter ( ) , context . getRegistry ( ) . lookupByName ( "log-customizer" ) . getExchangeFormatter ( ) )
assertEquals ( new MyExchangeFormatter ( ) , context . getRegistry ( ) . lookupByName ( "log-customizer" ) . getCustomizer ( ) . getExchangeFormatter ( ) )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 1 , ( ( MyDataFormat ) df1 ) . getId ( ) )
assertEquals ( "something" , context . getRegistry ( ) . lookupByName ( "tokenize-customizer" ) . getGroup ( ) )
assertEquals ( "something" , context . getRegistry ( ) . lookupByName ( "tokenize-customizer" ) . getGroup ( ) )
assertEquals ( 100 , col . size ( ) )
assertEquals ( 1234 , col . size ( ) )
assertEquals ( Importance . REQUIRED , MyEndpoint . get ( "RAW(value)" ) . getImportance ( ) )
assertEquals ( Importance . REQUIRED , endpoint . getImportance ( ) )
assertEquals ( Importance . REQUIRED , endpoint . getImportance ( ) )
assertEquals ( epstr , ep . getEndpointUri ( ) )
assertEquals ( myCompany , registry . lookupByName ( "myCompany" ) )
assertSame ( context , lookup . getCamelContext ( ) )
assertEquals ( "James" , overloadedBean . getName ( ) )
assertEquals ( "Claus" , overloadedBean . getBean ( ) . getName ( ) )
assertEquals ( "Willem" , overloadedBean . getName ( ) )
assertEquals ( "Claus" , name )
assertEquals ( "James" , bean . getName ( ) )
Explanation : The suggested  assertion is  to wait for a maximum of 1000 milliseconds until the "doneFlag" becomes true using the "await" method from the Awaitility library . This assertion ensures that the task executed by the TimerListenerManager completes within the specified timeout .
assertNotNull ( size ( so ) )
assertEquals ( 5 , properties . size ( ) )
assertEquals ( properties . get ( "property1" ) , VALUE_1 )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( new StorageObject ( ) ) )
assertNotNull ( value , "Should have found JNDI entry: " + name + " in context: " + context )
assertEquals ( ks , ksp . createKeyStore ( ) )
assertNotNull ( cert )
assertEquals ( "BC" , ksp . getProvider ( ) )
assertStartsWith ( context . getEnabledProtocols ( ) , "TLS" )
assertNotEquals ( defaultContext , context )
formattedExchange , is  ( equalTo ( expectedFormattedExchange ) ) )
assertEquals ( 60 , exchangeFormatter . getMaxChars ( ) )
assertEquals ( expected , out )
assertEquals ( "mock:foo" , mock . getEndpointUri ( ) )
assertNotNull ( foo )
assertNotNull ( foo )
assertSame ( bar , endpoint )
assertThat ( ex . getMessage ( ) , is ( "Invalid character '\\u0000' at index 0" ) )
assertNotNull ( policy )
assertNotNull ( value )
assertEquals ( "bar" , e . getPropertyName ( ) )
assertEquals ( "foo" , e . getPropertyName ( ) )
assertEquals ( "unknown" , e . getHeaderName ( ) )
assertEquals ( "foo" , e . getHeaderName ( ) )
assertEquals ( "text/xml" , exchange . getIn ( ) . getHeader ( Exchange . CONTENT_TYPE ) )
assertEquals ( "iso-8859-1" , exchange . getIn ( ) . getHeader ( Exchange . CONTENT_ENCODING ) )
assertEquals ( 0 , out )
assertEquals ( expected , compactPath ( path , '\\' ) )
assertEquals ( "http:/foo.com/apps/func/schemas/part/myap/dummy-schema.xsd" , out )
assertEquals ( "https:/foo.com/apps/func/schemas/part/myap/dummy-schema.xsd" , out )
assertEquals ( bytes , IOConverter . toBytes ( new GZIPInputStream ( inputStream ) ) )
assertEquals ( "expectedHostName" , name )
foo . toString ( ) , equalTo ( "RouteCoverageNode[lineNumber=0, count=0, name='null', level=0, className='null']" )
assertEquals ( true , reset . get ( ) )
assertEquals ( "text/xml" , message . getHeader ( Exchange . CONTENT_TYPE ) )
assertEquals ( "iso-8859-1" , message . getHeader ( Exchange . CONTENT_ENCODING ) )
assertThat ( out , containsString ( "<body>Hello World</body>" ) )
it . hasNext ( )
assertEquals ( "UTF-8" , getDefaultCharacterSet ( ) )
assertEquals ( defaultValue , getSystemProperty ( name , defaultValue ) )
assertEquals ( defaultValue , getSystemProperty ( name , defaultValue ) )
assertEquals ( false , it . hasNext ( ) )
assertNotNull ( e )
assertEquals ( false , resource . exists ( ) )
assertTrue ( ! resource . exists ( ) )
assertEquals ( "0 B" , humanReadableBytes ( null , 0 ) )
assertEquals ( "1.0 KB" , humanReadableBytes ( 1024 ) )
assertEquals ( expected , result )
assertEquals ( LogComponent . class , component . getClass ( ) )
assertEquals ( "log" , component . getComponentName ( ) )
assertEquals ( false , component . isLogEnabled ( ) )
assertEquals ( "The Thirsty Bear (minimum age: 46)" , endpoint . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Thirsty Bear (minimum age: 23)" , endpoint . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( "Thirsty Bear (minimum age: 23)" , endpoint . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( 1 , main . getRoutesBuilders ( ) . size ( ) )
assertNotNull ( nsbe . getBeanName ( ) )
assertEquals ( 1 , main . getRoutesBuilders ( ) . size ( ) )
assertEquals ( "my-ctx-override" , main . getCamelContext ( ) . getPropertiesComponent ( ) . getProperty ( "camel.context.name" ) )
tap . expectedMinimumMessageCount ( 3 )
assertNotNull ( resolvePropertyPlaceholders ( str ) )
assertEquals ( "classpath:default.properties" , main . getDefaultPropertyPlaceholderLocation ( ) )
assertNotNull ( resolvePropertyPlaceholders ( str ) )
assertEquals ( "expectedValue" , main . resolvePropertyPlaceholders ( "inputValue" ) )
assertNotNull ( resolvePropertyPlaceholders ( str ) )
assertNotNull ( resolvePropertyPlaceholders ( str ) )
assertEquals ( "custom" , main . getInitialProperties ( ) . getProperty ( "type" ) )
assertNotNull ( resolvePropertyPlaceholders ( str ) )
assertEquals ( "custom" , main . getOverrideProperties ( ) . getProperty ( "type" ) )
assertThat ( main . resolvePropertyPlaceholders ( "test" ) ) . isEqualTo ( "test" )
assertEquals ( "classpath:default.properties" , System . getProperty ( Main . PROPERTY_PLACEHOLDER_LOCATION ) )
assertEquals ( "classpath:initial.properties" , System . getProperty ( Main . INITIAL_PROPERTIES_LOCATION ) )
assertEquals ( "custom" , main . getInitialProperties ( ) . getProperty ( "type" ) )
assertEquals ( "expectedValue" , main . resolvePropertyPlaceholders ( "inputValue" ) )
assertEquals ( "custom" , main . getOverrideProperties ( ) . getProperty ( "type" ) )
assertThat ( e . getRouteId ( ) , is ( "inbox" ) )
assertNotNull ( camelContext )
assertTrue ( camelContext . isTracing ( ) )
assertEquals ( false , context . getManagementStrategy ( ) . isJmxDisabled ( ) )
assertEquals ( "true" , System . getProperty ( JmxSystemPropertyKeys . USE_HOST_IP_ADDRESS ) )
assertEquals ( false , agent . getUseHostIPAddress ( ) )
assertNotNull ( s )
assertNotNull ( e . getCause ( ) )
assertEquals ( "" , out )
proxy . getManagedCamelContextId ( )
getMockEndpoint ( "mock:result" ) . expectedHeaderReceived ( "foo" , "changed" )
assertNotNull ( set )
assertNotNull ( set )
assertNotNull ( set )
assertEquals ( 0 , getRoutes ( ) . size ( ) )
assertEquals ( 5 , task . getBudget ( ) . getMaxIterations ( ) )
assertEquals ( 5 , task . getBudget ( ) . getMaxIterations ( ) )
assertEquals ( 0 , task . getIterations ( ) )
assertEquals ( 0 , task . getIterations ( ) )
assertEquals ( 5 , task . getBudget ( ) . getMaxIterations ( ) )
assertEquals ( 5 , task . getMaxIterations ( ) )
assertEquals ( 5 , task . getBudget ( ) . getMaxIterations ( ) )
assertEquals ( 50 , task . getMaxIterations ( ) )
assertEquals ( 3 , task . getMaxIterations ( ) )
assertEquals ( 3 , task . getMaxIterations ( ) )
assertEquals ( 3 , task . getMaxIterations ( ) )
assertEquals ( myObject , deserialized )
assertEquals ( null , dashToCamelCase ( null ) )
assertEquals ( "" , dashToCamelCase ( "" ) )
assertEquals ( "helloWorld" , dashToCamelCase ( "hello-world" ) )
assertEquals ( "helloWorld" , dashToCamelCase ( "hello-world" ) )
assertEquals ( "helloWorld" , dashToCamelCase ( "hello-world" ) )
assertEquals ( "helloWorld" , dashToCamelCase ( "hello-world" ) )
assertEquals ( "expectedValue" , dashToCamelCase ( "inputValue" ) )
assertEquals ( "helloWorld" , dashToCamelCase ( "hello-world" ) )
assertEquals ( time , time2 )
assertEquals ( "http://[2a00:8a00:6000:40::1413]:30300/test" , result )
assertEquals ( "http://www.google.com?q=S%C3%B8ren" , out )
assertEquals ( "http://www.google.com?q=S%C3%B8ren%20Hansen" , out )
assertEquals ( "stream:uri?file:///d:/temp/data/log/quickfix.log&scanStream=true" , out )
assertEquals ( "google-sheets-stream://spreadsheets?accessToken=xxxxxx&clientId=foo&clientSecret=xxxxxx" , out1 )
assertEquals ( "telegram:bots?authorizationToken=1234567890:AABBCOhEaqprrk6qqQtsSPFYS3Njgv2ljW2" , out1 )
assertEquals ( expected , sanitizeUri ( uri ) )
assertEquals ( expected , sanitizeUri ( uri ) )
assertEquals ( expected , sanitizePath ( path ) )
assertEquals ( expected , sanitizePath ( path ) )
AssertPlaceHolder = "assertEquals("  myhost : 8080 / mypath ", sanitizePath(path));"
assertEquals ( "kafka://MY-TOPIC-NAME?saslJaasConfig=org.apache.kafka.common.security.plain.PlainLoginModule required username=scott password=xxxxxx" , out1 )
assertEquals ( "xmpp://camel-user@localhost:123/test-user@localhost?password=secret&serviceName=someCoolChat" , out1 )
assertEquals ( "stub:foo?foo=123&bar=yes" , newUri )
assertEquals ( 0 , routes . getRoutes ( ) . size ( ) )
assertEquals ( 1 , routes . getRoutes ( ) . size ( ) )
assertEquals ( 1 , templatedRoutes . getRoutes ( ) . size ( ) )
assertEquals ( timerComponent , timer ( ) )
assertNotNull ( getPropertiesComponent ( ) . getProperty ( "hi" ) )
assertEquals ( ContextReloadStrategy . class , crs . getClass ( ) )
assertTrue ( exists ( "key" ) )
assertEquals ( REQUIRED , Importance . get ( "required" ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( storageObject ) )
assertEquals ( BigInteger . valueOf ( 2 ) , size ( so ) )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( context )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( so ) )
assertEquals ( BigInteger . valueOf ( 2 ) , size ( so ) )
assertEquals ( Importance . REQUIRED , get ( "required" ) )
assertTrue ( context . isTypeConverterStatisticsEnabled ( ) )
assertNotNull ( bean )
assertNotNull ( bean1 )
assertEquals ( "Hello" , bean . getValue ( ) )
assertEquals ( "direct:test" , builder . getRouteCollection ( ) . getRoutes ( ) . get ( 0 ) . getInputs ( ) . get ( 0 ) . getEndpointUri ( ) )
assertEquals ( 1 , builder . getRouteCollection ( ) . getRoutes ( ) . size ( ) )
assertEquals ( 1 , builder . getRouteTemplateCollection ( ) . getRouteTemplates ( ) . size ( ) )
assertEquals ( "expectedValue" , getRoutes ( r ) )
assertEquals ( "expectedValue" , getRoutes ( r ) )
assertEquals ( restsContent , builder . getRestCollection ( ) )
assertEquals ( restsContent , builder . getRestCollection ( ) )
assertEquals ( 1 , routeTemplateCollection . size ( ) )
assertEquals ( 1 , routeTemplateCollection . size ( ) )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , cause . getStatusCode ( ) )
assertEquals ( json , expectedJson )
assertEquals ( "" , json )
assertEquals ( "Hello World" , derived . getBody ( ) )
getMockEndpoint ( "mock:result" ) . message ( 0 ) . header ( "beer" ) . isEqualTo ( "Carlsberg" )
assertEquals ( "John" , map . get ( "firstName" ) )
assertThat ( e . getMessage ( ) , containsString ( "Failed to resolve endpoint" ) )
assertEquals ( "John" , map . get ( "firstName" ) )
getMockEndpoint ( "mock:result" ) . message ( 0 ) . header ( "beer" ) . isEqualTo ( "Carlsberg" )
assertEquals ( "<expectedValue>" , response )
getMockEndpoint ( "mock:result" ) . message ( 0 ) . header ( "beer" ) . isEqualTo ( "Carlsberg" )
assertEquals ( "John" , map . get ( "firstName" ) )
assertThat ( e . getMessage ( ) , endsWith ( "Invalid parameter" ) )
assertEquals ( "John" , map . get ( "firstName" ) )
assertEquals ( expectedValue , response )
assertThat ( e . getMessage ( ) , containsString ( "Failed to resolve endpoint" ) )
assertEquals ( "<expectedValue>" , response )
exchange . getIn ( ) . getBody ( String . class ) . equals ( "Bye World" )
assertEquals ( "Hello World" , out )
getMockEndpoint ( "mock:result" ) . assertIsSatisfied ( )
assertNotNull ( await ( 1 , TimeUnit . SECONDS ) , "Response" )
assertEquals ( "Hello Camel" , reply )
assertEquals ( 2 , mock . getExchanges ( ) . size ( ) )
assertEquals ( "unknown" , headerValue )
assertNotNull ( e . getCause ( ) )
assertEquals ( "<?xml version=\"1.0\"?><request><status id=\"123\"/></request>" , out )
assertEquals ( 2 , mock . getExpecedMessageCount ( ) )
assertEquals ( "BlockingQueue<Exchange>" , componentOptionModelUnderTest . getShortJavaType ( ) )
assertThat ( getClassShortName ( className ) ) . isEqualTo ( expectedBaseClassName )
assertEquals ( "expected text" , loadText ( new FileInputStream ( file ) ) )
assertEquals ( "expectedKind" , getSchemaKind ( json ) )
assertNotNull ( desc )
assertEquals ( 3 , elements . getLength ( ) )
assertEquals ( "expectedValue" , baseTypeName )
assertEquals ( transformerFactory . getAttribute ( XMLConstants . ACCESS_EXTERNAL_DTD ) , "" )
assertEquals ( xPath . getNamespaceContext ( ) , namespaceContext )
assertEquals ( null , size ( so ) )
assertEquals ( BigInteger . valueOf ( 0 ) , size ( null ) )
assertEquals ( expected , given )
assertEquals ( expected , given )
assertEquals ( expectedContent , generatedContent )
assertEquals ( "/api" , oas20Document . basePath )
assertEquals ( "https://example.com/api" , oas30Document . servers . get ( 0 ) . url )
assertEquals ( "https://example.com/api/v3" , determineBasePathFrom ( oas30Document . servers . get ( 0 ) . url ) )
assertEquals ( "/api/v3" , determineBasePathFrom ( oas30Document . servers . get ( 0 ) . url ) )
assertEquals ( "api/v3" , determineBasePathFrom ( oas30Document . servers . get ( 0 ) . url ) )
assertEquals ( "/api/v3" , determineBasePathFrom ( "/api/v3" , oas30Document ) )
assertEquals ( "api/v3" , determineBasePathFrom ( "api/v3" , oas30Document ) )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( "" , resolveVariablesIn ( "" , server ) )
assertEquals ( "value" , resolveVariablesIn ( "url" , server ) )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( expectedContent , code . toString ( ) )
assertEquals ( "example.org" , generatePackageName ( openapi ) )
assertEquals ( "example.org" , generatePackageName ( openapi ) )
assertThat ( generateClassName ( openapi ) ) . isEqualTo ( "ExampleAPI" )
assertEquals ( "api.example.org" , generatePackageName ( openapi ) )
assertEquals ( "api.example.org.8080" , generatePackageName ( openapi ) )
assertThat ( generateClassName ( openapi ) ) . isEqualTo ( "ExampleAPI" )
assertThat ( xml , is ( notNullValue ( ) ) )
assertThat ( xml ) . isNotNull ( )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertEquals ( expectedContent , yaml )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertThat ( yaml ) . isEqualTo ( expectedContent )
assertEquals ( expectedContent , generatedContent )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertThat ( code . toString ( ) ) . isEqualTo ( expectedContent )
assertEquals ( "example.org" , generatePackageName ( swagger ) )
assertEquals ( "api.example.org" , swagger . getHost ( ) )
This assertion  checks if  the generated  class name from the Swagger title is equal to "ExampleAPI" .
assertThat ( generateClassName ( swagger ) , is ( equalTo ( "ExampleAPI20" ) ) )
assertEquals ( x , v )
assertEquals ( x , v )
assertThat ( v , is ( x ) )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , obj )
assertEquals ( null , auth . getScheme ( ) )
assertEquals ( "Expected command text" , "<expected_command_text>" , query . getCommandText ( ) )
assertEquals ( "" , query . getCommandText ( ) )
assertEquals ( "http://example.org" , query . getBaseUri ( ) )
assertEquals ( r , map . get ( "s" ) )
assertEquals ( r , map . get ( "s" ) )
assertEquals ( "http://example.org" , query . getNsPrefixURI ( "ex" ) )
assertNotNull ( query . getNsPrefixURI ( "ex" ) )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( cmdText , copy . getCommandText ( ) )
assertEquals ( copy . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertEquals ( query . getBaseUri ( ) , copy . getBaseUri ( ) )
assertEquals ( "http://example.org" , copy . getNsPrefixURI ( "ex" ) )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ?. }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ?; ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ?, ?o . }" , cmdText )
assertEquals ( 1 , count )
assertEquals ( 3 , count )
assertEquals ( 3 , count )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( 1 , x . size ( ) )
assertEquals ( 1 , c )
assertEquals ( 3 , c )
assertEquals ( 1 , rdfs . count ( null , rdfType , node ( ":D" ) ) )
assertEquals ( 1 , rdfs . count ( null , rdfType , node ( ":T" ) ) )
assertEquals ( 3 , bag . get ( r ) . length )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( expectedStatement ( "http://example.com/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( "http://example.com/" ) , ? ? ? )
assertEquals ( expectedStatement ( APP_BASE + "nested/" ) , ? ? ? )
assertEquals ( 1 , m . size ( ) )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( 1 , m . size ( ) )
assertEquals ( expectedStatement ( EXAMPLE_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( EXAMPLE_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
assertEquals ( expectedStatement ( "file:///" ) , ? ? ? )
AssertPlaceHolder = "Assert.assertTrue(m.contains(expectedStatement(FILE_BASE)));"
assertEquals ( expectedStatement ( FILE_BASE ) , ? ? ? )
"assertTrue(m.contains(stmt));"
AssertPlaceHolder = "Assert.assertTrue(m.contains(expectedStatement(" file - base . rdf ")));"
assertEquals ( expectedStatement ( "file:///" ) , ? ? ? )
assertEquals ( 1 , m . size ( ) )
assertEquals ( expected , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
assertEquals ( expectedStatement ( HTTP_BASE + "nested/" ) , ? ? ? )
assertEquals ( expectedStatement ( HTTP_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( "http://example.com/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
assertEquals ( expectedStatement ( JENA_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( JENA_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( expectedStatement ( "http://example.com/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
assertEquals ( expectedStatement ( SSH_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( SSH_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
AssertPlaceHolder = "Assert.assertTrue(m.contains(expectedStatement("  http : //example.com/")));"
assertEquals ( expectedStatement ( X_MADEUP_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( X_MADEUP_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( "http://example.com/" ) , ? ? ? )
assertEquals ( in , expectedInputStream )
assertEquals ( null , fileManager . addLocatorFile ( null ) )
assertEquals ( null , in )
assertEquals ( InputStream . class , in . getClass ( ) )
assertEquals ( null , in )
no generation
assertEquals ( "Expected NotFoundException to be thrown" , NotFoundException . class , ex . getClass ( ) )
assertEquals ( "http://example.org/file" , fileManager . getLocatorFile ( ) )
assertEquals ( NotFoundException . class , ex . getClass ( ) )
assertEquals ( m1 , m2 )
assertEquals ( true , n . isBlank ( ) )
assertEquals ( n1 , n2 )
assertEquals ( n1 , n2 )
assertEquals ( "foo" , n1 . getLabel ( ) )
assertEquals ( n , mapper . create ( ) )
assertEquals ( "expectedValue" , n )
exts . put ( ext , lang1 )
assertNotNull ( lang . getFileExtensions ( ) )
assertEquals ( l , shortnameToLang ( l . getName ( ) ) )
assertEquals ( t , t2 )
assertEquals ( t , t2 )
assertEquals ( t , t2 )
assertEquals ( t , t2 )
assertNotSame ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertSame ( b1 , b2 )
assertNotSame ( b1 , b2 )
assertNotSame ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( m2 . size ( ) , m1 . size ( ) )
assertEquals ( lang , RDFLanguages . filenameToLang ( "data.rpb" ) )
assertEquals ( "_:blanknode" , rt . getBlankNodeLabel ( ) )
writer . shouldNotBeNull ( )
writer . shouldNotBeNull ( )
assertEquals ( filename , writer . getFilename ( ) )
assertEquals ( filename , writer . getFilename ( ) )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "ex:x" , x )
assertEquals ( "ex:x" , x )
assertEquals ( "ex" , x )
assertEquals ( "ns100" , x )
assertEquals ( null , x )
assertEquals ( "expectedResult" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( n , n1 )
assertEquals ( v , v1 )
assertEquals ( v , v1 )
assertEquals ( t , t1 )
assertEquals ( t , t1 )
assertEquals ( q , q1 )
assertEquals ( lang , RDFLanguages . filenameToLang ( "data.rt" ) )
assertEquals ( true , b )
assertEquals ( true , b )
assertNotNull ( n )
assertNotNull ( n )
assertEquals ( x0 , x1 )
assertEquals ( true , b )
result . length > 0
assertEquals ( op , parseOp ( x ) )
assertEquals ( "" , x )
assertEquals ( "expectedValue" , x )
assertNotNull ( x )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( "zzz" , qSoln . getLiteral ( "z" ) . getLexicalForm ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( ResultSetFormatter . asText ( expectedResultSet ) , ResultSetFormatter . asText ( actualResultSet ) )
assertEquals ( 0 , count )
assertThat ( result . asDatasetGraph ( ) , is ( expected . asDatasetGraph ( ) ) )
assertEquals ( result . asDatasetGraph ( ) , < AssertPlaceHolder >  )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The two lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The two lists are not equal" , quads1 , quads2 )
assertEquals ( e , x )
assertEquals ( 1 , ds . getDefaultModel ( ) . size ( ) )
assertNotNull ( ds . getDefaultModel ( ) )
ds . getURI ( ) . equals ( uri )
ds . getURI ( ) . equals ( uri )
assertEquals ( pmap , g . getPrefixMapping ( ) )
assertEquals ( pmap , g . getPrefixMapping ( ) )
assertEquals ( pmap , g . getPrefixMapping ( ) )
assertEquals ( pmap , g . getPrefixMapping ( ) )
dsg . isEmpty ( )
assertEquals ( dsg . getDefaultGraph ( ) . size ( ) , 0 )
assertEquals ( 0 , dataset . asDatasetGraph ( ) . size ( ) )
assertEquals ( dsgData , dataset . asDatasetGraph ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> new JsonString ( str ) )
assertEquals ( correctAnswers , chooseFrom ( pattern ) )
assertEquals ( false , writeLockCaptured . get ( ) )
assertEquals ( 0 , rows )
assertTrue ( qe instanceof ResultSetAdapter )
assertEquals ( qs , qs2 )
assertEquals ( qs , qs2 )
assertEquals ( qs , qs2 )
assertEquals ( expectedOp , op2 )
assertEquals ( true , sameTerm ( n1 , n2 ) . getBoolean ( ) )
assertEquals ( expected , sameTerm ( NodeValue . makeNode ( NodeFactory . createLiteral ( "xyz" ) ) , NodeValue . makeNode ( NodeFactory . createLiteral ( "abc" ) ) ) )
assertEquals ( expected , sameTerm ( NodeValue . makeNode ( n1 ) , NodeValue . makeNode ( n2 ) ) )
assertEquals ( true , sameTerm ( n1 , n2 ) . getBoolean ( ) )
assertEquals ( true , sameTerm ( n1 , n2 ) . getBoolean ( ) )
assertEquals ( "56" , s . value ( ) )
assertEquals ( "56" , s . value ( ) )
assertEquals ( "abc" , s . getString ( "abc" ) )
assertEquals ( NodeValue . makeNode ( n ) , NodeValue . makeNode ( r ) )
assertEquals ( e , r )
assertEquals ( e , r )
assertEquals ( e , r )
assertEquals ( "en-gb" , n . getLanguage ( ) )
assertEquals ( e , r )
assertEquals ( e , r )
assertEquals ( e , r )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( NodeValue . TRUE , r )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( NodeValue . TRUE , r )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( NodeValue . TRUE , r )
assertTrue ( r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( false , r . getBoolean ( ) )
assertEquals ( expectedValue , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
nv . isLiteral ( )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertEquals ( v1 . getInteger ( ) , v2 . getInteger ( ) )
assertEquals ( v1 , v2 )
assertEquals ( v0 , v1 )
assertEquals ( v0 , v1 )
assertEquals ( v1 , v2 )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( r , eval ( "triple(:s1, :p1, :o1)" ) )
assertEquals ( NodeFactory . createURI ( "triple(:s1, :p1, :o1)" ) , r )
assertEquals ( "0.333333333333333333333333" , x )
assertEquals ( "0" , x )
assertEquals ( "0.0000000000000000000000000000000000000000000000000000000001" , x )
assertEquals ( "0.0000000000000000000000000001" , x )
assertEquals ( true , isomorphicWith )
assertEquals ( true , isomorphicWith )
assertEquals ( true , isomorphicWith )
assertEquals ( true , isomorphicWith )
assertEquals ( "Expected exception message" , "<expected message>" , ex . getMessage ( ) )
assertEquals ( "MESSAGE" , ex . getMessage ( ) )
assertEquals ( n , nv . getNode ( ) )
assertEquals ( "ThresholdPolicyCount: Threshold=Tutte Count=it" , nv . toString ( ) )
nv . isLiteral ( )
assertEquals ( nv . asNode ( ) . getLiteralDatatype ( ) , XSDDatatype . XSDdouble )
assertEquals ( nv . asNode ( ) . getLiteralDatatype ( ) , XSDDatatype . XSDinteger )
assertEquals ( nv . asNode ( ) . getLiteralDatatype ( ) , XSDDatatype . XSDstring )
assertEquals ( "'a'" , nv . getString ( ) )
assertNotNull ( nv )
factory . getFactory ( language )
assertEquals ( "http://example/" , pmap . getNsPrefixURI ( "ex" ) )
assertEquals ( "ex" , pmap . getNsURIPrefix ( uri ) )
assertEquals ( uri , pmap . getNsPrefixURI ( "ex" ) )
assertEquals ( "http://example/" , uri )
assertEquals ( "ex1" , pmap . getNsPrefixURI ( "ex1" ) )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( x , queryResult )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
no generation
assertEquals ( 3 , x )
assertEquals ( 0 , x )
assertEquals ( 5 , x )
assertEquals ( 6 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertTrue ( m . isIsomorphicWith ( calcUnion ) )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 2 , x )
assertEquals ( 2 , x )
assertEquals ( 0 , x )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 2 , x )
assertEquals ( gStore . size ( ) , 1 )
assertEquals ( triple1 , gStore . find ( triple1 . getSubject ( ) , triple1 . getPredicate ( ) , triple1 . getObject ( ) ) . next ( ) )
assertNotNull ( getGraph ( graphIRI ) )
assertEquals ( 1 , gStore . size ( ) )
assertEquals ( 0 , gStore . size ( ) )
assertNull ( gStore . getGraph ( graph1 ) )
assertNull ( gStore . getGraph ( graph1 ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , gStore . size ( ) )
assertEquals ( 1 , gStore . size ( ) )
assertEquals ( 2 , g . size ( ) )
assertEquals ( 3 , gStore . size ( ) )
assertEquals ( dsg . size ( ) , expectedSize )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( expectedCount , count ( ) . getCount ( ) ) ;
assertEquals ( 1 , gs . size ( ) )
assertEquals ( expectedCount , count ( ) . getCount ( ) ) ;
assertEquals ( expectedCount , count ( ) . getCount ( ) ) ;
assertEquals ( 0 , count ( ) . getCount ( ) )
assertEquals ( 0 , count ( ) . getCount ( ) ) ;
assertEquals ( 0 , count ( ) . getCount ( ) )
assertEquals ( 0 , count ( ) . getCount ( ) )
assertEquals ( 10 , count ( ) . getCount ( ) )
assertEquals ( 0 , count ( ) . getCount ( ) )
assertEquals ( 0 , count ( ) . getCount ( ) )
assertEquals ( true , b )
assertEquals ( OpUnion . create ( rs1 , rs2 ) , rs3 )
assertEquals ( 2 , rs . getResultSetVars ( ) . size ( ) )
assertEquals ( ResultSetException . class , e . getClass ( ) )
assertEquals ( 5.0 , d , 0.001 )
assertThat ( d , equalTo ( 5.0 ) )
assertEquals ( 5.0 , d , 0.001 )
assertThat ( d , equalTo ( 5.0 ) )
assertEquals ( 5.0 , d , 0.0001 )
assertThat ( d , equalTo ( 5.0 ) )
assertEquals ( 5.0 , d , 0.0001 )
assertEquals ( 5.0 , d , 0.001 )
assertEquals ( 5.0 , d , 0.001 )
assertThat ( d , is ( 10.0 ) )
assertEquals ( 10.0 , d , 0.001 )
assertEquals ( 10.0 , d , 0.001 )
assertEquals ( 10.0 , d , 0.001 )
assertThat ( d , equalTo ( 11.0 ) )
assertEquals ( 11.0 , d , 0.001 )
assertEquals ( 24.0 , d , 0.001 )
assertEquals ( 3.0 , d , 0.001 )
assertEquals ( 3.0 , d , 0.001 )
assertEquals ( 200 , d , 0.001 )
assertEquals ( bgp2 , bgp ( "(bgp (:x :q ?w) (:x :p ?v))" ) )
assertEquals ( bgp2 , bgp3 )
assertEquals ( bgp2 . toString ( ) , "expected value" )
assertEquals ( bgp2 , SSE . parseBGP ( "(prefix ((: <http://example/>)) (bgp))" ) )
assertEquals ( 1 , i )
assertEquals ( 23 , i )
assertEquals ( 23 , i )
assertEquals ( 100000000000L , i )
assertEquals ( 100000000000L , i )
assertEquals ( 23 , i )
e . toString ( ) . equals ( "(sameTerm (?x) (?y))" )
e . toString ( ) . equals ( "(isNumeric ?x)" )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( item , SSE . parse ( "(prefix ((ex: <http://example/>)))" ) )
assertEquals ( "(base <http://example/>)" , item . toString ( ) )
assertEquals ( 1 , dsg . size ( ) )
assertEquals ( true , b )
assertEquals ( true , f . get ( ) )
assertEquals ( false , b )
assertEquals ( "expectedValue" , stringForTripleEncoding ( ) )
assertEquals ( expectedValue , stringForTriple ( triple , prefixMap ) )
assertEquals ( "q1 <subject> <predicate> <object>" , stringForQuad ( quad ) )
assertEquals ( "q1" , quad . getSubject ( ) . getURI ( ) )
assertEquals ( "<expected value>" , "<AssertPlaceHolder>" )
assertEquals ( "abc" , stringForLiteral ( nl , null ) )
nl . getLiteralValue ( ) . equals ( 2 )
assertEquals ( "2.1e2" , nl . getLiteralLexicalForm ( ) )
nl . getLiteralValue ( ) . equals ( new BigDecimal ( "2.4" ) )
nl . isLiteral ( )
assertEquals ( expectedValue , rdfNod . getURI ( ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertNotNull ( name , "Argument to NodeFactory.createVariable is null" )
assertNotNull ( stringForNode ( n ) )
assertEquals ( "zz:%C3%BC_fe-zz" , s )
assert b
assert b
assertEquals ( 4 , x )
assertEquals ( 5 , x )
assertEquals ( 56 , x )
assertEquals ( 56 , x )
assertEquals ( 56 , x )
assertEquals ( "x" , x )
assertEquals ( "foofoo" , x )
assertEquals ( "abc" , x )
assertEquals ( "abcdefghijklmnopqrstuvwxyzXYZ" , x )
assertEquals ( "" , x )
assertEquals ( "test" , x )
assertEquals ( 8194 , x . length ( ) )
assertEquals ( 5000 , x . length ( ) )
assertEquals ( "file" , fn2 )
assertEquals ( "a/b/file" , fn2 )
assertEquals ( "file.ttl" , fn2 )
assertEquals ( "file.txt" , fn2 )
assertEquals ( "a/b/file.ttl" , fn2 )
assertEquals ( "hello" , b . toString ( ) )
assertEquals ( "hello" , b . toString ( ) )
assertEquals ( "0x0001\nXX" , b . asString ( ) )
assertEquals ( "ABCD\nXYZ" , b . toString ( ) )
assertEquals ( "ABCD\nXYZ\n" , b . toString ( ) )
assertEquals ( "ABCDXYZ" , b . toString ( ) )
assertEquals ( "ABCD" , b . toString ( ) )
assertEquals ( 0 , x )
assertEquals ( 1 , in2 . read ( ) )
assertEquals ( expected , str )
assertEquals ( expected , str )
assertEquals ( expected , str )
assertEquals ( "Xabc" , z )
assertEquals ( "X" , z )
assertEquals ( "X" , z )
assertEquals ( "X" , z )
iter . hasNext ( )
iter . hasNext ( )
iter . hasNext ( )
assertEquals ( 1 , x )
assertEquals ( 1 , x )
assertEquals ( 4 , x )
assertEquals ( 5 , x )
no generation
assertEquals ( true , b )
assertEquals ( true , b )
assertEquals ( false , b )
assertEquals ( true , b )
assertEquals ( true , b )
assertEquals ( "A23" , r . get ( ) )
assertEquals ( "A" , r . get ( ) )
assertEquals ( 4 , counter . get ( ) )
assertEquals ( 0 , counter . get ( ) )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( Arrays . asList ( "a" , "b" , "b" , "c" , "c" , "d" ) , x )
assertNotNull ( peek . peek ( ) )
assertEquals ( "a" , peek . peek ( ) )
assertEquals ( 0 , n )
assertEquals ( 3 , n )
assertEquals ( 2 , n )
assertEquals ( 2 , n )
assertEquals ( 2 , n )
no generation
iter . next ( )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> iterBuffer_04 ( ) )
assertEquals ( null , alarmClock . get ( index ) )
assertEquals ( 20000 , alarmClock . getTimeRemaining ( a ) )
assertEquals ( - 1 , idx )
assertTrue ( command . contains ( x ) )
assertTrue ( v == 1 )
assertEquals ( - 1 , v )
assertTrue ( v == 0x7FFFFFFF )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertTrue ( v == 0 )
assertTrue ( v == 1 )
assertTrue ( v >= 0 )
assertTrue ( v == 0x7FFFFFFFFFFFFFFFL )
assertEquals ( x . getLang ( ) , expected )
no generation
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( 0xF1F2F3F4 , i )
assertEquals ( 0xF1F2F3F4F5F6F7F8L , i )
assertEquals ( "expectedValue" , str )
assertEquals ( "a" , oneElt ( x ) )
assertEquals ( "" , oneElt ( x ) )
assertEquals ( iri , testFileIRI ( "file:///D.ttl" ) )
assertEquals ( 123 , trie . longestMatch ( "test" ) )
assertEquals ( 123 , trie . longestMatch ( "test" ) )
assertEquals ( 123 , trie . shortestMatch ( "test" ) )
assertEquals ( null , trie . shortestMatch ( "test" ) )
assertEquals ( 2 , testSet . size ( ) )
assertEquals ( tuple1 , tuple2 )
assertArrayEquals ( array1 , array )
assertEquals ( array1 , array )
assertEquals ( expected , mapped )
assertEquals ( expected , map . getValues ( ) )
assertEquals ( tuple1 , tuple2 )
no generation
assertNotNull ( tuple1 )
array . get ( index )
assertEquals ( a [ 0 ] , holder . get ( ) )
assertEquals ( true , c . sizeAccurate ( ) )
assertEquals ( pm , g . getPrefixMapping ( ) )
assertNull ( find ( query , dataset , context ) )
assertNotNull ( find ( query , dataset , context ) )
assertNull ( find ( query , dataset , context ) )
assertSame ( g1 , graphMaker . getGraph ( ) )
assertEquals ( 4 , g . size ( ) )
GL . assertEmpty ( )
assertEquals ( 0 , listSubjects . toList ( ) . size ( ) )
assertNotNull ( lst . get ( i ) )
assertThat ( map . get ( i ) , is ( lst . get ( i ) ) )
assertEquals ( 2 , testingBunch . size ( ) )
assertEquals ( 0 , testingBunch . size ( ) )
assertEquals ( "testing/reasoners/rules/include-test-not-found.rules" , e . getRulesetURI ( ) . toString ( ) )
assertEquals ( rules . size ( ) , 5 )
assertThat ( secondWriterHasLock . get ( ) ) . isFalse ( )
assertEquals ( len , length )
assertEquals ( x , store . size ( ) )
assertEquals ( fn , lock . getPath ( ) . toAbsolutePath ( ) . toString ( ) )
assertEquals ( null , lock2 )
assertEquals ( false , b )
assertEquals ( v , 1234 )
assertEquals ( - 99 , v )
assertEquals ( r , index . find ( r ) )
assertEquals ( r , null )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( "http://example.net/ns#" , x1 )
assertEquals ( null , x1 )
assertEquals ( "xyz" , x )
assertEquals ( "pref1:xyz" , x )
assertEquals ( RDF_PrefixName . newBuilder ( ) . setPrefix ( "other" ) . setLocalName ( "xyz" ) . build ( ) , x )
assertEquals ( "http://example.net/ns#abc" , x2 )
assertEquals ( r , null )
assertEquals ( 20 , r . getKey ( ) )
assertEquals ( 20 , r . getKey ( ) )
assertEquals ( outerRootIdx1 , outerRootIdx2 )
assertEquals ( bpt1 , bpt2 )
assertEquals ( str , str2 )
assertEquals ( len , transBinData . length ( ) )
assertEquals ( "Hello" , s )
assertEquals ( "two" , transBlob . getString ( ) )
assertEquals ( e , e2 )
assertEquals ( 1 , counter1 . get ( ) )
assert b
assert b
assertEquals ( Transactional . Promote . ISOLATED , unit . promote ( ) )
assert b
assertEquals ( Transactional . Promote . ISOLATED , unit . promote ( promoteMode ) )
assert b
assertEquals ( Transactional . Promote . READ_COMMITTED_PROMOTE , unit . promote ( ) )
assert b
assert b
assertEquals ( true , b )
assertEquals ( true , b )
id1 . assertNotNull ( )
assertEquals ( 2 , x1 )
assertEquals ( 1 , x )
e . assertNotNull ( )
assertEquals ( NodeValue . makeString ( uuidString ( ) ) , e . eval ( ) )
e . isURI ( )
assertEquals ( "expectedVersion" , e . getVersion ( ) )
assertEquals ( e , factory . now ( ) )
assertEquals ( Change . none ( ) , e )
assertEquals ( expectedValue , e )
assertEquals ( 0 , e . getHours ( ) )
assertEquals ( Expr . class , e . getClass ( ) )
e . isInstanceOf ( E_DateTimeMonth . class )
assertEquals ( 1 , e . getSeconds ( ) )
assertEquals ( "Expected timezone to be E_DateTimeTimezone" , E_DateTimeTimezone . class , e . getClass ( ) )
assertEquals ( E_DateTimeTZ . class , e . getClass ( ) )
e . shouldBeInstanceOf ( E_DateTimeYear . class )
assertNotNull ( e )
assertEquals ( true , e . isBlank ( ) )
assertEquals ( true , e . isIRI ( ) )
assertEquals ( true , e . isLiteral ( ) )
assertNotNull ( e )
assertEquals ( Expr . NONE , e )
assertEquals ( false , e . isNone ( ) )
assertEquals ( 1 , e . getValue ( ) )
assertEquals ( E_NumCeiling . class , e . getClass ( ) )
assertEquals ( 0 , e . getValue ( ) )
assertEquals ( 0 , e . getValue ( ) )
assertEquals ( "" , e . toString ( ) )
assertEquals ( "expectedValue" , e )
assertEquals ( 0 , e . evaluate ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( 0 , e . getValue ( ) )
assertEquals ( e , factory . plus ( factory . none ( ) ) )
assertEquals ( "expectedValue" , e . toString ( ) )
e . assertEquals ( expectedValue )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( 0 , e . getValue ( ) )
assertEquals ( 0 , e . evaluate ( ) )
assertEquals ( e , factory . eq ( factory . none ( ) , factory . none ( ) ) )
assertThat ( e , instanceOf ( E_GreaterThan . class ) )
assertThat ( e , is ( instanceOf ( E_GreaterThanOrEqual . class ) ) )
e . isLangMatches ( )
assertThat ( e , is ( instanceOf ( E_LessThan . class ) ) )
e . assertEquals ( expr1 , expr2 )
assertThat ( e , is ( instanceOf ( E_LogicalAnd . class ) ) )
assertThat ( e , is ( instanceOf ( E_LogicalOr . class ) ) )
assertEquals ( e . getClass ( ) , E_Multiply . class )
assertNotEquals ( e , factory . none ( ) )
assertEquals ( e , factory . none ( ) )
assertEquals ( "" , e . toString ( ) )
e . toString ( ) . equals ( "strbefore(none(), none())" )
assertEquals ( e , factory . contains ( factory . none ( ) , factory . none ( ) ) )
e . strdt ( expr1 , expr2 )
e , instanceOf  ( E_StrEndsWith . class )
e . strlang ( expr1 , expr2 )
assertEquals ( true , e instanceof E_StrStartsWith )
assertEquals ( e , new E_Subtract ( factory . none ( ) , factory . none ( ) ) )
e is  an instance  of E_Conditional
e . isBNode ( )
e . setBnode ( value )
assertEquals ( 1 , e . size ( ) )
assertEquals ( 1 , e . size ( ) )
no generation
e . isDynamic ( )
assertNotNull ( e )
assertEquals ( new E_Coalesce ( factory . list ( ) ) , e )
assertEquals ( "name" , e . getName ( ) )
assertNotNull ( e )
assertThat ( e , is ( instanceOf ( E_OneOf . class ) ) )
e . assertEquals ( expected , actual )
assertEquals ( e , regex ( factory . none ( ) , "pattern" , "ims" ) )
assertEquals ( "" , e . toString ( ) )
e . assertEquals ( new E_StrReplace ( asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) ) )
e . isInstanceOf ( E_StrSubstring . class )
assertNotNull ( e )
assertNotNull ( e )
e should  be null
assertEquals ( "hello" , e . asVar ( ) )
assertEquals ( expectedValue , result ) ; // <AssertPlaceHolder>
assertEquals ( expected , actual )
assertEquals ( null , e )
assertEquals ( "ThresholdPolicyCount: Threshold=???, Count=???" , toString ( ) )
assertEquals ( dsHandler , handlerBlock . getDatasetHandler ( ) )
PrologHandler expectedHandler = getProducer ( ) . newInstance ( ) . getHandlerBlock ( ) . getPrologHandler ( )
assertEquals ( "http://example.com/uri" , prologClause . getBaseURI ( ) )
assertEquals ( "http://example.com/uri" , prologClause . getBaseURI ( ) )
assertEquals ( "http://example.com/uri" , prologClause . getBaseURI ( ) )
assertEquals ( "http://example.com/uri2" , prologClause . getBaseURI ( ) )
assertEquals ( handler , selectClause . getSelectHandler ( ) )
assertEquals ( 1 , visitor . getTripleCount ( ) )
assertEquals ( 1 , whereClause . getWhereHandler ( ) . size ( ) )
assertEquals ( 1 , visitor . getTripleCount ( ) )
assertEquals ( 1 , visitor . getOptionalElements ( ) . size ( ) )
assertEquals ( 1 , visitor . getOptionalCount ( ) )
assertEquals ( 1 , epb . getPattern ( ) . getList ( ) . size ( ) )
assertEquals ( ef , visitor . getFilter ( ) )
assertEquals ( 1 , visitor . getErrors ( ) . size ( ) )
assertEquals ( 1 , visitor . getErrors ( ) . size ( ) )
assertEquals ( 1 , epb . getPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , visitor . getTriplePaths ( ) . size ( ) )
assertThat ( visitor . isValid ( ) ) . isTrue ( )
assertEquals ( 1 , visitor . getBindings ( ) . size ( ) )
assertEquals ( "foo" , handler . fromNamed ( "foo" ) )
assertEquals ( "foo" , handler . from ( "foo" ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getWhereList ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getOptionalCount ( ) )
assertEquals ( 1 , visitor . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , epb . getPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , visitor . getTriplePaths ( ) . size ( ) )
assertEquals ( true , visitor . isValid ( ) )
assertEquals ( 1 , visitor . getViolations ( ) . size ( ) )
assertEquals ( 1 , visitor . getFilterCount ( ) )
assertEquals ( 1 , handler . getSubQueries ( ) . size ( ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getSubQueries ( ) . size ( ) )
assertEquals ( 1 , handler . getQueryPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , handler . getQueryPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , visitor . getBindings ( ) . size ( ) )
assertEquals ( 1 , visitor . getBindings ( ) . size ( ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getMinusList ( ) . size ( ) )
assertEquals ( values , handler . getValuesHandler ( ) . getValueVar ( Converters . makeVar ( var ) ) )
assertEquals ( 2 , edat . size ( ) )
assertEquals ( 2 , visitor . getBindings ( ) . size ( ) )
assertEquals ( QueryExecException . class , e . getClass ( ) )
assertTrue ( rows > 0 )
assertTrue ( rows == 2 )
assertTrue ( rows > 0 )
assertTrue ( rows == 2 )
assertTrue ( rows == 10 )
assertEquals ( evalRowCount , cachedRowCount )
assertEquals ( 10 , rows )
assertEquals ( 1000 , rows )
assertEquals ( 9 , actualRowCount )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 1000 , actualRowCount )
assertEquals ( 3 , actualRowCount )
assertEquals ( op3 , op2 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertThat ( result , is ( expResult ) )
assertEquals ( 3 , x )
assertEquals ( 4 , x )
assertEquals ( count , < expected value >  )
assertEquals ( "expectedValue" , x )
assertEquals ( "expectedValue" , JSON . parse ( x ) )
assertEquals ( "expectedValue" , x )
assertEquals ( 1 , x )
assertEquals ( "expectedValue" , x1 )
assertEquals ( "pong" , x )
assertEquals ( "http://localhost:" + port + "/$/stats" , x )
assertEquals ( "http://localhost:" + port + "/$/metrics" , x )
assertEquals ( "http://localhost:" + port + "/$/tasks" , x )
assertEquals ( 0 , dataAccessPointRegistry . size ( ) )
assertEquals ( 200 , in . getStatusCode ( ) )
assertEquals ( true , in . available ( ) > 0 )
assertEquals ( 200 , in . getStatusCode ( ) )
assertEquals ( 200 , in . getStatusCode ( ) )
assertEquals ( 200 , in . getStatusCode ( ) )
assertNotNull ( in )
assertTrue ( in . available ( ) > 0 )
assertEquals ( HttpStatus . SC_OK , in . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , in . getStatusCode ( ) )
assertEquals ( 1 , x )
assertEquals ( "expectedValue" , x )
assertEquals ( "expectedValue" , x )
assertEquals ( null , x )
assertEquals ( null , x )
assertEquals ( b . get ( x ) , rs . nextBinding ( ) . get ( x ) )
assertTrue ( result )
assertEquals ( n , expectedNumberOfResults )
assertEquals ( x , 0 )
assertEquals ( x , 0 )
assertEquals ( null , auth )
assertEquals ( null , auth )
assertEquals ( HttpSC . NOT_FOUND_404 , ex . getStatusCode ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( HttpSC . NOT_FOUND_404 , ex . getStatusCode ( ) )
assertNotNull ( in )
assertEquals ( expectedValue , actualValue )
assertEquals ( HttpSC . NOT_FOUND_404 , ex . getStatusCode ( ) )
assertEquals ( HttpSC . OK_200 , ex . getStatusCode ( ) )
assertSeen ( results2 , s2 , s3 )
assertSeen ( results2 )
assertEquals ( 10 , Integer . parseInt ( x ) )
assertEquals ( 100 , Integer . parseInt ( x ) )
assertEquals ( 2 , c )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "assertTrue(result.equals(expResult));"
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResults , results )
assertEquals ( expResults , results )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( result . equals ( expResult ) )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.000001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "assertEquals(expResult, result);"
AssertPlaceHolder = "assertEquals(expResult, result);"
AssertPlaceHolder = "assertEquals(expResult, result);"
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , geo )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( result , equalTo ( expResult ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertThat ( result , is ( expResult ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( result , is ( expResult ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( 10.0 , result , 0.001 )
assertEquals ( 10.0 , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult . getDouble ( ) , result . getDouble ( ) , 0.000001 )
assertEquals ( expResult . getDouble ( ) , result . getDouble ( ) , 0.000001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThrows ( ExprEvalException . class , ( ) -> instance . exec ( v1 , v2 , v3 ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "Assert.assertNotNull(dataset);"
assertEquals ( 1 , graph . size ( ) )
AssertPlaceHolder = "StreamRDFCounting count = count(); assertEquals(0, count.getTriplesCount());"
assertEquals ( 0 , count ( ) . getCount ( ) ) ;
assertEquals ( graph , GSP . service ( endpoint ( ) ) . defaultGraph ( ) . GET ( ) )
assertEquals ( HttpStatus . SC_OK , graph . getStatusCode ( ) )
assertEquals ( 1 , 1 )
assertNotNull ( dsg )
assert b
assertEquals ( true , b )
assertEquals ( "<_:ABC>" , t . getSubject ( ) . toString ( ) )
assertEquals ( "<_:BCD>" , t . getSubject ( ) . toString ( ) )
assertEquals ( "<_:789>" , obj . toString ( ) )
assertEquals ( "Expected response code 200" , 200 , pingURL ( ) )
assertEquals ( 200 , httpGet_03 ( ) )
assertEquals ( "" , x )
assertEquals ( "<expected value>" , simpleQuery ( ) )
assertEquals ( "<expected value>" , PLAIN ( ) )
assertEquals ( "Hello" , HttpOp . httpPut ( PLAIN ( ) , WebContent . contentTypeTextPlain , HttpLib . stringBody ( "Hello" ) ) )
assertEquals ( "World" , ? ? ? )
assertEquals ( 200 , HttpOp . getLastResponseCode ( ) )
assertEquals ( true , ? ? ? queryGet_01 ( ) )
assertEquals ( WebContent . contentTypeResultsJSON , in . getContentType ( ) )
assertNotNull ( dsg )
assertNull ( item )
assertEquals ( 0 , x )
assertThat ( iter . hasNext ( ) , is ( true ) )
AssertPlaceHolder = "assertEquals(1, dataset.getDefaultGraph().size());"
iter . hasNext ( )
assertEquals ( 0 , StreamRDFCounting . getCount ( ) )
assertEquals ( 10 , x )
assertEquals ( 2 , x )
assertEquals ( 10 , x )
assertEquals ( 10 , x )
assertEquals ( 2 , x )
AssertPlaceHolder = "Assert.assertTrue(qIter.hasNext());"
assertEquals ( 1 , qIter . size ( ) )
assertEquals ( 1 , x )
assertEquals ( 1 , x )
assertTrue ( b )
assertEquals ( LiteralKindCase . VALUE_OF , Service . parseTimeout ( Integer . valueOf ( 56 ) ) )
assertEquals ( "Expected timeout value to be 0" , 0 , x )
assertThat ( b ) . isTrue ( )
assertTrue ( b )
assertEquals ( 1 , ds . getDefaultModel ( ) . size ( ) )
assertEquals ( AssemblerException . class , e . getClass ( ) )
assertEquals ( "http://example/" , x )
assertEquals ( "http://example/2" , x )
assertEquals ( sizeBefore , sizeAfter )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , batchResults . length )
assertEquals ( 5 , batchResults . length )
assertEquals ( JenaMetadata . DEFAULT_CATALOG , conn . getCatalog ( ) )
AssertPlaceHolder = "assertNull(conn.getWarnings());"
assertEquals ( null , rset . getWarnings ( ) )
assertEquals ( null , stmt . getWarnings ( ) )
assertEquals ( 1 , stmt . execute ( ) )
assertTrue ( stmt . isClosed ( ) )
assertEquals ( 1 , stmt . getParameterMetaData ( ) . getParameterCount ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( pss . toString ( ) , "SELECT * WHERE { ?s ?p ? }" )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( pss . toString ( ) , "SELECT * WHERE { ?s ?p ? }" )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( pss . toString ( ) , "SELECT * WHERE { ?s ?p ? }" )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( rdfNode2 . getModel ( ) , securedModel )
securedModel . getGraph ( ) should be equal  to baseModel . getGraph ( )
assertEquals ( rdfNode , rdfNode2 )
assertEquals ( rdfNode2 , securedModel . createTypedLiteral ( "yeehaw2" ) )
assertEquals ( expected , actual )
assertNotNull ( m2 )
assertNotNull ( alt )
assertNotNull ( bag )
assertNotNull ( seq )
assertNotNull ( l )
assertEquals ( 1 , count )
assertTrue ( b )
assertTrue ( b )
assertTrue ( b )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 0 , rs . getRowNumber ( ) )
assertNotNull ( m )
assertEquals ( 1 , link . newQuery ( ) . build ( ) . execSelect ( ) . toList ( ) . size ( ) )
rs . hasNext ( )
assertTrue ( b )
assertEquals ( 0 , g . size ( ) )
assertTrue ( b )
assertTrue ( b )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 1 , counter . get ( ) )
rs . hasNext ( )
assertNotNull ( x )
assertEquals ( 0 , g . size ( ) )
assertEquals ( output , output2 )
assertEquals ( "" , x )
assertExists ( mout . latestFilename ( ) . toString ( ) )
assertEquals ( base , graph . getBaseURI ( ) )
assertSame ( dgBase1 , dgBase2 )
assertEquals ( false , b )
assertEquals ( false , b )
assertEquals ( true , b )
assertEquals ( len , ? ? ? )
assertEquals ( n , pVars . length )
assertEquals ( 10 , bb1 . capacity ( ) )
assertEquals ( id1 , f . write ( x1 ) )
assertEquals ( "http://example.com/x" , x )
assertEquals ( "http://foo/" , uri )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertThat ( mapped , is ( equalTo ( expected ) ) )
assertEquals ( tuple , tuple2 )
assertEquals ( hash ( x1 ) , hash ( x2 ) )
assertEquals ( expected , hash ( x1 ) )
assertEquals ( hash ( x1 ) , hash ( x2 ) )
assertEquals ( params1 , params2 )
assertEqualsStoreParams ( sp , input )
assertEquals ( sp , sp )
assertEqualsStoreParams ( params , params2 )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEquals ( expectedValue , x )
assertThrows ( ConcurrentModificationException . class , ( ) -> m . getGraph ( ) . add ( t ) )
assertThrows ( ConcurrentModificationException . class , ( ) -> iter1 . hasNext ( ) )
assertThrows ( ConcurrentModificationException . class , ( ) -> m . getGraph ( ) . add ( t ) )
assertThrows ( ConcurrentModificationException . class , ( ) -> iter1 . next ( ) )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( "http://host/bar0" , g1 . getPrefixMapping ( ) . getNsPrefixURI ( "foo0" ) )
assertEquals ( 1 , m1 . getNsPrefixMap ( ) . size ( ) )
assertEquals ( "expectedValue" , uri )
dsg . contains ( Quad . defaultGraphNodeGenerated , Node . ANY , Node . ANY , Node . ANY )
assertEquals ( 1 , dsg . getDefaultGraphTDB ( ) . size ( ) )
assertEquals ( uri , "http://example.org/" )
assertEquals ( 1 , graph . size ( ) )
assertEquals ( 37 , nodeId . getValue ( ) )
assertNotNull ( nodeId )
assertEquals ( n , expectedResultSetSize )
assertNotNull ( sConn )
assertEquals ( txnmgr , getTransactionManager ( ) )
assertNotNull ( rwx )
assertEquals ( ds1 . getDefaultModel ( ) , ds2 . getDefaultModel ( ) )
assertEquals ( ds1 . getDefaultModel ( ) , ds2 . getDefaultModel ( ) )
assertEquals ( expectedModel , ds2 . getDefaultModel ( ) )
assertEquals ( "http://example.com/x" , x )
assertEquals ( "http://example.org/" , uri )
assertEqualsStoreParams ( sp , input )
assertEqualsStoreParams ( sp , sp )
assertEqualsStoreParams ( params , params2 )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , g1 . getPrefixMapping ( ) . getNsPrefixMap ( ) . size ( ) )
assertEquals ( 1 , m1 . getNsPrefixMap ( ) . size ( ) )
assertEquals ( n , expectedValue )
assertEquals ( 1 , n )
assertTrue ( b )
assertTrue ( b )
assertEquals ( dg1 , dg2 )
assertEquals ( expectedURIs . size ( ) , scores . size ( ) )
assertEquals ( "expectedValue" , entityDef . getPrimaryField ( ) )
assertEquals ( "expectedValue" , focalMethod . getEntityField ( ) )
assertEquals ( 1 , rs . getRowNumber ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedAnalyzer , entDef . getAnalyzer ( field ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedAnalyzer , entityDef . getAnalyzer ( field ) )
assertEquals ( "Expected exception of type TextIndexException" , TextIndexException . class , e . getClass ( ) )
assertEquals ( before , after - 1 )
assertEquals ( spec1 , dataset . getSpec ( ) )
assertEquals ( dsgText . getDefaultIndex ( ) . getDocProducer ( ) . getClass ( ) , CustomTextDocProducer . class )
assertNotNull ( getDocDef ( ) )
assertEquals ( ModelFactory . createModelForGraph ( graph ) , index . open ( a , root , null ) )
assertEquals ( directory , index . getDirectory ( ) )
assertEquals ( queryAnalyzer , index . getQueryAnalyzer ( ) )
assertThat ( sgroups . size ( ) , is ( 1 ) )
assertEquals ( "15.0x15.0" , visitor . toString ( ) )
assertEquals ( element , a . getElement ( ) )
assertEquals ( "C" , at . getSymbol ( ) )
assertEquals ( "C" , at . getSymbol ( ) )
assertEquals ( at1 . getAtomTypeName ( ) , at2 . getAtomTypeName ( ) )
assertEquals ( "C4" , at1 . getAtomTypeName ( ) )
assertEquals ( at1 . getBondOrderSum ( ) , at2 . getBondOrderSum ( ) )
assertEquals ( at1 . getBondOrderSum ( ) , 1.5 )
assertEquals ( co1 . compare ( co2 ) , true )
assertTrue ( co1 . compare ( co2 ) )
assertEquals ( co1 . getID ( ) , co2 . getID ( ) )
assertEquals ( null , container . getTitle ( ) )
assertThat ( array , is ( new IAtomContainer [ ] { p1 , p2 , p3 , p4 } ) )
assertThat ( nmol , is ( 1 ) )
assertThat ( index , is ( 2 ) )
assertThat ( container . size ( ) , is ( 3 ) )
assertThat ( container . get ( location ) , is ( container . get ( location + 1 ) ) )
assertEquals ( "C" , e . getSymbol ( ) )
assertEquals ( e1 , e2 )
assertEquals ( e1 . getAtomicNumber ( ) , e2 . getAtomicNumber ( ) )
assertEquals ( e1 . compareDiffSymbol ( e2 ) , true )
assertEquals ( e1 . getAtomicNumber ( ) , e2 . getAtomicNumber ( ) )
assertEquals ( "C" , i . getSymbol ( ) )
assertEquals ( "C" , i . getSymbol ( ) )
assertEquals ( iso . getMassNumber ( ) , iso2 . getMassNumber ( ) )
assertEquals ( iso . getMassNumber ( ) , iso2 . getMassNumber ( ) )
assertEquals ( iso . getMassNumber ( ) , iso2 . getMassNumber ( ) )
assertEquals ( iso . getExactMass ( ) , iso2 . getExactMass ( ) )
assertEquals ( iso . getNaturalAbundance ( ) , iso2 . getNaturalAbundance ( ) , 0.000001 )
assertEquals ( 0 , mapping . size ( ) )
assertThat ( mfS , is ( notNullValue ( ) ) )
assertThat ( mfS . size ( ) , is ( 0 ) )
assertEquals ( "" , mf . toString ( ) )
assertEquals ( element , a . getElement ( ) )
assertThat ( mfS , is ( notNullValue ( ) ) )
assertEquals ( a . getElement ( ) , element )
assertEquals ( "C" , at . getSymbol ( ) )
assertEquals ( "C" , at . getSymbol ( ) )
assertEquals ( at1 . getAtomTypeName ( ) , at2 . getAtomTypeName ( ) )
assertEquals ( "C4" , at1 . getAtomTypeName ( ) )
assertEquals ( at1 . getBondOrderSum ( ) , at2 . getBondOrderSum ( ) )
assertEquals ( at1 . getBondOrderSum ( ) , 1.5 )
assertTrue ( co1 . compare ( co2 ) )
assertEquals ( co1 . getID ( ) , co2 . getID ( ) )
assertEquals ( "C" , e . getSymbol ( ) )
assertTrue ( co1 . compare ( co2 ) )
assertEquals ( e1 . getAtomicNumber ( ) , e2 . getAtomicNumber ( ) )
assertEquals ( e1 . compareDiffSymbol ( e2 ) , true )
assertEquals ( e1 . getAtomicNumber ( ) , e2 . getAtomicNumber ( ) )
assertEquals ( "C" , i . getSymbol ( ) )
assertEquals ( "C" , i . getSymbol ( ) )
assertThat ( mfS . size ( ) , is ( 0 ) )
assertNotNull ( a )
assertEquals ( TRUE , expr . getValue ( ) )
assertEquals ( FALSE , expr . getValue ( ) )
assertEquals ( true , expr . evaluate ( ) )
assertEquals ( expr , matches . getExpr ( ) )
assertEquals ( expr , new Expr ( AND , new Expr ( FALSE ) , new Expr ( TRUE ) ) )
assertEquals ( expr , new Expr ( OR , new Expr ( TRUE ) , new Expr ( TRUE ) ) )
assertEquals ( expr , matches . getExpr ( ) )
assertEquals ( expr , new Expr ( OR , new Expr ( FALSE ) , new Expr ( TRUE ) ) )
assertEquals ( expr , new Expr ( OR , new Expr ( FALSE ) , new Expr ( FALSE ) ) )
assertEquals ( false , expr . evaluate ( atom ) )
assertEquals ( false , expr . evaluate ( atom ) )
assertEquals ( false , expr . isStereo ( ) )
assertThat ( expr . isAliphatic ( atom ) ) . isTrue ( )
assertTrue ( expr . matches ( lines ) )
assertEquals ( 0 , atom . getImplicitHydrogenCount ( ) )
assertEquals ( null , atom . getImplicitHydrogenCount ( ) )
assertEquals ( 2 , expr . getUnsaturatedCount ( ) )
assertEquals ( 1 , matches ( lines ) )
assertEquals ( expr . getElement ( ) , atom . getAtomicNumber ( ) )
assertEquals ( expr . getElement ( ) , atom . getAtomicNumber ( ) - 1 )
assertEquals ( expr . getAtom ( ) , atom )
assertEquals ( true , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( true , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( 1 , expr . getHydrogenCount ( ) )
assertEquals ( 1 , expr . getImplicitHydrogenCount ( ) )
assertEquals ( 3 , expr . getTotalHCount ( ) )
assertEquals ( 2 , expr . getTotalHCount ( ) )
assertEquals ( null , expr . getImplicitHydrogenCount ( ) )
assertEquals ( 2 , expr . getHCount ( ) )
assertEquals ( 1 , expr . getDegree ( ) )
assertEquals ( 1 , atom . getBondCount ( ) )
assertEquals ( 1 , expr . getTotalDegree ( ) )
assertEquals ( 1 , expr . getTotalDegree ( ) )
assertEquals ( 2 , expr . getImplicitHydrogenCount ( ) )
assertEquals ( 1 , expr . getDegree ( ) )
assertEquals ( 1 , expr . getHeteroSubstituentCount ( ) )
assertEquals ( 2 , expr . getHeteroSubstituentCount ( ) )
assertEquals ( 1 , expr . getHeteroSubstituentCount ( ) )
assertEquals ( 4 , expr . getValence ( ) )
assertEquals ( 4 , expr . getValence ( ) )
assertEquals ( 4 , expr . getValence ( ) )
assertEquals ( 4 , expr . getValence ( ) )
assertEquals ( expr . getIsotope ( ) , atom . getMassNumber ( ) )
assertEquals ( 13 , expr . getMassNumber ( ) )
assertEquals ( - 1 , expr . getFormalCharge ( ) )
assertEquals ( - 1 , expr . getFormalCharge ( ) )
assertEquals ( 3 , expr . evaluate ( atom , null ) )
assertEquals ( 3 , expr . getValue ( ) )
assertEquals ( 3 , expr . getValue ( ) )
assertEquals ( 3 , expr . getValue ( ) )
assertEquals ( 2 , expr . getInsaturation ( ) )
assertEquals ( 2 , expr . getInsaturation ( ) )
assertEquals ( null , atom . getAtomicNumber ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP2 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP2 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( 3 , expr . getHybridisationNumber ( ) )
assertEquals ( 3 , expr . getHybridisationNumber ( ) )
assertEquals ( IAtomType . Hybridization . SP3D1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP3D2 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP3D3 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP3D4 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP3D5 , atom . getHybridization ( ) )
assertEquals ( null , atom . getHybridization ( ) )
assertEquals ( IAtomType . Hybridization . SP1 , atom . getHybridization ( ) )
assertEquals ( expr , matches ( lines ) )
assertEquals ( ReactionRole . Product , atom . getProperty ( CDKConstants . REACTION_ROLE ) )
assertEquals ( null , atom . getProperty ( CDKConstants . REACTION_ROLE ) )
assertEquals ( 6 , expr . getRingSize ( ) )
assertEquals ( 10 , expr . getRingSize ( ) )
assertEquals ( false , expr . isRing ( ) )
assertEquals ( false , atom . isInRing ( ) )
assertEquals ( 6 , expr . getRingCount ( ) )
assertEquals ( 6 , expr . getSize ( ) )
assertEquals ( 10 , expr . getSize ( ) )
assertEquals ( expr , atom )
assertNotNull ( matches ( lines ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( expr , bond . getExpr ( ) )
assertEquals ( true , bond . isAromatic ( ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( false , expr . isInChain ( ) )
assertEquals ( true , expr . isInChain ( ) )
assertEquals ( true , expr . matches ( lines ) )
assertEquals ( false , expr . matches ( lines ) )
assertEquals ( IBond . Order . DOUBLE , expr . getBondOrder ( bond ) )
assertEquals ( IBond . Order . SINGLE , expr . getBondOrder ( bond ) )
assertEquals ( 2 , expr . getOrder ( ) )
assertEquals ( null , bond . getOrder ( ) )
assertEquals ( false , expr . isSingleOrAromatic ( bond ) )
assertThat ( expr1 . or ( expr2 ) . left ( ) ) . isEqualTo ( expr1 )
assertThat ( expr2 . left ( ) ) . isEqualTo ( expr1 )
assertThat ( expr1 . left ( ) ) . isEqualTo ( left )
assertTrue ( it . hasNext ( ) )
assertEquals ( "1, 3-7, 9, >11" , rgrLst . getOccurrence ( ) )
assertEquals ( null , rgrLst . getOccurrence ( ) )
assertEquals ( AdductionProtonLPReaction . class , engine . getParameterClass ( paramClass ) )
assertEquals ( entry , dictionary . getEntry ( entryString . toLowerCase ( ) ) )
assertEquals ( entry . getDefinition ( ) , expectedDefinition )
assertEquals ( "Expected description" , expectedDescription , entry . getDescription ( ) )
assertEquals ( REAC_IMPL_VENDOR , spec . getImplementationVendor ( ) )
assertEquals ( REAC_REF , spec . getSpecificationReference ( ) )
assertEquals ( REAC_IMPL_ID , spec . getImplementationIdentifier ( ) )
assertEquals ( REAC_IMPL_TITLE , spec . getImplementationTitle ( ) )
assertEquals ( null , paramSet . getValue ( SgroupKey . KEY ) )
assertEquals ( new Object ( ) , paramSet . getValue ( ) )
assertEquals ( "C" , at . getSymbol ( ) )
assertNotNull ( e )
assertEquals ( e1 . getAtomicNumber ( ) , e2 . getAtomicNumber ( ) )
assertEquals ( "C" , i . getSymbol ( ) )
assertEquals ( 2 , mapping . size ( ) )
assertEquals ( matcher , SybylAtomTypeMatcher . getInstance ( SilentChemObjectBuilder . getInstance ( ) ) )
assertNotNull ( matcher )
assertNotNull ( type )
assertEquals ( type . getAtomTypeName ( ) , getAtomTypeName ( ) )
assert . assertEquals ( expectedAtomTypeName , type . getAtomTypeName ( ) )
assertEquals ( mapper , SybylAtomTypeMatcher . getInstance ( "org/openscience/cdk/dict/data/cdk-sybyl-mappings.owl" ) )
assertEquals ( mapper , AtomTypeMapper . getInstance ( "org/openscience/cdk/dict/data/cdk-sybyl-mappings.owl" , this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "org/openscience/cdk/dict/data/cdk-sybyl-mappings.owl" ) ) )
assertNotNull ( atom )
assertEquals ( mock , deref ( mock ) )
assertSame ( mock , ptr . deref ( ) )
assertSame ( mock , deref ( ptr ) )
assertNotNull ( atom )
assertNotNull ( mock )
assertNotNull ( ptr )
assertNotNull ( ptr )
assertNotNull ( mol )
assertNotNull ( mol )
assertArrayEquals ( expectedTypes , testedAtomTypes )
assertNotNull ( type . getAtomTypeName ( ) )
assertEquals ( 8 , mol . getAtomCount ( ) )
assert . assertEquals ( expectedAtomTypeName , type . getAtomTypeName ( ) )
assertNotNull ( type . getAtomTypeName ( ) )
assertEquals ( "expectedAtomTypeName" , atom . getAtomTypeName ( ) )
assertEquals ( matcher , SybylAtomTypeMatcher . getInstance ( DefaultChemObjectBuilder . getInstance ( ) ) )
assertNotNull ( matcher )
assertEquals ( type , atom . getAtomTypeName ( ) )
matcher . matches ( atom )
assertEquals ( "Carbon diradical" , foundType . getAtomTypeName ( ) )
assertEquals ( atomTypeP , type )
assertEquals ( atf , new ChemObject ( ) . getBuilder ( ) . getInstance ( ) )
assertEquals ( isotope , clone )
assertEquals ( SybylAtomTypeMatcher . getInstance ( builder ) , factories . get ( builder ) )
assertEquals ( 1 , isofac . getAtomicNumber ( ) )
assertEquals ( 2 , isotope . getMassNumber ( ) )
assertEquals ( 0.0 , isotope . getExactMass ( ) , 0.0001 )
assertEquals ( "Cl" , isotope . getSymbol ( ) )
assertEquals ( 35 , element . getAtomicNumber ( ) )
assertEquals ( "C" , element . getSymbol ( ) )
assertEquals ( "O" , symbol )
assertEquals ( isofac . getAtom ( i ) , container . getAtom ( i ) )
assertEquals ( isofac . getIsotope ( "symbol" , 1 ) , null )
assertEquals ( isotopes . getInstance ( ) . getMajorIsotope ( elem ) , clone ( majorIsotope [ elem ] ) )
assertEquals ( isofac . getIsotope ( "symbol" , 1 ) , null )
assertNotNull ( match )
assertEquals ( match , isofac . getIsotope ( "H" , 13.00001 , 0.0001 ) )
assertEquals ( null , element )
assertEquals ( null , isotope )
assertEquals ( 0 , getFlagValue ( ) )
assertEquals ( "C" , chemObject . getSymbol ( ) )
assertEquals ( 12 , chemObject . getAtomicNumber ( ) )
assertEquals ( chemobj . getBuilder ( ) , handler . getBuilder ( ) )
assertEquals ( chemobj . getBuilder ( ) , handler . getBuilder ( ) )
assertEquals ( "Expected timeout message" , "Timeout occurred after 12 seconds" , e . getMessage ( ) )
assertEquals ( "Expected timeout message" , "MCS" , e . getMessage ( ) )
assertThat ( AllCycles . rank ( g ) , is ( new int [ ] { 4 , 5 , 3 , 1 , 2 , 0 } ) )
assertThat ( ac . size ( ) ) . isEqualTo ( 7 )
assertThat ( ac . k4Size ( ) , is ( 6 ) )
assertThat ( ac . k5Size ( ) , is ( 5 ) )
assertThat ( ac . k6Size ( ) , is ( 3 ) )
assertThat ( ac . size ( ) , is ( 7 ) )
assert m . get ( 0 , 0 ) == false
assert m . get ( i ) . equals ( rows . get ( i ) )
assertThat ( esc . size ( ) , is ( 0 ) )
assertThat ( esc . size ( ) , is ( 0 ) )
assertThat ( esc . size ( ) , is ( 3 ) )
assertThat ( esc . size ( ) , is ( 0 ) )
assertThat ( esc . size ( ) , is ( 0 ) )
assertThat ( essential . size ( ) , is ( 3 ) )
assertThat ( essential . size ( ) , is ( 0 ) )
assertThat ( essential . size ( ) , is ( 0 ) )
assertThat ( basis . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( essential . size ( ) , is ( 0 ) )
assertThat ( ms . iterator ( ) , is ( sameInstance ( iterator ) ) )
assertThat ( new InitialCycles ( g ) . graph ( ) , is ( sameInstance ( g ) ) )
assertThat ( ms . iterator ( ) , is ( sameInstance ( iterator ) ) )
assertThat ( cycles_K1 ( ) ) . isEqualTo ( cycles ( ) )
assertThat ( cycles . size ( ) , is ( 5 ) )
assertEquals ( "1x1" , p . toString ( ) )
assertThat ( mcb . size ( ) , is ( 3 ) )
assertThat ( mcb . size ( ) , is ( 3 ) )
assertThat ( mcb . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( mcb . size ( ) , is ( 3 ) )
assertEquals ( 3 , length )
assertEquals ( "C" , atom . getSymbol ( ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertThat ( relevant . size ( ) , is ( 3 ) )
assertEquals ( 6 , paths . getShortestPaths ( ) . size ( ) )
I 'm sorry, but I cannot generate the assertion code without knowing the expected behavior or the specific condition you want to assert. Could you please provide more information about the assertion you want to make?
assertEquals ( 1 , paths . getShortestPaths ( ) . size ( ) )
assertEquals ( expected , paths . getPaths ( ) )
assertEquals ( expected , paths . getPaths ( ) )
assertEquals ( expected , paths . getPaths ( ) )
assertNotNull ( paths )
assertEquals ( 4 , paths . length )
assertThat ( esssr . size ( ) , is ( 3 ) )
assertThat ( esssr . size ( ) , is ( 3 ) )
assertThat ( esssr . size ( ) , is ( 3 ) )
assertThat ( esssr . size ( ) , is ( 0 ) )
assertThat ( esssr . size ( ) , is ( 3 ) )
assertThat ( vsc . size ( ) , is ( 3 ) )
assertThat ( vsc . size ( ) , is ( 3 ) )
assertThat ( vsc . size ( ) , is ( 3 ) )
assertThat ( vsc . size ( ) , is ( 3 ) )
assertThat ( vsc . size ( ) , is ( 3 ) )
assertThat ( ms . toArray ( ) , is ( new int [ ] [ ] { p1 , p2 , p3 , p4 } ) )
assertThat ( ms . toArray ( ) , is ( new int [ ] [ ] { p1 , p2 , p3 , p4 } ) )
assertThat ( ms . toArray ( ) , is ( new int [ ] [ ] { p1 , p2 , p3 , p4 } ) )
assertEquals ( Conformation . OPPOSITE , stereo . getConformation ( ) )
assertEquals ( DefaultChemObjectBuilder . getInstance ( ) , stereo . getBuilder ( ) )
chirality . assertStereo ( Stereo . CLOCKWISE )
chirality . getBuilder ( ) . equals ( DefaultChemObjectBuilder . getInstance ( ) )
assertEquals ( logger , LoggingToolFactory . getLoggingToolClass ( ) )
assertEquals ( logger . getClass ( ) , expectedLoggerClass )
assertEquals ( logger , instance . getClass ( ) )
assertEquals ( CustomLogger . class , instance . getClass ( ) )
assertEquals ( IBond . Order . QUADRUPLE , getMaximumBondOrder ( bonds ) )
assertThat ( bonds . get ( 0 ) . getOrder ( ) , is ( equalTo ( IBond . Order . SINGLE ) ) )
assertThat ( bonds . get ( 0 ) . getOrder ( ) , is ( equalTo ( IBond . Order . DOUBLE ) ) )
assertThat ( bonds . get ( 0 ) . getOrder ( ) , is ( equalTo ( IBond . Order . QUINTUPLE ) ) )
assertArrayEquals ( src , dest )
assertEquals ( "" , diff ( a , b ) )
assertEquals ( type , types [ i ] )
assertNotNull ( mol )
assertEquals ( expectedAtom , getAtom ( position ) )
assertEquals ( Stereo . UP_DOWN , bond . getStereo ( ) )
assertEquals ( mol . getAtom ( 0 ) , bond . getAtom ( 0 ) )
assertEquals ( expectedAtom , getAtom ( position ) )
assertEquals ( expectedAtom , focalObject . getAtom ( position ) )
assertEquals ( 1.732 , length , 0.001 )
assertEquals ( CoordinateCoverage . PARTIAL , get2DCoordinateCoverage ( container ) )
assertEquals ( new Point3d ( 1 , 1 , 0 ) , atom1 . getPoint3d ( ) )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 123.45 , volume , 0.001 )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 123.45 , volume , 0.001 )
assertEquals ( 4.0 , volume , 0.0001 )
assertEquals ( 8.0 , volume , 0.001 )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 1.0 , volume , 0.0001 )
assertEquals ( 1.0 , volume , 0.0001 )
assertEquals ( 123.45 , volume , 0.001 )
assertEquals ( 0.0 , volume , 0.0001 )
assertEquals ( 123.45 , volume , 0.001 )
assertEquals ( 123.45 , volume , 0.001 )
assertEquals ( 2 , atomContainer . getBondCount ( ) )
assertEquals ( 2 , acbp . getPermutations ( ) . size ( ) )
assertEquals ( "9x9" , matching . toString ( ) )
assertTrue ( it . hasNext ( ) )
assertTrue ( allOk )
assert less ( vs [ i ] , vs [ i - 1 ] , curr , prev )
assertEquals ( expected , ac )
bspt . toString ( ) . equals ( "3x3" )
assertEquals ( "1.0x1.0" , point . toString ( ) )
assertNotNull ( forest . get ( name ) )
assertEquals ( 0 , forest . getRoot ( 0 ) )
assertEquals ( 1 , forest . find ( 0 ) )
assertEquals ( rng , RandomNumbersTool . getRandom ( ) )
assertEquals ( DESC_IMPL_VENDOR , spec . getImplementationVendor ( ) )
assertEquals ( DESC_REF , spec . getSpecificationReference ( ) )
assertEquals ( "DESC_IMPL_ID" , spec . getImplementationIdentifier ( ) )
assertEquals ( "Expected implementation title" , DESC_IMPL_TITLE , spec . getImplementationTitle ( ) )
assertEquals ( doubleVal , value . getValue ( key ) )
assertEquals ( value , getSpecification ( ) )
assertEquals ( "A test exception" , getException ( ) . getMessage ( ) )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
result . toString ( ) . equals ( "5.0x5.0" )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
assertEquals ( "5x5" , result . toString ( ) )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
assertThat ( fused . size ( ) , is ( 3 ) )
assertThat ( fused . size ( ) , is ( 3 ) )
assertThat ( fused . size ( ) , is ( 3 ) )
assertEquals ( n , fragment . getAtomCount ( ) )
assertThat ( fragments . size ( ) , is ( 3 ) )
assertThat ( isolated . size ( ) , is ( 3 ) )
assertEquals ( n , fragment . getAtomCount ( ) )
assertThat ( fused . size ( ) , is ( 3 ) )
assertEquals ( 3 , element . getLigands ( ) . size ( ) )
assertEquals ( 3 , element . getLigands ( ) . size ( ) )
assertEquals ( 0 , element . getCenter ( ) . getNorth ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter ( ) . getCenter
assertEquals ( 0 , element . getCenter ( ) . getCenterAtom ( ) . getImplicitHydrogenCount ( ) )
assertEquals ( 0 , element . getCenter ( ) . getX ( ) , 0.001 )
assertEquals ( 0 , element . getCenter ( ) . getX ( ) , 0.001 )
assertEquals ( 0 , element . getLigands ( ) . size ( ) )
assertEquals ( 4 , element . getLigands ( ) . size ( ) )
assertEquals ( 2.0 , distancePos , 0.0001 )
assertEquals ( 0.0 , distance , 0.0001 )
assertEquals ( normal , StereoTool . getNormal ( ORIGIN , axisXPoint , axisYPoint ) )
assertEquals ( TetrahedralSign . CLOCKWISE , tetSign )
assertEquals ( TetrahedralSign . CLOCKWISE , tetSign )
assertEquals ( TetrahedralSign . CLOCKWISE , tetSign )
assertEquals ( TetrahedralSign . CLOCKWISE , tetSign )
assertEquals ( TetrahedralSign . CLOCKWISE , tetSign )
assertEquals ( "1x1" , fsb . toString ( ) )
assertEquals ( "10x0" , fsb . toString ( ) )
assertEquals ( - 1 , totalCharge )
assertEquals ( 46.96885268 , totalExactMass , 0.000001 )
assertEquals ( 174.71 , totalAbudance , 0.001 )
assertEquals ( 2 , totalCharge )
assertEquals ( - 1 , totalCharge )
assertEquals ( atom . getAtomicNumber ( ) , ? ? ? )
assertEquals ( max , getMaximumBondOrder ( connectedBonds ) )
assertEquals ( 2.0 , totalCharge , 0.0001 )
container . getImplicitHydrogenCount ( )
assertEquals ( expectedImplicitHydrogenCount , container . getAtom ( 0 ) . getImplicitHydrogenCount ( ) )
assertEquals ( atom3 , getAtom ( 1 ) )
assertEquals ( 1 , container . getLonePairCount ( ) )
assertEquals ( 1 , container . getSingleElectronCount ( ) )
assertEquals ( "Cl" , mol . getAtom ( 0 ) . getSymbol ( ) )
assertEquals ( 4 , m . getAtomCount ( ) )
assertEquals ( 5 , m . getAtomCount ( ) )
assertThat ( list . size ( ) , is ( 4 ) )
assertThat ( list . size ( ) , is ( 3 ) )
ac1 . equals ( AtomContainerSetManipulator . getRelevantAtomContainer ( som , bondInMol1 ) )
assertEquals ( 12.0 , atom . getExactMass ( ) )
assertEquals ( 12.0 , getExactMass ( ) )
assertThat ( list . size ( ) , is ( 3 ) )
assertThat ( list . size ( ) , is ( 3 ) )
ac1 . equals ( ChemModelManipulator . getRelevantAtomContainer ( chemModel , bondInMol1 ) )
assertThat ( list . size ( ) , is ( 3 ) )
assertThat ( list . size ( ) , is ( 4 ) )
assertThat ( list . size ( ) , is ( 3 ) )
ac1 . equals ( MoleculeSetManipulator . getRelevantAtomContainer ( som , bondInMol1 ) )
assertThat ( basis . size ( ) , is ( 3 ) )
assertThat ( allObjects . size ( ) , is ( 3 ) )
assertEquals ( container , relevantAtomContainer )
assertEquals ( aBond , expectedBond )
assertEquals ( 5 , getAllMolecules ( reaction ) . getAtomContainerCount ( ) )
assertNotNull ( getAllAtomContainers ( reactionScheme ) )
assertEquals ( 3 , moleculeSet . getAtomContainerCount ( ) )
assertThat ( basis . size ( ) , is ( 3 ) )
assertNotNull ( reaction )
assertEquals ( aBond , expectedBond )
assertNotNull ( anAtom )
assertEquals ( aBond , expectedBond )
assertThat ( allObjects . size ( ) , is ( 3 ) )
assertEquals ( ring , RingSetManipulator . getHeaviestRing ( ringset , bondRing2Ring3 ) )
assertEquals ( ringSet , getLargestRingSet ( list ) )
assertEquals ( "Waterium" , molecule . getAtom ( 0 ) . getSymbol ( ) )
assertEquals ( 3 , atom . getImplicitHydrogenCount ( ) )
assertEquals ( null , atom . getImplicitHydrogenCount ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( Order . SINGLE , bond . getOrder ( ) )
assertEquals ( IBond . Order . SINGLE , b . getOrder ( ) )
assertEquals ( expected , aa )
assertEquals ( builder , container . getBuilder ( ) )
assertEquals ( 1 , container . getAtomCount ( ) )
assertEquals ( "C" , type . getSymbol ( ) )
assertEquals ( "C" , type . getElement ( ) . getSymbol ( ) )
assertEquals ( "C" , type . getSymbol ( ) )
assertEquals ( builder , polymer . getBuilder ( ) )
assertEquals ( builder , bond . getBuilder ( ) )
assertEquals ( builder , bond . getBuilder ( ) )
assertEquals ( IBond . Order . SINGLE , bond . getOrder ( ) )
assertEquals ( expectedBond , bond )
assertEquals ( 2 , bond . getAtomCount ( ) )
assertEquals ( IBond . Order . DOUBLE , bond . getOrder ( ) )
assertEquals ( builder , file . getBuilder ( ) )
assertEquals ( builder , model . getBuilder ( ) )
assertEquals ( builder , model . getBuilder ( ) )
assertEquals ( model , builder . newInstance ( IChemObject . class , builder . newInstance ( IChemObject . class ) ) )
assertEquals ( builder , sequence . getBuilder ( ) )
assertNotNull ( crystal )
assertNotNull ( crystal )
assertEquals ( builder , container . getBuilder ( ) )
assertEquals ( builder , element . getBuilder ( ) )
assertEquals ( element , builder . newInstance ( IElement . class , builder . newInstance ( IElement . class ) ) )
assertEquals ( "C" , element . getSymbol ( ) )
assertEquals ( "C" , element . getSymbol ( ) )
assertEquals ( 6 , isotope . getAtomicNumber ( ) )
assertEquals ( 6 , isotope . getAtomicNumber ( ) )
assertEquals ( IIsotope . class , isotope . getClass ( ) )
assertEquals ( "C" , isotope . getSymbol ( ) )
assertEquals ( "C" , isotope . getSymbol ( ) )
assertEquals ( builder , lonePair . getBuilder ( ) )
assertEquals ( 1 , lonePair . getAtom ( ) . getAtomicNumber ( ) )
assertEquals ( builder , mapping . getBuilder ( ) )
assertEquals ( builder , monomer . getBuilder ( ) )
assertEquals ( builder , polymer . getBuilder ( ) )
assertEquals ( IPDBAtom . class , atom . getClass ( ) )
assertEquals ( "O" , atom . getSymbol ( ) )
assertEquals ( "O" , atom . getSymbol ( ) )
assertEquals ( builder , polymer . getBuilder ( ) )
assertEquals ( builder , structure . getBuilder ( ) )
assertEquals ( builder , monomer . getBuilder ( ) )
assertEquals ( builder , atom . getBuilder ( ) )
assertEquals ( IElement . class , atom . getElement ( ) . getClass ( ) )
assertEquals ( IPseudoAtom . class , atom . getClass ( ) )
assertEquals ( "Foo" , atom . getSymbol ( ) )
assertEquals ( "Foo" , atom . getSymbol ( ) )
assertEquals ( "Foo" , atom . getSymbol ( ) )
assertEquals ( "C" , atom . getSymbol ( ) )
assertEquals ( builder , reaction . getBuilder ( ) )
assertEquals ( builder , ring . getBuilder ( ) )
assertEquals ( 4 , ring . getSize ( ) )
assertEquals ( 5 , ring . getSize ( ) )
assertEquals ( 1 , ring . getAtomCount ( ) )
assertEquals ( builder , set . getBuilder ( ) )
assertEquals ( builder , set . getBuilder ( ) )
assertEquals ( builder , set . getBuilder ( ) )
assertEquals ( set . getBuilder ( ) , builder )
assertEquals ( builder , scheme . getBuilder ( ) )
assertEquals ( builder , electron . getBuilder ( ) )
assertEquals ( ISingleElectron . class , electron . getClass ( ) )
assertNotNull ( strand )
assertEquals ( builder , fragAtom . getBuilder ( ) )
assertEquals ( mf , builder . newInstance ( IMolecularFormula . class ) )
assertEquals ( mfSet , builder . newInstance ( IMolecularFormulaSet . class ) )
assertEquals ( 1 , mfSet . size ( ) )
assertEquals ( chemobj . getBuilder ( ) , af . getBuilder ( ) )
assertEquals ( af , builder . newInstance ( IMolecularFormula . class ) )
assertNotNull ( substance )
assertEquals ( reaction , newReaction ( ) )
assertThat ( mfS . size ( ) , is ( 0 ) )
assertEquals ( 1.0 , add . getCharge ( ) )
assertEquals ( cTerminus , m . getCTerminus ( ) )
assertEquals ( cTerminus , m . getCTerminus ( ) )
assertEquals ( nTerminus , m . getNTerminus ( ) )
assertEquals ( nTerminus , m . getNTerminus ( ) )
assertEquals ( 1.0 , som . getMultiplier ( 0 ) , 0.001 )
assertEquals ( 1.0 , som . getMultiplier ( 0 ) , 0.0001 )
assertEquals ( 1 , listener . getEventCount ( ) )
assertEquals ( molecule , clone )
assertEquals ( new Point2d ( 3 , 1 ) , clonedMol . getAtom ( 0 ) . getPoint2d ( ) )
assertSame ( c2 , container . getAtom ( 0 ) )
assertEquals ( a4 , container . getAtom ( 2 ) )
assertEquals ( lp , mol . getLonePair ( 1 ) )
assertEquals ( se , getSingleElectron ( 1 ) )
assertEquals ( b1 , getSelfBond ( a1 , a2 ) )
assertEquals ( charge , a . getCharge ( ) , 0.001 )
assertEquals ( count , a . getImplicitHydrogenCount ( ) )
assertEquals ( expectedValue , a . getImplicitHydrogenCount ( ) )
assertEquals ( point3d , a . getPoint3d ( ) )
assertEquals ( point2d , a . getPoint2d ( ) )
assertEquals ( parity , a . getStereoParity ( ) )
assertEquals ( new Point2d ( 2 , 3 ) , clone . getPoint2d ( ) )
assertEquals ( new Point3d ( 2 , 3 , 4 ) , clone . getPoint3d ( ) )
assertEquals ( atom . getFractionalPoint3d ( ) , clone . getFractionalPoint3d ( ) )
assertEquals ( 4 , clone . getImplicitHydrogenCount ( ) )
assertEquals ( 4 , clone . getStereoParity ( ) )
assertEquals ( 1.0 , clone . getCharge ( ) , 0.001 )
assertEquals ( "C4" , at . getAtomTypeName ( ) )
assertEquals ( "C4" , at . getAtomTypeName ( ) )
assertEquals ( IBond . Order . TRIPLE , at . getMaxBondOrder ( ) )
assertEquals ( 4.0 , at . getBondOrderSum ( ) , 0.001 )
assertEquals ( 1.0 , at . getCovalentRadius ( ) , 0.0001 )
assertEquals ( charge , a . getFormalCharge ( ) )
assertEquals ( valency , a . getValency ( ) )
assertEquals ( count , a . getFormalNeighbourCount ( ) )
assertEquals ( hybridization , atom . getHybridization ( ) )
assertEquals ( benzol , a . getProperty ( CDKConstants . CHEMICAL_GROUP_CONSTANT ) )
assertEquals ( five , a . getProperty ( CDKConstants . PART_OF_RING_OF_SIZE ) )
assertEquals ( hoseCode , a . getProperty ( CDKConstants . CHEMICAL_GROUP_CONSTANT ) )
assertEquals ( "carbon1" , a . getID ( ) )
assertEquals ( IBond . Order . SINGLE , clone . getMaxBondOrder ( ) )
assertEquals ( 1.0 , clone . getBondOrderSum ( ) )
assertEquals ( 1.0 , clone . getCovalentRadius ( ) )
assertEquals ( 2 , clone . getFormalCharge ( ) )
assertEquals ( 2 , clone . getFormalNeighbourCount ( ) )
assertEquals ( Hybridization . SP1 , clone . getHybridization ( ) )
atomType . getFormalCharge ( ) == atom . getFormalCharge ( )
assertEquals ( oStrand1 , getStrand ( "A" ) )
assertEquals ( polymer , clone )
assertTrue ( b . compare ( b2 ) )
assertEquals ( Order . DOUBLE , getOrder ( ) )
assertEquals ( IBond . Stereo . UP , bond . getStereo ( ) )
assertEquals ( IBond . Order . SINGLE , clone . getOrder ( ) )
assertEquals ( IBond . Stereo . UP_INVERTED , clone . getStereo ( ) )
assertEquals ( second , cs . getChemSequence ( 1 ) )
assertEquals ( 1 , listener . getEventCount ( ) )
assertEquals ( file , clone )
assertEquals ( crystal , chemModel . getMoleculeSet ( ) )
assertEquals ( crystal , chemModel . getReactionSet ( ) )
assertEquals ( crystal , chemModel . getRingSet ( ) )
assertEquals ( expectedCrystal , crystal )
assertEquals ( cProperty , getProperty ( cDescription ) )
assertEquals ( cProperty , getProperty ( cDescription ) )
assertEquals ( chemObject . getProperty ( description ) , chemobj . getProperty ( description ) )
assertEquals ( id , chemObject . getID ( ) )
assertEquals ( chemObject . getID ( ) , chemobj . getID ( ) )
assertEquals ( 0 , chemObject . getFlagValue ( ) )
assertEquals ( true , chemObject . getFlagValue ( ) )
assertEquals ( true , chemObject . getFlagValue ( ) )
assertEquals ( true , chemObject . getFlagValue ( ) )
assertArrayEquals ( new boolean [ ] { true } , flags )
assertEquals ( "co2" , chemObject2 . getID ( ) )
assertEquals ( "Changed" , chemObject . getID ( ) )
assertEquals ( "Changed" , chemObject . getID ( ) )
assertEquals ( "Changed" , chemObject . getID ( ) )
assertEquals ( "Changed" , chemObject . getID ( ) )
assertEquals ( "Yes" , chemObject . getProperty ( "Changed" ) )
assertEquals ( null , chemObject . getProperty ( "Changed" ) )
assertEquals ( 0 , listener . getNotificationCount ( ) )
assertEquals ( second , cs . getChemModel ( 1 ) )
assertEquals ( 1 , listener . getEventCount ( ) )
assertEquals ( sequence , clone )
assertEquals ( new Vector3d ( 1.0 , 2.0 , 3.0 ) , a )
assertEquals ( new Vector3d ( 1.0 , 2.0 , 3.0 ) , a )
assertEquals ( new Vector3d ( 1.0 , 2.0 , 3.0 ) , a )
assertEquals ( "P 2_1 2_1 2_1" , crystal . getSpaceGroup ( ) )
assertEquals ( z , crystal . getZ ( ) )
assertEquals ( crystal , clone )
assertEquals ( 5.0 , crystal2 . getA ( ) . x , 0.001 )
assertEquals ( new Vector3d ( 0.0 , 0.0 , 0.0 ) , a )
assertEquals ( 3 , ec . getElectronCount ( ) )
assertEquals ( "C" , e . getSymbol ( ) )
assertEquals ( "Ir" , e . getSymbol ( ) )
assertEquals ( 1 , e . getAtomicNumber ( ) )
assertEquals ( 1 , e . getAtomicNumber ( ) )
assertEquals ( "" , diff ( elem , clone ) )
assertEquals ( "H" , clone . getSymbol ( ) )
assertEquals ( 5 , clone . getAtomicNumber ( ) )
assertEquals ( 80.0 , i . getNaturalAbundance ( ) )
assertEquals ( 12.03 , i . getExactMass ( ) , 0.001 )
assertEquals ( 2 , i . getMassNumber ( ) )
assertEquals ( 2.0 , clone . getExactMass ( ) )
assertEquals ( 1.0 , clone . getNaturalAbundance ( ) )
assertEquals ( 13 , clone . getMassNumber ( ) )
assertSame ( atom , lp . getAtom ( ) )
assertEquals ( lp , clone )
assertEquals ( atom , clone . getAtom ( 0 ) )
assertEquals ( mapping , clone )
assertThat ( mfS . size ( ) , is ( 1 ) )
assertEquals ( 1 , mf . getCharge ( ) )
assertEquals ( 2 , mf . getProperty ( "blabla" ) )
assertThat ( mf . getProperties ( ) . size ( ) , is ( 2 ) )
assertEquals ( "TRP279" , m . getMonomerName ( ) )
assertEquals ( "TRP" , oMonomer . getMonomerType ( ) )
assertEquals ( point3d , a . getPoint3d ( ) )
assertEquals ( atom , clone )
assertEquals ( new Point3d ( 2 , 3 , 4 ) , clone . getPoint3d ( ) )
assertEquals ( atom . getFractionalPoint3d ( ) , clone . getFractionalPoint3d ( ) )
assertEquals ( 0.0 , atom . getCharge ( ) )
assertEquals ( "ATOM 1635 N PHE 105 -3.504 9.019 -14.276 1.00 0.00 N" , getRecord ( ) )
assertEquals ( 0.0 , atom . getTempFactor ( ) )
assertEquals ( "PHE" , atom . getResName ( ) )
assertEquals ( "123" , atom . getICode ( ) )
assertEquals ( "123" , atom . getChainID ( ) )
assertEquals ( "123" , atom . getAltLoc ( ) )
assertEquals ( "123" , atom . getSegID ( ) )
assertEquals ( 123 , atom . getSerial ( ) )
assertEquals ( "123" , atom . getResSeq ( ) )
assertEquals ( true , atom . getOxt ( ) )
assertEquals ( true , atom . getHetAtom ( ) )
assertEquals ( 1.0 , atom . getOccupancy ( ) )
assertEquals ( "123" , getName ( atom . getSymbol ( ) ) )
assertEquals ( null , monomer . getICode ( ) )
assertEquals ( null , monomer . getChainID ( ) )
assertEquals ( null , monomer . getResSeq ( ) )
assertThat ( pdbPolymer . getStructures ( ) . size ( ) , is ( 1 ) )
assertNotNull ( pdbPolymer . getMonomer ( "TRP279" , "A" ) )
assertEquals ( oStrand1 , getStrand ( "A" ) )
assertEquals ( polymer , clone )
assertEquals ( null , structure . getEndChainID ( ) )
assertEquals ( 'x' , structure . getEndChainID ( ) )
assertEquals ( endInsertionCode , structure . getEndInsertionCode ( ) )
assertEquals ( 'x' , structure . getEndInsertionCode ( ) )
assertEquals ( expectedEndSequenceNumber , structure . getEndSequenceNumber ( ) )
assertEquals ( endSequenceNumber , structure . getEndSequenceNumber ( ) )
assertEquals ( null , structure . getStartChainID ( ) )
assertEquals ( 'x' , structure . getStartChainID ( ) )
assertEquals ( 'expectedValue' , structure . getStartInsertionCode ( ) )
assertEquals ( 'x' , structure . getStartInsertionCode ( ) )
assertEquals ( 0 , structure . getStartSequenceNumber ( ) )
assertEquals ( startSequenceNumber , structure . getStartSequenceNumber ( ) )
assertEquals ( "expectedType" , type )
assertEquals ( type , structure . getStructureType ( ) )
assertEquals ( polymer , clone )
assertEquals ( "Arg255" , a . getLabel ( ) )
assertEquals ( label2 , atom . getLabel ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 5 , atom . getFormalCharge ( ) )
assertEquals ( 5 , atom . getImplicitHydrogenCount ( ) )
assertEquals ( 0.78 , atom . getCharge ( ) , 0.001 )
assertEquals ( 12.001 , getExactMass ( ) , 0.001 )
assertEquals ( - 1 , atom . getStereoParity ( ) )
assertEquals ( atom , clone )
assertEquals ( 4 , clone . getStereoParity ( ) )
assertEquals ( reactionSet , clone )
assertEquals ( reactionSet . getReaction ( i ) , reactions [ i ] )
assertEquals ( 1 , reaction . getAgents ( ) . getAtomContainerCount ( ) )
assertEquals ( 3.0 , reaction . getReactantCoefficient ( proton ) )
assertEquals ( 1.0 , reaction . getProductCoefficient ( proton ) , 0.001 )
assertEquals ( 3 , reaction . getReactants ( ) . getAtomContainerCount ( ) )
assertEquals ( 3 , reaction . getProducts ( ) . getAtomContainerCount ( ) )
assertEquals ( 1 , reaction . getAgents ( ) . getAtomContainerCount ( ) )
assertEquals ( mapping , gotIt )
radical . getElectronCount ( )
assertNotNull ( object . getAtom ( position ) )
assertEquals ( atom , clone . getAtom ( ) )
assertEquals ( "A" , oStrand . getStrandName ( ) )
assertEquals ( "DNA" , oStrand . getStrandType ( ) )
assertEquals ( "A" , oStrand . getStrandName ( ) )
assertEquals ( "DNA" , oStrand . getStrandType ( ) )
assertEquals ( strand , clone )
assertEquals ( format , chemObjectIO . getFormat ( ) )
assertEquals ( "expectedIdentifier" , spec . getImplementationIdentifier ( ) )
logger . assertNotNull ( )
assertEquals ( CIP_CHIRALITY . R , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . R , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . S , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . R , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . S , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . R , getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . R , getCIPChirality ( chirality ) )
assertEquals ( Long . MIN_VALUE , label ( null ) )
assertNotNull ( label ( node ) )
assertEquals ( CIP_CHIRALITY . R , CIPTool . getCIPChirality ( chirality ) )
assertEquals ( CIP_CHIRALITY . R , rsChirality )
assertNotNull ( ligand2 )
assertEquals ( 3 , ligand . getRank ( ) )
assertEquals ( atom , clonedHydrogen )
assertEquals ( Stereo . CLOCKWISE , chirality . getStereo ( ) )
assertEquals ( Stereo . CLOCKWISE , chirality . getStereo ( ) )
assertEquals ( Stereo . CLOCKWISE , chirality . getStereo ( ) )
assertNotNull ( settings . get ( key ) )
assertEquals ( superBS , and ( superBS , subBS ) )
assertEquals ( superBS , and ( superBS , subBS ) )
assertNotNull ( circ . getBitFingerprint ( proton ) )
assertEquals ( 1024 , circ . getBitFingerprint ( m ) . size ( ) )
assertEquals ( 0 , fingerprinter . getBitFingerprint ( mol ) . cardinality ( ) )
assertThat ( bs1 . cardinality ( ) , is ( 4 ) )
assertNotEquals ( bs1 , bs2 )
assertEquals ( set , bitSet . nextSetBit ( set ) )
AssertPlaceHolder = "assertEquals(smarts[bitIndex], printer.getSubstructure(bitIndex));"
assertEquals ( 0.0 , sim , 0.0001 )
assertEquals ( 0.0 , sim , 0.001 )
assertEquals ( 12.01 , mass , 0.001 )
assertEquals ( 12.01 , mass , 0.001 )
assertEquals ( expectedValue , actualValue )
assertEquals ( 0.0 , polar , 0.0001 )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , vol )
assertEquals ( 2.55 , eneg , 0.01 )
assertEquals ( 2.55 , eneg , 0.01 )
assertEquals ( testResult [ 0 ] , retval , 0.01 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.01 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.01 )
assertEquals ( resultAccordingNIST , result , 0.01 )
assertEquals ( resultAccordingNIST , result , 0.01 )
assertEquals ( testResult [ i ] , retval . get ( i ) , 0.0001 )
assertEquals ( testResult , result , 0.0001 )
assertEquals ( testResult [ 0 ] , retval , 0.001 )
assertThat ( value , equalTo ( expectedValue ) )
assertThat ( value , equalTo ( expectedValue ) )
assertEquals ( testResult [ i ] , result , 0.0001 )
assertEquals ( testResult , result , 0.0001 )
assertEquals ( engine . getClass ( ) , DescriptorEngine . class )
assertEquals ( availClasses . length , 1 )
assertEquals ( holo . size ( ) , 1 )
assertNotNull ( result1 . get ( i ) )
assertNotNull ( retval [ i ] )
assertNotNull ( retval [ i ] )
assertArrayEquals ( new double [ ] {
assertEquals ( 1.0 , deltav , 0.0001 )
assertEquals ( 0.0 , deltav , 0.0001 )
assertEquals ( expectedValue , Complexity )
assert output == expectedOutput
assert output == expectedOutput
assertEquals ( 0.0 , output , 0.0001 )
assertEquals ( 1.0 , output , 0.0001 )
assertEquals ( 1.99 , output , 0.01 )
assertEquals ( ontologyEntry , focalMethod . getSpecification ( ) )
value . getValue ( )
assertNotNull ( dar )
assertEquals ( 2 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( expectedValue , result . getValue ( key ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 0 , result . getValue ( ) )
assertEquals ( 1 , result . getValue ( ) )
assertEquals ( expectedValue , value . getValue ( key ) )
assertEquals ( expectedValue , value . getValue ( key ) )
assertEquals ( expectedValue , value . getValue ( key ) )
assertEquals ( value . getValue ( ) , expectedValue )
assertEquals ( expectedValue , value . getValue ( key ) )
dv . getValue ( )  isNotNull ( )
assertArrayEquals ( new double [ ] { 10 , 20 , 35 , 56 , 84 , 120 , 165 , 220 , 286 } , retval . getValues ( ) , 0.001 )
assertEquals ( "" , getEdgeLabel ( 0 , 1 ) )
assertEquals ( "expectedSymbol" , getVertexSymbol ( 0 ) )
assertEquals ( expectedGraph , builder . makeGraph ( ) )
assertEquals ( atomContainers [ number ] , ? ? ? )
assertEquals ( ac . getAtomCount ( ) , refinable . getVertexCount ( ) )
assertEquals ( "expectedValue" , ? ? ? signatureStringForVertex ( 0 ) )
assertEquals ( "expectedValue" , actualValue )
assertThat ( basis . size ( ) , is ( 3 ) )
assertNotNull ( canonicalSignature )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , signatureString )
assertEquals ( expected , canonicalStringFromMolecule ( mol ) )
assertEquals ( expected , signature )
assertEquals ( expected , actual )
assertEquals ( expected , sigForIron )
assertEquals ( expected , centralSignature )
assertEquals ( null , getFirstAtom ( ) )
assertEquals ( "expectedLabel" , getLabel ( ) )
assertEquals ( Math . ceil ( w ) + "x" + Math . ceil ( h ) , ? ? ? )
assertEquals ( new Color ( 0x49DFFF ) , model . getDefault ( ) )
assertNotNull ( anyAtom ( ) )
assertEquals ( SymbolVisibility . IUPAC , iupacRecommendations ( ) )
assertEquals ( hexB31FBA , getAtomColor ( atom ) )
assertEquals ( g2d , image . getGraphics ( ) )
assertEquals ( new AWTFontManager ( ) , visitor . getFontManager ( ) )
assertEquals ( new RendererModel ( ) , visitor . getRendererModel ( ) )
assertEquals ( model , visitor . getRendererModel ( ) )
assertEquals ( Color . BLACK , visitor . getGraphics ( ) . getColor ( ) )
assertEquals ( g2d , image . getGraphics ( ) )
assertEquals ( transform , visitor . getTransform ( ) )
assertEquals ( new Rectangle2D . Double ( 0 , 0 , 6 , 2 ) , rectangle )
assertEquals ( new Point ( 48 , 53 ) , point )
assertThat ( new Bounds ( 2 , 2 , 7 , 6 ) . width ( ) , is ( closeTo ( 5d , 0.1 ) ) )
assertEquals ( expected , actual )
assertEquals ( "Not-Arial" , manager . getFontName ( ) )
assertThat ( elements . size ( ) , is ( 3 ) )
assertThat ( elements . size ( ) , is ( 3 ) )
assertThat ( elements . size ( ) , is ( 3 ) )
assertThat ( elements . size ( ) , is ( 3 ) )
assertThat ( HydrogenPosition . values ( ) , is ( new HydrogenPosition [ ] { Right , Left , Above , Below } ) )
assertEquals ( HydrogenPosition . Above , HydrogenPosition . valueOf ( "Above" ) )
assertThat ( symbol , is ( notNullValue ( ) ) )
assertThat ( symbol , is ( notNullValue ( ) ) )
assertThat ( basis . size ( ) , is ( 3 ) )
assertThat ( basis . size ( ) , is ( 3 ) )
assertThat ( symbol . getAtomicNumber ( ) , is ( 7 ) )
assertThat ( symbol , is ( notNullValue ( ) ) )
assertEquals ( 3 , benzeneDoubleBondCount ( ) )
assertEquals ( 3 , generators . size ( ) )
assertNotNull ( renderer )
assertEquals ( 3 , generators . size ( ) )
assertEquals ( 3 , generators . size ( ) )
assertThat ( elements . size ( ) , is ( 0 ) )
assertThat ( elements . size ( ) , is ( 0 ) )
assertThat ( elements . size ( ) , is ( 0 ) )
assertThat ( elements . size ( ) , is ( 0 ) )
assertNotNull ( molecule . getAtom ( f ) )
assertThat ( molecule . getAtom ( f ) , is ( equalTo ( bond . getAtom ( position ) ) ) )
assert molecule . getAtom ( f ) . getSymbol ( ) . equals ( "C" )
assertEquals ( molecule . getAtom ( f ) , bond . getAtom ( f ) )
assertNotNull ( molecule . getAtom ( f ) )
assertThat ( molecule . getAtom ( f ) . getSymbol ( ) ) . isEqualTo ( "C" )
assertEquals ( molecule . getAtom ( f ) , bond . getAtom ( f ) )
assertEquals ( type , matcher . findMatchingAtomType ( mol , mol . getAtom ( i ) ) )
assertEquals ( type , matcher . findMatchingAtomType ( mol , mol . getAtom ( i ) ) )
assertEquals ( CoordinateCoverage . PARTIAL , get2DCoordinateCoverage ( container ) )
assertEquals ( new Point3d ( 1 , 1 , 0 ) , getPoint3d ( ) )
assertThatThrownBy ( ( ) -> { i . remove ( ) ; } )
assertNotNull ( matches ( lines ) )
assertNotNull ( testBond )
assertThat ( testBond . getOrder ( ) , is ( order ) )
assertNotNull ( atom )
assertThat ( matcher . matches ( lines ) ) . isTrue ( )
assertThat ( matches ( lines ) ) . isNotNull ( )
assertThat ( matches ( lines ) ) . isTrue ( )
assertNotNull ( matches ( lines ) )
assertNotNull ( matches ( lines ) )
assertEquals ( true , matches ( lines ) )
assertThat ( matches ( lines ) ) . isTrue ( )
assertThat ( matches ( lines ) ) . isTrue ( )
assertEquals ( "4x4" , total . toString ( ) )
assertThat ( matches ( lines ) ) . isNotNull ( )
assertThat ( matches ( lines ) ) . isTrue ( )
assertEquals ( "Expected TokenMgrError to be thrown" , TokenMgrError . class , tme . getClass ( ) )
assertEquals ( "Expected exception of type ParseException to be thrown" , ParseException . class , pe . getClass ( ) )
assertEquals ( "Expected ParseException to be thrown" , pe . getClass ( ) , ParseException . class )
assertEquals ( "Expected ParseException to be thrown" , pe . getClass ( ) , ParseException . class )
assertEquals ( "9-ethylhexane" , object )
assertEquals ( "TEST" , afterAtom . getID ( ) )
assertNotNull ( atomContainer )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.001 )
assertEquals ( resultAccordingNIST , result , 0.01 )
assert queue . size ( ) == 1
assertEquals ( expectedCycleCount , trueCycleCount )
result . addAll ( cycleBasis . essentialCycles ( ) )
assertEquals ( result , cycleBasis . relevantCycles ( ) )
result . addAll ( cycleBasis . equivalenceClasses ( ) )
assertNotNull ( cycles ( ) )
assertEquals ( result , cycleBasis . relevantCycles ( ) )
result . addAll ( cycleBasis . essentialCycles ( ) )
assertEquals ( 1 , matches ( lines ) . count ( ) )
assertEquals ( true , matches )
assertEquals ( v , match [ u ] )
assertEquals ( "CCO" , results [ 0 ] )
assertEquals ( "Expected result" , expectedValue , actualValue )
assertEquals ( 1 , results . length )
assertEquals ( 1 , results . length )
assertEquals ( 1 , results . length )
assertEquals ( 1 , results . length )
assertEquals ( 1 , results . length )
assertEquals ( 1 , results . length )
assertThat ( match [ u ] ) . isEqualTo ( v )
assertEquals ( expectedValue , actualValue )
assertThat ( ebimcs . getChemFilters ( ) , is ( true ) )
assertEquals ( score , smsd1 . getFirstMapping ( ) . getMap ( ) . size ( ) )
assertEquals ( score , getStereoScore ( key ) )
assertEquals ( score , getEnergyScore ( key ) )
assertEquals ( queryac , getReactantMolecule ( ) )
assertEquals ( target , smsd1 . getChemFilters ( ) )
assertEquals ( false , foundMatches )
assertEquals ( aTimeManager , CDKMCS . getTimeManager ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( maps . size ( ) , is ( 2 ) )
assertThat ( map . size ( ) , is ( 6 ) )
assertThat ( maps . size ( ) , is ( 12 ) )
assertThat ( maps . size ( ) , is ( 24 ) )
assertThat ( map . size ( ) , is ( 3 ) )
assertThat ( maps . size ( ) , is ( 2 ) )
assertEquals ( score , < AssertPlaceHolder >  )
assertEquals ( score , getStereoScore ( key ) )
assertEquals ( score , getEnergyScore ( key ) )
assertEquals ( queryac , getReactantMolecule ( ) )
assertEquals ( target , smsd1 . getQueryContainer ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( score , getEnergyScore ( key ) )
assertEquals ( score , smsd1 . getFragmentSize ( key ) )
assertEquals ( score , getStereoScore ( key ) )
assertEquals ( new SybylAtomTypeMatcher ( builder ) , SybylAtomTypeMatcher . getInstance ( builder ) )
assertEquals ( expResult , result , 0.0 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
result != null
assertEquals ( 2 , result . next ( ) . get ( 1 ) )
assertEquals ( expResult , result )
assertEquals ( new SybylAtomTypeMatcher ( builder ) , SybylAtomTypeMatcher . getInstance ( builder ) )
assertEquals ( expectedValue , instance . getLabelID ( label ) )
assertEquals ( "R3" , result )
assertEquals ( expectedValue , result )
result . equals ( instance . getMolecule ( ) )
assertEquals ( expectedInstance , energies )
assertEquals ( "TEST" , afterAtom . getID ( ) )
assertEquals ( 12 , atomContainer . getAtomCount ( ) )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.01 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( "IllegalArgumentException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Expected result" , expected , result )
assertEquals ( "" , result )
assertEquals ( "H" , difference . getAtom1 ( ) . getSymbol ( ) )
assertEquals ( "" , result )
assertEquals ( PLANAR3 , difference . getHybridization ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( new boolean [ ] { false , true , false } , difference . getFlags ( ) )
assertEquals ( "" , result )
assertEquals ( 1 , difference . getElectronCountDifference ( ) )
assertEquals ( "" , result )
assertEquals ( "H" , difference . getSymbol ( ) )
assertEquals ( "" , result )
assertEquals ( "H" , difference . getElement1 ( ) . getSymbol ( ) )
assertEquals ( "" , result )
assertEquals ( 1 , difference . getAtomCount ( ) )
assertEquals ( "" , result )
assertEquals ( null , result )
assertEquals ( null , result )
result . assertNull ( )
result . toString ( ) . equals ( "expected value" )
result . assertNotNull ( )
result . assertNull ( )
AssertPlaceHolder = "assertNull(result);"
assertNotNull ( result )
assertEquals ( null , result )
Explanation : The suggested  assertion is  using the ` assertEquals ` method to compare the ` diffString ` with an expected string  value . You can replace ` "expectedString" ` with the expected value you  want to compare ` diffString ` with .
result . assertNotNull ( )
assertNull ( result )
assertEquals ( null , result )
result . toString ( ) . equals ( "expected value" )
result . assertNotNull ( )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( expected , diffString )
result . assertNotNull ( )
result . assertNull ( )
assertEquals ( null , result )
diffString . equals ( "expected value" )
diff . assertNotNull ( )
assertEquals ( "Foo" , result . getName ( ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( "expectedValue" , diffString )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( "expected assertion message" , "expected value" , diffString )
result . assertNotNull ( )
result . assertNull ( )
AssertPlaceHolder = "assertNull(result);"
diffString . equals ( "Expected Assertion Value" )
assertEquals ( IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> create ( objects ) ) )
assertEquals ( IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> create ( objects ) ) )
assertEquals ( association . getElectronCount ( ) , bond . getElectronCount ( ) )
assertEquals ( isofac , chemobj . getBuilder ( ) . getInstance ( ) )
assertEquals ( 1 , atom . getAtomicNumber ( ) )
assertEquals ( 2 , isotope . getMassNumber ( ) )
assertEquals ( 0.0 , isotope . getExactMass ( ) , 0.0001 )
assertEquals ( null , isofac . getMajorIsotope ( "E" ) )
assertEquals ( "Cl" , isotope . getSymbol ( ) )
assertEquals ( 35 , element . getAtomicNumber ( ) )
assertEquals ( "E" , element . getSymbol ( ) )
assertEquals ( "C" , element . getSymbol ( ) )
assertEquals ( "O" , symbol )
assertEquals ( isofac . getAtom ( 0 ) , container . getAtom ( 0 ) )
assertEquals ( clone ( isotope ) , isotope )
assertNotNull ( match )
assertEquals ( handler . getBuilder ( ) , chemobj . getBuilder ( ) )
assertEquals ( reader . getBuilder ( ) , chemobj . getBuilder ( ) )
assertEquals ( "ionPair" , entry . getWord ( ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( 0 , formula . getIsotopeCount ( ) )
assertEquals ( 0 , formula . getIsotopeCount ( ) )
assertEquals ( 0 , chain . getReactionPosition ( reaction1 ) )
assertEquals ( reaction1 , chain . getReaction ( 0 ) )
assertEquals ( 1 , reaction . getAgentCount ( ) )
assertEquals ( 0 , mol . getAtomCount ( ) )
assertEquals ( 0 , atom . getX ( ) , 0.0001 )
assertEquals ( "C" , atom . getSymbol ( ) )
assertEquals ( "N" , atom . getSymbol ( ) )
assertEquals ( 13 , atom . getMassNumber ( ) )
assertEquals ( 7.8089 , atom . getMassNumber ( ) , 0.0001 )
assertEquals ( 1 , atom . getMassNumber ( ) )
assertEquals ( - 1 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( - 1 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 0 , atom . getFormalCharge ( ) )
assertEquals ( 15 , atom . getValency ( ) )
atom . getValency ( )
assertEquals ( 1 , atom . getValency ( ) )
assertEquals ( 14 , atom . getValency ( ) )
assertEquals ( 16 , atom . getValency ( ) )
assertEquals ( 1 , atom . getProperty ( "propertyDescription" , Integer . class ) )
assertEquals ( 42 , atom . getProperty ( "description" , Integer . class ) )
assertEquals ( 1 , atom . getProperty ( "description" , Integer . class ) )
assertEquals ( 0 , stereocenters . checkSymmetry ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( 0 , stereocenters . getStereocenterCount ( ) )
assertEquals ( 0 , stereocenters . checkSymmetry ( ) )
assertNotNull ( stereocenters )
assertNotNull ( stereocenters )
assertNotNull ( stereocenters )
assertNotNull ( stereocenters )
assertNotNull ( stereocenters )
assertEquals ( "a-pinene" , mol . getProperty ( CDKConstants . TITLE ) )
assertEquals ( "superspiro" , result . getID ( ) )
assertEquals ( "expectedLabel" , pseudo . getLabel ( ) )
assertEquals ( 0 , mol . getAtomCount ( ) )
assertEquals ( Stereo . UNDEFINED , getStereo ( ) )
assertEquals ( 1 , deuteriumCount )
assertEquals ( 1 , tritiumCount )
assertEquals ( 1 , queryBondCount )
assertEquals ( 1 , queryBondCount )
assertEquals ( 1 , molecule . getAtomCount ( ) )
assertEquals ( 2 , molecule . getAtomCount ( ) )
assertEquals ( 3 , molecule . getAtomCount ( ) )
assertEquals ( 1 , molecule . getAtomCount ( ) )
assertThat ( molecule , is ( notNullValue ( ) ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( atom . getProperty ( description ) )
assertEquals ( expected . trim ( ) , mol . getProperty ( description ) . trim ( ) )
assertEquals ( expected , getProperty ( "label" ) )
assertEquals ( expected , getProperty ( "cd_chemsketch_label" ) )
mol . getAtomCount ( ) == 1
assertEquals ( "C1CCCCC1" , sw . toString ( ) . trim ( ) )
assertEquals ( true , m . matches ( ) )
assertEquals ( "true" , mdlw . getWriteAromaticBondTypes ( ) )
assertEquals ( "4x4" , toString ( ) )
assertEquals ( "1x1" , toString ( ) )
assertEquals ( "C" , atom . getSymbol ( ) )
assertEquals ( "Expected CDKException" , "<AssertPlaceHolder>" , cdkEx . getMessage ( ) )
assertEquals ( 1 , nDeuterium )
assertEquals ( 0 , nDeuterium )
assertEquals ( "C" , mol . getAtom ( 0 ) . getSymbol ( ) )
assertEquals ( "4x4" , toString ( ) )
assertEquals ( "4x4" , toString ( ) )
assertEquals ( "4x1" , writeCustomTitle ( ) . toString ( ) )
assertEquals ( "C" , molecule . getAtom ( 0 ) . getSymbol ( ) )
assertEquals ( "URL" , molecule . getProperty ( "http://not-valid.com" ) )
assertEquals ( 0 , count )
assertEquals ( 1 , count )
factory . assertNotNull ( factory , "InChIGeneratorFactory instance should not be null" )
assertEquals ( 1 , parser . getAtomCount ( ) )
assertEquals ( 1 , parser . getAtomCount ( ) )
assertEquals ( expected , actual )
assertEquals ( "Expected log message" , expectedLogMessage , getLog ( ) )
assertEquals ( "Expected message" , expectedMessage , getMessage ( ) )
assertEquals ( "expectedInchi" , generator . getInchi ( ) )
assertEquals ( "InChI=1S/Tc" , generator . getInchi ( ) )
assertEquals ( 1 , parser . getAtomContainerCount ( ) )
assertEquals ( "" , message )
assertEquals ( null , message )
assertEquals ( "" , message )
assertEquals ( 0 , container . getAtomCount ( ) )
assertEquals ( "bla" , dictRef . getType ( ) )
assertEquals ( "bar:foo" , dictRef . getReference ( ) )
assertNotNull ( atom . getAtomicNumber ( ) )
assertEquals ( "m1" , mol . getID ( ) )
assertEquals ( 1 , mol . getAtomCount ( ) )
assertEquals ( chemobj , getProperty ( description ) )
assertEquals ( null , stack [ sp - 1 ] )
assertNotNull ( matches ( lines ) )
assertEquals ( "" , matches ( lines ) . group ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedValue , actualValue )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( matches ( lines ) )
assertNotNull ( matches ( lines ) )
assertEquals ( 3 , matches . size ( ) )
assertNotNull ( matches ( lines ) )
assertNotNull ( matches ( lines ) )
assertNotNull ( matches ( lines ) )
assertEquals ( 3 , matches ( lines ) . size ( ) )
assertNotNull ( matches ( lines ) )
assertEquals ( null , resourceFormat . getMIMEType ( ) )
assertNotNull ( atom . getImplicitHydrogenCount ( ) )
assertEquals ( expectedValue , reaction . getProperty ( description ) )
assertEquals ( "b1" , roundTrippedBond . getID ( ) )
assertNotNull ( atomContainer )
assertEquals ( "ZZZ" , getAsString ( mol ) )
assertEquals ( null , mol . getID ( ) )
assertEquals ( "" , getAsString ( mol ) )
assertEquals ( "expectedName" , name )
assertEquals ( expectedValue , thisMol . getProperty ( description ) )
assertEquals ( lines [ 0 ] , "c1ccccc1" )
assertEquals ( "expectedTitle" , title )
assertEquals ( "Expected format is SMILES" , "SMILES" , format . getFormatName ( ) )
assertEquals ( 2 , molCount )
assertEquals ( 4 , a . getMassNumber ( ) )
assertEquals ( 12 , a . getMassNumber ( ) )
a . getMassNumber ( ) == 13
a . getMassNumber ( ) == 14
assertEquals ( expectedTitle , container . getTitle ( ) )
IAtomContainer atomContainer = convert ( "smi" )
assertNotNull ( container )
assertEquals ( expectedValue , actualValue )
assertEquals ( 0 , a . getImplicitHydrogenCount ( ) )
I 'm sorry, but I cannot generate the code for the suggested assertion without knowing the specific details of the test method and the focal method. Could you please provide more information or clarify your request?
assertNotNull ( toBeamAtom ( a ) )
assertEquals ( 0 , a . getImplicitHydrogenCount ( ) )
assertTrue ( a . getFlag ( CDKConstants . ISAROMATIC ) )
assertEquals ( 0 , a . getImplicitHydrogenCount ( ) )
assertEquals ( 13 , a . getMassNumber ( ) )
assertEquals ( 0 , a . getImplicitHydrogenCount ( ) )
assertEquals ( 3 , ac . getAtom ( 0 ) . getProperty ( CDKConstants . ATOM_ATOM_MAPPING ) )
assertEquals ( 1 , m . getStereoElements ( ) . size ( ) )
assertEquals ( 1 , m . getStereoElements ( ) . size ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |&1:1,3|" , smigen . create ( mol ) )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |&3:1,3|" , smigen . create ( mol ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |o1:1,3|" , smigen . create ( mol ) )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |o1:1,&1:3|" , smigen . create ( mol ) )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |o1:1,a:3|" , smigen . create ( mol ) )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |&5:3|" , smigen . create ( mol ) )
assertEquals ( "C[C@H](O)[C@H](O)C1CCCCC1 |r|" , smigen . create ( mol ) )
assertNotNull ( settings . get ( key ) )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertNotNull ( state )
assertEquals ( chemobj . getProperty ( description , c ) , expectedValue )
assertEquals ( bond . getAtom ( 1 ) , mol . getAtom ( 1 ) )
assertEquals ( expectedAtom , getAtom ( position ) )
assertEquals ( "c1ccccc1O |$_AV:0;1;2;3;4;5;6$|" , smigen . create ( mol ) )
assertEquals ( "Cl[*](Br)I |$;_R1;;$,LO:1:0.2.3|" , smigen . create ( mol ) )
assertEquals ( "Cl[*](I)Br |$;_R1;;$,LO:1:0.2.3|" , smigen . create ( mol ) )
assertEquals ( "CN1CCCCC1.CO.O |Sg:c:0,1,2,3,4,5,6::,Sg:c:7,8::,Sg:c:9::,Sg:mix:0,1,2,3,4,5,6,7,8,9::,Sg:mix:7,8,9::,SgH:3:4.0,4:2.1|" , smigen . create ( mol ) )
assertEquals ( "Star" , atom . getSymbol ( ) )
assertEquals ( "expectedSmiles" , smiles )
assertEquals ( "C1CCCCC1" , moleculeSmile )
assertEquals ( "C1=CCCC=C1" , moleculeSmile )
assertNotNull ( mol1 )
assertEquals ( "expectedMoleculeSmile" , moleculeSmile , "<AssertPlaceHolder>" )
assertEquals ( "expectedMoleculeSmile" , moleculeSmile , "<AssertPlaceHolder>" )
assertEquals ( - 1 , mol . getAtom ( 0 ) . getFormalCharge ( ) )
assertEquals ( smiles , genSmiles )
assertEquals ( "C1=CC=CC=C1" , smileswithoutaromaticity )
assertTrue ( smileswitharomaticity . contains ( "c1ccccc1" ) )
assertEquals ( 1 , mol . getAtomCount ( ) )
assertEquals ( 4 , mol . getAtomCount ( ) )
mol . getAtomCount ( ) == 4
assertEquals ( "C=C" , res )
assertEquals ( "C=C" , res )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 9 , m . getAtomCount ( ) )
assertNotNull ( molecule )
assertNotNull ( molecule )
assertEquals ( 2 , mol . getAtomCount ( ) )
assertEquals ( Order . SINGLE , bond . getOrder ( ) )
assertNotNull ( mol . getAtom ( i ) )
assertEquals ( 8 , hcount )
mol . getAtom ( 0 )
mol . getAtom ( 0 ) instanceof ErAtom
assertEquals ( expectedMol , mol )
mol . getAtom ( 0 )
mol . getAtomCount ( ) == 5
mol . getAtomCount ( ) == 1
mol . getAtom ( 0 ) instanceof IPuAtom
I 'm sorry, but I cannot generate the assertion code without knowing the specific condition or expectation that you want to assert. Could you please provide more information about what you want to assert in the "<AssertPlaceHolder>" line?
mol . getAtomCount ( ) == 1
mol . getAtomCount ( )
mol . getAtom ( 0 ) instanceof Atom
mol . getAtom ( 0 )
mol . getAtom ( 0 ) instanceof IAtom
mol . getAtomCount ( )
assertEquals ( "c1ccccc1" , molecule . getSmiles ( ) )
mol . getAtomCount ( ) == 6
assertThat ( mol , is ( notNullValue ( ) ) )
assertEquals ( 2 , count )
assertEquals ( 4 , count )
assertEquals ( new Point3d ( 2 , 2 , 2 ) , newpoint )
assertEquals ( 2 , placedAtoms )
assertEquals ( mol . getAtom ( i ) , mb3d . getAtom ( i ) )
assertEquals ( mb3d . getAtom ( i ) , mol . getAtom ( i ) )
assertEquals ( 1.5 , mol . getBond ( i ) . getLength ( ) , 0.01 )
assertEquals ( mol . getAtom ( i ) , mb3d . getAtom ( i ) )
assertEquals ( mol . getAtom ( i ) , bond . getAtom ( i ) )
assertEquals ( 1 , mol . getAtom ( i ) . getPoint2d ( ) . x )
assertEquals ( 1.54 , ac . getBond ( 0 ) . getLength ( ) , 0.01 )
assertEquals ( ac . getAtom ( i ) . getSymbol ( ) , "<expected symbol>" )
assertEquals ( ac . getAtom ( i ) . getSymbol ( ) , "<expected symbol>" )
assertNotNull ( atom . getPoint3d ( ) )
assertNotNull ( atom . getPoint3d ( ) )
assertEquals ( testResult [ i ] , pe . calculateSigmaElectronegativity ( molecule . getAtom ( i ) ) , 0.0001 )
assertEquals ( testResult [ i ] , pe . calculateSigmaElectronegativity ( molecule , molecule . getAtom ( i ) , 1 , 1 ) , 0.0001 )
assertEquals ( testResult [ i ] , molecule . getAtom ( i ) . getProperty ( CDKConstants . GASTEIGER ) , 0.0001 )
assertEquals ( testResult [ i ] , molecule . getAtom ( i ) . getProperty ( CDKConstants . GASTEIGER ) , 0.0001 )
assertEquals ( testResult [ i ] , molecule . getAtom ( i ) . getCharge ( ) , 0.001 )
assertEquals ( testResult [ i ] , molecule . getAtom ( i ) . getProperty ( CDKConstants . GASTEIGER ) , 0.0001 )
assertEquals ( testResult , result , 0.001 )
assertEquals ( testResult , result , 0.001 )
assertEquals ( testResult , result , 0.01 )
assertEquals ( testResult , result , 0.01 )
assertEquals ( testResult , result , 0.001 )
assertEquals ( testResult , result , 0.001 )
assertEquals ( testResult [ i ] , ac . getAtom ( i ) . getProperty ( CDKConstants . MMFF94_PARTIAL_CHARGE ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "expectedAtomTypeName" , getAtomTypeName ( ) )
assertEquals ( "expectedAtomTypeName" , getAtomTypeName ( ) )
assertEquals ( "Expected atom type name" , expectedAtomTypeName , getAtomTypeName ( ) )
assertEquals ( "Expected atom type name is not equal to actual atom type name" , expectedAtomTypeName , getAtomTypeName ( ) )
assertEquals ( "Expected atom type name does not match" , expectedAtomTypeName , getAtomTypeName ( ) )
assertEquals ( "expectedAtomTypeName" , getAtomTypeName ( ) )
assertEquals ( formula , isoC . getFormula ( ) )
assertEquals ( 130.00 , isoC . getMass ( ) , 0.001 )
assertEquals ( 5000000.0 , isoC . getIntensity ( ) , 0.001 )
assertEquals ( formula , isoC . getFormula ( ) )
assertEquals ( 0.001 , is . tolerance_ppm , 0.0001 )
assertEquals ( 0.0 , score , 0.001 )
assertEquals ( isoContainer , isotopeCList . get ( monoIsotopePosition ) )
assertEquals ( 1 , isoP . getIsotopeCount ( ) )
assertEquals ( expected , isoP . getMonoIsotope ( ) )
assertEquals ( 1.0 , isoP . getCharge ( ) )
assertEquals ( expectedCharge , isoP . getCharge ( ) )
assertEquals ( 100.0 , result , 0.001 )
assertEquals ( formulaWith , null )
assertEquals ( 1.0 , isValidSum ( formula ) , 0.001 )
assertEquals ( 1.0 , isValidSum ( formula ) , 0.001 )
assertThat ( counter , is ( equalTo ( 2 ) ) )
assertEquals ( null , rule . getParameters ( ) )
assertEquals ( rule . getRDBEValue ( formula ) , < expected value >  )
assertEquals ( "C1H4" , getString ( mf1 ) )
assertEquals ( "expectedValue" , getString ( mf1 , true ) )
assertEquals ( "C9C13H16" , getString ( mf1 ) )
assertEquals ( 46.96885268 , totalExactMass , 0.000001 )
assertEquals ( - 97.976895 , totalExactMass2 , 0.000001 )
assertEquals ( 2.0 , totalExactMass , 0.0001 )
assertEquals ( 174.71 , totalAbudance , 0.01 )
assertEquals ( "<expected value>" , getHTML ( formula ) )
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( 0 , frags . length )
assertEquals ( 0 , frags . length )
assertEquals ( 1 , frameworks . length )
assertEquals ( 1 , frameworks . length )
assertEquals ( 1 , frameworks . length )
assertEquals ( 1 , frameworks . length )
assertEquals ( n , g . getVertexCount ( ) )
assertEquals ( group , getAutomorphismGroup ( ) )
assertEquals ( expected , hms )
assertEquals ( expected , hms )
assertEquals ( group , getAutomorphismGroup ( ) )
assertEquals ( expected , best )
assertEquals ( expected , first )
assertEquals ( 1 , refiner . getRefinementCount ( ) )
assertEquals ( "C0C1C2C3 0:1(1),0:3(1),1:2(1),2:3(1)" , AtomContainerPrinter . toString ( ac , builder ) )
assertNotNull ( autG )
assertEquals ( autG . order ( ) , expectedOrder )
assertEquals ( 4 , autG . order ( ) )
assertEquals ( ac . getAtomCount ( ) , refinable . getVertexCount ( ) )
assertEquals ( expected , finer )
assertEquals ( expected , finer )
assertEquals ( ac . getAtomCount ( ) , refinable . getVertexCount ( ) )
assertEquals ( expected , elPartition )
assertEquals ( expected , elPartition )
assertEquals ( expected , elPartition )
assertEquals ( autG . order ( ) , expectedOrder )
assertNotNull ( autG )
assertEquals ( 2 , ac . getAtomCount ( ) )
assertEquals ( 4 , autG . order ( ) )
assertEquals ( ac . getAtomCount ( ) , refinable . getVertexCount ( ) )
assertEquals ( 4 , refinable . getVertexCount ( ) )
assertEquals ( 4 , refiner . getEquivalenceClasses ( ) . size ( ) )
assertEquals ( expected , finer )
assertThat ( p . size ( ) , is ( 0 ) )
assertNotNull ( permutation . get ( i ) )
assertThat ( p . size ( ) , is ( 4 ) )
assertThat ( cells . get ( 0 ) . first ( ) ) . isEqualTo ( cells . get ( cells . size ( ) - 1 ) . first ( ) )
assertThat ( transversal . size ( ) , is ( 3 ) )
assertThat ( all . size ( ) , is ( 24 ) )
assertArrayEquals ( new int [ ] { 0 , 1 , 2 , 3 } , group . getPermutations ( ) . get ( 0 ) . getElements ( ) )
assertEquals ( new Permutation ( 0 , 1 , 2 , 3 ) , group . getBase ( ) )
assertNotNull ( p . get ( "name" ) )
assertEquals ( values [ index ] , p . get ( index ) )
assertThat ( p . size ( ) , is ( 4 ) )
( S ) settings . get ( key )
assertArrayEquals ( new int [ ] { 1 , 0 , 3 , 2 } , p . getValues ( ) )
assertEquals ( c , temp [ i ] [ j ] * c )
assertEquals ( OPPOSITE , p . invert ( ) )
assertEquals ( expected , p . toCycleString ( ) )
assertEquals ( 8L , x )
assertEquals ( 5L , x )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( aHash , bHash , eqMesg ( a , b ) )
assertEquals ( aHash , bHash , nonEqMesg ( a , b ) )
assertEquals ( nonEqMesg ( a , b ) , stereo . generate ( a ) , stereo . generate ( b ) )
assertEquals ( aHash , bHash , eqMesg ( a , b ) )
assertNotNull ( encoder ( generator ) )
assertEquals ( expected , actual )
assertEquals ( currentRecord + 1 , ? ? ? )
assertEquals ( "Amine [CX2]N aromatic c1ccccc1 blah C 54.735" , repr )
qatom . getSmarts ( ) . equals ( "aromatic" )
assertEquals ( "aromatic c1ccccc1" , repr )
assertEquals ( "1.0x2.0" , repr )
assertNotNull ( atom . getPoint2d ( ) )
assertEquals ( new Point2d ( 0 , 0 ) , hydrogenPlacer . getPoint2d ( ) )
ac . getAtom ( i ) . getPoint2d ( ) . x
assertEquals ( Stereo . NONE , getStereo ( ) )
assertEquals ( Stereo . UP , bond . getStereo ( ) )
assertNull ( bond . getStereo ( ) )
assertNull ( bond . getStereo ( ) )
assertEquals ( 0.0 , score , 0.0001 )
assertEquals ( 0.0 , score , 0.0001 )
assertEquals ( 0.0 , overlapScore , 0.0001 )
assertEquals ( 0.0 , overlapScore , 0.0001 )
assertEquals ( 1 , invalidCoordCount )
assertEquals ( new Point2d ( ) , atom . getPoint2d ( ) )
assertNotEquals ( null , mol . getAtom ( i ) . getPoint2d ( ) . y )
assertEquals ( new Point2d ( ) , getPoint2d ( ) )
assertEquals ( 1.5 * SDG . getBondLength ( ) , distAl , 0.001 )
assertEquals ( new Point2d ( ) , atom . getPoint2d ( ) )
assertNotNull ( atom . getPoint2d ( ) )
assertNotNull ( atom . getPoint2d ( ) )
assertEquals ( 2 , ms . size ( ) )
assertThat ( ms . iterator ( ) , is ( sameInstance ( iterator ) ) )
assertEquals ( true , smartsResult . ok ( ) )
assertEquals ( 1 , smartsResult . getBondCount ( ) )
assertNotNull ( expr )
assertEquals ( "expectedValue" , generateAtom ( expr ) )
assertThat ( generateAtom ( expr ) ) . isEqualTo ( expectedAtom )
assertThat ( expr , is ( equalTo ( new Expr ( ELEMENT , 6 ) ) ) )
assertThat ( expr , is ( equalTo ( new Expr ( ELEMENT , 2 ) ) ) )
assert ? ? ? ringCount ( ) == 1
assertThat ( expr ( Expr . Type . SMALLEST , 0 ) ) . isEqualTo ( new Expr ( Expr . Type . SMALLEST , 0 ) )
assertThat ( generateAtom ( expr ) ) . isEqualTo ( expectedResult )
assertNotNull ( generateAtom ( expr ) )
assertEquals ( "-(9 or 17 or 35)" , expr . toString ( ) )
assertNotNull ( expr )
assertEquals ( "" , generateBond ( expr ) )
assertThat ( expr . type ( ) ) . isNotEqualTo ( SINGLE_OR_AROMATIC )
assertThat ( matches ( lines ) ) . isNotNull ( )
assertEquals ( 1 , matches . size ( ) )
assertFalse ( BoundaryConditions . detectTripleBonds ( new int [ ] [ ] { } ) )
assertFalse ( BoundaryConditions . detectAdjacentDoubleBonds ( new int [ ] [ ] { } ) )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getAbbrName ( ) , actual . getAbbrName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , target )
assertEquals ( expecteds , target )
assertEquals ( streetTypeResource , streetType )
streetType2 . getUpdateDate ( )
assertEquals ( expected . getDescription ( ) , actual . getDescription ( ) )
assertEquals ( expected . getDescription ( ) , actual . getDescription ( ) )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( sources . size ( ) , actuals . size ( ) )
assertEquals ( id , actual . getId ( ) )
assertEquals ( expected . getRecipients ( ) , actual . getRecipients ( ) )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected . getAbbrName ( ) , actual . getAbbrName ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected . getMark ( ) , actual . getMark ( ) )
assertEquals ( expected . getMark ( ) , actual . getMark ( ) )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected . getDescription ( ) , actual . getDescription ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getDescription ( ) , actual . getDescription ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected . getIsTesting ( ) , actual . getIsTesting ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getDocIssued ( ) , actual . getDocIssued ( ) )
assertEquals ( expected . getDocIssued ( ) , actual . getDocIssued ( ) )
assertEquals ( expected , actual )
assertEquals ( expected . getAbbrName ( ) , actual . getAbbrName ( ) )
assertEquals ( expected , actual )
assertEquals ( expected . getAbbrName ( ) , actual . getAbbrName ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected . getMark ( ) , actual . getMark ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected . getLimit ( ) , actual . getLimit ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected . getAbbrName ( ) , actual . getAbbrName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected , actual )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( expected . getName ( ) , actual . getName ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( false , actual . getIsHtml ( ) )
// suggested assertion: assertNotEquals(null, getService())
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedSql , actualQuery )
assertEquals ( expectedSql , actualQuery )
assertEquals ( expectedSql , actualQuery )
assertEquals ( expectedSql , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actualQuery )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "group1" , entity . getTitle ( ) )
assertEquals ( "group1" , entity . getTitle ( ) )
assertEquals ( value , actual )
assertEquals ( RowStatus . ACTIVE , actual )
assertEquals ( "ACTIVE" , actual )
assertEquals ( value , actual )
assertEquals ( "ACTIVE" , actual )
assertEquals ( reader , actual . getReader ( ) )
assertEquals ( reader , actual )
assertEquals ( reader , actual . getReader ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( defaultGroup , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actualParameters )
assertEquals ( expected , actualParameters )
assertEquals ( expected , actualParameters )
assertEquals ( expected , actualParameters )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertValidCaptured ( captured )
assert isTrue ( captured . contains ( "Calibration completed successfully" ) )
assertValidCaptured ( captured )
assertValidCaptured ( captured )
assertValidCaptured ( captured )
assertEquals ( snapshot , underlying . getTimeSeries ( id ) )
assertEquals ( "Expected resource directory not found" , null , ExampleMarketDataBuilder . ofResource ( resourceRoot ) )
assertEquals ( snapshot , underlying . getTimeSeries ( id ) )
assertEquals ( 6 , test . size ( ) )
assertEquals ( 1 , test . size ( ) )
assertEquals ( ImmutableMap . of ( ID1 , "67" ) , dataMap )
assertEquals ( null , dataMap . get ( ID1 ) )
combined . getValue ( id )
assertEquals ( VAL3 , combined . getValue ( ID1 ) )
assertNotNull ( values )
assertNull ( values )
assertEquals ( values , ImmutableReferenceData . of ( values ) )
assertEquals ( ImmutableReferenceData . class , ? ? ? )
buf . toString ( ) . equals ( expected )
assertEquals ( "Invalid identifier format: " + text , exception . getMessage ( ) )
test . isEqualTo ( expected , tolerance )
test . isEqualTo ( expected , tolerance )
a . isEqualTo ( expected , tolerance )
assertEquals ( BigMoney . of ( currency , amount ) , toBigMoney ( ) )
assertEquals ( 3 , values . size ( ) )
assertEquals ( ImmutableList . of ( CurrencyAmount . of ( GBP , 1 ) , CurrencyAmount . of ( USD , 2 ) , CurrencyAmount . of ( GBP , 3 ) ) , get ( "values" ) )
assertEquals ( ImmutableList . of ( CurrencyAmount . of ( GBP , 1 ) , CurrencyAmount . of ( USD , 2 ) , CurrencyAmount . of ( GBP , 3 ) ) , get ( "values" ) )
assertEquals ( BigMoney . of ( resultCurrency , BigDecimal . valueOf ( 1.61 ) ) , convertedTo ( resultCurrency , BigDecimal . valueOf ( 1.61 ) ) )
assertEquals ( CurrencyAmount . of ( GBP , 2.5 ) , result . get ( 0 ) )
assertEquals ( BigMoney . of ( null , Decimal . ZERO ) , zero ( null ) )
assertThat ( values ) . isNotNull ( )
assertNotNull ( data )
assertNull ( values )
assertEquals ( "Expected StandardId to be parsed correctly" , expectedStandardId , parse ( inputString ) )
assertThat ( parse ( input , currency , amount ) ) . isEqualTo ( expected , tolerance )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
test . isEqualTo ( expected , tolerance )
assertEquals ( amount . plus ( amountToAdd . amount ) , ? ? ? )
assertEquals ( MultiCurrencyAmount . of ( CurrencyAmount . of ( currency , amountToAdd ) ) , plus ( CurrencyAmount . of ( currency , amountToAdd ) ) )
test . plus ( AMT2 ) . isEqualTo ( expected , tolerance )
test . isEqualTo ( expected , tolerance )
assertEquals ( currency , amountToSubtract . getCurrency ( ) )
< AssertPlaceHolder >
assertThat ( test ) . isEqualTo ( expected , tolerance )
assertThat ( test ) . isEqualTo ( expected , tolerance )
test . isEqualTo ( expected , tolerance )
assertThat ( parse ( input , base , counter ) ) . isEqualTo ( expected , tolerance )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
test . isEqualTo ( expected , tolerance )
test . isEqualTo ( expected , tolerance )
assertEquals ( currency , test . other ( currency ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertEquals ( "TradeList{trades=[Trade{...}]}" , test . toString ( ) )
assertEquals ( 3 , rates . size ( ) )
assertEquals ( expectedMergedMatrix , mergedMatrix )
assertEquals ( 2.5d , test . getRate ( ccy1 , ccy2 ) )
assertNull ( values )
assertEquals ( AdjustablePayment . of ( base , rate , LocalDate . now ( ) ) , ? ? ? )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertEquals ( new CurrencyPair ( USD , GBP ) , test . inverse ( ) )
test . inverse ( ) . equals ( test . inverse ( ) )
assertThat ( a , equalTo ( expected ) )
assertEquals ( expected , getValues ( ) )
assertEquals ( expected , convertedArray . getValues ( ) )
assertEquals ( array1 . plus ( array2 ) , ? ? ? )
assertEquals ( array1 . minus ( array2 ) , ? ? ? )
assertNull ( values )
assertEquals ( values . size ( ) , new ImmutableReferenceData ( values ) . size ( ) )
assertNull ( array )
assertEquals ( 2 , StreamSupport . stream ( iterable . spliterator ( ) , false ) . count ( ) )
iterable = null ; "<AssertPlaceHolder>"
assertEquals ( true , iterable . contains ( null ) )
assertEquals ( null , map )
iterable = null ; "<AssertPlaceHolder>"
assertEquals ( 3 , Guavate . stream ( iterable ) . count ( ) )
assertEquals ( ImmutableSortedSet . of ( CA1 , CA2 , CurrencyAmount . of ( CA1 . getCurrency ( ) , AMT3 ) ) , test . getAmounts ( ) )
test . plus ( CurrencyAmount . of ( Currency , double ) )
test . plus ( CA1 ) . plus ( CA2 ) . isEqualTo ( expectedResult )
assertEquals ( test . plus ( amountToAdd ) , new BigMoney ( currency , amount . plus ( amountToAdd . amount ) ) )
test . minus ( Currency . getInstance ( "USD" ) , 10.0 ) . isEqualTo ( MultiCurrencyAmount . of ( CA1 , CA2 ) . plus ( CurrencyAmount . of ( Currency . getInstance ( "USD" ) , - 10.0 ) ) )
assertEquals ( test . minus ( amountToSubtract ) , new BigMoney ( currency , amount . minus ( amountToSubtract . amount ) ) )
assertEquals ( test . minus ( amountToSubtract ) , new BigMoney ( currency , amount . minus ( amountToSubtract . amount ) ) )
assertEquals ( expected , test )
assertEquals ( MultiCurrencyAmount . of ( CA1 , CA2 ) , test )
< AssertPlaceHolder >
test . isEqualTo ( CurrencyAmount . of ( CA1 ) , Offset . of ( 0.001 ) )
assertEquals ( MultiCurrencyAmount . of ( CA1 , CA2 ) , test , 0.001 )
assertEquals ( expected , test . adjustDate ( adjuster ) )
assertEquals ( DATE_2015_06_29 , test . getDate ( ) )
assertThat ( test ) . isEqualTo ( expected , tolerance )
assertEquals ( expected , test . adjusted ( refData ) )
assertThat ( test . yearFraction ( date1 , date2 ) ) . isEqualTo ( expected , tolerance )
assertThat ( test , isEqualTo ( expected , tolerance ) )
assertEquals ( expected , adjust ( input , refData ) )
assertEquals ( name , getName ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , propertyName )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( values , get ( "propertyName" ) )
assertThat ( info . getActYear ( ) ) . isEqualTo ( expectedActYear , tolerance )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( name . hashCode ( ) , - 823812830 )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( new DaysAdjustment ( numberOfDays , HolidayCalendarIds . NO_HOLIDAYS , adjustment ) , ofCalendarDays ( numberOfDays , adjustment ) )
assertEquals ( new DaysAdjustment ( 0 , HolidayCalendarIds . NO_HOLIDAYS , BusinessDayAdjustment . of ( FOLLOWING , holidayCalendar ) ) , ? ? ? )
assertEquals ( HolidayCalendarIds . NO_HOLIDAYS , test . getResultCalendar ( ) )
assertThat ( test . getResultCalendar ( ) ) . isEqualTo ( calendar )
assertEquals ( HolidayCalendarIds . NO_HOLIDAYS , test . getResultCalendar ( ) )
assertEquals ( LocalDate . of ( year , month , day ) , easter ( year ) )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertThat ( isHoliday ) . isTrue ( )
assertEquals ( LocalDate . of ( 2016 , 8 , 19 ) , date )
assertEquals ( expected , test . shift ( date , amount ) )
assertEquals ( expected , test . adjustBy ( date , amount ) )
assertEquals ( expectedNext , test . next ( date ) )
assertEquals ( expectedNext , test . nextOrSame ( date ) )
assertEquals ( expectedPrevious , test . previous ( date ) )
assertEquals ( expectedPrevious , test . previousOrSame ( date ) )
assertEquals ( expectedNext , test . nextSameOrLastInMonth ( date ) )
assertEquals ( expectedEom , test . lastBusinessDayOfMonth ( date ) )
assertThat ( test . isLastBusinessDayOfMonth ( date ) ) . isEqualTo ( expectedEom )
assertEquals ( values , get ( "propertyName" ) )
assertThat ( shift ( date , amount ) ) . isEqualTo ( expected )
assertEquals ( expected , date . adjustBy ( amount ) )
assertEquals ( expectedNext , cal . next ( date ) )
assertEquals ( expectedNext , cal . nextOrSame ( date ) )
assertEquals ( expectedPrevious , previous ( date ) )
assertEquals ( expectedPrevious , cal . previousOrSame ( date ) )
assertEquals ( expectedNext , cal . nextSameOrLastInMonth ( date ) )
assertEquals ( expectedEom , lastBusinessDayOfMonth ( date ) )
assertThat ( date . isLastBusinessDayOfMonth ( ) ) . isEqualTo ( expectedEom )
assertEquals ( calendar1 . getId ( ) . combinedWith ( calendar2 . getId ( ) ) , focalMethod ( ) )
date = date . plusDays ( 1 )
assertEquals ( LocalDate . of ( 2012 , 1 , 1 ) . plusDays ( i + 1 ) , date . plusDays ( 1 ) )
assertEquals ( LocalDate . of ( 2012 , 1 , 1 ) . plusDays ( i + 1 ) , date . plusDays ( 1 ) )
assertEquals ( LocalDate . of ( 2012 , 12 , 31 ) , date )
date = date . plusDays ( 1 )
assertEquals ( expected , parse ( input ) )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertEquals ( expected , ? ? ? )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "Expected StandardId to be parsed correctly" , expectedStandardId , parse ( inputString ) )
assertEquals ( expected , parse ( input ) )
assertEquals ( expected , parse ( input ) )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertThat ( normalized ) . isEqualTo ( getPeriod ( ) )
assertEquals ( name , getName ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( name . length ( ) , 6 )
? ? ? assertEquals ( null , getName ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , test . toString ( ) )
assertEquals ( name . length ( ) , 6 )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertNotNull ( name )
assertNotNull ( field . getName ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
? ? ? assertEquals ( "expected_value" , convention . getName ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( map . get ( name ) , convention )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( "USD/CNY-SAEC-CNY01" , test . getName ( ) )
assertEquals ( "USD/INR-FBIL-INR01" , test . getName ( ) )
assertThat ( a1 . equals ( a2 ) ) . isEqualTo ( true )
assertNotNull ( name )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , name , "<AssertPlaceHolder>" )
assertEquals ( "TradeList{trades=[Trade{...}]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertNotNull ( index . getFloatingRateName ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertThat ( a . equals ( b ) ) . isEqualTo ( false )
assertNotNull ( index . getFloatingRateName ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=[Trade{symbol=ABC, quantity=100, price=10.0}, Trade{symbol=XYZ, quantity=200, price=20.0}]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
? ? ? assertEquals ( null , getName ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertEquals ( "ABC" , getCode3Char ( ) )
assertEquals ( "TradeList{trades=[...]" , test . toString ( ) )
assertThat ( normalized ) . isEqualTo ( getPeriod ( ) )
assertThat ( test . eventsPerYearEstimate ( test , expected ) ) . isEqualTo ( expected , Offset . < Double > tolerance ( tolerance ) )
assertEquals ( "Expected StandardId to be parsed correctly" , expectedStandardId , parse ( inputString ) )
assertEquals ( expected , parse ( input ) )
assertEquals ( expected , parse ( input ) )
assertEquals ( "Invalid identifier format: " + input , exception . getMessage ( ) )
assertEquals ( 0 , test . size ( ) )
assertEquals ( Arrays . asList ( LocalDate . of ( 2015 , 5 , 27 ) , LocalDate . of ( 2015 , 5 , 29 ) , LocalDate . of ( 2015 , 5 , 31 ) ) , test )
assertEquals ( expected , conv . adjust ( input ) )
assertEquals ( expected , calculated )
assertEquals ( expected , focalMethod ( input , freq ) )
assertEquals ( RollConvention . of ( 31 ) , ? ? ? )
assertEquals ( expected , test . next ( date ( 2014 , AUGUST , i ) ) . get ( ) )
assertEquals ( expected , test . next ( expected ) )
assertEquals ( expected , test . adjust ( date ( 2014 , JUNE , i ) ) )
assertEquals ( expected , test . adjust ( date ( 2014 , JULY , i ) ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , rollConvention )
assertEquals ( convention , map . get ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 0 , periods . size ( ) )
assertEquals ( 1 , test . mergeToTerm ( ) . getPeriods ( ) . size ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , e . getMessage ( ) )
assertEquals ( expected , round ( input ) )
assertEquals ( expected , round ( BigDecimal . valueOf ( input ) ) )
assertEquals ( expected , round ( input ) )
assertEquals ( expectedValue , result , delta )
assertEquals ( expected , actual )
assertEquals ( expectedValue , actualValue )
assertEquals ( "TradeList{trades=[Trade1, Trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( test , test2 )
assertEquals ( ImmutableList . of ( 300d , 300d , 400d , 400d , 400d ) , test . resolveValues ( schedule ) )
assertEquals ( 300d , test . getSteps ( ) . get ( 1 ) . getAdjustment ( ) . getAmount ( ) )
assertEquals ( 400d , test . getSteps ( ) . get ( 1 ) . getAdjustment ( ) . getValue ( ) )
assertEquals ( 300d , test . resolveValues ( schedule ) [ 0 ] , 0.0001 )
assertEquals ( 300d , test . resolveValues ( schedule ) [ 3 ] , 0.0001 )
assertEquals ( DoubleArray . of ( 200d , 300d , 400d ) , resolveValues ( test ) )
assertArrayEquals ( expected . toArray ( ) , actual . toArray ( ) )
assertEquals ( 200d , test . getInitialValue ( ) )
Note : The suggested  assertion assumes  that the ` getName  ( ) ` method of the ` ColumnName ` class returns the name of the column .
assertEquals ( expectedValue , actualValue )
assertEquals ( test . getTaskRunner ( ) , CalculationRunner . ofMultiThreaded ( ) . getTaskRunner ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertTrue ( < AssertPlaceHolder > )
assertEquals ( test , test2 )
assertEquals ( test , getParameters ( ) )
assertEquals ( 0 , test . getParameters ( ) . size ( ) )
assertEquals ( test , getParameters ( ) )
assertEquals ( test , getParameters ( ) )
assertEquals ( test , filtered1 )
assertEquals ( test , filtered1 )
assertEquals ( test , test2 )
assertEquals ( test , test2 )
assertEquals ( test , test2 )
assertEquals ( test , test2 )
assertEquals ( ImmutableReferenceData . of ( values ) , ? ? ? )
assertThat ( result ) . hasValue ( value )
assertThat ( result ) . hasValue ( value )
assertThat ( result ) . hasValue ( value )
assertThat ( result ) . hasValue ( "foo" )
assertEquals ( test , test2 )
assertEquals ( "TradeList{trades=[TARGET1, TARGET1]}" , task . toString ( ) )
assertEquals ( Results . empty ( ) , test . calculate ( tasks , marketData , refData ) )
assertEquals ( MarketDataFxRateProvider . of ( marketData , observableSource ) , fxRateProvider ( marketData ) )
assertEquals ( FxRateLookup . ofRates ( OBS_SOURCE ) , test )
assertEquals ( FxRateLookup . ofRates ( EUR ) , test )
assertEquals ( MarketDataFxRateProvider . of ( marketData , observableSource ) , test . fxRateProvider ( marketData ) )
assertEquals ( FxRateLookup . ofMatrix ( ) , test )
assertEquals ( FxRateLookup . ofMatrix ( FxMatrixId . of ( OBS_SOURCE ) ) , test )
assert validIfTrue
assertEquals ( true , pattern . matcher ( argument ) . matches ( ) )
assertEquals ( "" , notBlank ( "" , "argument" ) )
assertEquals ( "expectedValue" , notBlank ( argument , name ) )
assertEquals ( "Expected value to be greater than zero" , true , argument . unscaledValue ( ) > 0 )
assert argument . unscaledValue ( ) > 0
assertEquals ( 0 , argument . unscaledValue ( ) )
assertEquals ( ZERO , ofScaled ( 0 , 0 ) )
assertEquals ( expected , test1 . dividedBy ( test2 , roundingMode ) )
assertEquals ( expectedValue , mapAsDouble ( fn ) . doubleValue ( ) , delta )
assertEquals ( Double . valueOf ( expectedValue ) , Double . valueOf ( actualValue ) )
assertEquals ( expectedExact , format ( dp , RoundingMode . EXACT ) )
assertEquals ( expectedAtleast , formatAtLeast ( dp ) )
assertThat ( operator . apply ( 2.0 ) ) . isEqualTo ( 0.5 )
assertEquals ( 4d , keys [ 0 ] )
assertEquals ( 4d , keys [ 0 ] , 0.001 )
assertEquals ( 4 , values . length )
test . map ( FixedScaleDecimal :: parse ) . getAmount ( ) . equals ( FixedScaleDecimal . parse ( "1.25" ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( ImmutableMap . of ( "a" , 1 , "b" , 2 , "c" , 3d , "d" , 4d ) , test )
assertEquals ( ImmutableMap . of ( "a" , "xxx" , "b" , "two" , "c" , "three" , "d" , "four" ) , test )
assertEquals ( Optional . of ( 1 ) , test )
assertEquals ( Optional . of ( Double . valueOf ( 2d ) ) , test )
assertEquals ( Optional . empty ( ) , test )
assertEquals ( Optional . of ( 1 ) , test )
assertEquals ( Optional . of ( Double . valueOf ( 2d ) ) , test )
assertEquals ( Optional . empty ( ) , test )
assertEquals ( Arrays . asList ( "a" , "b" , "c" ) , test )
assertEquals ( 3 , test . size ( ) )
assertEquals ( 0 , test . size ( ) )
assertEquals ( 3 , test . size ( ) )
assertEquals ( 2 , test . size ( ) )
assertEquals ( 2 , test . size ( ) )
assertEquals ( 0 , test . size ( ) )
assertEquals ( data , test )
assertThat ( list . stream ( ) . filter ( Optional :: isPresent ) . map ( Optional :: get ) . collect ( Collectors . toList ( ) ) ) . isEqualTo ( Arrays . asList ( "A" , "C" ) )
assertEquals ( ImmutableList . of ( "a" , "b" , "c" , "a" ) , test )
assertEquals ( ImmutableList . of ( ImmutableList . of ( "a" , "ab" , "b" , "bb" ) , ImmutableList . of ( "c" , "a" ) ) , test )
assertEquals ( ImmutableSet . of ( "a" , "b" , "c" ) , test )
assertEquals ( ImmutableSortedSet . of ( "a" , "b" , "c" ) , test )
assertEquals ( ImmutableSortedSet . of ( "c" , "b" , "a" ) , test )
assertEquals ( ImmutableMultiset . of ( "a" , "b" , "c" ) , test )
assertEquals ( 3 , test . size ( ) )
assertEquals ( ImmutableMap . of ( 1 , "!a" , 2 , "!ab" , 3 , "!bob" ) , test )
assertEquals ( 3 , test . size ( ) )
assertEquals ( 3 , test . size ( ) )
assertEquals ( 6 , test . size ( ) )
assertEquals ( "ThreadFactory" , threadFactory . getClass ( ) . getSimpleName ( ) )
assertEquals ( "ThreadMaker" , threadFactory . toString ( ) )
assertEquals ( ImmutableList . of ( "key1" , "key2" , "key3" ) , result )
assertEquals ( ? ? ? , result )
assertEquals ( ImmutableMap . of ( 1 , 11 , 3 , 33d ) , result )
assertEquals ( ImmutableMap . of ( 1 , 11 , 3 , 33 ) , result )
assertThat ( result . getKey ( ) ) . isEqualTo ( expectedKey )
assertThat ( result ) . isEqualTo ( expected , tolerance )
assertThat ( result . getKey ( ) ) . isEqualTo ( expected . getKey ( ) )
assertThat ( result ) . isEqualTo ( expected , tolerance )
assertEquals ( 8 , result . size ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( expMain , format ( decimalPlaces , roundingMode ) )
assertEquals ( expMain , format ( decimalPlaces , roundingMode ) )
assertEquals ( "12,345.678" , text )
assertEquals ( "TradeList{trades=[A]}" , test . toString ( ) )
assertEquals ( "ABC" , test . toString ( ) )
assertEquals ( IOException . class , assertThrows ( IOException . class , a :: run ) . getClass ( ) )
assertEquals ( "Expected exception to be thrown" , Exception . class , assertThrows ( Exception . class , a :: run ) . getClass ( ) )
assertEquals ( "expectedValue" , a . apply ( "inputValue" ) )
assertEquals ( IOException . class , assertThrows ( IOException . class , ( ) -> a . apply ( null ) ) )
assertThrows ( Exception . class , ( ) -> a . apply ( null ) )
assertEquals ( "expectedValue" , a . apply ( "input1" , "input2" ) )
assertThrows ( IOException . class , ( ) -> a . apply ( "" , "" ) )
assertThrows ( Exception . class , ( ) -> a . apply ( "" , "" ) )
assertEquals ( "expectedValue" , a . apply ( "inputValue" ) )
assertThrows ( IOException . class , ( ) -> a . apply ( "test" ) )
assertThrows ( Exception . class , ( ) -> a . apply ( null ) )
assertEquals ( "expectedValue" , a . apply ( "input1" , "input2" ) )
assertThrows ( IOException . class , ( ) -> a . apply ( null , null ) )
assertThrows ( Exception . class , ( ) -> a . apply ( null , null ) )
isTrue ( a . test ( "test" , "test" ) ) ;
assertEquals ( IOException . class , assertThrows ( IOException . class , ( ) -> a . accept ( null , null ) ) )
assertThrows ( Exception . class , ( ) -> a . accept ( null , null ) )
assertEquals ( "A" , a . get ( ) )
assertEquals ( IOException . class , assertThrows ( IOException . class , a :: get ) . getClass ( ) )
assertEquals ( "Unknown property: " + propertyName , exception . getMessage ( ) )
assertContent ( test1 . plus ( test2 ) , 1.5d , 2.6d , 3.7d )
assertContent ( test1 . minus ( test2 ) , 0.5d , 1.4d , 2.3d )
assertContent ( test1 . multipliedBy ( test2 ) , 0.5d , 1.2d , 2.1d )
assertArrayEquals ( new double [ ] { 5d , 4d , 3d } , test1 . dividedBy ( test2 ) . toArray ( ) , 0.0001 )
test . isEqualTo ( expected , tolerance )
assertMatrix ( < AssertPlaceHolder > )
assertMatrix ( DoubleMatrix . identity ( 3 ) , 1d , 0d , 0d , 0d , 1d , 0d , 0d , 0d , 1d )
assertMatrix ( test1 . plus ( test2 ) , 1.5d , 2.6d , 3.7d , 4.5d , 5.6d , 6.7d )
assertMatrix ( test1 . minus ( test2 ) , 0.5d , 1.4d , 2.3d , 3.5d , 4.4d , 5.3d )
assertEquals ( "TradeList{trades=[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]}" , test . toString ( ) )
assertThat ( test1 . plus ( test2 ) , contains ( 6 , 8 , 10 ) )
assertContent ( test1 . minus ( test2 ) , - 4 , - 4 , - 4 )
assertContent ( test1 . multipliedBy ( test2 ) , 5 , 12 , 21 )
assertArrayEquals ( new int [ ] { 5 , 4 , 3 } , test1 . dividedBy ( test2 ) )
test . isEqualTo ( expected , tolerance )
assertThat ( test1 . plus ( test2 ) , contains ( 6 , 8 , 10 ) )
assertContent ( test1 . minus ( test2 ) , - 4 , - 4 , - 4 )
assertContent ( test1 . multipliedBy ( test2 ) , 5 , 12 , 21 )
assertArrayEquals ( new long [ ] { 5 , 4 , 3 } , test1 . dividedBy ( test2 ) . toArray ( ) )
test . isEqualTo ( expected , tolerance )
assert notGreaterThan8 . test ( 1 , 2 , 3 )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertEquals ( value , test . getValue ( ) )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertEquals ( IOException . class , assertThrows ( IOException . class , supplier :: get ) . getClass ( ) )
assertEquals ( "Expected exception to be thrown" , IOException . class , assertThrows ( IOException . class , ( ) -> ? ? ? from ( id ) ? ? ? ) )
assertEquals ( test . read ( ) , hash )
assertEquals ( test , toSha512 ( ) )
assertEquals ( test . toBase64 ( ) . read ( ) , base64 )
assertEquals ( "file:///" + System . getProperty ( "user.dir" ) + "/" + fileName , url . toString ( ) )
assertEquals ( "expectedValue" , actualValue )
assertThrows ( Exception . class , ( ) -> wrap ( ( ) -> ? ? ? ) )
assertEquals ( headers . size ( ) , rows . size ( ) )
assertEquals ( expected , focalMethod ( input ) )
assertThrows ( Exception . class , ( ) -> wrap ( ( ) -> ? ? ? ) )
buf . toString ( ) . equals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( "\"a\",\"x\"\n\"b\",\"y\"" , buf . toString ( ) )
assertEquals ( "\"a\",\"1,000\"\n\"b\\\"c\",\"y\"" , buf . toString ( ) )
assertEquals ( "\"a\",\" x\"\n\"b \",\"y\"" , buf . toString ( ) )
assertEquals ( "a,x\nb,y\n" , buf . toString ( ) )
buf . toString ( ) . equals ( "a,1,000" )
assertThat ( buf . toString ( ) ) . isEqualTo ( "a\t1,000" )
assertEquals ( "=cmd,+cmd,-cmd,@cmd," , buf . toString ( ) )
assertEquals ( "TradeList{trades=[+8, -7, +8-7, -7+8, NaN, -Infinity]}" , buf . toString ( ) )
assertEquals ( "a,=x\nb,y\n" , buf . toString ( ) )
assertEquals ( "\"\\n\"" , buf . toString ( ) )
assertEquals ( "TradeList{trades=[+8, -7, +8-7, -7+8, NaN, -Infinity]}" , buf . toString ( ) )
assertEquals ( "\"a\",\"x\"\n\"b\",true,\"y\",true\n" , buf . toString ( ) )
assertEquals ( "a,b\nx,y\n" , buf . toString ( ) )
assertEquals ( "h1,1.23,h2,123,h3,123\nh1,123.0,h2,123.0,h3,123\n" , buf . toString ( ) )
assertEquals ( "a,b,c\n1,=2,3" , underlying . toString ( ) )
assertEquals ( "\"a\",\"b\",\"c\"\n\"1\",\"=2\",\"3\"" , underlying . toString ( ) )
assertEquals ( "a,b,c\n1,=2,3" , underlying . toString ( ) )
assertEquals ( "\"a\",\"b\",\"c\"\n\"1\",\"=2\",\"3\"" , underlying . toString ( ) )
assertEquals ( "TradeList{trades=[Trade{symbol=IBM, quantity=100, price=135.5}, Trade{symbol=AAPL, quantity=50, price=200.0}]}" , buf . toString ( ) )
assertEquals ( "TradeList{trades=[Trade{symbol=ABC, quantity=100, price=10.0}, Trade{symbol=DEF, quantity=200, price=20.0}]}" , buf . toString ( ) )
assertEquals ( "TradeList{trades=[Trade{symbol=IBM, quantity=100, price=135.5}, Trade{symbol=GOOG, quantity=50, price=750.25}]}" , buf . toString ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertEquals ( "TradeList{trades=[Trade{symbol=IBM, quantity=100, price=135.5}]}" , buf . toString ( ) )
assertEquals ( "TradeList{trades=[Trade{symbol=IBM, quantity=100, price=135.5}]}" , buf . toString ( ) )
assertThat ( test . get ( "a=d=" ) ) . contains ( "x" )
assertThrows ( ParseException . class , ( ) -> wrap ( ( ) -> parse ( invalid ) ) )
assertThrows ( IllegalArgumentException . class , ( ) -> wrap ( ( ) -> ? ? ? invalid ? ? ? ) )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> wrap ( ( ) -> ? ? ? focal_method ? ? ? ) ) )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> wrap ( ( ) -> ? ? ? focal_method ? ? ? ) ) )
assertEquals ( keyValues1 , test . getProperties ( ) )
assertEquals ( "= y\n" , invalid )
assertEquals ( expected , base . combinedWith ( other ) )
assertEquals ( PropertySet . of ( ImmutableListMultimap . of ( "a" , "x" , "a" , "y" , "b" , "y" , "c" , "z" ) ) , base )
assertEquals ( PropertySet . of ( ImmutableListMultimap . of ( "a" , "x" , "a" , "y" , "b" , "y" , "c" , "z" ) ) , base . combinedWith ( emptyOther ) )
assertEquals ( PropertySet . of ( ImmutableListMultimap . of ( "a" , "x" , "a" , "y" , "b" , "y" , "c" , "z" ) ) , base )
assertEquals ( PropertySet . of ( ImmutableListMultimap . of ( "a" , "x" , "a" , "y" , "b" , "y" , "c" , "z" ) ) , base )
assertThat ( test_ofChained_chainToNowhere ( ) . isEqualTo ( expected , tolerance ) ) . isNotNull ( )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , e . getMessage ( ) )
< AssertPlaceHolder >
assertEquals ( value , actual . getValue ( ) )
assertThat ( test , equalTo ( expected ) )
assertEquals ( value , actual . getValue ( ) )
assertEquals ( value , actual . getValue ( ) )
assertEquals ( value , actual . getValue ( ) )
assertEquals ( IOException . class , assertThrows ( IOException . class , supplier :: get ) . getClass ( ) )
assertEquals ( "Expected exception to be thrown" , IOException . class , assertThrows ( IOException . class , ( ) -> ? ? ? from ( id ) ? ? ? ) )
assertThat ( str ) . isEqualTo ( expectedString )
assertThat ( str ) . isEqualTo ( expected )
assertThat ( str ) . isEqualTo ( "MP" )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , 6 , name . length ( ) )
AssertPlaceHolder = "assertThrows(IOException.class, () -> source.size());"
assertEquals ( 0 , parseElements ( source , filterFn ) . size ( ) )
assertEquals ( 0 , parseElements ( source , filterFn ) . size ( ) )
assertNotNull ( test . getFailure ( ) )
assertNotNull ( test . getFailureItem ( ) )
assertEquals ( "TradeList{trades=[Trade{...}]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( item , test . getFailureItem ( ) )
assertEquals ( item , test . getFailureItem ( ) )
test . assertEquals ( "success" , test . getValue ( ) )
assertThat ( test . getFailure ( ) ) . isEqualTo ( testFailure )
assertEquals ( null , test . getValue ( ) )
assertThat ( test . getFailure ( ) . getItems ( ) , containsInAnyOrder ( expected . toArray ( ) ) )
assertThat ( test . getFailure ( ) . getItems ( ) , containsInAnyOrder ( expected . toArray ( ) ) )
assertEquals ( success1 , success2 )
assertThat ( test . getFailure ( ) . getItems ( ) ) . containsAll ( expected )
assertEquals ( success1 , success2 )
assertEquals ( META_BEAN , ? ? ? )
assertEquals ( false , test . isSuccess ( ) )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertThat ( test . getValue ( ) ) . isEqualTo ( value )
assertNotNull ( values )
assertEquals ( 0 , series . size ( ) )
assertEquals ( 0 , points . size ( ) )
assertEquals ( date ( 2015 , 1 , 8 ) , base . subSeries ( date ( 2015 , 1 , 8 ) , date ( 2015 , 1 , 1 ) ) )
assertEquals ( numPoints , endPosition )
assertEquals ( numPoints , base . tailSeries ( numPoints ) . size ( ) )
assertEquals ( 15 , counter . get ( ) )
assertEquals ( 0 , test . size ( ) )
assertEquals ( false , base . getDates ( ) . isAscending ( ) )
assertNull ( values )
assertEquals ( date , base . getDate ( ) )
assertEquals ( "TradeList{trades=[Trade{...}]}" , test . toString ( ) )
assertEquals ( 0 , referenceData . size ( ) )
assertEquals ( 5d , test . build ( ) . get ( date ( 2013 , 1 , 1 ) ) . getValue ( ) )
assertEquals ( 5d , test . build ( ) . get ( date ( 2013 , 1 , 1 ) ) . getValue ( ) , 0.00001 )
assertEquals ( 2 , dates . size ( ) )
assertEquals ( 2d , map . get ( DATE_2011_01_01 ) )
assertEquals ( null , map . get ( DATE_2012_01_01 ) )
assertEquals ( 0 , base . subSeries ( date ( 2015 , 1 , 1 ) , date ( 2014 , 12 , 31 ) ) . size ( ) )
assertEquals ( numPoints , endPosition )
assertEquals ( numPoints , < AssertPlaceHolder >  )
assertEquals ( 15 , counter . get ( ) )
assertEquals ( 0 , test . size ( ) )
assertEquals ( false , base . isAscending ( ) )
test . toPair ( 1.0 , 2.0 ) . isEqualTo ( expected , tolerance )
assertEquals ( "Invalid identifier format: " + text , exception . getMessage ( ) )
assertThat ( test ) . isEqualTo ( expected , tolerance )
assertEquals ( "Invalid identifier format: " + text , exception . getMessage ( ) )
test . toPair ( 1L , 2.0 ) . isEqualTo ( expected , tolerance )
assertEquals ( "Invalid identifier format: " + text , exception . getMessage ( ) )
test . toPair ( first , second ) . isEqualTo ( expected , tolerance )
assertThat ( test ) . isEqualTo ( expected )
assertEquals ( null , first )
assertThat ( summed ) . isEqualTo ( Pair . of ( 20 , 22 ) )
combined . isEqualTo ( Pair . of ( "1A" , "2B" ) , tolerance )
assertEquals ( AdjustablePayment . of ( null , 0.0 , null ) , ? ? ? )
assertEquals ( Triple . of ( 20 , 22 , "34" ) , summed )
assertEquals ( Triple . of ( "1A" , 30 , 9.0 ) , combined )
assertThat ( test . toString ( ) ) . isEqualTo ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 123d , dataMap . get ( ID1 ) )
assertEquals ( null , dataMap . get ( ID1 ) )
assertEquals ( test1 . combinedWith ( test2 ) , new ImmutableReferenceData ( combined ) )
assertEquals ( VAL3 , test . getValue ( ID1 ) )
assertThat ( test ) . isEqualTo ( ObservableSource . of ( "Foo" ) )
assertEquals ( 3 , values . size ( ) )
assertEquals ( ImmutableList . of ( CurrencyAmount . of ( GBP , 1 ) , CurrencyAmount . of ( USD , 2 ) , CurrencyAmount . of ( GBP , 3 ) ) , get ( "values" ) )
assertEquals ( BigMoney . of ( resultCurrency , values . multipliedBy ( fxRate ) ) , test . convertedTo ( resultCurrency , fxRate ) )
assertEquals ( BigMoney . of ( Currency . GBP , 1 ) . convertedTo ( Currency . USD , 1.61 ) , test . get ( 0 ) . convertedTo ( Currency . USD , 1.61 ) )
assertThat ( converted . get ( i ) ) . isEqualTo ( expected . get ( i ) , Offset . offset ( tolerance ) )
assertThat ( converted . get ( i ) ) . isEqualTo ( expected . get ( i ) , Offset . offset ( tolerance ) )
assertThat ( marketData . getScenarioCount ( ) ) . isEqualTo ( 0 )
assertThat ( test . getScenarioCount ( ) ) . isEqualTo ( 3 )
assertThat ( getAmounts ( ) . getAllAmountsUnsafe ( ) ) . isEqualTo ( expected )
assertEquals ( expected , convertedArray . getAmounts ( ) )
assertThat ( VALUES_ARRAY . getCurrencies ( ) ) . containsExactlyInAnyOrder ( Currency . GBP , Currency . USD , Currency . EUR )
assertThat ( box . getScenarioCount ( ) ) . isEqualTo ( 3 )
assertThat ( box . getMarketDataType ( ) ) . isEqualTo ( Integer . class )
assertEquals ( Arrays . asList ( 27 , 28 , 29 ) , list )
assertEquals ( null , dataMap . get ( ID1 ) )
assertEquals ( ImmutableSet . of ( firstWeekendDay , secondWeekendDay ) , ImmutableHolidayCalendar . of ( id , ImmutableSortedSet . copyOf ( holidays ) , weekendDays , ImmutableSet . of ( ) ) . getWeekendDays ( ) )
array . length ( ) == 1
assertEquals ( DoubleArray . of ( 9d , 9d , 9d ) , array . toArray ( ) )
array . length ( ) == 3
assertEquals ( 27 , box . getSingleValue ( ) )
assertThat ( box . getScenarioCount ( ) ) . isEqualTo ( 3 )
assertThat ( box . getMarketDataType ( ) ) . isEqualTo ( Integer . class )
assertEquals ( 27 , list . get ( 0 ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( ImmutableReferenceData . empty ( ) , row . parseBusinessDayAdjustment ( ) )
assertEquals ( CurrencyAmount . of ( Currency . getInstance ( "GBP" ) , 123.4 ) , parseCurrencyAmount ( row , "CCY" , "AMT" ) )
assertEquals ( allCurves , oneDayCurves )
assertTrue ( result . size ( ) > 0 ) ;
assertEquals ( test . isKnownFormat ( ) , true )
assertEquals ( ofFile ( tempFile ) . read ( ) , ? ? ? )
assertEquals ( "expectedValue" , test . getCharSource ( ) . asCharSourceUtf8UsingBom ( ) )
AssertPlaceHolder = "assertEquals(0, trades.getFailures().size());"
isTrue ( trades . size ( ) > 0 )
isTrue ( parser . isKnownFpmlUtf16 ( resource ) )
assertEquals ( FpmlDocument . ANY_SELECTOR , test_any ( ) )
assertEquals ( test , test , "Error" )
assertThat ( test . toString ( ) ) . isEqualTo ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( computed , baseSens . plus ( spreadSens ) )
assertEquals ( 3 , computed . size ( ) )
assertThat ( computed . split ( ) ) . isEqualTo ( expectedSplit )
assertEquals ( "Foo" , test . toString ( ) )
assertEquals ( "DAY_COUNT" , test . toString ( ) )
assertEquals ( test , CurveInfoType . JACOBIAN )
assertEquals ( CurveInfoType . COMPOUNDING_PER_YEAR , test )
assertEquals ( test , CurveInfoType . PV_SENSITIVITY_TO_MARKET_QUOTE )
assertEquals ( CurveInfoType . CDS_INDEX_FACTOR , test )
assertEquals ( "Foo" , test . getValue ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertThat ( test . getValue ( id ) ) . isEqualTo ( perturbation . applyTo ( test . getValue ( id ) , refData ) )
assertNotNull ( getLeftCurve ( ) )
assertNotNull ( leftCurve )
assertEquals ( x , xValue , "x should be equal to the existing x-value" )
assertEquals ( CURVE_METADATA , test . getMetadata ( ) )
assertEquals ( expected , test . metadata ( VAL_DATE , REF_DATA ) )
test . toCurveParameterSize ( ) . getName ( ) , equalTo ( expectedName )
assertEquals ( 2 , test . values ( ) . count ( ) )
assertEquals ( expected , test . metadata ( VAL_DATE , REF_DATA ) )
assertEquals ( CurveParameterSize . of ( CURVE_NAME , NODES . size ( ) ) , test . toCurveParameterSize ( ) )
assertEquals ( test , test2 )
assertEquals ( ImmutableHolidayCalendar . of ( id , holidays , firstWeekendDay , secondWeekendDay ) , ImmutableHolidayCalendar . of ( id , holidays , firstWeekendDay , secondWeekendDay ) )
assertEquals ( "Foo" , test . toString ( ) )
assertEquals ( expected , test . metadata ( valuationDate , refData ) )
assertEquals ( 2 , test . toCurveParameterSize ( ) . getParameterCount ( ) )
assertEquals ( expected , base . withParameter ( 1 , 1d ) )
assertEquals ( expected , base . withMetadata ( metadata ) )
assertEquals ( expected , base . withParameters ( parameters ) )
assertEquals ( meta . getValuationDate ( ) , valuationDate )
assertEquals ( "Foo" , test . toString ( ) )
assertNotNull ( convention )
buf . append ( "trades" ) . append ( '=' ) . append ( JodaBeanUtils . toString ( trades ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , map . get ( name ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , map . get ( name ) )
assertEquals ( df , grad * ( key - X_VALUES . get ( NUM_DATA - 1 ) ) + DSC_VALUES . get ( NUM_DATA - 1 ) )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertEquals ( bci . interpolate ( X_DATA . get ( i ) ) , Y_DATA . get ( i ) )
assertEquals ( Y_TEST . get ( i ) , bci . interpolate ( X_TEST . get ( i ) ) )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertNotNull ( bci )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
AssertPlaceHolder
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertNotNull ( bci )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertEquals ( expectedValue , actualValue )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertEquals ( values , get ( propertyName ) )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertEquals ( bci . interpolate ( X_DATA . get ( i ) ) , Y_DATA . get ( i ) )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertNotNull ( bci )
assertArrayEquals ( expected . toArray ( ) , computed . toArray ( ) )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertNotNull ( bci )
assertThat ( deriv ) . isCloseTo ( dComputed , offset ( TOLERANCE_Y ) )
assertEquals ( bci . interpolate ( X_DATA . get ( i ) ) , Y_DATA . get ( i ) )
assertEquals ( expectedTrade , trade ( quantity , marketData , refData ) )
metadata . getDate ( ) . equals ( END_DATE )
metadata . getDate ( ) . equals ( END_DATE )
assertThat ( set , is ( equalTo ( setExpected ) ) )
AssertPlaceHolder = "assertTrue(set.containsAll(setExpected));"
assertTrue ( setExpected . containsAll ( set ) )
assertThat ( test ) . isEqualTo ( "Foo" )
assertEquals ( 3 , quotesArray . getQuotes ( ) . size ( ) )
assertEquals ( 3 , quotesArray . getQuotes ( ) . get ( 0 ) )
// assertion code
assertThat ( box . getScenarioCount ( ) ) . isEqualTo ( 3 )
assertNull ( ImmutableReferenceData . of ( null ) )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
test . getSensitivities ( )
test . getSensitivities ( )
assertEquals ( expectedTotal , total ( amounts ) )
assertEquals ( expectedTotal , total ( amounts ) )
assertEquals ( base . multipliedBy ( FACTOR1 ) , test )
assertEquals ( value , test . getSensitivity ( ) )
assertEquals ( value , test . getSensitivity ( ) )
assertEquals ( 0 , builder . size ( ) )
assertEquals ( 0 , test . getSensitivities ( ) . get ( 0 , 0 ) , 0 )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
test . getSensitivities ( )
assertEquals ( expectedTotal , total )
assertEquals ( expectedTotal , total )
assertEquals ( VECTOR_USD1 . get ( i ) * FACTOR1 , test . get ( i ) , TOLERANCE )
assertEquals ( 1 / VECTOR_USD1 . get ( i ) , test . get ( i ) )
test . isEqualTo ( expected , tolerance )
assertEquals ( USD , test . getCurrency ( ) )
assertEquals ( base . multipliedBy ( FACTOR1 ) , test )
assertEquals ( test , base . plus ( VECTOR_USD1 ) )
assertEquals ( base1 . multipliedBy ( 2 ) , test )
assertEquals ( base , test . toCurrencyParameterSensitivity ( ) )
assertEquals ( ImmutableHolidayCalendar . of ( id , holidays , firstWeekendDay , secondWeekendDay ) , ? ? ? )
assertEquals ( DATE , builder . build ( ) . date ( ) )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( ) . equals ( expectedSensitivities )
assertEquals ( VECTOR1 . get ( i ) * FACTOR1 , test . get ( i ) )
assertEquals ( 1 / VECTOR1 . get ( i ) , test . get ( i ) )
test . isEqualTo ( expected , tolerance )
assertEquals ( USD , test . getCurrency ( ) )
test . multipliedBy ( FACTOR1 ) . equals ( base . multipliedBy ( FACTOR1 ) )
assertEquals ( test , base . plus ( VECTOR1 ) )
assertEquals ( test , UnitParameterSensitivity . of ( NAME1 , METADATA1 , VECTOR1 ) . plus ( UnitParameterSensitivity . of ( NAME1 , METADATA1 , VECTOR1 ) ) )
assertEquals ( 0.0 , test , 0.0 )
assertEquals ( DATE , builder . build ( ) . date ( ) )
test . getSensitivities ( ) . equals ( expectedSensitivities )
assertEquals ( 3 , test . size ( ) )
assertEquals ( base , test )
assertEquals ( Lists . newArrayList ( CS1 , CS2 , CS3 ) , test . getSensitivities ( ) . asList ( ) )
assertEquals ( expected , test . getSensitivities ( ) )
assertEquals ( expected , test . getSensitivities ( ) )
assertEquals ( test , PointSensitivities . of ( sensitivities ) )
assertEquals ( list , test . asList ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , test . toString ( ) )
assertEquals ( test . combinedWith ( test2 ) , PointSensitivities . of ( Lists . newArrayList ( CS2 , CS1 , CS3 ) ) )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
assertEquals ( DaysAdjustment . ofCalendarDays ( 0 , adjustment ) , test . normalized ( ) )
assertEquals ( test1 , test2 )
assertEquals ( BigMoney . of ( resultCurrency , BigDecimal . ZERO ) , convertedTo ( resultCurrency , fxRate ) )
assertEquals ( expectedSensitivities , test . getSensitivities ( ) )
assertEquals ( "DAY_COUNT" , test . toString ( ) )
assertEquals ( SurfaceInfoType . MONEYNESSTYPE , test )
assertEquals ( "Foo" , test . getValue ( ) )
assertThat ( test . getValue ( id ) ) . isEqualTo ( perturbation . applyTo ( test . getValue ( id ) , refData ) )
assertEquals ( new ComplexNumber ( 2.0 , 3.0 ) , sqrt ( new ComplexNumber ( - 5.0 , 4.0 ) ) )
assertEquals ( square ( new ComplexNumber ( x , 0 ) ) , new ComplexNumber ( x * x , 0 ) )
assertEquals ( expected , actual , epsilon )
assertEquals ( expected , actual , delta )
assertEquals ( fdRes . get ( i ) , alRes . get ( i ) )
assertEquals ( alFunc . apply ( x [ i ] ) , expectedValue [ i ] , delta )
assertEquals ( 0.2245 , x , 0.0001 )
assertEquals ( alFunc . apply ( x [ i ] ) , expectedValue [ i ] )
assertEquals ( new ComplexNumber ( expectedReal , expectedImaginary ) , pow ( z1 , z2 ) )
assertEquals ( 1e-5 , derivative ( ) . apply ( x ) , 1e-10 )
assertEquals ( x , Math . log ( Math . hypot ( z . getReal ( ) , z . getImaginary ( ) ) ) , delta )
assertEquals ( 0.9893582466233818 , f . apply ( x ) , 0.000001 )
assertEquals ( factorial , ? ? ? apply ( x ) , 0.001 )
assertEquals ( func . apply ( 0.0 , 0.0 , 0.0 ) , expectedValue )
? ? ? assertEquals ( LinearWeightingFunction . INSTANCE , getInstance ( ) )
assertThat ( p1 ) . isEqualTo ( expectedP1 )
isTrue ( Math . abs ( value - old ) >= 0.0 )
assertEquals ( fdRes [ i ] . get ( j ) , res . get ( j ) , 0.0001 )
? ? ? assertEquals ( LinearWeightingFunction . INSTANCE , getInstance ( ) )
assertEquals ( A , a )
assertArrayEquals ( expectedRaw , getL ( ) . getArray ( ) , 0.000000000000001 )
assertArrayEquals ( expectedRaw , getU ( ) . getArray ( ) , 0.000000000000001 )
assertEquals ( expectedValue , actualValue )
assertArrayEquals ( expectedRaw , getP ( ) . toArray ( ) )
assertEquals ( expectedRaw , actualRaw )
assertEquals ( expectedRaw , solve ( b ) )
isTrue ( ALGEBRA . equals ( lu . getP ( ) . multiply ( A ) , a ) )
assertArrayEquals ( expectedRaw , getQ ( ) . getArray ( ) , 0.0001 )
assertArrayEquals ( expectedRaw , getR ( ) . getArray ( ) , 0.0001 )
assertEquals ( expectedRaw , getQT ( ) . getArray ( ) )
assertEquals ( A , a )
assertNotNull ( result )
assert validIfTrue
assert ? ? ? testGetRank ( ) { isTrue ( < AssertPlaceHolder > ) ; }
assert validIfTrue
assertArrayEquals ( expectedRaw , getU ( ) . getArray ( ) , 0.0001 )
assertArrayEquals ( expectedRaw , getUT ( ) . getArray ( ) , 0.0001 )
assertArrayEquals ( expectedRaw , getS ( ) . getArray ( ) )
assertEquals ( expectedRaw , actualRaw , 0.000001 )
assertArrayEquals ( expectedRaw , getV ( ) . getArray ( ) , 0.0001 )
assertArrayEquals ( expectedRaw , getVT ( ) . toArray ( ) )
assertMatrixEquals ( m , DoubleMatrix . of ( 4 , 4 , 5 , 6 , 10 , 12 , 7 , 8 , 14 , 16 , 15 , 18 , 20 , 24 , 21 , 24 , 28 , 32 ) )
assertEquals ( E . get ( i ) * F . get ( j ) , res . get ( i , j ) )
assertEqualsMatrix ( aTa , aTaRef , delta )
assertEquals ( theta [ j ] , theta2 . get ( j ) , 0.0001 )
assertEquals ( functionParameters , inverseTransform ( inverseTransform ( functionParameters ) ) )
? ? ? assertThat ( result ) . isEqualTo ( expectedResult ) ; ? ? ?
assertEquals ( qComputed , dataSorted . get ( dataSorted . size ( ) - 1 ) , 0.0001 )
assertEquals ( expectedShortfallComputed , < expected value > , < tolerance >  )
assertEquals ( expectedShortfallComputed , < expected value > , < tolerance >  )
assert Math . abs ( x - apply ( x ) ) < eps
assert Math . abs ( y - ( 0.5 * ( 1 + x ) ) ) < eps
isTrue ( results . isValid ( ) )
assertEquals ( OG_VECTOR , unwrap ( commons ) . getData ( ) )
assertNotNull ( commons . apply ( i ) )
assertEquals ( 0 , values ( ) . count ( ) )
assertEquals ( 0.0 , ? ? ? values ( ) . sum ( ) , 0.0001 )
assertEquals ( 0 , values ( ) . count ( ) )
assertThat ( values ( ) . count ( ) ) . isEqualTo ( expectedCount )
assertTrue ( validIfTrue )
assertEquals ( ResultType . FAILURE , function . calculate ( md , measures ) . getType ( ) )
assertEquals ( QUOTE_KEY , config ( ) . getQuoteId ( CURRENCY_PAIR ) )
assertEquals ( QUOTE_KEY , config ( ) . getQuoteId ( CURRENCY_PAIR ) )
assertEquals ( FxRateConfig . of ( ratesMap ) , ? ? ? )
AssertPlaceHolder = "Assert.assertEquals(2, requirements.size());"
AssertPlaceHolder = "assertEquals(6, name.length());"
assertEquals ( config ( ) . getRate ( gbpUsd ) , function . apply ( gbpUsd ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( ? ? ? MethodSource ( "data_name" ) . of ( name ) , convention . of ( name ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) )
assertEquals ( BigMoney . zero ( currency ) , computed . getAmount ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) )
assertEquals ( BigMoney . zero ( currency ) , computed . getAmount ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) )
assertEquals ( 0 , computed . size ( ) )
computed . equals ( expected )
computed . getSensitivities ( ) . size ( ) == 3
assertEquals ( expected , cashFlows ( trade , ratesProvider ) )
// <AssertPlaceHolder>
assertEquals ( expectedCurrencyExposure , currencyExposure ( trade , marketData ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "Hello" , test . getMessage ( ) )
assertEquals ( 0.0 , zeroRate , 0.0001 )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_BEFORE ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER , USD ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_AFTER , SPREAD , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_BEFORE , 0d , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_VAL , 0d , CompoundedRateType . PERIODIC , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_VAL , USD , 0d , CompoundedRateType . PERIODIC , 1 ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( DoubleMatrix . of ( 0.12 , 0.15 ) , test . getSensitivities ( ) )
assertEquals ( CURVE2 , test . getCurve ( ) )
assertEquals ( 0.0 , zeroRate , 0.0001 )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_BEFORE ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER , USD ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_AFTER , SPREAD , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_BEFORE , 0d , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_VAL , 0d , CompoundedRateType . PERIODIC , 1 ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_VAL , USD , 0d , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , test . parameterSensitivity ( relativeYearFraction ) )
assertEquals ( expected , test . parameterSensitivity ( relativeYearFraction ) )
assertThat ( test . parameterSensitivity ( xValue ) ) . isEqualTo ( expected )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( expectedSensitivities , sens . getSensitivities ( ) )
assertEquals ( CURVE2 , test . getCurve ( ) )
assertEquals ( 0.0 , zeroRate , 0.0001 )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_BEFORE ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER , USD ) )
assertEquals ( expected , test . zeroRatePointSensitivityWithSpread ( DATE_BEFORE , 0d , CompoundedRateType . CONTINUOUS , 1 ) )
assertEquals ( expected , ? ? ? )
assertEquals ( expected , ? ? ? )
assertEquals ( DoubleMatrix . of ( 0.12 , 0.15 , 0.16 ) , sens . getSensitivities ( ) )
assertEquals ( CURVE2 , test . getCurve ( ) )
Note : Replace "<expectedValue>" with the expected value for the assertion .
assertEquals ( valuationDateTime , ? ? ? )
// <AssertPlaceHolder>
assertEquals ( expected , computed ) ;
assertEquals ( 0.12d , computed , 0.0001 )
assertEquals ( computed , expected )
assertEquals ( ceComputed . getCurrency ( ) , pv . getCurrency ( ) )
assertEquals ( pvCallLong . getAmount ( ) , pvCallShort . getAmount ( ) )
AssertPlaceHolder = "isTrue(psComputed.equalWithTolerance(psExpected, TOLERANCE));"
test . getSensitivities ( ) . equals ( base . getSensitivities ( ) )
test . getSensitivities ( )
sensiComputed . equals ( sensiExpected )
AssertPlaceHolder = "isTrue(sensiComputed.equalWithTolerance(sensiExpected, TOLERANCE));"
assertTrue ( paramSensiComputed . equalWithTolerance ( paramSensiExpected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( expected . equalWithTolerance ( computed , TOLERANCE ) )
assertEquals ( expected , computed )
assertEquals ( ceComputed . getCurrency ( ) , pv . getCurrency ( ) )
assertEquals ( ceComputed , pv )
pv . getAmount ( )
assertEquals ( StandardReferenceData . STANDARD , < AssertPlaceHolder >  )
assertNotNull ( getPeriodPricer ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
AssertPlaceHolder = "isTrue(expected.equalWithTolerance(computed1.combinedWith(computed2), TOLERANCE));"
AssertPlaceHolder = "isTrue(computed1.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed1 . equalWithTolerance ( expected , TOLERANCE ) ) ;
AssertPlaceHolder :
assertEquals ( expected , computed1 . combinedWith ( computed2 ) , TOLERANCE )
assertEquals ( expected , computed1 . plus ( computed2 ) )
AssertPlaceHolder :
assertEquals ( expected , computed1 . combinedWith ( computed2 ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) )
assertEquals ( expected , computed . getAmount ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) )
assertEquals ( expected , computed . getAmount ( ) )
assertThat ( computed . getAmount ( ) , is ( closeTo ( expected , 0.0001 ) ) )
assertThat ( computed . getAmount ( ) ) . isEqualTo ( expected )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , 0.0001 )
assertThat ( computed . getAmount ( ) ) . isEqualTo ( expectedAmount )
assertThat ( computed . getAmount ( ) ) . isEqualTo ( expectedAmount )
assertEquals ( expected1 , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected1 , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected1 , computed . getAmount ( ) * QUANTITY , TOLERANCE )
assertEquals ( expected1 , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
Explanation : The suggested  assertion is  using the ` assertEquals ` method to compare the ` expected ` and ` computed ` objects .
assertEquals ( computed , expected )
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
assertTrue ( expected . equalWithTolerance ( computed , TOLERANCE ) )
assertEquals ( expected , computed )
assertEquals ( expected , computed )
assertEquals ( expected , computed )
assertEquals ( pvFromCleanPrice . getAmount ( ) , pvFromCurves . getAmount ( ) )
assertEquals ( pvFromCleanPrice , pvFromCurves )
assertEquals ( pvFromCleanPrice . getAmount ( ) , pvFromCurves . getAmount ( ) )
assertEquals ( pvFromCleanPrice . getAmount ( ) , pvFromCurves . getAmount ( ) )
computed . isEqualTo ( expectedValueSensitivity , tolerance )
computed . isEqual ( expectedSensitivity )
computed . isEqualTo ( expected , tolerance )
assertEquals ( computed , pv . getAmount ( ) . doubleValue ( ) * df , TOLERANCE )
assertEquals ( computed , pv . getAmount ( ) . doubleValue ( ) * df , TOLERANCE )
assertEquals ( computed , pv . getAmount ( ) . doubleValue ( ) * df , TOLERANCE )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertEquals ( computed , expected )
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
assertEquals ( computed , expected , TOLERANCE )
assertThat ( pvCleanPrice . getAmount ( ) ) . isEqualTo ( pvCurves . getAmount ( ) )
AssertPlaceHolder = "isTrue(computedTrade.equalWithTolerance(expectedTrade, TOLERANCE));"
AssertPlaceHolder = "isTrue(computedTrade.equalWithTolerance(expectedTrade, TOLERANCE));"
AssertPlaceHolder = "isTrue(computedTrade.equalWithTolerance(expectedTrade, TOLERANCE));"
assertTrue ( computedTrade . equalWithTolerance ( expectedTrade , TOLERANCE ) )
assertTrue ( validIfTrue )
AssertPlaceHolder = "isTrue(computedTrade.equalWithTolerance(expectedTrade, TOLERANCE));"
assertEquals ( ceComputed . getCurrency ( ) , pv . getCurrency ( ) )
assertEquals ( ceComputed , pv )
ccComputed . isZero ( )
ccComputed , equalTo  ( expectedValue )
assertEquals ( zero ( Currency . USD ) , ccComputed . getAmount ( ) )
assertThat ( ccComputed ) . isEqualTo ( expected , tolerance )
ccComputed . isEqualTo ( expected , tolerance )
assertThat ( ccComputed ) . isEqualTo ( expected , tolerance )
assertEquals ( 0 , computed . size ( ) )
assertEquals ( psExpected , psComputed )
test . getAmounts ( ) . equals ( CurrencyAmountArray . of ( CAPLET_DOUBLE_MAP ) )
test . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
test . getAmounts ( ) . equals ( CurrencyAmountArray . of ( CAPLET_CURRENCY_AMOUNT_MAP ) )
test . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
test . getSensitivities ( )
test . getSensitivities ( )
assertEquals ( BigMoney . zero ( Currency . USD ) , computed . getAmount ( ) )
AssertPlaceHolder = "assertTrue(computed.equalWithTolerance(expected, TOLERANCE));"
AssertPlaceHolder = "assertTrue(computed.equalWithTolerance(expected, TOLERANCE));"
computed . isEqualTo ( expected , tolerance )
assertEquals ( BigMoney . zero ( Currency . USD ) , computed . getAmount ( ) )
assertEquals ( expected , computed . getAmount ( ) )
assertThat ( computed ) . isEqualTo ( expectedValue )
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
AssertPlaceHolder = "assertTrue(computed.equalWithTolerance(expected, TOLERANCE));"
computed . isEqual ( expected , tolerance )
computed . equals ( expected )
assertEquals ( BigMoney . zero ( Currency . USD ) , computed )
assertEquals ( expected , computed . getAmount ( ) )
assertThat ( computed . getAmount ( ) , is ( equalTo ( decimal . setScale ( digits ) ) ) )
assertNotNull ( swapPricer )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( 6 , name . length ( ) )
test . getSensitivities ( ) . equals ( sensitivities )
assertEquals ( expected , computed )
assertEquals ( 0.0 , zeroRate , 0.000001 )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER , GBP ) )
assertEquals ( expected , ? ? ? )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertThat ( sens . getSensitivities ( ) ) . isEqualTo ( sensitivities )
assertEquals ( 0.0 , zeroRate , 0.0001 )
AssertPlaceHolder = "assertEquals(expected, test.zeroRatePointSensitivity(DATE_AFTER));"
expected . equals ( test . zeroRatePointSensitivity ( DATE_AFTER , GBP ) )
assertEquals ( expected , test . zeroRatePointSensitivity ( DATE_AFTER ) )
expected . equals ( test . zeroRatePointSensitivity ( DATE_AFTER , GBP ) )
assertEquals ( expected , sens . parameterSensitivity ( DATE_AFTER ) )
assertEquals ( 0.0 , test . parameterSensitivity ( 0.0 ) . get ( 0 ) , TOLERANCE )
assertEquals ( expectedValue , actualValue )
assertEquals ( "Expected string representation" , "EXPECTED_VALUE" , focalMethod ( ) . toString ( ) )
assertTrue ( sensiComputed . equalWithTolerance ( sensiExpected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(sensiComputedNoFix.equalWithTolerance(sensiComputedFix, TOLERANCE));"
AssertPlaceHolder = "isTrue(ptsTrade.equalWithTolerance(ptsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(ptsTrade.equals(ptsProduct));"
AssertPlaceHolder = "isTrue(ptsTrade.equalWithTolerance(ptsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(sensiComputed.equalWithTolerance(sensiExpected, TOLERANCE));"
assertTrue ( sensiComputed . equalWithTolerance ( sensiExpected , TOLERANCE ) )
assertTrue ( computedSpread . equals ( computedRate ) ) ;
assertEquals ( expectedCurrencyExposure , currencyExposure ( trade , marketData ) )
assertEquals ( 0 , prov . getCurrentCash ( ) . getAmount ( EUR ) . getAmount ( ) . doubleValue ( ) )
assertEquals ( 0 , currentCash ( trade , marketData ) . getAmount ( ) . size ( ) )
assertEquals ( expectedCurrentCash , currentCash ( trade , marketData ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) , TOLERANCE )
assertEquals ( expected , computed . getAmount ( ) . setScale ( digits ) )
assertEquals ( pvExpected , pvComputed )
assertEquals ( pvExpected , pvComputed )
assertThat ( computed . getAmount ( ) ) . isEqualTo ( getAmount ( ) )
assertEquals ( new BigDecimal ( "0.0" ) , test . getAmount ( ) )
assertThat ( pv . getAmount ( ) , is ( equalTo ( decimal . setScale ( digits ) ) ) )
assertEquals ( expected , computed , eps )
assertEquals ( expected , computed , eps )
assertEquals ( productPricer , ? ? ? )
assertEquals ( expectedCurrencyExposure , currencyExposure ( trade , marketData ) )
assertEquals ( 0 , currentCash . size ( ) )
assertThat ( computed . getAmount ( ) ) . isEqualTo ( getAmount ( ) )
assertThat ( computedFwd . getAmount ( ) ) . isEqualTo ( getAmount ( ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertEquals ( expected , actual )
assertThat ( ceConverted . getAmount ( ) , is ( equalTo ( pv . getAmount ( ) ) ) )
assertThat ( fwdNDF ) . isEqualTo ( fwdFX )
assertTrue ( sensiNDF . equalWithTolerance ( sensiFX , TOLERANCE ) ) ;
assertEquals ( CurrencyAmount . zero ( getSettlementCurrency ( ) ) , computed )
assertEquals ( settlementCurrencyNotional . getCurrency ( ) , computed . getCurrency ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( PointSensitivityBuilder . none ( ) , ? ? ? presentValueSensitivity ( payment , provider ) ? ? ? )
assertEquals ( expectedCurrencyExposure , currencyExposure ( trade , marketData ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( forwardFxRate ( trade , ratesProvider ) )
assertEquals ( expected , computed )
assertEquals ( pv . getAmount ( USD ) . getAmount ( ) , NOMINAL_USD , TOLERANCE )
assertEquals ( expectedUsd , computed , TOLERANCE )
assertEquals ( 0 , computed . getSensitivities ( ) . size ( ) )
assertEquals ( MultiCurrencyAmount . zero ( Currency . USD ) , computed )
? ? ? assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
forwardFxRatePointSensitivity . ratePointSensitivity ( fx . getReceiveCurrencyAmount ( ) . getCurrency ( ) , fx . getPaymentDate ( ) )
assertEquals ( expected , actual , tolerance )
assertEquals ( expectedValue , actualValue )
assertEquals ( pv , MultiCurrencyAmount . of ( CurrencyAmount . of ( KRW , NOMINAL_KRW ) , CurrencyAmount . of ( USD , NOMINAL_USD ) ) , TOLERANCE )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expectedUsd.combinedWith(expectedKrw), TOLERANCE));"
assertEquals ( 0 , computed . getSensitivities ( ) . size ( ) )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
assertTrue ( validIfTrue )
assertEquals ( MultiCurrencyAmount . zero ( Currency . USD ) , computed )
assertEquals ( expectedValue , actualValue )
test . getSensitivities ( ) . equals ( expectedSensitivities )
assertEquals ( expected , test . toFxForwardSensitivity ( ) )
test . getSensitivities ( ) . equals ( base . getSensitivities ( ) )
assertTrue ( computed . equalWithTolerance ( expected , TOLERANCE ) )
assertEquals ( 0 , point . build ( ) . size ( ) )
assertEquals ( expected , computed )
assertThat ( pvSensiTrade ) . isEqualTo ( pvSensiProduct , Offset . < Double > tolerance ( 0.0001 ) )
You can  choose the  appropriate assertion  based on  your specific  testing requirements .
assertEquals ( expectedCurrentCash , currentCash )
assertEquals ( expectedPointSensitivities , pointSensitivities )
assertEquals ( 0 , point . build ( ) . size ( ) )
assertEquals ( 0.0 , point . build ( ) . getSensitivity ( NAME_VOLATILITY ) . getSensitivity ( ) , TOLERANCE )
assertEquals ( pvSensiTrade , pvSensiProduct )
test . getSensitivities ( ) . equals ( base . getSensitivities ( ) )
AssertPlaceHolder = "isTrue(expected.equalWithTolerance(computed, TOLERANCE));"
assertThat ( pv . getAmount ( ) . doubleValue ( ) ) . isEqualTo ( df * forward )
pvBuy . getAmount ( ) . subtract ( pvSell . getAmount ( ) ) . abs ( ) . compareTo ( TOLERANCE ) <= 0
assertEquals ( pv . getAmount ( ) , BigDecimal . valueOf ( factor * forward ) )
assertEquals ( expected , pv ) ;
AssertPlaceHolder = "isTrue(ps.equalWithTolerance(expectedPvSensi, TOLERANCE));"
assertEquals ( expected , computed . toArray ( ) , 1e-6 )
assert volga == vomma . abs ( )
assertEquals ( pvCfe . getAmount ( ) , pvSwap . getAmount ( ) . getAmount ( ) )
assertEquals ( expectedValue , calculated )
assertEquals ( expected , calculated )
assertEquals ( 0 , computed . getSensitivity ( ) . size ( ) )
rateSensi . multipliedBy ( period . getNotional ( ) * period . getRealCoupon ( ) )
assertEquals ( expected , calculated )
assertEquals ( expected , calculated )
assertEquals ( expected , test . presentValue ( SwapDummyData . NOTIONAL_EXCHANGE_REC_GBP , MOCK_PROV ) )
assertEquals ( expected , test . presentValue ( SwapDummyData . FX_RESET_NOTIONAL_EXCHANGE_REC_USD , MOCK_PROV ) , 0.0001 )
assertEquals ( expected , test . forecastValue ( SwapDummyData . NOTIONAL_EXCHANGE_REC_GBP , MOCK_PROV ) , 0.0001 )
assertEquals ( expected , test . forecastValue ( SwapDummyData . FX_RESET_NOTIONAL_EXCHANGE_REC_USD , MOCK_PROV ) . getAmount ( ) , 0.0001 )
assertEquals ( expected , test . currencyExposure ( SwapDummyData . NOTIONAL_EXCHANGE_REC_GBP , MOCK_PROV ) )
assertEquals ( expected , test . currencyExposure ( SwapDummyData . FX_RESET_NOTIONAL_EXCHANGE_REC_USD , MOCK_PROV ) )
assertEquals ( expected , test . currentCash ( SwapDummyData . NOTIONAL_EXCHANGE_REC_GBP , MOCK_PROV ) . getAmount ( ) )
assertEquals ( expected , test . currentCash ( SwapDummyData . FX_RESET_NOTIONAL_EXCHANGE_REC_USD , MOCK_PROV ) )
assertEquals ( expected , test . presentValue ( SwapDummyData . FIXED_RATE_PAYMENT_PERIOD_REC_GBP , MOCK_PROV ) )
assertEquals ( expected , test . forecastValue ( SwapDummyData . FIXED_RATE_PAYMENT_PERIOD_REC_GBP , MOCK_PROV ) . getAmount ( ) , 0.0001 )
assertEquals ( expected , test . currencyExposure ( SwapDummyData . FIXED_RATE_PAYMENT_PERIOD_REC_GBP , MOCK_PROV ) )
assertEquals ( expected , test . currentCash ( SwapDummyData . FIXED_RATE_PAYMENT_PERIOD_REC_GBP , MOCK_PROV ) . getAmount ( ) )
assertArrayEquals ( expected . toArray ( ) , computed . toArray ( ) , 0.0001 )
assertEquals ( 2.0e-2 , tol , 0.0 )
assertNull ( getFunction ( ) )
AssertPlaceHolder = "isTrue(sensiExpected.equalWithTolerance(sensiComputed, TOLERANCE));"
assertEquals ( sensiExpected , sensiComputed )
assertEquals ( presentValueExpected , presentValueComputed . getAmount ( ) . doubleValue ( ) , 0.0001 )
assertEquals ( 0.995 , referencePrice , 0.0001 )
AssertPlaceHolder = "isTrue(sensiPresentValueExpected.equals(sensiPresentValueComputed));"
assertTrue ( sensiExpected . equalWithTolerance ( sensiComputed , TOLERANCE ) )
AssertPlaceHolder = "isTrue(sensiComputed.equals(priceSensitivity));"
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
assertEquals ( presentValueExpected , presentValueComputed . getAmount ( ) . doubleValue ( ) , 0.0001 )
assertEquals ( 0.995 , referencePrice , 0.0001 )
assertEquals ( expected , computed )
AssertPlaceHolder = "isTrue(sensiExpected.equalWithTolerance(sensiComputed, TOLERANCE));"
sensiExpected . equals ( sensiComputed )
AssertPlaceHolder = "isTrue(computed.equalWithTolerance(expected, TOLERANCE));"
pv . getAmount ( ) . setScale ( digits ) . compareTo ( decimal . setScale ( digits ) ) == 0
assertEquals ( expected , computed )
assertEquals ( expected , computed )
pv . getAmount ( ) . setScale ( digits , RoundingMode . HALF_UP )
assertEquals ( test . getSensitivities ( ) , sensitivities )
assertEquals ( pvExpected , pvComputed . getAmount ( ) . doubleValue ( ) , 0.0001 )
assertThat ( indexComputed ) . isEqualTo ( indexExpected , Offset . offset ( tolerance ) )
test . getSensitivities ( )
assertEquals ( strikesAvailable [ i ] , smile . getFirst ( ) )
assertEquals ( expected , computed . getAmount ( ) . doubleValue ( ) )
assertEquals ( zero ( Currency . USD ) , computed . getAmount ( ) )
computed . equals ( expected )
assertEquals ( expected , cashFlows ( trade , ratesProvider ) )
// <AssertPlaceHolder>
assertEquals ( expectedCurrencyExposure , currencyExposure ( trade , marketData ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
test . rate ( rate )
test . rate ( rate )
assertEquals ( expected , test . rate ( rate ) , 0.0001 )
assertEquals ( expected , test . rateIgnoringFixingsPointSensitivity ( GBP_LIBOR_3M_OBS ) )
assertEquals ( expected , test . ratePointSensitivity ( GBP_LIBOR_3M_AFTER ) )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( DoubleMatrix . of ( 0.12 , 0.15 ) , test . getSensitivities ( ) )
test . rate ( rate )
test . rate ( rate )
assertEquals ( expected , test . rate ( rate ) , 0.0001 )
assertEquals ( expected , test . rate ( rate ) , 0.0001 )
assertEquals ( expected , test . rateIgnoringFixingsPointSensitivity ( observation ) )
assertEquals ( expected , test . ratePointSensitivity ( observation ) )
assertEquals ( expected , test . ratePointSensitivity ( observation ) )
assertEquals ( expected , test . periodRatePointSensitivity ( EUR_EONIA_AFTER , DATE_AFTER_END , EUR , 1d ) )
assertEquals ( expected , actual )
assertEquals ( DoubleMatrix . of ( 0.12 , 0.15 ) , test . getSensitivities ( ) )
assertEquals ( rate , test . rate )
assertEquals ( rate , test . rate )
assertEquals ( rate , test . rate )
assertEquals ( rate , test . rate )
assertEquals ( rate , test . rate ( ) )
test . rate ( rate )
assertEquals ( PointSensitivityBuilder . none ( ) , test . ratePointSensitivity ( observation ) )
assertEquals ( 0 , test . ratePointSensitivity ( observation ) . build ( ) . size ( ) )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( expectedSensitivity , actualSensitivity )
test . rate ( rate )
test . rate ( rate )
test . rate ( rate )
assertEquals ( rate , test . rate )
test . rate ( rate )
test . rate ( rate )
assertEquals ( PointSensitivityBuilder . none ( ) , test . ratePointSensitivity ( observation ) )
assertEquals ( 0 , test . ratePointSensitivity ( observation ) . build ( ) . size ( ) )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( expectedSensitivity , actualSensitivity )
assertEquals ( expected , actual )
assertEquals ( expectedSensitivity , test . createParameterSensitivity ( currency , sensitivities ) )
assertEquals ( 1 , test . size ( ) )
AssertPlaceHolder = "assertNotNull(test.discountFactors(GBP));"
assertEquals ( expectedFxRate , test . fxRate ( CurrencyPair . of ( "EUR" , "USD" ) ) )
assertEquals ( historicCurve ( index ) , test . iborIndexRates ( index ) )
assertEquals ( inactiveIndex , test . iborIndexRates ( inactiveIndex ) . getIndex ( ) )
assertEquals ( test . overnightIndexRates ( index ) , OvernightIndexRates . of ( index , getValuationDate ( ) , marketData . getValue ( curveId ) , timeSeries ( index ) ) )
assertEquals ( inactiveIndex , test . overnightIndexRates ( inactiveIndex ) . getIndex ( ) )
assertEquals ( historicCurve ( index ) , test . priceIndexValues ( index ) )
assertEquals ( inactiveIndex , test . priceIndexValues ( inactiveIndex ) )
test . getSensitivities ( ) . equals ( expectedSensitivities )
test . getSensitivities ( )
assertEquals ( mockProv . getFxRate ( CurrencyPair . EUR_USD ) , expectedFxRate )
assertEquals ( indices , mockProv . getIndices ( ) )
test . rate ( rate )
test . rate ( rate )
assertEquals ( expected , test . rate ( time ) , 0.0001 )
assertEquals ( expected , actual )
assertEquals ( expected , test . ratePointSensitivity ( observation ) )
assertEquals ( DoubleArray . of ( 0.0 ) , test . parameterSensitivity ( 0.0 ) )
assertEquals ( expectedSensitivities , actualSensitivities )
assertEquals ( 0 , test . valuePointSensitivity ( obs ) . build ( ) . size ( ) )
assertEquals ( expected , test . valuePointSensitivity ( obs ) )
assertEquals ( expected , actual )
assertEquals ( DoubleMatrix . of ( 4 , 1 , 0.12 , 0.15 , 0.16 , 0.17 ) , sens . getSensitivities ( ) )
assertEquals ( CURVE2_NOFIX , test . getCurve ( ) )
assertNotNull ( calculationParameter )
assertEquals ( expectedValue , actualValue )
assertTrue ( ptsComputed . build ( ) . equals ( ptsExpected . build ( ) ) )
AssertPlaceHolder = "isTrue(ptsComputed.build().equals(ptsExpected.build()));"
assertEquals ( expected , test . presentValue ( trade , lookup , marketData ) )
assertEquals ( expected , test . presentValue ( trade , lookup , marketData ) )
assertEquals ( expected , test . presentValue ( trade , marketData ) )
assertEquals ( expected , test . presentValue ( trade , marketData ) )
assertEquals ( expected , test . forecastValue ( payment , provider ) )
assertEquals ( expected , test . forecastValue ( payment , provider ) )
assertEquals ( 1000d , test . accruedInterest ( IBOR_RATE_PAYMENT_PERIOD_REC_GBP , prov ) )
assertEquals ( 1000d , test . accruedInterest ( trade , marketData ) . getAmount ( i ) . getAmount ( ) )
AssertPlaceHolder = "isTrue(psAd.equalWithTolerance(psFd, TOLERANCE));"
AssertPlaceHolder = "isTrue(psAd.equalWithTolerance(psFd, TOLERANCE));"
assertTrue ( pvbpsAd . equalWithTolerance ( pvbpsFd , TOLERANCE ) )
assertThat ( computed ) . isEqualTo ( zero ( Currency . GBP ) )
assertNotNull ( pricerLeg )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertTrue ( prAd . equalWithTolerance ( prFd , TOLERANCE ) )
AssertPlaceHolder = "isTrue(parRateSensiComputed.equalWithTolerance(parRateSensiExpected, TOLERANCE));"
assertTrue ( validIfTrue )
assertTrue ( mqPsComputed . equalWithTolerance ( mqPsExpected , TOLERANCE ) )
assertTrue ( psComputed . equalWithTolerance ( psExpected , TOLERANCE ) )
AssertPlaceHolder = "isTrue(psComputed.equalWithTolerance(psExpected, TOLERANCE));"
assertEquals ( pv0 . getAmount ( ) , getAmount ( ) . doubleValue ( ) , 0.0001 )
assertThat ( pv0 . getAmount ( ) ) . isEqualTo ( < expected value > )
assertThat ( pv0 . getAmount ( ) , is ( closeTo ( expectedAmount , tolerance ) ) )
assertThat ( pv0 . getAmount ( ) , is ( closeTo ( expectedAmount , tolerance ) ) )
assertEquals ( prAd , prFd )
assertTrue ( prAd . equalWithTolerance ( prFd , TOLERANCE ) )
assertTrue ( validIfTrue )
AssertPlaceHolder = "isTrue(parSpreadSensiComputed.equalWithTolerance(parRateSensiExpected, TOLERANCE));"
assertNotEquals ( expectedConvention , getConvention ( ) )
assertEquals ( pvLong , pvShort . negated ( ) )
assertEquals ( pvLongPay . plus ( pvShortRec ) , pvSwapPay . getAmount ( ) , TOLERANCE )
pv . getAmount ( ) . setScale ( digits , RoundingMode . HALF_UP )
assertEquals ( pvDeltaLong . getAmount ( ) . doubleValue ( ) , pvDeltaShort . getAmount ( ) . doubleValue ( ) , 0.0001 )
assertEquals ( pvDeltaLongPay . plus ( pvDeltaShortRec ) . getAmount ( ) , pvbp , TOLERANCE )
pvDelta . setScale ( digits ) . compareTo ( decimal . setScale ( digits ) ) == 0
assertEquals ( pvGammaLong , pvGammaShort . negated ( ) , TOLERANCE )
assertEquals ( pvGammaLongPay , pvGammaShortRec )
pvGamma . setScale ( 2 , RoundingMode . HALF_UP ) . compareTo ( new BigDecimal ( "0.00" ) ) == 0
assertEquals ( pvThetaLong , pvThetaShort . negated ( ) , TOLERANCE )
assertEquals ( pvThetaLongPay , pvThetaShortRec )
pvTheta . setScale ( digits , RoundingMode . HALF_UP ) . compareTo ( pvTheta ) == 0
ce . getAmount ( ) . isEqual ( pv . getAmount ( ) )
assertTrue ( pvpsAd . equalWithTolerance ( pvpsFd , TOLERANCE ) )
assertTrue ( pvpsLong . equalWithTolerance ( pvpsShort , TOLERANCE ) ) ;
pvpts . isEqual ( expectedSensitivity )
assertEquals ( pvTrade , pvProduct . plus ( pvPremium ) )
assertEquals ( pvTrade , pvProduct )
ce . getAmount ( ) . isEqualTo ( pv . getAmount ( ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
assertTrue ( pvpsTrade . equalWithTolerance ( pvpsProduct , TOLERANCE ) )
vegaTrade . getSensitivity ( ) . equal ( vegaProduct . getSensitivity ( ) )
assertEquals ( pvTrade , pvProduct . plus ( pvPremium ) )
assertEquals ( pvTrade , pvProduct )
ce . getAmount ( ) . isEqual ( pv . getAmount ( ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
isTrue ( pvpsTrade . equalWithTolerance ( pvpsProduct , TOLERANCE ) ) ;
vegaTrade . getSensitivity ( ) . plus ( vegaProduct . getSensitivity ( ) ) . isEqual ( sensitivities )
pv . getAmount ( ) . setScale ( digits ) . compareTo ( decimal ) == 0
assertEquals ( expected , computed . toArray ( ) , TOLERANCE )
assertEquals ( pvTrade . plus ( pvPremium ) , pvProduct )
assertEquals ( pvTrade . plus ( pvPremium ) , pvProduct )
pvTrade . isEqual ( pvProduct )
ce . getAmount ( ) . equals ( pv . getAmount ( ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(hwTrade.equalWithTolerance(hwProduct, TOLERANCE));"
assertEquals ( pvLong , pvShort . negated ( ) )
assertEquals ( pvLongPay . plus ( pvShortRec ) , pvSwapPay . getAmount ( currency ) , TOLERANCE )
pv . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
assertEquals ( pvDeltaLong . getAmount ( ) . subtract ( pvDeltaShort . getAmount ( ) ) , BigDecimal . ZERO )
assertEquals ( pvDeltaLongPay . plus ( pvDeltaShortRec ) . getAmount ( ) , pvbp , delta )
pvDelta . setScale ( digits ) . compareTo ( decimal . setScale ( digits ) ) == 0
assertEquals ( pvGammaLong , pvGammaShort . negated ( ) , TOLERANCE )
assertEquals ( pvGammaLongPay , pvGammaShortRec )
pvGamma . setScale ( 2 , RoundingMode . HALF_UP ) . compareTo ( new BigDecimal ( "0.00" ) ) == 0
assertEquals ( pvThetaLong , pvThetaShort . negated ( ) )
assertEquals ( pvThetaLongPay , pvThetaShortRec )
pvTheta . setScale ( 2 , RoundingMode . HALF_UP ) . compareTo ( new BigDecimal ( "0.00" ) ) == 0
ce . getAmount ( ) . isEqual ( pv . getAmount ( ) )
assertTrue ( pvpsAd . equalWithTolerance ( pvpsFd , TOLERANCE ) )
isTrue ( pvpsLong . equalWithTolerance ( pvpsShort , TOLERANCE ) ) ;
pvpts . isZero ( )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
ccTrade . getAmount ( ) . setScale ( digits ) . equals ( decimal . setScale ( digits ) )
vegaTrade . compareKey ( vegaProduct , tolerance )
assertEquals ( pvTrade , pvProduct . plus ( pvPremium ) )
assertEquals ( pvTrade , pvProduct )
pv . getCurrency ( ) . equals ( ce . getCurrency ( ) )
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder :
assertTrue ( pvpsTrade . equalWithTolerance ( pvpsProduct , TOLERANCE ) ) ;
vegaTrade . getSensitivities ( ) . equals ( vegaProduct . getSensitivities ( ) )
vegaRec . parameterSensitivity ( xValue ) . get ( 0 )
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
AssertPlaceHolder = "isTrue(pvpsTrade.equalWithTolerance(pvpsProduct, TOLERANCE));"
assertEquals ( deltaRec , deltaPay . negated ( ) )
vegaRec . getSensitivity ( ) . get ( 0 ) . getSensitivity ( )
assertEquals ( expectedPv , pvComputed . getAmount ( ) )
test . getSensitivities ( )
test . getSensitivities ( )
expected . equals ( sut . summarize ( ) )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( "TradeList{trades=[test]}" , test . toString ( ) )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , position )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , base . withInfo ( info ) )
assertEquals ( expected , sut_yield . summarize ( ) )
assertEquals ( expected , sut_price ( ) . resolve ( REF_DATA ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( name . length ( ) , 6 )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , ? ? ? )
assertEquals ( expected , ? ? ? sut ( ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , < AssertPlaceHolder >  )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , sut ( ) )
assertEquals ( expected , "<AssertPlaceHolder>" )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , ? ? ? sut ( ) )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , ? ? ? )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( ? ? ? MethodSource ( "data_name" ) . of ( name ) , MarkitRedCode . of ( name ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( ? ? ? MethodSource ( "data_name" ) . of ( name ) , MarkitRedCode . of ( name ) )
assertEquals ( name , convention . getName ( ) )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , ? ? ? sut ( ) )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , ? ? ? sut ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( ? ? ? MethodSource ( "data_name" ) . of ( name ) , MarkitRedCode . of ( name ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , convention . getName ( ) )
assertEquals ( ImmutableSet . of ( ) , builder . build ( ) )
ResolvedFixedCouponBondSettlement expectedSettlement = ? ? ? getSettlement ( )
test . getExpiryDate ( )
assertEquals ( base . getTradeDate ( ) , test . getTradeDate ( ) )
assertEquals ( base . getTradeDate ( ) , test . getTradeDate ( ) )
ResolvedFixedCouponBondSettlement expectedSettlement = ? ? ? getSettlement ( )
ResolvedFixedCouponBondSettlement expectedSettlement = ? ? ? getSettlement ( )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( expected , actual )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
buf . append ( "trades" ) . append ( '=' ) . append ( JodaBeanUtils . toString ( trades ) )
assertEquals ( convention , MarkitRedCode . of ( name ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( date , AdjustablePayment . of ( currency , amount , date ) . getDate ( ) )
assertEquals ( LocalDate . now ( ) . plusMonths ( 1 ) , AdjustablePayment . of ( currency , amount , date ) . getAdjustableDate ( ) . getDate ( ) )
assertEquals ( expected , summary ( position , ProductType . SECURITY , description , GBP ) )
assertEquals ( expected , summary ( trade . getInfo ( ) . getId ( ) . orElse ( null ) , ProductType . FRA , description , GBP ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( ? ? ? MethodSource ( "data_name" ) . of ( name ) , convention )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( map . get ( name ) , CdsConvention . of ( name ) )
assertEquals ( currency , getCurrency ( ) )
assertEquals ( convention . getPaymentFrequency ( ) , getPaymentFrequency ( ) )
assertEquals ( expectedDayCount , convention . getDayCount ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , IborFixingDepositConvention . of ( name ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( map . get ( name ) , TermDepositConvention . of ( name ) )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , trade . summarize ( ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( "TradeList{trades=[test]}" , test . toString ( ) )
assertEquals ( refData , ImmutableReferenceData . of ( SECURITY . getSecurityId ( ) , resolvedSecurity ) )
assertEquals ( refData , sut . resolveTarget ( refData ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( code , getCode ( ) )
assertEquals ( convention , parseCode ( code ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( name . length ( ) , 6 )
assertEquals ( code , getCode ( ) )
assertThat ( parseCode ( code ) ) . isEqualTo ( expectedEtdOptionType )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( map . get ( name ) , FraConvention . of ( name ) )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( new CurrencyPair ( test . getCounter ( ) , test . getBase ( ) ) , sut . inverse ( ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertNotNull ( pair )
assertEquals ( expected , base . resolve ( REF_DATA ) )
expected . equals ( base . resolve ( REF_DATA ) )
assertEquals ( expected , base . resolve ( REF_DATA ) )
assertEquals ( expected , base . resolve ( REF_DATA ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , < AssertPlaceHolder >  )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , tes . summarize ( ) )
assertEquals ( expected , sut ( ) )
assertEquals ( Currency . GBP , test . getCurrency ( ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , sut . summarize ( ) )
assertEquals ( expected , < AssertPlaceHolder >  )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , base . resolve ( REF_DATA ) )
assertEquals ( expected , base . resolve ( refData ) )
assertEquals ( Currency . GBP , test . getCurrency ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , IborFutureContractSpec . of ( name ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , IborFutureConvention . of ( name ) )
assertEquals ( expected , base . calculateReferenceDateFromTradeDate ( date , refData ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , OvernightFutureContractSpec . of ( name ) )
assertEquals ( expected , base . calculateReferenceDateFromTradeDate ( date , refData ) )
assertEquals ( expected , base . calculateLastFixingDateFromTradeDate ( date , refData ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , tradeList . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expectedIndices , builder . build ( ) )
assertEquals ( 0.05 , test . getRate ( ) . getValue ( ) )
assertEquals ( 0.05 , test . getRate ( ) )
assertEquals ( ImmutableSet . of ( FIXINGS ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( GBP_LIBOR_1M , GBP_LIBOR_3M ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( GBP_LIBOR_3M ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( GB_HICP , START_INDEX , END_MONTH_FIRST , WEIGHT ) , builder . build ( ) )
test . getIndex ( ) . equals ( index )
assertEquals ( ImmutableSet . of ( GB_HICP , START_INDEX , END_MONTH ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( GB_HICP ) , builder . build ( ) )
test . getIndex ( ) . equals ( index )
assertEquals ( ImmutableSet . of ( GB_HICP ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( USD_FED_FUND ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( USD_FED_FUND ) , builder . build ( ) . getIndices ( ) )
assertEquals ( new DoubleArray ( new double [ ] { value1 , value2 , value3 , value4 , value5 } ) , test . observeOn ( ) )
assertEquals ( expectedIndices , builder . build ( ) )
assertEquals ( ImmutableSet . of ( USD_FED_FUND ) , builder . build ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , exception . getMessage ( ) )
assertEquals ( "RED Code must be exactly 6 or 9 characters" , e . getMessage ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( ImmutableSet . of ( Index ) , builder . build ( ) )
assertEquals ( test , createRateComputation ( refData ) )
AssertPlaceHolder = "RateComputation actual = createRateComputation(refData); assertEquals(expected, actual);"
assertEquals ( test . createRateComputation ( refData ) , expectedRateComputation )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( 1 , builder . build ( ) . size ( ) )
assertEquals ( 2 , builder . build ( ) . size ( ) )
assertEquals ( 2 , builder . build ( ) . size ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 6 , name . length ( ) )
RateComputation expected = IborRateComputation . of ( defaultIndex , fixingDate , refData )
assertEquals ( KnownAmountRateComputation . of ( GBP_P1000 ) , test . createRateComputation ( fixingDate , defaultIndex , refData ) )
assertEquals ( 1 , builder . build ( ) . size ( ) )
assertEquals ( ImmutableSet . of ( ) , builder . build ( ) )
assertEquals ( 1 , builder . build ( ) . size ( ) )
assertThat ( test . getAmount ( ) , equalTo ( expectedAmount ) )
assertEquals ( ImmutableSet . of ( Index . GBP_P1000 ) , builder . build ( ) )
assertEquals ( ImmutableSet . of ( ) , builder . build ( ) )
buf . append ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "TradeList{trades=[trade1, trade2]}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( ImmutableSet . of ( GBP_SONIA ) , builder . build ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( name . length ( ) , 6 )
assertEquals ( P2M , test . getPaymentFrequency ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( ImmutableSet . of ( ) , builder . build ( ) )
assertEquals ( 1 , builder . build ( ) . size ( ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expected , test . resolve ( REF_DATA ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( expected , test . resolve ( refData ) )
assertEquals ( ImmutableSet . of ( IBOR ) , builder . build ( ) )
buf . append ( "trades" ) . append ( '=' ) . append ( JodaBeanUtils . toString ( trades ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( "GBP_FIXED_1Y_LIBOR_3M" , test . summaryDescription ( ) )
assertEquals ( "GBP-FIXED-1Y-SONIA-OIS" , test . summaryDescription ( ) )
assertEquals ( "GBP-FIXED-ZC-GB-RPI-2Y-BUY-1_500_000-0.015" , test . summaryDescription ( ) )
assertEquals ( "USD-LIBOR-3M-LIBOR-6M-2Y-BUY-2_500_000-0.007-20180212" , test . summaryDescription ( ) )
assertEquals ( "GBP20180212GBP20200212P3M145000P3M" , test . summaryDescription ( ) )
assertEquals ( "GBP-PAY-145000-2018-02-12-2020-02-12-P3M-0" , test . summaryDescription ( ) )
test . isEqualTo ( expected , tolerance )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , FixedIborSwapConvention . of ( name ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertEquals ( frequency , getAccrualFrequency ( ) )
assertEquals ( dayCount , convention . getFixedLeg ( ) . getDayCount ( ) )
assertNotNull ( convention . getFloatingLeg ( ) )
assertEquals ( dayConvention , convention . getAccrualBusinessDayAdjustment ( ) . getConvention ( ) )
assertEquals ( name , convention . getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , FixedInflationSwapConvention . of ( name ) )
assertNotNull ( floatLeg )
assertEquals ( name , convention . getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) , "RED Code must be exactly 6 or 9 characters" )
assertEquals ( convention , FixedOvernightSwapConvention . of ( name ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertEquals ( frequency , convention . getAccrualFrequency ( ) )
assertNotNull ( convention . getFixedLeg ( ) )
assertEquals ( dayCount , convention . getFixedLeg ( ) . getDayCount ( ) )
assertNotNull ( convention . getFloatingLeg ( ) )
assertEquals ( dayConvention , convention . getAccrualBusinessDayAdjustment ( ) . getConvention ( ) )
assertEquals ( convention , FixedOvernightSwapConventions . GBP_FIXED_TERM_SONIA_OIS )
assertEquals ( name , convention . getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , IborIborSwapConvention . of ( name ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
getFlatLeg ( ) . equals ( convention . getLegs ( ) . get ( 0 ) )
assertEquals ( convention . getSpreadLeg ( ) , ? ? ? )
assertNotNull ( convention )
buf . append ( "trades" ) . append ( '=' ) . append ( JodaBeanUtils . toString ( trades ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , map . get ( name ) )
assertEquals ( name , convention . getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , buf . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , OvernightIborSwapConvention . of ( name ) )
assertEquals ( frequency , convention . getOvernightLeg ( ) . getAccrualFrequency ( ) )
assertEquals ( frequency , convention . getOvernightLeg ( ) . getPaymentFrequency ( ) )
assertEquals ( convention . getIborLeg ( ) , iborLeg )
assertEquals ( convention . getIborLeg ( ) , iborLeg )
assertNotNull ( floatLeg )
assertEquals ( iborLeg , convention . getIborLeg ( ) )
assertEquals ( dayConvention , convention . getOvernightLeg ( ) . getDayConvention ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , ThreeLegBasisSwapConvention . of ( name ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertEquals ( convention , getSpreadFloatingLeg ( ) . getConvention ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertEquals ( convention . getSpreadFloatingLeg ( ) , spreadFloatingLeg )
assertEquals ( convention . getFlatFloatingLeg ( ) , flatFloatingLeg )
assertNotNull ( convention . getSpreadLeg ( ) )
assertEquals ( name , getName ( ) )
assertEquals ( "TradeList{trades=" + JodaBeanUtils . toString ( trades ) + "}" , convention . toString ( ) )
assertEquals ( 6 , name . length ( ) )
assertEquals ( convention , XCcyIborIborSwapConvention . of ( name ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertEquals ( convention , getSpreadLeg ( ) . getConvention ( ) )
assertNotNull ( convention . getFlatLeg ( ) )
assertNotNull ( convention . getFlatLeg ( ) )
assertEquals ( dayConvention , convention . getSpreadLeg ( ) . getDayConvention ( ) )
assertEquals ( lag , convention . getSpotDateOffset ( ) . getDays ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertNotNull ( convention . getSpreadLeg ( ) )
assertEquals ( convention , getSpreadLeg ( ) . getConvention ( ) )
assertNotNull ( convention . getFlatLeg ( ) )
getFlatLeg ( ) . equals ( convention . getFlatLeg ( ) )
assertEquals ( convention . getDayConvention ( ) , dayConvention )
assertEquals ( SettlementType . CASH , test . getSettlementType ( ) )
assertEquals ( 5 , tokens . size ( ) )
assertEquals ( "2016-06-30" , date . formatForDisplay ( date ) )
assertEquals ( "2016-06-30" , date . getUnadjusted ( ) . toString ( ) )
assertEquals ( "1, 2, 3" , formatForDisplay ( ) )
assertEquals ( "1,2,3" , formatForCsv ( ) )
assertThat ( columnTypes ) . containsExactly ( String . class , String . class )
assertThat ( columnTypes ) . containsExactly ( String . class , Integer . class )
assertThat ( columnTypes ) . containsExactly ( expectedColumnTypes . toArray ( new Class < ? > [ 0 ] ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( "9781935*182610" , barcode . getBarsCode39 ( "9781935*182610" ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 10.0 , barcode . getAspectRatio ( ) , 0.001 )
assertEquals ( 10.0 , barcode . getAspectRatio ( ) , 0.001 )
assertEquals ( 63 , barcode . getOptions ( ) )
assertEquals ( 100 , barcode . getOptions ( ) . get ( 0 ) . intValue ( ) )
assertEquals ( metaInfoAfter , e . getMetaInfo ( ) )
assertEquals ( "Expected product name" , expectedProductName , event . getProductName ( ) )
assertEquals ( CommonsLogMessageConstant . INVALID_STATISTICS_NAME , ? ? ? LogMessages . get ( 0 ) . getMessageTemplate ( ) )
activeProcessor . assertNotNull ( )
assertEquals ( productProcessorFactory , ProductProcessorFactoryKeeper . getProductProcessorFactory ( ) )
assertEquals ( "com.hello.world" , getRecognisedNamespace ( notRegisteredNamespace ) )
assertEquals ( "1994" , result )
assertEquals ( "1994" , result )
assertEquals ( "1992" , result )
assertEquals ( "2010" , result )
assertEquals ( "2007" , result )
assertEquals ( "1998" , result )
assertEquals ( "'plain text'" , result )
assertEquals ( "'\\p\\l\\a\\i\\n \\t\\e\\x\\t'" , result )
assertEquals ( "'plain\\\\text'" , result )
assertEquals ( "'plain\\'text'" , result )
assertEquals ( "'plain'' ''text'" , result )
assertEquals ( "'plain text'$$$" , result )
assertEquals ( expectedResult , result )
assertEquals ( "Expected producer line to be modified" , "ExpectedProducerLine" , newProducerLine )
assertEquals ( "Created at " + currentYear + ", 'yes::yes', " + currentYear , newProducerLine )
assertEquals ( "'plain text'" , result )
assertEquals ( "2010" , result )
assertEquals ( "2019" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( sequenceId1 . getId ( ) , sequenceId2 . getId ( ) )
assertEquals ( null , encodeObject ( null ) )
assertEquals ( "" , encodeBytes ( new byte [ ] { } ) )
assertEquals ( nowEpoch , nowDateTimeUtilEpoch )
assertEquals ( millisFromEpochTo2020_05_05 , parsedDate . getTimeInMillis ( ) - offset )
assertEquals ( getUtcMillisFromEpochWithNullParam , millisFromEpochToCurrentTime , 0.001 )
assertEquals ( offset , relativeTime , 0.001 )
assertEquals ( expectedMap , destination )
assertEquals ( expectedMap , map )
assertNotNull ( format ( date , pattern ) )
assertEquals ( "output" , processInfo . getStdOutput ( ) )
assertEquals ( "expectedOutput" , processErrOutput )
assertThat ( stringBuilder . toString ( ) , is ( "<expected value>" ) )
assertEquals ( cmp , dest )
assertEquals ( 0 , compareByContent ( dest , cmp , destinationFolder , "diff" ) )
assertEquals ( null , errorMessage )
assertEquals ( 1 , doc1 . getNumberOfPages ( ) )
assertEquals ( 1 , doc1 . getNumberOfPages ( ) )
assertEquals ( 1 , destDoc . getNumberOfPages ( ) )
assertEquals ( 1 , target . getNumberOfPages ( ) )
assertEquals ( 1 , merged . getNumberOfPages ( ) )
assertEquals ( "Expected error message is not null" , null , errorMessage )
assertEquals ( null , errorMessage )
assertEquals ( null , errorMessage )
assertEquals ( null , errorMessage )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "simpleFormWithOneField.xfdf" , sourceFolder + "cmp_simpleFormWithOneField.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfValueRichText.xfdf" , sourceFolder + "cmp_xfdfValueRichText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfHierarchyFields.xfdf" , sourceFolder + "cmp_xfdfHierarchyFields.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfFreeText.xfdf" , sourceFolder + "cmp_xfdfFreeText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfHighlightedText.xfdf" , sourceFolder + "cmp_xfdfHighlightedText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfUnderlineText.xfdf" , sourceFolder + "cmp_xfdfUnderlineText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfPopupNewFlags.xfdf" , sourceFolder + "cmp_xfdfPopupNewFlags.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfStrikeout.xfdf" , sourceFolder + "cmp_xfdfStrikeout.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSquigglyText.xfdf" , sourceFolder + "cmp_xfdfSquigglyText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLine.xfdf" , sourceFolder + "cmp_xfdfLine.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCircle.xfdf" , sourceFolder + "cmp_xfdfCircle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSquare.xfdf" , sourceFolder + "cmp_xfdfSquare.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSquareAndCircleInteriorColor.xfdf" , sourceFolder + "cmp_xfdfSquareAndCircleInteriorColor.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCaret.xfdf" , sourceFolder + "cmp_xfdfCaret.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfPolygon.xfdf" , sourceFolder + "cmp_xfdfPolygon.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfPolyline.xfdf" , sourceFolder + "cmp_xfdfPolyline.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfStamp.xfdf" , sourceFolder + "cmp_xfdfStamp.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfStampWithAppearance.xfdf" , sourceFolder + "cmp_xfdfStampWithAppearance.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfInk.xfdf" , sourceFolder + "cmp_xfdfInk.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfFileAttachment.xfdf" , sourceFolder + "cmp_xfdfFileAttachment.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSound.xfdf" , sourceFolder + "cmp_xfdfSound.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLink.xfdf" , sourceFolder + "cmp_xfdfLink.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkBorderStyle.xfdf" , sourceFolder + "cmp_xfdfLinkBorderStyle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDest.xfdf" , sourceFolder + "cmp_xfdfLinkDest.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFit.xfdf" , sourceFolder + "cmp_xfdfLinkDestFit.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitB.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitB.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitR.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitR.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitH.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitH.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitBH.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitBH.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitBV.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitBV.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitV.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitV.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfRedact.xfdf" , sourceFolder + "cmp_xfdfRedact.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfProjection.xfdf" , sourceFolder + "cmp_xfdfProjection.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkAllParams.xfdf" , sourceFolder + "cmp_xfdfLinkAllParams.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReplaceText.xfdf" , sourceFolder + "cmp_xfdfReplaceText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfArrow.xfdf" , sourceFolder + "cmp_xfdfArrow.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCallout.xfdf" , sourceFolder + "cmp_xfdfCallout.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCloud.xfdf" , sourceFolder + "cmp_xfdfCloud.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCloudNested.xfdf" , sourceFolder + "cmp_xfdfCloudNested.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfTextBoxAllParams.xfdf" , sourceFolder + "cmp_xfdfTextBoxAllParams.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfJavaScriptForms.xfdf" , sourceFolder + "cmp_xfdfJavaScriptForms.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfAttrColor.xfdf" , sourceFolder + "cmp_xfdfAttrColor.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfAttrFlagsOpacity.xfdf" , sourceFolder + "cmp_xfdfAttrFlagsOpacity.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfAttrTitle.xfdf" , sourceFolder + "cmp_xfdfAttrTitle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DMeasurement.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DMeasurement.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DAngular.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DAngular.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DRadial.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DRadial.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSubelementContents.xfdf" , sourceFolder + "cmp_xfdfSubelementContents.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSubelementOverlayAppearance.xfdf" , sourceFolder + "cmp_xfdfSubelementOverlayAppearance.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfButton.xfdf" , sourceFolder + "cmp_xfdfButton.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCheckBox.xfdf" , sourceFolder + "cmp_xfdfCheckBox.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfList.xfdf" , sourceFolder + "cmp_xfdfList.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfDropDown.xfdf" , sourceFolder + "cmp_xfdfDropDown.xfdf" ) )
assertEquals ( DUMMY_OPTIONS , builder . getOptions ( ) )
assertEquals ( PdfAConformanceLevel . PDF_A_1A , builder . getConformanceLevel ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( canvas . getMetaInfo ( ) , PdfFormField . getMetaInfoToCanvas ( canvas ) )
assertEquals ( "Caption" , builder . getCaption ( ) )
assertEquals ( DUMMY_RECTANGLE , builder . getWidgetRectangle ( ) )
assertNotNull ( annot . getPage ( ) )
assertEquals ( null , errorMessage )
assertEquals ( cmpFileName , outFileName )
assertEquals ( cmpFileName , outFileName )
assertEquals ( 1 , 1 )
assertEquals ( "TextField1" , findFieldName ( "TextField1" ) )
assertNotNull ( name )
assertNotNull ( getResourceStream ( "key" ) )
assertEquals ( DATA , testObject . getData ( ) )
assertEquals ( expectedOutput , output )
assertEquals ( cmap , ? ? ? getCompatibleCidFontNoFontAsian ( ) )
assertEquals ( cidUni , ? ? ? getCid2UniCMapNoFontAsian ( ) )
assertEquals ( uniCid , ? ? ? )
assertEquals ( uniCid , ? ? ? getByte2CidCMapNoFontAsian ( ) )
assertEquals ( cidByte , ? ? ? getCid2ByteCMapNoFontAsian ( ) )
assertEquals ( - 1 , encoding . getDifference ( - 1 ) )
assertArrayEquals ( initialDifferences , encoding . differences )
assertEquals ( "a" , encoding . getDifferences ( ) [ 0 ] )
assertEquals ( 255 , encoding . getDifference ( "a" ) )
assertEquals ( null , encoding . getDifference ( index ) )
assertNotNull ( encoding . getDifference ( 0 ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expected , actual )
assertEquals ( part . getActualText ( ) , "\u002d" )
assertEquals
assertEquals ( 2 , line . getGlyphs ( ) . length )
assertTrue ( stream . isClosed ( ) )
assertEquals ( imageDataFromUrl , imageDataFromBytes )
assertNotNull ( e . getMessage ( ) )
assertEquals ( stringArray [ 0 ] , ? ? ? )
assertEquals ( expected , stream . toDouble ( ) , 0.000001 )
assertEquals ( expected , stream . getInteger ( ) )
assertEquals ( expected , Long . parseLong ( bytes . toString ( ) ) )
assertEquals ( 15 , read [ 1 ] )
assertEquals ( "Name1" , readString ( 6 ) )
assertEquals ( "Name1" , readString ( 6 ) )
assertEquals ( "Name1" , readString ( 6 ) )
assertEquals ( "Name1" , readString ( 6 ) )
assertEquals ( "Name1 1" , readString ( 7 ) )
assertEquals ( "%PDF-" , tok . getToken ( ) . toString ( ) )
assertNotNull ( list . get ( idx ) )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( new String ( expecteds ) , new String ( actuals ) )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( currentDate , currentCalendar . getTime ( ) )
ghostscriptHelper . ghostscriptEnvVarIsDefault ( )
assertEquals ( gsExec , ghostscriptHelper . getCliExecutionCommand ( ) )
ghostscriptHelper . getCliExecutionCommand ( ) == null
assertEquals ( "Expected CLI execution command to be equal to gsExec" , gsExec , imageMagickHelper . getCliExecutionCommand ( ) )
assertNotNull ( imageMagickHelper )
assertEquals ( hashtable , clonedTable )
assertEquals ( 9 , matcher . regionStart ( ) )
assertEquals ( 9 , matcher . regionEnd ( ) )
assertThrows ( IOException . class , ( ) -> getInputStreamOfFinalConnection ( invalidUrl ) )
assertEquals ( streamOfFinalConnectionOfInvalidUrl , initialUrl . openConnection ( ) . getInputStream ( ) )
assertEquals ( expected , getParentDirectoryUri ( tempFile ) )
assertEquals ( expected , getParentDirectoryUri ( tempFile ) )
assertEquals ( "expected" , actual )
assertEquals ( doc , XmlUtil . initNewXmlDocument ( ) )
assertNotNull ( factory )
assertNotNull ( factory ) ; // suggested assertion
assertEquals ( document . getDocumentIdWrapper ( ) , sequenceId )
assertEquals ( rgb , convertCmykToRgb ( cmyk ) )
assertEquals ( new DeviceCmyk ( 0 , 0 , 0 , 0 ) , convertRgbToCmyk ( rgb ) )
assertEquals ( cmpRgb , resultRgb )
assertEquals ( cmpRgb , resultRgb )
assertEquals ( cmpCmyk , resultCmyk . getComponents ( ) , delta )
assertEquals ( cmpCmyk , resultCmyk . getComponents ( ) , delta )
assertEquals ( cmpCmyk , resultCmyk . getComponents ( ) , delta )
assertEquals ( stream . getEncoding ( ) , FACTORY . createASN1Encoding ( ) . getBer ( ) )
assertEquals ( stream , CryptoUtil . createAsn1OutputStream ( baos , FACTORY . createASN1Encoding ( ) . getDer ( ) ) )
assertEquals ( font , getPdfObject ( 1 ) )
assertEquals ( UnitValue . createPointValue ( 10 ) , getWidthOfStringTest ( ) )
assertEquals ( UnitValue . createPointValue ( 0 ) , font . getWidth ( ) )
assertEquals ( "expected string" , font . toString ( ) )
assertEquals ( expected , glyphLine )
assertEquals ( expected , glyphLine )
assertEquals ( new byte [ ] { 84 , 69 } , bytes )
assertEquals ( new byte [ ] { ( byte ) 84 , ( byte ) 69 } , bytes )
assertArrayEquals ( new byte [ 0 ] , bytes )
assertEquals ( E_GLYPH_FONT_SPECIFIC , bytes )
assertEquals ( E_CODE , bytes [ 0 ] )
assertEquals ( 0 , bytes . length )
assertNull ( type3Font . getGlyph ( cannotEncodeAndAUnicodeBiggerThan32TestValue ) )
assertEquals ( true , img . isMask ( ) )
assertEquals ( expected , rotateOne )
assertEquals ( expected , rotateTranslate )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , dest )
assertEquals ( expected , src )
assertEquals ( expected , dest )
assertEquals ( expected , src )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertArrayEquals ( shouldBe . vals , rslt . vals , 0.001 )
assertEquals ( shouldBe , rslt )
assertEquals ( "1.23 1.1" , first . toString ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( expected , actual )
assertEquals ( 90 , rectangle . getWidth ( ) . getValue ( ) )
assertEquals ( 110 , rectangle . getWidth ( ) . getValue ( ) )
assertEquals ( shouldBe , rslt )
assertEquals ( "զրո", t o rmenian(0) )
assertEquals ( "զրո", t o rmenian(0) )
assertEquals ( "չորս հազար", toArmen i n(4000))
assertEquals ( "სამი", toGeor g an(3))
assertEquals ( "გამარჯობა", toGeorgian(0))
assertEquals ( "ისარი", toGeorgi a (10000))
assertEquals ( "expectedValue" , convert ( 5 ) )
assertEquals ( "expectedValue" , convert ( 5 ) )
assertEquals ( "EXPECTED_VALUE" , toRomanUpperCase ( 5 ) )
? ? ? assertEquals ( "i" , toRomanLowerCase ( 1 ) ) ; ? ? ?
assertEquals ( 90 , page . getRotation ( ) )
assertEquals ( len , stream . getWrittenBytes ( ) . length )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , destinationFolder , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , resource . size ( ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , compareByContent ( outDoc , cmpPdf , destinationFolder ) )
assertEquals ( 0 , compareByContent ( outDoc , cmpPdf , destinationFolder ) )
assertEquals ( null , errorMessage )
assertEquals ( null , errorMessage )
assertNotNull ( annots )
assertEquals ( 0 , compareByContent ( dest , cmp , "" , "" ) )
assertEquals ( 0 , compareByContent ( dest , cmp , destinationFolder ) )
assertEquals ( 0 , compareByContent ( dest , cmp , destinationFolder ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFile , destinationFolder , "diff" ) )
assertEquals ( copiedDestination , catalog . copyDestination ( null , new HashMap < PdfPage , PdfPage > ( ) , pdfDocument ) )
assertEquals ( EXPECTED , result )
assertEquals ( EXPECTED , result )
AssertPlaceHolder = "Assert.assertEquals(dict.getIndirectReference(), ???);"
assertEquals ( true , document . getSerializeOptions ( ) . isUseCanonicalFormat ( ) )
assertEquals ( null , pdfDocument . getDocumentInfo ( ) )
assertEquals ( expectedNames , actualNames )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , messages . size ( ) )
assertEquals ( new PdfName ( "c" ) , object )
assertEquals ( object , catalog . get ( new PdfName ( "a" ) ) . getRefersTo ( true ) )
assertNotNull ( outline . getTitle ( ) )
assertEquals ( "Expected StackOverflowError" , StackOverflowError . class , e . getClass ( ) )
assertEquals ( 0 , new PdfReader ( cmp ) . getNumberOfPages ( ) )
assertEquals ( 2 , root . getAllChildren ( ) . size ( ) )
assertEquals ( "" , compareResult )
assertNotNull ( pdfPages . getPdfObject ( ) )
assertEquals ( false , reader . isOpened ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , DESTINATION_FOLDER ) )
assertEquals ( "1.7" , pdfDoc . getPdfVersion ( ) . toString ( ) )
assertThat ( actual . get ( i ) , is ( expected . get ( i ) ) )
assertEquals ( expected . get ( i ) , actual . get ( i ) )
assertArrayEquals ( expected . get ( i ) , actual . get ( i ) )
assertEquals ( expected . get ( i ) , actual . get ( i ) )
assertArrayEquals ( expected . toFloatArray ( ) , actual . toFloatArray ( ) )
assertArrayEquals ( expected . toFloatArray ( ) , actual . toFloatArray ( ) )
assertThat ( actual . get ( i ) , is ( expected . get ( i ) ) )
assertThat ( actual . get ( i ) , is ( expected . get ( i ) ) )
pdfDoc . getPdfAConformanceLevelNoMetadata ( )
assertEquals ( content . length , < expected length >  )
assertEquals ( content . length , page . getFirstContentStream ( ) . getBytes ( ) . length )
assertEquals ( content . length , page . getFirstContentStream ( ) . getBytes ( ) . length )
assertEquals ( content . length , page . getFirstContentStream ( ) . getBytes ( ) . length )
assertEquals ( content . length , < expected length >  )
assertEquals ( content . length , page . getFirstContentStream ( ) . getLength ( ) )
assertEquals ( content . length , page . getFirstContentStream ( ) . getLength ( ) )
assertEquals ( content . length , page . getFirstContentStream ( ) . getLength ( ) )
assertEquals ( content . length , < expected length >  )
assertEquals ( 2 , messages . size ( ) )
assertEquals ( 2 , messages . size ( ) )
assertEquals ( expected , textArray . get ( 0 ) )
assertNotNull ( textArray . get ( idx ) )
assertNotNull ( textArray . getAsNumber ( 0 ) )
assertThat ( textArray . getElements ( ) , contains ( new PdfString ( "str" ) , new PdfNumber ( 11 ) ) )
assertEquals ( 1 , fos . size ( ) )
assertEquals ( pdfDest . getPage ( 1 ) . getPdfObject ( ) . getAsDictionary ( new PdfName ( "Key1" ) ) . getIndirectReference ( ) , key1Ref )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNotNull ( aa . getOnEnter ( ) )
assertNotNull ( aa . getOnExit ( ) )
assertNotNull ( aa . getOnFocus ( ) )
assertNotNull ( aa . getOnLostFocus ( ) )
assertNotNull ( aa . getOnMouseDown ( ) )
assertNotNull ( aa . getOnMouseUp ( ) )
assertNotNull ( aa . getOnPageClosed ( ) )
assertNotNull ( aa . getOnPageLostView ( ) )
assertNotNull ( aa . getOnPageOpened ( ) )
assertNotNull ( aa . getOnPageVisible ( ) )
assertEquals ( target , getPdfObject ( objNum ) )
assertEquals ( null , get ( idx ) )
assertEquals ( null , target . getPdfObject ( ) )
assertEquals ( dict , pdf3DAnnotation . getDefaultInitialView ( ) )
assertEquals ( expectedDict , pdf3DAnnotation . getActivationDictionary ( ) )
assertEquals ( expected , pdf3DAnnotation . isInteractive ( ) )
assertEquals ( PdfName . ANNOTATION , result . getSubtype ( ) )
assertEquals ( lineArray , pdfLineAnnotation . getLine ( ) . toFloatArray ( ) )
assertEquals ( dict , pdfLineAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfLineAnnotation . getBorderStyle ( ) )
assertEquals ( measure , pdfLineAnnotation . getMeasure ( ) )
assertNotNull ( annotation . getExternalData ( ) )
assertEquals ( vertices , pdfPolyGeomAnnotation . getVertices ( ) )
assertArrayEquals ( vertices , pdfPolyGeomAnnotation . getVertices ( ) )
assertEquals ( vertices , pdfPolyGeomAnnotation . getVertices ( ) )
assertThat ( pdfPolyGeomAnnotation . getVertices ( ) ) . isEqualTo ( vertices )
assertEquals ( measure , pdfPolyGeomAnnotation . getMeasure ( ) )
assertEquals ( expectedPath , pdfPolyGeomAnnotation . getPath ( ) )
assertNull ( pdfPolyGeomAnnotation . getPath ( ) )
assertEquals ( style , pdfPolyGeomAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfPolyGeomAnnotation . getBorderStyle ( ) )
assertEquals ( array , pdfPolyGeomAnnotation . getBorderStyle ( ) . getAsArray ( PdfName . DP ) )
assertEquals ( "test" , tag . getActualText ( ) )
assertEquals ( expectedBoundingBox , getBoundingBox ( ) )
assertThrows ( PdfException . class , ( ) -> canvas . endMarkedContent ( ) )
assertEquals ( 3 , ImageDataFactory . createGifFrame ( baos . toByteArray ( ) , 3 ) )
assertEquals ( 5 , canvas . getLineWidth ( ) )
assertEquals ( expectedText , actualText )
assertEquals ( expectedText , actualText )
assertEquals ( expectedText , actualText )
assertEquals ( 1 , listener . getCharacterPositions ( ) . size ( ) )
assertEquals ( 1 , listener . getCharacterPositions ( ) . size ( ) )
assertEquals ( 0 , listener . getAverageBboxCalculation ( ) )
assertEquals ( "Expected extracted text does not match actual extracted text" , "expectedText" , extractedText )
assertThat ( extractedText , equalTo ( "expectedText" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , null ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , null ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( expOpacity , textRenderInfo . get ( "fillOpacity" ) )
assertEquals ( expOpacity , ? ? ? get ( 0 ) . getOpacity ( ) )
assertEquals ( 1 , 1 )
assertEquals ( "Expected text" , text , "<AssertPlaceHolder>" )
assertEquals ( "" , text )
AssertPlaceHolder = "Assert.assertEquals(expectedText, getTextFromPage(pdfDocument.getPage(1)));"
pdfDocument . getNumberOfPages ( ) > 0
pdfDocument . getPage ( 1 ) . getText ( ) . contains ( "expectedText" )
assertEquals ( "Expected text" , txt , "<AssertPlaceHolder>" )
assertEquals ( origText , result )
assertEquals ( "1.23 5.34 234.23" , dp . toString ( ) )
assertEquals ( "  X.....X" , lp . toString ( ) )
assertEquals ( childs , Collections . unmodifiableList ( node . getChilds ( ) ) )
assertEquals ( EndType . CLOSED_POLYGON , node . getEndType ( ) )
assertEquals ( JoinType . ROUND , node . getJoinType ( ) )
assertNotNull ( child . getParent ( ) )
assertEquals ( 2 , node . getChilds ( ) . size ( ) )
assertEquals ( expected , actual )
assertNotNull ( node . getNext ( ) )
assertEquals ( firstChild , tree . getFirst ( ) )
tree . getFirst ( ) == null
assertNotNull ( field )
assertEquals ( PdfName . S , field . getPdfObject ( ) . get ( PdfName . Subtype ) )
"<AssertPlaceHolder>"
assertEquals ( "some text" , textValue )
assertEquals ( BigInteger . valueOf ( 125 ) , field . getValue ( ) )
assertEquals ( timeValueAsString , field . getValue ( ) . toString ( ) )
assertEquals ( fieldValue , item . getItem ( fieldName ) )
assertEquals ( timeValueAsString , item . getValue ( ) . toString ( ) )
assertEquals ( pdfObject , item . getPdfObject ( 0 ) )
assertEquals ( new PdfNumber ( numberValue ) , item . getItem ( fieldName ) )
assertEquals ( new PdfNumber ( numberValue ) , item . getItem ( fieldName ) )
assertNotNull ( schema . getField ( fieldName ) )
assertEquals ( sort . getKey ( ) , key )
assertNotNull ( sort . getPdfObject ( i ) )
assertNotNull ( sort . getSortOrder ( ) [ i ] )
assertEquals ( 0 , compareByContent ( outFilePath , cmpFilePath , null , null , null , null , null ) )
assertEquals ( 0 , compareByContent ( outFilePath , cmpFilePath , null , null , null , null , null ) )
assertEquals ( 0 , compareByContent ( outFilePath , cmpFilePath , null , null , null , null , null ) )
assertEquals ( new FontCacheStringKey ( "fontName" ) , create ( "fontName" ) )
assertNotNull ( function )
assertEquals ( new FontCacheStringKey ( "fontName" ) , create ( "fontName" ) )
assertEquals ( expected [ i ] [ j ] , actual )
assertEquals ( "Expected exception message" , exception . getMessage ( ) )
assertEquals ( "Invalid bits per sample exception" , "expected message" , e . getMessage ( ) )
assertEquals ( "Invalid order" , e . getMessage ( ) )
assertEquals ( "Invalid domain" , e . getMessage ( ) )
assertEquals ( "Invalid range" , exception . getMessage ( ) )
assertEquals ( "Invalid size exception message" , "Invalid size" , e . getMessage ( ) )
assertEquals ( "Invalid encode exception message" , "Invalid encode array length" , e . getMessage ( ) )
assertEquals ( "expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertEquals ( new double [ ] { 8 } , output )
assertEquals ( new double [ ] { 0.0 } , output )
assertEquals ( new double [ ] { 2 } , output )
assertEquals ( 2 , type3FuncDict . getAsArray ( PdfName . Functions ) . getAsDictionary ( 0 ) . getAsArray ( PdfName . Domain ) . getAsDouble ( 0 ) )
assertEquals ( 0 , compareByContent ( destinationFolder + "output_copy_layered.pdf" , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( CommonsLogMessageConstant . INVALID_STATISTICS_NAME , ? ? ? LogMessages . get ( 0 ) )
assertEquals ( CommonsLogMessageConstant . INVALID_STATISTICS_NAME , ? ? ? LogMessages . get ( 0 ) )
assertEquals ( 0 , compareByContent ( destFilename , cmpFilename , DESTINATION_FOLDER ) )
assertEquals ( expectedMessage , compareDocumentInfo ( licensed , agpl ) )
assertEquals ( replacedExpected , convertProducerLine ( initial ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , destinationFolder ) )
assertEquals ( "Assertion failed: XML files are not equal" , true , compareTool . compareXmls ( outXmlPath , cmpXmlPath ) )
assertNotNull ( document )
assertEquals ( name , dictPathItem . getKey ( ) )
assertEquals ( "arrayIndex" , element . getNodeName ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , 1 )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( position1 , position2 )
assertEquals ( BackgroundPosition . PositionY . BOTTOM , position1 . getPositionY ( ) )
assertNotNull ( position1 . setPositionY ( null ) )
assertEquals ( BackgroundPosition . PositionY . BOTTOM , position1 . getPositionY ( ) )
assertEquals ( 200 , div . getHeight ( ) )
assertEquals ( cmp , out )
assertEquals ( null , canvas . getProperty ( Property . MARGIN_LEFT ) )
AssertUtil . assertFileExists ( outFileName )
AssertUtil . assertDoesNotThrow ( ( ) -> compareByContent ( outFileName , cmpFileName , outPath , differenceImagePrefix ) )
assertEquals ( new Rectangle ( 0 , 0 ) , newDoc . getPageSize ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFile , cmpFileName , destinationFolder , "" ) )
assertEquals ( 2 , messages . getCount ( ) )
assertEquals ( 1 , imageData . getProfile ( ) . getNumComponents ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( HorizontalAlignment . CENTER , image . getHorizontalAlignment ( ) )
assertEquals ( HorizontalAlignment . RIGHT , image . getHorizontalAlignment ( ) )
assertEquals ( HorizontalAlignment . LEFT , image . getHorizontalAlignment ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( keptTogetherDiv . < Style > getProperty ( Property . KEEP_TOGETHER ) ) . isEqualTo ( true )
assertEquals ( true , document . getPdfDocument ( ) . getPage ( 1 ) . getPdfObject ( ) . getAsDictionary ( PdfName . Annots ) . getAsArray ( PdfName . Annots ) . get ( 0 ) . getAsDictionary ( PdfName . P ) . getAsBoolean ( PdfName . KE ) )
assertEquals ( 20f , document . getProperty ( Property . FIRST_LINE_INDENT ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 1 , pdf . getNumberOfPages ( ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( cmpFileName , outFileName )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( 30 , list . size ( ) )
assertEquals ( "AA" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "X" , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( "Hello" , text )
assertEquals ( expectedText , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "" ) )
assertThat ( text , containsString ( text1 ) )
assertEquals ( text1 , text2 )
assertEquals ( 1 , styles . size ( ) )
assertEquals ( expectedAlignment , p . getStyle ( ) . getVerticalAlignment ( ) )
assertEquals ( expectedSpacingRatio , style . getSpacingRatio ( ) )
assertEquals ( true , p1 . getStyle ( ) . isKeepTogether ( ) )
assertEquals ( false , p . getStyle ( ) . isKeepTogether ( ) )
assertEquals ( expectedRotationAngle , p . getStyle ( ) . getRotationAngle ( ) , 0.001f )
assertEquals ( expectedWidth , p . getStyle ( ) . getWidth ( ) . getValue ( ) , 0.001 )
assertEquals ( expectedWidth , p . getStyle ( ) . getWidth ( ) . getValue ( ) , 0.001 )
assertEquals ( expectedHeight , p . getStyle ( ) . getHeight ( ) . getValue ( ) , 0.001 )
assertEquals ( expectedHeight , p . getStyle ( ) . getHeight ( ) . getValue ( ) , 0.001 )
assertEquals ( expectedMaxWidth , p . getStyle ( ) . getMaxWidth ( ) , 0.001 )
assertEquals ( expectedMinWidth , p . getStyle ( ) . getMinWidth ( ) . getValue ( ) , 0.001 )
assertEquals ( cmpFileName , outFileName )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , p . getUnderline ( ) . getThickness ( ) )
assertEquals ( DESTINATION_FOLDER + "simpleTest.pdf" , outFileName )
assertEquals ( 250 , ( ( Paragraph ) flexContainer . getChildren ( ) . get ( 0 ) ) . getHeight ( ) )
assertEquals ( DESTINATION_FOLDER + "splitOverSeveralPagesTest.pdf" , outFileName )
assertThrows ( IllegalArgumentException . class , ( ) -> new Range . SubRange ( low , high ) )
assertEquals ( expectedSize , actualSize )
assertEquals ( null , pdfXObject . getPdfObject ( ) )
assertEquals ( pdfXObject . getPdfObject ( 1 ) , null )
assertEquals ( rect , renderer . applyMargins ( rect , false ) )
assertEquals ( areaBreakRenderer . getOccupiedArea ( ) , occupiedArea )
assertEquals ( areaBreakRenderer . getProperty ( ) , properties . get ( name ) )
assertEquals ( areaBreakRenderer , ? ? ? )
assertThat ( areaBreakRenderer . getDefaultProperty ( Property . MARGIN_BOTTOM ) ) . isEqualTo ( 36f )
assertNotNull ( areaBreakRenderer . getProperty ( schemaNS , propName ) )
assertEquals ( properties . get ( property ) , value )
assertEquals ( areaBreak , areaBreakRenderer . getModelElement ( ) )
assertEquals ( areaBreakRenderer . getClass ( ) , AreaBreakRenderer . class )
assertNotNull ( areaBreakRenderer )
assertEquals ( x , areaBreakRenderer . getX ( ) , 0.001 )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , areaBreakRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( 200f , widthAndHeight [ 0 ] , 0.001 )
assertEquals ( 200f , widthAndHeight [ 0 ] , 0.001 )
assertEquals ( BackgroundSizeType . CONTAIN , backgroundImage . getBackgroundSize ( ) . getBackgroundSizeType ( ) )
assertEquals ( 200f , widthAndHeight [ 0 ] , 0.001 )
assertEquals ( cover , true )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , cellRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , divRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertThat ( flexContainerRenderer . getNextRenderer ( ) ) . isInstanceOf ( FormFieldValueNonTrimmingTextRenderer . class )
assertEquals ( 50 , div . getWidth ( ) )
assertEquals ( UnitValue . createPointValue ( 100 ) , divRenderer . getProperty ( Property . WIDTH ) )
AssertPlaceHolder = "Assert.assertTrue(info.getMinContentHeight() > 0);"
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath ) )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( - 10 , textRenderer . getProperty ( Property . LINE_HEIGHT ) . getValue ( ) )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( LineHeight . createFixedValue ( 0 ) , textRenderer . getProperty ( Property . LINE_HEIGHT ) )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( 200 , lineHeight , 0.001 )
assertEquals ( 0 , lineHeight , 0.001 )
assertThat ( linkRenderer . getNextRenderer ( ) ) . isInstanceOf ( FormFieldValueNonTrimmingTextRenderer . class )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , listRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( metaInfo , metaInfoContainer . getMetaInfo ( ) )
assertEquals ( null , metaInfoContainer . getMetaInfo ( ) )
assertThat ( paragraphRenderer . getNextRenderer ( ) ) . isInstanceOf ( FormFieldValueNonTrimmingTextRenderer . class )
assertThat ( tabRenderer . getNextRenderer ( ) ) . isInstanceOf ( FormFieldValueNonTrimmingTextRenderer . class )
assertThat ( tableRenderer . getNextRenderer ( ) ) . isInstanceOf ( FormFieldValueNonTrimmingTextRenderer . class )
assertNotNull ( getPageByID ( divRenderer , id ) )
assertEquals ( 1 , getPageByID ( tableRenderer , id ) )
assertEquals ( 1 , documentRenderer . getTargetCounterHandler ( ) . previousRenderersPages . size ( ) )
assertEquals ( 1 , getPageByID ( documentRenderer , id ) )
assertEquals ( 1 , getPageByID ( documentRenderer , id ) )
assertNull ( page )
assertEquals ( 1 , range [ 1 ] )
assertEquals ( 4 , range [ 1 ] )
assertEquals ( 2 , range [ 1 ] )
assertEquals ( 0 , range [ 1 ] )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNotEquals ( result1 . getOccupiedArea ( ) , result2 . getOccupiedArea ( ) )
assertThat ( getText ( ) . toUnicodeString ( ) ) . isEqualTo ( val )
assertEquals ( "Puritan2.otf" , pdfFont . getFontProgram ( ) . getFontNames ( ) . getFontName ( ) )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , textRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( 0 , doc . getNumberOfPages ( ) )
AssertPlaceHolder = "assertEquals(expectedURL, url);"
assertEquals ( expectedURL , url )
assertEquals ( null , getTSAURL ( tsaCert ) )
assertEquals ( null , ? ? ? )
AssertPlaceHolder = "assertNotNull(crl);"
assertEquals ( "" , getDigest ( oid ) )
assertEquals ( "non_existing_oid" , getDigest ( oid ) )
assertEquals ( SignExceptionMessageConstant . THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL , e . getMessage ( ) )
assertEquals ( SignExceptionMessageConstant . THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL , exception . getMessage ( ) )
assertEquals ( SignExceptionMessageConstant . THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL , e . getMessage ( ) )
assertEquals ( initDict . get ( new PdfName ( "add_key" ) ) , new PdfName ( "add_value" ) )
assertNotNull ( parent )
assertEquals ( true , verifier . isVerifyRootCertificate ( ) )
verifier . pkcs7 = null
assertEquals ( "OCSP response could not be verified" , messages . value ( ) . messageTemplate ( ) )
assertNull ( xObject )
assertEquals ( current , getSignDate ( ) )
assertEquals ( PdfAConformanceLevel . PDFA_1A , signer . getConformanceLevel ( ) )
assertEquals ( testDate , getSignDate ( ) )
assertEquals ( null , ? ? ? getAlgorithmNullTest ( ) . getAlgorithm ( ) )
assertEquals ( new ASN1ObjectIdentifierBC ( getAlgorithmIdentifier ( ) . getAlgorithm ( ) ) , < AssertPlaceHolder >  )
assertEquals ( new ASN1ObjectIdentifierBC ( getAlgorithmIdentifier ( ) . getAlgorithm ( ) ) , getAlgorithm ( ) )
assertEquals ( expected , getAlgorithm ( ) )
assertEquals ( new ASN1ObjectIdentifierBC ( getAlgorithmIdentifier ( ) . getAlgorithm ( ) ) , getAlgorithm ( ) )
assertEquals ( new ASN1ObjectIdentifierBC ( getAlgorithmIdentifier ( ) . getAlgorithm ( ) ) , getAlgorithm ( ) )
assertEquals ( raf . createSourceView ( ) . length ( ) , length )
assertEquals ( raf . createSourceView ( ) . length ( ) , length )
assertEquals ( infoBouncyCastle , clientBouncyCastle . getTSAInfo ( ) )
assertEquals ( regPolicy , clientBouncyCastle . getTSAReqPolicy ( ) )
assertEquals ( "Mock verification" , verificationOK . getName ( ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertionResults . toString ( )
assertEquals ( expected , signature . getByteRange ( ) )
assertArrayEquals ( newContents , signature . getContents ( ) . getValueBytes ( ) )
assertEquals ( "Hello, iText!!" , new String ( signature . getCert ( ) ) )
signatureApp . getPdfObject ( objNum )
assertEquals ( expectedResultString , verificationResult )
assertNotNull ( verificationResult )
assertEquals ( "" , verificationResult )
assertEquals ( caCert . getNotBefore ( ) , getNotBefore ( ) )
assertEquals ( true , verifyRes )
assertEquals ( true , verifyRes )
assertEquals ( null , verifier . getOcspResponse ( null , null ) )
assertEquals ( expectedCss , fontFaceRule . toString ( ) )
assertEquals ( null , fontFace . getSrc ( ) )
assertEquals ( "" , fontFace . getFontFamily ( ) )
assertEquals ( 1 , ruleSets . size ( ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( "expectedValue" , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
pseudoElementNode . getPseudoElementName ( )
pseudoElementNode . getPseudoElementTagName ( )
pseudoElementNode . getAttributeString ( )
pseudoElementNode . getLang ( )
assertEquals ( "expectedValue" , attributes . getAttribute ( "key" ) )
assertNotNull ( pseudoElementNode )
assertNotNull ( attributes )
pseudoElementNode . getAttributes ( ) . size ( )
assertEquals ( expected , beforePseudoElemName )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( 0 , resolvedShorthandProps . size ( ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: getProperty ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertThat ( item . matches ( divNode ) ) . isTrue ( )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , divNode . siblingIndex ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertThat ( divNode . matches ( ":matchesOwn(Alexander)" ) ) . isTrue ( )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 2 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( 1 , evals . size ( ) )
assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( "" , trimControlCodes ( str ) )
assertEquals ( "\uFEFF<html><head><title>One</title></head><body>Two</body></html>" , doc . outerHtml ( ) )
assertEquals ( "UTF-8" , getCharsetFromContentType ( "text/html; charset=UTF-8" ) )
assertNull ( getCharsetFromContentType ( contentType ) )
assertTrue ( threw ) ;
assertEquals ( 1 , ls . size ( ) )
assertNotNull ( doc )
assertEquals ( expectedDate , parse ( date , format ) )
assertNotNull ( doc )
assertEquals ( "One" , a . get ( "One" ) )
assertEquals ( expected , actual )
assertEquals ( DATA , ? ? ? )
xmlDeclaration . asXmlDeclaration ( )
el . attr ( "id" ) . equals ( "Foo" )
assertEquals ( "Foo" , el . id ( ) )
assertEquals ( "Hello There. Here is some text." , text )
assertEquals ( "Hello there. What's that?" , doc . text ( ) )
assertNotNull ( form . hasAssociatedControls ( ) )
assertEquals ( "test" , form . selectFirst ( "input[name=test]" ) . val ( ) )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( "http://example.com/one/two.html" , a1 . absUrl ( "href" ) )
assertEquals ( "<p>One <em>foo</em> three</p>" , doc . html ( ) )
assertEquals ( "<div><p>Hello</p></div>" , accum . toString ( ) )
assertEquals ( "bar" , inputElement . attr ( "value" ) )
assertEquals ( "𝌡", t . u t erHtml())
assertEquals ( "Check" , els . first ( ) . text ( ) )
assertEquals ( "<p One=One One=Two one=Three two=Four two=Five Two=Six>Text</p>" , doc . outerHtml ( ) )
assert doc . getElementById ( "foo" ) . text ( ) . equals ( "<p id=\"foo" )
assertEquals ( 0 , parser . getErrors ( ) . size ( ) )
assertEquals ( "<div ><a name=\"top\"></a ><p id=1 >Hello</p></div>" , doc . html ( ) )
assertEquals ( "foo bar baz" , doc . text ( ) )
assertEquals ( "pre inner aft" , stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "Hello now" , stripNewlines ( doc . text ( ) ) )
assertEquals ( "<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>" , stripNewlines ( doc . toString ( ) ) )
assertEquals ( "<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>" , doc . outerHtml ( ) )
assertEquals ( "<table><caption>A caption<td>One<td>Two" , doc . html ( ) )
assertEquals ( "//example.net/img.jpg" , el . absUrl ( "src" ) )
assertEquals ( cdata , node . text ( ) )
assertEquals ( "body" , el . normalName ( ) )
assertEquals ( "<div>Hello < There <&amp;></div>" , doc . html ( ) )
assertEquals ( "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>" , out )
assertEquals ( "There" , doc . select ( "foo\\:bar" ) . last ( ) . text ( ) )
assertEquals ( "" , stripNewlines ( doc . text ( ) ) )
assertEquals ( "" , doc . select ( "noframes" ) . text ( ) )
assertEquals ( "" , doc . select ( "style" ) . text ( ) )
assertEquals ( "" , doc . title ( ) )
assertEquals ( "" , stripNewlines ( doc . select ( "iframe" ) . html ( ) ) )
assertEquals ( "<a href=/>link</a>" , doc . body ( ) . html ( ) )
assertEquals ( "" , doc . select ( "frameset" ) . outerHtml ( ) )
assertEquals ( "" , doc . text ( ) )
assertEquals ( "gb2312" , doc . select ( "meta[http-equiv=Content-Type]" ) . attr ( "charset" ) )
assertEquals ( "Hello There Another headline More stuff" , stripNewlines ( doc . body ( ) . text ( ) ) )
assertEquals ( "<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>" , stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "Hello There now More Content" , stripNewlines ( doc . body ( ) . text ( ) ) )
assertEquals ( "Hello there now" , stripNewlines ( doc . select ( "span" ) . text ( ) ) )
assertEquals ( "" , doc . select ( "noscript img" ) . attr ( "src" ) )
assertEquals ( "" , stripNewlines ( doc . head ( ) . html ( ) ) )
assertEquals ( "<a>Hello <div>there</div> <span>now</span></a>" , doc . outerHtml ( ) )
assertEquals ( "Hello there now" , stripNewlines ( doc . body ( ) . text ( ) ) )
assertEquals ( "<p>1<b>2<i>3</i></b><i>4</i>5</p>" , doc . body ( ) . html ( ) )
assertEquals ( "1<p>2</p>3" , doc . body ( ) . html ( ) )
assertEquals ( "<table><b><tr><td>aaa</td></tr>bbb</table>ccc" , doc . body ( ) . html ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( "<p><b class=one>One <i>Two <b>Three</b></i></b></p><p>Hello</p>" , doc . body ( ) . html ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( "" , doc . select ( "p" ) . text ( ) )
assertEquals ( "One" , doc . select ( "td" ) . first ( ) . text ( ) )
assertEquals ( "One" , doc . select ( "textarea" ) . text ( ) )
assertEquals ( "<script><!-- one <script>Blah</script> --></script>" , doc . html ( ) )
assertEquals ( "0<p>0</p>" , doc . body ( ) . html ( ) )
assertEquals ( "body" , doc . body ( ) . normalName ( ) )
assertEquals ( "<a href=\"one\" id=\"two\">" , doc . body ( ) . html ( ) )
assertNotNull ( doc )
assertEquals ( "<table><tr><td>text</td><!-- Comment --></tr></table>" , node . html ( ) )
assertEquals ( "hidden" , normalizedAttribute )
assertEquals ( "1" , normalizedAttributes . get ( "ITEM" ) )
assertEquals ( "One & Two" , s )
assertEquals ( "SomeNonEncodedInput" , body )
assertEquals ( p1 , p2 )
assertEquals ( p1 , p2 )
? ? ? valueOfChecksNotNull ( ) { assertNotNull ( valueOf ( true ) ) ; } public static PdfBoolean valueOf  ( boolean value ) { return value ? TRUE : FALSE ; } ? ? ?
assertNotEquals ( null , ? ? ? valueOf ( true ) )
assertEquals ( string , unescape ( string ) )
assertEquals ( "Three" , tq . remainder ( ) )
assertArrayEquals ( copy , array )
assertEquals ( "You&I" , els . first ( ) . text ( ) )
assertEquals ( "test" , els . get ( 0 ) . text ( ) )
assertEquals ( "data" , els . first ( ) . text ( ) )
assertNotNull ( doc )
assertEquals ( "<p\n<p<div id=one <span>Two" , stripNewlines ( html ) )
assertEquals ( null , get ( idx ) )
assertEquals ( "Expected value" , "<html <" , triggeringSnippet )
assertEquals ( null , get ( idx ) )
assertEquals ( "Expected value" , "<html<" , triggeringSnippet )
assertEquals ( "html" , doc . outputSettings ( ) . syntax ( ) . toString ( ) )
assertEquals ( "" , html ( ) )
assertEquals ( "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>" , cleanHtml )
assertEquals ( "Hello there!" , cleanHtml )
assertEquals ( "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>" , cleanHtml )
assertEquals ( "<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>" , cleanHtml )
assertEquals ( "<div><p>Nice</p><blockquote>Hello</blockquote>" , cleanHtml )
assertEquals ( "<div><p>Nice</p><blockquote>Hello</blockquote>" , cleanHtml )
assertEquals ( "" , cleanHtml )
assertEquals ( "<a href='http://example.com/foo'>Link</a><img src='http://example.com/bar'>" , clean )
assertEquals ( "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>" , clean )
assertEquals ( "<a href='/foo'>Link</a>" , clean )
assertEquals ( "<p class='foo'><a class='qux'>link</a></p>" , clean )
assertEquals ( "<p class='foo'>One</p>" , clean )
assertEquals ( "<a href='/foo'>Link</a><img src='/bar'>" , clean )
assertEquals ( "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>" , clean )
assertNotNull ( body ( ) )
assertThat ( cleanHtml , equalTo ( "<a href=\"SOMETHING://x\"></a>" ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , cleanHtml )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , cleanHtml )
assertEquals ( "foo bar" , classVal )
assertEquals ( 3 , doc . select ( "p" ) . size ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , html ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , doc . outerHtml ( ) )
assertEquals ( "<p>This <span>foo</span> <a>is</a> <span>foo</span> <a>jsoup</a>.</p>" , doc . html ( ) )
assertEquals ( "<p>This <a>is</a> <a>jsoup</a>.</p><span>foo</span>" , doc . select ( "a" ) . after ( "<span>foo</span>" ) . toString ( ) )
assertEquals ( "<i></i>" , doc . select ( "b" ) . wrap ( "<i></i>" ) . html ( ) )
assertEquals ( "<div>One <a href=\"/\">Two</a></div>" , doc . select ( "font" ) . unwrap ( ) . toString ( ) )
assertEquals ( "One Two Three <i>Four</i> Fix <i>Six</i>" , doc . body ( ) . html ( ) )
assertEquals ( "<p>One two three four</p>" , doc . body ( ) . html ( ) )
doc . select ( "p" ) . empty ( )
assertEquals ( "<div><b>there</b> jsoup</div>" , doc . body ( ) . html ( ) )
doc . select ( "i" ) . tagName ( "em" ) . size ( ) == 0
assertEquals ( "<div><p>Hello</p></div><div>There</div>" , accum . toString ( ) )
assertEquals ( 2 , textNodes . size ( ) )
assertNull ( ob )
assertEquals ( "'" , ob . getLiteral ( ) )
assertNotNull ( ob )
assertNotNull ( ob )
assertEquals ( "span div" , parse . toString ( ) )
assertEquals ( "a:not(:has(span.foo)) b d > e + f ~ g" , parse . toString ( ) )
assertEquals ( "One" , doc . selectFirst ( "p" ) . text ( ) )
assertNotNull ( doc . selectFirst ( cssQuery ) )
assertEquals ( "One" , selectFirst ( "p" , doc ) . text ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "<div><p>Hello</p></div><div>There</div>" , accum . toString ( ) )
assertEquals ( 1 , doc . select ( "div" ) . size ( ) )
assertThat ( accum . toString ( ) , is ( "<div><p>Hello</p></div>" ) )
assertEquals ( 0 , stream . read ( ) )
assertEquals ( 0 , stream . read ( bytes ) )
assertArrayEquals ( new byte [ 100 ] , bytes )
assertEquals ( 0 , stream . read ( ) )
assertEquals ( 0 , stream . read ( bytes ) )
assertEquals ( 0 , stream . read ( bytes , 0 , 100 ) )
assertEquals ( image , resourceResolver . retrieveImage ( bLogo ) )
assertNotNull ( image )
assertEquals ( ? ? ? LogMessages . class , messages . value ( ) )
assertEquals ( image , resourceResolver . retrieveImage ( fileName ) )
assertEquals ( 88 , retriever . getResourceSizeByteLimit ( ) )
assertEquals ( stream , resourceResolver . retrieveResourceAsInputStream ( bLogo ) )
assertNotNull ( cache . getImage ( "src" + i + 10 + ".jpg" ) )
assertEquals ( expectedUrl , resolvedUrl . toString ( ) )
assertEquals ( expectedUrl , resolver . resolveAgainstBaseUri ( relativePath ) . toString ( ) )
assertEquals ( expectedUrl , resolver . resolveAgainstBaseUri ( relativePath ) . toString ( ) )
assertEquals ( expectedUrl , resolver . resolveAgainstBaseUri ( relativePath ) . toString ( ) )
assertEquals ( absolutePathRoot + "%homepath%" , resolver . getBaseUri ( ) )
assertEquals ( expectedStyles , styles )
assertEquals ( expectedStyles , styles )
assertEquals ( expectedStyles , styles )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , compareByContent ( destinationFolder + "unusedXObjectIntegrationTest1.pdf" , destinationFolder + "unusedXObjectIntegrationTest2.pdf" , destinationFolder , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , compareByContent ( output , cmp_file , "" , "" ) )
assertEquals ( 0 , compareByContent ( destinationFolder + name + ".pdf" , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 0 , new File ( destinationFolder + destName + ".pdf" ) . length ( ) )
assertEquals ( 0 , y )
assertEquals ( destName , "eclipse_-50_-100" )
assertEquals ( 1 , 1 )
assertEquals ( "DOP_eclipse_StringPdfPage.pdf" , destName + ".pdf" )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( "DOC_eclipse_StringCanvas.pdf" , destName + ".pdf" )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( null , parseAndProcess ( fis ) )
assertEquals ( null , drawOnDocument ( content , document , pageNo ) )
assertEquals ( null , document )
assertEquals ( null , drawOnDocument ( content , document , pageNo ) )
assertEquals ( content , page . getContent ( ) )
assertEquals ( null , page . drawOnPage ( content , page , 0 , 0 ) )
assertEquals ( content , page . getContent ( ) )
assertEquals ( null , page )
assertEquals ( null , page )
canvas . showText ( content )
canvas . rectangle ( 100 , 500 , 100 , 100 ) . fill ( )
assertEquals ( 1 , canvas . getContentStream ( ) . size ( ) )
assertEquals ( 1 , canvas . getContentStream ( ) . size ( ) )
assertEquals ( 1 , canvas . getContentStream ( ) . size ( ) )
assertNull ( convertToXObject ( content , document ) )
assertEquals ( null , convertToXObject ( content , document ) )
assertEquals ( null , convertToXObject ( content , document ) )
assertEquals ( null , convertToXObject ( content , document ) )
assertEquals ( null , convertToXObject ( content , document ) )
renderer should  not be  null .
assertEquals ( null , convertToXObject ( content , document ) )
assertEquals ( null , convertToXObjectAllWithStreamNullTest ( ) )
assertEquals ( null , convertToXObject ( content , document ) )
assertNull ( ob )
assertNull ( ob )
assertNull ( parseStringPropsNullTest ( ) )
assertEquals ( 2 , doc . getResources ( ) . size ( ) )
assertEquals ( 2 , doc . getResources ( ) . size ( ) )
assertEquals ( expectedValue , resources . getSomeValue ( ) )
assertEquals ( 2 , resources . size ( ) )
assertEquals ( 2 , doc . getResources ( ) . size ( ) )
AssertPlaceHolder = "Assert.assertNotNull(canvas);"
assertEquals ( expectedValue , resources )
assertEquals ( expectedResources , resources )
assertEquals ( 0 , getResources ( ) . size ( ) )
assertNull ( SvgConverter . convertToXObject ( content , doc , new DummySvgConverterProperties ( ) ) )
assertEquals ( 0 , getResources ( ) . getResources ( ) . size ( ) )
assertNull ( SvgConverter . convertToXObject ( is , doc , new DummySvgConverterProperties ( ) ) )
assertEquals ( initialResolver , currentResolver )
assertEquals ( createResourceResolver ( props ) , getResourceResolver ( processorResult , props ) )
assertEquals ( currentResolver , SvgConverter . getResourceResolver ( testSvgProcessorResult , properties ) )
AssertPlaceHolder = "assertNull(currentResolver);"
assertEquals ( "#testid" , attr . get ( "xlink:href" ) )
assertNotNull ( resolvedStyles )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( renderer , popped )
assertSame ( renderer , viewed )
assertEquals ( "test01" , testProcessorState . top ( ) . toString ( ) )
testProcessorState . pop ( )
assertEquals ( "test01" , testProcessorState . top ( ) . toString ( ) )
testProcessorState . pop ( )
assertEquals ( expected , actual )
assertNull ( actual )
assertEquals ( "Courier" , info . getFontName ( ) )
assertEquals ( parentRenderer , childRenderer . getParent ( ) )
assertionErrorsThrown . isEmpty ( )
assertEquals ( null , ? ? ? getCurrentCanvas ( ) ? ? ? )
assertEquals ( 0 , canvases . size ( ) )
assertEquals ( page1 , context . getCurrentCanvas ( ) )
assertEquals ( page1 , context . popCanvas ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedTwo , actual )
assertEquals ( clipRenderer . draw ( sdc ) , "<expected value>" )
assertEquals ( clipRenderer . getAttribute ( SvgConstants . Attributes . CLIP_RULE ) , SvgConstants . Values . FILL_RULE_EVEN_ODD )
renderer . getObjectBoundingBox ( context )
assertEquals ( expectedValue , actualValue )
assertEquals ( null , result . getParent ( ) )
renderer . getObjectBoundingBox ( context )
assertThat ( renderer . getObjectBoundingBox ( context ) ) . isEqualTo ( new Rectangle ( ) )
assertEquals ( expectedBoundingBox , renderer . getObjectBoundingBox ( context ) )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual , 0.001f )
assertEquals ( expected , actual )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Point ( 210 , 310 ) , end )
assertEquals ( new Point ( 220 , 320 ) , end )
assertEquals ( new Point ( 210 , 310 ) , end )
assertNotNull ( end )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedBoundingBox , renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001f )
assertEquals ( expected , actual , 0.0f )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expectedBoundingBox , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expectedBoundingBox , actualBoundingBox )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNull ( get ( - 1 ) )
assertNull ( get ( - 1 ) )
assertNull ( get ( - 1 ) )
assertNull ( get ( - 1 ) )
assertNull ( get ( - 1 ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "" , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( "" , filterReferenceValue ( "#url()" ) )
assertEquals ( new AffineTransform ( ) , parseTransform ( "" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 1 , cnt )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , cnt )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
AssertPlaceHolder = "Assert.assertTrue(results.isEmpty());"
assertEquals ( 1 , cnt )
assertEquals ( "group1" , getNameFromPath ( path1 ) )
assertEquals ( "group3" , getNameFromPath ( path2 ) )
assertEquals ( "" , getNameFromPath ( emptyPath ) )
assertNull ( nullPath )
assertEquals ( "" , getNameFromPath ( rootPath ) )
assertEquals ( 10 , result )
assertEquals ( 10 , cnt )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( 0 , count )
assertEquals ( 10 , count )
assertEquals ( 10 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , cnt )
assertEquals ( 10 , result )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception to be thrown" , "<expected exception class>" , e . getClass ( ) . getName ( ) )
assertEquals ( 1 , cnt )
assertNotNull ( queryBuilder ( ) )
assertEquals ( "Expected UserException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( 3 , listener . getResults ( ) . size ( ) )
assertEquals ( 50.0 , getRowCount ( ) , 0.0 )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 0 , cnt )
assertEquals ( 3 , table . getNumberOfRows ( ) )
assertEquals ( null , table )
assertEquals ( 10 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 10 , result )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( 1 , count )
assertEquals ( 2 , recordCount )
assertEquals ( "{\"type\":\"selector\",\"dimension\":\"SOME_FIELD\",\"value\":\"SOME_VALUE\"}" , druidScanSpec . toJson ( ) )
assertEquals ( expectedJson , druidScanSpec . toJson ( ) )
assertEquals ( "{\"type\":\"selector\",\"dimension\":\"SOME_FIELD\",\"value\":\"SOME_VALUE\"}" , druidScanSpec . toJson ( ) )
assertEquals ( "expectedValue" , druidScanSpec . toJson ( ) )
assertEquals ( "{\"field\":\"SOME_FIELD\",\"type\":\"gt\",\"value\":\"SOME_VALUE\"}" , druidScanSpec . toJson ( ) )
assertEquals ( "1" , druidScanSpec . toJson ( ) )
assertEquals ( "<expected value>" , druidScanSpec . toJson ( ) )
assertEquals ( expectedJson , druidScanSpec . toJson ( ) )
assertEquals ( "1" , druidScanSpec . toJson ( ) )
assertEquals ( "$regex$_some_regular_expression" , druidScanSpec . getFilter ( ) . toJson ( ) )
assertEquals ( "expectedValue" , druidScanSpec . toJson ( ) )
assertEquals ( "Invalid column name" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertEquals ( 2 , insertResults . getRowsAffected ( ) )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( 1 , actualRowCount )
assertThat ( columns . size ( ) , is ( 2 ) )
assertEquals ( 3 , columns . size ( ) )
assertNotNull ( cache . addOrGet ( columns ) )
assertEquals ( "Expected UserException to be thrown" , "Expected message" , e . getMessage ( ) )
assertNotNull ( cnt )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertNotNull ( results )
assertThat ( results . size ( ) ) . isEqualTo ( 0 )
assertNotNull ( results )
assertNull ( results )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( 18 , count )
assertEquals ( 4 , count )
assertEquals ( "Misty" , defaultValue )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( 1 , result . recordCount ( ) )
assertNotNull ( plan )
assertNotNull ( plan )
assertEquals ( plan , queryBuilder ( ) . sql ( query ) . explainJson ( ) )
assertEquals ( plan , queryBuilder ( ) . sql ( query ) . explainJson ( ) )
assertNotNull ( plan )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "expected message" ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Table 'mysql_no_write.drill_mysql_test.test_table' already exists" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "expected message" ) )
assertNotNull ( re . getMessage ( ) )
assertEquals ( JsonMessageReader . class . getName ( ) , messageReader . getClass ( ) . getName ( ) )
assertNotNull ( mapReader )
assertNotNull ( mapReader )
assertNotNull ( mapReader )
assertNotNull ( plan )
assertThat ( plan , is ( notNullValue ( ) ) )
assertEquals ( query , sql )
assertEquals ( "select `timestamp`, sum(`aggregated value`) from openTSDB.`(metric=warp.speed.test, aggregator=sum, start=47y-ago)` group by `timestamp`" , sql )
assertEquals ( expectedQuery , sql )
assertEquals ( query , sql )
assertEquals ( "use openTSDB" , sql )
assertEquals ( "phoenix123.v1" , queryBuilder ( ) . getSchema ( ) )
// Add your assertion here
assertEquals ( 1 , cnt )
assertEquals ( "Expected UserException to be thrown" , "ExpectedMessage" , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertEquals ( "field1" , newFields . get ( 0 ) . getName ( ) )
assertEquals ( 3 , builder . getFields ( ) . size ( ) )
assertEquals ( 3 , builder . getFields ( ) . size ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "field1" , builder . getFields ( ) . get ( 0 ) . getName ( ) )
assertEquals ( "main" , builder . getQuery ( ) )
assertEquals ( " sourcetype=\"access_combined_wcookie\"" , builder . build ( ) )
assertEquals ( "field1=value1" , query )
assertEquals ( "field1=value1 field2=value2 field3=value3" , query )
assertEquals ( " sourcetype=\"access_combined_wcookie\" OR sourcetype=\"sourcetype2\" OR sourcetype=\"sourcetype3\"" , query )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "jame" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "Baston" , result )
assertEquals ( "BOSTN" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( 0.0 , result , 0.0001 )
assertEquals ( 3.0 , result , 0.001 )
assertEquals ( 0.5 , result , 0.001 )
assertEquals ( 0.8 , result , 0.001 )
assertEquals ( 3.0 , result , 0.001 )
result . validateArgs ( new String [ ] { "-Dlog.path=" + logPath + "/drillbit.log" , "-Dlog.query.path=" + logPath + "/drillbit_queries.json" } )
assertEquals ( propArg , result . getArgs ( ) . get ( 0 ) )
assertEquals ( "Test framework verification failed, expected failure on missing records." , ex . getMessage ( ) )
assertEquals ( "Test framework verification failed, expected failure for extra records." , ex . getMessage ( ) )
assertEquals ( "Test framework verification failed, expected failure on extra column." , ex . getMessage ( ) )
assertEquals ( "Test framework verification failed, expected failure on missing column." , ex . getMessage ( ) )
fail ( "Test framework verification failed, expected failure on unexpected records." )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertThat ( e . getMessage ( ) , containsString ( exceptionDesc ) )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( "Table not found" , e . getMessage ( ) )
assertThat ( e . getVerboseMessage ( ) ) . isEqualTo ( "Storage alias '`abc`' for '`dfs`' created successfully" )
assertEquals ( "Expected UserRemoteException to be thrown" , UserRemoteException . class , e . getClass ( ) )
assertNotNull ( e )
assertNotNull ( e )
assertThat ( e . getMessage ( ) , containsString ( "expected error message" ) )
assertNotNull ( e )
assertThat ( e . getMessage ( ) , containsString ( "expected error message" ) )
assert recordCount == 1
assertEquals ( 1 , recordCount )
assertEquals ( 1 , recordCount )
assertEquals ( 1 , recordCount )
assertEquals ( 1 , recordCount )
assertThat ( recordCount , equalTo ( 1 ) )
assertEquals ( 1 , recordCount )
assertEquals ( 1 , recordCount )
assert . assertEquals ( expectedCount , countV . getValueCount ( ) )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "Expected exception message" , "<expected exception message>" , e . getMessage ( ) )
assertEquals ( "Expected RpcException to be thrown" , RpcException . class , ex . getClass ( ) )
assertEquals ( expectedVersion , getVersion ( ) )
application . getConfig ( )
assertEquals ( "missing_override.conf" , application . getConfig ( ) . getOverrideConfig ( ) )
assertEquals ( value , actual )
assertEquals ( data , actual )
assertEquals ( expected , entries . next ( ) )
assertEquals ( null , existing )
assertEquals ( null , existing )
assertEquals ( expectedResult , registryHolder . getAllFunctionsWithHolders ( version . get ( ) ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Invalid date format: yyyy-DD-MM" , e . getMessage ( ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 2 , count )
assertEquals ( 1 , count )
assertEquals ( 2 , count )
assertEquals ( 0 , count )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( null , findLeaf ( dag , e ) )
assertEquals ( 0 , count )
assertEquals ( 4 , topNBatch . getTopNConfig ( ) . getLimit ( ) )
assertEquals ( 0 , count )
assertEquals ( 0 , count )
assertEquals ( 10 , count )
assertEquals ( 0 , count )
assertEquals ( 0 , count )
assertEquals ( 0 , count )
assertEquals ( 10 , count )
assertEquals ( 10 , count )
assertEquals ( 0 , count )
assertEquals ( 0 , count )
assertThat ( ex . getMessage ( ) , containsString ( "some expected error message" ) )
assertEquals ( "Unexpected exception message" , "Expected message" , ex . getMessage ( ) )
assertEquals ( ImpliedTupleRequest . ALL_MEMBERS , scanProj . getProjection ( ) )
assertEquals ( 0 , scanFixture . getReaderCount ( ) )
assertEquals ( 0 , fixture . batchBuilder ( ) . getColumns ( ) . size ( ) )
assertThat ( result . getSchema ( ) ) . isEqualTo ( expected )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Expected error message" )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertEquals ( cache , handler . vectorCache )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertEquals ( 2 , projSet . size ( ) )
assertEquals ( 2 , projSet . size ( ) )
assertEquals ( definedSchema , schemaTracker . getDefinedSchema ( ) )
assertEquals ( expected , tracker . getReaderSchema ( ) )
assertEquals ( 0 , numOutputRecords )
assertEquals ( 0 , numOutputRecords )
assertEquals ( 3 , batch . getRowCount ( ) )
assertEquals ( 0 , ov . getAccessor ( ) . get ( 3 ) )
assert hasAssertions
assertThat ( client . queryBuilder ( ) . sql ( sql ) . run ( ) ) . isNotNull ( )
assertEquals ( "Expected UserException to be thrown" , UserException . class , e . getClass ( ) )
assertEquals ( 0 , rsReader . getBatchCount ( ) )
assertEquals ( null , rsReader . next ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 0 , index . index )
assert vector . getAccessor ( ) . get ( i ) == 0xdeadbeef
assertEquals ( base + i , stringAt ( vector , i ) )
assert e . getMessage ( ) . equals ( "overflow called" )
assertEquals ( 25 , cnt )
assertEquals ( 2 , activeEndpoints . size ( ) )
assertEquals ( 2 , activeEndpoints . size ( ) )
assertEquals ( 2 , activeEndpoints . size ( ) )
assertEquals ( defaultValue , changedValue )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( 0 , totalDataSize )
assertEquals ( "Expected exception to be thrown" , ex . getClass ( ) , Exception . class )
assertEquals ( true , resourceManager . isResourceManagerEnabled ( ) )
assertEquals ( false , cluster . drillbit ( ) . getContext ( ) . getResourceManager ( ) . isResourceManagerEnabled ( ) )
assertEquals ( false , resourceManager . isResourceManagerEnabled ( ) )
assertNotNull ( selectedPool )
assertEquals ( testPool1 , selectedPool )
assertEquals ( testPool2 , selectedPool )
assertEquals ( future . get ( ) , handler . getQueryId ( ) )
assertEquals ( mesgA , future . get ( ) )
assertNotNull ( returnedProfile )
assertThat ( returnedProfile , is ( equalTo ( mockProfile ) ) )
assertEquals ( Acks . OK , response )
assertEquals ( Acks . FAIL , response )
assert failureCaught
assert failureCaught
assert failureCaught
assert failureCaught
assertThat ( after - before , is ( equalTo ( 0L ) ) )
assertThat ( result . getFirst ( ) , is ( QueryState . COMPLETED ) )
assertEquals ( before , after )
assertThat ( after - before , lessThan ( TIMEOUT ) )
assertNotEquals ( before , after )
// <AssertPlaceHolder>
// <AssertPlaceHolder>
assertEquals ( before , after )
assertEquals ( before , after )
assertNotEquals ( before , after )
assertEquals ( before , after )
assertEquals ( before , after )
assertNotEquals ( before , after )
assertEquals ( "10" , slice_target )
assertEquals ( "<expected value>" , slice_target )
assertThat ( slice_target ) . isEqualTo ( "1000" )
assertEquals ( "10000" , slice_target )
client . queryBuilder ( ) . sql ( "SELECT val FROM sys.%s where name='planner.slice_target' and optionScope = 'SESSION'" , SystemTable . OPTIONS . getTableName ( ) ) . singletonString ( )
assertEquals ( "2" , maxWidth )
assertEquals ( "3" , maxWidth )
assertEquals ( "2" , maxWidth )
assertEquals ( maxWidthPerNode , maxWidth )
assertThat ( scope ) . isEqualTo ( "<expected value>" )
assertEquals ( "10000" , scope )
assertEquals ( "100000" , scope )
assertEquals ( "10000" , scope )
assertEquals ( "10000" , scope )
assertEquals ( null , config_server )
assertEquals ( "Impersonation is disabled" , e . getMessage ( ) )
result . assertRowCount ( 5 )
assertEquals ( "Expected exception message" , "Invalid option name: xxx" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Invalid value for option 'exec.errors.verbose' : not a boolean" , e . getMessage ( ) )
assertEquals ( "Expected exception to be thrown" , e . getMessage ( ) )
assertEquals ( "Expected exception to be thrown" , e . getMessage ( ) )
assertEquals ( expectedHeaders , responseHeaders )
assertEquals ( "Submission failed." , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception of type UserRemoteException" , UserRemoteException . class , e . getClass ( ) )
assertEquals ( "Expected exception of type UserRemoteException" , UserRemoteException . class , e . getClass ( ) )
assertNotNull ( singletonString ( ) )
assertEquals ( false , Files . exists ( file ) )
assertEquals ( true , Files . exists ( file ) )
assertEquals ( createdFile , file )
assertEquals ( true , Files . exists ( createdFile ) )
assertEquals ( createdParentPath , resultPath . getParent ( ) )
assertEquals ( createdParentPath , resultPath . getParent ( ) )
assertEquals ( 1 , plugins . getPlugins ( ) . size ( ) )
assertEquals ( schema , actual )
assertEquals ( 0 , converters . size ( ) )
assertEquals ( schema . getField ( "col_enum" ) . schema ( ) . getType ( ) , Schema . Type . ENUM )
assertEquals ( 1 , schema . getFields ( ) . size ( ) )
assertEquals ( null , selection )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( results )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertEquals ( "Expected UserException to be thrown" , "<expected exception class>" , e . getClass ( ) . getSimpleName ( ) )
assertNotNull ( shpGeometryRow )
assertNull ( loader . next ( ) )
assertNotNull ( shpGeometryRow )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected UserException to be thrown" , "ExpectedMessage" , e . getMessage ( ) )
assertEquals ( "Expected UserException to be thrown" , UserException . class , e . getClass ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( 0 , count )
assertEquals ( "Expected exception not thrown." , e . getMessage ( ) )
assertEquals ( "Invalid error message" , "Expected error message" , e . getMessage ( ) )
assertEquals ( "Invalid query" , "Error: NaN or Infinity values found in the result set" , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertEquals ( rowCount , expectedRowCount )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( 1 , cnt )
assertThat ( mappings . get ( i ) ) . contains ( chunks . get ( i ) )
assertEquals ( null , testDisabledPluginGet ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "Key [" + key + "] should be illegal, putIfAbsent in the store should have failed" ) )
assertEquals ( "Expected IOException to be thrown" , IOException . class , e . getClass ( ) )
assertEquals ( "Expected UserException to be thrown" , UserException . class , ex . getClass ( ) )
assertEquals ( expectedValues [ i ] , map . get ( expectedValues [ i ] ) )
assertEquals ( "" , formattedValue )
assertEquals ( "2012-11-05 13:00:30.12" , formattedValue )
assertEquals ( "2012-11-05" , formattedValue )
assertEquals ( "Mon, Nov 5, 2012" , formattedValue )
assertEquals ( "2012-11-05 00:00:00.00" , formattedValue )
assertEquals ( "" , formattedValue )
assertEquals ( "1:00:30 PM" , formattedValue )
assertEquals ( "yyyy-MM-dd HH:mm:ss.SS" , options . getString ( ExecConstants . WEB_DISPLAY_FORMAT_TIME ) )
assertEquals ( "Fred" , formattedValue )
assertEquals ( DEFAULT_INSTANCE , result )
assertEquals ( expected , deserialized )
assertEquals ( "sys" , connection . getSchema ( ) )
assertEquals ( 1 , rs . getInt ( 1 ) )
assertEquals ( 1 , rs . getInt ( 1 ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , c . getString ( "path" ) )
assertEquals ( TABLE_CAT , getColumnName ( ) )
assertEquals ( PcapTypes . TABLE_CAT , getColumnType ( ) )
assertEquals ( "TABLE_SCHEM" , getColumnLabel ( 1 ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( TABLE_SCHEM , getColumnName ( ) )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( "COLUMN_NAME" , getColumnLabel ( COLUMN_NUMBER ) )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( columnName , TABLE_NAME )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( columnName , "<expected value>" )
assertEquals ( PcapTypes . COLUMN_NAME , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( null , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( value ) , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( "Expected column label" , expectedLabel , getColumnLabel ( columnNumber ) )
assertEquals ( true , c . getString ( path ) )
assertEquals ( Types . TINYINT , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( < expectedValue > , < actualValue > )
assertEquals ( mdrOptBIGINT , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( expectedValue , actualValue )
assertEquals ( mdrReqDOUBLE , c . getString ( path ) )
assertEquals ( 5.3 , c . getString ( path ) , 0.001 )
assertEquals ( "expectedValue" , c . getString ( "path" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "Expected value is not resolved yet." , "<AssertPlaceHolder>" )
assertEquals ( columnName , "<expected value>" )
assertEquals ( PcapTypes . TYPE_NAME , getColumnType ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( ? ? ? ) , getIntOrNull ( row , columnName ) )
assertEquals ( ? ? ? , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( 1048576 , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , expectedColumnName )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . class , getColumnType ( ) . getClass ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( "BUFFER_LENGTH" , getColumnName ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 123 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "DECIMAL_5_3" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 4 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5_000_000 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( null , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( "DECIMAL_DIGITS" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . DECIMAL_DIGITS , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "NUM_PREC_RADIX" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( 10 , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , columnName ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( "NUM_PREC_RADIX" , getColumnName ( ) )
assertEquals ( "NUM_PREC_RADIX" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . NUM_PREC_RADIX , getColumnType ( ) )
assertNull ( super . getColumnLabel ( columnNumber ) )
assertNull ( getColumnName ( ) )
assertNotNull ( getColumnTypeName ( columnNumber ) )
assertNotNull ( columnType )
assertEquals ( "REMARKS" , getColumnLabel ( 1 ) )
assertEquals ( true , c . getString ( "path" ) )
assertEquals ( columnName , REMARKS )
assertEquals ( PcapTypes . REMARKS , getColumnType ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( columnName , getColumnName ( ) )
assertEquals ( expectedTypeCode , getColumnType ( ) . getTypeCode ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( expectedTypeCode , getColumnType ( ) . getTypeCode ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertThat ( getColumnName ( ) , equalTo ( "<expected value>" ) )
assertEquals ( "DATETIME" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . DATETIME_SUB , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( ? ? ? ) , getIntOrNull ( row , columnName ) )
assertEquals ( 10 , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( 1048576 , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "CHAR_OCTET_LENGTH" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( "CHAR_OCTET_LENGTH" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . CHAR_OCTET_LENGTH , getColumnType ( ) )
assertEquals ( columnNumber , ORDINAL_POSITION )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . ORDINAL_POSITION , getColumnType ( ) )
assertEquals ( null , getColumnLabel ( columnNumber ) )
assertNull ( c . getString ( path ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( null , < focalMethodCall >  )
assertNull ( c . getString ( path ) )
assertEquals ( "REAL" , getString ( "IS_NULLABLE" ) )
assertEquals ( null , c . getString ( path ) )
assertEquals ( null , c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertEquals ( null , c . getString ( path ) )
assertEquals ( null , c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertEquals ( null , c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( getColumnName ( ) )
assertNull ( columnType )
assertEquals ( "SCOPE_CATALOG" , getColumnLabel ( 1 ) )
assertEquals ( columnName , expectedColumnName )
assertEquals ( PcapTypes . class , getColumnType ( ) . getClass ( ) )
assertEquals ( "SCOPE_SCHEMA" , getColumnLabel ( 1 ) )
assertEquals ( SCOPE_SCHEMA . getColumnName ( ) , "columnName" )
assertEquals ( PcapTypes . SCOPE_SCHEMA , getColumnType ( ) )
assertEquals ( "SCOPE_TABLE" , getColumnLabel ( 1 ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( PcapTypes . class , getColumnType ( ) . getClass ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( columnName , SOURCE_DATA_TYPE . getColumnName ( ) )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( true , isAutoIncrement )
assertEquals ( true , c . getString ( "path" ) )
assertThat ( getColumnName ( ) , equalTo ( "expectedColumnName" ) )
assertEquals ( true , columnType . isAutoIncrement ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( true , c . getString ( path ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( PcapTypes . IS_GENERATEDCOLUMN , getColumnType ( ) )
assertEquals ( properties . getProperty ( DrillProperties . QUOTING_IDENTIFIERS , DEFAULT_QUOTING_IDENTIFIER ) , "<expected value>" )
assertNotNull ( < AssertPlaceHolder > )
assertNotNull ( < AssertPlaceHolder > )
assertNotNull ( getTableTypes ( ) )
assertNotNull ( < AssertPlaceHolder > )
assertNotNull ( < AssertPlaceHolder > )
assertEquals ( ResultSet . CONCUR_READ_ONLY , getBestRowIdentifier ( catalog , schema , table , scope , nullable ) . getConcurrency ( ) )
assertEquals ( ResultSet . TYPE_FORWARD_ONLY , resultSet . getType ( ) )
assertEquals ( ResultSet . class , ? ? ? getPrimaryKeys ( catalog , schema , table ) . getClass ( ) )
assertEquals ( ResultSet . class , ? ? ? getImportedKeys ( catalog , schema , table ) . getClass ( ) )
assertEquals ( ResultSet . class , ? ? ? getExportedKeys ( catalog , schema , table ) . getClass ( ) )
assertNotNull ( < AssertPlaceHolder > )
assertEquals ( ResultSet . class , ? ? ? getTypeInfo ( ) )
assertEquals ( ResultSet . class , ? ? ? getIndexInfo ( catalog , schema , table , unique , approximate ) . getClass ( ) )
assertNotNull ( < AssertPlaceHolder > )
assertEquals ( ResultSet . class , ? ? ? getSuperTypes ( catalog , schemaPattern , typeNamePattern ) . getClass ( ) )
assertEquals ( "Expected non-null result set" , < AssertPlaceHolder > , getSuperTables ( catalog , schemaPattern , tableNamePattern ) )
assertNotNull ( < AssertPlaceHolder > )
assertEquals ( "Expected non-null result" , < focalMethod > ( ) , < focalMethod > ( ) )
assertEquals ( ResultSet . class , ? ? ? getFunctions ( catalog , schemaPattern , functionNamePattern ) . getClass ( ) )
assertNotNull ( < AssertPlaceHolder > )
assertNotNull ( getPseudoColumns ( catalog , schemaPattern , tableNamePattern , columnNamePattern ) )
assertEquals ( null , getObject ( null ) )
assertEquals ( "jdbc:drill:zk=local" , connection . getMetaData ( ) . getURL ( ) )
assertNotNull ( connection )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( expectedMaxRows , maxRowsValue )
assertEquals ( 0 , rowCount )
assertEquals ( valueToSet , pStmt . getMaxRows ( ) )
assertEquals ( valueToSet , pStmt . getMaxRows ( ) )
assertEquals ( valueToSet , pStmt . getMaxRows ( ) )
assertEquals ( valueToSet , pStmt . getMaxRows ( ) )
assertEquals ( 0 , timeoutValue )
assertEquals ( "Expected SQLException to be thrown" , SQLException . class , e . getClass ( ) )
assertEquals ( 0 , rowCount )
assertEquals ( rowCount , expectedRowCount )
assertEquals ( 0 , getInt ( TINYINT_VALUE ) )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( 0 , getInt ( 0.0f ) )
assertEquals ( 10 , getInt ( 10 ) )
assertEquals ( 0L , getLong ( null ) )
assertEquals ( expectedValue , getLong ( value ) )
assertEquals ( 123L , getLong ( 123 ) )
assertEquals ( expectedValue , getLong ( value ) )
assertEquals ( 123L , getLong ( 123 ) )
assertEquals ( expectedValue , getLong ( value ) )
assertEquals ( expectedValue , getLong ( value ) )
assertEquals ( expectedValue , getLong ( value ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0.0f , getFloat ( 0 ) )
assertEquals ( expectedValue , getFloat ( value ) )
assertEquals ( expected , actual )
assertEquals ( expectedValue , getFloat ( value ) )
assertEquals ( expectedValue , getFloat ( value ) )
assertEquals ( expectedValue , getFloat ( value ) )
assertEquals ( expected , actual )
assertEquals ( 0.0 , getDouble ( 0 ) )
assertEquals ( 0.0 , getDouble ( 0 ) )
assertEquals ( 1234567890.0 , getDouble ( 1234567890L ) , 0.0 )
assertEquals ( expected , actual )
assertEquals ( expectedValue , getDouble ( value ) )
assertEquals ( 0.0 , getDouble ( null ) , 0.001 )
assertEquals ( 0.0 , getDouble ( null ) , 0.0 )
assertEquals ( BigDecimal . ZERO , getBigDecimal ( 0 ) )
assertEquals ( BigDecimal . class , focalMethod . getReturnType ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( BigDecimal . class , focalMethod . getReturnType ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( BigDecimal . class , ? ? ? getBigDecimal ( rowOffset ) . getClass ( ) )
assertEquals ( Types . TINYINT , c . getObject ( "path" ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( 1 , 1 )
assertEquals ( expectedValue , actualValue )
assertEquals ( REAL , c . getObject ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertNotNull ( getPrecision ( ) )
assertEquals ( 3 , getPrecision ( ) . intValue ( ) )
assertNotNull ( getScale ( ) )
assertEquals ( 0 , getScale ( ) . intValue ( ) )
assertEquals ( 3 , getScale ( ) . intValue ( ) )
assertNotNull ( isWritable ( ) )
assertEquals ( 0 , maxRowsValue )
assertEquals ( 0 , rowCount )
assertEquals ( valueToSet , stmt . getMaxRows ( ) )
assertEquals ( valueToSet , stmt . getMaxRows ( ) )
assertEquals ( valueToSet , stmt . getMaxRows ( ) )
assertEquals ( valueToSet , stmt . getMaxRows ( ) )
assertEquals ( 0 , timeoutValue )
assertEquals ( "Invalid query timeout value: -10" , e . getMessage ( ) )
assertEquals ( 0 , stmt . getQueryTimeout ( ) )
assertEquals ( 0 , rowCount )
assertEquals ( 2147483647 , getInt ( uut ) )
assertEquals ( 1e9f , uut . getInt ( ) )
assertEquals ( - 2147483648 , getInt ( uut . get ( ) ) )
assertEquals ( 2147483648L , uut . getLong ( ) )
assertEquals ( 9223372036854775807L , uut . getLong ( ) )
assertEquals ( 9223372036854775807L , getLong ( uut ) )
assertEquals ( 0 , connection . getConnectTries ( ) )
assertEquals ( - 1 , connection . getConnectTries ( ) )
assertEquals ( 7 , connection . getConnectTries ( ) )
assertEquals ( "Expected no instance of org.apache.drill.jdbc.Driver" , false , driver instanceof org . apache . drill . jdbc . Driver )
assertEquals ( JoinRelType . INNER , join . getJoinType ( ) )
assertEquals ( JoinRelType . LEFT , join . getJoinType ( ) )
assertEquals ( JoinRelType . RIGHT , join . getJoinType ( ) )
assertEquals ( JoinRelType . FULL , join . getJoinType ( ) )
assertEquals ( JoinRelType . INNER , join . getJoinType ( ) )
assertEquals ( "TABLE_CATALOG" , getColumnLabel ( 1 ) )
assertEquals ( true , c . getString ( "path" ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( true , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "columnName" , getColumnName ( ) )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( columnNumber , ORDINAL_POSITION )
assertEquals ( 1 , getInt ( rs . getObject ( "ORDINAL_POSITION" ) ) )
assertEquals ( 1 , getInt ( rs . getObject ( "ORDINAL_POSITION" ) ) )
assertEquals ( 1 , getInt ( rs . getObject ( "ORDINAL_POSITION" ) ) )
assertThat ( getInt ( result . getInt ( "ORDINAL_POSITION" ) ) , is ( equalTo ( mdrReq . getOrdinalPosition ( ) ) ) )
assertEquals ( expected , actual )
assertEquals ( 1 , getInt ( rs . getObject ( "ORDINAL_POSITION" ) ) )
assertEquals ( expected , actual )
assertEquals ( 1 , getInt ( rs . getObject ( "ORDINAL_POSITION" ) ) )
assertEquals ( 1 , getInt ( 1 ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . ORDINAL_POSITION , getColumnType ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( true , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( PcapTypes . COLUMN_DEFAULT , getColumnType ( ) )
assertEquals ( null , getColumnLabel ( columnNumber ) )
assertNull ( getColumnName ( ) )
assertNull ( columnType )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( Types . TINYINT , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( mdrOptBIGINT , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodReturnValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( 5.3 , c . getString ( path ) , 0.001 )
assertEquals ( "expectedValue" , c . getString ( "path" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( "expectedValue" , c . getString ( "path" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , c . getString ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "EXPECTED_VALUE" , c . getString ( "path" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "Expected value is not resolved yet." , "<AssertPlaceHolder>" )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( PcapTypes . < expectedType > , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( ? ? ? ) , getIntOrNull ( row , "COLUMN_NAME" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( REAL , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 5 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , value )
assertEquals ( 5 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 16 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 1048576 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 7 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( "VARCHAR" , getColumnTypeName ( 1 ) )
assertThat ( columnType . getCharacterMaximumLength ( ) , equalTo ( expectedCharacterMaximumLength ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( ? ? ? ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( 10 , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "CHARACTER_OCTET_LENGTH" ) )
assertEquals ( 16 , getIntOrNull ( row , "CHARACTER_OCTET_LENGTH" ) )
assertEquals ( 1048576 , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assert . assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( "CHARACTER_OCTET_LENGTH" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . CHARACTER_OCTET_LENGTH , getColumnType ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( ? ? ? ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( "NUMERIC_PRECISION" , getColumnName ( ) )
assertEquals ( "NUMERIC" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . NUMERIC_PRECISION , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( 8 , getIntOrNull ( row , "NUMERIC_PRECISION_RADIX" ) )
assertEquals ( 10 , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( 1048576 , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 123 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( < expected value > , getIntOrNull ( row , "<column name>" ) )
assertEquals ( "expectedValue" , getColumnName ( ) )
assertEquals ( "NUMERIC" , super . getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . NUMERIC_PRECISION_RADIX , getColumnType ( ) . getCode ( ) )
assertEquals ( columnNumber , < AssertPlaceHolder >  )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "NUMERIC_SCALE" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "mdrReqVARCHAR" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( "NUMERIC_SCALE" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . NUMERIC_SCALE , getColumnType ( ) )
assertEquals ( columnNumber , ? ? ? )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "DATETIME_PRECISION" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 4 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( "DATETIME_PRECISION" , getColumnName ( ) )
assertEquals ( "DATETIME" , getColumnTypeName ( columnNumber ) )
assertEquals ( PcapTypes . DATETIME_PRECISION , getColumnType ( ) )
assertEquals ( "EXPECTED_VALUE" , focalMethodCall )
assertEquals ( true , c . getString ( "path" ) )
assertEquals ( TINYINT , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( 1 , c . getString ( "path" ) )
assertEquals ( mdrOptBIGINT , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( mdrOptFLOAT , c . getString ( path ) )
assertEquals ( mdrReqDOUBLE , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "VARCHAR" , getString ( "mdrReq" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , focalMethodResult )
assertEquals ( "expectedValue" , focalMethodCall )
c . getString ( path )
assertEquals ( mdrReqDATE , c . getString ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_Y" , getString ( "path" ) )
assertEquals ( "mdrReqINTERVAL_3Y_Mo" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodResult )
assertEquals ( "mdrReqINTERVAL_D" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_3D_Mi" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_H" , c . getString ( "path" ) )
assertEquals ( "mdrReqINTERVAL_1H_Mi" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_Mi" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_S" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodResult )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( null , getIntOrNull ( row , columnName ) )
assertEquals ( null , getIntOrNull ( row , columnName ) )
assertEquals ( "expectedValue" , getColumnName ( ) )
assertEquals ( PcapTypes . INTERVAL_TYPE , getColumnType ( ) )
assertEquals ( "Expected column label" , expectedLabel , getColumnLabel ( columnNumber ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "mdrReqVARCHAR" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 2 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 4 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertThat ( getColumnName ( ) , equalTo ( expectedColumnName ) )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( PcapTypes . INTERVAL_PRECISION , getColumnType ( ) )
assertEquals ( 512 , drillBuf . capacity ( ) )
assertEquals ( 0 , contextList . size ( ) )
assertEquals ( expected , jsonString ( ) )
assertEquals ( "Id INTEGER NOT NULL" , schema )
assertEquals ( "`a`.`b`[0]" , schemaPath . toString ( ) )
assertEquals ( "`a`.`b`[0].`c`.`d`" , schemaPath . toString ( ) )
assertEquals ( "`a`.`b`[0][1].`c`.`d`[2][0]" , schemaPath . toString ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( expected , unit . getTableKey ( ) )
assertEquals ( expected , tableKey . toLocation ( "/metastore" ) )
assertEquals ( expected , operation . getFilter ( ) )
assertEquals ( expected , operation . getFilter ( ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
AssertPlaceHolder = "assertEquals(expected, actual);"
assertThat ( actual , is ( equalTo ( expected ) ) )
AssertPlaceHolder = "Assert.assertEquals(expected, actual);"
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( conditions )
assertNull ( filter . accept ( FILTER_VISITOR ) )
assertEquals ( 1 , conditions . get ( MetastoreColumn . ROW_GROUP_INDEX ) )
assertEquals ( expected , transform ( conditions ) )
assertEquals ( expected , transform ( ? ? ? conditions ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( null , tableMetadata )
assertEquals ( tableMetadata , retrieveSingleElement ( tables ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertThat ( requestMetadata . getMetadataKeys ( ) ) . containsExactly ( "a" , "b" , "c" )
assertThat ( requestMetadata . getRequestColumns ( ) ) . isEqualTo ( requestColumns )
assertThat ( requestMetadata . getRequestColumns ( ) ) . isEqualTo ( columns )
assertEquals ( requestMetadata . getFilter ( ) , filter )
assertEquals ( expected , requestMetadata . getFilterExpression ( ) )
assertEquals ( expected , requestMetadata . getFilter ( ) )
assertEquals ( expected , requestMetadata . getFilter ( ) )
assertEquals ( expected , requestMetadata . getCustomFilter ( ) )
assertEquals ( new HashSet < > ( Arrays . asList ( MetadataType . TABLE , MetadataType . SEGMENT , MetadataType . PARTITION , MetadataType . FILE ) ) , requestMetadata . getMetadataTypes ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertThat ( operation . getFilter ( ) ) . isEqualTo ( expected )
assertEquals ( expectedResult , actualResult )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertEquals ( "foo" , token . getTokenString ( ) )
assertNotNull ( aURL . getAuthenticator ( ) )
assertEquals ( "expectedValue" , authenticator . getUserName ( ) )
assertEquals ( AltKerberosAuthenticationHandler . TYPE , < AssertPlaceHolder >  )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpConstants . BASIC , request . getHeader ( HttpConstants . AUTHORIZATION_HEADER ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( ListEntityType . class , handler . getType ( ) )
assertEquals ( true , token . isAnonymous ( ) )
assertEquals ( false , props . getProperty ( PseudoAuthenticationHandler . ANONYMOUS_ALLOWED ) )
AssertPlaceHolder = "Assert.assertEquals(0, KerberosUtil.getPrincipalNames(testKeytab).size());"
assertEquals ( 0 , KerberosUtil . getPrincipalNames ( testKeytab , null ) . size ( ) )
assertEquals ( t , e )
assertEquals ( "FileMetadata[key, length, lastModified, file?false]" , new FileMetadata ( ) . toString ( ) )
assertEquals ( "42" , intVar )
assertEquals ( "this <!--comment here--> contains a comment" , conf . get ( "my.comment" ) )
assertEquals ( "Tag not found: 0x" + Integer . toHexString ( tags [ 0 ] ) , der )
assertEquals ( expectedOutput , conf . toString ( ) )
assertEquals ( "hello" , conf . get ( "newkey" ) )
assertEquals ( "Tag not found: 0x" + Integer . toHexString ( tags [ 0 ] ) , der . getTag ( ) , expectedTag )
assertEquals ( "xyz" , scriptFile )
assertEquals ( entry . getValue ( ) , getValue ( ) . byteToKiloBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . bytesToMegaBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . bytesToGigaBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . convertBytesToTerraBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . convertBytesToPetaBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . calculateChecksum ( entry . getKey ( ) ) )
assertEquals ( "Expected output" , expectedOutput , actualOutput )
assertEquals ( "Expected loading failure reason" , expectedReason , getLoadingFailureReason ( ) )
assertEquals ( expectedTag , der . getTag ( ) )
assertEquals ( token , t )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( FileStatus . class , fSys . getFileStatus ( getTestRootPath ( fSys , "test/hadoop/file" ) ) . getClass ( ) )
assertEquals ( 0 , fSys . listStatus ( getTestRootPath ( fSys , "test/hadoop/file" ) ) . length )
assertEquals ( "Expected IOException to be thrown" , IOException . class , assertThrows ( IOException . class , ( ) -> fSys . listStatus ( obscuredDir ) ) )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , paths . length )
assertEquals ( 1 , filteredPaths . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , fSys . globStatus ( getTestRootPath ( fSys , "test/hadoop/dir/foo/*" ) ) . length )
assertEquals ( in , is )
assertEquals ( false , fc . mkdir ( getTestRootPath ( fc , "NonExistant/aDir" ) , FileContext . DEFAULT_PERM , false ) )
assertEquals ( false , fc . createFileNonRecursive ( getTestRootPath ( fc , "NonExisting/foo" ) ) )
assertEquals ( FileStatus . class , fc . getFileStatus ( getTestRootPath ( fc , "test/hadoop/file" ) ) . getClass ( ) )
assertEquals ( 0 , fc . listStatus ( getTestRootPath ( fc , "test/hadoop/file" ) ) . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , paths . length )
assertEquals ( 1 , filteredPaths . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( length , bb . length )
assertEquals ( false , registered )
assertArrayEquals ( data , bb )
assertEquals ( pathResolved . toUri ( ) , path . toUri ( ) )
assertArrayEquals ( bb , b )
assertEquals ( HadoopIllegalArgumentException . class , exception . getClass ( ) )
assertEquals ( HadoopIllegalArgumentException . class , exception . getClass ( ) )
assertEquals ( FileAlreadyExistsException . class , ? ? ? )
assertEquals ( FileNotFoundException . class , assertThrows ( IOException . class , ( ) -> {
assertEquals ( FileNotFoundException . class , assertThrows ( IOException . class , ( ) -> {
assertEquals ( HadoopIllegalArgumentException . class , exception . getClass ( ) )
assertEquals ( HadoopIllegalArgumentException . class , exception . getClass ( ) )
assertEquals ( newFc , otherUser . doAs ( new PrivilegedExceptionAction < FileContext > ( ) {
assertEquals ( fc1ModificationTime , fc2ModificationTime )
assertEquals ( false , fc1 . getFileStatus ( testPath ) )
assertEquals ( 0 , fc1 . listStatus ( testPath ) . length )
assertTrue ( "Expected file " + file + " doesn't exist" , file . exists ( ) )
assertEquals ( FileStatus . class , getFileLinkStatus ( new Path ( "path" ) ) . getClass ( ) )
assertEquals ( dir , wrapper . getWorkingDirectory ( ) )
assertTrue ( wrapper . exists ( new File ( link . toString ( ) ) ) )
assertEquals ( "Expected IOException to be thrown" , IOException . class , e . getClass ( ) )
assertEquals ( new Path ( "../file" ) , getLinkTarget ( link ) )
assertEquals ( true , fc . util ( ) . exists ( dstPath ) )
assertEquals ( "QUOTA REM_QUOTA SPACE_QUOTA REM_SPACE_QUOTA DIR_COUNT FILE_COUNT CONTENT_SIZE" , header )
assertEquals ( "DIR_COUNT FILE_COUNT CONTENT_SIZE" , header )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , toSnapshot ( false ) )
assertEquals ( expected , toSnapshot ( false ) )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( fileStatus1 , fileStatus2 )
assertEquals ( stat , deser )
assertEquals ( fs1 , fs2 )
assertEquals ( fsU1 , fsU2 )
assertSame ( fsA , fsA1 )
assertEquals ( expectedStat , storageStat )
assertEquals ( 0 , result )
assertEquals ( "" , result )
assertEquals ( file . getAbsolutePath ( ) , result )
assertEquals ( "" , result )
assertEquals ( write , read )
assertEquals ( write , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( write , read )
assertEquals ( write , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( data . length , new File ( tmp , "/bar/foo" ) . length ( ) )
ffs . getRawFileSystem ( ) == lfs
assertEquals ( FilterLocalFileSystem . class , flfs . getClass ( ) )
assertEquals ( "" , err . toString ( ) )
assertEquals ( - 1 , res )
assertNotNull ( harfs . getFileChecksum ( p ) )
assertEquals ( null , hfs . getMetadata ( "name" ) )
assertEquals ( p1 . toUri ( ) , p2 . toUri ( ) )
assertEquals ( "Expected IOException to be thrown" , IOException . class , assertThrows ( IOException . class , ( ) -> hfs . initialize ( uri , new Configuration ( ) ) ) )
AssertPlaceHolder = "fail("  Expected exception  not thrown ", ioe);"
AssertPlaceHolder = "Assert.assertNotNull(authority);"
assertEquals ( true , BUFFER_ROOT . isReadOnly ( ) )
assertEquals ( true , BUFFER_ROOT . isReadOnly ( ) )
fc1 . getFsURI ( ) . equals ( FsConstants . LOCAL_FS_URI )
assertEquals ( home , fsHome )
assertEquals ( "foo%bar" , getPath ( ) . getName ( ) )
assertEquals ( 0 , fileSchemeCount )
assertNotNull ( bis . getFileDescriptor ( ) ) ;
assertEquals ( false , fs . isDirectory ( ) )
assertEquals ( pathString , new Path ( pathString ) . toString ( ) )
assertEquals ( source , deser )
assertEquals ( "QUOTA REM_QUOTA SPACE_QUOTA REM_SPACE_QUOTA" , header )
assertEquals ( expected , quotaUsage . toString ( ) )
AssertPlaceHolder = "assertEquals(expected, quotaUsage.toString());"
assertEquals ( expected , quotaUsage . toString ( ) )
assertEquals ( quotaUsage1 , quotaUsage2 )
assertEquals ( "expectedValue" , getEnvironment ( "env" ) )
assertEquals ( TestTrashPolicy . class , trash . getTrashPolicy ( ) . getClass ( ) )
assertEquals ( file . toPath ( ) , new Path ( new URI ( getScheme ( ) , getUserInfo ( ) , getHost ( ) , getPort ( ) , getFile ( ) , null , null ) ) )
assertEquals ( source . exists ( ) , false )
assertEquals ( 1 , f . getFileSystem ( conf ) . listStatus ( f ) . length )
assertPathExists ( path + " does not exist after mkdirs" , path )
assertNotNull ( data )
assertEquals ( url , getClass ( ) . getClassLoader ( ) . getResource ( LocalFSContract . CONTRACT_XML ) )
assertEquals ( 3 , server . getRequestCount ( ) )
assertEquals ( checksum1 , checksum2 )
assertEquals ( true , atomicBoolean . get ( ) )
assert atomicBoolean . get ( )
assertEquals ( "----------" , b . toString ( ) )
assertEquals ( asOctal , fromConf . toShort ( ) )
assert stat . equals ( fstat )
assertEquals ( stat , stat2 )
assertEquals ( expected , actual )
assertEquals ( "Count.isDeprecated" , expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Count.isDeprecated" , expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , PathData . expandAsGlob ( "foo/*" , conf ) . length )
assertEquals ( "FileMetadata[file:///tmp, 0, 0, file?false]" , item . toString ( ) )
assertEquals ( expectedOutput , output )
assertThat ( and . combine ( Result . STOP ) . isPass ( ) , is ( true ) )
assertEquals ( usage , expr . getUsage ( ) )
assertEquals ( help , expr . getHelp ( ) )
assertEquals ( precedence , test . getPrecedence ( ) )
assertEquals ( "path1 path2 path3" , paths )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( one , two )
assertEquals ( one , two )
assertEquals ( one , two )
assertCounterValue ( 1 )
assertNotNull ( getMean ( ) )
assertEquals ( tag , roundTrip ( tag ) )
assertEquals ( tag , roundTrip ( tag ) )
assertNotEquals ( tag ( "tag1" ) , tag ( "tag2" ) )
assertEquals ( uri , toUri ( ) )
assertNotNull ( interceptor )
assertEquals ( "expectedValue" , interceptor . getSerializedString ( ) )
assertEquals ( serializedString , interceptor . serializeToString ( ) )
assertEquals ( "/a/b/l3/dd" , interceptor . interceptSource ( sourcePath ) )
assertEquals ( "Expected service name" , "file:///" , serviceName )
assertEquals ( "viewfs:///" , serviceName )
lViewIs . readUTF ( )
assertTrue ( "Expected file " + fileOnRoot + " doesn't exist" , lViewFS . exists ( fileOnRoot ) )
assertEquals ( IOException . class , e . getClass ( ) )
assertThat ( fsView . isDirectory ( ) , is ( true ) )
assertEquals ( expectedTrash , getTrashRoot ( testPath ) )
assertSame ( fs , cache . get ( fsTarget . getUri ( ) , conf ) )
assertEquals ( KeeperException . ConnectionLossException . class , ioe . getCause ( ) . getClass ( ) )
assertEquals ( 0 , 0 )
assertEquals ( "Can't failover when access is denied" , ffe . getMessage ( ) )
assertEquals ( "Failed over to a non-existant standby" , ffe . getMessage ( ) )
assertEquals ( "Expected result" , expected , actual )
assertNotNull ( ioe . getCause ( ) )
assertEquals ( null , xfoHeader )
assertEquals ( "joe" , getUsernameFromConf ( conf ) )
assertEquals ( "joe" , getUsernameFromConf ( conf ) )
assertEquals ( 0 , reader . getKeyClass ( ) . newInstance ( ) . getLength ( ) )
assertEquals ( 0 , fs . listStatus ( TEST_FILE ) . length )
assertEquals ( text , claimedText )
assertEquals ( testInt , claimedInt )
assertEquals ( EnumSet . allOf ( TestEnumSet . class ) , read )
assertNotNull ( der )
assertThrows ( PathIOException . class , ( ) -> {
assertEquals ( new IntWritable ( 4 ) , midKey )
assertEquals ( new IntWritable ( 1 ) , reader . midKey ( ) )
assertEquals ( keys [ ( count - 1 ) / 2 ] , reader . midKey ( ) )
assertEquals ( "FileMetadata[5, 0, 0, file?false]" , map . toString ( ) )
assertEquals ( "IOException expected." , expected . getMessage ( ) )
assertArrayEquals ( before . getBytes ( ) , getBytes ( ) . array ( ) )
assertNotNull ( dob )
assertEquals ( "File blocks missing" , e . getMessage ( ) )
assertEquals ( 0 , CodecPool . getPoolSize ( gzc ) )
assertEquals ( TEST_STRING . charAt ( i ) , ret )
assertEquals ( DATA1 , result )
assertEquals ( 0 , coders . size ( ) )
assertEquals ( null , coder )
assertNotNull ( locX )
assertEquals ( null , reader )
assertEquals ( "Expected exception not thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( "keyY" . getBytes ( ) , "valueY" . getBytes ( ) )
assertEquals ( "IllegalArgumentException should be thrown" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> writer = new Writer ( out , BLOCK_SIZE , "BAD" , comparator , conf ) ) )
assertEquals ( "Expected exception not thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( Reader . class , ? ? ? )
assertEquals ( "expectedValue" , writer . toString ( ) )
assertEquals ( "keyX" . getBytes ( ) , - 1 , 4 , "valueX" . getBytes ( ) , 0 , 6 )
assertEquals ( - 1 , scanner . getLowerBound ( ) )
assertEquals ( "IllegalArgumentException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( 0 , scanner . lowerBound ( "keyX" . getBytes ( ) , 0 , - 1 ) )
assertNotNull ( writer )
assertEquals ( "badcmp" , writer . getComparatorName ( ) )
assertEquals ( "IllegalArgumentException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "jclass:org.apache.hadoop.io.file.tfile.Chunk" , writer . getJClass ( ) )
assertEquals ( 0 , outKey . remaining ( ) )
assertEquals ( data [ i ] , readVLong ( null ) . get ( ) )
assertNotNull ( e . getCause ( ) )
assertThat ( nioe . getErrno ( ) , is ( equalTo ( expectedErrno ) ) )
assertEquals ( Errno . ENOENT , nioe . getErrno ( ) )
assertNotNull ( nioe )
assertEquals ( Errno . EBADF , nioe . getErrno ( ) )
assertEquals ( "expectedUsername" , getUserName ( ) )
assertEquals ( "expectedGroupName" , getGroupName ( ) )
assertEquals ( 101 , data . getBuffer ( ) [ 0 ] )
assertEquals ( "should not have succeeded twice" , e . getMessage ( ) )
assertEquals ( 1 , times ( 1 ) )
assertEquals ( 1 , times ( 1 ) )
verify ( policy , times ( 1 ) ) . shouldRetry ( any ( Exception . class ) , anyInt ( ) , anyInt ( ) , anyBoolean ( ) )
assertEquals ( before , after )
assertEquals ( orig , deser )
assertEquals ( before , after )
assertEquals ( before , after )
assertNotNull ( scheduler )
assertEquals ( "FileMetadata[key, length, lastModified, file?false]" , scheduler . toString ( ) )
assertNull ( poll ( ) )
assertNull ( peek ( ) )
AssertPlaceHolder = "assertNull(k);"
assertEquals ( "Injected fault: null, detailMessage: null" , e . getMessage ( ) )
assertEquals ( username , identity )
assertCounterGt ( "RpcQueueTimeNumOps" , 0L , rpcMetrics )
assertEquals ( "expected extra-long RPC to fail" , se . getMessage ( ) )
assertEquals ( addr , getServerAddress ( proxy ) )
assertEquals ( bindAddr , getAddress ( ) )
assertThat ( cause , instanceOf ( ConnectException ) )
assertEquals ( expectedCost , actualCost )
assertEquals ( expectedCost , actualCost )
AssertPlaceHolder = "Assert.fail("  Expected exception  not thrown ");"
AssertPlaceHolder = "Assert.fail("  Expected exception  not thrown ");"
assertEquals ( 23 , counter )
assertEquals ( null , cr . getTag ( "t" ) )
assertEquals ( "localhost" , hostname )
assertEquals ( "127.0.0.1" , getLocalIPAddr ( ) . getHostAddress ( ) )
assertEquals ( null , host )
assertEquals ( "localhost" , localhost . getHostName ( ) )
assertEquals ( "operation: " + wrapped . getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , e . getMessage ( ) )
assertEquals ( "operation: " + getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , wrapped . getMessage ( ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( "scheme://host/path" , uri . toString ( ) )
assertEquals ( "host:1" , conf . getSocketAddr ( "myAddress" ) . toString ( ) )
assertNotNull ( der )
assertEquals ( "Expecting IllegalArgumentException, but caught:" + e , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( 0 , result . size ( ) )
assertNotNull ( KDiag . exec ( conf , args ) )
assertEquals ( groupsUpper , groupsMapping . getGroups ( ) . stream ( ) . map ( String :: toUpperCase ) . collect ( Collectors . toList ( ) ) )
assertEquals ( groupsLower , groupsMapping . getGroups ( ) . stream ( ) . map ( String :: toLowerCase ) . collect ( Collectors . toList ( ) ) )
assertEquals ( true , gotException )
assertEquals ( am . getAuthMethod ( ) , getAuthenticationMethod ( conf ) )
assertEquals ( login1 , login2 )
assertEquals ( user1 , user2 )
assertEquals ( ugi , UserGroupInformation . getCurrentUser ( ) )
assertEquals ( ugi , UserGroupInformation . getLoginUser ( ) )
assertEquals ( 0 , shell . getConf ( ) . size ( ) )
assertEquals ( "Expected exception message" , "operation: " + operation + ": " + getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , exception . getMessage ( ) )
assertEquals ( sourceToken , destToken )
assert encode . equals ( copy . encodeToUrlString ( ) )
assertEquals ( null , ugi )
assertEquals ( true , tm1 . renewToken ( token , "foo" ) )
assertEquals ( 0 , tm1 . getTokens ( ) . size ( ) )
assertEquals ( 0 , DefaultMetricsSystem . getMBeanCount ( ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( operation + ": " + cause . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) )
assertEquals ( "Expected service to be running" , ServiceStatus . RUNNING , service . getStatus ( ) )
assertInState ( service , Service . STATE . STOPPED )
assertEquals ( "expectedValue" , service . getService ( ) )
assert false : "Good! Java assert is on."
assertExceptionContains ( MISSING , e )
assertThrows ( IOException . class , ( ) -> intercept ( IOException . class , ( ) -> "hello" ) )
assertThat ( result ) . isEqualTo ( 3 )
assertNotNull ( e )
assertEquals ( i , 30000 )
assertEquals ( digest , ? ? ? )
assertEquals ( expectedDigest , digest )
assertEquals ( expectedDigest , digest )
assertEquals ( 0 , info . value ( ) )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , ex . getClass ( ) )
assertTrue ( "Expected file " + jar + " doesn't exist" , new File ( jar ) . exists ( ) )
assertTrue ( "Expected file " + jar + " doesn't exist" , new File ( jar ) . exists ( ) )
assertNotNull ( unmarshalled )
assertEquals ( source , unmarshalled )
assertEquals ( expected , unmarshalled )
assertEquals ( source , serDeser . load ( tempFile ) )
assertEquals ( item , iter . next ( ) . getVal ( ) )
assertEquals ( uuid , header . getClientId ( ) )
assertThrows ( ClassNotFoundException . class , ( ) -> getClass ( "NoDefaultCtor" ) )
assertEquals ( 1 , x )
assertEquals ( timersBefore , timersAfter )
assertEquals ( expectedCommand , checkProcessAliveCommand )
assertEquals ( expectedCommand , checkProcessAliveCommand )
assertEquals ( "Try -help for more information" , e . getMessage ( ) )
assertEquals ( "Ignoring URISyntaxException while creating URI from string file://" , iae . getMessage ( ) )
assertThrows ( IOException . class , ( ) -> {
assertThrows ( IOException . class , ( ) -> {
assertNotNull ( transformer )
assertNotNull ( stringWriter . toString ( ) )
assertEquals ( 3 , filter . getHashFunctionNumber ( ) )
items . stream ( ) . filter ( i -> i . committed ) . forEach ( i -> i . assertCommitted ( ) )
assertThat ( abCount ) . isEqualTo ( 0 )
assertEquals ( t1 , t2 )
assertEquals ( "test" , cache . getProgram ( ) )
assertEquals ( 1 , cache . size ( ) )
assertEquals ( null , MNTPROC . fromValue ( - 1 ) )
assertEquals ( "drwho" , whoami )
assertEquals ( whoami , ugiUser )
assertEquals ( 0 , getCount ( ) )
assertNotNull ( getRealm ( ) )
assertEquals ( "expectedValue" , config )
assertEquals ( "172.26.32.0" , conf . get ( KEY_DNS_ZONE_SUBNET ) )
assertEquals ( 1 , records . length )
assertEquals ( 0 , recs . length )
assertEquals ( expectedValue , longStat . getValue ( ) )
assertEquals ( 0 , leaseRenewalCount . get ( ) )
assertEquals ( "IOException should be thrown" , IOException . class , exc . getClass ( ) )
assertThrows ( ServerException . class , ( ) -> server . init ( ) )
assertEquals ( FsStatus . NORMAL , server . getStatus ( ) )
assertEquals ( dir , server . getDir ( ) )
assertThat ( configFile . exists ( ) , is ( true ) )
assertEquals ( "site" , getConfig ( ) . getProperty ( "testserver.a" ) )
assertNotNull ( t )
assertNotNull ( str )
assertNotNull ( conf . getProperty ( "key1" ) )
assertEquals ( 1 , param . getValue ( ) )
? ? ? testDirAnnotation ( ) throws Exception { assertEquals ( TEST_DIR , getTestDir ( ) ) ; } ? ? ?
assertEquals ( 100 , end - start )
assertEquals ( "" , mountTable . getDefaultNamespace ( ) )
assertEquals ( "router_ns" , mountTable . getDefaultNamespace ( ) )
assertEquals ( "ns_id" , mountTable . getDefaultNamespace ( ) )
assertEquals ( 0 , cacheSize )
assertEquals ( FsStatus . class , getStatus ( ) . getClass ( ) )
assertEquals ( "FileMetadata[/type-QuotaMounttable, 0, 0, file?false]" , admin . toString ( ) )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
assertEquals ( true , ret )
AssertPlaceHolder = "assertEquals(0, exitCode);"
assertThrows ( FileNotFoundException . class , "Expect FileNotFoundException." , ( ) -> {
assertEquals ( "Expect AccessControlException." , AccessControlException . class , exception . getClass ( ) )
assertNull ( router . getStateStore ( ) )
assertEquals ( expectedResponse , refreshMountTableEntriesRes )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( permission , routerProtocol . getPermission ( routerFile ) )
assertNotNull ( locations )
assertEquals ( status . getLen ( ) , 1024 )
assertEquals ( true , status . isFile ( ) )
assertEquals ( routerCheckPointId , nnCheckPointId )
metrics . getEnteringMaintenanceNodes ( )
assertEquals ( group , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , saveNamespace )
assertEquals ( null , conf . get ( HTTP_KERBEROS_PRINCIPAL_CONF_KEY ) )
assertEquals ( 1 , cluster . getCluster ( ) . getNumNameNodes ( ) )
assertEquals ( false , fail )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( 0 , exitCode )
assertEquals ( statFile . getOwner ( ) , statLink . getOwner ( ) )
assertTrue ( closed )
assertThat ( closed , is ( true ) )
assertTrue ( vfs . exists ( vfsTestFile ) )
assertEquals ( expectedErrorMsg , e . getMessage ( ) )
assertEquals ( 0 , fs . listStatus ( new Path ( "/nonMount" ) ) . length )
assertTrue ( "Expected file " + testFile + " doesn't exist" , fs . exists ( testFile ) )
assertEquals ( "WARM" , policy )
assertArrayEquals ( secret , lastBlock . getLastBlock ( ) . getBlockToken ( ) . decodeIdentifier ( ) . getHandshakeMsg ( ) )
assertTrue ( "Expected file " + parent + " doesn't exist" , ! dfs . exists ( parent ) )
assertEquals ( 2 , getUsed ( ) . getTotalSize ( ) )
assertEquals ( conf , admin . getConf ( ) )
assertEquals ( "Can't mkdir /.reserved" , e . getMessage ( ) )
assertEquals ( "Can't delete /.reserved" , e . getMessage ( ) )
assertEquals ( "FileMetadata[/, 777, false]" , baos . toString ( ) . trim ( ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertEquals ( "Can't create symlink to /.reserved: operation: " + getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , e . getMessage ( ) )
assertEquals ( null , spy . getCurrentBlock ( ) )
assertEquals ( 0 , out . getWrappedStream ( ) . available ( ) )
assertEquals ( 1 , cachedLocs . length )
assertEquals ( "nn1" , conf . get ( DFS_NAMESERVICE_ID ) )
assertEquals ( "Expected name service ID" , expectedNameServiceId , getNameNodeNameServiceId ( ) )
assertEquals ( "expectedValue" , ? ? ? getBackupNameServiceId ( ) )
assertEquals ( "expectedValue" , ? ? ? getSecondaryNameServiceId ( ) )
assertEquals ( fsServerDefaults , dfs . getServerDefaults ( ) )
assertArrayEquals ( data , DFSTestUtil . readFileAsBytes ( fs , encryptedFilePath ) )
assertEquals ( 0 , contentSummary . getDirectoryCount ( ) )
assertEquals ( 3 , fs . getReplication ( fooFile ) )
assertEquals ( len1 + len2 , length )
assertEquals ( "Able to specify a bogus interface" , e . getMessage ( ) )
assertEquals ( currentFileLength , expectedFileLength )
assertEquals ( msg , expected , actual )
assertEquals ( home . toString ( ) , fsHome . toString ( ) )
assertEquals ( 0 , clientContext . getLocatedBlocksRefresher ( ) . getInterval ( ) )
assertNotEquals ( 0 , refreshInterval )
assertEquals ( 1024 , fs . getSpaceQuota ( dir ) )
assertEquals ( 1024 , dfs . getContentSummary ( dir ) . getSpaceQuota ( ) )
assertEquals ( 2048 , fs . getSpaceQuota ( dir ) )
assertEquals ( 2048 , fs . getSpaceQuota ( dir ) )
assertEquals ( "Expected exception not thrown" , FileNotFoundException . class , e . getClass ( ) )
assertEquals ( "expectedValue" , status )
assertEquals ( lastWrittenId , clientState )
assertThrows ( IOException . class , "Failed to set storage policy since dfs.storage.policy.enabled is set to false." , "Storage policy settings are disabled." , ( ) -> fileSystemAdmin . setStoragePolicy ( foo , cold . getName ( ) ) )
assertEquals ( stat , expectedStat )
assertEquals ( b , b2 )
assertEquals ( t , t1 )
assertEquals ( "3.0.0" , reg2 . getSoftwareVersion ( ) )
assertEquals ( CipherSuite . TLS_RSA_WITH_AES_128_CBC_SHA , convert ( "TLS_RSA_WITH_AES_128_CBC_SHA" ) )
assertEquals ( editsDir , journalStorage . getRoot ( ) )
assertEquals ( editsDir , journalStorage . getRoot ( ) )
assertEquals ( EDITS_CAPACITY * 2 + 1 , cache . getTxnCount ( ) )
assertNotNull ( npe )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . EXTENSION , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . EXTENSION , getSafeModeStatus ( ) )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertNull ( getSlowDiskReportAsJsonString ( ) )
assertEquals ( "file:/path/to/file" , u . toString ( ) )
assertEquals ( "1.2.3.4" , getRemoteAddr ( "clientAddr" , "proxyAddr" , true ) )
assertEquals ( "1.2.3.4" , getRemoteAddr ( "clientAddr" , "proxyAddr" , true ) )
assertEquals ( ropts , opts )
assertEquals ( "hdfs://mock1:8020" , conf . get ( DFSConfigKeys . FS_DEFAULT_NAME_KEY ) )
assertEquals ( 0 , ctx . getConf ( ) . getInt ( "dfs.datanode.scan.period.hours" , 0 ) )
assertEquals ( - 1L , conf . getLong ( DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND ) )
assertEquals ( true , ecn . isEnabled ( ) )
assertEquals ( 1 , dataNode . xserver . getMaxReconfigureWaitTime ( ) )
assertEquals ( 1 , volumeFailures )
assertEquals ( shouldRun , dn0 . isDatanodeUp ( ) )
assertEquals ( "expected message" , ? ? ? )
assertEquals ( "test: " + manager . getLastException ( ) . getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , ? ? ? )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( 2 , ibrManager . getReceivedBlockCount ( ) )
assertEquals ( 1 , storageInfo . getBlockReportCount ( ) )
assertEquals ( cacheDfsUsed , dfsUsed )
assertEquals ( cacheDfsUsed , dfsUsed )
assertThat ( f . exists ( ) ) . isTrue ( )
assertEquals ( 1 , volumeList . getNumVolumes ( ) )
assertEquals ( 0 , getNamesystem ( ) . getLowRedundancyBlocksCount ( ) )
assertEquals ( FsAction . READ , status . getPermission ( ) . getUserAction ( ) )
assertEquals ( "Expected storage policy" , expectedStoragePolicy , getStoragePolicy ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertNotNull ( vol . getReserved ( ) )
assertNotNull ( pInfo . getPathPrefix ( ) )
assertNull ( e )
assertEquals ( null , xfoHeader )
assertEquals ( EXPECTED_PATH , testParser . getPath ( ) . toString ( ) )
assertEquals ( originalString , parsedString )
assertEquals ( value , Long . decode ( bandwidthString ) )
status != null
assertEquals ( true , conf . getBoolean ( DFSConfigKeys . DFS_DISK_BALANCER_ENABLED , false ) )
assertEquals ( DiskBalancerWorkStatus . Result . PLAN_DONE , balancer . queryWorkStatus ( ) . getResult ( ) )
assertEquals ( "{}" , getNodes ( DatanodeReportType . STORAGE ) )
assertEquals ( invalidNodeInfo , outputs . get ( 0 ) )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , USER , "foo" , ALL ) } , returned )
assertArrayEquals ( aclSpec . toArray ( new AclEntry [ 0 ] ) , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , USER , "foo" , ALL ) } , returned )
assertEquals ( firstId , secondId )
assertEquals ( false , result )
assertEquals ( expectSuccess , true )
assertEquals ( 3 , verifyAuditLogsRepeat ( true , 3 ) )
assertClusterStartFailsWhenDirLocked ( conf , savedSd )
assertEquals ( "/RACK3" , dnd3 . getNetworkLocation ( ) )
assertEquals ( BlockType . CONTIGUOUS , defaultBlockType )
assertEquals ( HAServiceProtocol . HAServiceState . ACTIVE , fsn . getState ( ) )
assertEquals ( 2 , safeReplication )
assertEquals ( 0 , errorCount )
GenericTestUtils . assertExceptionContains ( "Concat operation doesn't support " + FSDirectory . DOT_RESERVED_STRING + " relative path : " + trg , e )
assertEquals ( false , fs . exists ( filePath ) )
assertEquals ( "Expected internal lease holder to be updated" , expectedInternalLeaseHolder , lm . getInternalLeaseHolder ( ) )
assertEquals ( 0 , queueLength )
assertEquals ( 1 , nn . getMetricsLoggerPeriodSeconds ( ) )
assertEquals ( 0 , nn . getMetricsLoggerPeriodSeconds ( ) )
assertEquals ( der . getTag ( ) , expectedTag )
assertEquals ( 1024 , numBlocks )
assertEquals ( 0 , nnRpc . getCallCount ( ) )
assertEquals ( 3 , nnRpc . createSymlink ( target , "/a/b" , perm , true ) )
assertEquals ( "Expected exception not thrown" , IOException . class , e . getClass ( ) )
assertEquals ( 0 , getZoneStatus ( zoneId ) . getFilesReencrypted ( ) )
assertExists ( kmsAcl )
assertEquals ( "2" , ? ? ? )
assertEquals ( 1 , inf . getBlocks ( ) . size ( ) )
assertEquals ( "TransferImage Should fail with timeout" , e . getMessage ( ) )
FSImageTestUtil . assertNNHasCheckpoints ( cluster , index , ImmutableList . of ( expectedCheckpointTxId ) )
assertEquals ( true , prevTmp . exists ( ) )
assertEquals ( false , getGroups . getGroups ( ) . isEmpty ( ) )
assertEquals ( true , thrownRetryException )
assertEquals ( 3 , nns . size ( ) )
assertEquals ( 1 , fooNode . getSnapshotId ( ) )
assertEquals ( "IllegalArgumentException should be thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( 1 , dfs . getNamesystem ( ) . getExternalSPSMetrics ( ) . getNumSatisfyStoragePolicyOps ( ) )
assertThat ( exitCode , is ( equalTo ( 0 ) ) )
assertThat ( exitCode , equalTo ( 0 ) )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertOutputMatches ( "Balancer bandwidth is set to 10" + newLine )
assertEquals ( 10 , exitCode )
assertEquals ( 10 , exitCode )
assertOutputMatches ( "Created metasave file dfs.meta in the log directory of namenode.*" + newLine + "Skip Standby NameNode, since it cannot perform metasave operation" + newLine )
assertOutputMatches ( "Created metasave file dfs.meta in the log directory of namenode.*" , "Created metasave file dfs.meta in the log directory of namenode.*failed.*" )
assertOutputMatches ( outMessage , errMessage )
assertThat ( exitCode , equalTo ( 0 ) )
assertNotNull ( exitCode )
assertOutputMatches ( "Refresh service acl successful for.*" + newLine , "Refresh service acl failed for([\\s\\S]*)" + newLine )
assertOutputMatches ( outMessage , errMessage )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertOutputMatches ( outMessage , errMessage )
assertOutputMatches ( outMessage , errMessage )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertOutputMatches ( outMessage , errMessage )
assertOutputMatches ( "Refresh super user groups configuration successful for.*" + newLine , errMessage )
assertNotNull ( exitCode )
assertNotNull ( exitCode )
assertOutputMatches ( "Refresh call queue successful for.*" + newLine , "Refresh call queue failed for([\\s\\S]*)" + newLine )
assertOutputMatches ( "Refresh call queue successful for.*" + newLine , errMessage )
assertNotNull ( exitCode )
assertNull ( exitCode )
assertNull ( skips [ n ] )
assertThat ( exitCode , equalTo ( 0 ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
assertEquals ( "<expected>" , "<actual>" )
assertEquals ( success , ret == 0 )
assertEquals ( success , ret == 0 )
assertEquals ( success , ret == 0 )
assertTrue ( fs . getDelegationToken ( anyString ( ) ) == null )
assertEquals ( "expectedValue" , ret )
assertEquals ( "expectedValue" , ret )
assertEquals ( 0 , getAddressListFromTool ( TestType . BACKUP , conf , false ) . size ( ) )
assertEquals ( "expectedValue" , toolResult )
assertEquals ( conf . get ( handler . key ) , "value" )
assertEquals ( "safemode: java.net.UnknownHostException: nonExistent" , ret )
assertErrMsg ( "safemode: FileSystem file:/// is not an HDFS file system. The fs class is: org.apache.hadoop.fs.LocalFileSystem" , 0 )
assertOutMsg ( "Safe mode is OFF" , ret )
assertEquals ( 0 , ret )
assertEquals ( 0 , status )
assertEquals ( 1 , all . length )
assertEquals ( 1 , all . length )
assertEquals ( 0 , all . length )
assertEquals ( objA , objSet . getElement ( objA ) )
assertEquals ( computedDigest , expectedDigest )
lsb . getBlockType ( )
assertEquals ( value , GenericObjectMapper . read ( value ) )
assertEquals ( report , parsed )
assertEquals ( null , getDelegationToken ( request ) )
assertEquals ( expectedPath , trashPath )
assertEquals ( "Expected UnsupportedOperationException to be thrown" , UnsupportedOperationException . class , uoe . getClass ( ) )
assertEquals ( 1 , cluster . getDataNodes ( ) . size ( ) )
assertEquals ( "/testWebHdfsUrlEncoding_-!.~'()*,:$&=" , url . getPath ( ) )
assertEquals ( false , authorized )
assertEquals ( "Unable to create new file " + file , true , file . createNewFile ( ) )
assertEquals ( false , fs . exists ( data ) )
assertEquals ( true , result )
assertEquals ( DelegationParam . DEFAULT , p . getValue ( ) )
assertEquals ( GroupParam . DEFAULT , p . getValue ( ) )
p . getValue ( )
assertEquals ( RenewerParam . DEFAULT , p . getValue ( ) )
assertEquals ( "" , userParam . getUserName ( ) )
assertEquals ( 1 , userParam . getUserName ( ) . length ( ) )
userParam . assertValue ( "a$" )
assertEquals ( expected , computed . getValue ( ) )
assertEquals ( "user.a1" , p . getXAttrName ( ) )
assertEquals ( param . getValue ( ) , s )
assertNotNull ( der )
assertThat ( frequency . get ( key ) ) . isEqualTo ( expectedValue )
assertEquals ( rCounters , counters )
assertEquals ( rCounters , counters )
assertEquals ( "expectedValue" , getProperty ( "key" ) )
assertEquals ( JobState . SUCCEEDED , job . getState ( ) )
assertEquals ( 0 , controller . getApplicationID ( ) )
jid . toString ( ) . equals ( "FileMetadata[" + jid . getAppId ( ) . toString ( ) + ", " + jid . getLength ( ) + ", " + jid . getLastModified ( ) + ", " + "file?" + jid . isFile ( ) + "]" )
assertEquals ( "FileMetadata[" + key + ", " + length + ", " + lastModified + ", " + "file?" + isFile + "]" , taid . toString ( ) )
assertEquals ( templateTime , time )
assertEquals ( expectedGroups , groups )
assertEquals ( 1 , splits . length )
assert val == false
assert val
assertEquals ( "test" , configuration . getProfileParams ( ) )
assertEquals ( "test" , configuration . get ( MRJobConfig . TASK_PROFILE_PARAMS ) )
assertEquals ( retryAttempts , jobConf . getInt ( "job.end.retry.attempts" ) )
assertEquals ( manager . isInitialized ( ) , true )
assertEquals ( getClientProtocolProvider ( ) , testCluster . getClient ( new Configuration ( ) ) )
assertEquals ( "Expected exception not thrown" , IOException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , IOException . class , e . getClass ( ) )
assertEquals ( ObsException . class , re . getCause ( ) . getClass ( ) )
assertEquals ( workPath , getWorkOutputPath ( context . getJobConf ( ) ) )
assertEquals ( null , context . getOutputCommitter ( ) . getWorkOutputPath ( ) )
assertEquals ( null , sc . getOutputPath ( ) )
assertEquals ( null , sc . getOutputPath ( ) )
assertNull ( TokenCache . getDelegationToken ( conf ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
AssertPlaceHolder = "Assert.assertTrue(dfsCluster.getFileSystem().isDirectory(new Path(\"/path/to/directory\")));"
AssertPlaceHolder = "Assert.assertTrue(dfsCluster.getFileSystem().isInSafeMode());"
assertEquals ( 0 , lfs . size ( ) )
assertEquals ( JobPriority . < expectedValue > , info . getPriority ( ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , controller . getApplicationID ( ) )
assertEquals ( JobStatus . State . RUNNING , jobStatus . getState ( ) )
assertEquals ( i , ifis . read ( ) )
assertEquals ( "IOException is not thrown" , ioe . getMessage ( ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , client . getJob ( id ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( null , mr . getHistoryServer ( ) )
assertEquals ( 5 , job . getCounters ( ) . findCounter ( CounterGroup1 . COUNTER1 ) . getValue ( ) )
assertEquals ( null , underTest . getCounters ( ) )
assertEquals ( true , result )
assertEquals ( JobState . FAILED , rJob . getJobState ( ) )
assertEquals ( conf , deser )
assertEquals ( conf , deser )
assertEquals ( conf , deser )
assertNotNull ( classLoader )
assertEquals ( "local" , conf . get ( MRConfig . FRAMEWORK_NAME ) )
assertEquals ( "yarn" , conf . get ( MRConfig . FRAMEWORK_NAME ) )
assertEquals ( cls , job . getInputFormatClass ( ) )
assertEquals ( BigDecimal . ZERO , emptyBigDec )
assertEquals ( "" , emptyStr )
assertEquals ( "A" , out )
assertEquals ( "Z" , out )
assertEquals ( "abc" , out )
assertEquals ( "big str" , out )
assertEquals ( "AVeryLongStringIndeed" , out )
assertEquals ( expected , splits . toArray ( ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( partition1 , partition2 )
assertEquals ( partition1 , partition2 )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( "job_0_0" , runJob . getJobID ( ) . toString ( ) )
assertTrue ( outFile . exists ( ) )
assertEquals ( 1 , Mockito . verify ( combinerRunner , Mockito . times ( 1 ) ) . combine ( eq ( puller ) , eq ( pusher ) ) )
assertEquals ( parameter , this . handler . onCall ( command , parameter ) )
assertEquals ( 100L , combiner . getId ( ) )
assertEquals ( kvLength , key . length + value . length )
assertEquals ( mean , wr . read ( data ) , 0.001 )
assertEquals ( median , wr . read ( data ) , 0.001 )
assertEquals ( expectedStdDev , stddev , delta )
assertEquals ( false , fail )
assertEquals ( originalPaths . size ( ) + 1 , harPaths . size ( ) )
assertEquals ( originalPaths . size ( ) , harPaths . size ( ) )
assertArrayEquals ( DATASET , Arrays . copyOfRange ( temp , 0 , l ) )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 0 , 0 } , temp )
assertEquals ( 1 , v . intValue ( ) )
assertThat ( tmp . exists ( ) , is ( true ) )
assertEquals ( 3 , fsKeyB . listStatus ( pathA ) . length )
assertEquals ( 1 , fsKeyB . listStatus ( fileToStat ) . length )
assertNull ( fs . getFileChecksum ( file1 , 0 ) )
assertNotNull ( der )
assertThrows ( IllegalStateException . class , ( ) -> {
assertThat ( counter . get ( ) ) . isEqualTo ( ACTIVE_RETRY_LIMIT )
assertRetryAction ( "Expected NPE trigger failure" , RETRY_POLICY , RetryPolicy . RetryAction . FAIL , new NullPointerException ( "oops" ) , 1 , true )
assertContained ( ex . getMessage ( ) , bucket )
assertEquals ( algorithm . getMethod ( ) , getAlgorithm ( algorithm . getMethod ( ) , key ) . getMethod ( ) )
assertNotNull ( getAlgorithm ( algorithm . getMethod ( ) , key ) )
assertEquals ( "" , c . getS3EncryptionKey ( "" , c ) )
assertNull ( getS3EncryptionKey ( BUCKET , c ) )
assertNull ( lookupPassword ( bucket , conf , baseKey ) )
assertNull ( getMethod ( ) )
assertEquals ( "versionid1" , getRevisionId ( tracker . getObjectAttributes ( ) ) )
assertNotNull ( tracker )
assertEquals ( c , c2 )
AssertPlaceHolder = "assertEquals(secrets, result);"
assertEquals ( TOKEN_KIND , identifier . getKind ( ) )
assertEquals ( TOKEN_KIND , identifier . getKind ( ) )
assertEquals ( "expectedValue" , lastElement ( strings ) )
assertEquals ( "year=2017" , getRelativePath ( new Path ( DATA ) , path ) )
assertEquals ( "year=2017/month=10" , getRelativePath ( BASE , suffix ) )
assertEquals ( basePath . toUri ( ) . relativize ( fullPath . toUri ( ) ) . getPath ( ) , "<expected value>" )
assertEquals ( "expectedValue" , getRelativePath ( basePath , fullPath ) )
assertEquals ( 0 , data . getLength ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( CustomMockTokenProvider . class , tokenProvider . getClass ( ) )
assertEquals ( new FsPermission ( FsAction . ALL , FsAction . WRITE , FsAction . NONE ) , status . getPermission ( ) )
assertEquals ( new FsPermission ( FsAction . ALL , FsAction . WRITE , FsAction . NONE ) , status . getPermission ( ) )
assertEquals ( "Expected exception message not found" , String . format ( NO_ACCESS_TO_CONTAINER_MSG , account , container ) , ex . getMessage ( ) )
assertEquals ( true , renameResult )
assertEquals ( true , renameResult )
assertEquals ( false , deleteResult )
assertEquals ( false , deleteResult )
assertEquals ( "Unable to set Append lease on the Blob" , ioe . getMessage ( ) )
assertEquals ( leaseID , store . getLeaseID ( fullKey ) )
assertTrue ( "Expected file " + targetFile + " doesn't exist" , ! fs . exists ( targetFile ) )
assertTrue ( "Expected file " + destFilePath + " doesn't exist" , ! fs . exists ( destFilePath ) )
assertTrue ( "Expected file " + destFilePath + " doesn't exist" , ! fs . exists ( destFilePath ) )
assertTrue ( "Expected file " + destFilePath + " doesn't exist" , ! fs . exists ( destFilePath ) )
assertEquals ( "expectedValue" , readInputStream ( testAccount . getBlob ( ) . openInputStream ( ) ) )
assertTrue ( fs . exists ( testFile1 ) )
assertEquals ( 0 , result )
assertNotNull ( inputStream )
assertEquals ( writeBuffer , readBuffer )
AssertPlaceHolder = "assertEquals(1, rootls.length);"
assertEquals ( "Expected second create on infinite lease dir to fail" , e . getMessage ( ) )
assertArrayEquals ( new FileStatus [ ] { new FileStatus ( ) } , testFiles )
assertEquals ( permission , fs . getFileStatus ( path ) . getPermission ( ) )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( DEFAULT , USER , FOO , ALL ) } , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertEquals ( 2 , fs . getAclStatus ( filePath ) . getEntries ( ) . size ( ) )
assertEquals ( 0 , fs . getAclStatus ( filePath ) . getEntries ( ) . size ( ) )
assertEquals ( 0 , fs . getDefaultAcl ( filePath ) . size ( ) )
assertEquals ( false , fs . exists ( filePath ) )
assertEquals ( aclSpec , fs . getAclStatus ( filePath ) . getEntries ( ) )
assertEquals ( expectedAclStatus , aclSpec )
assertEquals ( properties , fetchedProperties )
assertArrayEquals ( expected [ i ] . getBytes ( ) , crc64 . getBytes ( testStr [ i ] ) )
assertEquals ( paramMap , qp . getParams ( ) )
assertEquals ( token , cachedToken )
assertEquals ( src , dst )
assertEquals ( 0x01 , der . getTag ( ) )
assertEquals ( true , threwException )
exists ( new File ( target . toString ( ) ) ) ;
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( 4 , checkResult ( listFile ) )
assertEquals ( 6 , checkResult ( listFile ) )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing distcp" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing distcp" , e . getMessage ( ) )
assertEquals ( 2 , target . listFiles ( ) . length )
assertEquals ( 4 , target . listFiles ( ) . length )
assertEquals ( "Exception encountered while testing distcp" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing distcp" , e . getMessage ( ) )
assertEquals ( "Exception encountered while running distcp" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing distcp" , e . getMessage ( ) )
assertEquals ( 4 , target . listFiles ( ) . length )
assertEquals ( 6 , target . listFiles ( ) . length )
assertEquals ( "hdfs://localhost:8020/target/" , OptionsParser . parse ( new String [ ] { "-f" , "hdfs://localhost:8020/source/first" , "hdfs://localhost:8020/source/first" , "hdfs://localhost:8020/target/" } ) )
assertEquals ( "hdfs://localhost:8020/target/" , OptionsParser . parse ( new String [ ] { "hdfs://localhost:8020/target/" } ) )
assertEquals ( "hdfs://localhost:8020/source" , OptionsParser . parse ( new String [ ] { "-f" , "hdfs://localhost:8020/source" } ) )
assertEquals ( "Try -help for more information" , outContent . toString ( ) . trim ( ) )
assertEquals ( new Path ( "hdfs://localhost:8020/target/" ) , getTargetPath ( ) )
assertEquals ( 3 , shouldCopyCount )
assertEquals ( 3 , shouldCopyCount )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 100 , tracker . getDeletedFiles ( ) )
assertEquals ( 10 , tracker . getDeletedFiles ( ) )
assertEquals ( "/" , getRelativePath ( root , child ) )
assertEquals ( "xyz/file" , getRelativePath ( root , child ) )
assertEquals ( "Checksum mismatch" , e . getMessage ( ) )
assertThat ( parser . parseLine ( line ) ) . isEqualTo ( expectedResult )
AssertPlaceHolder = "Assert.assertEquals(expected, in);"
assertEquals ( expected , ? ? ? )
assertEquals ( expected , in )
AssertPlaceHolder = "Assert.assertEquals(expected, parse(new URL(\"url\"), false));"
assertEquals ( expected , ? ? ? )
assertEquals ( expected , parse ( new URL ( "1970-01-01 13:00:00,000" ) , false ) )
assertEquals ( context , trashProcedure . getContext ( ) )
assertEquals ( job , newJob )
assertEquals ( clusterID , nn . getNamesystem ( ) . getClusterID ( ) )
assertEquals ( recurrenceIdTest , getRecurrenceId ( ) )
AssertPlaceHolder = "assertEquals(1, SingleTask.latch.getCount());"
assertEquals ( outputExpect , output )
assertEquals ( outputExpect , output )
assertEquals ( ret , 0 )
assertEquals ( "Return status should be 0" , 0 , returnStatus )
assertEquals ( outputExpect , output )
assertEquals ( 12345 , readTbw . getValue ( ) )
assertEquals ( "yarn.io/test" , ri . getName ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( actual , result )
assertEquals ( actual , result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( result , actual )
assertEquals ( expected , actual )
assert result
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , initSuccess )
assertThrows ( ResourceNotFoundException . class , ( ) -> getDSClient ( ) . run ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> getDSClient ( ) . run ( ) )
assertEquals ( challenge , YarnClientUtils . generateToken ( "localhost" ) )
assertEquals ( response , client . getLastProxyResponse ( CompInstancesUpgradeResponseProto . class ) )
assertEquals ( "Expected IllegalArgumentException to be thrown" , IllegalArgumentException . class , e . getClass ( ) )
fail ( "Expected IllegalArgumentException to be thrown" )
assertEquals ( expectedToken , token )
assertEquals ( expectedResponse , response )
assertEquals ( DecommissionType . NORMAL , request . getDecommissionType ( ) )
assertEquals ( expectedResponse , response )
assertEquals ( expectedResponse , response )
assertEquals ( 1 , response . getStatusCode ( ) )
assertNotNull ( response )
assertEquals ( expectedResponse , response )
assertNull ( newURL )
assertEquals ( useUrl , newURL )
assertEquals ( "expectedChecksum" , getFileChecksum ( file ) )
assertEquals ( "MAPREDUCE-LENGTH-IS-20" , app1 . getApplicationType ( ) )
assertEquals ( true , client . isInState ( Service . STATE . STARTED ) )
assertEquals ( "Node Labels: <label1:exclusivity=true>,<label2:exclusivity=true>" , baos . toString ( "UTF-8" ) )
assertEquals ( 0 , rc )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , fail )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , fail )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , fail )
assertEquals ( false , fail )
assertEquals ( false , fail )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , fail )
assertEquals ( 1 , exitCode )
assertEquals ( 0 , result )
assertEquals ( 1 , exitCode )
assertEquals ( ctx . getResource ( ) , resource )
assertEquals ( Sets . newHashSet ( "abcd" , "efgh" ) , applicationsRequestPBImpl . getApplicationTags ( ) )
assertEquals ( Sets . newHashSet ( "abcd" , "efgh" ) , applicationsRequestPBImpl . getApplicationTags ( ) )
assertThrows ( ClosedChannelException . class , ( ) -> {
assertThrows ( Error . class , ( ) -> {
assertEquals ( 0 , response . getErrors ( ) . size ( ) )
assertNotNull ( re . getMessage ( ) )
assertEquals ( "application_1234_0001" , applicationId . toString ( ) )
assertEquals ( attemptId , entity . getApplicationAttemptId ( ) )
assertEquals ( containerId , entity . getContainerId ( ) )
assertMapEquals ( mgr . getNodeLabels ( ) , ImmutableMap . of ( toNodeId ( "n1" ) , toSet ( "p2" ) ) )
assertEquals ( "Expected exception message" , "expectedMessage" , exception . getMessage ( ) )
assertEquals ( expectedPath , actualPath )
assertEquals ( expectedPath , actualPath )
assertEquals ( null , containerId )
assertEquals ( date , formatISO8601 ( now ) )
assertThrows ( ArithmeticException . class , ( ) -> resourceCalculator . ratio ( newResource ( 1 , 1 ) , newResource ( 0 , 0 ) ) )
assertThat ( ratio , is ( equalTo ( 0.0f ) ) )
assertEquals ( "Expected exception message" , "expected message" , exception . getMessage ( ) )
assertEquals ( "Invalid resource type definition: GPU" , exception . getMessage ( ) )
assertEquals ( TEST_FLOW_NAME , flowName )
assertEquals ( 50000 , port )
assertNotEquals ( port , 0 )
assertEquals ( "<table" , out . toString ( ) . trim ( ) )
assertEquals ( 2 , times ( 2 ) )
assertEquals ( "pre text1\npre text2" , out . toString ( ) . trim ( ) )
assertEquals ( "[TestView1]" , out . toString ( ) )
assertSame ( foobar , injector . getInstance ( Bar . class ) )
assertEquals ( entry . getValue ( ) , uri )
assertNotNull ( client )
assertEquals ( "expectedValue" , response . getPluginName ( ) )
assertEquals ( defaultValue , controller . get ( name , defaultValue ) )
assertEquals ( original . getProto ( ) , copy . getProto ( ) )
assertEquals ( null , request1 . getNodeLabels ( ) )
assertThat ( copy . getNodeId ( ) , is ( equalTo ( request . getNodeId ( ) ) ) )
assertNotNull ( chosen )
assertNotNull ( chosen )
assertEquals ( expectedResponse , response )
assertEquals ( expectedResponse , response )
assertEquals ( subClusterId1 , subClusterId2 )
assertEquals ( sc1 , sc2 )
assertEquals ( FederationStateStoreTestUtil . INVALID , subClusterId )
assertEquals ( false , uam . isHeartbeatThreadAlive ( ) )
assertNotNull ( address )
assertEquals ( true , result )
assertNotNull ( e )
assertEquals ( 10240 , registerResponse . getMaximumResourceCapability ( ) . getMemory ( ) )
assertEquals ( 10 , registerResponse . getMaximumResourceCapability ( ) . getMemory ( ) )
assertEquals ( 10 , containers . size ( ) )
assertEquals ( "Expected password to be retrieved successfully" , "password" , secretManager . retrievePassword ( identifier ) )
assertEquals ( 0 , registerResponse . getResponseId ( ) )
assertEquals ( ContainerState . FAILED , wc . getContainerState ( ) )
assertEquals ( expectedUser , getUser ( ) )
assertEquals ( "expectedContainerId" , getContainerId ( ) )
assertEquals ( "expectedUser" , getUser ( ) )
assertEquals ( expected , ? ? ? )
// <AssertPlaceHolder>
assertEquals ( 1 , ret . size ( ) )
assertEquals ( "." , mockCGroupsHandler . getPathForCGroup ( CGroupsHandler . CGroupController . CPU , "" ) )
AssertPlaceHolder = "verify(numaResourceAllocator, times(1)).releaseNumaResource(containerId);"
assertNotNull ( handler )
assertEquals ( 0 , handler . getResourceUsage ( ) )
assertEquals ( 1 , Mockito . verify ( mockCGroupsHandler , Mockito . times ( 1 ) ) . deleteCGroup ( CGroupsHandler . CGroupController . MEMORY , id ) )
// <AssertPlaceHolder>
assertEquals ( "CGroups handler is not initialized" , exception . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( TEST_CLASS_ID_DECIMAL , parsedClassId )
assertEquals ( "expectedHashValue" , fpgaResourceHandler . getAocxHash ( ) )
assertEquals ( true , exception )
assertEquals ( "container_1481156246874_0001_01_000004" , mockContainer . getContainerId ( ) . toString ( ) )
assertEquals ( "container_1481156246874_0001_01_000004" , mockContainer . getContainerId ( ) . toString ( ) )
assertNotNull ( runtime )
assertNotNull ( runtime )
assertEquals ( MockLinuxContainerRuntime . class . getName ( ) , runtime . getClass ( ) . getName ( ) )
assertEquals ( 1 , runtime . getLaunchedContainers ( ) . size ( ) )
assertEquals ( false , runtime . isPrivilegedContainer ( ) )
assertEquals ( true , runtime . isPrivilegedContainer ( ) )
assertEquals ( true , runtime . isPrivilegedContainer ( ) )
assertEquals ( 1 , runtime . getMounts ( ) . size ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertThrows ( ContainerExecutionException . class , ( ) -> DockerLinuxContainerRuntime . validateHostname ( name ) )
assertEquals ( "Caught expected exception" , ContainerExecutionException . class , e . getClass ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , ContainerExecutionException . class , e . getClass ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertThrows ( ContainerExecutionException . class , ( ) -> RuncContainerRuntime . validateHostname ( name ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
? ? ? testGetCommandOption ( ) { assertEquals ( "expectedValue" , getCommandOption ( ) ) ; } ? ? ?
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( false , spied . verifyAccess ( ) )
assertEquals ( 600000 , interval )
assertEquals ( 2700 , interval )
assertEquals ( 600 , interval )
assertEquals ( true , scriptPath . toFile ( ) . canExecute ( ) )
assertTrue ( ! scriptPath . toFile ( ) . canExecute ( ) )
assertNotNull ( result ) ; // <AssertPlaceHolder>
assertEquals ( "expectedUser" , getUser ( ) )
metrics . getContainerAssignedPerSecond ( ) == 2
assertEquals ( RMAppState . KILLED , app0 . getState ( ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( operation + ": " + getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) )
assertEquals ( "Should have thrown exception" , expectedExceptionClass , ex . getClass ( ) )
assertEquals ( "newqueue" , rmApp . getQueue ( ) )
assertEquals ( DestState . UNHEALTHY , node . getState ( ) )
assertEquals ( DestState . SHUTDOWN , node . getState ( ) )
assertEquals ( DestState . SHUTDOWN , node . getState ( ) )
assertEquals ( "Expected AuthorizationException to be thrown" , AuthorizationException . class , e . getClass ( ) )
assertNotNull ( ni . getHealthReport ( ) )
assertEquals ( NodeAction . REGISTER , getNodeAction ( ) )
assertEquals ( 1 , rm . getUnhealthyNodeCount ( ) )
assertEquals ( 1 , ClusterMetrics . getMetrics ( ) . getNumShutdownNMs ( ) )
assertEquals ( ProportionalCapacityPreemptionPolicy . class , policy . getClass ( ) )
assertEquals ( 0 , matcher . matchResourceUsage ( ) )
assertEquals ( "100" , protoString )
assertEquals ( "Expected YarnException to be thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( 0 , manager . getProfiles ( ) . size ( ) )
assertEquals ( NodeAction . DECOMMISSION , response . getNodeAction ( ) )
assertEquals ( DestState . < expected value > , getState ( ) )
cd . getExitStatus ( )
cd . getPreemptedNode ( ) == "x"
assertEquals ( "a1" , app . getQueue ( ) )
assertEquals ( "Expected exception not thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( RMAppState . FAILED , getState ( ) )
assertNotNull ( e )
assertEquals ( true , fail )
assertEquals ( true , logKeyPresent )
assertEquals ( null , data )
assertEquals ( prevAllocId , request . getAllocationRequestId ( ) )
assertNotNull ( ancestorQueue )
assertNotNull ( ancestorQueue )
assertThat ( trimQueueName ( s ) ) . isEqualTo ( expected )
assertEquals ( "root.someDefaultQueue" , context . getQueue ( ) )
assertTrue ( stdout . contains ( "General options are:" ) )
assertTrue ( stdout . contains ( "General options are:" ) )
assertTrue ( stdout . contains ( "General options are:" ) )
assertEquals ( "Expected number of rules" , expectedNumberOfRules , description . getRules ( ) . size ( ) )
assertEquals ( "expectedValue" , description . getRules ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "Expected number of rules is incorrect" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Expected number of rules is incorrect" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "abc" , fsRule . defaultQueueName )
assertEquals ( Policy . DEFAULT_QUEUE , description . getRules ( ) . get ( 0 ) )
assertEquals ( "Expected rule to be REJECT" , Policy . REJECT , description . getRules ( ) . get ( 0 ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( "expectedValue" , result )
assertEquals ( "FileMetadata[key, 10, 1, file?false]" , res . toString ( ) )
assertEquals ( null , xfoHeader )
assertNull ( response )
assertNull ( response )
assertNotNull ( response )
assertEquals ( 0 , response . getQueueInfoList ( ) . size ( ) )
assertEquals ( "Missing RefreshSuperUserGroupsConfiguration request." , ex . getMessage ( ) )
assertEquals ( "SC-1" , existSubCluster )
assertEquals ( RefreshUserToGroupsMappingsResponse . class , response . getClass ( ) )
assertEquals ( "SC-1" , existSubCluster )
assertNotNull ( getRealm ( ) )
assertNotNull ( response )
assertEquals ( "KILLED" , appState . getState ( ) )
// <AssertPlaceHolder>
assertNotNull ( response )
assertEquals ( null , response )
assertEquals ( "Application_wrong_id" , appId )
assertEquals ( null , response )
assertEquals ( null , response )
assertEquals ( 1 , response . size ( ) )
assertEquals ( 0 , response . size ( ) )
assertEquals ( 0 , response . getNumActiveNodes ( ) )
assertEquals ( 2 , response . getClusterMetrics ( ) . size ( ) )
assertNull ( store . getResource ( key ) )
assertEquals ( beforeScan + 1 , store . metrics . getEntitiesReadToSummary ( ) . value ( ) )
assertEquals ( null , store )
assertEquals ( APPLICATION_ID , rowKey . getAppId ( ) )
assertArrayEquals ( string . getBytes ( ) , encode ( string ) . array ( ) )
assertEquals ( "expectedValue" , auxService . getApplicationId ( ) )
assertEquals ( containerId , auxService . getContainerId ( ) )
assertEquals ( "HistoryManager should be null as AHS is disabled" , null , historyManager )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertNull ( getUriFromTrackingPlugins ( id , list ) )
assertEquals ( new URI ( "http://history.server.net/" ) , result )
assert iterators . size ( ) < GENERATED : "Expected iterators size to be less than GENERATED"
assertEquals ( null , cache . get ( testKey ) )
assert cursors . size ( ) > 0 : "Expected non-empty result set"
assert rows . size ( ) == 1 : "Expected 1 row to be inserted for epoch_copied = " + i
assertEquals ( 0 , rel . getRowCount ( ) )
assertEquals ( 55555 , idxScan . getFilter ( ) . getExpression ( ) . getRight ( ) . getValue ( ) )
assertEquals ( 1 , idxScan . getIndex ( ) . getFields ( ) . size ( ) )
assertEquals ( 1 , idxScan . getIndex ( ) . getStatistics ( ) . getTotalPageCount ( ) )
assertEquals ( "TBL1_T1C7SHORT" , idxScan . getIndexName ( ) )
assertEquals ( pojo1 , pojo2 )
assertEquals ( null , cache . get ( 12L ) )
assertEquals ( "abc" , cache . get ( 1L ) )
assert srv . cacheNames ( ) . contains ( CACHE_NAME + 0 ) : "Cache " + CACHE_NAME + 0 + " was not destroyed"
assert ! thinClient . cacheNames ( ) . contains ( CACHE_NAME + 1 ) : "Cache " + CACHE_NAME + 1 + " was not destroyed"
assertEquals ( initiatorId , new SqlFieldsQuery ( sql ) . getQueryInitiatorId ( ) )
assertNotNull ( nodes )
assert fut . isDone ( )
assertNotNull ( nodes )
assertEquals ( 16 , blob . length ( ) )
assertEquals ( url , "CFG_URL_PREFIX + configURL()" )
assertEquals ( conn . getMetaData ( ) . getURL ( ) , CFG_URL_PREFIX + "cache=" + CUSTOM_CACHE_NAME + '@' + configURL ( ) )
assert rs . getString ( "tag" ) . equals ( "str" )
assertEquals ( 1 , res )
assertEquals ( true , res )
assertEquals ( false , isEmpty )
assertEquals ( i * 100 , ignite ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( i ) )
assert rs . getInt ( "id" ) == 1
assertTrue ( String . valueOf ( o ) , o instanceof BinaryObject )
assertEquals ( "gridCommandHandlerTest" , ret )
assertCacheOperation ( ret , "val0" )
assertNotNull ( ret )
assertNotNull ( grid ( ) )
assertNotNull ( ret )
assertCacheOperation ( ret , "val0" )
assertCacheOperation ( jcache . get ( "appendKey" ) , true )
assertEquals ( "prefix_prependVal" , get ( "key" ) )
assert res != null : "Response is null"
assertEquals ( "1.0" , version ( ) )
assert size == grid ( 0 ) . cachesx ( ) . size ( ) + 1 : "Size is not incremented correctly"
assert cnt == size + 1
assertEquals ( 2 , checkCacheContents ( TBL_NAME , true ) )
assertEquals ( 1 , updatesCnt )
assertEquals ( updatesCnt , expectedUpdatesCnt )
assertEquals ( 2 , updatesCnt )
assertEquals ( true , isRowSet )
assertEquals ( 2 , updatesCnt )
assertTrue ( isRowSet )
assertThrows ( log , new Callable < Object > ( ) {
assertThrows ( log , new Callable < Object > ( ) {
assertEquals ( stmt . isClosed ( ) , true )
assertEquals ( prepared . getSQL ( ) , sqlText )
assertEquals ( "" , conn . nativeSQL ( sqlText ) )
assertNotNull ( meta )
assertEquals ( 1 , upd . executeUpdate ( ) )
assertEquals ( 1 , upd . executeUpdate ( ) )
assertEquals ( word . length ( ) , < expected value >  )
assertEquals ( word . length ( ) , < expected value >  )
assertEquals ( 2 , res . size ( ) )
assertConnectionsCount ( ios , INITIAL_NODES_CNT )
assertEquals ( affinityCache , recreatedAffinityCache )
assertEquals ( affinityCache , recreatedAffinityCache )
assertEquals ( affinityCache , recreatedAffinityCache )
assertEquals ( false , affinityCache . isPartitionAwarenessEnabled ( ) )
assertEquals ( 0 , affinityCache . partitions ( ) )
assert stmts . size ( ) == 50000 : "Expected size to be 50000, but was " + stmts . size ( )
assertNull ( rs ) ;
assertNull ( stmt . getResultSet ( ) ) ;
assertTrue ( nameForIdInCache ( i ) != null )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assertEquals ( true , map . containsKey ( 0 ) )
assertEquals ( 10000 , map . size ( ) )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assert res . size ( ) > 0 : "Result list is empty"
assertEquals ( false , proc . getProcess ( ) . isAlive ( ) )
assertEquals ( true , expEThrown )
assertEquals ( expEThrown , true )
assertThrows ( IgniteException . class , ( ) -> execute ( task , onError ) )
assertThat ( arg . name ( ) , matches ( "^--([a-z]+(-)?)+([a-z]+)" ) )
assertContains ( log , testOutStr , ">>> Printing '" + word + "' on from compute job." )
assertContains ( testOutStr , "Control utility has completed execution at: " )
assertContains ( log , testOut . toString ( ) , "no conflicts have been found" )
assertContains ( log , testOut . toString ( ) , "G100" )
assertEquals ( 32 , cache1 . getConfiguration ( CacheConfiguration . class ) . getAffinity ( ) . getPartitions ( ) )
assertNotNull ( out )
assertThrows ( IllegalArgumentException . class , ( ) -> execute ( "--cache" , "indexes_force_rebuild" , "--illegal_parameter" ) )
assertNull ( output )
assertContains ( log , output , "Found 2 secondary indexes." )
assertDoesNotThrow ( ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertNotNull ( out )
assertDoesNotThrow ( ( ) -> execute ( task , onError ) )
assertContains ( log , testOut . toString ( ) , "[cacheGroup=group1, cacheGroupId=-1237460590, cache=persons-cache-vi, cacheId=-528791027, idx=_key_PK]" )
assertThrows ( Exception . class , ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertNotNull ( task )
assertContains ( log , testOut . toString ( ) , "issues found (listed above)" )
assertContains ( log , testOut . toString ( ) , "Runtime failure on bounds" )
assertContains ( log , out , "typeName=Type_" + typeNum )
assertContains ( log , out , pd . getName ( ) )
assertContains ( log , out , pd . getName ( ) + " = " + pd . get ( ) )
assertThat ( out , containsString ( "firewall settings" ) )
assertEquals ( "TEST_CLUSTER_NAME" , System . getProperty ( "IGNITE_CLUSTER_NAME" ) )
assertEquals ( false , igniteEx . active ( ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , seq1 . get ( ) )
assertContains ( log , testOut . toString ( ) , "LOST partitions:" )
assertEquals ( "The check procedure has finished, no conflicts have been found" , sb . toString ( ) )
assertThrows ( Exception . class , ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertEquals ( expTracingCfg , ? ? ? )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 1 , params . size ( ) )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( Integer . MAX_VALUE , mreg . hitRateMetric ( "hitrate-metric" , "" , getTestTimeout ( ) , 2 ) . add ( Integer . MAX_VALUE ) )
assertEquals ( "STOP" , res )
assertEquals ( srvCnt , ignite0 . cluster ( ) . forServers ( ) . nodes ( ) . size ( ) )
AssertPlaceHolder :
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assert affNodes . size ( ) == 1 : "Expected affinity nodes size to be 1, but was " + affNodes . size ( )
assertEquals ( 2 , cache . get ( key ) )
assertEquals ( key , clientCache . get ( key ) )
assert curSize == cacheSize : "Expected cache size: " + cacheSize + ", Actual cache size: " + curSize
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( val , clientCache . get ( key ) )
assert expectedNullCnt == nullOps . size ( ) : msg
assert client . cluster ( ) . nodes ( ) . size ( ) > 0 : "No nodes found in the cluster"
assertEquals ( 0 , evtsTriggered . get ( ) )
assertEquals ( "test-worker" , worker . getName ( ) )
assert invalidPrj . size ( ) == 2
assert size >= 0 : size
assertEquals ( map . containsKey ( 0 ) , false )
assertEquals ( null , fut . get ( ) )
assertEquals ( 10 , mappingFileStore . readMapping ( PLATFORM_ID , TYPE_ID ) )
assertEquals ( "expectedValue" , reader . readLine ( ) )
assertEquals ( 0 , grid . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( "expectedValue" , fut . get ( ) )
assertEquals ( 0 , evts . enabledEvents ( ) . length )
assertEquals ( ignite , ignite2 )
assertEquals ( ignite , ignite2 )
assertEquals ( 0 , checkpointSpi . get ( "task-checkpoints" ) . size ( ) )
assert prj != null : "prj is null"
assertThat ( processor . propagate ( variant . left , variant . right ) , is ( equalTo ( b . build ( ) ) ) )
assertEquals ( State . END , check ( ) )
assertEquals ( "Expected error." , e . getMessage ( ) )
assertEquals ( null , g . compute ( ) . withNoFailover ( ) . execute ( new TestTask ( true ) , null ) . get ( key ) )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( externalize ( msgOut , marsh ) )
assertNotNull ( externalize ( msgOut , marsh ) )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assert comp . affinityRunAsync ( DEFAULT_CACHE_NAME , 1 , new FailRunnable ( ) ) . get ( ) == null
assertEquals ( null , fut . get ( ) )
assert latch . getCount ( ) == 0 : "Latch count is not zero"
assertEquals ( false , ignite . event ( ) . isEnabled ( ) )
assertEquals ( 10000 , map . size ( ) )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 43 , - 97 } , buf . array ( ) )
assertEquals ( null , res . get ( field . getName ( ) ) )
assertEquals ( new Date ( 22222 ) , res . dateArr [ 0 ] )
assertEquals ( new Timestamp ( 333444555 ) , res . tsArr [ 0 ] )
assertEquals ( new UUID ( 2 , 2 ) , res . uuidArr [ 0 ] )
assertEquals ( 'b' , res . cArr [ 0 ] )
assertEquals ( 2.0 , res . dArr [ 0 ] )
assertEquals ( 2.0f , res . fArr [ 0 ] )
assertEquals ( 2 , res . lArr [ 0 ] )
assertEquals ( 2 , res . iArr [ 0 ] )
assertEquals ( 2 , res . sArr [ 0 ] )
assertEquals ( 2 , res . bArr [ 0 ] )
assertEquals ( "b" , res . strArr [ 0 ] )
assertEquals ( mutObj , arr [ 1 ] )
assert list . isEmpty ( )
assertEquals ( src , res )
assertEquals ( src , res )
assertEquals ( src , res )
bo . hashCode ( )
assertEquals ( obj , deserialized )
assertEquals ( new GridMapEntry < > ( 1 , "a" ) , res . getField ( "foo" ) )
metadata . getField ( "xx567" ) . equals ( "b" )
assertEquals ( "b" , metadata . fieldTypeName ( ) )
assertNotNull ( mutableObj . getField ( "foo" ) )
assertThat ( mutableObj . getField ( "foo" ) ) . isEqualTo ( new Timestamp ( 100020003 ) )
assertNotNull ( mutableObj . getField ( "foo" ) )
assertThat ( mutableObj . getField ( "foo" ) ) . containsExactly ( new Timestamp ( 100020003 ) )
assertEquals ( container . getField ( "foo" ) , deserialized . getField ( "foo" ) )
assert ! wrapper . hasField ( "str" )
assert wrapper . hasField ( "str" ) == false
assertEquals ( typeName , actualTypeName )
assertNotNull ( date )
assertEquals ( ts . getNanos ( ) , 1000 )
assertEquals ( dateArr , binaryObjectBuilder . getField ( "dateArr" ) )
assertEquals ( tsArr , ? ? ? setField ( "fieldName" , tsArr ) . getField ( "fieldName" ) )
assert ! builder . hasField ( "str" )
assert builder . getField ( "str" ) == null
assertEquals ( outer . foo , "b" )
assertEquals ( true , enableJdkMarshaller )
assertNotNull ( aff . mapKeyToNode ( new TestObject ( i ) ) )
assertNotNull ( binaries ( ) . toBinary ( new TestObject3 ( ) ) )
assertEquals ( IndexKeyType . TIMESTAMP , t . getType ( ) )
assertEquals ( false , map . containsKey ( 0 ) )
assertEquals ( "expectedValue" , map . get ( key ) )
assertEquals ( "John Doe" , val . getName ( ) )
assertEquals ( "Expected message" , "Expected message" , errMessage )
assertEquals ( data . size ( ) , cache . size ( ) )
assertEquals ( KEYS_CNT , cache . size ( ) )
assertNotNull ( cause )
assertNull ( dst )
assertEquals ( "newType" , marshCtx . getClassName ( platformType , mapping . typeId ( ) ) )
assert rc . getAddresses ( ) . size ( ) == 2 : "Expected 2 addresses, but found " + rc . getAddresses ( ) . size ( )
assertEquals ( 0 , clientCache . get ( keyForUnknownNode ) )
assertEquals ( id0 , ig0 . cluster ( ) . id ( ) )
assertEquals ( 0 , nodes . get1 ( ) . context ( ) . encryption ( ) . getReencryptionRate ( ) )
assert rmts . size ( ) == 4 : "Expected 4 remote nodes"
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 1 , baselineEvtLatch . getCount ( ) )
assert fut . get ( ) != null
assertEquals ( "Test message: PASSED" , outContent . toString ( ) . trim ( ) )
assertEquals ( val , unmarshal ( marshal ( new TestClass2 ( ) ) ) )
assert val == true
assertEquals ( 100 , obj . value )
obj . value ( 100 )
assertEquals ( 0 , cacheMetricsRegistryName ( "other-cache" , false ) . size ( ) )
assertNull ( metricRegistry ( ignite . name ( ) , CACHE_METRICS , n ) )
assertNotNull ( systemTime )
assertEquals ( names , res )
assertEquals ( State . END , check ( ) )
assertEquals ( 0.0 , loadVal , 0.001 )
assertThat ( phyMem , equalTo ( expectedValue ) )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedResult" , actualRes )
assertThat ( loadedPages ( ) . size ( ) ) . isEqualTo ( expPages )
assertEquals ( 0 , mem . pagesAllocated ( ) )
assert ! clientCfg . getDataStorageConfiguration ( ) . getDefaultDataRegionConfiguration ( ) . isPersistenceEnabled ( ) : "Persistence should be disabled"
assertEquals ( aff . getClass ( ) , ? ? ? )
assert clientMode
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
assertEquals ( "expectedValue" , cache . get ( key ) )
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
assertEquals ( ACTIVE_READ_ONLY , grid ( 0 ) . cluster ( ) . state ( ) )
A . assertEquals ( 0 , grid ( 0 ) . cluster ( ) . state ( ) )
assertEquals ( 0 , grid ( 0 ) . cluster ( ) . state ( ) . ordinal ( ) )
A . assertEquals ( 0 , grid ( 0 ) . cluster ( ) . state ( ) . ordinal ( ) )
assertEquals ( ACTIVE_READ_ONLY , grid ( 0 ) . cluster ( ) . state ( ) )
assertEquals ( ACTIVE_READ_ONLY , grid ( 0 ) . cluster ( ) . state ( ) )
cache . get ( key )
assertThat ( grid . cache ( CACHE1 ) . metrics ( ) . getCacheSize ( ) ) . isEqualTo ( 0 )
assertNotNull ( engine . cache ( ) )
assertNotNull ( ignite . context ( ) . cache ( ) . cache ( cacheName ) )
assertThrows ( null , ( ) -> cfg . setWalSegmentSize ( i ) , IllegalArgumentException . class , null )
assert cache . get ( "key" ) == 5
assertEquals ( 2 , cacheAsync . future ( ) . get ( ) )
assertEquals ( 3 , cache . get ( "key3" ) )
assertEquals ( 0 , cache . size ( ) )
assert c . localSize ( ) == 0 : "Cache is not empty."
assertEquals ( "UnsupportedOperationException should be thrown" , UnsupportedOperationException . class , assertThrows ( UnsupportedOperationException . class , ( ) -> remove ( ) ) )
AssertPlaceHolder = "Assert.assertTrue(tx.isRollbackOnly());"
AssertPlaceHolder = "assertThrows(UnsupportedOperationException.class, () -> remove());"
AssertPlaceHolder = "Assert.assertTrue(tx.isRollbackOnly());"
cache . localMetrics ( )
assert cache . localMetrics ( ) . getAverageRemoveTime ( ) > 0
assert cache . localMetrics ( ) . getAverageRemoveTime ( ) > 0
assert averageRmvTime >= 0
assert cache . localMetrics ( ) . getAverageRemoveTime ( ) >= 0
assert cache . localMetrics ( ) . getAverageGetTime ( ) > 0
assert cache . localMetrics ( ) . getAveragePutTime ( ) > 0
assert cache . localMetrics ( ) . getAveragePutTime ( ) > 0
assertEquals ( 0 , cache . localMetrics ( ) . getCacheSize ( ) )
assertEquals ( expectedValue , get ( field , row ) )
assertNotNull ( parts )
assertEquals ( part , 5 )
assertEquals ( 1 , assignment . get ( part ) . size ( ) )
assertEquals ( expPart , affinity ( ) . partition ( affinityMapper ( ) . affinityKey ( key ) ) )
assertEquals ( 5000 , cnt . get ( ) )
assertEquals ( "Expected size of map is incorrect" , 9999 , map . size ( ) )
assertEquals ( "val1" , oldVal . get ( ) )
assertNotNull ( get ( key ) )
assertThat ( flags , equalTo ( expectedFlags ) )
assertNotEquals ( 0 , flags )
assertEquals ( g0 , g1 . affinity ( ) )
assertEquals ( 0 , cnt )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . READY , check ( ) )
assertEquals ( State . READY , check ( ) )
assert ! suspended . get ( )
assertNotNull ( tuple )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( Collections . emptySet ( ) , focalMethod ( ) )
assertEquals ( Collections . emptySet ( ) , focalMethod ( ) )
assertEquals ( entry . getValue ( ) , expectedValue )
assertEquals ( expectedValue , entry . getValue ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( 0 , c1 . size ( ) )
assertEquals ( null , cache . get ( key ( i ) ) )
assert all . size ( ) == 1 : "Expected size of 1, but found " + all . size ( )
assertNotNull ( node . cache ( name ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> cachingProvider . getCacheManager ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertNotNull ( sortedFuts . get ( j ) )
assertEquals ( 2 , ignite0 . cacheNames ( ) . size ( ) )
assertEquals ( 2 , grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( CNTR_KEY ) )
assertEquals ( 2 , grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( CNTR_KEY ) )
assert ex . cluster ( ) . nodes ( ) . size ( ) == 3 : "Expected 3 nodes in the cluster"
assertEquals ( i , cache1 . get ( i ) )
assertEquals ( true , metaDir . isDirectory ( ) )
assertEquals ( "zzz" , c . get ( binKey ) )
assertEquals ( "zzz" , c . get ( binKey ) )
assertEquals ( "zzz" , c . get ( binKey ) )
assertThat ( isEmpty ) . isTrue ( )
assertEquals ( 10 , atomic . get ( ) )
assertEquals ( colCfg , getQueueCache ( queue1 ) )
assertEquals ( TRANSACTIONAL , colCfg2 . getAtomicityMode ( ) )
assertEquals ( "Failed to get cache because it is a system cache" , e . getMessage ( ) )
assertEquals ( false , countReachedZero )
AssertPlaceHolder = "Assert.assertNotNull(cache);"
assertEquals ( BATCH_SIZE + 1 , seq . configuration ( ) . getAtomicSequenceReserveSize ( ) )
seq . incrementAndGet ( )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( true , isAll ( x , p ) )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( true , isAll ( x , p ) )
assertEquals ( true , isAll ( x , p ) )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( true , isAll ( x , p ) )
assertEquals ( x , ? ? ? )
assertEquals ( 0 , map . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( c . size ( ) , expectedSize )
act . accept ( new FullPageId ( pageId , cacheId ) , val )
assertEquals ( numOfSrvs , cache . size ( ) )
assertEquals ( null , ? ? ? grid ( ) )
assertNotNull ( c , "c" )
assertEquals ( 10000 , map . size ( ) )
seq . get ( )
seq . get ( )
seq . get ( )
assertEquals ( 1L , seq . get ( seqName ) )
seq . get ( ) == 5
assertEquals ( 5 , seq . get ( seqName ) )
assertEquals ( 10 , seq . get ( ) )
assertEquals ( 17 , seq . get ( seqName ) )
assertEquals ( incCnt * threadCnt , seq . get ( ) )
assertEquals ( cache . get ( i ) , new TestValue ( i ) )
assertEquals ( 0 , cache0 . get ( i ) )
assertEquals ( 1 , cacheC . apply ( getTestIgniteInstanceName ( 0 ) ) . length )
assertEquals ( 0 , ignite0 . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( 1 , IgniteSystemProperties . getInteger ( IGNITE_EXCHANGE_HISTORY_SIZE , 0 ) )
assertEquals ( 100 , cache . size ( ) )
assertEquals ( val , i )
assertEquals ( nodeCnt , cnt )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertEquals ( false , grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isPrimary ( txNode , key ) )
assertEquals ( false , grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isBackup ( txNode , key ) )
assertEquals ( false , grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isPrimary ( txNode , key ) && grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isBackup ( txNode , key ) )
assert keys . size ( ) == expectedSize : "Size of keys is not as expected"
assertEquals ( false , entry . isLocked ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . READY , check ( ) )
assert fullCacheSize == size : "Expected cache size: " + size + ", Actual cache size: " + fullCacheSize
assert c . localPeek ( key , CachePeekMode . ONHEAP ) == null
assertEquals ( beforeSize , cache1 . localMetrics ( ) . getSize ( ) )
assert primary . size ( ) > 0 : "Primary set is empty"
assertNotNull ( ignite . affinity ( DEFAULT_CACHE_NAME ) . mapKeyToNode ( key ) )
assert cache . localSize ( ) == 0
cache . getAndPut ( key , val )
assertEquals ( val , cache . get ( key ) )
cache . getAndPut ( key , val )
cache . putIfAbsent ( key , val )
cache . putIfAbsent ( key , "expectedValue" )
cache . putIfAbsent ( key , "expectedValue" )
part . assertEmpty ( )
assertNull ( cache . get ( key ) )
assertEquals ( State . READY , check ( ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( lsnr )
cache . localPeek ( key )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( State . END , check ( ) )
assertEquals ( expectedActivationHash , activationHash )
assertEquals ( true , clusterActive )
assert cache . size ( ) == 1 : "Cache size is not equal to 1"
assertNull ( ig . get ( key ) )
assertEquals ( i , queue . poll ( ) )
assert allMemPlcs . isEmpty ( ) : "allMemPlcs is not empty"
assertEquals ( 10000 , map . size ( ) )
assertEquals ( ClusterState . ACTIVE , grid ( ) . cluster ( ) . state ( ) )
assertEquals ( 100 , partitions . size ( ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( 0 , client . cache ( DEFAULT_CACHE_NAME ) . preloadedPartitions ( ) . size ( ) )
assertEquals ( 0 , client . cache ( DEFAULT_CACHE_NAME ) . preloadedPartitions ( ) . size ( ) )
assertEquals ( expectedValue , get ( key ) )
assertEquals ( State . END , check ( ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( cache . get ( i ) , cacheRestart . get ( i ) )
assertEquals ( true , srv . isEmpty ( ) )
assertEquals ( State . READY , check ( ) )
assertEquals ( new IndexedObject ( k + 1 ) , cache1 . get ( k ) )
assertEquals ( "Checkpoint reason is incorrect" , "Too big WAL size" , checkpointReason )
assertEquals ( crc0 , crc1 )
assertEquals ( 1 , cache0 . size ( ) )
assertEquals ( i + 1 , map . get ( i ) )
assertEquals ( ig . name ( ) , pageLockTrackerMXBean . getIgniteInstanceName ( ) )
assertEquals ( 10000 , metaStorage . size ( ) )
assertEquals ( 50000 , metaStorage . size ( ) )
assertEquals ( false , ignite . resetLostPartitions ( Arrays . asList ( "myCache" ) ) )
assertEquals ( 0 , backoff . getState ( ) )
assertThatThrottlingHappened ( throttle )
assertThatThrottlingHappened ( throttle )
cache . get ( key )
assertEquals ( "value" , cache . get ( 1 ) )
assertEquals ( initVMsize , committedVMSize )
assertNotNull ( map . get ( next . getGroupId ( ) , next . getPageId ( ) ) )
assertEquals ( 100_000 , cache . size ( ) )
assertPartitionsSame ( res )
assertPartitionsSame ( res )
assertEquals ( iterations , createdThreads )
assertEquals ( "Expected cache name is not equal to actual cache name" , "<expectedCacheName>" , ignite . cache ( "<actualCacheName>" ) . getName ( ) )
assertEquals ( "value" , snp . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
io ( ) . getTrackingPageIO ( )
assertEquals ( 3000 , cache . size ( ) )
assertNotNull ( tracker ( ignite ) )
assertNull ( future . get ( ) )
assertEquals ( 4 , aware . getLastArchivedAbsoluteIndex ( ) )
assertNotNull ( get ( key ) )
assertEquals ( 5 , aware . curAbsWalIdx ( ) )
assertNotNull ( lock ( 5 ) )
assertEquals ( 5 , aware . get ( 10 ) )
assertThrows ( AssertionError . class , ( ) -> aware . unlock ( 7 ) )
assert srv . cache ( DEFAULT_CACHE_NAME ) . size ( ) == size : "Incorrect cache size"
assertNull ( npe . get ( ) )
assertEquals ( "client" , client . name ( ) )
assertEquals ( expectedValue , cache . get ( key ) )
assertEquals ( 1 , latch . getCount ( ) )
assert node1 . cluster ( ) . nodes ( ) . size ( ) == 2 : "Expected 2 nodes in the cluster"
assertEquals ( size , backupQueueSize ( ) )
assertEquals ( max , cntr . get ( id . get ( ) ) )
assertEquals ( grid ( 0 ) . cache ( caches [ i ] . getName ( ) ) . get ( 1 ) , ( i + 1 ) * 10 )
assertEquals ( i + 1 , futs . get ( i ) . get ( ) )
assert error == null
assert res . size ( ) == ENTRIES_NUM : "Incorrect number of entries processed"
assert ignite0 . cluster ( ) . state ( ) == ACTIVE : "Cluster state is not ACTIVE"
assertThrows ( BaselineAdjustForbiddenException . class , ( ) -> ignite0 . cluster ( ) . setBaselineTopology ( Collections . singletonList ( ignite0 . localNode ( ) ) ) )
assertEquals ( "expectedClusterName" , clusterName )
assertEquals ( "test" , grid . utilityCache ( ) . get ( key ) )
assertThat ( client . cluster ( ) . state ( ) , is ( ClusterState . ACTIVE_READ_ONLY ) )
assertEquals ( false , grid . cluster ( ) . state ( ) . isActiveReadOnly ( ) )
assertEquals ( 0 , map . size ( ) )
assert expCnt == get ( key )
assertNotNull ( get ( key ) )
assertNotNull ( get ( key ) )
assertNotNull ( get ( key ) )
assertEquals ( true , s )
assertNotNull ( topic )
assert g . get ( key ) == null
assertEquals ( 0 , ignite . cluster ( ) . forClients ( ) . nodes ( ) . size ( ) )
assertEquals ( null , pair )
assertEquals ( map . get ( key ) , cache . get ( key ) )
assertEquals ( v0 , cache . get ( k ) )
assertEquals ( "short-value" , cache . get ( k0 ) . getValue ( ) )
cache . get ( i )
assertEquals ( false , failed )
assertEquals ( 0 , ignite . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( 1 , cache . size ( ) )
A . assertion ( "bufSize > 0" )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( "value" , ignite . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
metastorage ( 0 ) . read ( "key" ) . equals ( "value" )
metastorage ( i ) . read ( key ) == val
ignite . context ( ) . distributedMetastorage ( ) . write ( "key" , "value" )
assertEquals ( null , histCache . get ( key ) )
assertEquals ( 0 , versionKey ( ) . length ( ) )
assert size == 0 : "Expected size to be 0, but was " + size
assert size == 0 : size
assertEquals ( translated , SqlListenerUtils . translateSqlWildcardsToRegex ( str ) )
assertEquals ( ignite . rest ( ) , ? ? ? )
assertEquals ( 0 , map . size ( ) )
assertThrowsWithCause ( ( ) -> forbidden ( clientMode ) . createCache ( CACHE_NAME ) , SecurityException . class )
assertNull ( node . cache ( CACHE_NAME ) )
assertEquals ( "Expected cluster to be created" , cluster , RelOptCluster . create ( planner ( ) , ctx . rexBuilder ( ) ) )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( ClientState . ACTIVE , client . cluster ( ) . state ( ) )
assertThrowsWithCause ( ( ) -> client . cache ( CACHE ) . put ( "key" , "value" ) , ClientAuthorizationException . class )
assertNotNull ( cache . cache ( "key" ) )
assert insertedKeys . size ( ) == entriesCnt : "Expected " + entriesCnt + " keys to be inserted, but found " + insertedKeys . size ( ) + " keys."
assertThrowsWithCause ( ( ) -> compute ( grid ( FORBIDDEN ) ) . call ( c ) , AccessControlException . class )
assertThrowsWithCause ( ( ) -> compute ( grid ( FORBIDDEN ) ) . call ( c ) , AccessControlException . class )
assert res . size ( ) == NODES_CNT : "Incorrect number of results"
assertEquals ( "expectedValue" , svc . hello ( ) )
assertThat ( client . services ( ) . serviceDescriptors ( ) ) . hasSize ( NUM_SERVICES )
assertThat ( latch . getCount ( ) , is ( 0L ) )
assertEquals ( nodeCount ( ) , g . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( 10 , svc . get ( ) )
assertEquals ( 0 , svc . get ( 0 ) )
assertNotNull ( svc . get ( key ) )
assertEquals ( topVer , evt instanceof DiscoveryCustomEvent ? null : this . topVer )
assertEquals ( reqId , evt . customMessage ( ) . id ( ) )
assertNotNull ( originNodeId ( ) )
assertEquals ( srvcId , < expectedValue >  )
assertEquals ( true , map . containsKey ( 0 ) )
assertEquals ( countsTillCb , cntr . get ( ) )
assertEquals ( map . size ( ) , 9999 )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( true , macs . isEmpty ( ) )
assertEquals ( "Expected MD5 value" , "Expected MD5 value" , md5 )
assertThat ( addrs . size ( ) , is ( equalTo ( hostNames . size ( ) ) ) )
AssertPlaceHolder = "Assert.assertFalse(logMessagesCollector().hasWarnings());"
assertEquals ( false , deleted )
assert deleted
assertNull ( map . get ( key ) )
assertNull ( map . get ( key ) )
map . remove ( "key" )
assertEquals ( 4999950000L , cntr . get ( ) )
assert directPositionMap . size ( ) == 4
assertEquals ( 2 , chain . get ( ) )
assertEquals ( strs , res )
assertEquals ( strs , res )
assertNull ( err . get ( ) )
assertEquals ( "Expected output" , obj . toStringAutomatic ( ) )
assertEquals ( manual , automatic )
assertEquals ( "IgniteTxKey [remAmnt=123, remTerm=1, apr=null, edf=null]" , k . toString ( ) )
assert set . contains ( "v1" )
assert set . isEmpty ( ) : "Set should be empty after calling clear()"
assertNotEquals ( new Date ( 0 ) , date )
assert set . size ( ) == size
assertEquals ( STRIPE_COUNT , holdCnt )
assertEquals ( STRIPE_COUNT , holdCnt )
assertEquals ( 0 , val )
assertEquals ( new DummyObject ( k ) , c2 . get ( k ) )
assertEquals ( clsName , String . class . getName ( ) )
assertEquals ( nonJavaClassName , marshCtx1 . getClassName ( ( byte ) 2 , 101 ) )
assertEquals ( sumPopulated , sumQueried )
assertNull ( failure . get ( ) )
assertNull ( failure . get ( ) )
assertNull ( failure . get ( ) )
assertNull ( failure . get ( ) )
assertNull ( failure . get ( ) )
assertEquals ( 1 , cache . size ( ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( cli . createCache ( "Can_create_cache_after_compute_fail" ) )
assertThrowsWithCause ( ( ) -> {
assertEquals ( 1 , fIntBoxed )
assertEquals ( 1 , val )
assertEquals ( val , ? ? ? )
assertEquals ( State . READY , check ( ) )
assertEquals ( "Failed to wait for establishing inverse connection (node left topology): 67cf0e5e-974c-463a-a1f2-915fe3cdd3e7" , exception . getMessage ( ) )
assertEquals ( null , clusterTopologyCheckedException ( ) )
assertEquals ( "test" , testCache . get ( "test" ) )
assert clients . size ( ) == expectedSize
assert res . get ( n ) == true
assert res . get ( n ) == true
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assert nodes . size ( ) == expectedSize
assertEquals ( "Expected exception not thrown" , ClusterTopologyException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Expected map to contain key 0" , false , map . containsKey ( 0 ) )
assertEquals ( "Expected map to contain key 0" , false , map . containsKey ( 0 ) )
assertEquals ( null , client . get ( key ) )
assertEquals ( true , res )
assert size >= 0 : size
assertEquals ( false , fut . get ( ) )
assertEquals ( null , dynamicIpFinder . getAddresses ( ) )
assertEquals ( "expectedValue" , rejoinAttr )
assertEquals ( port0 , getDiscoveryPort ( grid ( 0 ) ) )
assert ignite2 . cluster ( ) . nodes ( ) . size ( ) == 3 : "Expected 3 nodes in the cluster"
assertEquals ( 0 , ignite0 . cacheNames ( ) . size ( ) )
assert node . cluster ( ) . nodes ( ) . size ( ) == 4 : "Expected 4 nodes in the cluster"
assertEquals ( State . READY , check ( ) )
assert size >= 0 : size
assertEquals ( 10000 , map . size ( ) )
assert orderedNodes . size ( ) == allNodes . size ( ) : "The size of orderedNodes is not equal to the size of allNodes"
assert orderedNodes . size ( ) == allNodes . size ( ) : "Size of orderedNodes is not equal to size of allNodes"
assertEquals ( firstNode , secondNode )
assertEquals ( "Expected exception not thrown" , IgniteException . class , e . getClass ( ) )
assertEquals ( false , proxy . getProcess ( ) . getProcess ( ) . isAlive ( ) )
assertEquals ( URI . create ( resUrl . toExternalForm ( ) ) , ? ? ? )
assert filteredClasses . size ( ) == expectedSize
assert filteredClasses . size ( ) == classes . size ( ) / 2
assertEquals ( State . READY , check ( ) )
assertEquals ( 1 , cntr . get ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( "1" , echo . getLogs ( ) . get ( 0 ) )
assert cp2 . size ( ) == 4
assertEquals ( allSize , size1 * 2 , 0.01 )
assertEquals ( allSize , size1 + size2 )
assertEquals ( allSize , size1 + size2 )
assertEquals ( "bar" , cache . get ( "foo" ) )
assertEquals ( size , CNT / 10 + CNT )
assertEquals ( false , qry . isEmpty ( ) )
assertEquals ( 2 , result )
assertEquals ( isEmpty , true )
assert ignite . cluster ( ) . forAttribute ( "metadata" ) . nodes ( ) . size ( ) == 1
assert ignite . cache ( DEFAULT_CACHE_NAME ) . size ( ) == threadsNum : "Incorrect cache size"
assert entries . size ( ) == < expected size > : entries . size ( )
assertThat ( qry . getAll ( ) . isEmpty ( ) , is ( isEmpty ) )
assert all . size ( ) == 3 : "Expected size to be 3"
assert ( ( Value ) entry . get ( 0 ) ) . str . equals ( "after" ) : "Assertion failed: entry.get(0).str is not equal to 'after'"
assertEquals ( 0 , all . size ( ) )
assertEquals ( "after" , ( ( Value ) all . get ( 0 ) . get ( 0 ) ) . str )
assert clientNode . cache ( PERSON_CACHE ) . size ( ) == size : "Expected size: " + size + ", Actual size: " + clientNode . cache ( PERSON_CACHE ) . size ( )
assertEquals ( 0 , qry . getColumns ( ) . size ( ) )
assert qry . size ( ) == size
assertEquals ( partsFilled , aff . partitions ( ) )
assert partsFilled == aff . partitions ( ) : "Incorrect number of partitions filled"
assertEquals ( i , cache . get ( i ) . getValue ( ) )
assertThrows ( IgniteException . class , ( ) -> {
assertThrows ( IgniteException . class , ( ) -> {
assertNotNull ( entry . getKey ( ) )
assertThat ( qry . getAll ( ) ) . isEmpty ( )
assert res . getAll ( ) . size ( ) > 0 : "No results found"
assertNotNull ( p . get ( id ) )
assertTrue ( map . containsKey ( 0 ) )
assertEquals ( 3 , cache . get ( new Key ( 1 , 2 ) ) . getField ( ) )
assertEquals ( 100 , cnt )
assertEquals ( 0 , ignite . cache ( cacheName ) . size ( ) )
assertEquals ( "Expected exception not thrown" , expectedExceptionClass , e . getClass ( ) )
assert qry . getAll ( ) . size ( ) == size
assertEquals ( 0 , cnt )
assert qry . getAll ( ) . size ( ) == keyCnt : "Incorrect number of entries in cache"
AssertPlaceHolder = "Assert.assertTrue(idxPaths.isEmpty());"
assertEquals ( 0 , grid ( ) . cache ( "TEST" ) . size ( ) )
assert size >= 0 : size
assertEquals ( false , n . cluster ( ) . state ( ACTIVE ) )
assertEquals ( DATA_REGION_NAME , ccfg . getDataRegionName ( ) )
assertEquals ( v1 , rv1 )
assertEquals ( State . READY , check ( ) )
assertEquals ( State . READY , check ( ) )
assert res . size ( ) == 2 : "Expected size to be 2, but actual size is " + res . size ( )
assertExistIndexRoot ( cache , newTreeName , segments , true )
assertExistIndexRoot ( cache , oldTreeName , segments , true )
assertNotNull ( res )
assertThat ( stopRebuildIndexes ( n -> n . cluster ( ) . state ( INACTIVE ) , true ) ) . isTrue ( )
assert conns . size ( ) > 0 : "No client connections found"
assertEquals ( exp , rows )
assertEquals ( exp , rows )
assertEquals ( exp , rows )
assert keys . size ( ) == 2 : "Expected 2 keys, but found " + keys . size ( )
assert keys . size ( ) == 2 : "Expected 2 keys to be locked, but found " + keys . size ( )
assertEquals ( exp , rows )
assertEquals ( exp , rows )
assertEquals ( 42 , cache . get ( 12 ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( cache . get ( i ) )
assertEquals ( null , cache . get ( 1 ) )
assertContains ( log , b . toString ( ) , "The check procedure has finished, no conflicts have been found." )
assertEquals ( "RegularPeter0" , cache . get ( 0 ) )
assertThrows ( log , ( ) -> sql ( "insert into test (id1, id2, val) values (1, null, 1);" ) , TransactionDuplicateKeyException . class , "Duplicate key during INSERT" )
assertThrows ( log , ( ) -> sql ( "insert into test(id1, val) values(null, 1);" ) , TransactionDuplicateKeyException . class , "Duplicate key during INSERT" )
assertEquals ( testObj , selectData . get ( 0 ) . get ( 0 ) )
assert cursor . iterator ( ) . hasNext ( ) : "No results found"
assertEquals ( 10 , act . get ( 0 ) . get ( 0 ) )
assertNotNull ( cursor )
assertNotNull ( cache . get ( key1 ) )
assertNotNull ( cache . get ( key1 ) )
assertEquals ( size , 0 )
assertEquals ( cache . get ( key1 ) , okValue )
assertEquals ( ERR_MSG , cache . get ( key2 ) , badValue )
assertNotNull ( cache . get ( key1 ) )
assertThrows ( log , new Callable < Object > ( ) {
assert < AssertPlaceHolder > : < AssertPlaceHolder >
assert cache . get ( key1 ) == null : "Expected value to be null after invoking delete"
assert cache . containsKey ( key1 ) : "Key1 not found in cache"
assert cache . get ( key1 ) == null : "Expected value to be null"
assert cache . size ( ) == expectedSize
assertEquals ( 1 , ccfg . getQueryEntities ( ) . size ( ) )
assert result . size ( ) == 2
assert result . size ( ) == 2
assertNotNull ( result )
assert result . size ( ) == 1
assert result . size ( ) == 2
assert result . size ( ) == 1
assert result . size ( ) == 2 : "Expected result size to be 2, but was " + result . size ( )
assertEquals ( 2 , result . size ( ) )
assert result . size ( ) == 2
assert result . size ( ) > 0 : "Result size should be greater than 0"
assert res . size ( ) == expSize : "Expected size: " + expSize + ", Actual size: " + res . size ( )
assertEquals ( expSize , cache . size ( ) )
assert res . size ( ) == SIZE : "Expected size: " + SIZE + ", Actual size: " + res . size ( )
cache . get ( key )
assert results . size ( ) > 0 : "Results list is empty"
assert r . size ( ) == expectedSize : "Expected size: " + expectedSize + ", Actual size: " + r . size ( )
assert r . size ( ) == 1024 : "Expected size to be 1024, but was " + r . size ( )
assertNull ( res )
assertEquals ( 3 , res . size ( ) )
assertEquals ( ClusterState . INACTIVE , grid ( 0 ) . cluster ( ) . state ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( 1 , grid ( 0 ) . context ( ) . query ( ) . querySqlFields ( new SqlFieldsQuery ( SQL_TEXT ) . setSchema ( DEFAULT_CACHE_NAME ) , true ) . getAll ( ) . size ( ) )
assertEquals ( obj , cache . get ( obj . key ( ) ) )
assertNotNull ( cache . get ( obj . getId ( ) ) )
cache . get ( 1 )
cache . get ( 1 )
assert cache . size ( ) == 1 : "Cache size is not equal to 1"
assert cache . size ( ) == KEYS : "Cache size is incorrect"
assert cache . size ( ) == 0
assert cache . size ( ) == 0 : "Cache size is not zero"
assertEquals ( 1 , rs . getFetchSize ( ) )
assertNotNull ( cache . get ( 1 ) )
assertNotNull ( cache . get ( 1 ) )
assertNotNull ( cache . get ( 1 ) )
assertNotNull ( cache . get ( 1 ) )
assertEquals ( 0 , cc . size ( ) )
assertEquals ( false , o1 == o2 )
assertEquals ( true , isEmpty )
assertEquals ( 1 , res . getCount ( ) )
assertNotNull ( entry . getKey ( ) )
assertEquals ( 2 , statObs . get ( K1 ) . get ( 2 ) . get ( K1 ) )
assert e instanceof IgniteCheckedException
assertNull ( e )
AssertPlaceHolder = "failOnConnect = true;"
assertNotNull ( columnStatistics ( "A" ) )
assertEquals ( localStats [ 0 ] . columnsStatistics ( ) . size ( ) , globalStat . columnsStatistics ( ) . size ( ) )
assert oldSize == 0 : "Expected size to be 0, but was " + oldSize
assertEquals ( 0 , statsStore . getAllStatistics ( ) . size ( ) )
assertEquals ( hugeTimeouts [ 0 ] , stmt . getQueryTimeout ( ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( false , isEmpty )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( 0 , getRowCount ( "SELECT * FROM char_table_3 WHERE id = 1" ) )
assertEquals ( 0 , countRows ( "SELECT * FROM decimal_table_3 WHERE id = 1" ) )
assertEquals ( false , isEmpty )
assertThat ( res . values ( ) , containsInAnyOrder ( expected . toArray ( ) ) )
assertContainsEq ( emps . values ( ) , expected )
assertEquals ( 0 , emps . size ( ) )
assertNotNull ( cache . get ( 1 ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( zeroCentre , mdl . predict ( VectorUtils . num2Vec ( 0.0 ) ) )
assertNotNull ( entry . getValue ( ) )
assertNotNull ( entry . getValue ( ) )
assert aggregator . getWeightedPredictions ( ) . length == 0
assertArrayEquals ( new double [ ] { 1.0 , 0.5 , 0.25 } , aggregator . getWeights ( ) , 0.001 )
assertEquals ( 42 , affinityFunction . partitions ( ) )
assertEquals ( 0 , part )
assertEquals ( nodes , resNodes )
assertThrows ( RuntimeException . class , ( ) -> unsafeGet ( ) )
assertEquals ( 0.0 , mdl . predict ( neighbors , pnt ) )
assertEquals ( 0.42 , infMdl . predict ( input ) , 0.001 )
infMdl . predict ( input )
infMdl . get ( 1 ) . get ( )
assertEquals ( 0.5 , focalMethod . predict ( input ) , 0.001 )
assertEquals ( 0.5 , mdlBuilder . predict ( input ) , 0.001 )
assertEquals ( ex , e )
assertEquals ( ex , e )
assertEquals ( ex , e )
assert knnMdl . predict ( neighbors , pnt ) == expectedValue
assertThat ( knnMdl . predict ( neighbors , pnt ) ) . isEqualTo ( expectedResult )
assertEquals ( exp , y )
assertEquals ( 4.0 , dot ( v1 , v2 ) , 0.0001 )
assertEquals ( exp , v )
assertEquals ( exp , v )
assertEquals ( mu , m )
assertEquals ( exp , mu )
assertEquals ( mu , m )
assertEquals ( exp , a )
assertEquals ( exp , c )
assertEquals ( vector . get ( i ) , csvVal )
assertThat ( distance . measure ( vector , vector ) ) . isEqualTo ( 0 )
assert distance . measure ( vector1 , vector2 ) > 0
assertTrue ( MathTestConstants . UNEXPECTED_VAL , storage . isDense ( ) )
? ? ? isArrayBased ( ) throws Exception { assertEquals ( true , storage . isArrayBased ( ) ) ; }
assertEquals ( data , storage . get ( i , j ) )
assertEquals ( MathTestConstants . VAL_NOT_EQUALS , storage . columnSize ( ) , MathTestConstants . STORAGE_SIZE )
assertEquals ( MathTestConstants . VAL_NOT_EQUALS , storage . rowSize ( ) , MathTestConstants . STORAGE_SIZE )
assertEquals ( random , ms . get ( i , j ) )
assert < AssertPlaceHolder > : < AssertPlaceHolder >
assertNotNull ( testVector . get ( i ) )
assertEquals ( Math . exp ( data [ i ] ) , testVector . get ( i ) )
assert storage . get ( i ) == random
assert this . size == size : "Size assertion failed"
assertTrue ( expECaught )
assertEquals ( fixture . toString ( ) , consumer . accept ( v , fixture . toString ( ) ) )
assertNull ( of ( true ) )
assertEquals ( 0.0 , predict ( observation ) , 0.001 )
assertEquals ( 5.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 2.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 5.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 3.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 0.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 1 , predict . getRow ( 0 ) . get ( 0 ) )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( preprocessor . preprocess ( data . get ( i ) ) , postProcessedData [ i ] )
assertEquals ( preprocessor . preprocess ( data [ i ] ) , postProcessedData [ i ] )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( expData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( standardData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( standardData [ i ] [ 0 ] , preprocessor . apply ( data [ i ] ) [ 0 ] , 0.001 )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assert res . size ( ) == 4 : res . size ( )
assertEquals ( "x" , dataset . getFeatureName ( 0 ) )
assertEquals ( training . size ( ) , expectedSize )
assertEquals ( MathTestConstants . VAL_NOT_EQUALS , training . rowSize ( ) , MathTestConstants . STORAGE_SIZE )
assertEquals ( 0 , training . size ( ) )
assert cache . size ( ) == 10
assertNull ( cache . get ( i ) )
assertEquals ( 100.0 , generator . labeled ( ) . findFirst ( ) . get ( ) . getLabel ( ) , 0.0 )
assertEquals ( producer1 . get ( 0 ) , producer2 . get ( 0 ) )
assertEquals ( 1.0 / N , counters . get ( i ) )
assertNotNull ( get ( key ) )
assertEquals ( 2.0 , res . apply ( 1.0 ) , 0.0001 )
assertEquals ( 1.0 , p . produce ( ) , 0.001 )
assertEquals ( producer1 . get ( 0 ) , producer2 . get ( 0 ) )
assertEquals ( vec , constant ( vec ) . generate ( ) )
assertEquals ( 0.0 , zero ( ) , 0.0001 )
handler . handle ( it . next ( ) )
assertEquals ( originalVec . times ( 2.0 ) , doubledVec )
assertThat ( < AssertPlaceHolder > ) . isNotNull ( )
assertEquals ( 1.0 , g2 . get ( 0 ) )
assertEquals ( VectorUtils . of ( 1.0 , 2.0 ) , family . get ( VectorUtils . of ( 1 , - 1 ) ) )
assertEquals ( validValues , map . keySet ( ) )
assertEquals ( 3 , family . size ( ) )
assertEquals ( expectedFitness , population . getChromosome ( 0 ) . getFitness ( ) )
assertEquals ( expectedValue , population . getChromosome ( idx ) )
assertEquals ( res [ 0 ] . getFitness ( ) , 180 , PRECISION )
assertEquals ( population . calculateFitnessForChromosome ( 0 , fitnessFunction ) , 180 , PRECISION )
res . length == K
assertEquals ( listeners . size ( ) , 2 )
assertEquals ( 0 , listeners . size ( ) )
assertEquals ( 0 , listeners . size ( ) )
assert qryExecSpans . size ( ) == qryParallelism : "Expected " + qryParallelism + " query execution spans, but found " + qryExecSpans . size ( )
assertEquals ( 0 , gotSpans . size ( ) )
assert gotSpans . size ( ) == 1 : "Expected 1 span, but got " + gotSpans . size ( )
assertEquals ( txAmount / 2 , gotSpans . size ( ) )
assertThat ( gotSpans . size ( ) ) . isEqualTo ( 1 )
assertEquals ( 0 , gotSpans . size ( ) )
assertEquals ( "cache-configuration" , cfg . getName ( ) )
assertEquals ( "expectedValue" , cache . getName ( ) )
assertNotNull ( g , "g" )
assertEquals ( 0 , grid ( 0 ) . compute ( grid ( 0 ) . cluster ( ) . forRemotes ( ) ) . call ( new IgniteCallable < Object > ( ) {
assertEquals ( "Expected value" , actualValue )
assertEquals ( null , svc )
assertEquals ( "nonExistentService" , svc . getServiceName ( ) )
assertNotNull ( dummyRsrcBean )
assertNotNull ( dummyRsrcBean )
dummyRsrcBean = null
dummyRsrcBean = null
assert client . exists ( "/apacheIgnite/1" ) : "Path /apacheIgnite/1 does not exist"
assert client . getChildren ( "/apacheIgnite" ) . size ( ) == cnt
assert client . exists ( "/apacheIgnite/2" ) : "Path /apacheIgnite/2 does not exist"
assertEquals ( 0 , client . getChildren ( "/apacheIgnite" ) . size ( ) )
assertEquals ( true , res . get ( ) )
assert res . get ( j ) : "Connection check failed for node: " + j
assert latch . await ( timeout , timeUnit )
assertEquals ( 0 , evts . size ( ) )
assertEquals ( 0 , l . getCount ( ) )
assertEquals ( 1 , l . getCount ( ) )
assert srvs . get ( 0 ) . stop ( ) == srvs . get ( 1 ) . stop ( ) : "srvs.get(0).stop() and srvs.get(1).stop() are not equal"
assert ! ignite ( 0 ) . cluster ( ) . localNode ( ) . isClient ( ) : "Node should not be a client node"
AssertPlaceHolder = "Assert.assertNotNull(ignite);"
assertEquals ( 100 , cache . size ( ) )
assertEquals ( "postgres" , System . getProperty ( "db.vendor" ) )
assertEquals ( "h2" , System . getProperty ( "db.vendor" ) )
assertEquals ( "" , thread . getMessage ( ) )
assertNotNull ( failedTask )
assert failedTask != null
assert failedTask . getState ( ) == ActivityStates . FAILED
assertEquals ( false , exceptionThreads [ 0 ] )
assertEquals ( appPage . getId ( ) , upToDateApp . getHomePageId ( ) )
assertEquals ( apiType , APITypeManager . getAPIType ( ) )
assertNotNull ( command )
assertNotNull ( command )
assertEquals ( CommandParameterizationException . class , e . getClass ( ) )
assertThrows ( CommandExecutionException . class , ( ) -> getResourceAsStream ( "/commands-jar.bak" ) )
assertThrows ( BonitaRuntimeException . class , ( ) -> getResourceAsStream ( "/npe-command-jar.bak" ) )
assertEquals ( 0 , ? ? ? getNumberOfConnectorImplementationsWhenProcessDoesNotExists ( ) )
assertEquals ( true , dataInstance . getValue ( ) )
assertEquals ( "expectedValue" , dataInstance . getValue ( ) )
assertEquals ( ActivationState . ENABLED , getActivationState ( ) )
assertEquals ( "go" , taskInstance . getName ( ) )
assertEquals ( null , result . getParentPath ( ) )
assertEquals ( "main.png" , icon . getFileName ( ) )
assertEquals ( userMembership . getAssignedBy ( ) , commandDescriptor . get ( commandId ) . getAssignedBy ( ) )
assertEquals ( 2 , usersCount )
users . containsKey ( - 1L )
assertEquals ( null , getIdentityAPI ( ) . getUserByUserName ( "testDelete" ) )
assertEquals ( 0 , getIdentityAPI ( ) . getNumberOfUsers ( ) )
assertEquals ( 0 , getIdentityAPI ( ) . getNumberOfUsers ( ) )
assertEquals ( 0 , getIdentityAPI ( ) . getNumberOfUsers ( ) )
assertThat ( returnedPage . isProvided ( ) ) . isTrue ( )
assertEquals ( "Page not found" , exception . getMessage ( ) )
assertNull ( results )
assertEquals ( true , platformAPI . isPlatformCreated ( ) )
assertEquals ( true , platformAPI . isPlatformInitialized ( ) )
assertEquals ( null , platformCommandAPI . getCommand ( "platformCommand1" ) )
assertEquals ( 2 , categoriesCount )
assertEquals ( 3 , categoryNumber )
assertEquals ( 0 , numberOfCategories )
assertEquals ( 3 , processNumber )
assertEquals ( 0 , processesInCategory )
assertEquals ( user . getUserName ( ) , processInstance . getStartedBy ( ) )
assertEquals ( 0 , numberOfParamters )
assertEquals ( Boolean . TRUE , result )
assert failedTask != null
assertEquals ( "1" , archivedData . getValue ( ) )
assertEquals ( initialNbOfDocument + 1 , currentNbOfDocument )
assertEquals ( initialNbOfDocument + 1 , currentNbOfDocument )
assertNull ( documentSearch . getResult ( ) )
assertNotNull ( exception . getCause ( ) )
assertThat ( searchedProfileMember . getResult ( ) ) . isEmpty ( )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , dataInstance . getId ( ) )
assertNotNull ( persistenceService )
assertEquals ( "expectedResult" , userNameResult )
assertEquals ( "platformAdmin" , username )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , result . getId ( ) )
assertEquals ( expectedResult , result )
assertEquals ( 1 , result )
assertEquals ( null , result )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( 0 , processInstanceNumber )
assertNotNull ( gotSupervisor )
assertEquals ( 0 , searchResult . getCount ( ) )
assertEquals ( 0 , searchResult . getCount ( ) )
assertEquals ( myObject , inObject )
assertNotSameClassloader ( localClassLoader , classLoader )
assertNotNull ( classLoader )
assertNotNull ( classLoader )
assertNotNull ( clazz )
assertNotNull ( clazz )
assertNotEquals ( classLoader , classLoader2 )
assertNotNull ( localClassLoader )
assertEquals ( 10.3 , ( Double ) expressionResult , 0.001 )
assertEquals ( 10.0 , expressionResult )
assertEquals ( 0.3 , expressionResult )
assertEquals ( 123000000L , expressionResult )
assertEquals ( expressionResult , expectedValue )
assertEquals ( "a1b" , expressionResult )
assertEquals ( new BigDecimal ( 2 ) , expressionResult )
assertNull ( expressionResult )
assertEquals ( 6 , getIdentityAPI ( ) . getNumberOfGroups ( ) )
assertEquals ( 3 , numberOfUsers )
assertNull ( identityService . getUser ( id ) )
assertNull ( getCustomUserInfoDefinition ( id ) )
assertEquals ( id , role . getId ( ) )
assertEquals ( "matti" , user . getUserName ( ) )
assertEquals ( APISession . class , getSession ( ) . getClass ( ) )
assertEquals ( newDescription , readTenant . getDescription ( ) )
assertEquals ( false , deleted )
assertThat ( failedJobs . get ( 0 ) . getLastMessage ( ) ) . isEqualTo ( "<expected message>" )
assertEquals ( SSessionNotFoundException . class , e . getClass ( ) )
assertEquals ( 12 , mesResultats . getItems ( ) . size ( ) )
assertEquals ( Long . valueOf ( newLongValue ) , variable . getValue ( ) )
assertEquals ( "2" , variable . getValue ( ) )
assertEquals ( "false" , variable . getValue ( ) )
assertEquals ( newStringValue , variable . getValue ( ) )
assertEquals ( Double . parseDouble ( newDoubleValue ) , Double . parseDouble ( variable . getValue ( ) ) )
assertNotNull ( foundHumanTaskItem )
assertEquals ( humanTaskInstance . getId ( ) , archivedHumanTaskItem . getId ( ) )
assertEquals ( 1 , searchResult . getItems ( ) . size ( ) )
assertEquals ( null , getFromEngine ( category . getId ( ) ) )
assertEquals ( expectedItem , processConnectorItem )
assertEquals ( APIForbiddenException . class , exception . getClass ( ) )
assertUserEquals ( userAttributesList , expectedUser , anUser )
assertEquals ( expectedItem , getItem )
assertEquals ( specialCharComment , results . getItems ( ) . get ( 0 ) . getContent ( ) )
assertEquals ( HumanTaskItem . VALUE_PRIORITY_ABOVE_NORMAL , fetchedTask . getPriority ( ) )
assertEquals ( before + 2 , numberOfOpenCases )
assert openedTasks == before + 2
assertEquals ( 2 , resolvedProcesses - before )
assertEquals ( 0 , processEngineClient . getProcesses ( ) . size ( ) )
assertEquals ( processDeploymentInfo , ? ? ? )
assertEquals ( 1 , messageInstanceIds . size ( ) )
assertEquals ( 1 , messageInstanceIds . size ( ) )
assert flowNodes . size ( ) == 2
assertEquals ( Collections . singletonList ( expectedUser . getId ( ) ) , userIds )
assertEquals ( Collections . singletonList ( expectedUser . getId ( ) ) , userIds )
assertEquals ( 2 , numberOfSProcessInstanceFailed )
assertEquals ( 2 , numberOfSProcessInstanceFailed )
assertEquals ( 1 , numberOfSProcessInstanceFailed )
assertEquals ( 1 , numberOfSProcessInstanceFailed )
assertEquals ( 1234567L , user . getLastConnection ( ) )
assertEquals ( page2 , pageByName )
assertEquals ( profiles . size ( ) , 1 )
assertEquals ( 1 , profiles . size ( ) )
assertEquals ( profiles . size ( ) , 1 )
assertEquals ( resource_to_retrieve . getId ( ) , dependencyId )
assertEquals ( VALID_USERNAME , getSession ( ) . getUsername ( ) )
assertEquals ( session , clientToTest . getSession ( ) )
assertEquals ( 1 , getSession ( ) . getCreatedAt ( ) )
assertEquals ( null , getSession ( ) )
assertNotNull ( actor . getName ( ) )
assertNotNull ( actor )
assertEquals ( inputModel , getFormMappingModel ( ) )
externalResourceContribution . shouldHaveName ( )
assertEquals ( "MyObject" , toString ( ) )
assertEquals ( "MyObject" , inputDefinition . toString ( ) )
assertEquals ( "plop" , documentValue . getContent ( ) )
assertEquals ( fileName , documentValue . getFileName ( ) )
assertEquals ( myProcess . getContracts ( ) . size ( ) , 1 )
assertEquals ( 1 , builder . getInputs ( ) . size ( ) )
assertEquals ( 1 , builder . getInputs ( ) . size ( ) )
assertEquals ( 1 , builder . getConstraints ( ) . size ( ) )
assertThat ( page ) . hasPageId ( pageId )
assertEquals ( 0 , menuNode . getApplicationMenus ( ) . size ( ) )
container . getApplications ( ) . isEmpty ( )
assertThat ( applicationNode ) . hasNoApplicationPages ( )
assertThat ( applicationNode ) . hasNoApplicationMenus ( )
assertThat ( pageNode ) . hasCustomPage ( "hrPage" )
assertEquals ( "expectedValue" , encodeBase64AsUtf8String ( bytes ) )
assertNull ( newE . getCause ( ) )
assert expression . getName ( ) . equals ( "constant" )
assert expression . getName ( ) . equals ( "defaultName" )
assertEquals ( expressionName , result )
assertEquals ( null , getInputParameter ( "paramName" ) )
assertEquals ( "Some#@java.lang.Integer" , operation . getOperator ( ) )
assertEquals ( null , operation . getOperatorInputType ( ) )
assertNotNull ( resources )
assertEquals ( "theContent\nVeryGreatContent" , new String ( read ) )
assertEquals ( file . exists ( ) , true )
assertEquals ( true , deleteFile )
assertEquals ( false , deleteFile )
assertEquals ( true , deleteFile )
assertEquals ( 2 , hashMap . size ( ) )
assertEquals ( content , read )
assertEquals ( content , read ( file ) )
assertEquals ( actor , ? ? ? getActorById ( ) )
assertEquals ( numberOfActorMemebers , actorMappingServiceImpl . getNumberOfActorMembers ( actorId ) )
assertEquals ( actor , ? ? ? )
assertEquals ( actor , sActorMember )
assertEquals ( sCategory , category )
assertEquals ( sCategory , categoryByName )
assertEquals ( 3L , result )
assertEquals ( numberOfCategories , result )
assertEquals ( 3L , numberOfCategoriesUnrelatedToProcess )
assertEquals ( numberOfCategories , numberOfCategorizedProcessIds )
assertEquals ( numberOfCategories , numberOfCategorizedProcessIds )
assertEquals ( numberOfCategories , numberOfCategorizedProcessIds )
data = createData ( 12 , 42 , "name" , "containerType" )
assertEquals ( "newValue" , data . getValue ( "value" ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "Expected exception message" , "" , getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "User login should fail if user is disabled" , "User is disabled" , e . getMessage ( ) )
assertNull ( getNonExistingParameter_should_return_null ( ) )
assertEquals ( sPlatformSession , sessionService . createSession ( userName ) )
assertEquals ( true , platformLoginServiceImpl . isValid ( sessionId ) )
assertEquals ( false , platformLoginServiceImpl . isValid ( sessionId ) )
assertEquals ( false , platformLoginServiceImpl . isValid ( sessionId ) )
assertEquals ( SPlatformLoginException . class , exception . getClass ( ) )
assertEquals ( "ASSIGNMENT" , ? ? ? )
assertEquals ( "setThing" , operation . getOperator ( ) )
assertThat ( expressionContext . getValues ( ) . get ( "data1" ) ) . isEqualTo ( "originalValue" )
assertEquals ( numberOfProcessDeploymentInfos , result )
assertEquals ( sProcessDefinitionDeployInfo , result )
assertEquals ( 9 , result )
assertEquals ( 6L , processDeploymentInfoId )
assertNotNull ( result )
assertEquals ( 1L , result )
assertEquals ( 1L , result )
assertEquals ( 9 , result )
assertEquals ( 1L , result )
userTask . getContract ( ) . isEmpty ( )
assertEquals ( contract , userTask . getContract ( ) )
assertEquals ( expectedState , getFirstState ( nodeType ) )
assertEquals ( expectedState , getFirstState ( nodeType ) . getState ( ) )
assertEquals ( expectedState , getFirstState ( nodeType ) . getState ( ) )
assertNull ( getSequence ( category ) . getStateAfter ( currentStateId ) )
assertNull ( getStateAfter ( category , currentStateId ) )
assertNull ( getSequence ( category ) . getStateAfter ( currentStateId ) )
assertEquals ( true , platformAPI . isPlatformCreated ( ) )
assertNull ( result )
assertEquals ( 1 , definition . getId ( ) )
assertEquals ( "Expected exception message" , "" , e . getMessage ( ) )
assertEquals ( "Name should not be longer than 75 characters" , e . getMessage ( ) )
assertNotNull ( humanTasksSearch )
assertEquals ( "updated" , result . getValue ( ) )
assertEquals ( 0 , systemOutRule . getLog ( ) . length ( ) )
assertEquals ( null , updateDescriptor . getIconFileName ( ) )
sPageAssert . hasProcessDefinitionId ( 0 )
assertEquals ( null , page . getProcessDefinitionId ( ) )
assertEquals ( 1 , result . getNumberOfActors ( ) )
assertEquals ( 1 , getResult ( ) . getNumberOfActors ( ) )
assertEquals ( 2 , result . getNumberOfActors ( ) )
assertEquals ( "some msg" , e . getMessage ( ) )
assertEquals ( "my_process" , e . getProcessDefinitionName ( ) )
assertEquals ( "some msg" , e . getMessage ( ) )
assertEquals ( "Hello" , hello )
assertNotNull ( result )
assertNull ( getInputDefinition ( contract , "inputName" ) )
assertThat ( e . getExplanation ( ) ) . isEqualTo ( "failing rule" )
assertEquals ( "should be provided" , taskInputs . get ( "aText" ) )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( errorReporter . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertThat ( actual . getErrors ( ) ) . contains ( errorMessage )
assertTrue ( creator . isValid ( ) . isEmpty ( ) )
assertTrue ( valid . isValid ( ) )
assertTrue ( ! valid . isValid ( ) )
assertEquals ( ValidationStatus . VALID , valid )
assertEquals ( ValidationStatus . VALID , valid )
assertTrue ( valid . isValid ( ) )
assertTrue ( valid . isValid ( ) )
assertEquals ( ValidationStatus . VALID , valid )
valid . assertMessage ( "expected message" )
assertThat ( valid . getMessage ( ) ) . isEqualTo ( message )
assertThat ( valid ) . isNull ( )
status . hasMessage ( null )
status . hasMessage ( null )
assertEquals ( "'content' is a reserved keyword" , status . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "the url" , result . get ( 0 ) . getUrl ( ) )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( container , selector . getContainer ( ) )
assertEquals ( selector . getContainer ( ) , container )
assertThat ( flowNodeSelector . getStartNodes ( ) , containsInAnyOrder ( "step1" , "step3" ) )
assertEquals ( definition , selector . getProcessDefinition ( ) )
assertEquals ( "expectedValue" , firstState )
assertEquals ( "expectedValue" , firstState )
assertEquals ( 11 , nextState )
assertEquals ( nextState , expectedState )
assertEquals ( ABORTING , nextState . getStateCategory ( ) )
assertThat ( nextState , is ( equalTo ( ABORTING ) ) )
assertEquals ( "MyWork" , workFactory . getExtension ( "MyWork" ) . getDescription ( ) )
assertNotNull ( get ( commandId ) )
assertEquals ( "The description" , wrappedWork . getDescription ( ) )
assertEquals ( "recoveryProcedure" , wrappedWork . getRecoveryProcedure ( ) )
assertEquals ( 12l , getTenantId ( wrappedWork ) )
public BonitaWork getWrappedWork  ( ) {
assertEquals ( "the to string" , wrappedWork . toString ( ) )
assertEquals ( "The description" , wrappedWork . getDescription ( ) )
assertEquals ( "recoveryProcedure" , wrappedWork . getRecoveryProcedure ( ) )
assertEquals ( 12L , getTenantId ( wrappedWork ) )
public BonitaWork getWrappedWork  ( ) {
assertEquals ( "the to string" , wrappedWork . toString ( ) )
assertEquals ( "BENCHMARK_WORK" , ? ? ? )
assertThat ( strategy . mustPutEvaluatedExpressionInContext ( ) ) . isTrue ( )
assertEquals ( ExpressionKind . CONTRACT_INPUT_KIND , ? ? ? getExpressionKindShouldReturnAContractInputKind ( ) )
assertThat ( strategy . mustPutEvaluatedExpressionInContext ( ) ) . isTrue ( )
assertThat ( evaluatedTaskAssigneeId , is ( equalTo ( TASK_ASSIGNEE_ID . getEngineConstantName ( ) ) ) )
assertNotNull ( evaluatedTaskAssigneeId )
assertEquals ( taskAssigneeId , evaluatedTaskAssigneeId )
assertThat ( strategy . mustPutEvaluatedExpressionInContext ( ) ) . isTrue ( )
assertEquals ( expectedMessage , e . getMessage ( ) )
assertEquals ( 1 , uniqueCouples . size ( ) )
assertEquals ( Type . BUSINESS_DATA_JAVA_SETTER , getType ( ) )
assertEquals ( "newValue" , captor . getValue ( ) . getValue ( ) )
assertEquals ( 1 , systemOutRule . getLog ( ) . size ( ) )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getId ( ) )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getIdShouldReturnIsAdmin ( ) )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , ? ? ? )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getId ( ) )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , ? ? ? )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getId ( ) )
assertThat ( md5File ) . doesNotExist ( )
assertEquals ( "expectedValue" , profilesFromXML . getSomeValue ( ) )
assertEquals ( importProfiles . get ( 0 ) , importStatusWith ( exportedProfile . getName ( ) , Status . SUCCESS ) )
assertEquals ( 1 , importProfiles . size ( ) )
assertEquals ( importStatusWith ( "Mine" , Status . SKIPPED ) , importProfiles . get ( 0 ) )
assertEquals ( importProfiles . get ( 0 ) , importStatusWith ( exportedProfile . getName ( ) , Status . SKIP ) )
assertNotNull ( importProfileMapping )
assertNotNull ( importProfileMapping )
assertNotNull ( importProfileMapping )
assertNotNull ( importProfileMapping )
assertNotNull ( importProfileMapping )
fieldDescriptor . getEntityName ( ) . equals ( "root_process_instance" )
assertEquals ( "rootProcessInstanceId" , fieldDescriptor . getName ( ) )
assertEquals ( parentProcessInstanceId , fieldDescriptor . getValue ( ) )
fieldDescriptor . getEntityName ( ) . equals ( "root_process_instance" )
fieldDescriptor . getEntityName ( ) . equals ( "root_process_instance" )
fieldDescriptor . getEntityName ( ) . equals ( "parent_process_instance_id" )
assertEquals ( ProcessInstanceState . ERROR , convertFilterValue )
assertEquals ( ProcessInstanceState . ABORTED . name ( ) , convertFilterValue )
assertEquals ( 6 , convertFilterValue )
assertEquals ( true , dataInstance . isTransientData ( ) )
assertEquals ( false , dataInstance . isTransientData ( ) )
assertEquals ( null , testUser . getPassword ( ) )
assertEquals ( "http://example.com" , document . getUrl ( ) )
assertEquals ( "http://example.com/document" , document . getUrl ( ) )
assertEquals ( "itsValue" , context . getProperty ( "a.property" ) )
assertEquals ( "databaseValue" , context . getProperty ( "myProperty" ) )
"<AssertPlaceHolder>"
assertEquals ( STenant . PAUSED , tenantServicesManager . getTenantState ( ) )
assertNull ( getLog ( logId ) )
assertEquals ( result , getResult ( ) )
assertEquals ( 0 , systemOutRule . getLog ( ) . length ( ) )
assertEquals ( "myConnector2.impl" , sBarResourceArgumentCaptor . getValue ( ) . getName ( ) )
theConnector should  not be  null .
assertEquals ( "generated" , generateDocumentURL ( "name" , "docId" ) )
assertThat ( contractViolationException . getMessage ( ) , is ( "Bad contract" ) )
assertEquals ( "Bad contract" , contractViolationException . getMessage ( ) )
assertNull ( explanations )
assertNotNull ( contractViolationException . getMessage ( ) )
assertEquals ( "Bad contract" , contractViolationException . getSimpleMessage ( ) )
assertThat ( exception . getMessage ( ) , is ( "problem" ) )
assertNotNull ( exception . getCause ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 1L , result )
assertEquals ( 1 , processInstances . size ( ) )
assertThat ( processInstances . size ( ) , is ( n ) )
assertNull ( archivedTaskInstance . getExpectedEndDate ( ) )
assertEquals ( 1234L , sMessageInstance . getCreationDate ( ) . getTime ( ) )
assertEquals ( - 1 , defaultInterruptingEventId )
assertThrows ( MarshallingException . class , ( ) -> marshallUnmarshall ( actual ) )
assertThat ( bom . getBusinessObjects ( ) . get ( 0 ) ) . isEqualTo ( businessObjectModel . getBusinessObjects ( ) . get ( 0 ) )
assertThat ( businessObject ) . isEqualTo ( bom . getBusinessObjects ( ) . get ( 0 ) )
assertThat ( bo . getField ( "itselfRef" ) ) . isNotNull ( )
assertThat ( bo . getUniqueConstraints ( ) ) . hasSize ( 2 )
assertThat ( bo . getQueries ( ) ) . hasSize ( 1 )
assertEquals ( "Employee" , getSimpleName ( ) )
assertEquals ( List . class , buildQuery ( returnTypeClass ) . getReturnType ( ) )
assertEquals ( false , query . isMultiple ( ) )
assertNull ( field )
assertEquals ( false , field . isCollection ( ) )
assertThat ( field , is ( not ( Matchers . serializable ( ) ) ) )
assertThrows ( NotSerializableException . class , ( ) -> marshallUnmarshall ( actual ) )
assertThat ( field ) . isNotInstanceOf ( Serializable . class )
assertThat ( field ) . isEqualToComparingOnlyGivenFields ( new RelationField ( "aName" , Type . AGGREGATION , aBo ) , "name" , "type" , "reference" )
assertThrows ( UnsupportedOperationException . class , ( ) -> {
field . getFetchType ( ) , equalTo ( FetchType . EAGER )
field . getFetchType ( ) , equalTo ( FetchType . LAZY )
assertThat ( field . getName ( ) ) . isNull ( )
assertThat ( field ) . isNotSerializable ( )
assertThat ( field ) . isEqualToComparingFieldByField ( field )
assertThat ( field )
assertThat ( bom . validate ( ) ) . isOk ( ) . isTrue ( )
assertThat ( status . isOk ( ) ) . isTrue ( )
assertThat ( actual . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( actual . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
new ValidationStatusAssert ( validationStatus ) . isOk ( ) ;
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertEquals ( CommandNotFoundException . class , e . getClass ( ) )
assertNotNull ( status )
assertEquals ( ValidationStatus . INVALID , status )
assertEquals ( CommandNotFoundException . class , assertThrows ( CommandNotFoundException . class , ( ) -> focalMethod . get ( commandId ) ) )
assertNotNull ( status )
assertEquals ( ValidationStatus . VALID , status )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( checkRule . isOk ( ) ) . isTrue ( )
assertThat ( checkRule . getErrorStatus ( ) ) . isNull ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . getErrors ( ) ) . contains ( errorMessage )
assertThat ( validationStatus . getErrors ( ) ) . contains ( "with whitespaces" )
assertThat ( validationStatus . getErrors ( ) ) . contains ( errorMessage )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
validationStatusAssert . isNotOk ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isTrue ( )
assertThat ( validationStatus . isOk ( ) ) . isFalse ( )
assertEquals ( httpStatus , response . getHttpStatus ( ) )
assertThat ( response ) . hasCharacterSet ( characterSet )
assertEquals ( mediaType , response . getMediaType ( ) )
assertEquals ( "expectedServiceProviderName" , getOAuthServiceProviderName ( ) )
assertEquals ( "expectedValue" , getOAuthConsumerKey ( ) )
assertEquals ( "expectedValue" , getOAuthConsumerSecret ( ) )
assertEquals ( getTenantProperty ( OAUTH_CALLBACK_URL ) , "<AssertPlaceHolder>" )
assertEquals ( null , cacheFilter . compilePattern ( null ) )
assertEquals ( expectedPattern , cacheFilter . compilePattern ( stringPattern ) )
assertEquals ( "myTask" , getTaskName ( apiSession , 42L ) )
assertEquals ( "process Name/é",  rocessDeploymentInfo. g etName( ) )
assertEquals ( "Expected translations size to be 1" , 1 , translations . size ( ) )
assertNotNull ( get ( commandId ) )
assertNotNull ( get ( commandId ) )
assertEquals ( apiSession . getCsrfToken ( ) , session . getAttribute ( "csrfToken" ) )
assertEquals ( null , authorization )
assertEquals ( "/apps/appDirectoryBonita" , redirectUrl . getUrl ( ) )
assertEquals ( null , compilePattern ( null ) )
assertNotNull ( compilePattern ( stringPattern ) )
assertNull ( compilePattern ( null ) )
assertNotNull ( compilePattern ( stringPattern ) )
assertNull ( compilePattern ( null ) )
assertNotNull ( compilePattern ( stringPattern ) )
assertEquals ( "query string" , req . getQueryString ( ) )
assertEquals ( "portal" , redirectUrl )
assertEquals ( "Expected redirectUrl to be unchanged" , redirectUrl , protectRedirectUrl ( redirectUrl ) )
assertEquals ( "portal" , redirectUrl . substring ( 0 , 6 ) )
assertEquals ( "myredirecturl?parambeforehash=true#hashparam=true" , url )
assertEquals ( "myredirecturl?someparam=value&postParam=true#hashparam=true" , url )
assertEquals ( Collections . emptySet ( ) , customPagePermissions )
assertEquals ( pageName , pageResourceProvider . getPageName ( ) )
assertEquals ( pageName , pageResourceProvider . getPageName ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "expectedValue" , customValue )
assertEquals ( null , value )
assertEquals ( "expectedValue" , compoundValue )
assertEquals ( "expectedValue" , resourcesValue )
assertEquals ( "expectedValue" , customValue )
assertEquals ( null , getProperty ( "nonExistingKey" ) )
assertEquals ( "expectedValue" , value )
assertEquals ( HttpStatus . BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpStatus . NOT_FOUND , httpServletResponse . getStatus ( ) )
assertEquals ( HttpStatus . NOT_FOUND , httpServletResponse . getStatus ( ) )
assertEquals ( "theMimeTypeOfTheIcon" , httpServletResponse . getContentType ( ) )
assertEquals ( HttpStatus . NOT_FOUND , httpServletResponse . getStatus ( ) )
assertEquals ( HttpStatus . BAD_REQUEST . value ( ) , httpServletResponse . getStatus ( ) )
assertEquals ( "Expected error message" , "Error code is missing" , response . getContentAsString ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpStatus . NOT_FOUND , httpServletResponse . getStatus ( ) )
assertEquals ( "theMimeTypeOfTheIcon" , httpServletResponse . getContentType ( ) )
assertEquals ( HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( "API Malformed Exception" , HttpServletResponse . SC_BAD_REQUEST , httpServletResponse . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_NOT_FOUND , httpServletResponse . getStatus ( ) )
assertEquals ( HttpStatus . BAD_REQUEST . value ( ) , httpServletResponse . getStatus ( ) )
assertEquals ( "add" , request . getParameter ( "action" ) )
assert responseString . equals ( "expectedResponseString" )
assertEquals ( true , isInTempFolder )
assertEquals ( false , isInTempFolder )
assertEquals ( cache , cacheManager . getCache ( cacheName ) )
assert cacheManager . getConfiguration ( ) . getDiskStoreConfiguration ( ) . getPath ( ) . equals ( "expectedPath" )
assertEquals ( "http://www.cas-service.com/login?ids=1,2,3" , urlBuilder . toString ( ) )
assertEquals ( "http://localhost:8080/bonita+soft?param=value" , urlBuilder . toString ( ) )
assertEquals ( "http://localhost:8080/bonita%2Bsoft?param=value" , urlBuilder . toString ( ) )
assertEquals ( "http://localhost:8080/bonita%20soft?param=value" , urlBuilder . toString ( ) )
assertEquals ( "http://localhost:8080/bonita/homepage" , urlBuilder . toString ( ) )
assertEquals ( "Can't import Applications." , getFileFormatExceptionMessage ( ) )
assertEquals ( "expected_name" , getToken ( ) )
assertEquals ( "expected_name" , getFileUploadParamName ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( processActorImportService . getMessage ( ) )
assertEquals ( EXPORT_FILE_NAME , ? ? ? )
assertNull ( e . getMessage ( ) )
assertEquals ( "home" , model . getHomePage ( ) )
assertEquals ( "Expected applicationId" , AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getId ( ) )
assertNotNull ( getApplicationHomePage ( 1L ) )
assertEquals ( "expectedPage" , getCustomPage ( ) )
assertEquals ( application , getApplication ( 1L ) )
assertEquals ( "bar" , customPage . getContentName ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( Response . Status . FORBIDDEN . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR . value ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR . value ( ) , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
new ResponseAssert ( response ) . hasStatus ( Status . BAD_REQUEST )
new ResponseAssert ( response ) . hasStatus ( Status . BAD_REQUEST )
new ResponseAssert ( response ) . hasStatus ( Status . BAD_REQUEST )
responseAssert . hasStatus ( Status . BAD_REQUEST )
new ResponseAssert ( response ) . hasStatus ( Status . BAD_REQUEST )
new ResponseAssert ( response ) . hasStatus ( Status . BAD_REQUEST )
assertEquals ( 500 , response . getStatus ( ) )
assertEquals ( 500 , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR . value ( ) , response . getStatus ( ) )
assertThat ( defineDefaultSearchOrder ) . isEqualTo ( expectedDefaultSearchOrder )
assertEquals ( item , result )
assertEquals ( item , result )
responseAssert . hasStatus ( Status . NOT_FOUND )
responseAssert . hasStatus ( Status . NOT_FOUND )
assertEquals ( date , eventTriggerActual . getExecutionDate ( ) )
responseAssert . hasStatus ( Status . NOT_FOUND )
responseAssert . hasStatus ( Status . NOT_FOUND )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
responseAssert . verify ( processAPI ) . executeUserTask ( 0 , 2L , expectedComplexInput )
response . then ( ) . assertThat ( ) . statusCode ( 200 )
responseAssert . verify ( processAPI ) . executeUserTask ( 1L , 2L , expectedComplexInput )
responseAssert . hasStatus ( Status . BAD_REQUEST )
responseAssert . hasStatus ( Status . NOT_FOUND )
responseAssert . hasStatus ( Status . NOT_FOUND )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( 201 , response . getStatus ( ) )
assertEquals ( "2012-04-23T18:25:43.511Z" , response . getMessageContent ( ) . getUpdated ( ) . getValue ( ) . toString ( ) )
responseAssert . hasStatus ( Status . NOT_FOUND )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
responseAssert . hasStatus ( Status . NOT_FOUND )
responseAssert . hasStatus ( Status . BAD_REQUEST )
responseAssert . hasStatus ( Status . NOT_FOUND )
assertEquals ( 204 , response . getStatus ( ) )
assertEquals ( "My Signàl",  esponse. g etEntity( ) . t oString( ) )
assertNotNull ( installedByDeployer . getDeployedItem ( ) )
assertEquals ( RETURN_VALUE , representation . getText ( ) )
assertNull ( representation )
assertEquals ( representation , "<expected value>" )
assertEquals ( null , formMappingItem . getPageId ( ) )
assertNotNull ( added )
assertEquals ( "foo" , argument . getValue ( ) . getSearchTerm ( ) )
assertEquals ( "foo" , value . getValue ( ) )
assertEquals ( "2018-01-05T09:04:19Z" , tenantResourceItem . getLastUpdateDate ( ) . toString ( ) )
assertThat ( searchOptionsBuilder . getFilters ( ) ) . isNull ( )
assertThat ( filters ) . isEmpty ( )
assertThat ( filters ) . containsOnly ( entry ( filterName , null ) )
assertThat ( searchOptionsBuilder . getFilters ( ) ) . isNull ( )
assertThat ( filters ) . isEmpty ( )
assertThat ( filters ) . containsOnly ( entry ( "someFilterKey" , null ) )
assertEquals ( mockedDocument , convertedEngineToConsoleItem )
assertNull ( convertedEngineToConsoleItem )
assertNotNull ( e . getCause ( ) )
assertThat ( builder . getFilters ( ) ) . isEmpty ( )
assertNotNull ( convertedEngineToConsoleItem )
assertEquals ( "fileName" , documentValue . getFileName ( ) )
assertEquals ( "doc.jpg" , documentValue . getFileName ( ) )
assertEquals ( expected , actual . getConnectorInstance ( ) )
assertEquals ( 1L , result )
assertEquals ( task , item )
assertEquals ( id , item . getId ( ) )
assertThat ( filters . get ( 0 ) . getField ( ) ) . isEqualTo ( ArchivedFlowNodeItem . FILTER_IS_TERMINAL )
assertEquals ( expectedItem , fetchedItem )
assert areEquals ( expectedItem , convertedItem )
assertEquals ( 5 , itemSearchResult . getPageNumber ( ) )
assertEquals ( "abc" , value )
assertEquals ( "converted" , s )
assertEquals ( "value" , value )
assertEquals ( "field" , field . toString ( ) )
assertEquals ( "value" , value . cast ( ) )
assertEquals ( true , filter . getValue ( "myAttribute" ) )
assertEquals ( 8L , value . getValue ( ) )
assertEquals ( "abc" , value . toString ( ) )
assertThat ( cast ( ) , is ( 5L ) )
assertEquals ( "" , updater . getName ( ) )
assertEquals ( "/Expected/Parent/Path" , groupUpdater . getFields ( ) . get ( GroupField . PARENT_PATH ) )
assertEquals ( "" , updater . getParentPath ( ) )
assertEquals ( 2134L , roleItem . getIconId ( ) )
assertEquals ( myRole . getIcon ( ) , roleItem . getIcon ( ) )
assertNotNull ( roleItem )
assertEquals ( "jack" , userUpdater . getUserName ( ) )
assertEquals ( true , filters . get ( 0 ) . isEnabled ( ) )
assertNotNull ( convert )
assertNotNull ( convert )
assertNotNull ( convert )
assertNotNull ( convert )
assertNotNull ( convert )
assertEquals ( UserItem . FILTER_ROLE_ID , convert )
assertEquals ( mockedPage , addedPage )
assertThat ( e . getMessage ( ) , is ( "error" ) )
assertEquals ( "newPage.zip" , pageToBeAdded . getContentName ( ) )
assertEquals ( "newPage.zip" , pageToBeAdded . getContentName ( ) )
assertNull ( convertEngineToConsoleItem ( null ) )
assertEquals ( false , filters . get ( 0 ) . isProvided ( ) )
assertEquals ( APIException . class , addedPage . getException ( ) )
assertEquals ( descriptor , "id" )
assertEquals ( descriptor , "<expected value>" )
assertEquals ( expectedProfiles , searchResult . getResults ( ) )
assertEquals ( expectedProfiles , searchResult . getResults ( ) )
assertEquals ( newItem , aKnownProfile )
assertEquals ( AbstractMemberItem . VALUE_MEMBER_TYPE_ROLE , value )
assertEquals ( MemberType . USER , type )
assertEquals ( IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> MemberType . from ( "notExistingConst" ) ) )
assertEquals ( item , converter . convert ( profileMember ) )
assertEquals ( expectedProfileMemberItems , searchResult . getResult ( ) )
assertEquals ( "MyObject" , sort . toString ( ) )
assertEquals ( "MyObject" , sort . toString ( ) )
assertEquals ( commandId , get ( commandId ) . getId ( ) )
assertNotNull ( definition )
assertEquals ( "foo" , foo . getValue ( ) )
assertEquals ( "org/bonita/web/service" , path . toString ( ) )
assert createConverter instanceof BooleanConverter
assert createConverter instanceof DoubleConverter
assert createConverter instanceof LongConverter
assert createConverter instanceof StringConverter
assertEquals ( createConverter . getClass ( ) , IntegerConverter . class )
assertEquals ( true , converted )
assertEquals ( false , converted )
assertEquals ( null , converted )
assertEquals ( null , converted )
assertNotNull ( converted )
assertNull ( converted )
assertNull ( converted )
assertEquals ( date , converted )
assertNull ( converted )
assertNull ( converted )
assertEquals ( 1.23 , converted , 0.001 )
assertNull ( converted )
assertNull ( converted )
assertEquals ( 456789 , converted )
assertNull ( converted )
assertNull ( converted )
assertEquals ( 456789L , converted )
assertNotNull ( converted )
assertEquals ( "" , json )
assertEquals ( "message" , json )
assertEquals ( confFolder , folderResolver . getConfFolder ( ) )
assertThrows ( SQueriableLogNotFoundException . class , ( ) -> {
assertEquals ( "Expected customValue to be equal to the value retrieved from properties" , expectedValue , customValue )
assertEquals ( "expectedValue" , compoundValue )
assertEquals ( "expectedValue" , resourcesValue )
assertEquals ( "Expected customValue to be equal to the value retrieved from properties" , expectedValue , customValue )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Expected message" )
assertEquals ( 5 , range . getStartIndex ( ) )
assertEquals ( 10 , range . getMaxResults ( ) )
assertEquals ( "Expected capitalized string" , "Expected capitalized string" , capitalize ( "input string" ) )
assertEquals ( null , capitalize ( null ) )
assertEquals ( "" , capitalize ( "" ) )
assertEquals ( 'A' , capitalizer_1_char_value ( ) )
assertEquals ( "Employee" , sourceEntityName )
assertEquals ( proxy , entity . getAddress ( ) )
assertThat ( eagerEntity , instanceOf ( Proxy . class ) )
assertThat ( entity , not ( instanceOf ( Proxy . class ) ) )
assertThat ( e , isAProxy ( ) )
assertThat ( string , isNotAProxy ( ) )
assertThat ( proxy , isAProxy ( ) )
assertThat ( entity , isAProxy ( ) )
assertEquals ( "Employee" , sourceEntityName )
assertEquals ( 1 , elements . size ( ) )
assertNotNull ( toJavaClass ( field ) )
assertNotNull ( toJavaClass ( field ) )
assertEquals ( JClass . class , ? ? ? )
assertNotNull ( toJavaClass ( field ) )
assertThat ( toJavaClass ( field ) ) . isEqualTo ( expectedResult )
assertNotNull ( toJavaClass ( field ) )
assertNotNull ( toJavaClass ( field ) )
assertEquals ( getModel ( ) . ref ( fieldClass ) , ? ? ? )
assertEquals ( "Expected compilation error message" , "<expectedErrorMessage>" , e . getMessage ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( 2L , captor . getValue ( ) . getPersistenceId ( ) )
classNames . contains ( "expectedClassName" )
assertEquals ( jsonPerson , getJsonContent ( "expected_person.json" ) )
assertThat ( jsonPersonList , is ( notNullValue ( ) ) )
assertEquals ( entityManager . isOpen ( ) , true )
assertEquals ( entityManager . isOpen ( ) , false )
assertThrows ( CommandNotFoundException . class , ( ) -> get ( commandId ) )
AssertPlaceHolder = "assertEquals(0, clone.getProfiles().size());"
assertEquals ( true , synchronizationArgumentCaptor . getValue ( ) . isAfterTransactionRefreshed ( ) )
assertNotNull ( getLog ( logId ) )
assertEquals ( 1 , classLoaderService . getListeners ( identifier ( TENANT , 12 ) ) . size ( ) )
assertEquals ( new ClassLoaderIdentifier ( PROCESS , 124 ) , parentClassLoaderIdentifier )
assertNotNull ( sDependency )
assertEquals ( sCommand , actual )
assertEquals ( sCommand , actual )
assertEquals ( numberOfCommands , result )
// <AssertPlaceHolder>
assertNotNull ( getObject ( clazz , className ) )
assertEquals ( date , pojo . getDate ( ) )
assertNotNull ( method )
assertEquals ( date , pojo . getDate ( ) )
assertEquals ( date , pojo . getDate ( ) )
assertEquals ( "MyObject" , result )
assertEquals ( date , pojo . getChild ( ) . getDate ( ) )
assertEquals ( parameterValue , pojo . getChild ( ) )
assertEquals ( updatedValue2 , updatedProperties . getProperty ( "key2" ) )
assertEquals ( "myFileContent" , fileContent . get ( ) , getFileContent ( "myFile.txt" ) )
assertEquals ( true , platformGlobalClassLoaderFolder . exists ( ) )
assertEquals ( myService , beanThatNeedMyService . getMyService ( ) )
assertEquals ( true , executorService . awaitTermination ( 1 , TimeUnit . SECONDS ) )
assertEquals ( 0 , executorService . getActiveCount ( ) )
assertThat ( dataInstances ) . isEqualTo ( archiveInstances )
assertEquals ( "theValue" , entity . getValue ( ) )
assertEquals ( "theNewValue" , entity . getValue ( ) )
assertEquals ( "VALUE4" , dataInstance . getValue ( ) )
assertEquals ( "VALUE4" , dataInstance . getValue ( ) )
assertThrows ( SBonitaReadException . class , ( ) -> dataInstanceServiceImpl . getLastLocalSADataInstances ( 1 , "PROCESS_INSTANCE" , 0 , 10 ) )
saxmlObjectDataInstance . getValue ( "name" )
saxmlObjectDataInstance . getValueShouldBeNull ( )
assertEquals ( 69 , getTenantId ( saxmlObjectDataInstance ) )
saxmlObjectDataInstance . setId ( 64 )
assertEquals ( "plop5" , saxmlObjectDataInstance . getName ( ) )
assertEquals ( "plop8" , saxmlObjectDataInstance . getDescription ( ) )
assert ( saxmlObjectDataInstance . isTransientData ( ) )
assertEquals ( "plipou" , saxmlObjectDataInstance . getClassName ( ) )
assertEquals ( 14 , saxmlObjectDataInstance . getContainerId ( ) )
assertEquals ( "plipou95" , saxmlObjectDataInstance . getContainerType ( ) )
assertEquals ( 83 , saxmlObjectDataInstance . getArchiveDate ( ) )
assertEquals ( 85 , saxmlObjectDataInstance . getSourceObjectId ( ) . getValue ( ) )
assertEquals ( true , dataDef . isLongText ( ) )
assertEquals ( 0 , xStream . getWarnings ( ) . size ( ) )
assertEquals ( expressionName , result )
assertEquals ( expressionName , result )
assertEquals ( expressionName , result )
assertEquals ( expressionName , result )
assertEquals ( expressionName , result )
assertEquals ( expressionName , result )
assertEquals ( "MyObject" , result )
assertEquals ( "expectedShippingAddress" , result )
assertEquals ( "expectedValue" , obj )
assertEquals ( "The title of the book with id 'bk101' is incorrect" , "XML Content" , obj )
assertNotNull ( e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Already exists exception found" ) )
assertEquals ( "Not found exception expected" , e . getMessage ( ) )
AssertPlaceHolder = "assertEquals(userInfoValue, recordCaptor.getValue().getUserInfoValue());"
AssertPlaceHolder = "assertEquals(userInfoValue, recordCaptor.getValue().getEntity());"
assertEquals ( recordCaptor . getValue ( ) . getEntity ( ) , super . getEntity ( ) )
assertEquals ( 1 , ? ? ? getGroupChildrenPaginatedById ( ) . size ( ) )
assertEquals ( 1 , ? ? ? getGroupChildrenPaginatedByIdWithOrder ( ) . size ( ) )
assertEquals ( 125l , persistenceService . getNumberOfEntities ( SGroup . class , options , null ) )
assertEquals ( 125l , getIdentityAPI ( ) . getNumberOfGroups ( ) )
assertEquals ( group , identityServiceImpl . searchGroups ( options ) . get ( 0 ) )
assertEquals ( "test" , group . getName ( ) )
assertEquals ( group , ? ? ? getGroupByPath ( "path" ) )
assertEquals ( group , ? ? ? getGroupByPathWithNoSlash ( "path" ) )
assertEquals ( group , ? ? ? getGroupByPathThatIsNotRoot ( ) )
assertEquals ( group , ? ? ? getGroupsByIds ( 123l ) . get ( 0 ) )
assertEquals ( 1 , persistenceService . selectList ( SelectDescriptorBuilder . getElements ( SGroup . class , "Group" , 0 , 10 ) ) . size ( ) )
assertEquals ( 1 , ? ? ? getGroupsPaginatedWithOrder ( ) . size ( ) )
assertEquals ( "SGroupNotFoundException.class" , e . getClass ( ) . getName ( ) )
assertThrows ( GroupNotFoundException . class , ( ) -> focalMethodCall )
assertEquals ( userMembership , ? ? ? getLightUserMembership ( userMembershipId ) )
assertEquals ( userMembership , ? ? ? getLightUserMembershipByUserAndGroupAndRole ( ) )
assertEquals ( numberOfUserMemberships , identityServiceImpl . getNumberOfUserMemberships ( ) )
assertEquals ( numberOfUserMemberships , ? ? ? getNumberOfUserMembershipsOfUser ( ) )
assertNotNull ( userMembership )
assertNotNull ( userMembership )
assertEquals ( 1 , userMemberships . size ( ) )
assertEquals ( 1 , userMemberships . size ( ) )
assertEquals ( 1 , userMemberships . size ( ) )
assertEquals ( 1 , userMemberships . size ( ) )
assertEquals ( 1 , userMemberships . size ( ) )
assertEquals ( 1L , usersCount )
assertEquals ( 1L , usersCount )
assertEquals ( 3L , identityServiceImpl . getNumberOfUsersByGroup ( groupId ) )
assertEquals ( 3L , identityServiceImpl . getNumberOfUsersByRole ( roleId ) )
assertEquals ( sUser , getUserById ( ) )
assertEquals ( user , identityServiceImpl . searchUsers ( options ) . get ( 0 ) )
assertEquals ( AuthorizationRuleConstants . IS_PROCESS_INITIATOR + "_CUSTOM" , getId ( ) )
assertEquals ( "CallerClass" , value . getCallerClass ( ) )
assertEquals ( expected , numberOfPages )
assertNull ( pageByName )
assertEquals ( ImportStatus . ADDED , importStatus )
assertEquals ( ImportStatus . SKIPPED , importStatus )
assertThat ( insertedPage1 ) . hasContentType ( contentType )
assertThat ( insertedPage ) . hasContentType ( contentType )
assertThat ( insertedPage ) . hasContentType ( contentType )
assertNotEquals ( "contentName" , page . getContentName ( ) )
assertEquals ( "MyObject" , sPageMapping1 . toString ( ) )
assertEquals ( 1 , deleteRecord . getAllValues ( ) . size ( ) )
assertEquals ( "field ASC" , defaultOrderByBuilder . getOrderBy ( ) )
assertEquals ( "defaultOrderByBuilder.appendOrderBy(builder, \"field\", OrderByType.DESC)" , "<AssertPlaceHolder>" )
assertThat ( defaultOrderByBuilder . toString ( ) ) . isEqualTo ( "MyObject" )
assertThat ( defaultOrderByBuilder . toString ( ) ) . isEqualTo ( "MyObject" )
assertThat ( defaultOrderByBuilder . toString ( ) ) . isEqualTo ( "MyObject" )
assertThat ( defaultOrderByBuilder . toString ( ) ) . isEqualTo ( "MyObject" )
assertNotNull ( orderByType . getSqlKeyword ( ) )
assertThat ( nextPage . getSearchFields ( ) ) . isEqualTo ( queryOptions . getSearchFields ( ) )
assertEquals ( "expectedValue" , sqlServerInterceptor . getOrderByClause ( builder ) )
assertEquals ( "field ASC_NULLS_FIRST" , sqlServerInterceptor . getOrderByClause ( builder ) )
assertEquals ( "field ASC_NULLS_LAST" , sqlServerInterceptor . getOrderByClause ( builder ) )
assertEquals ( "sqlServerInterceptor.appendOrderBy(builder, \"field\", OrderByType.DESC)" , "<AssertPlaceHolder>" )
assertEquals ( "sqlServerInterceptor.appendOrderBy(builder, \"field\", OrderByType.DESC_NULLS_FIRST);" , "<AssertPlaceHolder>" )
assertEquals ( "sqlServerInterceptor.appendOrderBy(builder, \"field\", OrderByType.DESC_NULLS_LAST);" , "<AssertPlaceHolder>" )
assertEquals ( 1L , sequenceManager . getNextId ( "someEntity" , 1L ) )
assertEquals ( sPlatformCommand , ? ? ? getPlatformCommandByName ( ) )
assertNotNull ( getDefaultTenant ( ) )
assertEquals ( sPlatform , getPlatform ( ) )
assertEquals ( sPlatform , platformCacheService . get ( anyString ( ) , anyString ( ) ) )
assertEquals ( false , platformAPI . isPlatformCreated ( ) )
assertEquals ( true , platformAPI . isPlatformCreated ( ) )
assertTrue ( ! platformAPI . isPlatformCreated ( ) )
assertThat ( sProfile ) . isNotNull ( )
assertEquals ( profileName , name )
assertEquals ( Collections . emptyList ( ) , profileServiceImpl . getProfiles ( profileIds ) )
assertEquals ( sProfiles , profileServiceImpl . getProfiles ( profileIds ) )
assertNotNull ( getLog ( logId ) )
assertEquals ( sFailedJob , result )
assertEquals ( sJobDescriptor , jobDescriptor )
assertNull ( result )
assertEquals ( 1L , numberOfJobDescriptors )
assertEquals ( sJobLog , result )
assertEquals ( null , jobLog )
assertEquals ( 1L , numberOfJobLogs )
assertEquals ( sJobLog , result )
assertEquals ( sJobParameter , result )
assertNotNull ( e . getCause ( ) )
assertThat ( jobs ) . containsExactly ( "job1" , "job2" )
assertThat ( jobs , containsInAnyOrder ( "job1" , "job2" , "job3" ) )
assertEquals ( tenantId , dataMap . get ( "tenantId" ) )
assertEquals ( false , existingJob )
assertEquals ( true , existingJob )
assertEquals ( "My exception" , e . getMessage ( ) )
assertEquals ( 12L , getSession ( ) . getId ( ) )
assertEquals ( 3600000 , sessionServiceImpl . getDefaultSessionDuration ( ) )
assertEquals ( 3600000 , sessionServiceImpl . getSessionDuration ( ) )
assertEquals ( 1 , getTenantId ( entity ) )
assertEquals ( now , lastFlushTimestamp )
assertFalse ( this . tracker . isTrackable ( REC3 ) )
assertEquals ( null , getTransactionServiceContext ( ) )
assertEquals ( null , getTransactionServiceContext ( ) )
assertThat ( hasMultipleResources ) . isFalse ( )
assertEquals ( true , hasMultipleResources . get ( ) )
assertEquals ( "active: true" , getStatus ( ) )
assertEquals ( "active: false" , getStatus ( ) )
assertEquals ( "active: false" , getStatus ( ) )
assertEquals ( "active: false" , e . getMessage ( ) )
assertEquals ( "Impossible to begin a tx with state ROLLBACKONLY" , e . getMessage ( ) )
assertEquals ( 2 , xaResources . get ( ) . size ( ) )
assertEquals ( 1 , xaResources . get ( ) . size ( ) )
assertEquals ( "MyObject" , name )
assertNotNull ( getLog ( logId ) )
assertNotNull ( getLog ( logId ) )
assertEquals ( "lock timeout" , exception . getMessage ( ) )
assertNotNull ( getLog ( logId ) )
assertThrows ( SWorkPreconditionException . class , ( ) -> workExecutorService . onFailure ( workDescriptor , bonitaWork , Collections . emptyMap ( ) , new SWorkPreconditionException ( "My precondition" ) ) )
assertEquals ( registrationInstant , getRegistrationDate ( ) )
assertEquals ( 0 , workSynchronization . getExecutionThreshold ( ) . toEpochMilli ( ) )
assertEquals ( workSynchronization . getExecutionThreshold ( ) , Instant . now ( ) )
assertEquals ( 10 , workSynchronization . getExecutionThreshold ( ) . toMillis ( ) )
assertEquals ( 10 , workSynchronization . getExecutionThreshold ( ) . toMillis ( ) )
assert newThread . getName ( ) . startsWith ( "foo" )
assert newThread . getName ( ) . contains ( "foo" )
assertTrue ( bag1 . containsAll ( list1 ) )
assertEquals ( 3 , array . length )
FJIterateAcceptanceTest . this . threadNames . contains ( Thread . currentThread ( ) . getName ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( "1" , "1" , "2" , "2" , "3" , "3" , "4" , "4" ) , actual )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( target , source )
assertEqualsAndHashCode ( target , source )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 10_000 , map . size ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( "1" , "1" , "2" , "2" , "3" , "3" , "4" , "4" ) , actual )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( target , source )
assertEqualsAndHashCode ( target . size ( ) , source . size ( ) )
assertEquals ( 0 , map . getCollidingBuckets ( ) )
FJIterateAcceptanceTest . this . threadNames . contains ( Thread . currentThread ( ) . getName ( ) )
assertEquals ( 2 , symmetricDifference . size ( ) )
assertEquals ( 2 , symmetricDifference . size ( ) )
assertEquals ( 10_000 , integers . size ( ) )
assertEquals ( 100 , integers . size ( ) )
assertEquals ( iterable , deserialized )
assertNotNull ( OrderedIterable_getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 2 , 3 ) . getFirstOptional ( ) . get ( ) )
assertNotNull ( valueOf ( each ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 2 , 3 ) . getLastOptional ( ) . get ( ) )
Verify . assertSize ( 3 , array )
assertEquals ( 0 , newWith ( true ) . size ( ) )
assertEquals ( null , ? ? ? RichIterable_getFirst_empty_null ( ) )
assertEquals ( null , new ImmutableBooleanArrayList ( new BitSet ( ) , 0 ) . getLast ( ) )
iterable . getFirst ( ) == 3
assertEquals ( new BooleanHashBag ( true , true , true , false , false , true ) , new BooleanHashBag ( array ) )
assertEquals ( iterable , deserialized )
assertEquals ( 10_000 , map . size ( ) )
Verify . assertArrayEquals ( new Object [ ] { 3 , 2 , 1 } , array )
assertEquals ( 10_000 , map . size ( ) )
assertNotNull ( OrderedIterable_getFirst ( ) )
assertNotNull ( valueOf ( each ) )
assertEquals ( iterable . comparator ( ) , comparator )
assertTrue ( this . allowsDuplicates ( ) )
assertEquals ( 3L , bag . sizeDistinct ( ) )
assertEquals ( 3L , bag . sizeDistinct ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 2 , 3 ) . getFirstOptional ( ) . get ( ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 2 , 3 ) . getLastOptional ( ) . get ( ) )
assertThat ( collection . injectIntoWith ( 0 , ( result , each ) -> result + valueOf ( each ) ) ) . isEqualTo ( 30 )
assertEquals ( 10 , collection . injectIntoWith ( 0 , ( result , each ) -> result + valueOf ( each ) ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( this . size + 1 , newWith ( element ) . size ( ) )
assertEquals ( original , copy )
sanity ( ) { assertEquals ( "Object" , getSimpleName ( collection ) ) ; }
sanity ( ) { assertEquals ( "Object" , getSimpleName ( collection ) ) ; }
? ? ? assertNotNull ( this , "Expected non-null value" )
assertEquals ( 6 , collection . size ( ) )
assertEquals ( 1 , singleCollisionBucket . size ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , union . toString ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 2 , 3 ) . getFirstOptional ( ) . get ( ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 2 , 3 ) . getLastOptional ( ) . get ( ) )
collection . add ( 4 )
assertNotNull ( peek ( ) )
stack . add ( element )
assertNotNull ( valueOf ( each ) )
assertNotNull ( valueOf ( each ) )
assertNotNull ( valueOf ( each ) )
assertNotNull ( valueOf ( each ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNaW5CeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . minBy ( null ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNYXhCeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . maxBy ( null ) )
assertEquals ( expectedCount , actualCount )
assertEquals ( true , Predicates2 . instanceOf ( ) . test ( 1L ) )
Verify . assertIterableNotEmpty ( this . newWith ( 1 , 2 ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 4 , list . size ( ) )
assertEquals ( 4 , bag . size ( ) )
assertEquals ( Arrays . asList ( 4 , 3 , 2 , 1 ) , list ) ;
assertEquals ( Arrays . asList ( 4 , 3 , 2 , 1 ) , list )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 ) , list )
AssertPlaceHolder . assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 ) , list )
set . containsAll ( Arrays . asList ( 1 , 2 , 3 , 4 ) )
assertEquals ( "[1, 2, 3]" , collection . toString ( ) )
assertEquals ( "[1, 2, 3]" , collection . toString ( ) )
assertEquals ( "1,2,3" , makeStringWithSeparator ( ) )
assertEquals ( "1,2,3" , makeString ( collection . toArray ( ) , "" , "," , "" ) )
assertEquals ( "1, 2, 3" , builder . toString ( ) )
assertEquals ( "1, 2, 3" , builder . toString ( ) )
assertEquals ( "[1, 2, 3]" , builder . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
assertEquals ( 4 , sizes . size ( ) )
assertEquals ( 5000 , groups . size ( ) )
assertEquals ( 1 , groups . size ( ) )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertFalse ( this . emptyIterator . hasPrevious ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( - 1 , this . emptyIterator . previousIndex ( ) )
assertNotNull ( t )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( 0 , ( long ) this . emptyIterator . nextIndex ( ) )
assertThat ( result ) . isTrue ( )
assertEquals ( true , resultStream )
AssertPlaceHolder = "assertTrue(resultStream);"
assertEquals ( 2 , countStream )
assertEquals ( 10L , numberOfPetsStream )
Verify . assertNotEmpty ( collection )
Verify . assertNotEmpty ( this . newWith ( 1 , 2 ) )
AssertPlaceHolder = "assertThrows(Exception.class, () -> new ClassName(null));"
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertTrue ( this . classUnderTest ( ) . containsKey ( 1 ) )
assertEquals ( this . value ( ) , < expected value >  )
assertEquals ( this . empty ( ) , ? ? ? )
assertThrows ( ExpectedExceptionClass . class , ( ) -> {
assertEquals ( this . empty ( ) , ? ? ? )
assertThrows ( expectedExceptionClass , code )
assertEquals ( 0 , new UnmodifiableMap < > ( ) . keySet ( ) . size ( ) )
assertEquals ( 0 , new UnmodifiableMap < > ( ) . entrySet ( ) . size ( ) )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( objectA , objectB )
assertEquals ( new UnmodifiableMap < > ( ) . entrySet ( ) , Verify . assertSerializedForm ( 7854390611657943733L , "rO0ABXNyADpqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlTWFwJFVubW9kaWZpYWJs\n" + "ZUVudHJ5U2V0bQBmpZ8I6rUCAAB4cgAlamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJs\n" + "ZVNldIAdktGPm4BVAgAAeHIALGphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVDb2xs\n" + "ZWN0aW9uGUIAgMte9x4CAAFMAAFjdAAWTGphdmEvdXRpbC9Db2xsZWN0aW9uO3hwc3IAPG9yZy5l\n" + "Y2xpcHNlLmNvbGxlY3Rpb25zLmltcGwubWFwLm11dGFibGUuVW5pZmllZE1hcCRFbnRyeVNldAAA\n" + "AAAAAAABAgABTAAGdGhpcyQwdAA1TG9yZy9lY2xpcHNlL2NvbGxlY3Rpb25zL2ltcGwvbWFwL211\n" + "dGFibGUvVW5pZmllZE1hcDt4cHNyADNvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLm1hcC5t\n" + "dXRhYmxlLlVuaWZpZWRNYXAAAAAAAAAAAQwAAHhwdwgAAAAAP0AAAHg=" ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , immutableBag . groupByUniqueKey ( id -> id ) )
target . groupByUniqueKey ( function , immutableBag )
assertEquals ( expected , actual )
assertNotEquals ( expected , actual )
assertTrue ( map . containsAllArguments ( "One" , "Two" ) )
assertTrue ( collection . containsAllIterable ( Lists . mutable . with ( 1 , 2 ) ) )
assert source instanceof BooleanHashBag
assertEquals ( collection . size ( ) , result . size ( ) )
assertEquals ( ImmutableBag . newBagWith ( "ab" , "cd" , "ef" ) , result )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 1L , strings . size ( ) )
Verify . assertEmpty ( strings . select ( Predicates . lessThan ( "0" ) , FastList . newList ( ) ) )
Verify . assertIterableSize ( strings . size ( ) - 1 , strings . reject ( Predicates . lessThan ( "2" ) ) )
assertEquals ( ImmutableBag . newBag ( ) , strings )
AssertPlaceHolder = "Assert.assertEquals(0, strings.rejectWith(Predicates2.greaterThan(), \"0\", FastList.newList()).size());"
AssertPlaceHolder = "Assert.assertEquals(0, strings.reject(Predicates.greaterThan(\"0\"), FastList.newList()).size());"
? ? ? collect ( ) { super . collect ( ) ; Assert . assertEquals ( "hello" , function . valueOf ( "hello" ) ) ; } ? ? ?
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertIterableEquals ( expected , actual )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertEquals ( 0 , newBag ( source ) . min ( ) )
assertEquals ( 0 , max ( ) )
assertEquals ( new BooleanHashBag ( source ) , ? ? ? )
assertEquals ( new BooleanHashBag ( source ) , newBag ( source ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rp\n" +
assertEquals ( 1L , Functions2 . maxBy ( null ) )
assertEquals ( true , bag . contains ( "<expected value>" ) )
assertEquals ( 1 , bag . size ( ) )
assertEquals ( expected , result )
assertEquals ( 30 , result )
assertEquals ( 6.0d , sum , 0.001 )
assertEquals ( 6.0f , sum , 0.001f )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( 10_000 , bag . size ( ) )
assertThat ( string , containsString ( valueOf ( each ) ) )
assertEquals ( list , strings . toList ( ) )
assertEquals ( sortedList , list )
assertThat ( each , is ( notNullValue ( ) ) )
assertEquals ( 3 , integer . intValue ( ) + i )
assertEquals ( expectedSize , bag . size ( ) )
assertThat ( expectedSet , containsInAnyOrder ( "1" , "2" , "3" ) )
assertEquals ( mutableBag , BooleanHashBag . newBag ( this ) )
assertEquals ( ImmutableBag . class , lazyIterable . getClass ( ) )
assertEquals ( expected , actual )
assertEquals ( "expected result" , builder . toString ( ) )
assertEquals ( "[a, b, c]" , builder . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( new BooleanHashBag ( source ) , newBag ( source ) )
assertEquals ( ImmutableBooleanList . with ( newItems ) , ? ? ? )
assertEquals ( new BooleanHashBag ( source ) , ? ? ? )
assertEquals ( true , Predicates2 . < Integer > greaterThan ( ) . test ( 1 ) )
assertEquals ( new BooleanHashBag ( source ) , ? ? ? )
assertEquals ( 0 , strings . size ( ) )
Verify . assertAnySatisfy ( strings , Predicates . isNull ( ) )
assertEquals ( 0 , strings . count ( "" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( source , newBag ( getLast ( ) ) )
assertEquals ( source , newBag ( source ) )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertEquals ( map . size ( ) , 0 )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 1 , target . countByEach ( ) )
assertEquals ( expected , actual )
immutableHashBag . toSortedList ( )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , immutableBag . groupByUniqueKey ( id -> id ) )
target . groupByUniqueKey ( function , immutableBag )
assertArrayEquals ( elements , ? ? ? toList ( ) )
assertEquals ( IntLists . mutable . withAll ( this ) . sortThis ( ) , super . toSortedList ( ) )
assertEquals ( IntLists . mutable . withAll ( this ) . sortThis ( ) , toSortedListWithComparator ( ) )
assertArrayEquals ( source , toSet ( ) . toArray ( ) )
assertEquals ( 0 , toBag ( ) . size ( ) )
assertThat ( newItems . get ( this . size ) ) . isEqualTo ( element )
assertEquals ( source . size ( ) , newBag ( source ) . size ( ) )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertEquals ( true , StringPredicates . notEmpty ( ) . test ( "org.eclipse.collections.impl.block.factory.StringPredicatesNotEmpty" ) )
assertNotNull ( getFirst ( ) )
assertNotNull ( super . getLast ( ) )
assertEquals ( source . size ( ) , newBag ( source ) . size ( ) )
assertEquals ( ImmutableBooleanSet . empty ( ) , ? ? ? )
assertEquals ( new BooleanHashBag ( source ) , ? ? ? )
assertEquals ( ImmutableBagMultimap . class , result . getClass ( ) )
target . get ( Object . class ) . containsAll ( this . newBag ( ) . toList ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
assertEquals ( 1 , mapOfItemToCount . size ( ) )
immutableBag . assertContains ( "expectedValue" )
assertArrayEquals ( new Object [ ] { expectedValue } , results )
assertEquals ( 0L , this . newWith ( ) . sizeDistinct ( ) )
assertEquals ( expected , actual )
assertEquals ( 0 , bag . count ( Boolean . TRUE ) )
assertEquals ( "Expected string representation" , expectedString , toString ( ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertNotNull ( classUnderTest ( ) )
assertEquals ( "expectedValue" , string )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "expectedValue" , string )
assertEquals ( expected , actual )
Verify . assertSize ( 0 , collectProcedure . getCollection ( ) )
Verify . assertSize ( 0 , collectProcedure . getCollection ( ) )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( 3 , sum [ 0 ] )
assertEquals ( expected , actual )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( expected , actual )
? ? ? makeString ( ) { assertEquals ( "expectedValue" , toString ( ) ) ; } ? ? ?
assertEquals ( "1123" , builder . toString ( ) )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( expected , actual )
assertNotEquals ( expected , actual )
assertEquals ( 3L , bag . sizeDistinct ( ) )
assertEquals ( bag . toMapOfItemToCount ( ) , mapOfItemToCount )
assertEquals ( HashSet . newSetWith ( 3 , 3 , 3 , 2 , 2 , 1 ) , bag . toSet ( ) )
assertEquals ( 3 , bag . size ( ) )
assertEquals ( 2 , bag . getCount ( 1 ) )
assertEquals ( 5 , deserializedCollection . size ( ) )
assertEquals ( 1 , result [ 0 ] )
assertThrows ( Exception . class , ( ) -> integers . iterator ( ) )
assertEquals ( 50000 , numbers . size ( ) )
assertEquals ( bag . toMapOfItemToCount ( ) , mapOfItemToCount )
validate . size ( ) == 3
Verify . assertInstanceOf ( ImmutableBooleanList . class , this . newWith ( element ) )
assertEquals ( HashBag . newBagWith ( 3 , 3 , 3 , 2 , 2 , 1 ) , bag )
assertEquals ( 3 , bag . size ( ) )
integers . selectByOccurrences ( ) . countByValue ( ) . get ( 2 ) == 3
Verify . assertBagsEqual ( Bags . immutable . ofOccurrences ( PrimitiveTuples . pair ( "2" , 2 ) , PrimitiveTuples . pair ( "3" , 3 ) , PrimitiveTuples . pair ( "4" , 4 ) ) , this . newBag ( ) . selectDuplicates ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
Verify . assertContainsAllOccurrences ( integers . selectByOccurrences ( ) , ? ? ? )
assertEquals ( "1=4" , result )
result . occurrencesOf ( 1 ) == 4
assertEquals ( expected , actual )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( 1 , list . size ( ) )
Verify . assertSize ( 0 , collectProcedure . getCollection ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , bag . occurrencesOf ( true ) )
assertEquals ( "expectedValue" , appendable2 . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( 0 , ints2 . size ( ) )
assertTrue ( bag1 . containsAllArray ( new Integer [ ] { 1 , 2 , 3 } ) )
result . assertContainsAll ( collection )
assertThat ( actual ) . containsExactlyElementsOf ( expected )
assertEquals ( integers . toList ( ) , integers . collect ( Functions . getIntegerPassThru ( ) , FastList . newList ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual . toImmutable ( ) )
assertEquals ( ImmutableSortedBag . class , this . classUnderTest ( ) . chunk ( 10 ) . getFirst ( ) . getClass ( ) )
assertThat ( actual ) . containsOnlyElementsOf ( integers . collectIf ( Integer . class :: isInstance , Functions . getIntegerPassThru ( ) , HashBag . newBag ( ) ) )
assertEquals ( 0 , result )
assertNotNull ( classUnderTest ( ) . toString ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( "expectedValue" , builder . toString ( ) )
list . assertContainsAll ( integers )
Verify . assertListsEqual ( list , list2 ) ;
assertEquals ( list , integers . toList ( ) . toSortedListBy ( String :: valueOf ) )
assertNotNull ( each )
< AssertPlaceHolder >
// <AssertPlaceHolder>
assertThat ( classUnderTest ( ) . min ( ) ) . isEqualTo ( ImmutableBooleanBag . minWithoutComparator ( ) )
assertThat ( classUnderTest ( ) . max ( ) ) . isEqualTo ( expectedMax )
assertEquals ( expectedValue , classUnderTest ( ) . maxBy ( ) )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertEquals ( ArrayStack . newStackWith ( 2 , 1 , 1 , 1 ) , bag . toStack ( ) )
assertEquals ( expected , actual )
assertThat ( classUnderTest ( ) . selectDuplicates ( ) ) . isEmpty ( )
assertNotNull ( classUnderTest ( ) )
assertThat ( classUnderTest ( ) . toSortedMap ( ) ) . isInstanceOf ( ImmutableSortedMap . class )
assertEquals ( map . size ( ) , 0 )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag . groupByUniqueKey ( id -> id ) )
assertThat ( classUnderTest ( ) . countByEach ( ) ) . isEqualTo ( expectedCountByEach )
assertEquals ( 0 , classUnderTest ( ) . countByEach ( target ) . size ( ) )
assertEquals ( expectedMap , actualMap )
set . isEmpty ( )
assertEquals ( set , integers . toSortedSetWithComparator ( Comparators . reverseNaturalOrder ( ) ) )
assertNotNull ( selectWith ( ) )
assertEquals ( take , ImmutableSortedBag . emptyBag ( ) )
assertEquals ( drop . size ( ) , 0 )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 0 , this . classUnderTest ( ) . occurrencesOf ( true ) )
assertEquals ( integers , ? ? ? )
assertThat ( classUnderTest ( ) . topOccurrences ( ) ) . isEqualTo ( expectedTopOccurrences )
assertEquals ( ImmutableList . of ( ) , actual )
assertEquals ( 0 , actual . size ( ) )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( new ImmutableSortedBagImpl < > ( SortedBags . immutable . of ( 1 ) ) , ? ? ? )
assertEquals ( expected , actual )
assertEquals ( set , clone )
super . makeString ( ) ; Verify . assertSerializedForm ( 1L , "rO0ABXNyAFNvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5hcGkuYmxvY2suZmFjdG9yeS5TZXJpYWxp\n" + "emFibGVDb21wYXJhdG9ycyRSZXZlcnNlQ29tcGFyYXRvcgAAAAAAAAABAgABTAAKY29tcGFyYXRv\n" + "cnQAOkxvcmcvZWNsaXBzZS9jb2xsZWN0aW9ucy9hcGkvYmxvY2svU2VyaWFsaXphYmxlQ29tcGFy\n" + "YXRvcjt4cHNyAFhvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5hcGkuYmxvY2suZmFjdG9yeS5TZXJp\n" + "YWxpemFibGVDb21wYXJhdG9ycyROYXR1cmFsT3JkZXJDb21wYXJhdG9yAAAAAAAAAAECAAB4cA==\n" , Comparators . reverseNaturalOrder ( ) ) . ? ? ?
assertEquals ( Arrays . asList ( 3 , 3 , 2 , 1 ) , bag . toList ( ) )
assertEquals ( LinkedHashBag . newBagWith ( 3 , 3 , 3 , 2 , 2 , 1 ) , bag )
assertEquals ( ArrayStack . newStackWith ( 2 , 1 , 1 , 1 ) , bag . toStack ( ) )
assertEquals ( comparator . compare ( ACDC , ZZTOP ) , ACDC . getName ( ) . compareTo ( ZZTOP . getName ( ) ) )
assertEquals ( 3 , mapOfItemToCount . get ( "3" ) )
assertEquals ( "43221" , builder . toString ( ) )
assertEquals ( "43210" , builder . toString ( ) )
assertEquals ( 9 , result )
assertThat ( bag . sumOfFloat ( function ) ) . isEqualTo ( < expected value > )
bag . sumOfDouble ( element -> element . doubleValue ( ) )
assertEquals ( bag . sumOfLong ( Integer :: longValue ) , this . classUnderTest ( ) . sumOfLong ( Integer :: longValue ) )
assertEquals ( this . getExpected ( ) . sumOfLong ( Integer :: longValue ) , bag . sumOfLong ( Integer :: longValue ) )
assertEquals ( expected , actual )
assertThrows ( ClassCastException . class , ( ) -> collection . toString ( ) )
assertEquals ( "Expected exception: ClassCastException" , ClassCastException . class , e . getClass ( ) )
assertEquals ( ImmutableBooleanSet . newSetWith ( true , false ) , focalMethod . ofAll ( BooleanIterable . of ( true , false ) ) )
assertEquals ( 2 , list . count ( 2 ) )
assertEquals ( list . sortThis ( ) . toList ( ) , FastList . newListWith ( 2 , 2 , 1 ) )
assertEquals ( list . toList ( ) , Arrays . asList ( 2 , 2 , 1 ) )
assertEquals ( 1 , sortedBagA . getFirst ( ) )
assertEquals ( 2 , bag . size ( ) )
Verify . assertInstanceOf ( UnmodifiableBooleanBag . class , bag . asUnmodifiable ( ) )
assertEquals ( "Expected UnsupportedOperationException" , UnsupportedOperationException . class , exception . getClass ( ) )
assertEquals ( "1, 2, 3, [1, 2, 3]" , builder . toString ( ) )
assertEquals ( map . hashCode ( ) , HashingStrategies . defaultStrategy ( ) . computeHashCode ( map ) )
assertNotNull ( classUnderTest ( ) . toString ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
Verify . assertSize ( immutable . size ( ) + 2 , immutable2 . castToSortedMap ( ) )
assertNotNull ( classUnderTest ( ) )
assertThat ( classUnderTest ( ) . size ( ) ) . isEqualTo ( 0 )
assertNotNull ( classUnderTest ( ) )
assertEquals ( expectedMap , actualMap )
assertEquals ( expectedMap , result )
assertEquals ( expected , result )
assertEquals ( "1=a" , entry . toString ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 2 , withMap ( ) . with ( true , false ) . size ( ) )
assertEquals ( 1 , this . newMapWithKeyValue ( 1 , 'a' ) . withMap ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . size ( ) )
assertEquals ( 2 , withMapTargetEmpty ( ) . size ( ) )
assertEquals ( 0 ,  < AssertPlaceHolder > . size ( ) )
assertEquals ( 1 , this . newMapWithKeyValue ( 1 , 'a' ) . withMap ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . size ( ) )
assertEquals ( 2 , withMapIterable ( ) . size ( ) )
assertTrue ( this . newMapWithKeyValue ( 1 , 'a' ) . withMapIterable ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . isEmpty ( ) )
assertEquals ( 2 ,  < AssertPlaceHolder > . size ( ) )
assertTrue ( this . newMapWithKeyValue ( 1 , 'a' ) . withMapIterable ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . isEmpty ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 2 , < AssertPlaceHolder >  )
assertTrue ( this . newMapWithKeyValue ( 1 , 'a' ) . putAllMapIterable ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . isEmpty ( ) )
assertEquals ( 2 ,  < AssertPlaceHolder > . size ( ) )
assertTrue ( this . newMapWithKeyValue ( 1 , 'a' ) . putAllMapIterable ( Maps . mutable . with ( 1 , Character . valueOf ( 'a' ) ) ) . isEmpty ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( pair ( 1 , 2 ) , ? ? ? )
< AssertPlaceHolder >
assertEquals ( expected , classUnderTest ( ) )
assertThat ( classUnderTest ( ) . putPair ( 1 , 2 ) ) . isEqualTo ( ImmutableBooleanBag . builder ( ) . put ( 1 , 2 ) . build ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertNotNull ( value )
assertEquals ( 1 , this . newMapWithKeysValues ( "A" , 1 , "B" , 2 ) . withoutKey ( "B" ) . size ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 0 , new UnmodifiableMap < > ( ) . keySet ( ) . size ( ) )
assertNotNull ( key )
assertNull ( key )
assertEquals ( 0 , new UnmodifiableMap < > ( ) . keySet ( ) . size ( ) )
assertEquals ( 2 , map . keySet ( ) . size ( ) )
assertNull ( removeKey ( key ) )
assertEquals ( 0 , this . newMapWithKeysValues ( 1 , "1" , 2 , "Two" ) . removeAllKeys ( Sets . mutable . empty ( ) ) . size ( ) )
assertThat ( this . map . entrySet ( ) ) . isEmpty ( )
assertNotNull ( map )
assertThat ( valuesCollection , not ( hasItem ( < value > ) ) )
assertEquals ( new HashSet < > ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
assertThat ( retainAllFromValues ( ) ) . containsOnlyElementsOf ( values ( ) )
assertEquals ( 0 , new UnmodifiableMap < > ( ) . keySet ( ) . size ( ) )
assertEquals ( collection . size ( ) , 0 )
assertEquals ( 0 , list . select ( alwaysTrueBlock ) . size ( ) )
assertEquals ( 5 , checkedFunction2 . safeValue ( 2 , 3 ) )
object . hashCode ( )
assertEquals ( expectedValue , Functions . getFixedValue ( null ) )
assertEquals ( Functions . getToClass ( ) , Verify . assertSerializedForm ( 1L , "rO0ABXNyAEJvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rp\n" + "b25zJENsYXNzRnVuY3Rpb24AAAAAAAAAAQIAAHhw" ) )
assertEquals ( Math . sin ( each ) , function . apply ( each ) , 0.0001 )
assertThat ( function . apply ( each ) ) . isEqualTo ( valueOf ( each ) )
assertThat ( function . apply ( each ) ) . isEqualTo ( each )
assertEquals ( "expectedValue" , Functions . getStringTrim ( ) )
assertNotNull ( function . apply ( "test" ) )
assertEquals ( 5 , chain . apply ( true ) . intValue ( ) )
assertEquals ( "expectedValue" , chain . apply ( "inputValue" ) )
assertEquals ( true , chain . apply ( each ) )
assertEquals ( list , Interval . oneTo ( 100 ) . toList ( ) . shuffleThis ( ) . sortThis ( Comparators . byFunction ( Integer :: intValue ) ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAEJvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zJENsYXNzRnVuY3Rpb24AAAAAAAAAAQIAAHhw" , Functions . getToClass ( ) )
assertEquals ( Math . sin ( 0 ) , Functions . getMathSinFunction ( ) )
assertEquals ( "123" , mathStringToIntegerToString ( ) )
assertEquals ( 1 , keys . size ( ) )
assertEquals ( 1 , values . size ( ) )
assertEquals ( true , Functions0 . getTrue ( ) )
assertEquals ( false , Functions0 . getFalse ( ) )
assertEquals ( Functions0 . throwing ( null ) , Verify . assertSerializedForm ( 1L , "rO0ABXNyAE5vcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMCRUaHJvd2luZ0Z1bmN0aW9uMEFkYXB0ZXIAAAAAAAAAAQIAAUwAEXRocm93aW5nRnVuY3Rpb24wdABHTG9yZy9lY2xpcHNlL2NvbGxlY3Rpb25zL2ltcGwvYmxvY2svZnVuY3Rpb24vY2hlY2tlZC9UaHJvd2luZ0Z1bmN0aW9uMDt4cgBEb3JnLmVjbGlwc2UuY29sbGVjdGlvbnMuaW1wbC5ibG9jay5mdW5jdGlvbi5jaGVja2VkLkNoZWNrZWRGdW5jdGlvbjAAAAAAAAAAAQIAAHhwcA==" ) )
assertEquals ( true , set . contains ( 1 ) )
assertEquals ( "assertAccepts(predicate, 0, 4, null);" , "<AssertPlaceHolder>" )
assertEquals ( 2 , upperList . size ( ) )
assertEquals ( 1 , targetCollection . size ( ) )
assertEquals ( expectedValue , longFunction . apply ( 5L , 10L ) )
assertNotNull ( function . valueOf ( each ) )
assertThat ( function . valueOf ( fortyTwo ) ) . isEqualTo ( 42 )
assertEquals ( true , Functions0 . getTrue ( ) )
assertEquals ( false , Functions0 . getFalse ( ) )
assertEquals ( "Expected exception to be thrown" , expectedException . getClass ( ) , actualException . getClass ( ) )
assertEquals ( Functions0 . newFastList ( ) . value ( ) . getClass ( ) , FastList . class )
assertEquals ( UnifiedSet . newSet ( ) , Functions0 . newUnifiedSet ( ) . value ( ) )
Verify . assertInstanceOf ( HashBag . class , Functions0 . newHashBag ( ) . value ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
Verify . assertInstanceOf ( AtomicInteger . class , Functions0 . zeroAtomicInteger ( ) . value ( ) )
Verify . assertEquals ( 0L , Functions0 . zeroAtomicLong ( ) . value ( ) )
assertEquals ( "argument1.concat(argument2)" , throwingFunction2 . toString ( ) )
assertEquals ( "expectedValue" , block . apply ( 1 , new Object ( ) ) )
assertEquals ( 5 , plusInteger . apply ( 2 , 3 ) )
assertEquals ( true , function . apply ( 10 ) )
assertEquals ( true , function . apply ( 10 ) )
assertNotNull ( valueOf ( each ) )
assertEquals ( 5 , value ( new IntegerSum ( 2 ) , 3 ) . getValue ( ) )
assertNotNull ( valueOf ( each ) )
Verify . assertInstanceOf ( Integer . class , StringFunctions . toInteger ( ) . valueOf ( "10" ) )
Verify . assertEquals ( ( byte ) 0 , StringFunctions . toPrimitiveByte ( ) )
assertEquals ( "rO0ABXNyAE5vcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuU3RyaW5n\n" + "RnVuY3Rpb25zJFRvRmlyc3RDaGFyRnVuY3Rpb24AAAAAAAAAAQIAAHhw" , StringFunctions . toFirstChar ( ) )
assertEquals ( 'a' , StringFunctions . toPrimitiveChar ( ) )
assertEquals ( 1L , ? ? ? )
assertEquals ( 0.0f , StringFunctions . toPrimitiveFloat ( ) )
assertEquals ( 1L , StringFunctions . toPrimitiveInt ( ) )
assertEquals ( 1L , StringFunctions . toPrimitiveLong ( ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAFNvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuU3RyaW5n\n" + "RnVuY3Rpb25zJFRvUHJpbWl0aXZlU2hvcnRGdW5jdGlvbgAAAAAAAAABAgAAeHA=" , StringFunctions . toPrimitiveShort ( ) )
assertNotNull ( function . valueOf ( each ) )
assertEquals ( Boolean . valueOf ( value ) , function . valueOf ( value ) )
assertThat ( mapEntryPredicate . accept ( "argument1" , 2 ) ) . isTrue ( )
assertEquals ( 0 , atomicCountProcedure . getCount ( ) )
Verify . assertEmpty ( result )
Verify . assertContainsAll ( procedure . getCollection ( ) , 0 , 1 , 2 , 3 )
assertEquals ( new ImmutableBooleanArrayList ( true ) , result )
list . assertContains ( pair ( 2 , 3 ) )
assertEquals ( 1 , procedure . getCollection ( ) . size ( ) )
assertThat ( builder . toString ( ) ) . isEqualTo ( "aVisited" )
assertEquals ( expectedResults , actualResults )
assertEquals ( "abc" , noop . value ( ) )
assertEquals ( 10 , result . size ( ) )
assertNotNull ( date )
assertEquals ( true , success )
assertThat ( each , equalTo ( value ) )
assertNotNull ( timestamp )
assertEquals ( 2 , result . size ( ) )
assertEquals ( expected , targetList . toImmutable ( ) )
assertEquals ( expected , actual )
assertEquals ( 0 , result )
integers . select ( Predicates . greaterThan ( integers . size ( ) ) ) . isEmpty ( )
assertEquals ( integers . size ( ) , result . size ( ) )
Verify . assertIterableEmpty ( integers . reject ( Predicates . lessThan ( integers . size ( ) + 1 ) ) )
assertEquals ( expectedSize , integers . size ( ) )
assertEquals ( integers . size ( ) , immutableCollection . size ( ) )
assertEquals ( integers . size ( ) , immutableCollection . size ( ) )
assertEquals ( each , valueOf ( each ) )
assertEquals ( each , valueOf ( each ) )
assertEquals ( expectedSize , immutableCollection . size ( ) )
assertEquals ( each , valueOf ( each ) )
Verify . assertSize ( integers . size ( ) , immutableCollection )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedSize , integers . size ( ) )
assertThat ( integers . getFirst ( ) ) . isEqualTo ( valueOf ( each ) )
assertThat ( integers ) . contains ( valueOf ( each ) )
assertThat ( each , is ( notNullValue ( ) ) )
< AssertPlaceHolder >
// <AssertPlaceHolder>
assertThat ( classUnderTest ( ) . max ( ) ) . isEqualTo ( expectedMax )
assertThat ( classUnderTest ( ) . minBy ( ) ) . isEqualTo ( < AssertPlaceHolder > )
assertEquals ( expectedValue , classUnderTest ( ) . maxBy ( ) )
assertThat ( classUnderTest ( ) . iteratorRemove ( ) ) . isTrue ( )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertThat ( classUnderTest ( ) . size ( ) ) . isEqualTo ( 0 )
assertThat ( classUnderTest ( ) . retainAll ( ) ) . isEqualTo ( expectedResult )
assertThat ( classUnderTest ( ) . addAll ( ) ) . isInstanceOf ( ImmutableBooleanBag . class )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
Verify . assertNotEmpty ( collection )
assertEquals ( 7 , result )
assertEquals ( "[1, 2, 3]" , collection . toString ( ) )
assertEquals ( "1, 2, 3" , builder . toString ( ) )
assertEquals ( 0 , collection . size ( ) )
integers . forEach ( i -> assertTrue ( i instanceof Integer ) )
assertEquals ( 5 , deserializedCollection . size ( ) )
assertEquals ( expected , multimap )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertThrows ( NullPointerException . class , ( ) -> this . getCollection ( ) . addAll ( null ) )
assertEquals ( 0 , collection . size ( ) )
assertNull ( this . getCollection ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( 1 ,  < listName > . stream ( ) . filter ( < element > -> < element > == null ) . count ( ) )
assertEquals ( 2 , counter . getCount ( ) )
assertEquals ( 2 , counter . getCount ( ) )
assertEquals ( "GreatBand<param>" , buf . toString ( ) )
assertEquals ( 2 , counter . getCount ( ) )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( "expectedValue" , builder . toString ( ) )
Verify . assertEmpty ( collectProcedure . getCollection ( ) )
assertEquals ( 2 , result . intValue ( ) )
iterable . asLazy ( )
assertThrows ( NoSuchElementException . class , ( ) -> iterator . next ( ) )
assertNotNull ( stack . peek ( ) )
assertEquals ( true , stack . peek ( ) )
"<AssertPlaceHolder>"
T poppedElement = stack . pop ( ) ;
Verify . assertInstanceOf ( ImmutableBooleanBag . class , this . classUnderTest ( ) . asSynchronized ( ) . asSynchronized ( ) )
assertEquals ( ImmutableBooleanBag . class , this . classUnderTest ( ) . asUnmodifiable ( ) . getClass ( ) )
Verify . assertAllSatisfy ( chunked , each -> each . size ( ) > 1 && each . size ( ) <= 100 )
assertEquals ( integers1 , integers2 )
integers1 . assertContains ( 5 )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( BigDecimal . valueOf ( 250000 ) , sum )
assertEquals ( BigDecimal . valueOf ( 125000 ) , sum )
assert sum . equals ( BigInteger . valueOf ( 250000 ) )
assertEquals ( BigInteger . valueOf ( 125000 ) , sum )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedMap , actualMap )
assertEquals ( expectedMap , actualMap )
assertEquals ( expectedMap , actualMap )
assertEquals ( expectedMap , actualMap )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( Interval . oneTo ( i ) , interval )
assertEquals ( ImmutableList . class , list . getClass ( ) )
AssertPlaceHolder = "assertEquals(3, names.size());"
AssertPlaceHolder = "assertEquals(3, names.size());"
assertEquals ( names , Sets . difference ( Sets . difference ( this . overlappingSets . get ( 0 ) , this . overlappingSets . get ( 1 ) ) , this . overlappingSets . get ( 2 ) ) ) ;
assertEquals ( names , Sets . difference ( Sets . difference ( this . identicalSets . get ( 0 ) , this . identicalSets . get ( 1 ) ) , this . identicalSets . get ( 2 ) ) ) ;
assertEquals ( expectedPowerSet , powerSet ( ) )
assertThat ( cartesianProductSameElements ( ) . toBag ( ) , is ( expectedCartesianProduct . toBag ( ) ) )
assertEquals ( ImmutableSet . class , set . getClass ( ) )
assertEquals ( newSet ( Interval . oneTo ( i ) ) , ? ? ? )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertEquals ( "The quick brown fox jumps over the lazy dog." , adapter . asChars ( ) )
assertEquals ( 5 , adapter . length ( ) )
assertEquals ( adapter , ? ? ? )
assertEquals ( 5 , adapter . count ( ) )
AssertPlaceHolder = "Assert.assertTrue(BooleanBags.immutable.of().isEmpty());"
assertTrue ( BooleanLists . immutable . of ( ) . isEmpty ( ) ) ;
assertEquals ( 1 , this . size ( ) )
assertEquals ( expected , booleanBooleanPairs . toSet ( ) )
assertThat ( < actualValue > , lessThan ( < expectedValue > ) )
assertEquals ( ( byte ) 1 , PrimitiveFunctions . unboxIntegerToByte ( ) )
assertEquals ( 1.0 , PrimitiveFunctions . unboxIntegerToDouble ( ) )
assertEquals ( 42 , collectInt ( ) )
assertEquals ( expectedCount , actualCount )
assert newItems . get ( this . size ) == element
assertEquals ( 6 , result )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( "expected value" , makeString ( ) )
assertEquals ( "123" , builder . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
assertEquals ( 2 , sizes . size ( ) )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertEquals ( "Expected string representation" , expectedString , toString ( ) )
assertThat ( new LazyBooleanIterableAdapter ( focalMethod ( ) ) ) . isEqualTo ( testMethod ( ) )
assertEquals ( "expectedValue" , buffer . toString ( ) )
assertEquals ( "|0" , buffer . toString ( ) )
assertEquals ( "|A" , buffer . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "012345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( 15 , sum )
assertEquals ( 15L , sum )
assertEquals ( 6.2d , sum , 0.0001 )
assertEquals ( 5.2f , sum , 0.001f )
assertNull ( collect . getFirst ( ) )
assertNull ( collect . getLast ( ) )
assertEquals ( 3 , stringNums . toArray ( ) . length )
assertEquals ( "12345" , builder . toString ( ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( "3124" , builder . toString ( ) )
assertEquals ( "0123456789" , builder . toString ( ) )
assertEquals ( "312452" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "012345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( 15 , sum )
assertEquals ( "value=1 index=0" , LOGGER . getLog ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( "6" , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( "value=1 index=0" , LOGGER . getLog ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( "value=1 index=0" , LOGGER . getLog ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( "123456" , builder . toString ( ) )
assertEquals ( "0246810" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "01234" , builder . toString ( ) )
assertEquals ( "|A1B10" , sb . toString ( ) )
assertEquals ( "|" , sb . toString ( ) )
assertThrows ( NoSuchElementException . class , ( ) -> iterator . next ( ) )
assertNotNull ( this . empty ( ) )
assertThat ( flattenIterator . hasNext ( ) , is ( false ) )
// <AssertPlaceHolder>
assertNotNull ( this . empty ( ) )
// <AssertPlaceHolder>
assertNotNull ( this . empty ( ) )
assertNotNull ( this . empty ( ) )
assertNotNull ( this . empty ( ) )
assertThrows ( NoSuchElementException . class , ( ) -> iterator . next ( ) )
actual . size ( ) == expectedSize
actual . assertContainsAll ( expected )
// <AssertPlaceHolder>
assertEquals ( expectedValue , classUnderTest ( ) . maxBy ( ) )
assertThat ( classUnderTest ( ) . max ( ) ) . isEqualTo ( expectedMax )
actual . assertOccurrencesEquals ( HashBag . newBag ( this ) )
assertEquals ( 10_000 , map . size ( ) )
assertEquals ( true , Predicates . anySatisfy ( null ) )
assertFalse ( this . newWith ( 1 , 1 , 3 ) . noneSatisfy ( Integer . valueOf ( 1 ) :: equals ) )
assertEquals ( true , Predicates . allSatisfy ( null ) )
assertEquals ( expected , actual )
assertEquals ( BooleanArrayList . newList ( this ) , collect ( ) . toList ( ) )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( BooleanArrayList . newList ( this ) , ? ? ? )
assertEquals ( BooleanHashSet . newSet ( this ) , ? ? ? )
return Assert . assertEquals ( BooleanHashBag . newBag ( this ) , ? ? ? )
Verify . assertInstanceOf ( LazyBooleanIterable . class , this . booleanIterable . asLazy ( ) )
assertEquals ( "true, false, true, false, true" , builder . toString ( ) )
assertEquals ( "true0false1true2false3true4" , builder . toString ( ) )
assertThat ( builder . toString ( ) , is ( "truefalsetruefalsetrue" ) )
assertEquals ( "truefalsetruefalsetrue" , builder . toString ( ) )
Verify . assertIterableNotEmpty ( this . newPrimitiveWith ( true , false ) )
assertEquals ( 1 , sum )
assertEquals ( 5 , sum [ 0 ] )
assertEquals ( "expectedValue" , actualValue )
array . length
assertEquals ( expectedList , actualList )
assertEquals ( BooleanHashSet . newSet ( this ) , ? ? ? )
return Assert . assertEquals ( BooleanHashBag . newBag ( this ) , ? ? ? )
assertArrayEquals ( new boolean [ ] { false , false , true } , result )
iterable . isNotEmpty ( )
assertEquals ( 0 , count ( ) )
< AssertPlaceHolder >
assertEquals ( ReverseBooleanIterable . adapt ( this ) , ? ? ? )
return Assert . assertEquals ( ReverseBooleanIterable . adapt ( this ) , ? ? ? )
assertThat ( < focalMethod > ) . < assertionMethod > ( )
assert concat . toString ( ) . equals ( "expectedValue" )
assertThat ( concat [ 0 ] , is ( "<expected value>" ) )
result . assertEquals ( 3 )
assertEquals ( 10_000 , map . size ( ) )
assertEquals ( 10_000 , map . size ( ) )
assertEquals ( "expectedValue" , concat . toString ( ) )
assertThat ( concat . toString ( ) ) . isEqualTo ( expectedConcatenation )
assertEquals ( 10 , sum )
assertEquals ( 15 , sum )
assertEquals ( "0, 2, 4, 6, 8, 10" , interval . toString ( ) )
assertEquals ( expected , interval . reject ( IntegerPredicates . isEven ( ) ) )
assertEquals ( 2 , counter . getValue ( ) )
interval . assertEquals ( Interval . fromToBy ( this . get ( fromIndex ) , this . get ( toIndex - 1 ) , this . step ) )
assertEquals ( collection . toList ( ) , tapResult )
assertEquals ( expected , this . list . sortThisByBoolean ( s -> Integer . parseInt ( s ) % 2 == 0 ) )
assertTrue ( bag1 . containsAll ( FastList . newListWith ( 1 , 1 , 1 , 2 ) ) )
assertEquals ( stack . size ( ) , expectedSize )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( classUnderTest ( ) )
assertThat ( classUnderTest ( ) . size ( ) ) . isEqualTo ( expectedSize )
assertThat ( classUnderTest ( ) . removeIndex ( ) ) . isNull ( )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 0 , collection . size ( ) )
assertEquals ( expectedCount , actualCount )
Verify . assertNotEmpty ( this . newWith ( 1 , 2 ) )
assertEquals ( 6 , result . intValue ( ) )
assertEquals ( null , ? ? ? )
assertNull ( key )
assertEquals ( 1 , integers . indexOf ( 1 ) )
assertEquals ( 7 , result )
growableList = this . list . clone ( )
assertThrows ( ExpectedExceptionClass . class , ( ) -> {
assertNotNull ( add ( keyValuePair ) )
assertThrows ( ExpectedExceptionClass . class , ( ) -> {
assertEquals ( "1" , this . list . get ( 0 ) )
assertEqualsAndHashCode ( one , oneA )
assertEquals ( FastList . newListWith ( 2 ) , list )
assertThrows ( expectedExceptionClass , ( ) -> ? ? ? focalMethod ? ? ? )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( element , < AssertPlaceHolder >  )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( this . value , cloned . value )
assertEquals ( Comparators . naturalOrder ( ) , Verify . assertSerializedForm ( 1L , "rO0ABXNyAFhvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5hcGkuYmxvY2suZmFjdG9yeS5TZXJpYWxp\n" + "emFibGVDb21wYXJhdG9ycyROYXR1cmFsT3JkZXJDb21wYXJhdG9yAAAAAAAAAAECAAB4cA==" ) )
assertEquals ( Comparators . naturalOrder ( ) , ? ? ? )
assertEquals ( 0 , ? ? ? min_without_comparator ( ) )
assertEquals ( 0 , max_without_comparator ( ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNaW5CeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . minBy ( null ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNYXhCeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . maxBy ( null ) )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
assertThat ( list , not ( contains ( element ) ) )
integer . get ( ) == < expected value >
integer . get ( ) == 0
assertEquals ( ImmutableBooleanEmptySet . INSTANCE , ? ? ? toImmutable ( ) )
assertEquals ( ImmutableBooleanSet . empty ( ) , Lists . fixedSize . of ( ) )
growableList = this . list . clone ( )
assertEqualsAndHashCode ( one , oneA )
AssertPlaceHolder = "assertThrows(expectedExceptionClass, () -> { ???focalMethod???; });"
assertEquals ( keyValuePair . getValue ( ) , map . add ( keyValuePair ) )
AssertPlaceHolder = "assertThrows(expectedExceptionClass, () -> { /* code to be tested */ });"
assertEquals ( "1" , this . list . get ( 0 ) )
assertEqualsAndHashCode ( "objects" , this . list , copyOfList )
assertEquals ( FastList . newListWith ( 1 , 3 , 2 ) , list )
assertEqualsAndHashCode ( this . list , growableList )
assertEqualsAndHashCode ( one , oneA )
assertEquals ( "1" , this . list . get ( 0 ) )
assertEquals ( FastList . newListWith ( 1 , 3 , 2 , 4 ) , list )
growableList = this . list . clone ( )
assertEqualsAndHashCode ( one , oneA )
assertEquals ( "1" , this . list . get ( 0 ) )
assertEquals ( FastList . newListWith ( 1 , 3 , 2 , 3 , 4 ) , list )
assertEquals ( newList ( iterable ) , new ImmutableBooleanArrayList ( iterable . toArray ( ) ) )
assertEqualsAndHashCode ( clone , this . list . clone ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( Lists . mutable . of ( 1 ) , collection )
assert newItems . get ( this . size ) == element
assertEquals ( true , newItems . get ( this . size ) )
assertThat ( newItems . get ( this . size ) ) . isEqualTo ( element )
assertEquals ( false , SingletonListTest . newWith ( 1 ) . isEmpty ( ) )
assertEquals ( 2 , result )
assertEquals ( 3 , result )
objects . removeIf ( Predicates2 . isNull ( ) )
objects . removeIf ( Objects :: isNull )
assertEquals ( "[[this]]" , list . toString ( ) )
assertArrayEquals ( new boolean [ ] { } , newList ( new BooleanArrayList ( ) ) . toArray ( ) )
assertEquals ( Comparators . reverse ( Comparators . originalNaturalOrder ( ) ) , Verify . assertSerializedForm ( 1L , "rO0ABXNyAEhvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuQ29tcGFy\n" + "YXRvcnMkUmV2ZXJzZUNvbXBhcmF0b3IAAAAAAAAAAQIAAUwACmNvbXBhcmF0b3J0ABZMamF2YS91\n" + "dGlsL0NvbXBhcmF0b3I7eHBzcgBNb3JnLmVjbGlwc2UuY29sbGVjdGlvbnMuaW1wbC5ibG9jay5m\n" + "YWN0b3J5LkNvbXBhcmF0b3JzJE5hdHVyYWxPcmRlckNvbXBhcmF0b3IAAAAAAAAAAQIAAHhw" ) )
assertArrayEquals ( new boolean [ ] { } , newList ( new BooleanArrayList ( ) ) . toArray ( ) )
assert iterable . toArray ( ) . length == ? ? ? max_without_comparator ( )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNaW5CeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . minBy ( null ) )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAERvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuRnVuY3Rpb25zMiRNYXhCeUZ1bmN0aW9uMgAAAAAAAAABAgABTAAIZnVuY3Rpb250ADVMb3JnL2VjbGlwc2UvY29sbGVjdGlvbnMvYXBpL2Jsb2NrL2Z1bmN0aW9uL0Z1bmN0aW9uO3hwcA==" , Functions2 . maxBy ( null ) )
assertEquals ( 0 , list . size ( ) )
growableList = this . list . clone ( )
assertEquals ( "Expected result" , expected , actual )
assertEqualsAndHashCode ( one , oneA )
assertEquals ( FastList . newListWith ( 3 , 2 ) , list )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( 1 , subList . size ( ) )
assertTrue ( bag1 . containsAll ( FastList . newListWith ( 1 , 1 , 1 , 2 ) ) )
assertTrue ( map . containsAllArguments ( "One" , "Two" ) )
assertThat ( classUnderTest ( ) . containsAllIterable ( ) ) . isTrue ( )
assertEquals ( collection . size ( ) , result . size ( ) )
assertEquals ( collection . size ( ) , result . size ( ) )
assertEquals ( list . reverse ( ) , result )
result . containsAll ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) )
integers . select ( Predicates . greaterThan ( integers . size ( ) ) , FastList . newList ( ) ) . isEmpty ( )
assertTrue ( integers . reject ( Predicates . lessThan ( integers . size ( ) + 1 ) , FastList . newList ( ) ) . isEmpty ( ) ) ;
assertEquals ( expected , actual )
assertEquals ( 10 , this . classUnderTest ( ) . chunk ( 10 ) . getFirst ( ) . size ( ) )
assertEquals ( integers , ? ? ? )
assertEquals ( sortedList , sortedList . sorted ( ) )
assertEquals ( Lists . immutable . of ( ) , list )
assertEquals ( Lists . immutable . of ( ) , list )
assertEquals ( Lists . immutable . of ( ) , list )
assertEquals ( stack , this . classUnderTest ( ) . toStack ( ) )
assertThrows ( Exception . class , ( ) -> classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( ImmutableList . empty ( ) , result )
assertEquals ( integers . size ( ) , 0 )
assertEquals ( expectedSize , integers . size ( ) )
integers . forEach ( i -> Assert . assertTrue ( < condition >  ) )
integers . stream ( ) . anyMatch ( < AssertPlaceHolder > )
assertEquals ( expected , getFirst ( ) )
assertThat ( integers ) . isNotEmpty ( )
// Add assertion here
assertEquals ( 10 , this . classUnderTest ( ) . chunk ( 10 ) . size ( ) )
assertEquals ( - 1 , sortedList . binarySearch ( 1 ) )
assertEquals ( 0 , integers . detectIndex ( each -> each == 2 ) )
assertEquals ( 0 , ? ? ? detectLastIndex ( ) )
assertEquals ( 3 , list . getOnly ( ) )
assertEquals ( 2 , list . get ( 0 ) )
assertThat ( list . get ( i ) ) . isEqualTo ( < AssertPlaceHolder > )
assertNotNull ( classUnderTest ( ) . getFirst ( ) )
assertNotNull ( result )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( 3 , result . intValue ( ) )
assertEquals ( expectedString . toString ( ) , classUnderTest ( ) . toString ( ) )
assertEquals ( "0:a,1:b,2:c" , sum [ 0 ] )
assertEquals ( expectedResult , result ) ; // <AssertPlaceHolder>
assertEquals ( new ImmutableBooleanArrayList ( newItems , this . size + 1 ) , new ImmutableBooleanArrayList ( newItems , this . size + 1 ) )
assertEquals ( "0:a,1:b,2:c" , sum [ 0 ] )
Verify . assertInstanceOf ( ImmutableBooleanList . class , this . newWith ( ) . toImmutable ( ) )
assertEquals ( 5 , deserializedCollection . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( Arrays . asList ( 1 , 4 , 3 , 2 ) , actual . toList ( ) )
assertEquals ( "MutableList" , getSimpleName ( list ) )
assertEquals ( "MutableList" , getSimpleName ( list ) )
assertEquals ( "1, 2, 3" , makeStringWithSeparator ( ) )
assertEquals ( "1,2,3" , makeStringWithSeparatorAndStartAndEnd ( ) )
assertEquals ( "MutableList" , getSimpleName ( list ) )
assertEquals ( "1/2/3" , builder . toString ( ) )
assertEquals ( "[1/2/3]" , builder . toString ( ) )
AssertPlaceHolder = "Assert.assertTrue(newItems.get(this.size));"
assertEquals ( 10 , sum )
"<AssertPlaceHolder>"
assertEquals ( Arrays . asList ( 4 , 3 , 2 , 1 ) , integers )
assertEquals ( 1 , integers . indexOf ( 1 ) )
assertNull ( adapt ( null ) )
assertEquals ( this . value , cloned . value )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( 3 , array . length )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( 8 , list . size ( ) )
assertThat ( newItems , is ( notNullValue ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 1 , list . get ( 0 ) )
assertEquals ( "123" , list . get ( 2 ) )
assertEquals ( "1" , list . get ( 0 ) )
assertEquals ( 5 , list . size ( ) )
assertEquals ( 3 , countProcedure . getCount ( ) )
Verify . assertNotEmpty ( FastList . newListWith ( 1 , 2 ) )
assertEquals ( 7 , result )
objects . removeIf ( Predicates2 . isNull ( ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 2 , sublist2 . size ( ) )
integers . set ( index , element )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> integers . get ( 5 ) )
assertEquals ( "1, 2, 3, [1, 2, 3, ...]" , list . toString ( ) )
assertEquals ( "1, 2, 3, [1, 2, 3]" , makeStringRecursion ( ) )
assertEquals ( expectedSize , integers . size ( ) )
assertEquals ( 2 , integers . get ( 0 ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
AssertPlaceHolder . assertEquals ( 1 , newItems . length ( ) )
Verify . assertContainsAll ( collection , 1 , 2 )
assertEquals ( true , newItems . get ( this . size ) )
assertEquals ( this . size + 1 , new ImmutableBooleanArrayList ( newItems , this . size + 1 ) . size ( ) )
assertEquals ( "expected value" , makeString ( ) )
assertEquals ( 1 , list . get ( 0 ) )
assertThat ( list . injectInto ( "" , function :: valueOf ) ) . isEqualTo ( "123" )
assertEquals ( 1 , function . valueOf ( list . get ( 0 ) ) )
assertEquals ( 5 , list . size ( ) )
assertEquals ( 2 , list . size ( ) )
Verify . assertNotEmpty ( MultiReaderFastList . newListWith ( 1 , 2 ) )
assertEquals ( 7 , result )
objects . removeIf ( Predicates2 . isNull ( ) )
objects . removeIf ( Objects :: isNull )
assertEquals ( null , wilma . get ( ) )
assertEquals ( 5 , deserializedCollection . size ( ) )
assertEquals ( Interval . fromToBy ( collection . get ( 0 ) , collection . get ( 1 ) , collection . step ) , deserializedCollection )
assertEquals ( ImmutableBooleanArrayList . newList ( BooleanArrayList . newList ( Arrays . asList ( true , true , true , true , true , true , true , true , true , true , true , true , true , true , true , true ) ) ) , list )
assertEquals ( 2 , sublist2 . size ( ) )
integers . set ( index , element )
integers . get ( 5 )
"<AssertPlaceHolder>"
assertEquals ( false , integers . contains ( doesNotExist ) )
integers . iterator ( ) . next ( )
assertEquals ( 1 , result [ 0 ] )
assertEquals ( copy , original )
objects . removeIf ( Objects :: isNull )
objects . removeIf ( Objects :: isNull )
assertEquals ( 1 , integers . indexOf ( 1 ) )
objects . set ( 1 , 4 )
assertEquals ( "[1, 2, 3]" , list . toString ( ) )
assertEqualsAndHashCode ( "objects" , objectA , objectB )
assertEquals ( 2 , counter . getCount ( ) )
assertThat ( list , is ( sorted ) )
assertEquals ( expected , this . list . sortThisByBoolean ( s -> Integer . parseInt ( s ) % 2 == 0 ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByChar ( string -> string . charAt ( 0 ) ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByByte ( Byte :: parseByte ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByShort ( Short :: parseShort ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByInt ( Integer :: parseInt ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByFloat ( Float :: parseFloat ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByLong ( Long :: parseLong ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByDouble ( Double :: parseDouble ) )
assertEquals ( element , < AssertPlaceHolder >  )
assertNotNull ( keyValuePair )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assert < AssertPlaceHolder >
assertEquals ( Comparators . naturalOrder ( ) , ? ? ? )
Verify . assertInstanceOf ( ImmutableBooleanBag . class , this . unmodifiableList . toImmutable ( ) )
assertNotNull ( new UnmodifiableBooleanBag ( this ) )
assertEquals ( items , ? ? ? toReversed ( ) )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( this . getNStrings ( ) , this . list . sortThisBy ( Functions . getStringToInteger ( ) ) )
assertEquals ( expected , this . list . sortThisByBoolean ( s -> Integer . parseInt ( s ) % 2 == 0 ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByChar ( string -> string . charAt ( 0 ) ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByByte ( Byte :: parseByte ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByShort ( Short :: parseShort ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByInt ( Integer :: parseInt ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByFloat ( Float :: parseFloat ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByLong ( Long :: parseLong ) )
assertEquals ( this . getNStrings ( ) , this . list . sortThisByDouble ( Double :: parseDouble ) )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
Verify . assertContainsAll ( collectProcedure . getCollection ( ) , 1 , 2 )
assertEquals ( 6 , result . intValue ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 64 , listWithCapacity . size ( ) )
assertEquals ( 10L , ? ? ? sumIntInterval ( ) . sum ( ) )
assertEquals ( 5 , value )
assertEquals ( expectedSum , sum [ 0 ] )
assertEquals ( interval , subList ( fromIndex , toIndex ) )
assertEquals ( 14 , this . intInterval . dotProduct ( interval ) )
assertEquals ( 1 , this . intInterval . size ( ) )
assertEquals ( BooleanArrayList . newList ( this ) , collect ( ) . toList ( ) )
assertEquals ( 0 , IntInterval . oneTo ( 9 ) . minIfEmpty ( 0 ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . maxIfEmpty ( 0 ) )
array . length
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( IntLists . mutable . withAll ( this ) . sortThis ( ) , ? ? ? )
// <AssertPlaceHolder>
assertEquals ( count , ? ? ? )
AssertPlaceHolder ; Verify . assertInstanceOf ( LazyIntIterable . class , IntInterval . oneTo ( 5 ) . asLazy ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 } , IntInterval . fromTo ( 4 , 1 ) . toSortedArray ( ) )
assertEquals ( count , oneTo ( count ) . hashCode ( ) )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( 0 , counter . getValue ( ) )
target . add ( each )
assertEquals ( 3 , list . size ( ) )
assertEquals ( interval , IntInterval . oneTo ( 5 ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertEquals ( 5 , value )
assertEquals ( expectedSum , sum [ 0 ] )
assertEquals ( 14 , this . intInterval . dotProduct ( interval ) )
assertEquals ( BooleanArrayList . newList ( this ) , collect ( ) . toList ( ) )
assertEquals ( 0 , IntInterval . oneTo ( 9 ) . minIfEmpty ( 0 ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . maxIfEmpty ( 0 ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
array . length
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( IntLists . mutable . withAll ( this ) . sortThis ( ) , ? ? ? )
// <AssertPlaceHolder>
assertEquals ( count , ? ? ? )
assertEquals ( Interval . oneToBy ( 5 , 1 ) . asLazy ( ) . getClass ( ) , LazyLongIterable . class )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 } , IntInterval . fromTo ( 4 , 1 ) . toSortedArray ( ) )
assertEquals ( count , oneTo ( count ) . hashCode ( ) )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
assertEquals ( 0 , counter . toLong ( ) )
seenSoFar . add ( each )
assertEquals ( 3 , this . with ( true , true , true ) . size ( ) )
interval . toImmutable ( )
Verify . assertIterableSize ( 3 , copy )
assertThat ( actual ) . containsExactly ( true , false , true )
assertThat ( actual ) . containsExactly ( ( byte ) 1 , ( byte ) 2 , ( byte ) 3 )
assertThat ( actual ) . containsExactly ( 'A' , 'B' , 'C' )
assertThat ( actual ) . containsExactly ( 1.0 , 2.0 , 3.0 )
assertThat ( actual ) . containsExactly ( 1.0f , 2.0f , 3.0f )
assertEquals ( 3 , actual . size ( ) )
assertThat ( actual ) . containsExactly ( 1L , 2L , 3L )
assertThat ( actual ) . containsExactly ( ( short ) 1 , ( short ) 2 , ( short ) 3 )
assertThat ( actual ) . containsExactly ( "Two" )
actual . size ( ) == 1
assertThat ( actual ) . containsExactly ( "1" , "3" )
assertEquals ( 2 , actual . size ( ) )
actual . forEach ( System . out :: println )
assertEquals ( 3 , map . size ( ) )
assertEquals ( 3 , map . size ( ) )
map . assertContains ( "1" , "One" , "2" , "Two" , "3" , "Three" )
assertEquals ( 1 , map . size ( ) )
assertEquals ( 2 , actual )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , map )
assertEquals ( this . getExpected ( ) . sumOfInt ( Integer :: intValue ) , actual )
assertEquals ( this . getExpected ( ) . sumOfLong ( Integer :: longValue ) , actual )
assertEquals ( 10.0 , actual , 0.001 )
assertEquals ( 10.0 , actual , 0.001 )
assertEquals ( 1 , Functions2 . minBy ( null ) . value ( ) )
assertEquals ( 4 , Functions2 . maxBy ( map ) . intValue ( ) )
assertEquals ( HashBag . newBagWith ( 1 , 3 , 5 ) , map . selectInstancesOf ( Integer . class ) . toBag ( ) )
map . toImmutable ( )
assertEquals ( "1" , Functions2 . minBy ( map , Functions . identity ( ) ) )
assertEquals ( 3 , map . size ( ) )
assertThat ( < variableName > , not  ( empty ( ) ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( map , cloned . map )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
map . entrySet ( ) . stream ( ) . anyMatch ( entry -> entry . getKey ( ) . equals ( "expectedKey" ) && entry . getValue ( ) . equals ( "expectedValue" ) )
assertTrue ( map . allSatisfy ( Predicates . isNull ( ) ) )
assertEquals ( map . size ( ) , 1 )
assertEquals ( 0 , map . size ( ) )
map . get ( key ) == null : map . getIfAbsentPut ( key , function )
assertEquals ( 0 , map . size ( ) )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertThat ( collection ) . containsExactlyElementsOf ( Arrays . asList ( map . values ( ) ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( 1 , collection . size ( ) )
assertEquals ( 1 , collection . size ( ) )
assertThat ( collection ) . containsExactly ( "1" )
assertThat ( collection ) . containsExactly ( "1" )
assertEquals ( 1 , collection . size ( ) )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertEquals ( new ImmutableBooleanArrayList ( true , true , true , true , true , true , true , true , true , true ) , result )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 2 , keys . size ( ) )
assertThat ( values ) . containsExactly ( 1 , 1 )
Verify . assertEquals ( 0 , empty . size ( ) )
assertEquals ( 1 , full . size ( ) )
assertNotNull ( only )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertEquals ( "{1=One, 2=Two, 3=Three}" , map . toString ( ) )
assertEquals ( FastList . newListWith ( 1 , 2 ) , keys )
assertEquals ( FastList . newListWith ( 1 , 2 ) , values )
} catch ( AssertionError e ) {
assertNotNull ( classUnderTest ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( pair ( 1 , 1 ) , values . get ( 0 ) )
assertEquals ( "{}" , map . toString ( ) )
assertEquals ( ImmutableMap . of ( absentKey , classUnderTest ) , Functions . getPassThru ( ) )
assertEquals ( FastList . newListWith ( 1 , 2 ) , keys )
assertEquals ( expected , this . classUnderTest ( ) . equalUnifiedMap ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( FastList . newListWith ( "1" , "2" ) , actualValues )
assertThat ( classUnderTest ( ) . size ( ) ) . isEqualTo ( 0 )
assertNotNull ( classUnderTest ( ) )
assertEquals ( expected , classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
Verify . assertSize ( immutable . size ( ) + 2 , immutable2 . castToSortedMap ( ) )
Verify . assertMapsEqual ( mutableMap , mutableMap2 )
assertEquals ( 1 , Functions2 . minBy ( map ) )
assertEquals ( 4 , map . size ( ) )
assertEqualsAndHashCode ( map1 , map2 ) ;
assertEquals ( "{1=One, 2=Two, 3=Three, 4=Four}" , map . toString ( ) )
} catch ( AssertionError e ) {
assertEquals ( map1 , map2 )
assertEquals ( collection , Arrays . asList ( elements ) )
assertEquals ( collection , Arrays . asList ( elements ) )
assertEquals ( collection , Arrays . asList ( elements ) )
assertEquals ( 0 , collection . size ( ) )
assertEquals ( new ImmutableBooleanArrayList ( true , true , true , true , true , true , true , true , true , true ) , result )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "1=One" , map . toString ( ) )
assertThat ( singletonMap . size ( ) ) . isEqualTo ( 1 )
assertEqualsAndHashCode ( map1 , map2 ) ;
assertEquals ( "{1=One, 2=Two, 3=Three}" , map . toString ( ) )
assertEquals ( 1 , integerBatchIterable . getBatchCount ( ) )
assertEquals ( "expectedValue" , sum . getValue ( ) )
map . forEach ( ( key , value ) -> assertTrue ( value ) )
assertEquals ( false , detect )
assertThat ( classUnderTest ( ) . allSatisfy ( < AssertPlaceHolder > ) )
assertThat ( classUnderTest ( ) . anySatisfy ( < AssertPlaceHolder > ) ) . isTrue ( )
// <AssertPlaceHolder>
@ Override
assertThat ( classUnderTest ( ) . toSet ( ) ) . contains ( < AssertPlaceHolder > )
assertFalse ( classUnderTest ( ) . anySatisfy ( ) )
assertNotNull ( classUnderTest ( ) )
// <AssertPlaceHolder>
assertEquals ( map . keySet ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( actual . size ( ) , 10 )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( target , source )
assertEqualsAndHashCode ( target . size ( ) , source . size ( ) )
assertEquals ( "{}" , empty . toString ( ) )
assertEquals ( actual . get ( 0 ) . size ( ) , 10 )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( actual , expected )
assertEqualsAndHashCode ( target , source )
assertEqualsAndHashCode ( target . size ( ) , source . size ( ) )
assertEquals ( "{}" , empty . toString ( ) )
assertEquals ( 3 , map . size ( ) )
assertEquals ( ImmutableMap . newWithKeyValue ( 1 , "One" ) , immutable )
assertEquals ( Sets . mutable . with ( ) , map . keySet ( ) )
assertNotNull ( new UnmodifiableBooleanBag ( this ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( "1" , sum4 . getValue ( ) )
assertEquals ( 0 , sum5 . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 21 , sum . getValue ( ) )
assertEquals ( ? ? ? , sum . getValue ( ) )
assertEquals ( 0 , sum . getValue ( ) )
assertEquals ( 3 , values . length )
assertEquals ( 2 , result . length )
assertEquals ( 6 , result . length )
assertEquals ( 3 , map . size ( ) )
assertEquals ( map . keySet ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
assertEquals ( 4 , map . size ( ) )
assertEquals ( FastList . newListWith ( 1 , 2 ) , keys )
assertEquals ( 3 , map . size ( ) )
assertEquals ( NullPointerException . class , ex . getClass ( ) )
assertEquals ( 0 , this . newMapWithKeysValues ( 1 , "1" , 2 , "Two" ) . removeAllKeys ( Sets . mutable . empty ( ) ) . size ( ) )
assertThat ( map ) . doesNotContainValue ( true )
assertEquals ( 2 , map . keySet ( ) . size ( ) )
assertEquals ( 2 , map . keySet ( ) . size ( ) )
assertEquals ( 2 , map . keySet ( ) . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( map . keySet ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
map . removeFromValues ( "1" )
assertThat ( map . values ( ) ) . containsOnly ( "1" , "Two" )
assertNotNull ( map )
assertNull ( this . getCollection ( ) )
assertEquals ( map . size ( ) , this . size ( ) )
assertEquals ( 2 , map . size ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 0 , hashMap . size ( ) )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 0 , hashMap . size ( ) )
assertEquals ( 0 , hashMap . size ( ) )
assertEquals ( 0 , hashMap . size ( ) )
assertEquals ( 0 , hashMap . size ( ) )
map . put ( 3 , "Three" )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
Verify . assertInstanceOf ( UnmodifiableBooleanBag . class , this . map . asUnmodifiable ( ) )
Verify . assertInstanceOf ( SynchronizedBooleanBag . class , this . map . asSynchronized ( ) )
result . contains ( PrimitiveTuples . pair ( Integer . valueOf ( 2 ) , false ) )
result . contains ( ObjectBooleanPair . of ( Integer . valueOf ( 2 ) , false ) )
result1 . assertContains ( 2 )
assertEquals ( 1 , result . getFirst ( ) )
< AssertPlaceHolder >
assertEquals ( one , two )
assertEquals ( expected , result . getMax ( ) )
assertEquals ( expected , actual )
assertEquals ( 1L , Functions2 . maxBy ( null ) )
Verify . assertIterableNotEmpty ( this . newWith ( 1 , true ) )
assertEquals ( 15L , result )
assertEquals ( 12 , result )
assertEquals ( 15L , result )
assertEquals ( 15.0 , result , 0.001 )
assertEquals ( 11.0f , result , 0.001f )
assertEquals ( 18.0 , actual , 0.001 )
assertEquals ( 18.0 , actual , 0.001 )
assertEquals ( this . getExpected ( ) . sumOfInt ( Integer :: intValue ) , actual )
assertEquals ( this . getExpected ( ) . sumOfLong ( Integer :: longValue ) , actual )
assertEquals ( Arrays . asList ( pair ( 1 , true ) , pair ( 2 , true ) , pair ( 5 , false ) ) , list )
assertEquals ( Arrays . asList ( pair ( 2 , true ) , pair ( 1 , true ) , pair ( 5 , false ) ) , list )
assertEquals ( Arrays . asList ( pair ( 1 , true ) , pair ( 2 , true ) , pair ( 5 , false ) ) , list )
assertEquals ( "{1=true, 2=false, 3=true}" , map . toString ( ) )
assertEquals ( "1" , collection . toString ( ) )
assertEquals ( "1,true,2,false,3,true" , makeStringWithSeparator ( ) )
assertEquals ( "1=true, 2=false, 3=true" , makeStringWithSeparatorAndStartAndEnd ( ) )
assertEquals ( "1=true, 2=false, 3=true" , builder . toString ( ) )
assertEquals ( "1, true, 2, false, 3, true" , builder . toString ( ) )
assertEquals ( "[1, true, 2, false, 3, true]" , builder . toString ( ) )
assertEquals ( 4 , this . classUnderTest ( ) . asLazy ( ) . toList ( ) . size ( ) )
"<AssertPlaceHolder>"
assertEquals ( Integer . valueOf ( 6 ) , total )
assertTrue ( bag1 . containsAll ( FastList . newListWith ( 1 , 1 , 1 , 2 ) ) )
assertTrue ( bag1 . containsAll ( FastList . newListWith ( 1 , 1 , 1 , 2 ) ) )
assertEquals ( true , map . get ( JOHNDOE ) )
assertEquals ( "JOHNDOE" , map . get ( JOHNDOE ) )
assertEquals ( 4 , map . size ( ) )
assertThat ( new SynchronizedBooleanBag ( this ) ) . isEqualTo ( super . asSynchronized ( ) )
assertNotNull ( getIfAbsentPut_Function ( ) )
assertEquals ( this , new UnmodifiableBooleanBag ( this ) )
assertEquals ( "{}" , map . toString ( ) )
assertEquals ( absentKey , classUnderTest . size ( ) + 1 )
assertNotNull ( map ) ;
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( ImmutableSortedMap . of ( 1 , "one" , 2 , "two" ) , immutableSortedMap )
assertEquals ( null , ? ? ? )
assertEquals ( null , ? ? ? lastKey ( ) )
assertEquals ( map . keySet ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
assertEquals ( 2 , result . length )
assertEquals ( 6 , result . length )
assertEquals ( immutableMap , SortedMaps . immutable . ofSortedMap ( immutableMap ) )
assertEquals ( comparator . compare ( ACDC , ZZTOP ) , ACDC . getName ( ) . compareTo ( ZZTOP . getName ( ) ) )
Verify . assertInstanceOf ( ImmutableSortedMap . class , result . castToSortedMap ( ) )
assertEquals ( Lists . mutable . with ( 1 , 2 , 3 , 4 ) , sortedEntries . collect ( Map . Entry :: getValue ) )
assertEquals ( map . keySet ( ) , new UnmodifiableMap < > ( Maps . mutable . of ( ) ) . keySet ( ) )
assertEqualsAndHashCode ( map1 , map2 )
Verify . assertInstanceOf ( UnmodifiableBooleanBag . class , this . newMapWithKeysValues ( 1 , "1" , 2 , "2" ) . asUnmodifiable ( ) )
Verify . assertContainsKeyValue ( 0 , "Zero" , map )
Verify . assertContainsKeyValue ( 5 , "Five" , map )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( comparator . compare ( ACDC , ZZTOP ) , ACDC . getName ( ) . compareTo ( ZZTOP . getName ( ) ) )
assertEquals ( 0 , map . size ( ) )
map . put ( 3 , "Three" )
assertTrue ( map . clone ( ) instanceof UnmodifiableTreeMap ) ;
assertEquals ( "Doe" , getLastName ( ) )
assertEquals ( "Johndoe" , map . get ( new Person ( "Johndoe" ) ) )
assertTrue ( keySet . isEmpty ( ) )
assertEquals ( "1=1" , element . toString ( ) )
assertEqualsAndHashCode ( immutableEntry , entry )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 10 , sum4 . getValue ( ) )
assertEquals ( 0 , sum5 . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertEquals ( "expectedValue" , sum . getValue ( ) )
assertEquals ( 0 , sum . getValue ( ) )
assertSame ( INTEGER_HASHING_STRATEGY , map . hashingStrategy ( ) )
assertSame ( INTEGER_HASHING_STRATEGY , map . hashingStrategy ( ) )
assertEquals ( ImmutableSet . of ( ) , multimap . keySet ( ) )
assertEquals ( 0 , emptyView . size ( ) )
assertEquals ( empty , ImmutableMultimap . < String , String > of ( ) )
assertEqualsAndHashCode ( original , copy )
assertEquals ( ImmutableMultimap . of ( "Two" , "2" ) , selectedMultimap )
assertEquals ( multimap . size ( ) - 1 , rejectedMultimap . size ( ) )
assertThat ( collectedMultimap ) . containsEntry ( "OneKey" , "1Value" )
assertThat ( collectedMultimap . get ( "One" ) ) . containsExactly ( "1Value" )
assertEquals ( expected , actual )
Verify . assertNotEmpty ( this . newMultimapWithKeyValue ( 1 , 1 ) )
assertEquals ( expected , collection )
assertEquals ( FastList . newListWith ( "1" , "2" , "3" ) , multimap . values ( ) )
assertEqualsAndHashCode ( map1 , map2 )
assertEqualsAndHashCode ( copy , original )
assertEquals ( FastList . newListWith ( "One" , "Two" , "Three" ) , multimap . keysView ( ) . toSortedList ( ) )
assertEquals ( 3L , multimap . sizeDistinct ( ) )
assertThat ( collectedMultimap ) . isEqualTo ( expectedMultimap )
assertEquals ( expectedMultimap , collectedMultimap )
assertFalse ( this . classUnderTest ( ) . containsKey ( 5 ) )
assertEquals ( "4" , multimap . get ( 4 ) )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertEquals ( 0 , bagMultimap . get ( 1 ) . count ( 0 ) )
assertEquals ( ImmutableSortedBagMultimap . class , this . newMultimap ( ) . toImmutable ( ) . getClass ( ) ) ;
assertEquals ( expected , collection )
assertEquals ( "One=1, One=2" , multimap . toString ( ) )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertEquals ( expected , collection )
assertTrue ( map . newEmpty ( ) . isEmpty ( ) )
assertEquals ( 0 , setMultimap . get ( 1 ) . first ( ) )
assertThrows ( expectedExceptionClass , ( ) -> {
assertEquals ( 4950 , parallelSum . getValue ( ) )
assertEquals ( classUnderTest ( ) , classUnderTest ( ) )
< AssertPlaceHolder >
// <AssertPlaceHolder>
assertThat ( classUnderTest ( ) . min ( ) ) . isEqualTo ( ImmutableBooleanBag . minWithoutComparator ( ) )
assertThat ( classUnderTest ( ) . max ( ) ) . isEqualTo ( expectedMax )
assertThat ( classUnderTest ( ) . minBy ( ) ) . isEqualTo ( < AssertPlaceHolder > )
assertEquals ( expectedValue , classUnderTest ( ) . maxBy ( ) )
assertThat ( sizes ) . containsExactly ( 2 , 2 , 1 )
assertEquals ( Lists . mutable . with ( 2 , 2 , 2 , 1 ) , sizes )
Verify . assertSize ( 1 , intersect )
Verify . assertSize ( 1 , intersect )
Verify . assertContains ( "1" , difference )
Verify . assertContains ( "1" , difference )
assertNotNull ( getLast ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( this . value , cloned . value )
// <AssertPlaceHolder>
assertEquals ( expected , actual )
assertThat ( parameter ) . isEqualTo ( expectedParameter )
assertNotNull ( classUnderTest ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertTrue ( set1 . isEmpty ( ) )
set . isEmpty ( )
assertEquals ( 1 , set . size ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( quadrupletonSet , set )
assertEquals ( expectedSet , actualSet )
assertEquals ( twin1 , twin2 )
assertEqualsAndHashCode ( one , oneA )
assertEquals ( HashBag . newBag ( ) , numbers . selectInstancesOf ( Double . class ) . toBag ( ) )
assertNotNull ( valueOf ( each ) )
assertNotNull ( valueOf ( each ) )
assertNotNull ( valueOf ( each ) )
Verify . assertNotEmpty ( this . intSet )
assertNull ( this . getCollection ( ) )
assertEquals ( expectedExceptionClass , ex . getClass ( ) )
assertEquals ( 1 , result )
assertEquals ( 6 , result )
assertEquals ( null , ? ? ? )
assertEquals ( IntLists . mutable . withAll ( this ) . sortThis ( ) , ? ? ? )
assertEquals ( Lists . mutable . with ( 1 , 2 , 3 , 4 ) , list )
Verify . assertEqualsAndHashCode ( "one" , one , oneA )
assertNotNull ( getLast ( ) )
assertEquals ( integers , this . classUnderTest ( ) )
assertEquals ( integers , classUnderTest ( ) )
integers . anySatisfy ( < Predicate > )
integers . forEach ( Assert :: assertNotNull )
assertEquals ( expected , integers . iterator ( ) . next ( ) )
assertThat ( integers ) . containsExactlyElementsIn ( classUnderTest ( ) )
// Add assertion here
assertEquals ( immutable . size ( ) + 1 , immutable . newWith ( immutable . size ( ) + 1 ) . castToSet ( ) . size ( ) )
assertEquals ( collection . size ( ) , result . size ( ) )
result . containsAll ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) )
assertEquals ( ImmutableBooleanBag . newBag ( ) , result )
integers . select ( Predicates . greaterThan ( integers . size ( ) ) , FastList . newList ( ) ) . isEmpty ( )
AssertPlaceHolder = "Assert.assertTrue(integers.reject(Predicates.lessThan(integers.size() + 1), FastList.newList()).isEmpty());"
assertEquals ( expected , actual )
assertEquals ( ImmutableSet . class , this . classUnderTest ( ) . chunk ( 10 ) . getFirst ( ) . getClass ( ) )
assertEquals ( integers , ? ? ? )
assertThat ( list ) . containsExactlyElementsOf ( integers )
assertEquals ( list , ? ? ? )
assertEquals ( expected , actual )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertEquals ( 1 , intersect . size ( ) )
assertEquals ( 1 , intersect . size ( ) )
Verify . assertContains ( "1" , difference )
Verify . assertContains ( "1" , difference )
assertThat ( < actualValue > , lessThan ( < expectedValue > ) )
assertEquals ( expectedCount , actualCount )
assertNotNull ( getLast ( ) )
assertEquals ( expected , actual )
assertEquals ( 6 , result )
assertEquals ( 6.0 , actual , 0.001 )
assertEquals ( expected , actual , delta )
assertEquals ( this . getExpected ( ) . sumOfInt ( Integer :: intValue ) , actual )
assertEquals ( this . getExpected ( ) . sumOfLong ( Integer :: longValue ) , actual )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
integers . contains ( valueOf ( each ) )
assertEquals ( 0 , set . size ( ) )
assertEquals ( 6 , integerBatchIterable . getBatchCount ( ) )
assertEquals ( 15 , sum . getValue ( ) )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
< AssertPlaceHolder > = assertEquals ( new ImmutableBooleanBag ( ) , classUnderTest ( ) )
@ Override
assertThrows ( NoSuchElementException . class , ( ) -> this . classUnderTest ( ) . booleanIterator ( ) . next ( ) )
Verify . assertSize ( 1 , intersect )
Verify . assertSize ( 1 , intersect )
Verify . assertContains ( "1" , difference )
Verify . assertContains ( "not present" , difference )
assertEquals ( 3 , array . length )
Verify . assertArrayEquals ( target , array2 )
assertEquals ( set1 , set2 )
assertEquals ( 1 , intersect . size ( ) )
Verify . assertSize ( 1 , intersect )
Verify . assertContains ( "not present" , difference )
Verify . assertContains ( "1" , difference )
assertEquals ( 3 , integer . intValue ( ) + i )
Verify . assertSize ( 1 , intersect )
Verify . assertSize ( 1 , intersect )
Verify . assertContains ( "1" , difference )
Verify . assertContains ( "1" , difference )
assertEquals ( 1 , result [ 0 ] )
assertEquals ( 5 , deserializedCollection . size ( ) )
assertEquals ( true , Predicates2 . in ( ) . test ( 1L ) )
integer . toString ( )
assertEquals ( "[1]" , makeString ( integer . toArray ( ) , "[" , ", " , "]" ) )
assertEquals ( "{1}" , stringBuilder . toString ( ) )
objects . removeIf ( Map . Entry :: getValue )
objects . removeIfWith ( equal ( true ) )
assertNull ( getReturnsNullIfObjectIsNotPooled ( ) )
assertEquals ( firstPooledObject , ? ? ? )
assertEquals ( firstObject , equalObject )
assertEquals ( source , newSet ( source ) )
set . containsAll ( source . toArray ( ) )
unifiedSet . containsAll ( MORE_COLLISIONS . subList ( 0 , i ) )
assertEquals ( 14 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
"Verify.assertEqualsAndHashCode(" objects ", this.unmodifiableSet, SerializeTestHelper.serializeDeserialize(this.unmodifiableSet));"
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertEquals ( 0 , sum [ 0 ] )
assertEquals ( set . size ( ) , 5 )
assertArrayEquals ( new byte [ ] { - 123 , - 53 , - 1 , 0 , 1 , 31 } , set . toSortedArray ( ) )
AssertPlaceHolder = "Assert.assertTrue(set.asLazy() instanceof LazyByteIterable);"
Verify . assertInstanceOf ( SynchronizedBooleanBag . class , set . asSynchronized ( ) )
Verify . assertInstanceOf ( UnmodifiableBooleanBag . class , set . asUnmodifiable ( ) )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertThat ( < variableName > , not  ( empty ( ) ) )
assertEquals ( 33 , sum [ 0 ] )
assertEquals ( 3 , set . size ( ) )
assertArrayEquals ( new byte [ ] { 0 , 1 , 31 } , set . toSortedArray ( ) )
set . asLazy ( )
assertEquals ( table . get ( null ) , "<expected value>" )
assertEquals ( Byte . valueOf ( ( byte ) 0 ) , sum )
assertEquals ( "con,start,contents,end" , set . toString ( ) )
assertThat ( actualSet ) . isEqualTo ( expectedSet )
assertEquals ( 10_000_000L , set . size ( ) )
assertEquals ( 0 , BooleanSets . immutable . of ( ) . size ( ) )
AssertPlaceHolder = "Assert.assertTrue(BooleanSets.immutable.with(null).isEmpty());"
assertEquals ( ImmutableSortedSet . newSet ( Interval . fromTo ( 0 , immutable . size ( ) ) ) , immutable . newWith ( 0 ) . castToSortedSet ( ) )
assertEquals ( set . size ( ) + 1 , withAll . size ( ) )
assertEquals ( collection . size ( ) , result . size ( ) )
"<AssertPlaceHolder>"
assertEquals ( ImmutableSortedSet . class , this . classUnderTest ( ) . chunk ( 10 ) . getFirst ( ) . getClass ( ) )
assertEquals ( 0 , result )
list . assertEquals ( newList ( integers ) )
Verify . assertListsEqual ( list , list2 ) ;
assertEquals ( list , integers . toList ( ) . toSortedListBy ( String :: valueOf ) )
assertThat ( each , is ( instanceOf ( Integer . class ) ) )
assertEquals ( expectedValue , classUnderTest ( ) . maxBy ( ) )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertThat ( actual ) . isEqualTo ( expected )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
Verify . assertSize ( set . size ( ) , intersect )
assertTrue ( set . isSubsetOf ( UnifiedSet . newSetWith ( "1" , "2" , "3" , "4" , "5" ) ) )
assertEquals ( ArrayStack . newStackWith ( 2 , 1 , 1 , 1 ) , set . toStack ( ) )
assertNotNull ( classUnderTest ( ) )
assertNotNull ( classUnderTest ( ) )
assertEquals ( 0 , integers . detectIndex ( each -> each == 2 ) )
assertThat ( classUnderTest ( ) . allSatisfy ( < AssertPlaceHolder > ) )
assertThat ( classUnderTest ( ) . anySatisfy ( < AssertPlaceHolder > ) ) . isTrue ( )
assertTrue ( this . classUnderTest ( ) . isEmpty ( ) )
Verify . assertContains ( Integer . valueOf ( 1 ) , set . castToSortedSet ( ) )
assertEquals ( set . select ( Predicates . lessThan ( 4 ) ) . castToSortedSet ( ) . size ( ) , 0 )
assertTrue ( integers . selectWith ( Predicates2 . lessThan ( ) , 4 ) . isEmpty ( ) )
assertEquals ( set . reject ( Predicates . lessThan ( 3 ) ) . castToSortedSet ( ) . size ( ) , 0 )
assertTrue ( integers . rejectWith ( Predicates2 . greaterThanOrEqualTo ( ) , 4 ) . isEmpty ( ) )
assertEquals ( collect , ? ? ? )
assertEquals ( take , ImmutableSortedSet . < Integer > of ( ) )
assertEquals ( drop . size ( ) , 0 )
assertEquals ( set . selectInstancesOf ( Integer . class ) . castToSortedSet ( ) . size ( ) , 0 )
assertEquals ( set . size ( ) , 0 )
assertEquals ( set . comparator ( ) , comparator )
assertEquals ( 1 , this . classUnderTest ( ) . powerSet ( ) . castToSortedSet ( ) . size ( ) )
assertEquals ( map . size ( ) , 0 )
assertEquals ( true , integers . collectBoolean ( ) )
assertEquals ( integers , ? ? ? )
integers . containsAll ( Arrays . asList ( elements ) )
integers . forEach ( i -> Assert . assertEquals ( ( double ) i , ? ? ? ) )
integers . containsAll ( Arrays . asList ( 1 , 2 , 3 ) )
assertEquals ( expectedSize , integers . size ( ) )
integers . containsAll ( Arrays . asList ( 1 , 2 , 3 ) )
assertEquals ( integers . size ( ) , < expected size >  )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( 16L , ( ( Object [ ] ) keys . get ( hashMap ) ) . length )
assertEquals ( true , integers . collectBoolean ( ) )
assertEquals ( integers , ? ? ? )
integers . forEach ( i -> assertTrue ( charFunction . apply ( i ) instanceof Character ) )
integers . forEach ( i -> Assert . assertEquals ( ( double ) i , ? ? ? ) )
assertEquals ( ImmutableSortedSet . of ( ) , integers )
assertEquals ( expectedSize , integers . size ( ) )
integers . containsAll ( Arrays . asList ( 1 , 2 , 3 ) )
assertEquals ( integers . size ( ) , < expected size >  )
assertEquals ( "Expected output" , focalMethod . toString ( ) )
? ? ? makeString ( ) { assertEquals ( "expectedValue" , toString ( ) ) ; } ? ? ?
assertEquals ( "1, 2, 3" , builder . toString ( ) )
objects . removeIf ( e -> e % 2 == 0 )
assertEquals ( "objects" , objectA , objectB )
assertEquals ( take , this . newWith ( Comparators . reverseNaturalOrder ( ) , 6 , 5 , 4 ) )
assertEquals ( drop , this . newWith ( Comparators . reverseNaturalOrder ( ) , 3 , 2 , 1 ) )
assertEquals ( Tuples . pair ( 5 , 0 ) , zip . next ( ) )
Verify . assertSetsEqual ( UnifiedSet . newSetWith ( "1" , "2" , "3" , "4" , "5" ) , union )
assertEquals ( TreeSortedSet . newSetWith ( "1" , "5" ) , difference )
assertEquals ( set , clone ) ;
assertEquals ( Arrays . asList ( 4 , 3 , 2 , 1 ) , list )
assertEquals ( Arrays . asList ( 4 , 3 , 2 , 1 ) , list )
assertEqualsAndHashCode ( adapter1 , adapter2 )
assertThrows ( UnsupportedOperationException . class , ( ) -> reverseForEach ( ) )
assertEquals ( expected , actual )
objects . removeIf ( Objects :: isNull )
assertEquals ( NoSuchElementException . class , assertThrows ( NoSuchElementException . class , ( ) -> sortedSetA . first ( ) ) )
Verify . assertInstanceOf ( UnmodifiableBooleanBag . class , set . asUnmodifiable ( ) )
"Verify.assertEqualsAndHashCode(" objects ", this.unmodifiableSet, SerializeTestHelper.serializeDeserialize(this.unmodifiableSet));"
assertNotNull ( min ( comparator ) )
assertNotNull ( max ( comparator ) )
assertNotNull ( min ( comparator ) )
assertNotNull ( max_without_comparator ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "[1, 2, 3]" , collection . toString ( ) )
assertEquals ( "1, 2, 3" , builder . toString ( ) )
Verify . assertEmpty ( set )
assertThrows ( IllegalArgumentException . class , ( ) -> stack . peekAt ( 0 ) )
assertEquals ( expected , stack . collectWithIndexWithTarget ( ( element , index , target ) -> PrimitiveTuples . pair ( element , index ) ) )
assertEquals ( expected , stack . selectWithIndexWithTarget ( "4" ) )
assertEquals ( expected , stack . rejectWithIndexWithTarget ( "2" ) )
Verify . assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , stack . collectByte ( ) )
assertEquals ( 'a' , stack . collectChar ( ) )
assertEquals ( 1.0 , stack . collectDouble ( ) , 0.001 )
Verify . assertEquals ( 1.0f , stack . collectFloat ( ) , 0.001f )
assertEquals ( 3 , stack . collectInt ( ) . size ( ) )
assertEquals ( 1L , stack . collectLong ( ) )
assertEquals ( ( short ) 1 , stack . collectShort ( ) )
assertEquals ( "[4, 3, 2, 1]" , stack . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , collection . groupByUniqueKey ( id -> id ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "1234" , builder . toString ( ) )
assertEquals ( "543210" , builder . toString ( ) )
assertEquals ( ArrayStack . newStackWith ( 2 , 1 , 1 , 1 ) , bag . toStack ( ) )
assertEquals ( "54321" , builder . toString ( ) )
assertEquals ( 3 , stack . getLast ( ) )
assertNotNull ( classUnderTest ( ) . toString ( ) )
assertThat ( classUnderTest ( ) , equalTo ( expected ) )
expected . assertEquals ( this . classUnderTest ( ) . toImmutable ( ) )
assertTrue ( iterator . hasNext ( ) )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertEquals ( 0 , take1 . size ( ) )
assertEquals ( integers , drop1 )
AssertPlaceHolder = "assertThrows(expectedExceptionClass, () -> arrayStack.distinct());"
assertEquals ( 1 , arrayStack . indexOf ( 1 ) )
assertTrue ( arrayStack . hasSameElements ( null ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , integers . detectIndex ( each -> each == 2 ) )
assertEquals ( null , ? ? ? of ( ) )
assertTrue ( iterator . hasNext ( ) )
assertEquals ( null , ? ? ? of ( ) )
assertEquals ( item , stack . peek ( ) )
Verify . assertSize ( 3 , this . unmodifiableStackString . select ( ignored -> true , FastList . newList ( ) ) )
assertEquals ( expected , actual )
assertEquals ( 10_000 , map . size ( ) )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertEquals ( expectedValue , getFirst ( ) )
assertArrayEquals ( new boolean [ ] { true , false , true } , stack1 . toArray ( ) )
assertEquals ( sizeEven , iEven )
assertEquals ( classUnderTest ( ) . toString ( ) , super . testToString ( ) )
assertThat ( list ) . containsExactlyElementsOf ( classUnderTest ( ) . toList ( ) )
this . classUnderTest ( ) . toImmutable ( )
assertEquals ( 0 , bag . size ( ) )
assertEquals ( 0 , bag . size ( ) )
assertEquals ( 0 , bag . size ( ) )
assertEquals ( ImmutableDoubleBag . of ( 1.0 ) , bag )
assertEquals ( UNICODE_STRING , adapt . toString ( ) )
assertEquals ( "CD" , sequence . toString ( ) )
assertEquals ( expectedString . toString ( ) , classUnderTest ( ) . toString ( ) )
assertEquals ( "321" , string )
assertEquals ( "\"Hello World\"" , adapt . toString ( ) )
assert sequence . toString ( ) . equals ( "NI" )
assertEquals ( expectedString . toString ( ) , classUnderTest ( ) . toString ( ) )
assertEquals ( "Expected output" , "<AssertPlaceHolder>" , string )
assertEquals ( UNICODE_STRING , builder . toString ( ) )
assertEquals ( "321" , string )
assert sequence . toString ( ) . equals ( adapted . substring ( start , end ) )
assertEquals ( "CodePointList.from(UNICODE_STRING).select(Character::isBmpCodePoint).toString()" , string )
assertEquals ( UNICODE_STRING , builder . toString ( ) )
assertEquals ( "321" , iterable . collectChar ( each -> ( char ) each ) . makeString ( "" ) )
assertEquals ( expected , actual )
assertEquals ( 0 , sortedList . binarySearch ( 1 ) )
assertEquals ( "foo" , entry . getKey ( ) )
assertEquals ( 2 , entry . getValue ( ) )
assertEquals ( pair , pair2 )
integers . containsAll ( Arrays . asList ( 1 , 2 ) )
integers . containsAll ( Arrays . asList ( 1 , 2 ) )
assertEquals ( expectedSize , integers . size ( ) )
integers . containsAll ( BooleanHashBag . with ( true , true , true ) )
integers . containsAll ( Arrays . asList ( 1 , 2 , 3 ) )
integers . containsAll ( Arrays . asList ( 1 , 2 , 3 ) )
assertEquals ( objectArrayExpected , ? ? ? )
assertEquals ( 1L , Predicates2 . < Integer > lessThan ( ) . count ( ) )
assertEquals ( true , Predicates2 . instanceOf ( ) . test ( object ) )
assertEquals ( true , ? ? ? )
assertEquals ( true , Predicates2 . instanceOf ( ) . noneSatisfyWith ( ) )
assertNotNull ( valueOf ( each ) )
array [ 0 ]
assertEquals ( expected , multimap )
assertEquals ( expected , actual )
assertArrayEquals ( array , newListWith ( true , false , true , false , true , false , true ) . toArray ( ) )
array . length == 5
assertEquals ( expected , actual , 0.0 )
assertEquals ( expected , actual , 0.0 )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
objects . length == 5
assertNotNull ( min )
assertNotNull ( max )
assertEquals ( Arrays . asList ( 5 , 4 , 3 , 2 , 1 ) , reverseResults )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 101 , list . size ( ) )
assertEquals ( 101 , list . size ( ) )
assertEquals ( 101 , list . size ( ) )
assertEquals ( 101 , list . size ( ) )
assertThat ( list . size ( ) , is ( 3 ) )
assertEquals ( "123" , list . get ( 2 ) )
assertEquals ( "123" , list . get ( 2 ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( list , Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) )
assertEquals ( Interval . oneTo ( 101 ) , list )
list . forEach ( num -> assertTrue ( num <= 100 ) )
assertEquals ( 101 , list . size ( ) )
assertEquals ( 100 , list . size ( ) )
assertEquals ( 100 , list . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 101 , result . size ( ) )
assertEquals ( 0 , sumOfDoubledValues . getValue ( ) )
assertEquals ( target , result )
assertEquals ( 105 , result . size ( ) )
assertEquals ( collectArrayList ( ) , Functions . getPassThru ( ) )
assertEquals ( collectList ( ) , Functions . getPassThru ( ) )
assertEquals ( Functions . getPassThru ( ) , ? ? ? )
target . stream ( ) . allMatch ( predicate )
target . stream ( ) . allMatch ( predicate :: test )
target . stream ( ) . allMatch ( predicate :: test )
assertNotNull ( detectArrayList ( ) )
objectArray . length > 0 : "Expected array to have at least one element"
assertNotNull ( detect ( objectArray , predicate ) )
assertThat ( target , not ( hasItem ( predicate ) ) )
assertThat ( target , not ( hasItem ( Matchers . < T > hasProperty ( predicate ) ) ) )
assertThat ( target , not ( contains ( anythingThat ( predicate ) ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
forEachArrayList ( ) . forEach ( ( k , v ) -> < AssertPlaceHolder > )
forEachList ( ) . forEach ( ( k , v ) -> ? ? ? assertThat ( k ) . isNotNull ( ) ; ? ? ? )
assertNotNull ( action )
assertEquals ( 3 , sourceFastList . size ( ) )
assertNotNull ( result )
assert result . equals ( injectValue )
assert ? ? ? injectIntoString ( ) { ? ? ? ; }
assert result . equals ( injectValue )
assertEquals ( injectValue , ? ? ? injectIntoMinString ( ) )
assertArrayEquals ( iterable . toArray ( ) , ? ? ? toList ( ) . toArray ( ) )
assertEquals ( result , expectedValue )
assertThat ( pair ) . satisfies ( procedure )
Verify . assertSerializedForm ( 1L , "rO0ABXNyAENvcmcuZWNsaXBzZS5jb2xsZWN0aW9ucy5pbXBsLmJsb2NrLmZhY3RvcnkuUHJlZGlj\n" +
assertThat ( pair ) . satisfies ( procedure )
assertEquals ( true , ? ? ? )
assertThat ( pair ) . doesNotSatisfy ( procedure )
assertEquals ( true , Predicates2 . instanceOf ( ) . noneSatisfyWith ( ) )
assertNotNull ( valueOf ( each ) )
assertEquals ( 5 , list . size ( ) )
integers . removeIf ( IntegerPredicates . isEven ( ) )
assertEquals ( 4 , result )
assertEquals ( 3 , result )
assertEquals ( expectedValue , result . getValue ( ) )
assertEquals ( 20 , result . getValue ( ) )
assertEquals ( newListWith ( true , false , true ) , ? ? ? sortThis ( ) )
assertEquals ( 1 , value )
assertEquals ( array . length , target . size ( ) )
assertEquals ( 10 , sum )
assertEquals ( "10" , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 10 , sum . getValue ( ) )
assertEquals ( 0 , sum )
assertEquals ( "10" , sum . getValue ( ) )
assertEquals ( 0 , sum . getValue ( ) )
assertEquals ( 0 , sum . getValue ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "01234" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( Lists . mutable . of ( 5 , 4 , 3 , 2 , 1 ) , reverseResults )
assertEquals ( 0 , results . size ( ) )
map . put ( "key" , 10 )
assertEquals ( expected , list )
assertThat ( results , containsOnlyElementsOf ( map . values ( ) ) )
assertEquals ( "nullValueKey" , null , map . get ( "nullValueKey" ) )
assertEquals ( 3 , map . size ( ) )
assertEquals ( ImmutableBooleanArrayList . newListWith ( false , false ) , result )
assertEquals ( 0 , target . size ( ) )
assertEquals ( 0 , target . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
result . assertContains ( ( byte ) 1 )
result . assertContains ( 'a' )
result . assertContains ( 1.0 )
result . assertContains ( 1.0f )
result . assertContains ( 1 )
result . assertContains ( 1 )
result . assertContains ( ( short ) 1 )
assertEquals ( 2 , result . size ( ) )
assertEquals ( "abcde" , alphabet )
assertEquals ( "123" , string )
assertThat ( string ) . containsOnlyDigits ( )
assertThat ( string ) . containsOnly ( "\u3042" , "\u3044" , "\u3046" )
assertEquals ( 'a' , character )
assertEquals ( 'b' , character )
assertEquals ( 'b' , character )
assertEquals ( "abc" , string )
assertTrue ( string . matches ( "[a-zA-Z]+" ) )
assertEquals ( 3 , count )
assertEquals ( 3 , count )
assertEquals ( "1a2b3c" , builder . toString ( ) )
assertEquals ( "1a2b3c" , builder . toString ( ) )
assertEquals ( "\u3042\uD840\uDC00\u3044\uD840\uDC03\u3046\uD83D\uDE09" , builder . toString ( ) )
assertEquals ( "" , getLastToken ( "" , "" ) )
assertEquals ( expectedList , actualList )
assertThat ( result , equalTo ( expectedResult ) )
assertThat ( result , equalTo ( expectedResult ) )
assertThat ( iterable ) . containsExactly ( "1" , "12" , "123" )
assertThat ( iterable ) . containsExactly ( "1" , "12" , "123" )
assertEquals ( 0 , Iterate . sizeOf ( iterable ) )
assertEquals ( 31 , Iterables . size ( iterable ) )
assertThat ( detect ( iterable . toArray ( new Integer [ 0 ] ) , i -> i > 30 ) ) . isEqualTo ( 31 )
assertThat ( iterable ) . contains ( 31 )
iterable . forEach ( Assertions :: assertNotNull )
assertThat ( detectIfNone ( iterable . toArray ( new Integer [ 0 ] ) , x -> x > 30 , null ) ) . isEqualTo ( 31 )
assertThat ( iterable , contains ( 1 , 2 , 3 ) )
assertThat ( iterable ) . contains ( 31 )
assertEquals ( 30 , sumOfDoubledValues . getValue ( ) )
assertEquals ( 0 , sumOfDoubledValues . getValue ( ) )
assertEquals ( Interval . oneTo ( 10 ) , newCollection )
assertEquals ( 20 , result . getValue ( ) )
assertThat ( max ( comparator ) ) . isEqualTo ( 99 )
assertThat ( min ( comparator ) ) . isEqualTo ( 1 )
assertThat ( max ( iterable . toArray ( new Integer [ 0 ] ) , Comparator . naturalOrder ( ) ) ) . isEqualTo ( 99 )
assertThat ( min ( iterable . toArray ( new Integer [ 0 ] ) , Comparator . naturalOrder ( ) ) ) . isEqualTo ( 1 )
assertEquals ( expectedList , list )
assertEquals ( 3 , list . size ( ) )
assertEquals ( expectedList , list )
assertEquals ( expectedValue , actualValue )
assertThat ( list ) . containsExactly ( "1" , "2" , "3" )
assertThat ( list . stream ( ) . mapToInt ( String :: length ) . max ( ) . getAsInt ( ) ) . isEqualTo ( 3 )
assertThat ( list . stream ( ) . mapToInt ( String :: length ) . min ( ) . getAsInt ( ) ) . isEqualTo ( 1 )
assertNull ( list . get ( 1 ) )
assertThrows ( NoSuchElementException . class , ( ) -> list . getLast ( ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 ) , list )
assertEquals ( true , Predicates2 . instanceOf ( ) . test ( 1L ) )
assertEquals ( "" , sum [ 0 ] )
assertTrue ( this . newWith ( ) . isEmpty ( ) )
assertThat ( focalMethod ( ) , not ( empty ( ) ) )
assertNotNull ( adapt ( value ) )
? ? ? collectIf ( ) { assert < AssertPlaceHolder >  ; } @ Override public MutableBooleanList toList  ( ) { return BooleanArrayList . newList ( this ) ; } ? ? ?
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( "expectedValue" , connectionAbstract . getBrokerURL ( ) )
assertEquals ( "amqp" , connectionAbstract . getAcceptor ( ) )
assertEquals ( "q1,t2" , queues )
assertEquals ( "https://www.apache.org" , ret )
assertEquals ( "admin" , new PerfClientCommand ( ) . getUser ( ) )
assertEquals ( 1 , Integer . parseInt ( parts [ 0 ] ) )
assertEquals ( "cannot detect invalid options" , e . getMessage ( ) )
assertEquals ( 1 , count . get ( ) )
assertEquals ( 0 , triggered . getCount ( ) )
assertEquals ( 1 , count . get ( ) )
assertEquals ( TimeUnit . HOURS , local . getTimeUnit ( ) )
assertEquals ( "CLIException" , e . getClass ( ) . getSimpleName ( ) + " failed. Reason: " + reason )
assertEquals ( assertContent , convertedContent )
assertSame ( buffer . writerIndex ( ) , wrapped . length - 1 )
assertEquals ( 33 , buffer . capacity ( ) )
assertEquals ( Arrays . toString ( expectedContent ) , Arrays . toString ( originalContent ) )
assertEquals ( expectedContent , originalContent )
assertEquals ( expectedContent , originalContent )
assertEquals ( expectedContent , originalContent )
assertThat ( e , is ( equalTo ( element ) ) )
assertNotNull ( codec )
assertEquals ( someString , blaVersion )
assertEquals ( 0 , check . getNodes ( ) . size ( ) )
assertNotNull ( codec )
assertEquals ( randomStart , simpleFuture . get ( ) )
assert failed
assertNotNull ( e )
assertThrows ( IllegalStateException . class , ( ) -> properties . clearInternalProperties ( ) )
assertNull ( props . getProperty ( "someProperty" ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertNotNull ( copiedProperties )
assertEquals ( null , focalMethod ( index ) )
assertEquals ( null , chunkedList . get ( messages ) )
assertEquals ( elements , cachedElements )
assertEquals ( Arrays . toString ( elements ) , Arrays . toString ( cachedElements ) )
assertEquals ( null , valueOf ( ( byte ) 0 ) )
assertEquals ( 0 , list . size ( ) )
assertNull ( iterator ( ) )
assertEquals ( testSet , other )
assertEquals ( testSet . size ( ) , other . size ( ) )
assertEquals ( testSet , other )
assertEquals ( 1 , missingValueCount )
assertEquals ( mapAsAString , testSet . toString ( ) )
assertEquals ( "world" , map . get ( "hello" ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( "" , result )
assertEquals ( expected , truncated )
assertEquals ( "testTruncateStringWithoutValueSizeLimit" , notTruncated )
AssertPlaceHolder = "assertEquals(\"secret_password\", configuration.getParams().get(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME));"
assertEquals ( "expectedValue" , getRetroactiveResourceAddressName ( "prefix" , "delimiter" , address ) )
assertEquals ( "expectedValue" , getRetroactiveResourceDivertName ( "prefix" , "delimiter" , address ) )
assertEquals ( "expectedValue" , decomposeRetroactiveResourceAddressName ( "prefix" , "delimiter" , "address" ) )
assertEquals ( 1 , handleResponseCount . get ( ) )
decodedMessage . assertEquals ( readBodyText ( buff ) )
assertThrows ( Exception . class , ( ) -> empty2 . getBodyBuffer ( ) . readLong ( ) )
assertEquals ( FACTORY , ? ? ? )
assertEquals ( "foo" , getTextContent ( e ) )
assertEquals ( "foo" , getTextContent ( e ) )
assertEquals ( "Expected equivalent XML elements" , XMLUtil . stringToElement ( s ) , XMLUtil . stringToElement ( s2 ) )
assertEquals ( "Expected XML elements to be equivalent" , XMLUtil . stringToElement ( s ) , XMLUtil . stringToElement ( s2 ) )
assertEquals ( "somedata" , stripped )
assert BASE_LOGGER . isStarted ( getCaller ( ) , source )
assertEquals ( 0 , bytes )
assertEquals ( 0 , bytes )
assertEquals ( "Shouldn't be using reflection" , ex . getMessage ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=QUEUE_XA_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=TOPIC_XA_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=QUEUE_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=TOPIC_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true" , factory . getBrokerURL ( ) )
assertEquals ( "udp://localhost:3030?ha=true&type=QUEUE_XA_CF" , factory . getBrokerURL ( ) )
assertEquals ( "udp://localhost:3030?ha=true&type=QUEUE_XA_CFInvalid" , factory . getBrokerURL ( ) )
assertThat ( buffer ) . isInstanceOf ( ByteBuffer . class )
assertNotEquals ( buffer , differentBuffer )
assertSame ( "The two objects should be the same" , small , big )
assertSame ( "The two objects should be the same" , small , big )
assertEquals ( size , buffer . capacity ( ) )
assertThat ( readOnlyBuffer . isReadOnly ( ) ) . isTrue ( )
assertEquals ( size , buffer . capacity ( ) )
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( "hello" , consumer . receive ( ) . getBody ( String . class ) )
assertEquals ( "Test" , SimpleBundle . MESSAGES . simpleTest ( ) )
assertEquals ( "V2-3" , parameters ( 2 , "3" ) )
assertThrows ( Exception . class , ( ) -> someExceptionParameter ( uuid ) )
assertEquals ( "A B C D" , SimpleBundle . MESSAGES . abcd ( "A" , "B" , "C" , "D" ) )
assertEquals ( "A B C D" , SimpleBundle . MESSAGES . abcd ( "A" , "B" , "C" , "D" ) )
assertEquals ( Logger . class , getLogger ( ) . getClass ( ) )
assertEquals ( null , protonProtocolManager . getServerSASLAnonDefault ( ) )
assertNotNull ( decoded . getConnectionID ( ) )
assertNull ( decoded . getLastValueProperty ( ) )
assertNull ( decoded . getDuplicateProperty ( ) )
assertNotNull ( decoded . getAddress ( ) )
assertEquals ( ADDRESS , decoded . getAddressSimpleString ( ) . toString ( ) )
assertEquals ( true , decoded . isDurable ( ) )
assertEquals ( false , decoded . isDurable ( ) )
assertNotNull ( decoded . isDurable ( ) )
decoded . getRoutingType ( ) == null
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertEquals ( "QUEUE" , decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getGroupID ( ) )
assertNull ( decoded . getGroupID ( ) )
assertNull ( decoded . getGroupID ( ) )
assert . assertEquals ( REPLY_TO , decoded . getReplyTo ( ) )
assertNull ( decoded . getReplyTo ( ) )
assertNotNull ( decoded . getReplyTo ( ) )
assertNotNull ( decoded . getAMQPUserID ( ) )
assertNull ( decoded . getAMQPUserID ( ) )
assertNull ( decoded . getAMQPUserID ( ) )
assertNotNull ( x )
assertEquals ( expirationTime , decoded . getExpirationTime ( ) )
assertEquals ( timestamp , decoded . getProperties ( ) . getCreationTime ( ) )
assertNotNull ( decoded . getScheduledDeliveryTime ( ) )
assertEquals ( scheduledTime , decoded . getScheduledDeliveryTime ( ) )
assertNotNull ( decoded . getScheduledDeliveryTime ( ) )
assertNull ( decoded . getScheduledDeliveryTime ( ) )
assertEquals ( expectedResult , result )
assertNotNull ( decoded )
assertNotNull ( decoded )
assertNotNull ( decoded )
assertNotNull ( decoded )
assertNotNull ( decoded )
assertNotNull ( decoded . getAnnotation ( TEST_ANNOTATION ) )
assertProtonMessageEquals ( message . getProtonMessage ( ) , copy . getProtonMessage ( ) )
assertEquals ( 10 , buffer . writerIndex ( ) )
assertEquals ( text , textMessage . getText ( ) )
assertEquals ( "expectedValue" , toMessageIdString ( null ) )
assertEquals ( "expectedValue" , toCorrelationIdString ( null ) )
assertNotNull ( getSymbol ( key ) )
assertEquals ( Boolean . TRUE , getMessageAnnotation ( "x-opt-test" , message ) )
assertEquals ( null , getMessageAnnotation ( "key" , message ) )
assertEquals ( null , getMessageAnnotation ( "key" , message ) )
assertEquals ( null , getMessageAnnotation ( "key" , null ) )
assertEquals ( deliveryTime , coreMessage . getScheduledDeliveryTime ( ) )
assertEquals ( deliveryTime , amqpMessage . getScheduledDeliveryTime ( ) )
assertNull ( amqp . getBody ( ) )
assertEquals ( null , amqp . getBody ( String . class ) )
assertSame ( byteBuffer , buffer . getByteBuf ( ) )
assertEquals ( 1024 , buffer . capacity ( ) )
assertEquals ( "TEST" , messageDispatch . getMessage ( ) . getStringProperty ( bytesPropertyKey ) )
assertSame ( manager . getLock ( ) , manager . getLock ( ) )
assertEquals ( null , manager . getDistributedLock ( "a" ) )
assertEquals ( closedLock , manager . getDistributedLock ( "a" ) )
assertEquals ( false , lock . tryLock ( ) )
assertThat ( held , is ( true ) )
assertEquals ( 0 , lock . getParticipantCount ( ) )
assertEquals ( 0 , unavailable . getCount ( ) )
assertEquals ( "XPATH '//title[@lang=''eng'']'" , filter . toString ( ) )
assertEquals ( "25K" , configuration . getGlobalMaxSize ( ) )
assertEquals ( "vv-${SOME_RANDOM_VV}" , configuration . getName ( ) )
assertEquals ( "vv-y" , configuration . getName ( ) )
assertEquals ( "Expected exception not thrown" , "<expected exception class>" , cause . getClass ( ) . getName ( ) )
assertEquals ( queueName , embeddedActiveMQDelegate . locateQueue ( queueName ) )
assertNotNull ( config . getAddressSettings ( address ) )
assertEquals ( 0 , config . getIDCacheSize ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "TEST" , bodyText )
assertEquals ( "Should have failed authenticating" , le . getMessage ( ) )
assertEquals ( "Should have failed authenticating" , le . getMessage ( ) )
assertEquals ( "FOO" , principal . getName ( ) )
assertEquals ( "FOO" , principal . getName ( ) )
assertEquals ( "queue_name" , queueConfig . getName ( ) . toString ( ) )
assertEquals ( 1 , test . getConnectors ( ) . size ( ) )
assertEquals ( false , lockExists )
assertEquals ( CACHE_ENTRY_VALUE , cache . get ( CACHE_ENTRY_KEY ) )
assertNotNull ( selectedTarget )
assertEquals ( instance , PolicyFactoryResolver . getInstance ( ) )
assertEquals ( "Expected value" , instance . keyFromName ( ) )
assertEquals ( "No PolicyFactory found for the policy " + policyName , e . getMessage ( ) )
assertEquals ( null , selectedTarget )
assertNotNull ( selectedTarget )
assertEquals ( "Should have thrown a FailedLoginException" , fle . getMessage ( ) )
assertEquals ( "Should have thrown a FailedLoginException" , "Should have thrown a FailedLoginException" , fle . getMessage ( ) )
assertEquals ( "abcdef&^*&!^ghijkl\uB5E2\uCAC7\uB2BB\uB7DD\uB7C7\uB3A3\uBCE4\uB5A5" , myString )
assertEquals ( "abcdef&^*&!^ghijkl\uD900\uDD00" , s . toString ( ) )
assertSame ( "s1 should be the same as s" , s , s1 )
assertSame ( expectedPooled , pool . getOrCreate ( s ) )
assertNotNull ( configs )
assertEquals ( "Consumer.*.>;2" , config . getExtraParams ( ) . get ( "virtualTopicConsumerWildcards" ) )
assertEquals ( "OFF_WITH_REDISTRIBUTION" , configuration . getMessageLoadBalancingType ( ) )
assertEquals ( 1234 , configuration . getProducerWindowSize ( ) )
assertEquals ( null , consumer . receive ( 1000 ) )
assertEquals ( null , consumer . receive ( 1000 ) )
assertEquals ( expectedReceiveCount ( ) , receivedMessageCount . get ( ) )
assertEquals ( timeout , duration )
assertEquals ( 1 , consumer . receiveNoWait ( ) )
assertEquals ( 0 , consumer . receiveNoWait ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( 0 , getPostOffice ( ) . getDuplicateIDCache ( ) . size ( ) )
assertNotNull ( sender )
assertNull ( getSender ( ) )
assertEquals ( nMsgs , count )
assertEquals ( nMsgs , count )
assertEquals ( 1 , queue . getReceiverCount ( ) )
assertEquals ( 1 , queue . getMessageCount ( ) )
assertEquals ( 0 , receiver . getLinkCredit ( ) )
assertEquals ( MSG_COUNT , queueView . getMessageCount ( ) )
assertEquals ( 1 , session . getSessionId ( ) )
assertEquals ( JMSSecurityException . class , jmsse . getClass ( ) )
assertEquals ( JMSSecurityException . class , jmsse . getClass ( ) )
assertEquals ( MSG_COUNT , getProxyToQueue ( getQueueName ( ) ) . getMessageCount ( ) )
assertEquals ( body , m . getText ( ) )
assertEquals ( "Expect sasl failure" , expected . getMessage ( ) )
assertEquals ( "Message temporary" , message . getText ( ) )
assertEquals ( "Message temporary" , message . getText ( ) )
assertEquals ( 10 , queueView . getQueueSize ( ) )
assertEquals ( 0 , queueView . getQueueSize ( ) )
assertEquals ( numMessages , queueView . getMessageCount ( ) )
assertEquals ( ConnectionState . STARTED , connection . getState ( ) )
assertEquals ( message , session . createMessage ( ) )
assertEquals ( "hello" , consumer . receive ( ) . getBody ( String . class ) )
assertEquals ( false , queueQuery ( queueName ) . isExists ( ) )
assertNull ( queueQuery ( queueName ) )
assertEquals ( false , queueQuery ( queueName ) . isExists ( ) )
assertEquals ( "AMQ229017: Queue " + queueName + " does not exist" , exception . getMessage ( ) )
assertNull ( queueQuery ( queueName ) )
assertNotNull ( repos . getMatch ( "test.foo.bar" ) )
assertEquals ( 1 , getManagementService ( ) . getTotalMessagesSent ( ) )
assertEquals ( numMessages , ? ? ? )
assertEquals ( 1 , consumer . getMessageCount ( ) )
assertEquals ( true , setThreadPools )
assertEquals ( 1 , message . getBodyBuffer ( ) . readableBytes ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( 0 , cf1 . getNumConnections ( ) )
assertEquals ( 0 , errors . get ( ) )
assertEquals ( 1 , consumer . receiveImmediate ( ) )
assertEquals ( 1 , consumer . receive ( ) . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( null , message2 )
assertEquals ( 10 , ( end - start ) )
assertEquals ( timeout , transport . getParams ( ) . get ( TransportConstants . NETTY_CONNECT_TIMEOUT ) )
assertEquals ( 1 , cc . receive ( 1000 ) )
assertFalse ( q . isDurable ( ) )
assertEquals ( true , q . isDurable ( ) )
assertEquals ( false , q . isTemporary ( ) )
AssertPlaceHolder = "assertTrue(q.isTemporary());"
assertEquals ( filterString , q . getFilterString ( ) )
assertNotNull ( binding )
assertEquals ( 0 , session . queueQuery ( queueName ) . getMessageCount ( ) )
assertEquals ( queueName , consumer . getQueueName ( ) )
assertEquals ( 1 , clientSession . getConsumerCount ( queueName ) )
assertEquals ( queueName , consumer . getQueueName ( ) )
assertEquals ( "Invalid Exception type: ActiveMQInvalidFilterExpressionException" , e . getType ( ) )
assertEquals ( browseOnly , consumer . isBrowseOnly ( ) )
assertEquals ( 100 , consumer . getWindowSize ( ) )
assertEquals ( "Expected exception of type ActiveMQObjectClosedException" , ActiveMQObjectClosedException . class , e . getClass ( ) )
assertEquals ( true , failed )
assertEquals ( MSG_COUNT , count . get ( ) )
assertEquals ( MSG_COUNT , count . get ( ) )
assertEquals ( MSG_COUNT , count . get ( ) )
assertEquals ( MSG_COUNT , count . get ( ) )
assertThat ( listener . getLatch ( ) . getCount ( ) , equalTo ( 0 ) )
assertEquals ( true , clientMessage . isDurable ( ) )
assertEquals ( true , clientMessage . isDurable ( ) )
assertEquals ( JAAS , getType ( "jaas" ) )
assertEquals ( "expectedVersion" , BASE_LOGGER . getVersion ( getCaller ( ) , source ) )
assertEquals ( "expectedNodeId" , nodeId )
assertEquals ( SecurityManagerType . JAAS , getType ( "jaas" ) )
assertEquals ( numMessages - ( 3 * threshold ) , consumer . receiveImmediate ( ) . getMessageCount ( ) )
assertEquals ( "m" + i , receive ( ) . getBody ( String . class ) )
assertEquals ( 1 , message . getBodySize ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readableBytes ( ) )
assertThrows ( ActiveMQClusterSecurityException . class , ( ) -> clusterControl . authorize ( ) )
assertEquals ( jmsCorrelationID , getJMSCorrelationID ( message ) )
assertEquals ( 0 , queue . getMessageCount ( ) )
assertNotNull ( producer )
assertNotNull ( sessionFactory )
assertEquals ( 3 , serverLocator . getInitialConnectAttempts ( ) )
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( true , server . isStarted ( ) )
assertTrue ( server . isStarted ( ) )
assertEquals ( 0 , interceptor . getReceivedMessages ( ) . size ( ) )
assertEquals ( 0 , message . getBodySize ( ) )
assertEquals ( 1 , interceptor . getMessages ( ) . size ( ) )
assertEquals ( JMSFactoryType . XA_CF , getFactoryType ( "vm://0?type=XA_CF" ) )
assertEquals ( JMSFactoryType . QUEUE_CF , getFactoryType ( "vm://0?type=QUEUE_CF" ) )
assertEquals ( JMSFactoryType . TOPIC_CF , getFactoryType ( "vm://0?type=TOPIC_CF" ) )
assertEquals ( true , cf . isHA ( ) )
assertNotNull ( destination )
assertNotNull ( destination )
assertEquals ( false , getUseTopologyForLoadBalancing ( ) )
assertEquals ( id , conn2 . getClientID ( ) )
assertEquals ( conn . getClientID ( ) , conn2 . getClientID ( ) )
assertEquals ( "InvalidClientIDException expected" , InvalidClientIDException . class , expected . getClass ( ) )
assertEquals ( 1 , consumer1 . receiveNoWait ( ) )
assertEquals ( 1 , producer . getDeliveryMode ( ) )
assertEquals ( "InvalidClientIDException should be thrown" , InvalidClientIDException . class , e . getClass ( ) )
assertEquals ( false , failed . get ( ) )
assertEquals ( noOfMessages , 1 )
assertEquals ( 0 , noOfMessages )
assertEquals ( null , consumer . receiveNoWait ( ) )
assertEquals ( "test" , txt . getText ( ) )
assertEquals ( "test" , txt . getText ( ) )
assertEquals ( "message text" , receivedMessage . getText ( ) )
assertEquals ( "message text" , receivedMessage . getText ( ) )
assertEquals ( "Exception expected" , e . getClass ( ) , MessageFormatException . class )
assertEquals ( randomStr , receiveMsg . getText ( ) )
assertThrows ( MessageFormatRuntimeException . class , ( ) -> producer . send ( queue1 , ( Message ) null ) ) ;
assertEquals ( "Expected InvalidDestinationRuntimeException to be thrown" , InvalidDestinationRuntimeException . class , assertThrows ( InvalidDestinationRuntimeException . class , ( ) -> producer . send ( ( Destination ) null , msg ) ) )
assertEquals ( "id" , context . getClientID ( ) )
assertEquals ( id , c2 . getClientID ( ) )
assertEquals ( id , context . getClientID ( ) )
assertEquals ( 0 , prod . getDeliveryMode ( ) )
assertEquals ( true , server . isActive ( ) )
assert buff . limit ( ) == 10
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( 1 , getCurrentFile ( ) . getStartIndex ( ) )
assertEquals ( true , ? ? ? createManagementControl ( "testName" ) . isReplicaSync ( ) )
assertEquals ( null , serverControl . getDivertNames ( getCaller ( ) ) )
assertTrue ( ! server . isStarted ( ) )
assertEquals ( address , addressControl . getAddress ( ) )
assertThat ( addressControl . isRetroactiveResource ( source ) ) . isTrue ( )
assertEquals ( 0 , count )
assertEquals ( deadLetterAddress , queueControl . getDeadLetterAddress ( ) )
assertMessageMetrics ( queueControl , 1 , durable )
assertEquals ( "<expected value>" , history )
assertEquals ( queueName , embeddedActiveMQDelegate . locateQueue ( queueName ) . getQueueName ( ) )
assertNotNull ( b )
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( 0 , connection . getKeepAlive ( ) )
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( "DLA" , SimpleString . toSimpleString ( embeddedActiveMQDelegate . locateQueue ( "activemq.notifications" ) . getDeadLetterAddress ( ) ) )
assertEquals ( 0 , getSubscriptionQueue ( topic , clientId ) . size ( ) )
assertEquals ( 1 , q . getQueueName ( ) . length ( ) )
assertEquals ( "testXX" + i , txt . getText ( ) )
assertEquals ( Transaction . Status . STATUS_SUSPENDED , transaction . getStatus ( ) )
assertEquals ( Transaction . Status . STATUS_SUSPENDED , transaction . getStatus ( ) )
assertEquals ( 1 , transaction . getCommittedResources ( ) . size ( ) )
assertNull ( transaction )
assertEquals ( 0 , server . getRemotingService ( ) . getConnections ( ) . size ( ) )
assertEquals ( 1 , consumer . receiveNoWait ( ) )
assertEquals ( "JMSMessageID should contain host name" , IdGenerator . getHostName ( ) , m . getJMSMessageID ( ) )
assertEquals ( outbound [ i ] , message )
assertEquals ( 1 , getPostOffice ( ) . getInbox ( ) . size ( ) )
assertEquals ( 1 , pubishDoneToQeueuB . getCount ( ) )
assertNotNull ( message )
assertEquals ( "PAGE_STORE_" , storageConfiguration . getPageStoreTableName ( ) )
assertEquals ( origFileSize + ( align / 2 - 1 ) , fileSize )
assertEquals ( origFileSize + ( align / 2 + 1 ) , fileSize )
assertEquals ( origFileSize + ( align / 2 ) , fileSize )
assertEquals ( "Invalid error code" , "InvalidCredentialsException" , e . getErrorCode ( ) )
assertEquals ( "Expected resource recovery to be null" , null , getResourceRecovery ( ) )
assertEquals ( msg , cons . receive ( 10000 ) )
assert sf . isClosed ( )
assertEquals ( manager . getState ( ) , ReplicationManager . State . STARTED )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertNotNull ( e )
assertEquals ( "Expected exception not thrown" , "<expected exception class>" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( 1 , producer . getSentCount ( ) )
assertEquals ( "Expected JMSException to be thrown" , JMSException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQSecurityException . class , se . getClass ( ) )
assertEquals ( "Invalid Exception type:" , e . getType ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( 1 , latch . getCount ( ) )
assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getDeadLetterQueuePrefix ( ) )
assertEquals ( suffix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getDeadLetterQueueSuffix ( ) )
assertEquals ( prefix + "#" + suffix , embeddedActiveMQDelegate . locateQueue ( "#" ) . getName ( ) )
assertNotNull ( createConsumer ( queueName ) )
assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getExpiryQueuePrefix ( ) )
assertEquals ( suffix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getExpiryQueueSuffix ( ) )
assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getExpiryQueuePrefix ( ) )
assertEquals ( 1 , context . createConsumer ( queueName ) . getMessageAvailableCount ( ) )
assertNotNull ( e )
assertEquals ( "creating a session here should fail" , e . getMessage ( ) )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( queue , embeddedActiveMQDelegate . locateQueue ( queueName ) )
assertEquals ( "Invalid Exception type:" , e . getType ( ) )
assertEquals ( "Invalid Exception type:" , e . getType ( ) )
assertEquals ( "Hello World" , ( ( TextMessage ) msg ) . getText ( ) )
assertEquals ( count , latch . getCount ( ) )
assertEquals ( "AMQ119119" , e . getMessage ( ) )
assertEquals ( stompPayload , new String ( mqttPayload ) )
assertEquals ( payload , frame . getBody ( String . class ) )
assertEquals ( "BEGIN" , frame . getCommand ( ) )
assertEquals ( "myclientid" , conn . getClientId ( ) )
assertEquals ( "myclientid" , conn . getClientId ( ) )
assertNull ( server . locateQueue ( QUEUE ) )
assertEquals ( conn , AmqpClient . connect ( uri , null , null ) )
assertEquals ( "" , conn . getCommand ( ) )
frame . getCommand ( )
assertNull ( frame )
assertEquals ( null , message )
assertEquals ( "Expected error frame" , Stomp . Commands . ERROR , error . getCommand ( ) )
assertEquals ( "Expected message ID to be 'someother'" , "someother" , error . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( messageID , frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( null , error )
assertEquals ( "Expected message id to be 'someother'" , "someother" , frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( "ERROR" , f . getCommand ( ) )
assertEquals ( "SUBSCRIBE" , frame . getCommand ( ) )
assertNotNull ( frame )
assertEquals ( count , latch . getCount ( ) )
assertEquals ( "mysubid" , frame . getHeader ( ) . getSubscriptionId ( ) )
assertEquals ( "Expected topic to be subscribed with specified QoS" , QoS . values ( ) [ qos ] , topics [ 0 ] . getQoS ( ) )
assertEquals ( null , message )
assertEquals ( NUMBER_OF_THREADS , threads . length )
assertEquals ( 0 , embeddedActiveMQDelegate . locateQueue ( queueName ) . getConsumerCount ( ) )
assertEquals ( null , message )
assertEquals ( "mysubid" , frame . getHeader ( ) . getSubscriptionId ( ) )
assertEquals ( "ERROR" , frame . getCommand ( ) )
assertEquals ( 1 , cons . receiveImmediate ( ) . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( 0 , browser . getMessageCount ( ) )
assertEquals ( "somethingelse" , c . getClientID ( ) )
assertEquals ( null , getClientID ( ) )
assertEquals ( testClientId , c . getClientID ( ) )
assertEquals ( null , clientID )
assertEquals ( "message one" , rm . getText ( ) )
assertEquals ( "message one" , rm . getText ( ) )
assertEquals ( "one" , rm . getText ( ) )
assertRemainingMessages ( 1 )
assertEquals ( selector , consumer . getMessageSelector ( ) )
assertEquals ( null , topicConsumer . getMessageSelector ( ) )
assertEquals ( false , topicConsumer . getNoLocal ( ) )
assertEquals ( t , getTopic ( ) )
assertEquals ( null , ( ( TopicSubscriber ) topicConsumer ) . getTopic ( ) )
assertEquals ( queue1 , q )
assertEquals ( null , ( ( QueueReceiver ) queueConsumer ) . getQueue ( ) )
assertEquals ( null , m )
assertEquals ( null , msg )
assertEquals ( null , sess1 . getClientID ( ) )
assertEquals ( new SimpleDestination ( ) , m . getJMSDestination ( ) )
assertEquals ( "something" , rec . getText ( ) )
assertEquals ( dest , p . getDestination ( ) )
assertEquals ( "message one" , bm . getText ( ) )
assertEquals ( "payload" , m . getText ( ) )
assertEquals ( expected , actual )
AssertPlaceHolder = "Assert.assertEquals(ActiveMQJMSConnectionFactory.class, instance.getClass());"
assertEquals ( true , isCompressLargeMessage ( ) )
assertEquals ( "dilbert-id" , clientID )
assertEquals ( "myID" , clientID )
assertEquals ( "something" , rm . getText ( ) )
assertEquals ( "testing" , m2 . getText ( ) )
assertEquals ( "payload" , m . getText ( ) )
assertEquals ( "payload" , m . getText ( ) )
assertEquals ( "Topic1" , topic . getTopicName ( ) )
assertEquals ( true , thrown )
assertEquals ( null , m )
assertEquals ( true , thrown )
assertEquals ( NUM_MESSAGES * NUM_TX , count )
assertEquals ( null , cons . receiveNoWait ( ) )
assertEquals ( MESSAGE_COUNT , cons . receiveNoWait ( ) )
assertEquals ( dest , m . getJMSDestination ( ) )
assertEquals ( 1 , queueConsumer . getQueueSize ( ) )
assertEquals ( "ID:null" , result . getJMSMessageID ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( "Expected message is null" , null , expectedMessage )
assertEquals ( "ID:123456" , result . getJMSMessageID ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( "ID:something" , m . getJMSMessageID ( ) )
assertEquals ( tempQ , getJMSReplyTo ( m ) )
assertEquals ( null , getJMSReplyTo ( m ) )
assertNull ( receive ( ) )
assertEquals ( originalType , gotType )
assertEquals ( null , getJMSType ( m ) )
assertEquals ( null , rm . readString ( ) )
assertEquals ( null , rm . getText ( ) )
assertEquals ( 7 , ic . lookup ( "/nosuchsubcontext/sub1/sub2/sub3/name" ) )
assertEquals ( 8 , ic . lookup ( "/doesnotexistyet" ) )
assertEquals ( 9 , ic . lookup ( "doesnotexistyet" ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( null , message . getText ( ) )
assertEquals ( null , message . getText ( ) )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( "ID:foo" , receiver . getJMSMessageID ( ) )
assertEquals ( "3.14159" , message . getStringProperty ( "pi" ) )
assertEquals ( Double . NaN , message . getDoubleProperty ( "pi" ) )
assertEquals ( 3.14159 , getDoubleProperty ( new SimpleString ( "pi" ) ) , 0.00001 )
assertEquals ( Float . NaN , message . getFloatProperty ( "pi" ) )
assertEquals ( 3.14159f , getFloatProperty ( new SimpleString ( "pi" ) ) , 0.001 )
assertEquals ( 3 , message . getLongProperty ( "pi" ) )
assertEquals ( 0L , message . getLongProperty ( "prop" ) )
assertEquals ( 3 , message . getIntProperty ( "pi" ) )
assertEquals ( 0 , getIntProperty ( new SimpleString ( "prop" ) ) . intValue ( ) )
assertEquals ( 3.14159 , message . getShortProperty ( "pi" ) )
assertEquals ( 0 , message . getShortProperty ( "prop" ) )
assertEquals ( 3 , message . getByteProperty ( "pi" ) )
assertEquals ( "0" , message . getStringProperty ( "prop" ) )
assertEquals ( Boolean . valueOf ( "test" ) , message . getBooleanProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127L , message . getLongProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( 127.0 , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( false , message . getBooleanProperty ( "prop" ) )
assertEquals ( "127.0" , message . getStringProperty ( "prop" ) )
assertEquals ( 127.0 , message . getFloatProperty ( "prop" ) , 0.001 )
assertEquals ( 127.0F , message . getFloatProperty ( "prop" ) )
assertEquals ( 127L , message . getLongProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( 127.0F , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127L , message . getLongProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127L , message . getLongProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( "127" , message . getStringProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127L , message . getIntProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( Integer . MAX_VALUE , message . getShortProperty ( "prop" ) )
assertEquals ( Integer . MAX_VALUE , message . getByteProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( ( short ) 127 , message . getShortProperty ( "prop" ) )
assertEquals ( ( byte ) 127 , message . getByteProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127L , getLongProperty ( "prop" ) . longValue ( ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( ( byte ) 127 , message . getByteProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( "true" , message . getStringProperty ( "prop" ) )
assertEquals ( 1.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 0.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( true , message . getLongProperty ( "true" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( Float . valueOf ( 3.14159f ) , message . getFloatProperty ( "pi" ) )
assertEquals ( expectedValue , message . getObjectProperty ( key ) )
assertEquals ( "expectedValue" , message . getStringProperty ( "key" ) )
assertEquals ( 0.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 0.0f , message . getFloatProperty ( "prop" ) , 0.001f )
assertEquals ( 0L , message . getLongProperty ( "prop" ) )
assertEquals ( 0 , message . getIntProperty ( "prop" ) )
assertEquals ( 0 , message . getShortProperty ( "prop" ) )
assertEquals ( 0 , message . getByteProperty ( "prop" ) )
assertEquals ( Boolean . valueOf ( null ) , getBooleanProperty ( key ) )
assertEquals ( null , message . getText ( ) )
assertEquals ( null , message . getStringProperty ( "prop" ) )
assertEquals ( "NULL = ZERO" , receiver )
assertNotNull ( receiver )
assertNotNull ( receiver )
assertEquals ( 0 , receiver . getQueueSize ( ) )
assertEquals ( 0 , receiver . getQueueSize ( ) )
assertEquals ( 1 , receiver . getQueueSize ( ) )
AssertPlaceHolder = "Assert.assertTrue(receiver > 0);"
assertNotNull ( receiver )
assertEquals ( 0 , receiver . getQueueSize ( ) )
assertNotNull ( receiver )
assertNotNull ( receiver )
assertEquals ( "testIdentifierConversion:2" , msg . getText ( ) )
assertEquals ( "testGreaterThan:2" , msg . getText ( ) )
assertEquals ( "testEquals:2" , msg . getText ( ) )
assertEquals ( "testEquals:2" , msg . getText ( ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Hello world" , m . getText ( ) )
assertEquals ( textMessage , msgReceived . getBodyBuffer ( ) . readString ( ) )
assertEquals ( textMessage , messageReceived . getText ( ) )
assertEquals ( expectedBrandImage , loginPage . getBrandImage ( 10 ) )
assertEquals ( consumer2 , consumer )
assertEquals ( str , newstr )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> {
assertArrayEquals ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , bytes )
assertEquals ( 3 , outBuffer . getPacketCount ( ) )
assertEquals ( true , XMLUtil . validate ( element , "schema/artemis-configuration.xsd" ) )
assertEquals ( 0 , fc . getPersistDeliveryCount ( ) )
assertEquals ( 1 , connectorsService . getConnectorServiceConfigurations ( ) . size ( ) )
assertEquals ( 2000 , journalImpl . getCapacity ( ) )
assertEquals ( id , JournalFilesRepository . getFileNameID ( "jrn" , fileName ) )
assertEquals ( 2 , journalImpl . getRecords ( ) . size ( ) )
assertEquals ( 1 , journalImpl . getRecords ( ) . size ( ) )
assertEquals ( 1 , getTxCount ( ) )
assertEquals ( 0 , count ( ) )
assertEquals ( "Expected exception to be thrown" , expectedExceptionClass , e . getClass ( ) )
assertEquals ( 1 , count . get ( ) )
assertNotNull ( underTest . get ( hashAhash ) )
assertNotNull ( underTest . get ( new SimpleString ( "test.#.0.#.168" ) ) )
assertNotNull ( underTest . get ( new SimpleString ( "t.#.0.#" ) ) )
assertEquals ( 1 , bind . getBindings ( ) . size ( ) )
assertEquals ( 1 , bind . getBindings ( ) . size ( ) )
assertEquals ( 1 , bind . getBindings ( ) . size ( ) )
assertNull ( ad . removeBinding ( SimpleString . toSimpleString ( "two" ) , null ) )
assertNull ( ad . removeBinding ( SimpleString . toSimpleString ( "*::two" ) , null ) )
assertNull ( putAndGetNullableString ( null ) )
assertNull ( putAndGetNullableSimpleString ( null ) )
assertEqualsByteArrays ( bytes , b )
assertEqualsByteArrays ( bytes . length / 2 , bytes , b )
assertEquals ( true , wrapper . readNullableBoolean ( ) )
assertEquals ( false , wrapper . readNullableBoolean ( ) )
assertEquals ( null , wrapper . readNullableBoolean ( ) )
assertEquals ( l , wrapper . readNullableLong ( ) )
assertEquals ( null , wrapper . readNullableLong ( ) )
assertEquals ( str , wrapper . readUTF ( ) )
assertEquals ( expectedID , BASE_LOGGER . getID ( getCaller ( ) , source ) )
assertEquals ( size , buff . writerIndex ( ) )
assertThrows ( Exception . class , ( ) -> new SSLSupport ( )
assertNotNull ( e )
assertEquals ( "Expected exception to be thrown" , CLIException . class , assertThrows ( CLIException . class , ( ) -> new SSLSupport ( ) . setKeystoreProvider ( storeProvider ) . setKeystoreType ( storeType ) . setKeystorePath ( keyStorePath ) . setKeystorePassword ( "bad password" ) . setTruststoreProvider ( storeProvider ) . setTruststoreType ( storeType ) . setTruststorePath ( trustStorePath ) . setTruststorePassword ( trustStorePassword ) . createContext ( ) ) )
assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertThrows ( Exception . class , ( ) -> new SSLSupport ( )
assertEquals ( expectedSelector , createSelectorFromAddress ( address ) )
assertThat ( createSelectorFromAddress ( address ) ) . isEqualTo ( expectedSelector )
assertEquals ( name , queue . getName ( ) )
assertEquals ( 10.0 , rate , 0.01 )
assertRefListsIdenticalRefs ( refs , list )
assertEquals ( 3 , BASE_LOGGER . getMessagesAdded ( getCaller ( ) , source ) )
assertEquals ( 3 , queue . size ( ) )
assertEquals ( 3 , queue . size ( ) )
assertEquals ( address , destination . getPhysicalName ( ) )
assertNotNull ( npe )
assertNotNull ( destination )
AssertPlaceHolder = "assertEquals(expectedType, getType(actualType));"
assertEquals ( "Expected IllegalArgumentException to be thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( "" , message . getBoolean ( "" ) )
assertEquals ( false , message . getBoolean ( itemName ) )
assertEquals ( 0 , message . getByte ( itemName ) )
assertEquals ( "Expected MessageFormatException to be thrown" , MessageFormatException . class , e . getClass ( ) )
AssertPlaceHolder = "fail("  Expected NumberFormatException  to be thrown ")"
assertEquals ( 0 , message . getShort ( itemName ) )
assertEquals ( 0 , message . getInt ( itemName ) )
assertEquals ( "Expected MessageFormatException to be thrown" , MessageFormatException . class , e . getClass ( ) )
assertEquals ( '\u0000' , message . getChar ( itemName ) )
assertEquals ( '?' , message . getChar ( itemName ) )
assertEquals ( 0L , message . getLong ( itemName ) )
assertEquals ( "Expected MessageFormatException to be thrown" , MessageFormatException . class , e . getClass ( ) )
assertEquals ( 0.0f , message . getFloat ( itemName ) )
assertEquals ( 0.0f , message . getFloat ( itemName ) )
assertEquals ( ( double ) value , ( double ) message . getFloat ( itemName ) , 0.001 )
assertEquals ( 0.0 , message . getDouble ( itemName ) , 0.0 )
assertEquals ( Double . NaN , message . getDouble ( itemName ) )
assertEquals ( value , message . getBoolean ( itemName ) )
assertEquals ( value , message . getByte ( itemName ) )
assertEquals ( value , message . getChar ( itemName ) )
assertEquals ( value , message . getShort ( itemName ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( null , message . getString ( index ) )
assertEquals ( value , getString ( index ) )
assertEqualsByteArrays ( value , message . getBytes ( itemName ) )
assertEquals ( MessageFormatException . class , assertThrows ( MessageFormatException . class , ( ) -> message . getBytes ( itemName ) ) . getClass ( ) )
assertEquals ( value , message . getObject ( itemName ) )
AssertPlaceHolder = "assertEquals(SecurityManagerType.JAAS, getType(" jaas "));"
assertEqualsByteArrays ( value , v )
assertEqualsByteArrays ( 256 , value , v )
assertEquals ( value , message . readDouble ( ) , 0.001 )
assertEquals ( value , message . readBoolean ( ) )
assertEquals ( value , message . readChar ( ) )
assertEquals ( value , message . readByte ( ) )
assertEquals ( value , message . readString ( ) )
assertEquals ( value , message . readShort ( ) )
assertEquals ( value , message . readInt ( ) )
assertEquals ( value , message . readLong ( ) )
assertEquals ( value , message . readFloat ( ) )
assertEquals ( value , message . readDouble ( ) )
assertEquals ( value , message . readString ( ) )
assertEquals ( null , message . readString ( ) )
AssertPlaceHolder = "fail("  Invalid type  should throw MessageFormatException ")"
assertEquals ( value , message . readBoolean ( ) )
assertEquals ( value , message . readChar ( ) )
assertEquals ( value , message . readByte ( ) )
assertEqualsByteArrays ( value , v )
assertEquals ( value , message . readShort ( ) )
assertEquals ( value , message . readInt ( ) )
assertEquals ( value , message . readLong ( ) )
assertEquals ( value , message . readFloat ( ) )
assertEquals ( value , message . readDouble ( ) )
assertEquals ( value , message . readString ( ) )
assertEquals ( dest , temp )
assertEquals ( address , object . getAddress ( false ) )
assertEquals ( address , object . getAddress ( false ) )
assertEquals ( factory , factory2 )
assertEquals ( value , connectionFactoryProperties . getParsedConnectorClassNames ( ) )
assertEquals ( "Expected exception to be thrown" , CLIException . class , e . getClass ( ) )
iter . hasNext ( )
assertEquals ( num , list . size ( ) )
iter . hasNext ( )
assertEquals ( javaId , gen . toJavaUUID ( nativeId ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "No known allergies" , allergies . getAllergyStatus ( ) )
assertEquals ( "my ns.my path" , formNamespaceAndPathProperty . get ( impl ) )
assertEquals ( null , impl . getFormFieldNamespace ( ) )
assertEquals ( ns , impl . getFormFieldNamespace ( ) )
assertEquals ( ns , impl . getFormFieldNamespace ( ) )
assertNull ( impl . getFormFieldPath ( ) )
assertEquals ( "my ns.my path" , impl . getFormFieldPath ( ) )
assertEquals ( path , impl . getFormFieldPath ( ) )
AssertPlaceHolder = "assertFalse(session.load(oneThing, id) == session.load(something, id));"
assertEquals ( session . load ( object , id ) , session . load ( object , id ) )
assertEquals ( false , newMember . isActive ( ) )
assertEquals ( false , newMember . isActive ( ) )
assertEquals ( ids , cohort . getMembers ( ) )
assertThat ( cohort . getMembers ( ) ) . contains ( patients . toArray ( new Patient [ 0 ] ) )
assertThat ( cohort . getMembers ( ) ) . contains ( 1 , 2 , 3 )
assertEquals ( cohortSize , c . getMemberships ( ) . size ( ) )
assertEquals ( "frenchName" , concept . getName ( ) )
assertEquals ( "frenchName" , concept . getName ( ) )
assertEquals ( 1 , term . getConceptReferenceTermMaps ( ) . size ( ) )
assertThat ( compatibleNames , contains ( name_en_UK ) )
assertEquals ( "en desc" , mockConcept . getDescription ( ) )
assertEquals ( "en_US desc" , mockConcept . getDescription ( ) )
assertEquals ( null , concept . getName ( localeToSearch , true ) )
assertNotNull ( concept . getName ( localeToSearch , false ) )
assertEquals ( null , conceptName )
assertThat ( conceptSet . getMembers ( ) ) . contains ( setMember )
assertEquals ( concept , conceptSet . getParent ( ) )
assertEquals ( setMember2 , concept . getSetMembers ( ) . get ( 1 ) )
assertEquals ( setMember2 , concept . getSetMembers ( ) . get ( 1 ) )
assertThat ( conceptSet . getConcepts ( ) ) . contains ( setMember )
assertEquals ( 3 , firstConceptSet . getConcepts ( ) . get ( 0 ) . getSortWeight ( ) )
assertEquals ( setMember , secondConceptSet . get ( secondConceptSet . size ( ) - 1 ) )
assertEquals ( newThirdSetMember , thirdConceptSet . getMember ( 2 ) )
assertEquals ( "shortName1" , concept . getShortestName ( false ) )
assertEquals ( "shortName1" , concept . getShortestName ( true , Locale . US ) )
assertEquals ( ConceptNameType . FULLY_SPECIFIED , concept . getConceptNameType ( ) )
assertEquals ( ConceptNameType . SHORT , concept . getConceptNameType ( ) )
assertEquals ( "" , concept . getShortName ( ) . getName ( ) )
assertEquals ( "some name" , concept . getName ( ) . getName ( ) )
assertEquals ( "Preferred" , conceptNameExpectedPreferred . getName ( ) )
assertEquals ( "Cat" , concept . getShortNameInLocale ( new Locale ( "en" ) ) )
assertEquals ( "Test Concept" , concept . getName ( localeToSearch , false ) . getName ( ) )
assertNull ( drugOrder . getAutoExpireDate ( ) )
assertNull ( drugOrder . getAutoExpireDate ( ) )
assertEquals ( drug1 , map . getDrug ( ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertEquals ( "2014-07-08 10:00:00" , addToDate ( startDate , duration , onceAWeek ) )
assertEquals ( "Frequency cannot be null" , exception . getMessage ( ) )
assertEquals ( "Unit is unknown" , exception . getMessage ( ) )
assertEquals ( null , createUnits ( Duration . SNOMED_CT_DAYS_CODE , null , null ) )
assertEquals ( daysCode , concept . getCode ( ) )
assertEquals ( false , enc . getObs ( ) . isVoided ( ) )
assertEquals ( 1 , parentObs . getGroupMembers ( ) . size ( ) )
assert encounter . getEncounterId ( ) == 123
assertEquals ( encounter , obs . getEncounter ( ) )
assertEquals ( 1 , encounter . getOrders ( ) . size ( ) )
assertNotNull ( encounter . getEncounter ( ) )
assertNotNull ( encounter . contains ( encounterRole , provider ) )
assert encounter . hasDiagnosis ( diagnosis )
assertEquals ( false , hasDiagnosis ( diagnosis ) )
assertEquals ( 123 , encounterType . getEncounterTypeId ( ) )
assertEquals ( 123 , form . getFormId ( ) )
assertNotNull ( obs )
assertEquals ( false , obs . getValueAsBoolean ( ) )
assertEquals ( null , obs . getValueAsBoolean ( ) )
assertEquals ( Boolean . TRUE , obs . getValueAsBoolean ( ) )
obs . getStatus ( ) . equals ( status )
assert passes
assertEquals ( true , method . isAnnotationPresent ( Test . class ) )
assertTrue ( currentClass . getName ( ) . endsWith ( "Test" ) )
assertNotEquals ( dcOrder , previousOrder )
assertNotNull ( orderGroup . getPreviousOrderGroup ( ) )
orderGroup . assertNull ( getPreviousOrderGroup ( ) )
assertEquals ( false , logicCriteria . isDiscontinued ( ) )
o . isDiscontinued ( ) should return false  before the  activation date .
assertEquals ( false , o . isDiscontinued ( ) )
assertEquals ( false , o . isDiscontinued ( ) )
assertEquals ( false , o . isDiscontinued ( ) )
assertEquals ( false , o . isDiscontinued ( ) )
assertEquals ( true , o . isDiscontinued ( ) )
assertThat ( order . getEffectiveStartDate ( ) , is ( date ) )
assertEquals ( date , order . getEffectiveStartDate ( ) )
assertNotNull ( getEffectiveStopDate ( ) )
assertThat ( order . getEffectiveStopDate ( ) , is ( date ) )
assertEquals ( "Expected message" , "Actual message" , getMessage ( "Expected message" ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( true , order . isActive ( ) )
assertEquals ( clazz , orderType . getJavaClass ( ) )
assertThat ( ot . contains ( cc ) ) . isTrue ( )
assertEquals ( false , active )
assertThat ( active , is ( false ) )
assertThat ( active ) . isTrue ( )
assert ( active )
assert ( active )
assertThat ( active ) . isTrue ( )
assertThat ( active ) . isEqualTo ( expectedActive )
assertThat ( active , is ( false ) )
assertThat ( active , is ( false ) )
assertNotNull ( patientState . getEndDate ( ) )
assertNull ( patientState . getEndDate ( ) )
assertEquals ( expectedResult , result )
assertEquals ( 2 , p . getIdentifiers ( ) . size ( ) )
assertEquals ( "6" , attr . toString ( ) )
assertEquals ( "5089" , concept . getConceptId ( ) )
pa . getVoided ( )
assertEquals ( "family name" , getFamilyName ( ) )
assertEquals ( null , pn . getFamilyName2 ( ) )
assertNull ( pn . getFamilyNamePrefix ( ) )
pn . setFamilyNameSuffix ( null )
assertEquals ( "given name" , getGivenName ( ) )
assertEquals ( "middle name" , getMiddleName ( ) )
assertEquals ( null , pn . getPrefix ( ) )
assertEquals ( "Bob Jones" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( "Taylor Bob Wilson Mark Jones jr." , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( "Taylor Bob Wilson Mark Jones jr. 3" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( "Taylor Bob Wilson Mark Jones jr. 3" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 10 , person . getAge ( ) )
assertEquals ( 10 , person . getAge ( givenDate . getTime ( ) ) )
assertEquals ( 5 , person . getAge ( ) )
assertEquals ( 5 , person . getAge ( givenDate . getTime ( ) ) )
assertEquals ( true , actualPersonAddress . getVoided ( ) )
assertNull ( getPersonAddress ( ) )
assertNull ( getPersonName ( ) )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ) . parse ( "2012-01-01" ) , person . getBirthdate ( ) )
assertNull ( person . getBirthDateTime ( ) )
assertEquals ( null , person . getBirthDateTime ( ) )
assertEquals ( "value1" , person . getAttribute ( "name1" ) )
assertNull ( getAttribute ( pat ) )
assertEquals ( null , person . getAttribute ( type ) )
assertEquals ( person . getAttributeType ( ) , attributeType )
assertNull ( getAttribute ( pat ) )
assertEquals ( true , p . getDead ( ) )
assertEquals ( "givenName middleName familyName" , provider . getPersonName ( ) . getFullName ( ) )
assertEquals ( "givenName middleName familyName" , provider . getPerson ( ) . toString ( ) )
assertEquals ( createDateTime ( "2014-07-01 10:00:00" ) , autoExpireDate )
assertThat ( autoExpireDate , equalTo ( createDateTime ( "2014-07-15 00:00:00" ) ) )
assertEquals ( createDateTime ( "2014-07-31 00:00:00" ) , drugOrder . getAutoExpireDate ( ) )
assertEquals ( null , autoExpireDate )
assertNull ( autoExpireDate )
assertEquals ( createDateTime ( "2014-07-01 10:00:00" ) , autoExpireDate )
assertThat ( fetchedLocations , contains ( location ) )
assertEquals ( null , afterNull )
assertEquals ( "caret^caret" , afterInvalid . getImplementationId ( ) )
assertEquals ( invalidId2 , afterInvalid2 )
assertEquals ( validId , adminService . getImplementationId ( ) )
assertEquals ( "JUNIT-TEST" , gp . getPropertyValue ( ) )
assertEquals ( "expectedValue" , propertyValue )
prop should  not be  null .
assertNull ( getGlobalPropertyByUuid ( uuid ) )
assertEquals ( "new prop value" , adminService . getGlobalPropertyObject ( "new prop" ) . getPropertyValue ( ) )
assertNull ( getGlobalPropertyObject ( propertyName ) )
assertEquals ( null , ? ? ? getImplementationId_shouldReturnNullIfNoImplementationIdIsDefinedYet ( ) )
assertEquals ( "100" , adminService . getGlobalProperty ( "detectHiddenSkill" ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( s )
assertEquals ( 1234 , value )
assertEquals ( Date . class . getName ( ) , gp . getDatatypeClassname ( ) )
assertEquals ( "" , afterBlank )
assertEquals ( uuid , cohort . getCohortId ( ) )
assertEquals ( null , getCohortService ( ) . getCohortByUuid ( "uuid" ) )
assertEquals ( uuid , byUuid . getUuid ( ) )
assertEquals ( null , getCohortService ( ) . getCohortMembershipByUuid ( "uuid" ) )
assertEquals ( modifiedCohortDescription , service . getCohort ( ) . getDescription ( ) )
assertEquals ( "Example Cohort" , cohortToGet . getName ( ) )
assertEquals ( null , allCohorts )
assertThat ( service . getCohort ( 2 ) . contains ( patientToAdd ) ) . isTrue ( )
assertNotNull ( service . contains ( patientToAdd ) )
assertNull ( service . contains ( notInCohort ) )
assertNull ( service . getCohort ( 2 ) )
assertNull ( newMember . getStartDate ( ) )
assertNotNull ( conceptByName )
assertEquals ( 8473 , concept . getConceptId ( ) )
assertEquals ( concept . getConceptId ( ) , "<expected value>" )
assertEquals ( expectedCreator , newConceptSource . getCreator ( ) )
assertEquals ( expectedDate , truncateToSeconds ( newConceptSource . getDateCreated ( ) ) )
assertEquals ( null , getConceptService ( ) . getConcept ( null ) )
assertNull ( getConceptService ( ) . getConceptByName ( null ) )
assertEquals ( "WGT234" , concept . getCode ( ) )
assertEquals ( "WGT234" , concept . getCode ( ) )
assertNull ( concept )
assertNull ( concept )
assertEquals ( true , concept . isRetired ( ) )
assertEquals ( true , concept . isRetired ( ) )
assertEquals ( null , concept )
assertEquals ( concepts . get ( 0 ) . getId ( ) , allergyId )
assertEquals ( "Expected concept ID to be equal to 234" , 234 , concept . getId ( ) )
assertEquals ( uuid , conceptAnswer . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptAnswerByUuid ( "uuid" ) )
assertEquals ( uuid , concept . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptByUuid ( "uuid" ) )
assertEquals ( uuid , conceptClass . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptClassByUuid ( "uuid" ) )
assertEquals ( uuid , conceptDatatype . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptDatatypeByUuid ( "uuid" ) )
assertEquals ( uuid , conceptDescription . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptDescriptionByUuid ( "uuid" ) )
assertEquals ( uuid , conceptName . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptNameByUuid ( "uuid" ) )
conceptNameTagId = conceptNameTag . getConceptNameTagId ( )
assertNull ( getConceptService ( ) . getConceptNameTagByUuid ( "uuid" ) )
assertEquals ( uuid , conceptNumeric . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptNumericByUuid ( "uuid" ) )
assertEquals ( uuid , conceptProposal . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptProposalByUuid ( "uuid" ) )
assertEquals ( uuid , conceptSet . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptSetByUuid ( "uuid" ) )
assertEquals ( uuid , conceptSource . getUuid ( ) )
assertNull ( getConceptService ( ) . getConceptSourceByUuid ( "uuid" ) )
assertEquals ( uuid , drug . getUuid ( ) )
assertNull ( getConceptService ( ) . getDrugByUuid ( "uuid" ) )
assertEquals ( uuid , ingredient . getUuid ( ) )
assertNull ( getConceptService ( ) . getDrugIngredientByUuid ( "uuid" ) )
assertEquals ( false , drugs . get ( 0 ) . getRetired ( ) )
assertNotNull ( drug )
assertEquals ( 0 , drugs . size ( ) )
assertEquals ( 1 , getConceptService ( ) . getConceptByName ( "Test Concept" ) . size ( ) )
assertEquals ( 1 , getConceptService ( ) . getConceptByName ( "Test Concept" ) . size ( ) )
assertEquals ( "SNOMED CT" , conceptSource . getName ( ) )
assertNull ( conceptSource )
assertEquals ( null , ? ? ? )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( aNullString , conceptService . getConceptSourceByName ( sourceName ) . getHl7Code ( ) )
assertNull ( source . getRetired ( ) )
assertNotNull ( secondNameTag . getId ( ) )
assertNotEquals ( concept . getDatatype ( ) , newDatatype )
assertEquals ( 7 , obs . getValueCoded ( ) . getId ( ) )
assertEquals ( false , getFalseConcept ( ) )
assertEquals ( true , getTrueConcept ( ) )
assertEquals ( "Expected concept datatype to not be a fuzzy match on name" , null , result )
assertEquals ( "Text" , result . getName ( ) )
assertNotNull ( savedConceptStopWord . getId ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( s )
assertEquals ( "LOWERTOUPPER" , savedConceptStopWord . getValue ( ) )
assertThat ( cn . getLocale ( ) , anyOf ( isIn ( allowedLocales ) , is ( Locale . getDefault ( ) ) ) )
assertEquals ( 1 , preferredNamesFound )
assertNull ( proposal . getMappedConcept ( ) )
assertEquals ( 2 , searchResults . size ( ) )
assertEquals ( 0 , getConceptService ( ) . getConceptMapTypes ( false ) . size ( ) )
assertEquals ( currentWeight , nextWeight )
assertEquals ( 3 , getConceptService ( ) . getConceptMapTypes ( true , true ) . size ( ) )
assertEquals ( 2 , getConceptService ( ) . getConceptMapTypes ( false ) . size ( ) )
assertEquals ( 3 , getConceptService ( ) . getActiveConceptMapTypes ( ) . size ( ) )
assertEquals ( "expectedConceptMapType" , getConceptService ( ) . getConceptMapTypeByName ( "specifiedName" ) )
assertEquals ( 3 , getConceptService ( ) . getConceptReferenceTerms ( true ) . size ( ) )
assertEquals ( 2 , getConceptService ( ) . getConceptReferenceTerms ( false ) . size ( ) )
assertEquals ( null , term . getRetireReason ( ) )
assertEquals ( expectedList , getConceptService ( ) . getAllConceptReferenceTerms ( ) )
assertEquals ( expectedCount , actualCount )
assertEquals ( 0 , getCountOfConceptReferenceTerms ( query , conceptSource , false ) )
assertEquals ( "new name" , concept . getName ( ) . getName ( ) )
assertEquals ( "SALBUTAMOL INHALER" , searchResults . get ( 0 ) . getConceptName ( ) . getName ( ) )
assertEquals ( false , result . isVoided ( ) )
assertThrows ( DuplicateConceptNameException . class , ( ) -> cs . mapConceptProposalToConcept ( cp , mappedConcept , locale ) )
assertEquals ( "dcba" , savedNameTag . getTag ( ) )
assertThat ( drugs , contains ( value ) )
assertNotNull ( exception . getMessage ( ) )
assertNull ( drug )
assertEquals ( expectedDrugId , drug . getDrugId ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 3 , getConceptService ( ) . getAllConceptAttributeTypes ( ) . size ( ) )
assertEquals ( "expectedConceptAttributeType" , getConceptService ( ) . getConceptAttributeTypeWithTheGivenId ( "id" ) . getName ( ) )
assertEquals ( null , getConceptService ( ) . getConceptAttributeType ( 1 ) )
assertEquals ( null , getConceptService ( ) . getConceptAttributeTypeByUuid ( "nonExistentUuid" ) )
assertNull ( service . getConceptAttributeByUuid ( uuid ) )
assertEquals ( conceptName , concept . getConceptName ( ) )
assertEquals ( conceptRef , getConceptByReference ( conceptRef ) . getConceptId ( ) )
assertEquals ( "SSTRM:454545" , concept . getReference ( ) )
assertEquals ( conceptRef , getConceptByReference ( conceptRef ) . getUuid ( ) )
assertEquals ( nonStandardUuid , getConceptByReference ( conceptRef ) . getUuid ( ) )
assertEquals ( location , enc . getLocation ( ) )
assertEquals ( 1 , enc . getLocation ( ) . getId ( ) )
assertEquals ( false , voided )
assertEquals ( null , e )
assertFalse ( encounterSearchCriteria . isIncludeVoided ( ) )
assertEquals ( encounterSearchCriteria . isIncludeVoided ( ) , true )
assertNull ( type )
assertEquals ( uuid , encounter . getUuid ( ) )
assertNull ( getEncounterService ( ) . getEncounterByUuid ( "uuid" ) )
encounterType . assertNotNull ( )
assertNull ( getEncounterService ( ) . getEncounterTypeByUuid ( "uuid" ) )
assertEquals ( 3 , getEncounterService ( ) . getCountOfEncounters ( ) )
assertEquals ( null , fetchedEncounterRole )
assertTrue ( found )
assertTrue ( found )
assertTrue ( found )
assertEquals ( correctBeanName , visitHandlerProperty . getPropertyValue ( ) )
assertEquals ( expectedProviderName , actualProviderName )
assertEquals ( true , ? ? ? getEncounterService ( ) . getEncounters ( true ) . contains ( voidedEncounter ) )
assertEquals ( expectedEncounterTypeName , actualEncounterTypeName )
assertEquals ( expectedFormName , actualFormName )
assertThrows ( EncounterTypeLockedException . class , ( ) -> encounterService . saveEncounterType ( encounterType ) )
assertThrows ( EncounterTypeLockedException . class , ( ) -> encounterService . retireEncounterType ( encounterType , "reason" ) )
assertThrows ( EncounterTypeLockedException . class , ( ) -> encounterService . purgeEncounterType ( encounterType ) )
assertEquals ( true , sourceEncounterAfterTransfer . getVoided ( ) )
assertEquals ( true , visit . getVoided ( ) )
assertNotNull ( ff )
assertEquals ( 1 , fieldType . getFieldTypeId ( ) )
assertNull ( < AssertPlaceHolder > )
assertEquals ( null , getFormService ( ) . getFormField ( "nonexistentForm" ) )
assertNull ( getFormService ( ) . getFieldAnswerByUuid ( "uuid" ) )
assertEquals ( uuid , field . getUuid ( ) )
assertNull ( getFormService ( ) . getFieldByUuid ( "uuid" ) )
assertEquals ( "Expected field type ID to be null" , null , fieldType . getFieldTypeId ( ) )
assertNull ( "<AssertPlaceHolder>" , getFormService ( ) . getFieldTypeByUuid ( "uuid" ) )
formId = form . getFormId ( )
assertEquals ( null , getFormService ( ) . getFormByUuid ( "uuid" ) )
formFieldId = formField . getFormFieldId ( )
assertEquals ( null , getFormService ( ) . getFormFieldByUuid ( "uuid" ) )
assertEquals ( "This is a new field" , field . getName ( ) )
assertEquals ( 2 , getFormService ( ) . getFormsContainingConcept ( concept ) . size ( ) )
assertEquals ( null , fs . getForm ( 1 ) )
assertEquals ( form , duplicateForm )
assertEquals ( "Test Parent Location" , getLocationService ( ) . getDefaultLocation ( ) . getName ( ) )
? ? ? // Assertion placeholder
assertNull ( "<AssertPlaceHolder>" , locationService . getLocation ( "nonExistentLocation" ) )
assertEquals ( Collections . emptyList ( ) , getLocationService ( ) . getLocations ( "nameFragment" ) )
assertEquals ( 0 , getLocationService ( ) . getLocations ( attrValues ) . size ( ) )
assertEquals ( Collections . emptyList ( ) , ls . getLocationsByTag ( tag ) )
assertEquals ( null , l )
assertEquals ( null , getLocationService ( ) . getLocationTag ( "givenId" ) )
assertNull ( locationService . getLocationTagByName ( "name" ) )
assertEquals ( Collections . emptyList ( ) , result )
assertEquals ( null , t )
assertEquals ( location , savedLocation )
assertEquals ( locationTag , savedLocationTag )
assertEquals ( uuid , location . getUuid ( ) )
assertNull ( result ) ; // suggested assertion
assertNull ( locationTag )
assertEquals ( "Unknown Location" , getLocationService ( ) . getDefaultLocation ( ) . getName ( ) )
assertEquals ( 4 , getLocationService ( ) . getAllLocationAttributeTypes ( ) . size ( ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( null , getLocationService ( ) . getLocationAttributeType ( "nonexistentId" ) )
assertEquals ( null , getLocationService ( ) . getLocationAttributeTypeByUuid ( "nonExistentUuid" ) )
assertNull ( service . getLocationAttributeByUuid ( uuid ) )
assertEquals ( null , getLocationService ( ) . getLocationAttributeTypeByName ( "nonExistentAttributeName" ) )
assertEquals ( true , location . getRetired ( ) )
assertEquals ( 7 , dispense . getPatient ( ) )
assertNull ( existing . getVoided ( ) )
assertNull ( existing . getVoided ( ) )
assertEquals ( "Expected APIException message" , "Null Obs" , exception . getMessage ( ) )
assertEquals ( dummyHandler , new ImageHandler ( ) )
assertEquals ( "org.openmrs.obs.handler.ImageHandler" , dummyHandler . getClass ( ) . getName ( ) )
assertEquals ( true , obs . getVoided ( ) )
assertEquals ( 7 , obs . getId ( ) )
assertEquals ( 1 , oSaved . getObsId ( ) )
assertEquals ( obsSaved . getComment ( ) , "A new comment" )
assertEquals ( false , obs . getVoided ( ) )
assertEquals ( true , obs . getVoided ( ) )
assertEquals ( parentObs , groupMember . getObsGroup ( ) )
assertEquals ( 0 , getObsService ( ) . getObservationCount ( names ) )
assertEquals ( "Testing TRUNK-3701" , obs . getVoidReason ( ) )
assertEquals ( obsSaved . getPerson ( ) , getPerson ( ) )
assertNotNull ( exception . getMessage ( ) )
order . getOrderId ( )
assertEquals ( null , getOrderByUuid ( uuid ) )
assertEquals ( null , ? ? ? getOrderByOrderNumber ( "orderNumber" ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( orderFrequencyId , getOrderFrequency ( orderFrequencyId ) . getId ( ) )
assertEquals ( 4 , concept . getConceptId ( ) )
assertEquals ( "Patient cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , s , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Testing" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "6f0c9a92-6f24-11e3-af88-005056821db0" , cs . getUuid ( ) )
assertEquals ( "Search phrase cannot be null" , exception . getMessage ( ) )
assertEquals ( 4d , orderFrequency . getFrequencyPerDay ( ) )
assertEquals ( "Expected order number is not equal to actual order number" , expectedOrderNumber , order . getOrderNumber ( ) )
assertThat ( order . getAutoExpireDate ( ) , is ( dateformat . parse ( "18/08/2014" ) ) )
assertEquals ( expectedOrderType , getOrderType ( ) )
assertEquals ( null , orderType )
assertEquals ( "131168f4-15f5-102d-96e4-000c29c2a5d7" , orderType . getUuid ( ) )
assertNull ( getOrderTypeByUuid ( uuid ) )
assertEquals ( "Drug order" , orderType . getName ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 1 , order . getOrderTypeId ( ) )
assertEquals ( "Order type is required" , exception . getMessage ( ) )
assertEquals ( revisionOrder , getRevisionOrder ( order ) )
assertEquals ( null , ? ? ? getRevisionOrder ( order ) )
assertEquals ( Collections . emptyList ( ) , ? ? ? getDurationUnits_shouldReturnAnEmptyListIfNothingIsConfigured ( ) )
assertNull ( getNonCodedDrugConcept ( ) )
assertEquals ( "Expected exception message does not match" , s , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( null , getOrderGroupAttributeType ( orderGroupAttributeTypeId ) )
orderGroupAttributeType . assertEquals ( expectedOrderGroupAttributeType )
assertEquals ( "9cf1bce0-d18e-11ea-87d0-0242ac130003" , orderGroupAttributeType . getUuid ( ) )
assertEquals ( "Bacteriology" , orderGroupAttributeType . getName ( ) )
assertNull ( getOrderGroupAttributeTypeByUuid ( "nonExistingUuid" ) )
assertEquals ( "namespace" , order . getFormNamespaceAndPath ( ) . split ( ":" ) [ 0 ] )
assertEquals ( null , getOrderAttributeTypeById ( 1 ) )
assertEquals ( orderAttributeTypeId , getOrderAttributeTypeById ( orderAttributeTypeId ) . getId ( ) )
assertNull ( getOrderAttributeByUuid ( "nonExistingUuid" ) )
assertEquals ( 0 , numberOfOrderSetMembers )
assertEquals ( orderSetUuid , orderSetMember . getUuid ( ) )
assertEquals ( "Expected order set attribute with given UUID" , expectedOrderSetAttribute , actualOrderSetAttribute )
assertNull ( service . getOrderSetAttributeByUuid ( uuid ) )
assertEquals ( null , getOrderSetService ( ) . getOrderSetAttributeTypeByUuid ( "nonexistent_uuid" ) )
assertEquals ( initialOrderSetAttributeTypesCount - 1 , Context . getOrderSetService ( ) . getAllOrderSetAttributeTypes ( ) . size ( ) )
assertNotNull ( allergy )
assertEquals ( allergy . getAllergen ( ) , getAllergen ( ) )
assertNull ( getIdentifierValidator ( clazz ) )
assertEquals ( null , patientService . getPatientIdentifierType ( patientIdentifierType . getId ( ) ) )
assertEquals ( patientIdentifierType . getName ( ) , newPatientIdentifierType . getName ( ) )
assertEquals ( "SOME NEW NAME" , newerPatientIdentifierType . getName ( ) )
? ? ? assertNull ( getPatientService ( ) . getPatient ( patientId ) )
assertEquals ( "Preferred" , user . getPerson ( ) . getPreferred ( ) )
assertEquals ( 6 , notPreferred . getPersonId ( ) )
assertEquals ( null , patient )
assertNull ( patient . getId ( ) )
assertNull ( patient )
assertNull ( identifierType )
assertEquals ( "OpenMRS" , identifierType . getName ( ) )
assertNull ( identifierType )
assertNull ( identifierType )
assertNull ( voidedPatient )
assertEquals ( uuid , patient . getUuid ( ) )
assertNull ( patientService . getPatientByUuid ( "someUuid" ) )
assertEquals ( uuid , patientIdentifier . getUuid ( ) )
assertNull ( getPatientService ( ) . getPatientIdentifierByUuid ( "uuid" ) )
assertEquals ( uuid , patientIdentifierType . getUuid ( ) )
assertEquals ( null , getPatientService ( ) . getPatientIdentifierTypeByUuid ( "uuid" ) )
assertEquals ( true , found )
assertEquals ( true , found )
assertEquals ( uuid , patient . getUuid ( ) )
To suggest  an assertion , we  need more  information about  the focal  method and  the expected  behavior .
assertEquals ( uuid , patientIdentifier . getUuid ( ) )
assertNull ( getPatientService ( ) . getPatientIdentifierByUuid ( "uuid" ) )
assertEquals ( 1 , patient . getIdentifiers ( ) . size ( ) )
assertNull ( getPersonService ( ) )
assertEquals ( expectedPerson , person )
personAttribute . assertNull ( )
assertEquals ( null , attributeType )
assertEquals ( "Birthplace" , attributeType . getName ( ) )
assertEquals ( null , attributeType )
assertEquals ( 1 , relationship . getId ( ) )
assertNull ( relationship )
relationshipType . assertNull ( )
assertNull ( relationshipType )
assertEquals ( persisted . getPersonMergeLogId ( ) , personMergeLog . getPersonMergeLogId ( ) )
assertEquals ( null , persisted . getSerializedMergedData ( ) )
assertEquals ( null , persisted . getDateCreated ( ) )
assertEquals ( getAuthenticatedUser ( ) , persisted . getCreator ( ) )
assertEquals ( personMergeLog26 , l )
assertEquals ( null , deletedRelationship )
assertNull ( getPersonService ( ) . unvoidPerson ( null ) )
assertNull ( getPersonService ( ) )
personAddressId = personAddress . getPersonAddressId ( )
assertNull ( getPersonService ( ) . getPersonAddressByUuid ( "uuid" ) )
personAttributeId = person . getPersonAttributeId ( )
assertNull ( result )
personAttributeType . assertNotNull ( )
assertEquals ( null , getPersonService ( ) . getPersonAttributeTypeByUuid ( "uuid" ) )
personId = person . getPersonId ( )
assertNull ( < AssertPlaceHolder > )
personNameId = personName . getPersonNameId ( )
? ? ? assertNull ( getPersonService ( ) . getPersonNameByUuid ( "uuid" ) )
personName . getName ( ) . equals ( "ExpectedName" )
assertEquals ( null , personName )
assertEquals ( uuid , relationship . getUuid ( ) )
assertNull ( getPersonService ( ) . getRelationshipByUuid ( "uuid" ) )
assertEquals ( uuid , relationshipType . getUuid ( ) )
assertNull ( getPersonService ( ) . getRelationshipTypeByUuid ( "uuid" ) )
assertEquals ( "" , pname . getGivenName ( ) )
assertNotNull ( pname )
assertThat ( personName . getVoided ( ) ) . isFalse ( )
assertEquals ( false , person . isVoided ( ) )
assertEquals ( false , person . getVoided ( ) )
assertEquals ( true , person . getVoided ( ) )
assertNotNull ( personService . getPersonAddressByUuid ( pAddress . getUuid ( ) ) )
assertEquals ( uuid , conceptStateConversion . getUuid ( ) )
assertNull ( "<AssertPlaceHolder>" , ? ? ? getProgramWorkflowService ( ) )
assertEquals ( uuid , patientProgram . getUuid ( ) )
assertNull ( getProgramWorkflowService ( ) . getPatientProgramByUuid ( "uuid" ) )
assertEquals ( uuid , patientState . getUuid ( ) )
assertNull ( < AssertPlaceHolder > )
assertEquals ( uuid , program . getUuid ( ) )
assertNull ( getProgramWorkflowService ( ) . getProgramByUuid ( "uuid" ) )
assertEquals ( null , ? ? ? getState_shouldReturnNullIfGivenWorkflowStateIdDoesNotExists ( ) )
assertEquals ( uuid , state . getUuid ( ) )
assertEquals ( null , getProgramWorkflowService ( ) . getStateByUuid ( "uuid" ) )
assertNull ( getWorkflow ( programWorkflowId ) )
assertEquals ( uuid , programWorkflow . getUuid ( ) )
assertNull ( getProgramWorkflowService ( ) . getWorkflowByUuid ( "uuid" ) )
assertEquals ( "new description" , program . getDescription ( ) )
pws . getProgramByName ( "program name" )
assertNull ( p )
assertEquals ( 1 , programAttributeType . getUuid ( ) )
assertEquals ( "d7477c21-bfc3-4922-9591-e89d8b9c8efb" , p . getUuid ( ) )
assertEquals ( programToBeAsserted . isRetired ( ) , false )
assertEquals ( null , state . getPatientProgram ( ) )
assertEquals ( state . getFormField ( NAMESPACE ) , FORMFIELD_PATH )
assertNotNull ( state . getEncounter ( ) )
assertEquals ( conceptStateConversion2 , newConceptStateConversion )
assertEquals ( conceptStateConversion1 , conceptStateConversion2 )
assertEquals ( conceptStateConversion , dao . getConceptStateConversion ( programWorkflow , concept ) )
assertEquals ( "expectedProgramName" , programName )
assertThat ( exception . getMessage ( ) , is ( equalTo ( s ) ) )
assertThat ( exception . getMessage ( ) , is ( equalTo ( s ) ) )
assertEquals ( "Invalid date format" , exception . getMessage ( ) )
assertNull ( pws . getProgramByName ( "A name" ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Program workflow concept is null" , exception . getMessage ( ) )
assertEquals ( "Program workflow state concept is null" , exception . getMessage ( ) )
assertEquals ( "Program workflow state initial is null" , exception . getMessage ( ) )
assertEquals ( "Program workflow state terminal is null" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 2 , provider . getId ( ) )
providerAttribute . getProvider ( ) . equals ( getProvider ( ) )
assertEquals ( "823382cd-5faa-4b57-8b34-fed33b9c8c65" , providerAttribute . getUuid ( ) )
assertEquals ( "9516cc50-6f9f-11e0-8414-001e378eb67e" , providerAttributeType . getUuid ( ) )
assertEquals ( null , service . getProvider ( 2 ) )
assertNotNull ( provider )
assertEquals ( expectedCount , getCountOfProviders ( query ) )
assertEquals ( expectedCount , actualCount )
assertEquals ( "Test Unknown Provider" , provider . getIdentifier ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Tester13" , u . getPassword ( ) )
assertEquals ( ADMIN_USERNAME , user . getUsername ( ) )
assertEquals ( "d979d066-15e6-467c-9d4b-cb575ef97f0f" , privilege )
assertNull ( getPrivilegeByUuid ( uuid ) )
assertEquals ( role , userService . getRoleByUuid ( uuid ) )
assertNull ( getRoleByUuid ( uuid ) )
assertEquals ( uuid , user . getUuid ( ) )
assertNull ( result )
assertNotNull ( user )
assertEquals ( "Some Privilege" , privilege )
assertEquals ( "Some Role" , role . getRoleName ( ) )
assertEquals ( 501 , user . getUserId ( ) )
assertEquals ( null , userService . getPrivilege ( ) )
assertEquals ( null , userService . getRole ( "Some Role To Delete" ) )
assertEquals ( null , userService . getUser ( 502 ) )
assertEquals ( null , userService . getUser ( 502 ) )
assertNull ( setUserProperty ( null , "key" , "value" ) )
assertEquals ( p , savedPrivilege )
assertEquals ( null , setUserProperty ( null , "key" , "value" ) )
assertEquals ( role , userService . getRole ( ) )
assertEquals ( "Role cannot inherit from itself" , exception . getMessage ( ) )
assertEquals ( "Error message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Old password is not correct" , exception . getMessage ( ) )
assertEquals ( "New password cannot be the same as old password" , exception . getMessage ( ) )
assertEquals ( "Password must be at least 8 characters long" , exception . getMessage ( ) )
assertEquals ( "User does not exist" , exception . getMessage ( ) )
assertEquals ( "Password should be at least 8 characters long" , exception . getMessage ( ) )
assertNotNull ( user )
assertEquals ( "hank.williams@gmail.com" , user . getUsernameOrEmail ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( createdUser , getUserByActivationKey ( key ) )
assertEquals ( null , getUserByActivationKey ( key ) )
assertEquals ( "Invalid activation key exception message is incorrect" , "Invalid activation key" , exception . getMessage ( ) )
assertEquals ( "Invalid activation key exception message" , "Invalid activation key" , exception . getMessage ( ) )
assertEquals ( null , getVisitType ( ) )
assertNull ( getVisitTypeByUuid ( "uuid" ) )
assertEquals ( expectedVisit , visit )
assertEquals ( visitAttributeType . getId ( ) , id )
assertEquals ( null , getVisitAttributeType ( id ) )
assertNull ( getVisitAttributeTypeByUuid ( uuid ) )
assertNull ( getVisitAttributeByUuid ( uuid ) )
assertNotNull ( visitService . getVisit ( 1 ) )
assertEquals ( "admin" , getAuthenticatedUser ( ) . getUsername ( ) )
assertEquals ( null , Context . getUserContext ( ) . getLocation ( ) )
assertEquals ( "2" , evictedUser . getUserProperties ( ) . get ( OpenmrsConstants . USER_PROPERTY_DEFAULT_LOCATION ) )
assertEquals ( EncounterVisitHandler . class , registeredComponent . getClass ( ) )
assertEquals ( ps1 , ps2 )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "User already exists" , exception . getMessage ( ) )
assertEquals ( "Daemon user should have an associated person" , Daemon . getAssociatedPerson ( ) , ? ? ? )
assertEquals ( true , getConceptService ( ) . isConceptMapTypeInUse ( ) )
assertEquals ( true , ? ? ? )
assertEquals ( true , getConceptService ( ) . isConceptReferenceTermInUse ( term ) )
assertEquals ( true , getConceptService ( ) . isConceptReferenceTermInUse ( term ) )
assertEquals ( false , getConceptService ( ) . isConceptMapTypeInUse ( ) )
assertThat ( getConceptService ( ) . isConceptReferenceTermInUse ( term ) ) . isFalse ( )
assertNull ( dao . getConcept ( 11 ) )
assertEquals ( "admin" , u . getUsername ( ) )
assertEquals ( "1-8" , u . getSystemId ( ) )
u . getSystemId ( ) . equals ( "18" )
assertEquals ( "value" , dao . getProperty ( ) )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 1 , patientCount )
assertEquals ( 2 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 1 , patientCount )
assertEquals ( 2 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assert . assertEquals ( 1 , patientCount )
assertThat ( patients , contains ( patient ) )
personName . getId ( ) == 2
assertEquals ( null , personName )
assertEquals ( true , searchable )
assertEquals ( outcomesConcept , savedProgram . getOutcomesConcept ( ) )
assertEquals ( userJoe , u2 )
assertNotNull ( getNextVisit ( null , visitTypes , cal . getTime ( ) ) )
assertEquals ( beforeDate , afterDate )
assertEquals ( dateChangedBefore , weight . getDateChanged ( ) )
assertSame ( u . getDateCreated ( ) , dateCreated . clone ( ) )
assertEquals ( dateWithoutMillisecond , person . getBirthdate ( ) )
assertEquals ( dateWithoutMillisecond . getTime ( ) , personService . getPerson ( 1 ) . getBirthdate ( ) . getTime ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( "4e663d66-6b78-11e0-93c3-18a905e044dc" , diagnosis . getUuid ( ) )
assertEquals ( "1" , diagnosis . getId ( ) )
assertEquals ( 7 , dispense . getPatient ( ) )
assertEquals ( "9cf1bce0-d18e-11ea-87d0-0242ac130003" , orderGroupAttributeType . getUuid ( ) )
orderGroupAttributeType . assertEquals ( expectedOrderGroupAttributeType )
assertEquals ( 2 , duplicatePatients . size ( ) )
assertThat ( duplicatePatients . size ( ) , equalTo ( 2 ) )
assertEquals ( 2 , duplicatePatients . size ( ) )
assertEquals ( false , p . getVoided ( ) )
assertEquals ( person . getBirthtime ( ) , new SimpleDateFormat ( "HH:mm:ss" ) . parse ( "15:23:56" ) )
assertEquals ( true , providers . get ( providers . size ( ) - 1 ) . getRetired ( ) )
assertEquals ( allProviders , ? ? ? getProvidersByPerson_shouldReturnAllProvidersIfIncludeRetiredTrue ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
AssertPlaceHolder = "Assert.assertTrue(isShortName(name));"
AssertPlaceHolder = "assertTrue(isShortName(\"test\") == Boolean.TRUE);"
assertEquals ( MatchMode . START , getMatchMode ( ) )
assertEquals ( true , providers . get ( providers . size ( ) - 1 ) . getRetired ( ) )
assertEquals ( allProviders , ? ? ? getProvidersByPerson_shouldReturnAllProvidersIfIncludeRetiredTrue ( ) )
assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( "THE REASON" , retireable . getRetireReason ( ) )
assertEquals ( null , retireable . getRetiredBy ( ) )
assertEquals ( null , retireable . getRetiredBy ( ) )
assertEquals ( d , retireable . getDateRetired ( ) )
assertNull ( retireable . getDateRetired ( ) )
assertEquals ( null , retireable . getRetireReason ( ) )
assertEquals ( "THE REASON" , retireable . getRetireReason ( ) )
assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( null , retireable . getRetiredBy ( ) )
assertEquals ( null , retireable . getDateRetired ( ) )
assertEquals ( null , retireable . getRetireReason ( ) )
assertEquals ( "SOME REASON" , handler . getRetireReason ( ) )
assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( null , voidable . getVoidedBy ( ) )
assertEquals ( null , voidable . getDateVoided ( ) )
assertEquals ( null , voidable . getVoidReason ( ) )
assertEquals ( "SOME REASON" , handler . getVoidReason ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( "THE REASON" , handler . getVoidReason ( ) )
assertEquals ( null , handler . getVoidedBy ( ) )
assertEquals ( null , voidable . getVoidedBy ( ) )
assertEquals ( d , voidable . getDateVoided ( ) )
assertEquals ( null , voidable . getDateVoided ( ) )
assertEquals ( null , voidable . getVoidReason ( ) )
assertEquals ( null , voidable . getVoidReason ( ) )
assertEquals ( null , newTag . getConceptNameTagId ( ) )
assertEquals ( 34 , newTag . getConceptNameTagId ( ) )
assertEquals ( "the location name" , loc . getName ( ) . trim ( ) )
assertEquals ( "the location desc" , loc . getDescription ( ) . trim ( ) )
assertEquals ( "" , obj . getName ( ) )
obj . getSomeProperty ( ) , is ( nullValue ( ) )
assertEquals ( "code" , term . getCode ( ) )
assertEquals ( "" , obj . getName ( ) . trim ( ) )
assertEquals ( false , person . getPersonVoided ( ) )
assertEquals ( null , person . getPersonVoidedBy ( ) )
assertEquals ( null , person . getPersonDateVoided ( ) )
assertEquals ( null , person . getPersonVoidReason ( ) )
assertEquals ( "SOME REASON" , handler . getPersonVoidReason ( ) )
assertEquals ( false , person . getPersonVoided ( ) )
assertEquals ( false , person . getPersonVoided ( ) )
assertEquals ( "THE REASON" , handler . getPersonVoidReason ( ) )
assertEquals ( null , handler . getPersonVoidedBy ( ) )
assertEquals ( null , person . getPersonVoidedBy ( ) )
assertEquals ( d , handler . getPersonDateVoided ( ) )
assertEquals ( null , person . getPersonDateVoided ( ) )
assertEquals ( null , handler . getPersonVoidReason ( ) )
assertEquals ( null , conceptService . getConcept ( conceptId ) )
assertNull ( conceptService . getDrug ( drugId ) )
assertNotNull ( drugs )
assertNotNull ( drug )
assertEquals ( null , getDrug ( ) )
assertEquals ( true , drug . getRetired ( ) )
assertEquals ( false , drug . getRetired ( ) )
assertEquals ( "name" , getConceptClass ( ) . getName ( ) )
assertEquals ( 1 , res . size ( ) )
assertEquals ( "Invalid concept" , exception . getMessage ( ) )
assertEquals ( null , conceptService . getConceptProposal ( conceptProposalId ) )
assertEquals ( prevConceptId , returnedConcept . getConceptId ( ) )
assertEquals ( nextConceptId , returnedConcept . getId ( ) )
assertEquals ( 5497 , maxConceptId )
locales . contains ( localeToSearch )
assertEquals ( null , conceptService . getConceptSource ( conceptSourceId ) )
assertEquals ( null , conceptService . getConceptReferenceTerm ( conceptReferenceTermId ) )
assertNull ( getConceptReferenceTermByName ( "name" , conceptSource ) )
assertEquals ( 1 , concepts . size ( ) )
assertEquals ( ANOTHER_ORIGINAL_TEXT , updatedConceptProposal . getOriginalText ( ) )
assertEquals ( null , ? ? ? getConceptNameTagByName ( tag ) )
assertEquals ( condition . getEncounter ( ) , savedCondition . getEncounter ( ) )
assertEquals ( ns + ":" + path , savedCondition . getFormField ( ) )
assertNotNull ( condition )
assertNull ( getConditionByUuid ( uuid ) )
assertNotNull ( diagnosis )
assertEquals ( id , diagnosisAttributeType . getId ( ) )
assertEquals ( null , getDiagnosisAttributeTypeById ( id ) )
assertEquals ( uuid , diagnosisAttributeType . getUuid ( ) )
assertNull ( getDiagnosisAttributeTypeByUuid ( uuid ) )
assertNull ( getDiagnosisAttributeByUuid ( uuid ) )
assertNotNull ( globalLocaleList . getAllowedLocales ( ) )
assertEquals ( expectedUuid , location . getUuid ( ) )
assertEquals ( date , new SimpleDateFormat ( "yyyy-MM-dd" ) . parse ( "2011-04-25" ) )
assertEquals ( "2011-04-25" , serialize ( ) )
assertEquals ( "generated uuid should not be null" , true , hl7 . getUuid ( ) != null )
assertEquals ( "MSH|^~\\&|FORMENTRY|AMRS.ELD|HL7LISTENER|AMRS.ELD|20080226102656||ORU^R01|JqnfhKKtouEz8kzTk6Zo|P|2.5|1||||||||16^AMRS.ELD.FORMID\r" + "PID|||3^^^^||John3^Doe^||\r" + "PV1||O|1^Unknown Location||||1^Super User (1-8)|||||||||||||||||||||||||||||||||||||20080212|||||||V\r" + "ORC|RE||||||||20080226102537|1^Super User\r" + "OBR|1|||1238^MEDICAL RECORD OBSERVATIONS^99DCT\r" + "OBX|1|NM|5497^CD4, BY FACS^99DCT||450|||||||||20080206\r" + "OBX|2|DT|5096^RETURN VISIT DATE^99DCT||20080229|||||||||20080212" , message . toString ( ) )
assertEquals ( "Expected timezone offset" , expectedTimeZoneOffset , getTimeZoneOffset ( fullString , givenDate ) )
assertEquals ( expectedConcept , getConcept ( hl7ConceptId , codingSystem , uid ) )
assertEquals ( expectedConcept , actualConcept )
assertThrows ( ApplicationException . class , ( ) -> router . processMessage ( hl7message ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( true , actual )
assertEquals ( "ben" , changeSet . getAuthor ( ) )
assertEquals ( false , actual )
assertEquals ( false , actual )
assertEquals ( false , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( firstResult , ? ? ? )
assertEquals ( firstResult , parentResult . earliest ( ) )
assertEquals ( firstResult , parentResult . earliest ( ) )
assertEquals ( null , parentResult . earliest ( ) )
assertEquals ( firstResult , parentResult . earliest ( ) )
assertNull ( first . getResultDate ( ) )
assertEquals ( null , parentResult . get ( index ) )
assertEquals ( secondResult , parentResult . latest ( ) )
assertEquals ( result , latest ( ) )
assertEquals ( null , last . getResultDate ( ) )
assertEquals ( null , last . getResultDate ( ) )
assertEquals ( valueAsString , valueAsPM . getMessage ( ) )
assertEquals ( null , module . getExtensionNames ( ) )
assertEquals ( 0 , module . getExtensions ( ) . size ( ) )
assertNull ( ModuleFactory . moduleClassLoaders )
assertNotNull ( moduleClassLoader )
assertThrows ( ClassNotFoundException . class , ( ) -> module . getExtensions ( ) )
assertNotNull ( module . getExtensionNames ( ) )
assertEquals ( ExtensionCausingIllegalAccessException . class . getName ( ) , module . getExtensionNames ( ) . get ( EXTENSION_POINT_ID_PATIENT_DASHBOARD ) )
assertEquals ( value , test2 . contains ( value ) )
assertNotNull ( exception )
assertEquals ( module . getModuleName ( ) , "Reporting" )
assertThat ( module , equalTo ( expectedModule ) )
assertEquals ( value , module . getAwareOfModules ( ) )
assertEquals ( "org.openmrs.admin.list" + Extension . EXTENSION_ID_SEPARATOR + AccessibleExtension . class . getName ( ) , module . getExtensionId ( ) )
assertNotNull ( module )
assertEquals ( value , equalTo ( value ) )
assertEquals ( value , equalTo ( value ) )
assertEquals ( value , equalTo ( value ) )
assertNotNull ( module )
assertEquals ( value , module . getPrivilege ( ) )
assertEquals ( value , module . getPrivilege ( ) )
assertEquals ( value , module . getPrivilege ( ) )
assertNotNull ( module )
assertEquals ( value , module . getGlobalProperty ( ) )
assertEquals ( value , module . getGlobalProperty ( "some" ) )
assertThat ( module . getGlobalProperties ( ) . isEmpty ( ) ) . isTrue ( )
assertEquals ( "72" , module . getGlobalProperty ( "report.deleteReportsAgeInHours" ) )
assertEquals ( "72" , module . getGlobalProperty ( "report.deleteReportsAgeInHours" ) )
assertNull ( module . getMappingFiles ( ) )
assertNull ( module )
assertEquals ( "Multiple conditionalResources tags found" , exception . getMessage ( ) )
assertEquals ( "Invalid tag found in conditionalResources" , exception . getMessage ( ) )
assertEquals ( "Resource path cannot be blank" , exception . getMessage ( ) )
assertNotNull ( module )
assertThat ( module . getAdvice ( ) , equalTo ( "will be ignored" ) )
assertEquals ( module . getAdvice ( ) . size ( ) , 0 )
assertEquals ( null , module . getAdvice ( ) )
assertEquals ( "1.0" , testModule . getRequiredModuleVersion ( "mod1" ) )
assertThat ( updateRdf , containsString ( "update.rdf" ) )
assertNotNull ( updateRdf )
assertNotNull ( updateRdf )
assertEquals ( "/css/ui.css" , getPathForResource ( module , path ) )
assertEquals ( null , getModuleForPath ( path ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( "/css/ui.css" , getPathForResource ( module , path ) )
assertEquals ( null , getModuleForPath ( path ) )
assertEquals ( null , nullURL )
assertEquals ( textMaxLength , lastAlert . getMessage ( ) . length ( ) )
assertEquals ( expectedText , lastAlert . getText ( ) )
assertEquals ( "recipient1@example.com,recipient2@example.com" , testMessage . getRecipients ( ) )
assertEquals ( oldRecipients + ", " + newRecipient , testMessage . getRecipients ( ) )
assertEquals ( alert , hibernateAlertDAO . getAlert ( ) )
assertEquals ( 2 , savedAlert . getAlertId ( ) )
assertEquals ( null , editor . getValue ( ) )
assertEquals ( null , editor . getValue ( ) )
assertEquals ( null , editor . getValue ( ) )
assertEquals ( getExistingObject ( ) . getId ( ) . toString ( ) , editor . getValue ( ) )
assertEquals ( getExistingObject ( ) . getUuid ( ) , editor . getValue ( ) )
assertEquals ( "" , mapType . getConceptMapTypeId ( ) . toString ( ) )
assertEquals ( getExistingObject ( ) . getId ( ) , editor . getValue ( ) . getId ( ) )
assertEquals ( "2011-10-27 00:00" , ed . getValue ( ) . toString ( ) )
assertEquals ( "2011-10-27 17:59" , ed . getValue ( ) . toString ( ) )
assertEquals ( "27/10/2011" , ed . getAsText ( ) )
assertEquals ( "27/10/2011 17:59" , ed . getAsText ( ) )
assertEquals ( "Some Privilege" , editor . getValue ( ) )
assertEquals ( "d979d066-15e6-467c-9d4b-cb575ef97f0f" , editor . getValue ( ) )
assertEquals ( "concept.9" , editor . getValue ( ) )
assertEquals ( "concept.0a9afe04-088b-44ca-9291-0a8c3b5c96fa" , editor . getValue ( ) )
assertEquals ( "1" , editor . getValue ( ) )
assertEquals ( "da4a0391-ba62-4fad-ad66-1e3722d16380" , editor . getValue ( ) )
assertEquals ( "Provider" , editor . getValue ( ) )
assertEquals ( "3480cb6d-c291-46c8-8d3a-96dc33d199fb" , editor . getValue ( ) )
assertEquals ( true , o instanceof Task )
assertEquals ( 1 , latch . getCount ( ) )
assertEquals ( "1365a6da-6493-4e9b-b950-5af1b392aaa3" , td . getUuid ( ) )
assertNull ( td )
assertEquals ( className , taskDefinition . getTaskClass ( ) )
assertThat ( description . toString ( ) , is ( "expected description" ) )
assertThat ( matcher . matches ( description ) , is ( true ) )
assertThat ( matcher . matches ( description ) , is ( true ) )
assertThat ( description . toString ( ) , is ( "expected description" ) )
assertThat ( description . toString ( ) , equalTo ( "expected description" ) )
assertEquals ( 4.0 , dr . getHigh ( ) , 0.001 )
assertEquals ( Double . POSITIVE_INFINITY , dr . getHigh ( ) )
assertEquals ( Double . POSITIVE_INFINITY , dr . getHigh ( ) )
assertEquals ( 8.0 , dr . getHigh ( ) )
assertEquals ( 0.0 , dr . getLow ( ) , 0.001 )
assertEquals ( Double . NEGATIVE_INFINITY , dr . getLow ( ) )
assertEquals ( Double . NEGATIVE_INFINITY , dr . getLow ( ) )
assertEquals ( 8.0 , dr . getLow ( ) )
assertEquals ( true , r1 . contains ( d ) )
assertNotTrue ( r1 . contains ( d ) )
assertEquals ( false , r1 . contains ( d ) )
assertEquals ( true , r1 . contains ( d ) )
assertFalse ( r1 . contains ( d ) )
assertEquals ( "1.0 - 1.0" , r1 . toString ( ) )
assertEquals ( "" , r1 . toString ( ) )
AssertPlaceHolder = "assertEquals(\"\", r1.toString());"
assertEquals ( "" , r . toString ( ) )
assertEquals ( "" , r . toString ( ) )
assertEquals ( - 1 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( - 1 , actualValue )
assertEquals ( - 1 , actualValue )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertNotNull ( dateFormat . format ( date ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "Expected exception message" , "APIException: No handler found for Validator and Integer" , exception . getMessage ( ) )
assertEquals ( "The exception message is incorrect" , "Malformed URL" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "expectedUrl" , ? ? ? )
assertEquals ( "https" , ? ? ? toString_shouldReturnUrlHttps ( ) . getProtocol ( ) )
assertEquals ( new Locale ( "en" , "US" ) , fromSpecification ( "en_US" ) )
assertEquals ( new Locale ( "en" , "US" ) , fromSpecification ( "en_US" ) )
assert localesInOrder . contains ( Locale . ENGLISH )
assertThat ( callerClass , equalTo ( LogicCriteria . class ) )
assertEquals ( null , url2file ( null ) )
assertEquals ( null , shortenedStackTrace ( null ) )
assertThat ( result , equalTo ( Collections . emptyMap ( ) ) )
assertThat ( result , equalTo ( Collections . emptyMap ( ) ) )
assertEquals ( Collections . emptyMap ( ) , parseParameterList_shouldReturnEmptyMapGivenOnlyPipesAndNoWhitespace ( ) )
assertEquals ( "" , join_shouldReturnEmptyStringGivenNullForCollection ( ) )
assertEquals ( "" , join_shouldReturnEmptyStringGivenEmptyCollection ( ) )
assertEquals ( "element1,element2,element3" , join ( Arrays . asList ( "element1" , "element2" , "element3" ) , "" ) )
assertEquals ( "element1,element2,element3" , join ( Arrays . asList ( "element1" , "element2" , "element3" ) , null ) )
assertFalse ( isInNormalNumericRange ( null , concept ) ) ;
assertFalse ( isInNormalNumericRange ( null , concept ) ) ;
assertTrue ( isInNormalNumericRange ( 5.0f , concept ) )
AssertPlaceHolder = "assertFalse(isInNormalNumericRange(5.0f, concept));"
assertFalse ( isInNormalNumericRange ( 5.0f , concept ) )
assertEquals ( true , isInNormalNumericRange ( 5.67 , concept ) )
assertEquals ( true , isInNormalNumericRange ( 5.64f , concept ) )
assertFalse ( isInCriticalNumericRange ( 0.0f , concept ) ) ;
assertFalse ( isInCriticalNumericRange ( 0.0f , concept ) ) ;
assertTrue ( isInCriticalNumericRange ( value , concept ) )
assertFalse ( isInCriticalNumericRange ( 5.0f , concept ) )
assertFalse ( isInCriticalNumericRange ( 2.0f , concept ) )
assertEquals ( true , isInCriticalNumericRange ( 5.67f , concept ) )
assertTrue ( isInCriticalNumericRange ( 5.64f , concept ) )
assertFalse ( isInAbsoluteNumericRange ( 0.0f , concept ) ) ;
assertFalse ( isInAbsoluteNumericRange ( null , concept ) ) ;
assertTrue ( isInAbsoluteNumericRange ( 5.0f , concept ) )
assertEquals ( false , isInAbsoluteNumericRange ( 5.0f , concept ) )
assertFalse ( isInAbsoluteNumericRange ( 5.0f , concept ) )
assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
assertNull ( concept . getHiAbsolute ( ) )
assertTrue ( concept . getLowAbsolute ( ) == null ) ;
assertTrue ( isValidNumericValue ( 5.0f , concept ) ) ;
assertFalse ( isValidNumericValue ( 11.0f , concept ) )
assertFalse ( isValidNumericValue ( 5.0f , concept ) )
assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
assertEquals ( - 1 , actualValue )
assertEquals ( 1 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( 1 , fields . size ( ) )
assertEquals ( errorMsgSubString , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) , containsString ( errorMsgSubString ) )
assertEquals ( errorMsgSubString , exception . getMessage ( ) )
assertEquals ( "Expected error message" , expectedErrorMessage , errors . getFieldError ( "text" ) . getDefaultMessage ( ) )
assertEquals ( 1 , errors . getFieldErrors ( "text" ) . size ( ) )
assertThatFieldTextHasError ( )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors . hasFieldErrors ( "code" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "code" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) . withField ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) . withField ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( errors . hasGlobalErrors ( ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( "conceptDescription" , "error.concept.description.datatype.null" ) )
assertThat ( errors , hasFieldErrors ( "description" , "NotNull" ) )
assertThat ( errors , hasGlobalErrors ( ) )
assertThat ( errors , hasGlobalErrors ( ) )
assertEquals ( "Duplicate concept name exception should be thrown" , "Duplicate concept name exception" , exception . getMessage ( ) )
assertEquals ( "The exception message should be 'Duplicate concept name'" , "Duplicate concept name" , exception . getMessage ( ) )
assertThat ( errors . hasGlobalErrors ( ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertEquals ( true , errors . hasGlobalErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , hasFieldErrors ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "diagnosis" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "drug" ) ) . isTrue ( )
- The suggested assertion is using the assertThat method from the JUnit framework to assert that the "errors" object has a field error for the "dose" field .
assertThat ( errors . getFieldErrors ( "doseUnits" ) ) . isNotEmpty ( )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors())"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors.getFieldErrors()).hasFieldErrors(" order . quantityUnits  ")"
AssertPlaceHolder = "assertThat(errors.getFieldErrors()).hasFieldErrors(" order . durationUnits  ")"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" drug ")).isTrue();"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Invalid argument: Patient" , exception . getMessage ( ) )
assertThat ( errors . hasErrors ( ) ) . isTrue ( )
assertThat ( errors . hasErrors ( ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "encounterDateTime" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "encounterType" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" , "Field length must be less than or equal to 20" ) )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertEquals ( 1 , errors . getFieldErrorCount ( "name" ) )
assertThat ( errors . hasFieldErrors ( "selectMultiple" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "retired" ) ) . isTrue ( )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
- The suggested assertion is using the assertThat method from the JUnit framework to assert that the "errors" object has a field error .
assertNotNull ( e . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( false , location . getRetired ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors());"
AssertPlaceHolder = "assertThat(errors, hasFieldErrors());"
assertEquals ( expectedMsg , exception . getMessage ( ) )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( expectedMsg , exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "orderType" ) ) . isFalse ( )
assertEquals ( false , pi . isUnique ( ) )
assertThat ( errors . getFieldError ( "patient" ) ) . isNotNull ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( 1 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" program ", " dateEnrolled ")).isTrue();"
assertThat ( errors . hasFieldErrors ( "voidReason" ) ) . isTrue ( )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors().withFieldError(" gender ").isNotBlank());"
- The suggested assertion is using the assertThat method from the JUnit framework to assert that the "errors" object has a field error for the "startDate" field .
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrorCount ( "endDate" ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personAddress ")).isFalse();"
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personAddress ")).isTrue();"
AssertPlaceHolder = "assertThat(errors, not(hasFieldErrors()));"
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" patObj ")).isTrue();"
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" , "Name already in use" ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personMergeLog ")).isTrue();"
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrorCount ( "winner" ) )
assertEquals ( 1 , errors . getFieldErrorCount ( "loser" ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors()).isFalse();"
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personMergeLog ")).isFalse();"
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personMergeLog ", " voidReason ")).isTrue();"
assertThat ( errors . hasGlobalErrors ( ) ) . isTrue ( )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "error.required" ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "error.code" ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "errorCode" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "prefix" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "middleName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyNamePrefix" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName2" , "code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyNameSuffix" , "code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "degree" , "code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "invalid" ) ) . isTrue ( )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "middleName" , "invalid" ) ) . isTrue ( )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "<expectedErrorCode>" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName2" , "invalid" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.getFieldErrors()).isNotEmpty();"
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrorCount ( "firstName" ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( validator . validatePersonName ( personName , errors , false , true ) , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertThat ( errors , hasFieldErrors ( ) )
assertThat ( validator . validatePersonName ( personName , errors , false , true ) , hasFieldErrors ( ) )
assertThat ( validator . validatePersonName ( personName , errors , false , true ) , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors().withFieldError(" birthdate ").withErrorMessage(" Birthdate cannot be a future date . "));"
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getErrorCount ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" patient ")).isTrue();"
AssertPlaceHolder . assertEquals ( 0 , errors . getErrorCount ( ) )
AssertPlaceHolder = "assertThat(errors, not(hasFieldErrors()));"
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertEquals ( 1 , errors . getErrorCount ( ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrorCount ( "concept" ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors().withFieldError(" name ").withErrorMessage(" Field 'name' should not exceed 50 characters . "));"
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "voidReason" , "Field length must be less than or equal to 255 characters" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( 1 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( 1 , errors . getErrorCount ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" user ")).isTrue();"
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertNotNull ( errors . getFieldError ( "user" ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "email" ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
AssertPlaceHolder = "assertThat(hasFieldErrors().hasFieldError(" name ")).isTrue();"
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" name ")).isFalse();"
assertThat ( errors . hasFieldErrors ( "name" ) ) . isFalse ( )
assertEquals ( "Invalid drug name" , exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getErrorCount ( ) )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors());"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "voidReason" , "Field length must be less than or equal to 255 characters" ) )
assertThat ( errors , hasFieldErrors ( "startDatetime" , "error.visit.startDatetime.beforeBirthdate" ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( "startDatetime" , "error.visit.startDatetime.beforeEstimatedBirthDatesGracePeriod" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( "startDatetime" , "error.visit.startDatetime.beforeEstimatedBirthdate" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertThat ( f . exists ( ) ) . isTrue ( )
assertEquals ( "" , contextPath )
assertEquals ( "" , contextPath )
assertEquals ( "Value" , WebConstants . WEBAPP_NAME )
assertEquals ( null , normalizeLocale ( "  en_US" ) )
assertEquals ( null , normalizeLocale ( localeString ) )
assertNotNull ( normalizeLocale ( localeString ) )
assertEquals ( null , normalizeLocale ( "   " ) )
assertEquals ( "" , localeString )
assertEquals ( null , normalizeLocale ( localeString ) )
assertEquals ( 0 , cookies . length )
assertEquals ( 1 , cookies . length )
assertEquals ( true , ? ? ? )
AssertPlaceHolder = "assertFalse(isSuperUser(user));"
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "default" , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "PhysicalNetwork.IsolationMethod[bla, blob]" , method . toString ( ) )
assertEquals ( "bla" , method . getProvider ( ) )
assertThrows ( Exception . class , ( ) -> removeUnregistered ( ) )
assertEquals ( "No registration of prefix 'bla' found." , exception . getMessage ( ) )
assertNotNull ( isolationMethod )
assertEquals ( Native , type )
assertEquals ( GuestType . Shared , GuestType . fromValue ( "Shared" ) )
assertEquals ( action , AutoScalePolicy . Action . fromValue ( "scaledown" ) )
assertEquals ( null , action )
assertEquals ( accountType , getFromValue ( accountType . getValue ( ) ) )
assertEquals ( null , getFromValue ( 123 ) )
assertEquals ( roleType , RoleType . fromString ( roleType . toString ( ) ) )
assertEquals ( RoleType . Admin , role . getRoleType ( ) )
assertEquals ( "someString" , rule . toString ( ) )
assertEquals ( rule , focalMethod ( rule ) )
assertNotNull ( e )
assertEquals ( new HashMap < String , Map < String , String > > ( ) , cmd . getDetails ( ) )
assertEquals ( null , cmd . getDetails ( ) )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "Expected message" , ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertThat ( ex , instanceOf ( ServerApiException . class ) )
assertEquals ( expectedTags , createSnapshotCmd . getTags ( ) )
assertNotNull ( exception )
assertEquals ( values1 , result )
assertEquals ( "virtualmachine" , list . get ( 0 ) . getResponseType ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertEquals ( expectedTags , createSnapshotPolicyCmd . getTags ( ) )
assertEquals ( null , registerTemplateCmdByAdmin . zoneIds )
assertEquals ( null , registerTemplateCmd . zoneIds )
assertEquals ( true , _mgr . deleteUserData ( cmd ) )
assertEquals ( response , cmd . getResponseObject ( ) )
assertEquals ( 1 , actualResponse . getList ( ) . size ( ) )
assertNotNull ( _responseObject )
assertEquals ( null , hostResponse . getDetails ( ) )
assertEquals ( expected , statsResponseMock . diskIopsTotal )
assertEquals ( expected , statsResponseMock . getDiskIopsTotal ( ) )
assertEquals ( expected , statsResponseMock . diskIopsTotal )
assertEquals ( usageUnitType , UsageUnitTypes . getByDescription ( type . toString ( ) ) )
assertEquals ( usageUnitType , UsageUnitTypes . getByDescription ( type . name ( ) ) )
assertEquals ( i + 1 , aclList . get ( i ) . getNumber ( ) )
assertThat ( received , equalTo ( answer ) )
assertNotNull ( received . getOvfInformationTO ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , cmd . getResult ( ) )
assertEquals ( true , getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( true , result )
assertEquals ( "proxyImageUrl" , url , cpi . getProxyImageUrl ( ) )
assertEquals ( "console.example.com" , url )
assertEquals ( "Expected proxyImageUrl to be null" , null , url )
assertEquals ( "Expected proxyImageUrl to be null" , null , url )
assertEquals ( "" , url , cpi . getProxyImageUrl ( ) )
assertEquals ( "1.2.3.4" , url )
assertEquals ( bytes , expectedBytes )
assertEquals ( null , getVirtualSize ( ) )
assertEquals ( virtualSize , processor . getVirtualSize ( ) )
assertEquals ( 1000L , actualSize )
assertEquals ( virtualSize , actualSize )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( true , b )
assertEquals ( aic , after )
assertEquals ( expectedResult , b )
assert . assertEquals ( expected , dcId )
assertEquals ( expected , aId )
assertEquals ( expected , vId )
assertEquals ( expected , ssId )
assertNotNull ( s2 )
s . assertEquals ( 0L , s . longValue ( ) )
assertEquals ( true , b )
e != null
assertEquals ( true , r )
assertEquals ( true , b )
h . assertEquals ( cohc . getHost ( ) )
s . assertEquals ( expectedState , s )
assertEquals ( id , host . getId ( ) )
assertEquals ( t , host . getType ( ) )
assertEquals ( Status . EXPECTED_STATUS , s )
assertEquals ( expectedTotalMemory , m )
assertEquals ( expectedCpuSockets , cpuSockets )
assertEquals ( 4 , cpus )
assertEquals ( 10 , speed )
assertEquals ( expectedPort , port )
assertEquals ( expectedPodId , pID )
assertNotNull ( dcID )
assertEquals ( expectedType , type )
assertEquals ( expectedSize , size )
assertEquals ( new Date ( ) , lp )
assertEquals ( expectedMsID , msID )
assertEquals ( expectedClusterId , cID )
assertEquals ( expectedResourceState , r )
dcId . assertEquals ( expected )
assertEquals ( expected , aId )
assertEquals ( expected , vId )
assertEquals ( "BaseImage" , type )
assertEquals ( "DataDisk" , type )
assertEquals ( "Iso" , type . getType ( ) )
assertEquals ( "Unknown" , type )
assertEquals ( "RootDisk" , type . getType ( ) )
assertEquals ( "VolumeTypeBase" , type . getType ( ) )
assertEquals ( "String" , type )
assertEquals ( true , actual )
assertEquals ( false , actual )
assertEquals ( null , actual )
assertEquals ( ScopeType . CLUSTER , storagePoolVoMock . getScope ( ) )
assertEquals ( ScopeType . CLUSTER , storagePoolVoMock . getScope ( ) )
assertEquals ( ScopeType . ZONE , storagePoolVoMock . getScope ( ) )
assertEquals ( listAutoScaleVmGroupVOMock , result )
assertEquals ( result , listAutoScaleVmGroupVOMock )
assertEquals ( result , listAutoScaleVmGroupVOMock )
assertEquals ( result , true )
assertTrue ( result )
assertEquals ( - 1 , result )
assertEquals ( - 1 , result )
assertEquals ( 2 , result )
assertEquals ( false , result )
assertEquals ( state , getState ( ) )
assertEquals ( state , getState ( ) )
assertEquals ( 6 , result )
assertEquals ( result , listAutoScaleVmGroupVmMapVOMock )
assertEquals ( result , listAutoScaleVmGroupVmMapVOMock )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertNotNull ( getRecentVersionMiddle ( ) )
assertNotNull ( getRecentVersion ( fromVersion ) )
assertNotNull ( getRecentVersion ( fromVersion ) )
assertNotNull ( getRecentVersionJust ( ) )
assertNotNull ( getRecentVersionExact ( ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "storage_pool.cluster_id = ? OR storage_pool.cluster_id IS NULL) AND (" , sql . toString ( ) )
assertEquals ( clusterSql , sqlPreparedStatement )
assertEquals ( fileContent . getBytes ( ) , returnedContentInBase64 . getBytes ( ) )
assertEquals ( ConfigDrive . CONFIGDRIVEDIR + "/" + configIsoFileName ( instanceName ) , "<AssertPlaceHolder>" )
assertEquals ( expectedTemplateUuid , templateUuid )
assertEquals ( expectedTemplateUuid , templateUuid )
assertEquals ( 5L , priority )
assertEquals ( dataStore2 , volumeInfo1 . getDataStore ( ) )
assertEquals ( StrategyPriority . EXPECTED_VALUE , priority )
assertEquals ( false , pool2 . isManaged ( ) )
assertEquals ( DataStoreRole . Primary , sourceStore . getRole ( ) )
assertEquals ( expected , "<AssertPlaceHolder>" )
assertEquals ( volumePath , strategy . getPath ( ) )
assertThat ( result ) . isTrue ( )
assertEquals ( true , isStoragePoolTypeInList ( StoragePoolType . LVM , listTypes ) )
assertEquals ( false , isStoragePoolTypeInList ( StoragePoolType . LVM , listTypes ) )
assertNotNull ( cacheObj )
assertEquals ( true , result . isSuccess ( ) )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( expectedResult , result )
assertEquals ( imageFormat , volumeObjectTo . getFormat ( ) )
assertEquals ( "Panic!" , e . getMessage ( ) )
assertEquals ( "Hello" , result )
assertEquals ( "test" , test )
assertEquals ( "expectedValue" , result )
assertEquals ( expectedResult , result )
assertEquals ( input , asyncJobManager . obfuscatePassword ( result , false ) )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( 2L , accountVO . getId ( ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( expected , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( null , quotaTariffVoMock . getActivationRule ( ) )
assertEquals ( "" , quotaTariffVoMock . getActivationRule ( ) )
result . assertNull ( )
assertEquals ( presetVariablesMock , result )
assertEquals ( BigDecimal . ZERO , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( result . getAccount ( ) . getRole ( ) , getProject ( id ) . getRole ( ) )
assertNotNull ( result . getProject ( ) )
assertEquals ( domain . getPath ( ) , result . getPath ( ) )
assertEquals ( vmInstanceVoMock . getHost ( ) , result . getHost ( ) )
assertEquals ( expected . getTags ( ) , result . getTags ( ) )
assertEquals ( expected , result )
assertThat ( result . isCustomized ( ) ) . isEqualTo ( expected . isCustomized ( ) )
assertEquals ( expected . getTag ( ) , actual . getTag ( ) )
assertEquals ( expected , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , < actual value >  )
assertEquals ( expected , 1 )
assertNotNull ( set )
assertEquals ( "Expected IOException to be thrown" , IOException . class , e . getClass ( ) )
assertEquals ( "Expected exception message" , "expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertNotNull ( accountService . getAccount ( Mockito . anyLong ( ) ) )
assertEquals ( Collections . singletonList ( permission ) , roleServiceMock . findAllPermissionsBy ( Mockito . anyLong ( ) ) )
assertEquals ( true , focalMethodResult )
assertEquals ( 1 , apiAccessCheckerSpy . getRoleBasedAnnotationsMap ( ) . size ( ) )
assertEquals ( 204 , status )
assertNotNull ( generateRandomBigInt ( ) )
assertEquals ( "expectedProviderName" , getProviderName ( ) )
assertEquals ( expectedNextDate , nextDate )
assertThat ( nextDayDate ) . isEqualTo ( expectedNextDate )
assertThat ( e . getMessage ( ) , is ( equalTo ( "Expected error message" ) ) )
assertEquals ( ans . getVmStats ( ) . size ( ) , 1 )
assertEquals ( true , ans . getResult ( ) )
assertEquals ( true , getResult ( ) )
assertEquals ( true , getResult ( ) )
assertEquals ( expectedPortName , getNextDpdkPort ( ) )
assertEquals ( expectedPortName , getNextDpdkPort ( ) )
assertEquals ( DpdkHelper . VHostUserMode . CLIENT , guestMode )
assertEquals ( DpdkHelper . VHostUserMode . SERVER , guestMode )
assertEquals ( DpdkHelper . VHostUserMode . SERVER , dpdKvHostUserMode )
assertEquals ( DpdkHelper . VHostUserMode . CLIENT . toString ( ) , dpdKvHostUserMode . toString ( ) )
assertEquals ( expected , lcr . diskUuidToSerial ( uuid ) )
assertEquals ( 100 , memoryFreeInKBs )
assertEquals ( 0 , memoryFreeInKBs )
assertEquals ( 100 , memoryFreeInKBs )
assertEquals ( true , ans . getResult ( ) )
assertEquals ( valueExpected , result )
assertEquals ( HYPERVISOR_QEMU_VERSION_SUPPORTS_IOURING , diskDef . getIoDriver ( ) )
diskDef . getIoDriver ( ) == ioDriver
assertEquals ( IoDriverPolicy . IO_URING , getIoDriver ( ) )
assertEquals ( 2000 , cpuShares )
assertEquals ( 0 , actualValue )
assertEquals ( "/mnt/pool/filepath" , diskDef . getSourcePath ( ) )
assertEquals ( null , diskDef . getSourcePath ( ) )
assertEquals ( "/mnt/unsupported-path" , diskPath )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , interfaceDef . toString ( ) )
assertEquals ( expected , interfaceDef . toString ( ) )
assertEquals ( expected , ifDef . toString ( ) )
assertEquals ( expected , ifDef . toString ( ) )
assertEquals ( expectedXML , disk . toString ( ) )
assertEquals ( expectedXml , xmlDef )
assertEquals ( expectedXml , xmlDef )
assertEquals ( expected , str )
assertEquals ( expectedToString . toString ( ) , ? ? ? )
assertEquals ( Networks . TrafficType . Public , ip . getTrafficType ( ) )
assertEquals ( Networks . TrafficType . Guest , ip . getTrafficType ( ) )
assertEquals ( expectedResult , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( 2350L , KVMHostInfo . getCpuSpeedFromHostCapabilities ( capabilities ) )
assertEquals ( manualSpeed , kvmHostInfo . getCpuSpeed ( ) )
assertEquals ( filename , file . getFileName ( ) )
assertNotNull ( hypervisor . configure ( config . getAgentName ( ) , configTest . getParams ( ) ) )
assertEquals ( Status . EXPECTED_STATUS , hypervisor . getCurrentStatus ( id ) )
assertNotNull ( start )
results . basicStringTest ( hypervisor . getVmState ( vmName ) . toString ( ) , State . Running . toString ( ) )
assertNotNull ( vmwareDatacenter )
assertEquals ( "01:23:45:67:89:AB|02:00:65:b5:00:03" , macSequence )
assertThat ( storageCmd , is ( notNullValue ( ) ) )
assertEquals ( StrategyPriority . EXACT , canHandle )
assertEquals ( StrategyPriority . CANNOT_HANDLE , canHandle )
assertEquals ( expected , guestOsType )
assertEquals ( expected , guestOsType )
assertEquals ( expected , guestOsType )
assertEquals ( "My Own Linux Distribution Y.M (64-bit)" , guestOsType )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( null , sr )
assertEquals ( srMock , sr )
AssertPlaceHolder = "Assert.assertNotNull(wrapper);"
assertEquals ( 1 , answer )
assertEquals ( false , answer . getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( 400 , result )
assertEquals ( 1 , findAll ( deleteRequestedFor ( urlPathMatching ( "/user.*" ) ) . withQueryParam ( "userId" , equalTo ( user . getUserId ( ) ) ) ) . size ( ) )
assertEquals ( 400 , wireMockRule . findStubMappings ( ) . size ( ) )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( null , group )
assertEquals ( true , result )
assertEquals ( 400 , result )
assertEquals ( true , result )
assertEquals ( 400 , result )
assertEquals ( expected , result )
assertEquals ( "50.25%" , hostResponse . getCpuAllocatedGhz ( ) )
assertEquals ( "∞%", h stResponse.g e tCpuAllocatedGhz() )
assertEquals ( "{'healthy': true, 'topologySyncRequested': false}" , ? ? ? getControllerData ( ) . toString ( ) )
assertEquals ( HttpStatus . SC_CONFLICT , _method . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_SEE_OTHER , _method . getStatusCode ( ) )
assertEquals ( false , ping . getStatus ( ) )
assertEquals ( false , ping . getStatus ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( false , ans . getResult ( ) )
assertNotNull ( designednetwork )
assertEquals ( "Offline" , ping . getStatus ( ) )
assertEquals ( false , ping . isSuccess ( ) )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( false , answer . getResult ( ) )
assertEquals ( true , result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( null , actual )
assertEquals ( null , actual )
assertEquals ( false , domain . isDeleted ( ) )
assertEquals ( provider , ? ? ? )
pr . getName ( ) , equalTo ( _name )
assertThat ( isReady ) . isTrue ( )
assertThat ( isReady ) . isFalse ( )
assertThat ( isReady ) . isFalse ( )
assertEquals ( false , isReady )
assertTrue ( result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertNotNull ( worker )
assertEquals ( true , result )
assertEquals ( vr , _lbVmSvc . startInternalLbVm ( validVmId , _accountMgr . getAccount ( 1L ) , 1L ) )
assertEquals ( true , vr . isStopped ( ) )
assertEquals ( 0 , compare ( cls , parameters ) )
assertEquals ( 0 , compare ( cls , parameters ) )
assertEquals ( 0 , compare ( cls , parameters ) )
assertEquals ( 2 , executionCounter . getExecutionCount ( ) )
assertEquals ( "stable" , clusterStatus )
assertEquals ( "unstable" , ping . getClusterStatus ( ) )
assertEquals ( "unstable" , ping . getClusterStatus ( ) )
assertNotNull ( clsa )
assertEquals ( false , clsa . getResult ( ) )
assertEquals ( true , dlsa . getResult ( ) )
assertEquals ( false , dlsa . getResult ( ) )
assertNull ( clspa )
assertNotNull ( dlspa )
assertThrows ( NiciraNvpApiException . class , ( ) -> {
assertEquals ( lspl , flspa . getResult ( ) )
assertEquals ( false , flspa . getResult ( ) )
assertEquals ( false , flspa . getResult ( ) )
assertEquals ( false , clra . getResult ( ) )
assertEquals ( false , clra . getResult ( ) )
assertNotNull ( dlspa )
assertEquals ( false , answer . getResult ( ) )
assertNotNull ( answer )
assertNull ( answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( netUrl , MessageFormat . format ( NeutronNorthboundEnum . NETWORK_PARAM_URI . getUri ( ) , netId ) )
assertEquals ( portUrl , MessageFormat . format ( NeutronNorthboundEnum . PORTS_PARAM_URI . getUri ( ) , portId ) )
assertEquals ( nodedelUrl , MessageFormat . format ( NeutronNorthboundEnum . NODE_PARAM_URI . getUri ( ) , "test" , nodeId ) )
assertNull ( returnValue )
assertNotNull ( newHttpGet )
assertNotNull ( newHttpPost )
assertNotNull ( newHttpPut )
assertNotNull ( newHttpDelete )
assertEquals ( true , caughtException )
assertEquals ( "Expected error message" , expectedErrorMessage , storPoolPrimaryDataStoreDriver . getError ( ) )
assertEquals ( "" , _responseObject )
assertNotNull ( getResponseObject ( ) )
assertEquals ( "ldapListUsersCmd.getCommandName()" , "s_name" , commandName )
assertEquals ( true , result )
assertEquals ( "NoFilter" , userfilter )
assertNotNull ( getResponseObject ( ) )
assertEquals ( localDomain , useSubdomain ( ) )
assertEquals ( localDomain , domainVO )
assertNotNull ( getResponseObject ( ) )
assertEquals ( "cn=bla" , ldapConfiguration . getLdapBindPrincipal ( ) )
assertEquals ( "dc=cloudstack,dc=org" , baseDn )
assertNotNull ( result )
assertEquals ( "cn=cloudstack,cn=users,dc=cloudstack,dc=org" , result )
assertEquals ( "password" , result )
assertNotNull ( result )
userManager . getOpenLdapInstance ( )
userManager . getProvider ( ) == LdapUserManager . Provider . MICROSOFTAD
assertNotNull ( pair )
assertNotNull ( pair )
assertNull ( pair . first ( ) )
assertNotNull ( pair )
assertNotNull ( pair )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( randomToken , getToken ( ) )
assertThat ( isSAMLPluginEnabled ( ) ) . isTrue ( )
assertEquals ( "ApiServiceConfiguration" , getConfigComponentName ( ) )
assertEquals ( password , encode ( password ) )
assertEquals ( 160 , generateSecureRandomId ( ) . length ( ) )
assertEquals ( expectedRandomId , randomId )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( "ipv4" , response . getIpAddr ( ) )
assertEquals ( "ipv6" , response . getIpAddr ( ) )
assertEquals ( 0 , virtualMachineCount . get ( securityGroupResponse ) )
assertEquals ( 2L , virtualMachineCount . get ( securityGroupResponse ) )
assertEquals ( 2 , virtualMachineCount . get ( securityGroupResponse ) )
assertEquals ( null , testVariable )
assertEquals ( "The provided value is not valid for this configuration. Please enter an integer in the range: [1-5]" , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid site local IP address" , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid instance name (instance names cannot contain hyphens, spaces or plus signs)" , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertNotNull ( getVlanNumberFromUri ( vlan ) )
assertEquals ( "expectedVlanNumber" , getVlanNumberFromUri ( "vlan:expectedVlanNumber" ) )
assertEquals ( true , sameSubnet . first ( ) )
assertEquals ( true , sameSubnet . first ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( expectedResult , result )
assertEquals ( true , dest . shouldAvoid ( ) )
assertNotNull ( value ( ) )
assertNotNull ( value ( ) )
assertEquals ( "host" , dest . getHost ( ) )
assertEquals ( "host" , dest . getHost ( ) )
assertEquals ( "host" , dest . getHost ( ) )
assertEquals ( true , result )
assertEquals ( TransactionLegacy . open ( "testMethod1" ) , event )
assertEquals ( Status . Down , investigate ( hostId ) )
assertEquals ( Status . FAILURE , ? ? ? investigate ( hostId ) ? ? ? )
assertEquals ( true , fenceOff ( virtualMachine , host ) )
assertEquals ( false , fenceOff ( virtualMachine , host ) )
assertEquals ( false , fenceOff ( virtualMachine , host ) )
assertEquals ( maxCpuCores , result . getValue ( ) )
assertEquals ( 1l , virtualMachineMock . getLastHostId ( ) )
assertEquals ( 1l , virtualMachineMock . getLastHostId ( ) )
assertEquals ( "Ubuntu" , guru . getPlatformEmulator ( ) )
assertEquals ( null , virtualMachineTo . getGuestOsMapping ( ) )
assertEquals ( "Ubuntu" , guru . getPlatformEmulator ( ) )
assertEquals ( null , guru . getPlatformEmulator ( ) )
assertEquals ( "Ubuntu" , guru . getPlatformEmulator ( ) )
assertEquals ( null , clusterId )
assertEquals ( DpdkHelper . VHostUserMode . CLIENT , DpdkHelper . VHostUserMode . fromValue ( "client" ) )
assertEquals ( DpdkHelper . VHostUserMode . SERVER , DpdkHelper . VHostUserMode . fromValue ( "server" ) )
assertEquals ( expected , nic . getIPv6Address ( ) )
assertEquals ( ipv6Address , assignedNic . getIPv6Address ( ) )
assertEquals ( "Expected exception message" , _description , e . getMessage ( ) )
assertEquals ( "InvalidParameterValueException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "InvalidParameterValueException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "InvalidParameterValueException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "524-524,525-530" , argumentCaptor . getValue ( ) )
assertEquals ( counterName , ReflectionTestUtils . getField ( cmd , ApiConstants . NAME ) )
assertEquals ( countersMock , counters )
assertTrue ( success )
assertEquals ( 1 , conditionDao . persist ( Mockito . any ( ) ) )
AssertPlaceHolder = "assertTrue(success);"
assertEquals ( true , result )
assertEquals ( false , autoScaleVmProfileDao . remove ( vmProfileId ) )
assertEquals ( vmGroupId , loadBalancer )
assertEquals ( AutoScaleVmGroup . State . DISABLED , vmGroup . getState ( ) )
assertEquals ( dataDiskSize , result )
assertEquals ( Counter . Source . CPU , counterTO . getSource ( ) )
assertEquals ( Counter . Source . VIRTUALROUTER , counterTO . getSource ( ) )
assertEquals ( Counter . Source . VIRTUALROUTER , counterTO . getSource ( ) )
assertEquals ( Counter . Source . CPU , counterTO . getSource ( ) )
assertTrue ( result )
assertEquals ( networkMock , result )
assertEquals ( true , answer . getResult ( ) )
assertEquals ( "expectedValue" , getCapabilities ( ) )
assertThat ( StrategyPriority . canHandle ( vmId , poolId , snapshotMemory ) ) . isTrue ( )
assertThat ( networkModel . areServicesSupportedByNetworkOffering ( offering . getId ( ) , Network . Service . SecurityGroup ) ) . isTrue ( )
assertEquals ( null , result )
assertEquals ( "1.1.1.1 2.2.2.2/24 " , result )
assertEquals ( Network . Provider . VirtualRouter , provider )
assertEquals ( null , result )
assertEquals ( returnedNetworkAclItemVo , networkAclItemVoMock . clone ( ) )
assertEquals ( null , networkACLItemVOReceived )
assertEquals ( null , networkACLItemVOReceived )
assertEquals ( null , networkACLItemVOReceived )
assertEquals ( nextAclRuleMock , networkACLItemVOReceived )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( "InvalidParameterValueException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "InvalidParameterValueException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( true , enterMaintenanceMode )
assertEquals ( - 11l , amount )
assertNotNull ( result )
assertEquals ( false , result . first ( ) )
assertNull ( result . second ( ) )
assertEquals ( false , result . first ( ) )
assertEquals ( DEFAULT_DATABASE_NAME , dbName )
assert . assertEquals ( "dbName" , dbName )
assert . assertEquals ( expected , result )
assertEquals ( Snapshot . State . BackedUp , snapshot . getState ( ) )
assertEquals ( STORE_ID , nfsVersion )
assertEquals ( "expectedNfsVersion" , nfsVersion )
assertEquals ( nfsVersion , imageStoreDetailsUtil . getNfsVersion ( ) )
assertEquals ( "expectedNfsVersion" , nfsVersion )
assertEquals ( null , imageStoreDetailsUtil . getNfsVersionByUuid ( STORE_UUID ) )
assertEquals ( "expectedValue" , globalDefaultNfsVersion )
assertEquals ( null , createVol . getVolumeName ( ) )
assertEquals ( "" , createVol . getVolumeName ( ) )
assertEquals ( " " , createVol . getVolumeName ( ) )
assertEquals ( "abc" , getVolumeNameFromCommand ( createVol ) )
assertEquals ( "" , returnedStoragePoolTags )
assertEquals ( tags , returnedStoragePoolTags )
assertEquals ( "A,B,C" , diskOfferingVoMock . getTags ( ) )
assertEquals ( "A,B,C" , diskOfferingVoMock . getTags ( ) )
assertEquals ( "A,B,C,D,X,Y" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "C,D" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "A" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( DataStoreRole . Image , snapshot . getDataStoreRole ( ) )
assertEquals ( DataStoreRole . Image , snapshotHelperMock . getDataStoreRole ( ) )
assertEquals ( backupSnapshotFromVmSnapshot ( TEST_SNAPSHOT_ID , TEST_VM_ID , TEST_VOLUME_ID , TEST_VM_SNAPSHOT_ID ) , snapshot )
assertEquals ( expectedResult , result )
assertEquals ( expectedResult , result )
assertEquals ( null , dataStore )
assertEquals ( 2L , cmd . getUserdataId ( ) )
assertEquals ( null , cmd . getUserdataId ( ) )
assertEquals ( null , _accountDao . findById ( 42l ) )
assertEquals ( State . DISABLED , disabledAccount . getState ( ) )
assertEquals ( State . DISABLED , account . getState ( ) )
assertNotNull ( receivedUser )
assertEquals ( "" , domainVo . getUuid ( ) )
assertEquals ( " " , domainVo . getUuid ( ) )
assertEquals ( "expectedUuid" , domainVo . getUuid ( ) )
assertEquals ( "testUuid" , domainVo . getUuid ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( InvalidParameterValueException . class , e . getClass ( ) )
assertEquals ( InvalidParameterValueException . class , e . getClass ( ) )
assertEquals ( InvalidParameterValueException . class , e . getClass ( ) )
assertEquals ( InvalidParameterValueException . class , e . getClass ( ) )
assertNull ( returnedRole )
assertNull ( returnedRole )
assertNull ( returnedRole )
assertNull ( returnedRole )
assertEquals ( RoleType . DomainAdmin , returnedRole . getRoleType ( ) )
assertEquals ( RoleType . DomainAdmin , returnedRole . getRoleType ( ) )
assertEquals ( RoleType . Admin , returnedRole . getRoleType ( ) )
assertEquals ( RoleType . Admin , returnedRole . getRoleType ( ) )
assertEquals ( false , _groupDao . isNameInUse ( anyLong ( ) , anyLong ( ) , eq ( "group1" ) ) )
assertEquals ( group . getName ( ) , AFFINITY_GROUP_NAME )
assertEquals ( 0l , domainIdBasedOnDomainLevel )
assertEquals ( 0l , domainIdBasedOnDomainLevel )
assertEquals ( listToSend , expectedList )
assertEquals ( "roundrobin" , IndirectAgentLBServiceImpl . IndirectAgentLBAlgorithm . getDefaultValue ( ) )
assertThat ( shuffleListHost2 , containsInAnyOrder ( "host1" , "host2" , "host3" ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "Expected InvalidParameterValueException to be thrown" , InvalidParameterValueException . class , e . getClass ( ) )
assertNotNull ( value ( ) )
assertEquals ( true , crlDao . revokeCertificate ( Mockito . any ( BigInteger . class ) , anyString ( ) ) )
assertNotNull ( rule )
assertEquals ( newAccountOwner , owner )
assertEquals ( newAccountOwner , owner )
assertEquals ( null , owner )
assertEquals ( null , lock )
assertEquals ( publicIp , deployment . findSourceNatIP ( ) )
assertEquals ( 1 , workers . size ( ) )
assertEquals ( 1 , workers . size ( ) )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertEquals ( "InvalidParameterValueException should be thrown" , "Invalid parameter value" , e . getMessage ( ) )
assertEquals ( "foo" , regionManager . getRegionName ( ) )
assertTrue ( offeringCustom . isDynamic ( ) )
assertTrue ( offeringCustom . isDynamic ( ) )
assertEquals ( snapshotInfoMock , result )
assertEquals ( expected , stringWriter . toString ( ) )
assertNotNull ( actualErrors )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( "Expected exception not thrown" , Exception . class , e . getClass ( ) )
assertEquals ( "expectedValue" , getHumanReadableBytesJson ( "inputJson" ) )
assertEquals ( "expectedValue" , getHumanReadableBytesJson ( "inputJson" ) )
assertEquals ( "null" , ? ? ? nullToLong ( ) )
assertEquals ( "b" , properties . get ( "a" ) )
assertEquals ( "a" , properties . get ( "b" ) )
assertEquals ( "Expected output" , "Actual output" , script . toString ( ) )
assertEquals ( "hello world!" , value )
assertEquals ( "" , output )
assertEquals ( expected , output )
assertEquals ( expected , result )
assertEquals ( expected , output . toString ( ) )
assertEquals ( expected , output )
assertEquals ( sleepTimeNano , pf . getDuration ( ) )
assertThat ( ImageStoreUtil . isCompressedExtension ( url ) , Matchers . is ( isValidCompression ) )
assertEquals ( "before" , LOG . getLastDebugMessage ( ) )
assertEquals ( false , isCgLibLogTrace ( s ) )
assertEquals ( "4294967297" , max . addr ( ) )
assertEquals ( "0" , min . addr ( ) )
assertEquals ( BigInteger . valueOf ( 10 ) , countIp6InRange ( "2001:db8::1-2001:db8::a" ) )
assertEquals ( BigInteger . valueOf ( 0 ) , countIp6InRange ( null ) )
assertEquals ( BigInteger . valueOf ( 0 ) , countIp6InRange ( null ) )
assertEquals ( BigInteger . valueOf ( 10 ) , countIp6InRange ( "2001:db8::1-2001:db8::a" ) )
assertEquals ( "pvlan://1-i2" , generateUriForPvlan ( "1" , "2" ) )
assertEquals ( URI . create ( "pvlan://" + primaryVlan + "-c" + isolatedPvlan ) , generateUriForPvlan ( primaryVlan , isolatedPvlan , isolatedPvlanType ) )
assertEquals ( URI . create ( "pvlan://" + primaryVlan + "-c" + isolatedPvlan ) , generateUriForPvlan ( primaryVlan , isolatedPvlan , isolatedPvlanType ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertNotNull ( getSSLContextTest ( ) )
assertEquals ( "expectedProtocol" , getProtocol ( ) )
assertEquals ( expectedVirtualSize , getVirtualSize ( ) )
assertNull ( e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "" , result )
assertEquals ( expected , result )
assertEquals ( value , jsInterpreterSpy . get ( key ) )
assertEquals ( scriptEngineMock , interpreter )
assertThat ( props . getUseStartTLS ( ) ) . isTrue ( )
assertEquals ( false , props . getUseStartTLS ( ) )
assertEquals ( false , props . getUseStartTLS ( ) )
assertThat ( props . getUseAuth ( ) ) . isTrue ( )
assertThat ( props . getUseAuth ( ) ) . isFalse ( )
assertEquals ( false , props . getUseAuth ( ) )
assertThat ( props . getDebugMode ( ) ) . isTrue ( )
assertThat ( props . getDebugMode ( ) ) . isFalse ( )
assertEquals ( false , props . getDebugMode ( ) )
assertEquals ( "25" , smtpMailSender . getPort ( ) )
assertEquals ( String . valueOf ( port ) , smtpMailSender . getPort ( ) )
assertEquals ( null , smtpMailSender . getTimeout ( ) )
assertEquals ( timeout , smtpMailSender . getTimeout ( ) )
assertEquals ( null , smtpMailSender . getConnectionTimeout ( ) )
assertEquals ( connectionTimeout , smtpMailSender . getConnectionTimeout ( ) )
assertNull ( smtpMailSender . getUsername ( ) )
assertNull ( smtpMailSender . getStartTLSEnabled ( ) )
assertEquals ( null , smtpMailSender . getStartTLSEnabled ( ) )
assert smtpMailSender . getStartTLSEnabled ( ) == false
assertEquals ( "true" , smtpMailSender . get ( getConfigName ( SMTPMailSender . CONFIG_USE_STARTTLS ) ) )
assertNull ( message )
assertNotNull ( message )
assertNull ( returnOfPropertyThatDoesNotExist )
assertEquals ( expectedResult , result )
assertEquals ( "192.168.0.123" , result )
String assertStatement = "assertEquals(expected, result);"
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( systemId , result )
assertEquals ( expectedResult , result )
assertEquals ( expectedResult , result )
assertEquals ( expected , result )
assertEquals ( "expectedResult" , result )
assertEquals ( "Expected result" , expectedValue , result )
assertEquals ( "expectedValue" , result )
assertEquals ( "Expected MD5 digest" , "expectedDigestValue" , result )
assertEquals ( "Expected assertion message" , "expectedValue" , result )
assertEquals ( SHA256_CHECKSUM , DigestHelper . getHashValueFromChecksumValue ( SHA256_CHECKSUM ) )
assertEquals ( SHA256_NO_PREFIX_CHECKSUM , DigestHelper . getHashValueFromChecksumValue ( SHA256_NO_PREFIX_CHECKSUM ) )
assertEquals ( "scsi0" , vmDiskInfo . getControllerFromDeviceBusName ( ) )
assertEquals ( "cloud.public.untagged" , publicNetworkPrefix )
assertEquals ( "5.5" , getVcenterApiVersion ( serviceContext ) )
assertEquals ( null , getVcenterApiVersion ( null ) )
assertEquals ( false , featureSupportedVersion )
assertEquals ( true , featureSupportedVersion )
assertEquals ( "cloud.public.1234." , publicNetworkPrefix )
assertEquals ( "vmx-08" , vmxHwVersion )
assertEquals ( "vmx-11" , vmxHwVersion )
assertNotNull ( composePoolKey ( vCenterAddress , vCenterUserName ) )
assertEquals ( expectedSchema , schemasUtils . getBeamSchema ( ) )
schemasUtils . getBigQuerySchema ( ) . equals ( testSchema )
assertEquals ( "expectedValue" , csvResult )
assertEquals ( expectedCsv , csvResult )
assertThat ( extract ) . containsInAnyOrder ( KV . of ( "user1" , 10 ) , KV . of ( "user2" , 20 ) , KV . of ( "user3" , 30 ) )
assertEquals ( 1 , config . size ( ) )
assertEquals ( config . get ( PASSWORD ) , "password" )
assertEquals ( 0 , result . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 0 , result . apply ( Count . globally ( ) ) . get ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 1 , results . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertThat ( node . getOutputs ( ) , containsInAnyOrder ( equalTo ( first ) , equalTo ( second ) ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( coder + " is not deterministic because:\n\t" + reasonsStr )
assertEquals ( Read . class , replacement . getReplacementTransform ( ) . getClass ( ) )
assertThat ( emptyFlattened , empty ( ) )
assertEquals ( expected , actual )
assertThat ( result , equalTo ( output ) )
assertEquals ( name , delegate . getName ( ) )
assertThat ( delegate . getAdditionalInputs ( ) , equalTo ( additionalInputs ) )
assertThat ( delegate . getDefaultOutputCoder ( input , output ) , equalTo ( outputCoder ) )
assertThat ( windowedCoder , equalTo ( javaCoder ) )
assertThat ( kvCoder , equalTo ( coderAndComponents . getCoder ( ) ) )
assertEquals ( ParDo . SingleOutput . class , matcher . getMatchedClass ( ) )
assertEquals ( ParDo . SingleOutput . class , matcher . getMatchedClass ( ) )
assertEquals ( notParDo . getClass ( ) , ? ? ? matches ( "ParDo" ) )
assertEquals ( viewFn . getClass ( ) , matcher . getViewFnClass ( ) )
assertEquals ( viewFn . getClass ( ) , matcher . getViewFnClass ( ) )
assertEquals ( PTransformMatchers . createViewWithViewFn ( view . getViewFn ( ) . getClass ( ) ) , matcher )
assertEquals ( 0 , application . getOutputs ( ) . size ( ) )
assertEquals ( 1 , application . getOutputs ( ) . size ( ) )
assertEquals ( 0 , application . getOutputs ( ) . size ( ) )
assertEquals ( 1 , application . getOutputs ( ) . size ( ) )
assertEquals ( 2 , application . getInputs ( ) . size ( ) )
assertEquals ( 1 , application . getOutputs ( ) . size ( ) )
assertThat ( input , equalTo ( expectedInput ) )
assertEquals ( expectedValue , actualValue )
assertThat ( reserializedStruct , equalTo ( originalStruct ) )
assertThat ( deserialized , equalTo ( options ) )
assertThat ( deserialized , equalTo ( PipelineOptionsFactory . as ( TestDefaultOptions . class ) ) )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertThat ( components . toComponents ( ) . getPcollectionsOrThrow ( id ) , equalTo ( pCollection ) )
assertThat ( name , equalTo ( duplicateName ) )
assertEquals ( Collections . emptyMap ( ) , transform . getSideInputs ( ) )
assertThat ( toProtoAndBackTrigger , equalTo ( trigger ) )
assertEquals ( 1 , consumer . size ( ) )
assertThat ( proto , equalTo ( expectedProto ) )
assertThat ( proto , equalTo ( expectedProto ) )
assertEquals ( 2 , fieldAccessVisitor . getFieldAccesses ( ) . size ( ) )
assertEquals ( 1 , fieldAccessVisitor . getFieldAccessCount ( ) )
assertEquals ( 1 , fieldAccessVisitor . getFieldAccesses ( ) . size ( ) )
assertEquals ( ImmutableNetwork . copyOf ( network ) , createEmptyNetwork ( ) )
assertEquals ( primitiveComponents , QueryablePipeline . getPrimitiveTransformIds ( PipelineTranslation . toProto ( p ) . getComponents ( ) ) )
assertNotNull ( detectedResources )
assertEquals ( null , underTest . removeNextEventTimer ( ) )
assertEquals ( sampler . getLullDetectionCount ( ) , expectedLullDetectionCount )
assertThat ( sampler . lastSampleTimeMillis , equalTo ( 100L ) )
assertEquals ( null , getCurrentContainer ( ) )
assertEquals ( NUM_ELEMENTS , getCounterValue ( TestMetricsSink . getMetrics ( ) . get ( "myCounter" ) ) )
assertEquals ( 0 , urnToEnum . size ( ) )
assertEquals ( "anyName" , getName ( ) )
assertEquals ( "anyNamespace" , name . getNamespace ( ) )
assertEquals ( "External_0" , getNamespace ( ) )
assertEquals ( "External_0" , getNamespace ( ) )
assertEquals ( "unexpectedLabel" , testInput . getLabels ( ) . get ( MonitoringInfoConstants . Labels . PTRANSFORM ) )
assertEquals ( "CompletionCandidate[value, count]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[value, count]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( expected , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[null, 0]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[null, 0]" , trigger . toString ( ) )
assertThat ( finishedSet . getBitSet ( ) , is ( equalTo ( bitSet ) ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[null, 0]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
AssertPlaceHolder = "assertThat(machine, equalTo(TriggerStateMachines.stateMachineForTrigger(trigger)));"
assertNotNull ( machine )
assertEquals ( 2 , machine . getSubtriggersCount ( ) )
assertThat ( machine . getMainTrigger ( ) , equalTo ( subtrigger1 ) )
assertThat ( machine , equalTo ( expectedMachine ) )
result . getTransformExtracts ( ) . size ( ) , equalTo ( expectedSize )
assertThat ( result . getUncommittedElements ( ) , containsInAnyOrder ( equalTo ( WindowedValue . valueInGlobalWindow ( 2 ) ) ) )
result . getUncommittedElementsNull ( ) , equalTo ( null )
assertThat ( replacement . getInput ( ) , equalTo ( grouped ) )
assertThat ( watermarks . getSynchronizedProcessingInputTime ( ) ) . isEqualTo ( new Instant ( 12345L ) )
assertThat ( watermarks . getInputWatermark ( ) ) . isEqualTo ( new Instant ( 8765L ) )
assertThat ( watermarks . getOutputWatermark ( ) ) . isEqualTo ( new Instant ( 25525L ) )
AssertPlaceHolder = "assertThat(keyedBundle.getKey(), equalTo(key));"
assertThat ( keyedBundle . getKey ( ) , equalTo ( StructuralKey . of ( "foo" , StringUtf8Coder . of ( ) ) ) )
assertEquals ( 0 , mapFuture . get ( ) . size ( ) )
assertEquals ( 0 , TestUnboundedSource . readerClosedCount )
assertThat ( latch . getCount ( ) , equalTo ( 0 ) )
assertThat ( latch . getCount ( ) , equalTo ( 0L ) )
assertThat ( latch . getCount ( ) , equalTo ( 0L ) )
assertThat ( executor . getOutput ( ) , equalTo ( expectedOutput ) )
assertThat ( updatedSourceWatermark , equalTo ( expectedWatermark ) )
assertEquals ( output , fn . apply ( String . valueOf ( input ) ) )
assertEquals ( output , fn . apply ( String . valueOf ( input ) ) )
assertEquals ( output , fn . apply ( "input" ) )
assertEquals ( output , fn . apply ( String . valueOf ( input ) ) )
assertEquals ( output , fn . apply ( input ) )
assertEquals ( output , p . apply ( "input" ) )
assertEquals ( output , fn . apply ( "input" ) )
assertEquals ( Long . MAX_VALUE , getShutdownSourcesAfterIdleMs ( ) )
assertEquals ( 1000L , options . getCheckpointingInterval ( ) )
assertEquals ( 42L , options . getShutdownSourcesAfterIdleMs ( ) )
assertEquals ( 42L , options . getShutdownSourcesAfterIdleMs ( ) )
assertEquals ( "fileSystem" , getStateBackend ( ) )
assertEquals ( "rocksDB" , getStateBackend ( ) )
assertEquals ( "jobmanager" , config . getFlinkMaster ( ) )
assertEquals ( 100 , result . getWatermark ( ) )
assertEquals ( null , result . getState ( ) )
assertEquals ( PipelineResult . State . DONE , state )
assertEquals ( now , state . read ( ) )
assertThat ( FlinkKeyUtils . decodeKey ( byteBuffer , coder ) ) . isEqualTo ( key )
assertNull ( byteBuffer )
assertThat ( encodedKey . hasArray ( ) ) . isFalse ( )
assertThat ( fn . getOutput ( ) , equalTo ( expectedOutput ) )
assertThat ( fn . getOutput ( ) , equalTo ( expectedOutput ) )
assertThat ( fn . getSideOutput ( ) , contains ( equalTo ( KV . of ( 1 , 2 ) ) ) )
assertThat ( groupedValues . getTransform ( ) , is ( matcher ) )
assertNotNull ( getEnvironment ( environmentId ) )
assertThat ( options . getJobName ( ) , equalTo ( mixedCase . toLowerCase ( ) ) )
assertNotNull ( job . getJobId ( ) )
unconsumedSeenAsInput . get ( )
assertNotNull ( job . getJobId ( ) )
assertEquals ( "gs://bucket/object" , options . getStagingLocation ( ) )
assertEquals ( expectedReason . get ( i ) , e . getMessage ( ) )
assertEquals ( name , options . getJobName ( ) )
assertEquals ( null , batchOptions . getGcsUploadBufferSizeBytes ( ) )
assertEquals ( DataflowRunner . class , options . getRunner ( ) )
assertThat ( options . getSdkContainerImage ( ) , equalTo ( testCase ) )
assertThrows ( IOException . class , ( ) -> job . getJobMetrics ( anyString ( ) ) )
assertEquals ( "TestJobName" , options . getJobName ( ) )
assertNull ( toState ( null ) )
assertNotNull ( toState ( "JOB_STATE_UNKNOWN" ) )
onNextWasCalled . get ( )
assertEquals ( true , onCompletedWasCalled . get ( ) )
onErrorWasCalled . get ( )
assertNotNull ( tracker )
assertThat ( tracker . getCurrentOperationCountedInNextSample ( ) , equalTo ( 20 ) )
assertEquals ( ExecutionState . START , getCurrentState ( ) )
assertEquals ( ExecutionState . START , getCurrentState ( ) )
assertEquals ( ExecutionState . FINISH , getCurrentState ( ) )
assertEquals ( ExecutionState . FINISH , getCurrentState ( ) )
assertNotNull ( joinArgsMap . get ( tag ) )
assertEquals ( "should have thrown an exception" , exn . getMessage ( ) )
assertEquals ( windowingStrategy . getWindowFn ( ) , windowFn )
assertEquals ( 1 , 1 )
assertEquals ( substring , record . getMessage ( ) )
assertEquals ( EMPTY_INSTANCE , saver . getReader ( ) )
assertEquals ( 1 , saver . getLogs ( ) . size ( ) )
assertEquals ( true , options . isStreaming ( ) )
assertThat ( result , equalTo ( expectedResult ) )
assertNull ( orderedListState . read ( ) )
assertEquals ( false , result . read ( ) )
assertThat ( result . read ( ) , is ( true ) )
assertNull ( orderedList . read ( ) )
assertEquals ( 0 , bag . size ( ) )
assertEquals ( false , result . read ( ) )
assertEquals ( true , result . read ( ) )
assertEquals ( Collections . emptyList ( ) , bag . read ( ) )
AssertPlaceHolder = "assertEquals(null, bag.read());"
assertEquals ( "Hello" , value . read ( ) )
assertEquals ( null , value . read ( ) )
assertEquals ( "World" , value . read ( ) )
assertEquals ( "" , value . read ( ) )
AssertPlaceHolder = assertThat ( workStatus , equalTo ( null ) )
AssertPlaceHolder = assertThat ( workStatus , equalTo ( null ) )
statusClient . populateMetricUpdates ( status )
assertEquals ( operand , counterSet . getResult ( ) )
AssertPlaceHolder = "assertThat(c1, equalTo(cn2));"
assertNotSame ( c1 , c1Dup )
assertNull ( empty ( ) )
assertEquals ( "" , network . toString ( ) )
assertEquals ( param , OperationNode . create ( param ) . getOperation ( ) )
assertThat ( underTest . currentScope ( ) . getName ( ) , equalTo ( "attribute" ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThrows ( IOException . class , ( ) -> reader . read ( null , null ) )
assertEquals ( 10000 , counter . getAggregate ( ) )
assertEquals ( 10 , counter . getAggregate ( ) )
assertEquals ( expected . get ( n ) , counter . getAggregate ( ) )
assertEquals ( op . isAborted ( ) , true )
assertEquals ( mockWriter , writeOperation . getWriter ( ) )
assertEquals ( null , writeOperation . getStarted ( ) )
assertEquals ( "foo" , getUrl ( ) . getHost ( ) )
assertEquals ( "foo:65535" , urlFactoryWithPortSupplier ( ) . getUrl ( ) . toString ( ) )
assertEquals ( id , response . getInstructionId ( ) )
assertThat ( e . getMessage ( ) , containsString ( "Error response from daemon" ) )
assertEquals ( "1 is not deterministic because:\n\tasfasfls is not a valid executable" , e . getMessage ( ) )
assertEquals ( false , process . getUnderlyingProcess ( ) . isAlive ( ) )
assertEquals ( client , stub . workerStatus ( mockObserver ) )
assertEquals ( "status" , workerStatus . get ( ) . getStatusInfo ( ) )
assertEquals ( "error" , workerStatus . get ( ) . getError ( ) )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertThat ( testSpec . getCoder ( ) . getNonDeterministic ( ) , is ( false ) )
assertEquals ( PipelineResult . State . DONE , pipelineResult . getState ( ) )
assertNull ( runner . getResult ( ) )
assertEquals ( JobApi . JobState . Enum . CANCELLED , jobInvocation . getState ( ) )
assertEquals ( JobApi . JobState . Enum . FAILED , jobInvocation . getState ( ) )
assertEquals ( "job" , manifest . getMainAttributes ( ) . getValue ( "Main-Class" ) )
assertEquals ( "job" , manifest . getMainAttributes ( ) . getValue ( "Main-Class" ) )
assertNotSame ( key , getKey ( "team" ) )
assertEquals ( original , StructuralKey . of ( 1234 , VarIntCoder . of ( ) ) )
assertThat ( key , equalTo ( otherKey ) )
assertThat ( key , not ( equalTo ( otherKey ) ) )
assertEquals ( true , closed . get ( ) )
assertTrue ( closed . get ( ) )
"<AssertPlaceHolder>"
assertEquals ( 1L , getOnlyExecutableStage ( pipeline ) . getCreateOf ( ) . getElements ( ) . get ( 0 ) . getKey ( ) )
assertEquals ( 3 , pipeline . getTransforms ( ) . size ( ) )
assertEquals ( 1 , getOnlyExecutableStage ( pipeline ) . getTransformsCount ( ) )
assertEquals ( "abcd" , id )
assertEquals ( ImmutableList . of ( KV . of ( 1 , 9 ) , KV . of ( 2 , 12 ) ) , input )
assertEquals ( dataset , createDataset ( data , fromBeamCoder ( PrivateString . CODER ) ) )
assertEquals ( ImmutableList . of ( KV . of ( "a" , 55 ) , KV . of ( "b" , 0 ) ) , input )
assertThat ( dataset , equalTo ( expectedDataset ) )
assertEquals ( dataset . count ( ) , 2 )
assertThat ( dataset , equalTo ( expectedDataset ) )
assertThat ( dataset . get ( 0 ) , equalTo ( collection ) )
assertThat ( dataset . get ( 0 ) , equalTo ( data . get ( 0 ) ) )
assertThat ( dataset , contains ( tuple ( 0 , equalTo ( BASIC_CASES . get ( coders . get ( 0 ) ) . get ( 0 ) ) ) ) )
assertEquals ( 0 , result . getFailedAssertCount ( ) )
assertEquals ( false , TestKryoRegistrator . wasInitiated )
assertEquals ( false , TestKryoRegistrator . wasInitiated )
assertEquals ( 21L , getCounterValue ( pipeline . getAggregatorValue ( "CountingDoFn.count" ) ) )
assertThat ( p , equalTo ( expectedPipeline ) )
assertEquals ( "CompletionCandidate[value, count]" , pipeline . toString ( ) )
assertEquals ( 4 , output . get ( tag ) . size ( ) )
assertEquals ( AVRO_SPECIFIC_RECORD , coder . decode ( coder . encode ( AVRO_SPECIFIC_RECORD ) ) )
assertEquals ( message , e . getMessage ( ) )
assertEquals ( expected , coder . getEncodedTypeDescriptor ( ) )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertEquals ( expected , actual )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertThat ( decoded , equalTo ( DynamicMessage . parseFrom ( input ) ) )
assertArrayEquals ( encodedSlow , encodedFast )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertEquals ( expected , actual )
assertNotNull ( registry . getCoder ( MyValue . class ) )
assertThat ( registry . getCoder ( mapToken ) , instanceOf ( CommonCoder . class ) )
assertEquals ( setToken , registry . getDefaultCoder ( setToken ) )
assertThat ( registry . getCoder ( setToken ) , instanceOf ( CommonCoder . class ) )
assertNotNull ( bazCoder )
assertThat ( fooCoder , instanceOf ( CsvRecordCoder . class ) )
assertEquals ( getCoder ( ) , registry . getCoder ( type ) )
assertEquals ( expectedMessage , exception . getMessage ( ) )
IsDynamicMessageEqual expected = equalTo ( expectedDynamicMessage )
assertThat ( testEncodedTypeDescriptor ( ) , equalTo ( expectedTypeDescriptor ) )
assertEquals ( KV . of ( "key" , 3L ) , CoderUtils . decodeFromByteArray ( coder , encoded2 ) )
assertEquals ( typeDescriptor . getEncodedType ( ) , "Ljava/util/Set<Ljava/lang/Integer;>;" )
assertThat ( typeDescriptor . getEncodedTypeDescriptor ( ) , equalTo ( TypeDescriptor . createParameterizedTypeDescriptor ( Deque . class , Integer . class ) ) )
assertEquals ( expected , actual )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertArrayEquals ( sortedEncodings . toArray ( ) , encodings . toArray ( ) )
assertEquals ( expected , actual )
assertThat ( typeDescriptor . getEncodedTypeDescriptor ( ) , equalTo ( TypeDescriptor . createParameterizedTypeDescriptor ( Iterable . class , Integer . class ) ) )
assertEquals ( typeDescriptor . getEncodedType ( ) , "Lcom/example/KV<Ljava/lang/String;Ljava/lang/Integer;>;" )
assertEquals ( expectedSize , actualSize )
assertEquals ( 0 , coder . getEncodedElementCount ( ) )
assertThat ( typeDescriptor . getEncodedTypeDescriptor ( ) , equalTo ( TypeDescriptor . createListTypeDescriptor ( Integer . class ) ) )
assertEquals ( typeDescriptor . getGenericType ( ) , new TypeToken < Map < Integer , String > > ( ) { } . getType ( ) )
assertThat ( decoded , containsInAnyOrder ( records . toArray ( ) ) )
assertNull ( encodedBytes )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertEquals ( getCodec ( ) . getClass ( ) , write . getCodec ( ) . getClass ( ) )
assertEquals ( getCodec ( ) , write . getCodec ( ) )
assertEquals ( expected , metadata . getRecords ( ) )
assertEquals ( 5 , read . getPipelineOptions ( ) . getMaxNumRecords ( ) )
assertEquals ( "io.ClassLoaderFileSystem.class" , resource . getFilename ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , input . apply ( Count . globally ( ) ) . apply ( Sum . longsGlobally ( ) ) . get ( ) )
assertFileContains ( expected , expectedTempFile )
assertEquals ( "Expected output" , expectedOutput , source . toString ( ) )
assertEquals ( 0 , input . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( 0 , input . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( expectedRuntimeMillis , Duration . between ( startTime , endTime ) . toMillis ( ) )
assertEquals ( expected , data )
assertEquals ( 0 , Files . list ( pattern ) . count ( ) )
assertEquals ( isDirectory , ? ? ? )
assertEquals ( codecFactory , serdeC )
assertEquals ( codecFactory , serdeC )
assertNull ( codec . toString ( ) )
assertArrayEquals ( data , buffer . array ( ) )
assertEquals ( "Expected output" , expectedOutput , actualOutput )
assertEquals ( to , getTo ( ) )
assertEquals ( 0.0 , rows , 0.001 )
assertEquals ( null , rows )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , new CompletionCandidate ( < expected value > , < expected count > ) . toString ( ) )
assertEquals ( expected , tracker . toString ( ) )
assertNotNull ( getCurrentContainer ( ) )
assertEquals ( 5L , container . getDistribution ( NS , NAME ) . getCount ( ) )
assertEquals ( 2L , counter . getCount ( ) )
assertEquals ( "expectedAppName" , options . getAppName ( ) )
assertEquals ( "expectedValue" , options . getObject ( ) )
assertEquals ( "testAppName" , options . getAppName ( ) )
assertEquals ( true , options . isStreaming ( ) )
AssertPlaceHolder = "Assert.assertTrue(options.getBoolean(fieldName));"
assertEquals ( 12345678762L , getLongValue ( ) )
assertEquals ( options , PipelineOptionsFactory . fromArgs ( args ) . as ( Objects . class ) . get ( ) )
assertEquals ( null , options )
assertNull ( getString ( fieldName ) )
The suggested  assertion is  to check if the value returned by the ` options . getString  ( fieldName ) ` method is null .
assertEquals ( "testValue" , options . getJacksonIncompatible ( ) )
assertNotNull ( options )
assertEquals ( ComplexType2Deserializer1 . class , options . getComplexType ( ) . getClass ( ) )
assertEquals ( "test is not deterministic because:\n\t" + reasonsStr , thrown . getMessage ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> PipelineOptionsFactory . fromArgs ( "--string=test" ) . as ( InconsistentJsonSerializeAttributes . class ) )
options . as ( BaseTestOptions . class )
assertEquals ( "bar" , getEnvironmentOption ( options , "foo" ) )
assertEquals ( "bar=baz" , getEnvironmentOption ( options , "foo" ) )
assertEquals ( "" , getEnvironmentOption ( options , "someOption" ) )
assertEquals ( "" , getEnvironmentOption ( options , "missingOption" ) )
assertEquals ( "parentValue" , extended . getString ( "parentValue" ) )
assertEquals ( "parentValue" , simple . getString ( "fieldName" ) )
assertEquals ( "subClassValue" , extended2 . getExtended ( ) )
assertEquals ( "parentValue" , sibling . getString ( "fieldName" ) )
assertEquals ( options , serializeDeserialize ( options . getClass ( ) , options ) )
assertEquals ( options . getComplexType ( ) , options2 . getComplexType ( ) )
assertEquals ( "TestValue" , options2 . getValue ( ) )
assertEquals ( "TestString" , options2 . getValue ( ) )
assertEquals ( options . getValue ( ) , options2 . getValue ( ) )
assertEquals ( 100 , value )
assertEquals ( options . getJacksonObject ( ) , deserializedOptions . getJacksonObject ( ) )
assertNotNull ( handler . getOptionNameFromMethod ( ) )
assertEquals ( "bar" , runtime . getString ( "string" ) )
assertNull ( runtime . getString ( fieldName ) )
assertEquals ( kls , options . getRunner ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( "value!" , value . getStr ( ) )
assertEquals ( "another value!" , row . getValue ( ) )
assertEquals ( schemaFor ( TypeDescriptor . forType ( YourClass . class ) ) , JavaBeanUtils . schemaFromJavaBeanClass ( YourClass . class , AbstractGetterTypeSupplier . INSTANCE ) )
assertNotNull ( schemaFor ( typeDescriptor ) )
assertEquals ( expectedValue , toRow . apply ( testAvro ) )
assertEquals ( expectedValue , fromRow . apply ( row ) )
assertEquals ( expectedValue , toRow . apply ( genericRecord ) )
assertEquals ( expectedValue , fromRow . apply ( row ) )
toRow . apply ( pojo ) . equals ( expectedRow )
assertEquals ( expectedValue , fromRow . apply ( row ) )
AssertPlaceHolder = "assertEquals(fieldAccessDescriptor, FieldAccessDescriptor.withAllFields());"
assertThat ( fieldAccessDescriptor . getFieldNames ( ) ) . containsExactly ( "field0" , "field2" )
assertThat ( fieldAccessDescriptor . getFieldIds ( ) ) . containsExactly ( 1 , 3 )
assertEquals ( "*" , fieldAccessDescriptor . getFieldNames ( ) )
assertThat ( fieldAccessDescriptor . getFieldNames ( ) )
assertEquals ( null , bean . getValue ( ) )
assertEquals ( expectedRow , converted )
assertSchemaEquivalent ( expectedArrayOfByteArray , converted )
assertThat ( pojo . getArray ( ) , is ( listOfLists ) )
assertEquals ( null , row . getValue ( ) )
assertEquals ( defaultValue , getValueOrDefault ( optionName , defaultValue ) )
assertEquals ( setOptionsSet1 ( ) . build ( ) , getField ( ) . getOptions ( ) )
assertNotNull ( getField ( ) )
assertEquals ( getSchema ( ) , registry . getSchema ( "test" ) )
assertEquals ( registry . getDefaultSchema ( ) , getSchema ( ) )
assertThat ( decodedSchema , equalTo ( schema ) )
assertThat ( reencodedSchemaProto , equalTo ( SchemaTranslation . schemaToProto ( decodedSchema , true ) ) )
assertThat ( decodedRow , equalTo ( row ) )
assertEquals ( SERIALIZED , row )
row . getBigDecimal ( )
assertEquals ( resultBytes . length , 5 )
assertEquals ( resultBytes . length , 8 )
assertEquals ( "123" , resultString )
assertNotNull ( resultString )
assertEquals ( output , new AutoValue_OutputDeduplicator_DeduplicationResult ( components , introducedTransforms , stages , unfused ) )
assertThat ( all ) . isTrue ( )
assertEquals ( 0 , errors . size ( ) )
assertEquals ( 1L , longs . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) . longValue ( ) )
assertThat ( grouped , containsSingleIterable ( elements , ? ? ? ) )
assertEquals ( 1 , rows . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( 0 , rows . apply ( Count . globally ( ) ) . getValue ( ) . longValue ( ) )
assertEquals ( 0 , rows . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 1 , rows . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( 1 , rows . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( 0 , rows . apply ( Count . globally ( ) ) . getValue ( ) . longValue ( ) )
selected . apply ( AssertThat . < PrimitiveArray > containsInAnyOrder ( PrimitiveArray . create ( ) ) )
assertEquals ( 1 , selected . apply ( Count . globally ( ) ) . getValue ( ) )
selected . apply ( AssertThat . < PartialRowSingleMap > containsInAnyOrder (
assertThat ( inputConfig , equalTo ( expectedConfig ) )
assertEquals ( expectedBeamField , beamField )
assertEquals ( convertedSchema . toString ( ) , validatedSchema . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( schema , StaticSchemaInference . schemaFromClass ( SimplePOJO . class , JavaFieldTypeSupplier . INSTANCE ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( "key: testKey, value: 10" , focalMethod . apply ( new KV < > ( "testKey" , 10 ) ) )
assertEquals ( "key: testKey, value: 10" , focalMethod . apply ( new KV < > ( "testKey" , 10 ) ) )
assertThat ( context . window ( ) , equalTo ( window ) )
assertEquals ( false , sawEmpty . get ( ) )
assertEquals ( true , sawSingleShard . get ( ) )
assertEquals ( false , sawManyShards . get ( ) )
assertEquals ( true , matcherUsed . get ( ) )
assertEquals ( CrashingRunner . class , opts . getRunner ( ) )
expectedLogs . verifyNotLogged ( messageExpected )
assertEquals ( 0 , vals . apply ( Count . globally ( ) ) . getValue ( ) )
Given the  provided code snippet , the  suggested assertion  that will  go in "<AssertPlaceHolder>" is :
assertEquals ( ImmutableList . of ( 4 , 2 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 4 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 4 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 8 , 4 , 2 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 8 , 4 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 8 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( 8 , 4 , 2 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( Arrays . asList ( 8 , 4 , 1 ) , Lists . newArrayList ( extractor . apply ( onlyOnTime ) ) )
assertEquals ( ImmutableList . of ( ) , extractor . apply ( noPanes ) )
< AssertPlaceHolder >
assertEquals ( unfusible , fusible )
assertEquals ( 100000000L , endTime - startTime )
assertEquals ( 4 , output . apply ( Sum . integersPerKey ( ) ) )
assertEquals ( ImmutableList . of ( KV . of ( "a" , 4 ) , KV . of ( "b" , 2 ) , KV . of ( "c" , 4 ) ) , output )
assertEquals ( 4 , output . apply ( Sum . integersGlobally ( ) ) . getValue ( ) )
assertEquals ( 4 , output . apply ( Sum . ofIntegersPerKey ( ) ) )
assertEquals ( EMPTY_INSTANCE , displayData . getSideInputReader ( ) )
assertEquals ( 0 , mean . apply ( Sum . ofDoubles ( ) ) . getValue ( ) , 0.0001 )
assertEquals ( 0L , output . apply ( Sum . longsPerKey ( ) ) . get ( "" ) )
output . apply ( ParDo . of ( new AssertThat < > ( Matchers . empty ( ) ) ) )
assertThat ( values . getCoder ( ) , equalTo ( coder ) )
assertThat ( values . getCoder ( ) , equalTo ( coder ) )
assertThat ( values . getCoder ( ) , equalTo ( coder ) )
assertEquals ( STRING_SCHEMA , out . getCoder ( ) . getSchema ( ) )
assertEquals ( coder . encode ( element ) , coder . decode ( coder . encode ( element ) ) )
assertEquals ( defaultCoder , equalTo ( coder ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingleton ( ) . getValue ( ) . intValue ( ) )
displayData . assertContains ( "expectedValue" )
output . apply ( ParDo . of ( new AssertThat < > ( Matchers . empty ( ) ) )
assertEquals ( FlatMapElements . via ( simpleFn ) , simpleMap )
assertEquals ( inferableMap . getFn ( ) , inferableFn )
assertEquals ( ImmutableList . of ( 1 , - 1 ) , result . getOutput ( result . getOutputTags ( ) . get ( 0 ) ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . get ( ) )
assertThat ( output , empty ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . get ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( null , extractOutput ( createAccumulator ( ) ) )
assertEquals ( 0 , createAccumulator ( ) . getValue ( ) )
assertEquals ( 3 , input . getValue ( ) )
input . getValue ( ) == 1234L
assertEquals ( expectedSum , accumulator . sum )
assertEquals ( expectedSum , accumulator . sum )
assertEquals ( null , input . getValue ( ) )
assertEquals ( expectedAccum , merged )
merged . sum += accumulator . sum
assertEquals ( 0 , merged . sum )
assertEquals ( 0 , res )
assertEquals ( expectedValue , actualValue )
assertEquals ( 0.0 , extractOutput ( accum ) , 0.001 )
assertNull ( accum . getValue ( ) )
assertEquals ( 3 , output . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( inputCoder , output . getCoder ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( processFn , processMap . getProcessFn ( ) )
assertEquals ( simpleMap , MapElements . via ( simpleFn ) )
assertEquals ( inferableMap , MapElements . via ( inferableFn ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
max . apply ( 1 )
assertEquals ( min , ? ? ? )
assertThat ( displayData , notNullValue ( ) )
assertEquals ( 3 , output . apply ( Sum . integersGlobally ( ) ) . getValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) . intValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingleton ( ) . getValue ( ) . intValue ( ) )
assertEquals ( CODER , ? ? ? )
assertEquals ( 3 , inputs . size ( ) )
assertEquals ( expected , name )
assertEquals ( "expectedName" , name )
assertEquals ( "expectedName" , output . getName ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . asSingletonView ( ) . getValue ( ) . intValue ( ) )
assertEquals ( 1 , output . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( 0 ) . longValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) . intValue ( ) )
assertEquals ( "expectedValue" , c . element ( ) . getValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) . intValue ( ) )
fail ( "Expected no matches, but found: " + c . element ( ) )
assertNull ( c . element ( ) )
assertEquals ( "b" , output . getValue ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) . intValue ( ) )
assertEquals ( "a b c" , output )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . getValue ( ) . intValue ( ) )
assertEquals ( 20 , output . apply ( Count . globally ( ) ) )
assertEquals ( "expectedName" , getName ( ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertNotNull ( state )
assertEquals ( "expectedValue" , CsvRecordCoder . of ( ) . getName ( ) )
assertEquals ( none , DisplayData . none ( ) )
assertThat ( item , matchesAllOf )
root . assertEquals ( expectedRoot )
assertEquals ( "a/b/c" , path . toString ( ) )
assertEquals ( "foo" , data . get ( "bar" ) )
assertEquals ( data , serData )
assertEquals ( "External_0" , item . getNamespace ( ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( ProcessContinuation . resume ( ) , fn . processElement ( mockProcessContext , null ) )
assertEquals ( 1 , 1 )
assertEquals ( true , executionSamplerFuture . isCancelled ( ) )
assertEquals ( false , executionSamplerFuture . isCancelled ( ) )
assertEquals ( true , executionSamplerFuture . isCancelled ( ) )
assertEquals ( true , executionSamplerFuture . isCancelled ( ) )
assertEquals ( true , executionSamplerFuture . isCancelled ( ) )
assertThat ( fn . status , equalTo ( "OK now" ) )
assertEquals ( 0 , matchedWords . get ( ) )
assertEquals ( 0 , matchedWords . getCount ( ) )
assertEquals ( sig . processElement ( ) . getOutputReceiver ( ) . getClass ( ) , OutputReceiverParameter . class )
assertEquals ( 0 , matchedWords . getCount ( ) )
assertThat ( sig . getOnWindowExpirationMethods ( ) ) . hasSize ( 1 )
assertEquals ( "OK now" , fn . status )
tracker . checkDone ( )
tracker . checkDone ( )
assertThat ( tracker . getFractionConsumed ( ) ) . isEqualTo ( 0.0 )
assertKeyRangeEqualExceptPadding ( ByteKeyRange . of ( ByteKey . of ( 0x40 ) , ByteKey . of ( 0x80 ) ) , res . getPrimary ( ) )
assertEquals ( 0 , tracker . getSplitPoints ( ) . size ( ) )
assertNotNull ( tracker . trySplit ( 0 ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[value, count]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[value, count]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( expected , trigger . toString ( ) )
// suggested assertion: assertNotEquals(0, continuationTriggers.size())
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[null, 0]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[null, 0]" , trigger . toString ( ) )
< AssertPlaceHolder >
assertThat ( truncatedWindow , equalTo ( windowFn . assignWindow ( endOfGlobalWindow . minus ( Duration . millis ( 1 ) ) ) ) )
// suggested assertion: assertNotEquals(0, continuationTriggers.size())
assertEquals ( "CompletionCandidate[t1, t2]" , trigger . toString ( ) )
assertEquals ( "innerTrigger" , trigger . toString ( ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , trigger . toString ( ) )
assertEquals ( session . getGapDuration ( ) , gapDuration )
foundAssign . set ( true )
assertNotNull ( node . getTransform ( ) )
assertThat ( c . element ( ) , equalTo ( KV . of ( 0 , Arrays . asList ( "hello" , "goodbye" ) ) ) )
assertEquals ( "a:3:20:[1970-01-01T00:00:00Z..1970-01-01T00:00:00.010Z]" , output ( "a" , 3 , 20 , 0 , 10 ) )
assertEquals ( 0 , output . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
f . assertContains ( 50 , 50 )
f . assertCount ( lost )
assertEquals ( expected , result )
assertEquals ( 10 , fnWithContext . extractOutput ( accum , nullContext ) )
assertEquals ( 0 , shardedFile . getNumberOfShards ( ) )
assertThat ( cumulativeBackoffMillis , equalTo ( expectedCumulativeBackoffMillis ) )
assertThat ( histogramData . getOutOfRangeWarning ( ) , equalTo ( DynamicMessage . newBuilder ( ) . build ( ) ) )
assertThat ( histogramData , equalTo ( HistogramData . linear ( 0 , 0.2 , 50 ) ) )
assertEquals ( "hello world!" , tag . getId ( ) )
assertEquals ( "hello world!" , tag . getArg ( String . class ) )
assertEquals ( 42 , result )
assertEquals ( 42 , result . get ( ) )
assertEquals ( 2 , results . toCompletableFuture ( ) . get ( ) . size ( ) )
f . assertValue ( 0 , 0 )
f . add ( i , 1 )
assertEquals ( 1 , f . get ( 0 ) )
assertEquals ( "Expected result" , "<AssertPlaceHolder>" , result )
assertEquals ( "Anonymous" , approximateSimpleName ( object ) )
assertEquals ( "Anonymous" , approximateSimpleName ( inner ) )
assert overriddenName . getName ( ) . equals ( "CUSTOM_NAME" )
assertEquals ( "Object" , approximateSimpleName ( overriddenName . getClass ( ) , true ) )
assertEquals ( 0 , shardedFile . getNumberOfShards ( ) )
parsedRow , equalTo  ( expectedRow )
assertThat ( parsedRow , equalTo ( row ) )
assertThat ( parsedRow , equalTo ( row ) )
assertThat ( parsedRow , equalTo ( row ) )
assertThat ( parsedRow , equalTo ( row ) )
assertEquals ( 1 , callCount . get ( ) )
assertSame ( existing , wrapped )
assertNull ( wrapped )
assertNull ( wrapped . getCause ( ) )
assertThat ( value , equalTo ( expectedValue ) )
assertThat ( subDir2 ) . exists ( )
assertThat ( subDirEmpty ) . exists ( )
assertThat ( zipDir ) . exists ( )
assertNotNull ( classLoader [ 0 ] )
assertEquals ( comparable , forThrowable ( throwable ) )
assertEquals ( 3 , list . size ( ) )
assertThat ( pCollection , containsInAnyOrder ( expectedRows ) )
assertEquals ( 0 , tag . length ( ) )
assertEquals ( 1 , pCollection . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( EMPTY_INSTANCE , tag )
assertEquals ( data , row . getValue ( "map" ) )
assertThat ( row . getMap ( ) . get ( 3 ) ) . isNull ( )
assertThat ( row . getMap ( ) . get ( 1 ) ) . containsExactly ( "value1" )
assertThat ( row . getMap ( ) . get ( 1 ) . get ( 1 ) ) . isEqualTo ( "value1" )
assertThat ( row . getMap ( ) . get ( 4 ) . get ( 11 ) ) . isNull ( )
assertThat ( row . getMap ( ) . size ( ) ) . isEqualTo ( 2 )
assertEquals ( expectedRow , row )
assertEquals ( expectedRow , modifiedRow )
assertArrayEquals ( byteArray , getLogicalTypeValue ( "char" , byte [ ] . class ) )
tsv . getTimestamp ( )
assertEquals ( null , tsv . getValue ( ) )
assertEquals ( descriptor . getType ( ) , token . getType ( ) )
assertEquals ( getCoder ( ) , typedOutputTag . getCoder ( ) )
assertEquals ( getCoder ( ) , typedOutputTag . getCoder ( ) )
assertEquals ( expected , arrowSchema )
assertEquals ( message , e . getMessage ( ) )
assertEquals ( expected , metadata . getRecords ( ) )
assertEquals ( "expectedValue" , count . getName ( ) )
assertEquals ( "Distinct" , distinct . getName ( ) )
assertEquals ( "" , filter . getName ( ) )
assertEquals ( "expectedValue" , map . getName ( ) )
assertEquals ( 100 , map . getAllowedTimestampSkew ( ) . toMillis ( ) )
assertEquals ( allowedSkew , map . getAllowedTimestampSkew ( ) )
assertEquals ( "Join" , join . getName ( ) )
assertEquals ( Join . Type . LEFT , join . getType ( ) )
assertEquals ( expectedValue , element . getValue ( ) )
assertEquals ( Join . Type . FULL , join . getType ( ) )
assertEquals ( "expectedName" , map . getName ( ) )
assertOperatorTypeAwareness ( map , outputType )
assertEquals ( "expectedValue" , reduce . getName ( ) )
assertEquals ( FixedWindows . of ( Duration . standardHours ( 1 ) ) , reduce . getWindow ( ) )
assertEquals ( "expectedValue" , sum . getName ( ) )
assertEquals ( "expectedValue" , tpk . getName ( ) )
assertEquals ( "unioned" , union . getName ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( 45L , output . apply ( Sum . longsPerKey ( ) ) . get ( 0 ) . getValue ( ) )
assertEquals ( provider . getTranslator ( FlatMap . class ) , new FlatMapTranslator < > ( ) )
assertEquals ( compositeProvider . getProviders ( ) . size ( ) , 2 )
assertEquals ( 3 , result . apply ( Count . globally ( ) ) . getValue ( ) )
assertEquals ( builded , ? ? ? )
assertEquals ( ImmutableMap . of ( ) , projectFactory . getEnvironment ( ) )
assertEquals ( tempLocation , options . getGcpTempLocation ( ) )
assertEquals ( "Custom Error Msg" , errorMessage )
assertEquals ( "Custom Error Msg" , errorMessage )
assertEquals ( "Custom Error Msg" , errorMessage )
assertEquals ( "Custom Error Msg" , errorMessage )
assertEquals ( GcpUserCredentialsFactory . class , pipelineOptions . getGcpCredential ( ) . getClass ( ) )
assertEquals ( expectedValue , util . getUploadBufferSizeBytes ( ) )
assertEquals ( 12345 , pipelineOptions . getGcsUploadBufferSizeBytes ( ) )
assertNotNull ( results )
assertEquals ( mockChannel , mockStorage . create ( any ( ) , any ( ) ) )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( "gs://some_bucket/some/file.txt" , path . toString ( ) )
assertEquals ( "gs://bucket2/d" , d . toString ( ) )
assertEquals ( GcsPath . fromComponents ( "bucket" , "a/b" ) , b )
failedElements -> assertThat ( failedElements ) . isEmpty ( )
assertThat ( result . getFailures ( ) . size ( ) , is ( equalTo ( INVALID_JSONS . size ( ) ) ) )
assertThat ( result . getFailures ( ) . size ( ) , equalTo ( INVALID_JSONS . size ( ) ) )
assertEquals ( 0 , result . failures ( ) . size ( ) )
AssertPlaceHolder = "Assert.assertEquals(0, result.failures().apply(Count.globally()));"
assertThat ( result . getFailures ( ) . size ( ) , is ( equalTo ( 2 ) ) )
assertThat ( result . getFailures ( ) ) . isEmpty ( )
assertEquals ( Pipeline . PipelineExecutionException . class , exception . getClass ( ) )
assertEquals ( provider . getOptions ( ) , pipeline . getOptions ( ) )
assertNotNull ( domainFromInt32 )
assertNotNull ( domain . getDescriptor ( ) )
assertEquals ( schema , schemaProvider . getSchema ( ) )
toRow . apply ( toDynamic ( Primitive . getDefaultInstance ( ) ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( RepeatPrimitive . getDescriptor ( ) , schemaProvider . getDescriptor ( ) )
assertEquals ( toRow . apply ( toDynamic ( message ) ) , expectedRow )
assertEquals ( expectedValue , actualValue )
assertEquals ( toRow . apply ( toDynamic ( null ) ) , null )
assertEquals ( expected , actual )
assertEquals ( schema , schemaProvider . getSchema ( ) )
toRow . apply ( toDynamic ( message ) )
assertEquals ( proto , ? ? ? )
toRow . apply ( toDynamic ( MapPrimitive . getDefaultInstance ( ) ) )
assertEquals ( proto , MapPrimitive . newBuilder ( ) . build ( ) )
assertEquals ( schema , schemaProvider . getSchema ( ) )
assertEquals ( toRow . apply ( toDynamic ( message ) ) , expectedRow )
assertEquals ( proto , ? ? ? )
AssertPlaceHolder = "Assert.assertTrue(schema instanceof Schema);"
assertEquals ( ReversedOneOf . getDescriptor ( ) , schemaProvider . getDescriptor ( ) )
assertEquals ( 1 , schema . getFields ( ) . size ( ) )
assertEquals ( schema , schemaProvider . getSchema ( ) )
assertEquals ( expectedRow , toRow . apply ( toDynamic ( message ) ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( 1 , schema . getFields ( ) . size ( ) )
toRow . apply ( toDynamic ( EnumMessage . getDefaultInstance ( ) ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , toString ( ) )
assertEquals ( schema , schemaProvider . getSchema ( ) )
toRow . apply ( toDynamic ( WktMessage . getDefaultInstance ( ) ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , toString ( ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( TypeDescriptor . of ( Primitive . class ) . getRawType ( ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( 16 , toRow . apply ( new Primitive ( ) ) )
assertEquals ( 16 , fromRow . apply ( row ) )
AssertPlaceHolder = "Assert.assertNotNull(schema);"
assertEquals ( 16 , toRow . apply ( OptionalPrimitive . newBuilder ( ) . setValue ( 4 ) . build ( ) ) . getIntValue ( ) )
assertEquals ( OptionalPrimitive . newBuilder ( ) . setField1 ( 16 ) . build ( ) , fromRow . apply ( Row . withSchema ( schema ) . addValues ( "input" ) . build ( ) ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( typeDescriptor . getRawType ( ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( 16 , toRow . apply ( RequiredPrimitive . newBuilder ( ) . build ( ) ) . get ( "fieldName" ) )
assertEquals ( 16 , fromRow . apply ( row ) . getValue ( ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( TypeDescriptor . getRawType ( RepeatPrimitive . class ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( 16 , toRow . apply ( new RepeatPrimitive ( ) ) )
assertEquals ( 16 , fromRow . apply ( "12345" ) )
toRow . apply ( new RepeatPrimitive ( ) ) != null
assertEquals ( 16 , fromRow . apply ( new Row ( ) ) )
AssertPlaceHolder = "Assert.assertNotNull(schema);"
toRow . apply ( mapProto ) . equals ( expectedRow )
assertEquals ( expectedValue , focalMethod . apply ( input ) )
toRow . apply ( null )
assertEquals ( expectedValue , fromRow . apply ( row ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( typeDescriptor . getRawType ( ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( expectedValue , toRow . apply ( nestedObject ) )
assertEquals ( expectedValue , fromRow . apply ( row ) )
AssertPlaceHolder = "Assert.assertNotNull(schema);"
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( typeDescriptor . getRawType ( ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( expectedValue , toRow . apply ( outerOneOf ) )
assertEquals ( expectedValue , focalMethod . apply ( input ) )
assertEquals ( expectedValue , toRow . apply ( nonContiguousOneOf ) )
assertEquals ( expectedValue , fromRow . apply ( input ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( TypeDescriptor . getRawType ( EnumMessage . class ) , AbstractGetterTypeSupplier . INSTANCE ) )
assertEquals ( expectedValue , toRow . apply ( enumMessage ) )
assertEquals ( EnumMessage . EnumValue , fromRow . apply ( row ) )
assertEquals ( schema , JavaBeanUtils . schemaFromJavaBeanClass ( typeDescriptor . getRawType ( ) , AbstractGetterTypeSupplier . INSTANCE ) )
toRow . apply ( wktMessage ) . equals ( expectedRow )
assertEquals ( expectedValue , fromRow . apply ( row ) )
assertEquals ( row , convertRow ( row ) )
assertEquals ( row , convertRow ( row ) )
assertEquals ( ROW , result )
assertEquals ( row , ? ? ? )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) ) ; ? ? ?
assertEquals ( expectedMessage , actualMessage )
assertEquals ( expectedDynamicMessage , actualDynamicMessage )
assertThat ( actualMessage , equalTo ( expectedMessage ) )
assertEquals ( expectedMessage , actualMessage )
assertThat ( receivedRow . getValue ( ) ) . isEqualTo ( "dummy data" )
assertThat ( receivedRow . getValue ( ) ) . isEqualTo ( value )
assertNotNull ( receivedRow )
assertThat ( receivedRow . getValue ( ) ) . isEqualTo ( value )
assertEquals ( actual . size ( ) , expectedSize )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertNotNull ( afterConversions )
assertNotNull ( afterConversions )
assertThat ( afterConversions ) . isEqualTo ( time )
assertNotNull ( afterConversions )
assertThat ( afterConversions ) . isEqualTo ( date )
assertNotNull ( afterConversions )
assertEquals ( expected , actual )
assertEquals ( 155D , fn . getCompressionFactor ( ) )
assert stillRoom
assertEquals ( expectedSchema , actualSchema )
assertEquals ( "aaa.BbB.zAzzz00" , escapeAndJoin ( id ) )
assertEquals ( "aaa.Bb---B.zAzzz00" , escapeAndJoin ( id ) )
assertEquals ( "a\\\\a.b`b.c'c.d\"d.e?e" , escapeAndJoin ( id ) )
assertEquals ( "a\\\\ab\\`bc\\'cd\\\"de\\?e" , escapeAndJoin ( id ) )
assertEquals ( "a.a.b.b.c.c.d.d" , escapeAndJoin ( id ) )
assertEquals ( "a.ab.bc.cd.d" , escapeAndJoin ( id ) )
assertEquals ( 1 , statement . executeUpdate ( "INSERT INTO table VALUES (1, 'test')" ) )
assertNotNull ( statement )
assertEquals ( beamRelNode , sqlEnv . parseQuery ( SELECT_STATEMENT ) )
assertEquals ( beamRelNode , sqlEnv . parseQuery ( SELECT_STATEMENT ) )
assertEquals ( 0.0 , ? ? ? query ( sql ) . getOutput ( ) , 0.0001 )
assertEquals ( 0.0 , ? ? ? query ( sql ) . getOutput ( ) . getValue ( ) , 0.0001 )
assertEquals ( 1 , pipeline . run ( ) . getAggregatorValue ( ) )
assertEquals ( 0 , pipeline . run ( ) . get ( "PCOLLECTION" ) . size ( ) )
assertEquals ( 1 , pipeline . run ( ) . getAggregatorValue ( "f_int3" ) )
assertEquals ( 5 , ? ? ? query ( sql ) ? ? ? )
assertEquals ( 0 , ? ? ? query ( sql ) . getRowCount ( ) )
assertEquals ( 10 , ? ? ? query ( sql ) ? ? ? . getRows ( ) . get ( 0 ) . getInt ( 0 ) )
assertEquals ( 0 , pipeline . run ( ) . getAggregatorValue ( ) )
assertEquals ( 1 , pipeline . run ( ) . getOutputs ( ) . size ( ) )
assertEquals ( 0 , pipeline . run ( ) . getAggregatorValue ( ) )
assertEquals ( "SELECT MAX(f_int1) FROM PCOLLECTION GROUP BY f_int3" , query ( sql ) . getQueryString ( ) )
assertEquals ( "SELECT MAX(f_int1) FROM PCOLLECTION WHERE f_int2 IS NULL GROUP BY f_int3" , query ( sql ) . getQueryString ( ) )
assertEquals ( 3.0 , pipeline . run ( ) . getValue ( ) )
assertEquals ( 0 , pipeline . run ( ) . getAggregatorValue ( ) )
assertEquals ( "SELECT COVAR_SAMP(f_int1, f_int2) FROM PCOLLECTION GROUP BY f_int3" , query ( sql ) . getQueryString ( ) )
assertEquals ( "SELECT COVAR_SAMP(f_int2, f_int1) FROM PCOLLECTION GROUP BY f_int3" , query ( sql ) . getQueryString ( ) )
assertEquals ( 1.0 , ? ? ? query ( sql ) . getOutput ( ) , 0.0001 )
assertEquals ( 1.0 , ? ? ? query ( sql ) . getRows ( ) . get ( 0 ) . getDouble ( 0 ) , 0.0001 )
assertEquals ( 1 , result . apply ( ParDo . of ( new AssertSingleElementFn ( ) ) ) )
assertEquals ( "strstr" , row . getString ( "f_string" ) )
assertEquals ( "strstr" , row . getString ( "f_string" ) )
// Assertion code goes here
assertEquals ( 2 , result . apply ( "Count" , Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( 2 , result . apply ( "Count" , Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( 2 , result . apply ( "Count" , Count . globally ( ) ) . apply ( "Extract" , ParDo . of ( new ExtractFn ( ) ) ) . apply ( "Sum" , Sum . integersGlobally ( ) ) . get ( ) )
assertEquals ( 2 , result . apply ( Count . globally ( ) ) . waitUntilFinish ( ) )
assertEquals ( 1 , result . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 9 , rs . getInt ( 1 ) )
assertEquals ( 1 , statement . executeUpdate ( "INSERT INTO table VALUES (1)" ) )
assertEquals ( pipelineOptions , beamSchema . getPipelineOptions ( ) )
assertThat ( pipelineOptions . get ( "userAgent" ) , equalTo ( "Secret Agent" ) )
assertEquals ( 1 , statement . getUpdateCount ( ) )
assertEquals ( 2 , resultRows . size ( ) )
assertEquals ( 2L , merged )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 1 , tableProvider . getTables ( ) . size ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( 0 ) . getValue ( ) )
assertNotNull ( estimate1 )
assertEquals ( 3 , rows . size ( ) )
assertEquals ( 0 , accumulator . length )
assertEquals ( 0 , accumulator [ 0 ] )
assertEquals ( 1 , accumulator [ 0 ] )
assertEquals ( new long [ ] { 4 , 4 } , accumulator )
assertEquals ( expectedValue , focalMethodResult )
assertEquals ( newVarianceAccumulator ( THREE , BigDecimal . ONE , THREE ) , accumulatorOfSingleElement )
assertEquals ( result , ? ? ? )
assertEquals ( ofSingleElement ( THREE ) , result )
result . assertEquals ( newVarianceAccumulator ( THREE , BigDecimal . ZERO , BigDecimal . ZERO ) )
assertEquals ( expected , actual )
assertEquals ( accumulator , new VarianceAccumulator ( ZERO , BigDecimal . ONE , BigDecimal . TEN ) )
assertEquals ( ContextActivationObserverRegistry . class , result . getClass ( ) )
assertEquals ( expectedOutput , actualOutput )
assertThat ( result , containsInAnyOrder ( row ( BASIC_SCHEMA , 1 , "one" ) , row ( BASIC_SCHEMA , 2 , "two" ) ) )
// Assertion code goes here
// Assertion code goes here
result . apply ( ParDo . of ( new AssertThatHasRowsMatcher < > ( Matchers . containsInAnyOrder ( row ( BASIC_SCHEMA , 1 , "one" ) , row ( BASIC_SCHEMA , 2 , "two" ) ) ) ) )
result . apply ( ParDo . of ( new AssertFn ( ) ) )
assertEquals ( 2 , result . apply ( "Count Rows" , Count . globally ( ) ) )
assertEquals ( "google.cloud.datacatalog" , getTableType ( ) )
assertEquals ( "hello" , sqlTable . getName ( ) )
assertEquals ( Method . DEFAULT . toString ( ) , sqlTable . getMethod ( ) . toString ( ) )
assertEquals ( Method . DIRECT_READ . toString ( ) , sqlTable . getMethod ( ) . toString ( ) )
assertEquals ( Method . EXPORT . toString ( ) , sqlTable . getMethod ( ) . toString ( ) )
assertEquals ( WriteDisposition . WRITE_TRUNCATE . toString ( ) , sqlTable . getWriteDisposition ( ) )
assertEquals ( WriteDisposition . WRITE_APPEND . toString ( ) , sqlTable . getWriteDisposition ( ) . toString ( ) )
assertEquals ( WriteDisposition . WRITE_EMPTY . toString ( ) , sqlTable . getWriteDisposition ( ) . toString ( ) )
assertEquals ( 2 , result . apply ( Size . globally ( ) ) . getValue ( ) )
AssertPlaceHolder = "assertEquals(500L, stats.getRate());"
AssertPlaceHolder = "assertEquals(500.0, stats.getRate(), 0.001);"
assertEquals ( 20 , stats . getRate ( ) )
assertEquals ( 200.0 , stats . getRate ( ) , 0.001 )
result . apply ( ParDo . of ( new AssertDoFn ( ) ) )
assertEquals ( 2 , result . apply ( Size . globally ( ) ) . getValue ( ) )
assertEquals ( rate1 , rate2 , 0.001 )
assertEquals ( "google.cloud.datacatalog" , getTableType ( ) )
assertEquals ( "google.cloud.datacatalog" , getTableType ( ) )
assertEquals ( 1 , output . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( "google.cloud.datacatalog" , provider . getTableType ( ) )
assertEquals ( table , actualTable )
assertEquals ( 1 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( byteString , stream . get ( 0 ) . getValue ( "ColA" ) )
assertEquals ( 1 , stream . apply ( ParDo . of ( new DoFn < Row , Integer > ( ) {
assertEquals ( "abc\n" , params . get ( 0 ) . getStringValue ( ) )
assertEquals ( 1 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( ParDo . of ( new DoFn < Row , Integer > ( ) {
assertEquals ( true , stream . getSchema ( ) . getField ( "field1" ) . getType ( ) . equals ( FieldType . BOOLEAN ) )
assertEquals ( 1 , stream . getSchema ( ) . getFields ( ) . size ( ) )
assertNotNull ( stream )
assertNotNull ( stream )
assertEquals ( 1L , stream . get ( 0 ) . getInt64 ( "field1" ) )
assertEquals ( ImmutableList . of ( Row . withSchema ( schema ) . addValues ( 1L ) . build ( ) ) , stream )
assertEquals ( "yay" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( 1 , stream . getSchema ( ) . getFields ( ) . size ( ) )
assertEquals ( 1 , stream . getSchema ( ) . getFields ( ) . size ( ) )
assertEquals ( 1 , stream . getSchema ( ) . getFields ( ) . size ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( true , field1 )
assertEquals ( 1 , stream . apply ( ParDo . of ( new DoFn < Row , Integer > ( ) {
fail ( "Expected no elements in the stream" )
assertEquals ( 3 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
fail ( "Expected no elements in stream" )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( 1L , c . element ( ) . getInt64 ( "int64_col" ) )
assertEquals ( 0 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertThatThrownBy ( ( ) -> execute ( sql ) )
assertEquals ( 0 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( 0 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
stream . apply ( ParDo . of ( new AssertThat < > ( Matchers . empty ( ) ) ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( "abcdef" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "abc def xyz" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( "SELECT CONCAT('', 'A') AS ColA" , sql )
assertEquals ( "SELECT CONCAT('a', 'b', 'c') AS ColA" , sql )
assertEquals ( "SELECT REPLACE('', '', 'a') AS ColA" , sql )
assertEquals ( "SELECT REPLACE(abc, , xyz) AS ColA" , sql )
assertEquals ( "a b c" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "abxyz" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "a b c" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "abxyzab" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "a b c" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "abxyz" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "Expected value" , actualValue )
assertEquals ( "b" , row . getString ( "field1" ) )
assertEquals ( "" , row . getString ( "field1" ) )
assertEquals ( 123L , stream . get ( 0 ) . getInt64 ( "field1" ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( "a" , field1 )
assertEquals ( "abc" , stream . get ( 0 ) . getString ( "field1" ) )
assertEquals ( "cba" , stream . get ( 0 ) . getString ( "field2" ) )
assertEquals ( 3 , stream . get ( 0 ) . getInt64 ( "field" ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( < expectedValue > , row . getInt64 ( "field1" ) )
assertEquals ( 1 , stream . getSchema ( ) . getFieldCount ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
// Add your assertion logic here
assertEquals ( 1 , stream . apply ( Count . globally ( ) ) )
assertEquals ( 5 , stream . apply ( Count . globally ( ) ) )
assertEquals ( 0 , result . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) . get ( ) )
assertEquals ( 1 , result . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) . get ( ) )
assertEquals ( 0 , result . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) . get ( ) )
assertEquals ( 1 , result . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( 1 , result . apply ( Count . globally ( ) ) . apply ( Sum . integersGlobally ( ) ) )
assertEquals ( 1 , values . size ( ) )
assertNotNull ( getPort ( ) )
assertEquals ( "myPort" , write . getPortName ( ) )
onNextWasCalled . get ( )
onCompletedWasCalled . get ( )
onErrorWasCalled . get ( )
assertSame ( shrinkable , cache . peek ( shrinkableKey ) )
result . assertStopIndex ( 2 )
assertEquals ( "key" , input . getKey ( ) )
AssertPlaceHolder = "handler.finalizeBundle(requestFor(bundleId));"
assertEquals ( singletonList ( "V2" ) , userState . get ( A0 ) )
assertNotNull ( client . getCacheStats ( ) )
assertThat ( clone , equalTo ( value ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected . getBS ( ) , actual . getBS ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
s3FileSystem . getScheme ( )
assertEquals ( "s3://bucket/file" , s3Url . toString ( ) )
assertEquals ( "bucket/file" , s3Url . getPath ( ) )
assertEquals ( expected , actual )
AssertPlaceHolder = "assertThat(clone, equalTo(value));"
assertEquals ( 100000 , futures . size ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThrows ( RuntimeException . class , ( ) -> focalMethod ( ) )
assertEquals ( 100 , requests . size ( ) )
assertEquals ( false ,  < variable_name > . start ( ) )
assertEquals ( true , shardReadersPool . nextRecord ( ) . isPresent ( ) )
AssertPlaceHolder = "assertEquals(s3Url.getPath(), " / bucket / file ");"
assertEquals ( "https://bucket.s3.amazonaws.com/file" , s3Url . toString ( ) )
assertEquals ( request , fromRow . apply ( row ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
assertEquals ( body , clone . getBody ( ) )
assertEquals ( SCHEMA , getScheme ( ) )
assertEquals ( "IllegalArgumentException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( "This should have thrown an exception" , e . getMessage ( ) )
assertEquals ( expectedStartTime . getTime ( ) , actualStartTime )
context . getLogicalStartTime ( ) . getTime ( )
context . getLogicalStartTime ( )
context . getLogicalStartTime ( ) . equals ( startTime )
assertEquals ( expected , insertSql ( tableSchema , "test_table" ) )
assertNotNull ( parse ( input ) )
assertEquals ( expectedDateTime , parse ( input ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , parse ( input ) )
assertEquals ( expectedValue , response )
assertEquals ( expectedValue , response )
assertEquals ( expected , actual )
assertNotNull ( parse ( input ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
? ? ? assertEquals ( expectedValue , response )
? ? ? assertEquals ( expected , ? ? ? )
< AssertPlaceHolder >
assertEquals ( size , ColumnType . builder ( ) . typeName ( TypeName . FIXEDSTRING ) . nullable ( false ) . fixedStringSize ( size ) . build ( ) . getFixedStringSize ( ) )
assertNotNull ( parseDefaultExpression ( columnType , value ) )
assertNotNull ( parseDefaultExpression ( ColumnType . INT64 , value ) )
assertEquals ( expected , getEquivalentSchema ( tableSchema ) )
assertThrows ( Exception . class , ( ) -> executeWithRetry ( IOITHelperTest :: validFunction ) )
assertNotNull ( lowestCause )
assertNotNull ( lowestCause )
assertEquals ( "coder is not deterministic because:\n\t" + reasonsStr , e . getMessage ( ) )
assertArrayEquals ( bytes , newBytes )
assertEquals ( "Expected value" , actualValue )
assertNull ( typedRead . getFlattenResults ( ) )
assertNull ( typedRead . getUseLegacySql ( ) )
assertNotNull ( getQueryPriority ( ) )
assertNotNull ( typedRead . getQueryLocation ( ) )
assertNotNull ( typedRead . getKmsKey ( ) )
assert typedRead . getWithTemplateCompatibility ( )
assertEquals ( "expectedValue" , getName ( ) )
streamSource . hasNext ( )
assertEquals ( 200 , job . getStatusCode ( ) )
assertEquals ( table , testTable )
beamSchema should  not be  null .
beamSchema should  not be  null .
beamSchema should  not be  null .
assertNotNull ( beamSchema )
assertNotNull ( beamSchema )
beamSchema should  not be  null .
assertEquals ( expectedSchema , beamSchema )
beamRow . equals ( BigQueryUtils . toBeamRow ( FLAT_TYPE , BQ_FLAT_ROW ) )
assertNull ( beamRow )
assertEquals ( ENUM_STRING_TYPE , beamRow . get ( "enum_string_type" ) )
beamRow should  not be  null .
beamRow should  not be  null .
beamRow . equals ( toBeamRow ( ARRAY_ROW_TYPE , BQ_ARRAY_ROW_ROW ) )
? ? ? assertThat ( focalMethod ( ) , equalTo ( expectedValue ) )
assertEquals ( types , expectedTypes )
assertEquals ( null , config . withProjectId ( null ) )
assertThrows ( IllegalArgumentException . class , ( ) -> config . withInstanceId ( null ) )
assertNull ( getTableId ( ) )
assertEquals ( isEnabled , withValidate ( isEnabled ) . isValidate ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> config . withBigtableService ( null ) )
assertEquals ( bigtableService , withBigtableService ( bigtableService ) . getBigtableService ( ) )
assertEquals ( 2 , rows . apply ( Size . globally ( ) ) . getValue ( ) )
assertEquals ( 2 , rows . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertEquals ( false , getCellValue ( cell , type ) )
assertEquals ( true , getCellValue ( cell , type ) )
assertEquals ( true , getCellValue ( cell , type ) )
assertEquals ( ( byte ) 2 , ( byte ) getCellValue ( cell , type ) )
assertEquals ( ( short ) 2 , ( short ) getCellValue ( cell , Schema . FieldType . INT16 ) )
assertEquals ( 2 , ( int ) getCellValue ( cell , Schema . FieldType . INT32 ) )
assertEquals ( 2L , ( long ) getCellValue ( cell , Schema . FieldType . INT64 ) )
assertEquals ( 64.0f , ( float ) getCellValue ( cell , type ) , 0.001 )
assertEquals ( 64.21515151515151 , ( double ) getCellValue ( cell , type ) , 0.000001 )
assertEquals ( "stringValue" , new String ( value , UTF_8 ) )
assertEquals ( "2019-04-06" , getCellValue ( mockCell , Schema . FieldType . DATE ) )
assertEquals ( "2010-06-30T01:20" , getCellValue ( cell , Schema . FieldType . DATETIME ) )
assertThat ( actual ) . isEqualTo ( expected )
assertEquals ( "avro" , identifier ( ) )
write . assertProjectId ( PROJECT_ID )
assertEquals ( expectedMutation , upsertFn . apply ( entity ) )
assertEquals ( expectedMutation , deleteEntityFn . apply ( entity . getKey ( ) ) )
assertEquals ( expectedMutation , deleteKeyFn . apply ( key ) )
assertEquals ( numEntities , numEntitiesWritten )
assertEquals ( numLargeEntities , numEntitiesWritten )
assertEquals ( "expected validation failure for samplePeriodBucketSize > samplePeriod" , e . getMessage ( ) )
assertEquals ( expected , actual )
assertEquals ( BackoffResults . NONE , backoffResult1 )
assertThrows ( RuntimeException . class , pipeline :: run )
writeResult . apply ( "<AssertPlaceHolder>" )
AssertPlaceHolder = "assertNotNull(emptyPages);"
assertEquals ( row , messageToRow ( message ) )
assertEquals ( 2 , row . getArray ( ATTRIBUTES_FIELD ) . size ( ) )
assertEquals ( "abc" . getBytes ( UTF_8 ) , message . getPayload ( ) )
assertEquals ( 1446162101123L , timestamp )
assertEquals ( "test" , path )
assertEquals ( typeDescriptor . getJavaType ( ) , PubsubMessage . getDescriptor ( ) . getJavaType ( ) )
assertThrows ( "Pub/Sub schema type PROTOCOL_BUFFER is not supported at this time" , IllegalArgumentException . class , ( ) -> pubsubClient . getSchema ( hasProtoSchemaPath ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assert actual : "Field " + entry . getKey ( ) + " with type " + entry . getValue ( ) + " is not present"
assertThat ( reads , notNullValue ( ) )
assertThat ( reads , containsInAnyOrder ( expectedRows ) )
assertEquals ( expected , actual )
assertNotNull ( impl )
assertThrows ( IllegalArgumentException . class , ( ) -> tracker . tryClaim ( OffsetByteProgress . of ( Offset . of ( 1_000 ) , MIN_BYTES ) ) )
assertTrue ( processor instanceof SubscriptionPartitionProcessor )
assertThat ( e . getCode ( ) , is ( Code . UNAVAILABLE ) )
assertEquals ( Instant . now ( ) . plus ( amount ) , currentTime )
assertEquals ( mark , reader . getCheckpointMark ( ) )
assertEquals ( 42 , reader . getSplitBacklogBytes ( ) )
assertEquals ( expectedMutation , mutation )
assertEquals ( expectedMutation , mutation )
assertNotNull ( getRpcPriority ( ) )
assertNotNull ( getRpcPriority ( ) )
assertNotNull ( getRpcPriority ( ) )
assertNotNull ( getRpcPriority ( ) )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
assertEquals ( SPANNER_TABLE , configuration . getTable ( ) )
assertEquals ( SPANNER_SQL_QUERY , configuration . getSql ( ) )
assertEquals ( mode . toString ( ) , configuration . getTimestampBoundMode ( ) )
assertEquals ( writeTransform , buildExternal ( configuration ) )
assertNotNull ( maybeContinuation )
assertEquals ( "Expected exception of type TimeoutException" , TimeoutException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Expected exception of type TimeoutException" , TimeoutException . class , e . getCause ( ) . getClass ( ) )
assertNull ( getPartition ( ) )
assertEquals ( partition , ? ? ? )
assertEquals ( expected , actual )
assertEquals ( expectedPartitionMetadata . getFinishedAt ( ) , actualPartitionMetadata . getFinishedAt ( ) )
assert iter instanceof TagIterable : "Expected iter to be an instance of TagIterable"
assertNull ( executionSamplerFuture )
assertEquals ( true , canClaim )
assertEquals ( true , canClaim )
assertEquals ( true , canClaim )
assertEquals ( true , canClaim )
assertEquals ( true , canClaim )
assertNotNull ( splitResult )
assertNotNull ( splitResult )
assertEquals ( null , executionSamplerFuture )
assertEquals ( null , trySplit ( fractionOfRemainder ) )
assertEquals ( expected , toNanos ( timestamp ) )
assertEquals ( expectedTimestamp , toTimestamp ( row ) )
assert result . equals ( peek ( ) )
assertEquals ( getUsingLong ( position ) , ? ? ? )
assertEquals ( "9bb47f5c90d2a99cad526453dff5ed5ec74650dc" , matcher . getChecksum ( ) )
assertEquals ( 1 , matcher . getActualRowCount ( ) )
assertThat ( matcher . matches ( mockBigqueryClient . queryWithRetries ( anyString ( ) , anyString ( ) ) ) ) . isTrue ( )
assertEquals ( "test-value" , testConf . get ( "hadoop.silly.test" ) )
assertEquals ( ImmutableMap . of ( ) , projectFactory . getEnvironment ( ) )
assertEquals ( bytes , read ( "testFile" ) )
assertEquals ( expected , actual )
assertEquals ( expected , ? ? ? )
assertEquals ( getTaskAttemptIdPath ( taskId , i ) , taskAttemptID . toString ( ) )
assertEquals ( source , hifSource )
assertThat ( databaseData , hasSize ( 10 ) )
assertThat ( databaseData ) . isNotNull ( )
assertThat ( databaseData ) . isNotNull ( )
assertEquals ( 10 , databaseData . getNumPartitions ( ) )
assertEquals ( 10 , databaseData . getNumPartitions ( ) )
assertEquals ( 5 , databaseData . getNumPartitions ( ) )
assertThat ( databaseData ) . isNotNull ( )
assertThat ( databaseData ) . isNotNull ( )
assertEquals ( 0 , databaseData . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertThat ( databaseData ) . isNotNull ( )
assertEquals ( "org.apache.beam.sdk.io.jdbc.BeamSchemaInferenceException" , exc . getClass ( ) . getName ( ) )
assertEquals ( 1 , rows . apply ( Count . globally ( ) ) )
assertThat ( rows , hasSize ( 10 ) )
assertThat ( ranges , containsInAnyOrder ( KV . of ( 10L , KV . of ( 0L , 12346789L ) ) ) )
assertEquals ( 10 , ranges . size ( ) )
assertNotNull ( decodedRecord )
assertEquals ( decodedRecord , verifySerialization ( null , System . currentTimeMillis ( ) ) )
decodedRecord . timestamp ( ) == timestamp
decodedRecord should  not be  null .
assertEquals ( expectedStartOffset , consumer . getStartOffsetForTime ( ) . getKey ( ) )
assertEquals ( expectedStopOffset , consumer . getStopOffsetForTime ( ) . getKey ( ) )
assertEquals ( expectedStartOffset , consumer . getStartOffsetForTime ( ) . getKey ( ) )
assertEquals ( expectedStopOffset , result . getToOffset ( ) )
result . assertEquals ( new OffsetRange ( expectedStartOffset , expectedStartOffset ) )
assertEquals ( "CompletionCandidate[<expected value>, <expected count>]" , coder . toString ( ) )
assertThat ( kinesisService . getAddedRecords ( ) . get ( ) ) . isEqualTo ( 3 )
assertEquals ( "Einstein" , doc . getString ( "scientist" ) )
assertEquals ( 5 , output . apply ( Count . globally ( ) ) )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
result . assertEquals ( new OffsetRange ( expectedStartOffset , null ) )
result . equals ( OffsetRange . of ( expectedStartOffset , expectedStartOffset ) )
assertEquals ( result . getStartOffset ( ) , startOffset )
assertEquals ( Arrays . asList ( newValue ) , values )
assertEquals ( Arrays . asList ( newValue ) , values )
assertEquals ( expected , members )
assertEquals ( 15 , count )
assertEquals ( - 9 , count )
assertThat ( byteKey , equalTo ( ByteKey . of ( 0x00 ) ) )
assertThat ( byteKey , equalTo ( expectedByteKey ) )
assertEquals ( redisCursor , result )
assertEquals ( "1048586" , redisCursor . getCursor ( ) )
assertEquals ( "`" , escapeIdentifier ( "" ) )
assertEquals ( "`identifier`" , escapeIdentifier ( "identifier" ) )
assertEquals ( "" , escapeString ( "" ) )
assertEquals ( "\"" , escapeString ( "\"" ) )
assertNotNull ( getSelectQuery ( table , query ) )
assertEquals ( defaultValue , getArgumentWithDefault ( null , defaultValue ) )
assertNull ( getArgumentWithDefault ( null , defaultValue ) )
assertEquals ( null , getClassNameOrNull ( null ) )
assertEquals ( null , getClassNameOrNull ( null ) )
assertEquals ( url , configuration . getUrl ( ) )
assertEquals ( SERVER_NAME , configuration . getServerName ( ) )
assertEquals ( database , getDatabase ( ) )
assertEquals ( warehouse , configuration . getWarehouse ( ) )
assertEquals ( schema , configuration . getSchema ( ) )
assertEquals ( "role" , configuration . getRole ( ) )
assertNotNull ( configuration . getAuthenticator ( ) )
assertEquals ( portNumber , configuration . getPortNumber ( ) )
assertEquals ( loginTimeout , configuration . getLoginTimeout ( ) )
assertEquals ( "RuntimeException" , ex . getClass ( ) . getSimpleName ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( ex )
assertEquals ( "invalid_key is not deterministic because:\n\t" + reasonsStr , ex . getMessage ( ) )
assertEquals ( "Expected exception of type RuntimeException to be thrown" , RuntimeException . class , ex . getClass ( ) )
AssertPlaceHolder = "assertEquals(\"id VARCHAR\", column.sql());"
assertEquals ( "id VARCHAR" , column . sql ( ) )
assertThat ( sql , is ( equalTo ( expectedSql ) ) )
assertEquals ( "id VARCHAR" , schema . sql ( ) )
assertEquals ( "id" , schema . getColumns ( ) . get ( 0 ) . getName ( ) )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
output . apply ( ParDo . of ( new AssertFn ( ) ) )
result . assertEquals ( new OffsetRange ( 0L , 0L ) )
assertNotNull ( thrown )
thrown . getMessage ( )
assertNotNull ( thrown )
assertEquals ( expectedBundleSize , bundleSizes . stream ( ) . map ( range -> range . getTo ( ) - range . getFrom ( ) ) . findFirst ( ) . orElse ( 0 ) )
assertEquals ( expectedBundleSize , bundleSizes . stream ( ) . map ( range -> range . getTo ( ) - range . getFrom ( ) ) . findFirst ( ) . orElse ( 0 ) )
assertEquals ( 37 , testSourceOptions . forceNumInitialBundles )
assertEquals ( 0.0 , lastFractionConsumed , 0.0001 )
assertEquals ( EMPTY_OFFSET , recordSource . getEndOffset ( ) )
assertEquals ( true , isStarted )
assertEquals ( expectedElement , currentElement )
assertEquals ( expectedElement , currentElement )
assertEquals ( 20 , splitCount . intValue ( ) )
assertEquals ( ROW , result )
assertEquals ( MESSAGE , row )
assertArrayEquals ( encoded , CoderUtils . encodeToByteArray ( coder , decodeFromByteArray ( coder , encoded ) ) )
assertArrayEquals ( encoded , CoderUtils . encodeToByteArray ( coder , decodeFromByteArray ( coder , encoded ) ) )
assertArrayEquals ( encoded , CoderUtils . encodeToByteArray ( nesting , decodeFromByteArray ( jaxbCoder , encoded ) ) )
assertThat ( configuration . getQuery ( ) , equalTo ( 3 ) )
assertThat ( configuration . getQuery ( ) , equalTo ( Query . HIGHEST_BID ) )
fullName . equals ( "1_sql" )
assertNotNull ( fullName )
assertEquals ( 2 , bids . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) . longValue ( ) )
In the  above example , you  need to replace ` expectedValue ` with the expected value that you  want to  assert and ` actualValue ` with the actual value that you want to compare against the expected value .
assertEquals ( 2 , bids . apply ( Count . globally ( ) ) . waitUntilFinish ( ) . get ( ) )
assertThat ( bids ) . containsInAnyOrderElementsOf ( BIDS_EVENTS )
assertThat ( bids ) . containsInAnyOrderElementsOf ( BIDS_EVENTS )
assertEquals ( "expectedValue" , getQuery ( ) )
assertThat ( bids ) . containsInAnyOrder ( BIDS_EVENTS )
assertEquals ( expected , actual )
assertEquals ( "52" , getByteCodeVersion ( ? ? ? verifyCodeIsCompiledWithJava8 . class ) )
assertEquals ( "52" , getByteCodeVersion ( verifyTestCodeIsCompiledWithJava8 . class ) )
assertEquals ( "11" , getByteCodeVersion ( ? ? ? TestClass ? ? ? . class ) )
assertEquals ( "17" , getByteCodeVersion ( verifyTestCodeIsCompiledWithJava17 . class ) )
assertEquals ( "11" , version )
assertEquals ( "1.7" , version )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedNoSpaces , query55StringNoSpaces )
assertThat ( dataSize , is ( expected ) )
assert r2 != null
assertNull ( found )
assertEquals ( expects , toSign )
assertEquals ( toSign , filter . createStringToSign ( request ) )
assertNotNull ( request )
assertEquals ( "foo" , getFirstHeaderOrNull ( AtmosHeaders . SIGNATURE ) )
blob . getContentMetadata ( ) . getName ( ) should be equal to "foo"
assertEquals ( "foo" , blob . getSystemMetadata ( ) . getObjectName ( ) )
assertEquals ( 1 , command . incrementFailureCount ( ) )
assertEquals ( "expectedValue" , parser . getId ( ) )
assertEquals ( "expectedValue" , parser . getId ( ) )
assertEquals ( "expectedValue" , parser . getId ( ) )
assertNull ( deleteCookbook ( cookbookName , version ) )
assertEquals ( null , group )
assertEquals ( "expectedValue" , canonicalPath ( "inputValue" ) )
assertEquals ( "expectedValue" , canonicalPath ( "inputValue" ) )
assertEquals ( "GET http://localhost/nodes/test/cookbooks/myCookBook?num_versions=5 HTTP/1.1" , request . getRequestLine ( ) )
assertEquals ( "invalid tarball: tarball root must contain java-bytearray" , response )
assertEquals ( URI . create ( "http://foo/bar" ) , result )
assertEquals ( size , < AssertPlaceHolder >  )
assertEquals ( 0 , prefix . length ( ) )
assertEquals ( 0 , prefix . length ( ) )
assertEquals ( size , < AssertPlaceHolder >  )
assertEquals ( "recipe" , options . getRecipe ( ) )
assertEquals ( "test" , options . getRecipe ( ) )
assertEquals ( options . getRecipes ( ) , Arrays . asList ( "test" , "test2" ) )
assertEquals ( "test" , options . getRoles ( ) . get ( 0 ) )
assertEquals ( Arrays . asList ( "test" , "test2" ) , options . getRoles ( ) )
assertEquals ( AtmosApiMetadata . class , options . build ( ) . getClass ( ) )
assertEquals ( "Expected uptime to be 69876000L" , 69876000L , runtime . getUptime ( ) )
assertEquals ( expected , new HashSet < > ( profiles ) )
assertEquals ( expected , new HashSet < > ( profiles ) )
assertEquals ( expected , Sets . newHashSet ( profiles ) )
assertEquals ( expected , new HashSet < > ( locations ) )
assertEquals ( true , parser . load ( "1" ) )
assertThat ( options ) . isInstanceOf ( clazz )
assertEquals ( CloudStackTemplateOptions . class , options . as ( CloudStackTemplateOptions . class ) . getClass ( ) )
assertEquals ( ImmutableSet . of ( "3" ) , options . getSecurityGroupIds ( ) )
assertEquals ( "3" , options . getSecurityGroupIds ( ) . iterator ( ) . next ( ) )
assertEquals ( options . getNetworkIds ( ) , expectedNetworkIds )
assertThat ( options . getNetworks ( ) ) . contains ( "3" )
assertEquals ( "10.0.0.1" , options . getIpOnDefaultNetwork ( ) )
assertEquals ( "10.0.0.1" , options . as ( String . class ) )
assertEquals ( "test" , options . getKeyPairName ( ) )
assertEquals ( "test" , options . diskOfferingId )
assertEquals ( 0 , options . getDiskSize ( ) )
assertEquals ( 10 , options . as ( DataDiskSize . class ) . getSize ( ) )
assertEquals ( options . getClass ( ) , clazz )
assertNotNull ( options )
assertEquals ( true , exceptionThrown )
assertEquals ( optionsExpected , optionsActual )
assertEquals ( optionsExpected , optionsActual )
assertEquals ( true , exceptionThrown )
assertEquals ( true , exceptionThrown )
assert response . size ( ) > 0
assertEquals ( null , client . updateConfigurationEntry ( "expunge.delay" , "11" ) )
assert newDelay == expungeDelay + 1
assertEquals ( "1" , actual )
assertEquals ( "1" , actual )
assertEquals ( "1" , actual )
assertEquals ( "expectedJobId" , job . getJobId ( ) )
assertEquals ( expects , response )
assertEquals ( "100" , job . getId ( ) )
assertEquals ( "Dummy test error" , e . getMessage ( ) )
assertEquals ( VirtualMachine . State . DESTROYED , virtualMachine . getState ( ) )
assertEquals ( VirtualMachine . State . RUNNING , virtualMachine . getState ( ) )
assertEquals ( null , virtualMachineClient . getVirtualMachine ( virtualMachine . getId ( ) ) )
assertEquals ( virtualMachine , virtualMachineClient . getVirtualMachine ( virtualMachine . getId ( ) ) )
assertEquals ( "hostname" , options . as ( DockerTemplateOptions . class ) . getHostname ( ) )
assertEquals ( 1024 , options . getMemory ( ) )
assertThat ( options . getCpuShares ( ) ) . isEqualTo ( 2 )
assertEquals ( ImmutableMap . of ( "/tmp" , "/tmp" ) , options . getVolumes ( ) )
assertEquals ( Arrays . asList ( "8.8.8.8" , "8.8.4.4" ) , options . getDns ( ) )
assertThat ( options . getEntrypoint ( ) ) . containsExactly ( "/bin/sh" , "-c" )
assertEquals ( "chmod 666 /etc/*" , options . getCommands ( ) . get ( 0 ) )
assertEquals ( options , ? ? ? )
assertEquals ( ImmutableMap . < Integer , Integer > builder ( ) . put ( 8443 , 443 ) . put ( 8080 , 80 ) . build ( ) , options . getPortBindings ( ) )
assertEquals ( "host" , options . getNetworkMode ( ) )
assertThat ( options . isPrivileged ( ) ) . isFalse ( )
assertThat ( options . isPrivileged ( ) ) . isTrue ( )
assertEquals ( options , optionsCopy )
assertEquals ( "expectedValue" , api ( ) . startContainer ( container . id ( ) ) )
assertEquals ( "hello" , consumeStream ( tarredStream ) )
assertEquals ( "Container should be paused" , ContainerStatus . PAUSED , api ( ) . getContainerStatus ( container . id ( ) ) )
assertEquals ( "Container should be unpaused" , ContainerStatus . UNPAUSED , api ( ) . getContainerStatus ( container . id ( ) ) )
assertEquals ( "Container should be stopped" , ContainerStatus . STOPPED , api ( ) . getContainerStatus ( container . id ( ) ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 1 , statusCode )
assertEquals ( 0 , api ( ) . getContainers ( ) . size ( ) )
assertThat ( api . listAllContainers ( ) . all ( true ) . queryParameters . get ( "all" ) ) . isEqualTo ( "true" )
assertEquals ( "Expected image to be inspected" , expectedImage , image )
assertEquals ( "jclouds:testTag" , taggedImage . getName ( ) )
assertNotNull ( result )
assertEquals ( network . id ( ) , api ( ) . inspectNetwork ( network . id ( ) ) . id ( ) )
assertNotNull ( container . networkSettings ( ) )
assertEquals ( null , container . networkSettings ( ) )
assertNotNull ( network . getId ( ) )
assertEquals ( 0 , api ( ) . listNetworks ( ) . size ( ) )
assertNotNull ( getHardware ( ) , "The returned hardware was null, but it should have a value." )
assert getHardware ( ) != null : "The returned hardware was null, but it should have a value."
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "mykeypair" , options . getKeyPair ( ) )
options . assertKeyPairIsNull ( )
assertEquals ( "mykeypair" , options . getKeyPair ( ) )
assert ! options . shouldAutomaticallyCreateKeyPair ( )
assert ! options . shouldAutomaticallyCreateKeyPair ( )
assert ! options . shouldAutomaticallyCreateKeyPair ( )
assertNotNull ( getPrivateKey ( ) )
assertNull ( options . getPrivateKey ( ) )
assertNotNull ( options )
assertEquals ( "ssh-rsa" , options . getPublicKey ( ) . getAlgorithm ( ) )
assertNotNull ( options . getPublicKey ( ) )
assertNotNull ( options )
options . assertClientTokenEquals ( getClientToken ( ) )
assertEquals ( "some-token" , options . getClientToken ( ) )
assertNotNull ( result . getProgress ( ) )
assertEquals ( null , volume )
assertEquals ( subnetId , subnet . getSubnetId ( ) )
options . bucketOwnedBy ( "test" )
assertEquals ( null , options . creds . getPassword ( ) )
assertEquals ( "test" , options . getBucketName ( ) )
assertEquals ( null , options . getBucketOwnedBy ( ) )
options . getDescription ( ) , is ( nullValue ( ) )
assertEquals ( false , options . isReboot ( ) )
assertEquals ( options . isNoReboot ( ) , true )
options . getDescription ( ) , isNull ( )
options . getVolumeType ( ) , isNull ( )
assertNull ( options . getSnapshotId ( ) )
options . getIops ( ) == null
options . getVolumeSize ( ) , is ( nullValue ( ) )
options . isEncrypted ( )
options . get ( ) == null
assertEquals ( "test" , options . getOwners ( ) )
"<AssertPlaceHolder>" = assertNotNull ( options )
assertEquals ( "test" , options . getOwners ( ) . get ( 0 ) )
assertNotNull ( options ) ; // suggested assertion
assertEquals ( null , options . getRestorableBy ( ) )
assertEquals ( "test" , options . getOwners ( ) )
options . getOwners ( ) . isNull ( )
assertEquals ( "test" , options . getOwners ( ) )
options . getSnapshotIds ( ) . isEmpty ( )
options . fromDevice ( "test" )
options . getDevice ( ) . assertNull ( )
options . getDeviceName ( ) . equals ( "test" )
options . get ( ) == null
options . getDescription ( ) , is ( nullValue ( ) )
options . getArchitecture ( ) , is ( "null" )
assertEquals ( "test" , options . getKernelId ( ) )
options . getKernelId ( ) , isNull ( )
assertEquals ( "test" , options . getKernelId ( ) )
options . getRamdiskId ( ) , isNull ( )
options . getDescription ( ) , is ( nullValue ( ) )
options . getArchitecture ( ) , isNull ( )
assertEquals ( "test" , options . getKernelId ( ) )
options . getKernelId ( ) , isNull ( )
assertEquals ( "test" , options . getKernelId ( ) )
options . getRamdiskId ( ) , isNull ( )
assertEquals ( "test" , options . getKeyName ( ) )
assertEquals ( null , options . getKeyName ( ) )
assertEquals ( "test" , options . getKeyName ( ) )
assertEquals ( "test" , options . getSecurityGroups ( ) . get ( 0 ) )
assertEquals ( null , options . getSecurityGroups ( ) )
assertEquals ( "test" , options . getSecurityGroups ( ) . get ( 0 ) )
assertEquals ( null , options . getAdditionalInfo ( ) )
assertEquals ( "test" . getBytes ( ) , options . getUserData ( ) )
assertEquals ( null , options . getUserData ( ) )
assertEquals ( "test" . getBytes ( ) , options . getUserData ( ) )
assertEquals ( InstanceType . C1_XLARGE , options . getInstanceType ( ) )
assertEquals ( null , options . getInstanceType ( ) )
assertEquals ( "C1_XLARGE" , options . getInstanceType ( ) . toString ( ) )
assertEquals ( "test" , options . getKernelId ( ) )
assertEquals ( null , options . getKernelId ( ) )
assertEquals ( "test" , options . getKernelId ( ) )
assertEquals ( "test" , options . getRamdisk ( ) )
assertEquals ( null , options . getRamdiskId ( ) )
assertEquals ( "test" , options . getRamdiskId ( ) )
assertEquals ( null , options . getVirtualName ( ) )
assertEquals ( null , options . getBlockDeviceMappings ( ) )
assertEquals ( "some-token" , options . getClientToken ( ) )
assertEquals ( volumes , client . describeVolumesInRegion ( attachment . getRegion ( ) , attachment . getVolumeId ( ) ) )
assertEquals ( volumes , client . describeVolumesInRegion ( attachment . getRegion ( ) , attachment . getVolumeId ( ) ) )
assertEquals ( volumes , client . describeVolumesInRegion ( attachment . getRegion ( ) , attachment . getVolumeId ( ) ) )
assertNotNull ( getServerInfo ( serverUUID ) )
assertEquals ( null , server . getUuid ( ) )
assertEquals ( null , drive . getUuid ( ) )
assertEquals ( size , metadata . getSize ( ) )
assertEquals ( expectedContentType , blob . getContentType ( ) )
assertSent ( server , "DELETE" , path )
assertEquals ( null , describeVault ( vaultName ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expectedSize , jobs . size ( ) )
assertEquals ( 0 , listVaults . size ( ) )
assertEquals ( HashCode . fromString ( "9bc1b2a288b26af7257a36277ae3816a7d4f16e89c1e7e77d0a5c48bad62b360" ) , treehash )
assertNotNull ( token )
assertEquals ( "expectedTokenValue" , token . getTokenValue ( ) )
assertEquals ( null , token . getScope ( ) )
assertEquals ( expected , api . list ( ) )
assertEquals ( api ( ) , api . getAlarmApiForRegion ( null ) )
assertEquals ( "Updated" , project . getDescription ( ) )
assertEquals ( 1 , api ( ) . getTags ( ) . size ( ) )
assertEquals ( 3 , api ( ) . getTags ( project . id ( ) ) . size ( ) )
assertEquals ( 0 , api ( ) . getTags ( project . id ( ) ) . size ( ) )
assertEquals ( 0 , api ( ) . getTags ( project . id ( ) ) . size ( ) )
assertEquals ( null , api . getAlarmApiForRegion ( null ) )
assertEquals ( "Updated" , region . getDescription ( ) )
assertEquals ( expected , actual )
assertEquals ( "Updated" , user . getName ( ) )
assertEquals ( 0 , api ( ) . listGroups ( ) . size ( ) )
assertEquals ( 0 , api ( ) . listProjects ( ) . size ( ) )
assertEquals ( keyName , keyPair . getKeyName ( ) )
assertEquals ( keyName , keyPair . getKeyName ( ) )
assertNotNull ( serverStatus )
assertTrue ( parser . load ( "arg0" ) )
assertEquals ( null , parser . loadFloatingIpsForInstance ( "region" , "id" ) )
assertEquals ( null , parser . loadFloatingIpsForInstance ( "region" , "instanceId" ) )
assertNotNull ( options . getPrivateKey ( ) )
assertNull ( options . getPrivateKey ( ) )
assertNotNull ( getPrivateKey ( ) )
assertNotNull ( options . getPublicKey ( ) )
assertNull ( options . getPublicKey ( ) )
assertNotNull ( options )
assertEquals ( "test" , new String ( options . getUserData ( ) ) )
assertEquals ( "nova" , options . getAvailabilityZone ( ) )
assertEquals ( Server . DISK_CONFIG_AUTO , options . getDiskConfig ( ) )
assertThat ( api . list ( ) ) . contains ( floatingIP )
assertEquals ( "reboot" , reboot . getAction ( ) )
assertEquals ( null , volumeAttachment )
assertEquals ( "freddy" , volumeTypeOption . get ( ) . getExtraSpec ( testVolumeType . getId ( ) , "test1" ) )
assertEquals ( "ACTIVE" , server . getStatus ( ) )
assertNotNull ( serverId )
assertEquals ( "EXPECTED_STATUS" , serverCheck . getStatus ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( eTag , "<expectedETag>" )
assertEquals ( eTag , md5 . toString ( ) )
assertEquals ( "Expected MD5 hash" , "expectedHashValue" , hasher . hash ( ) . toString ( ) )
assertThrows ( ContainerNotFoundException . class , ( ) -> {
assertNotNull ( flavorApi )
assertEquals ( expectedValue , actualValue )
assertEquals ( "Expected value" , instanceApi . get ( ) )
assertEquals ( first . getId ( ) , second . getId ( ) )
assertNotNull ( userApi )
assertEquals ( size , domains . size ( ) )
assertThat ( domains . size ( ) ) . isEqualTo ( size )
assertEquals ( size , subdomains . size ( ) )
assertEquals ( domainExport . size ( ) , 1 )
assertEquals ( 0 , api . getRecordApi ( domainId ) . getAll ( ) . size ( ) )
assertEquals ( size , records . size ( ) )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( 0 , api . getReverseDNSApi ( CLOUD_SERVERS_OPEN_STACK ) . getReverseDNSRecords ( serverURI ) . size ( ) )
assertNotNull ( api . getAccessRuleApi ( region , lb . getId ( ) ) )
assertNull ( getChange ( changeID ) )
assertThrows ( ResourceNotFoundException . class , ( ) -> {
assertEquals ( 1 , zones . size ( ) )
assertEquals ( 0 , api ( ) . getHostedZone ( ) . size ( ) )
assertEquals ( 404 , exception . getStatusCode ( ) )
assertEquals ( ResourceNotFoundException . class , fail . getClass ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( request . getRequestLine ( ) , "GET http://euc/services/Walrus/object HTTP/1.1" )
assertEquals ( payload , result . getPayload ( ) )
assertEquals ( "isPublic()" , filter . toString ( ) )
assertEquals ( "isPublic()" , builder . toString ( ) )
assertEquals ( "isPublic()" , filter . toString ( ) )
assertEquals ( "isPublic()" , filter . toString ( ) )
assertEquals ( "ETag value is incorrect" , "expectedETagValue" , parser . parse ( response ) )
assertEquals ( Optional . of ( "us-east-1" ) , bucketToRegionCache . get ( "bucket" ) )
assertEquals ( "Expected status code 200" , 200 , response . getStatusCode ( ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertNull ( options . getIfModifiedSince ( ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertEquals ( null , options . getIfUnmodifiedSince ( ) )
assertNull ( options . getIfMatch ( ) )
assertEquals ( "someETag" , options . getIfNoneMatch ( ) )
assertEquals ( acl , options . getAcl ( ) )
assertEquals ( CannedAccessPolicy . AUTHENTICATED_READ , options . getAcl ( ) )
assertThat ( headers ) . isNotNull ( )
assertEquals ( 0 , options . getQueryString ( ) . length ( ) )
assertEquals ( null , options . getPrefix ( ) )
assertEquals ( null , options )
assertEquals ( null , options . getMaxKeys ( ) )
assertEquals ( expectedAcl , options . getAcl ( ) )
assertEquals ( CannedAccessPolicy . AUTHENTICATED_READ , options . getAcl ( ) )
assertEquals ( expectedAcl , getAcl ( ) )
assertEquals ( CannedAccessPolicy . AUTHENTICATED_READ , options . getAcl ( ) )
assertEquals ( expected , result )
assertEquals ( expected . getLastModified ( ) , metadata . getLastModified ( ) )
assertEquals ( "Requester" , payer . getPayer ( ) )
assertEquals ( "BucketOwner" , payer . getPayer ( ) )
assertThat ( acks . getSuccessful ( ) . size ( ) ) . isEqualTo ( size )
assertEquals ( expectedMessage , receive ( ) )
assertEquals ( null , getQueueApi ( ) . peek ( ) )
assertEquals ( queue , getQueueApi ( ) . createQueue ( queue ) )
assertNotNull ( queue )
assertNotNull ( getInAccount ( queue . toString ( ) , accountId ) )
assertEquals ( expectedAttributes , attributes )
assertEquals ( "1024" , getQueueApi ( ) . getAttribute ( queue , "MaximumMessageSize" ) )
assertEquals ( "test" , options . getQueuePrefix ( ) )
assertEquals ( null , options . getPrefix ( ) )
assertEquals ( "expectedValue" , options . getPrefix ( ) )
assertEquals ( "3" , options . getDelaySeconds ( ) )
options . getDelaySeconds ( ) == 3
assertEquals ( 0 , retry . getRetryCount ( ) )
assertEquals ( 1 , command . getFailureCount ( ) )
assertEquals ( null , response . getPayload ( ) )
assertEquals ( TEXT_PLAIN , response . getPayload ( ) . getContentMetadata ( ) . getContentType ( ) )
assertEquals ( "application/unknown" , response . getPayload ( ) . getContentMetadata ( ) . getContentType ( ) )
blob . getMetadata ( ) . setName ( "foo" )
assertEquals ( null , ? ? ? )
assertThat ( in . getIfUnmodifiedSince ( ) ) . isEqualTo ( expected . getIfUnmodifiedSince ( ) )
assertThat ( in . getIfModifiedSince ( ) ) . isEqualTo ( expected . getIfModifiedSince ( ) )
expected . ifETagMatches ( ifMatch )
assertEquals ( expected , in )
assertEquals ( expected , in )
expected . startAt ( 1024 )
assertEquals ( "application/json" , metadata . getContentType ( ) )
assertEquals ( "0xfeb" , from . getHeader ( HttpHeaders . ETAG ) )
assertEquals ( "value" , from . getHeaders ( ) . get ( "prefixkey" ) )
expected . setType ( StorageType . RELATIVE_PATH )
assertThat ( metadata . getSize ( ) ) . isEqualTo ( size )
assertEquals ( 304 , ex . getStatusCode ( ) )
assertEquals ( 412 , ex . getStatusCode ( ) )
assertEquals ( 404 , ex . getStatusCode ( ) )
assertEquals ( 304 , ex . getStatusCode ( ) )
assertEquals ( 416 , e . getStatusCode ( ) )
assertEquals ( TEST_STRING , getContentAsStringOrNullAndClose ( blob ) )
assertEquals ( size , request . getHeaders ( ) . getContentLength ( ) )
assertThat ( request . getHeaders ( ) . get ( "X-Auth-Token" ) ) . isNotNull ( )
assertNotNull ( request )
assertEquals ( 2 , view . getBlobStore ( ) . list ( containerName ) . size ( ) )
assert container . size ( ) == 25
assert container . size ( ) == 10
assertThat ( container . size ( ) ) . isEqualTo ( expectedSize )
assertEquals ( metadata . getSize ( ) , expectedSize )
assertEquals ( "http://localhost/container/name?Expires=1212684799&AWSAccessKeyId=identity&Signature=Z0UqrkQv83rykFxvI3f0dQtxEAM=" , getBlob . getUri ( ) . toString ( ) )
assertEquals ( compare . getPayload ( ) , blob . getPayload ( ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertEquals ( null , options . getIfModifiedSince ( ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertEquals ( null , options . getIfUnmodifiedSince ( ) )
options . range ( 0 , 5 )
assertEquals ( expectedSize , options . size ( ) )
assertEquals ( etag , options . getIfMatch ( ) )
assertNull ( options . getIfMatch ( ) )
assertEquals ( etag , options . getIfMatch ( ) )
assertEquals ( etag , options . getIfNoneMatch ( ) )
assertEquals ( null , options . getIfNoneMatch ( ) )
assertEquals ( etag , options . getIfNoneMatch ( ) )
assertEquals ( true , options . isRecursive ( ) )
assertEquals ( options . isRecursive ( ) , true )
assertEquals ( "test" , options . getDirectory ( ) )
assertEquals ( "-" , options . getDelimiter ( ) )
assertEquals ( "test" , options . getDir ( ) )
assertEquals ( null , options . getDir ( ) )
assertEquals ( "test" , options . getMarker ( ) )
assertEquals ( null , options . getMarker ( ) )
assertEquals ( "test" , options . getMarker ( ) )
assertEquals ( 1000 , options . getMaxResults ( ) )
assertEquals ( null , options . getMaxResults ( ) )
assertEquals ( 1000 , options . getMaxResults ( ) )
assertEquals ( "GET http://momma/ HTTP/1.1" , request . getRequestLine ( ) )
assertEquals ( region , md . getLocation ( ) )
assertEquals ( md . getLocation ( ) , otherRegion )
assertNotNull ( statement )
assertNotNull ( toMatch )
assert node . getType ( ) != null : node
assert destroyed . size ( ) == toDestroy : "Number of destroyed nodes does not match the expected value"
assertNotNull ( template )
assertNotNull ( "Private key is null" , getPrivateKey ( ) )
assertEquals ( "expectedPrivateKey" , getPrivateKey ( ) , "<AssertPlaceHolder>" )
assertNull ( options . getPublicKey ( ) )
assertEquals ( "ssh-rsa" , options . getPublicKey ( ) . getAlgorithm ( ) )
assertEquals ( Status . TERMINATED , node . getStatus ( ) )
assertEquals ( Status . ERROR , node . getStatus ( ) )
assertEquals ( "PENDING[queued]" , formatStatus ( resource ) )
assertEquals ( "PENDING" , formatStatus ( resource ) )
assertEquals ( "expectedFingerprint" , fingerPrint )
assertEquals ( expectedFingerprint , fingerPrint )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "http://foo.service.com" , endpoint . toString ( ) )
assertThat ( context . getName ( ) ) . isEqualTo ( "mytest" )
assertEquals ( "http://foo.service.com" , endpoint )
assertEquals ( "foo" , creds . get ( ) . getIdentity ( ) )
assertEquals ( "foo" , creds . getUsername ( ) )
assertEquals ( "1.1" , version )
assert modules . remove ( 0 ) instanceof JavaUrlHttpCommandExecutorServiceModule
assert modules . remove ( 0 ) instanceof JavaUrlHttpCommandExecutorServiceModule
assertEquals ( expectedVersion , version . toString ( ) )
assertEquals ( testBlobstoreApi . getId ( ) , apiMetadata . getId ( ) )
assertEquals ( apiMetadata . getId ( ) , toTest . getId ( ) )
assertEquals ( iterable . iterator ( ) . next ( ) , initial . iterator ( ) . next ( ) )
assertEquals ( iterable , PagedIterables . advance ( initial , markerToNext ) )
assertEquals ( expectedValue , actualValue )
assertNull ( getInstance ( ) )
assertEquals ( toParse , dsDate )
assertNotNull ( dsDate )
assertEquals ( toParse , dsDate )
assertNotNull ( dsDate )
assertNotNull ( dsDate )
assertEquals ( "2022-01-01T00:00:00Z" , dsString )
assertEquals ( "2022-01-01T00:00:00Z" , dsString )
assertEquals ( "expectedDateFormat" , dsString )
assertEquals ( "Expected output" , expectedOutput , dsString )
assertEquals ( "GMT" , TimeZone . getTimeZone ( "UTC" ) . getID ( ) )
assertNotNull ( iso8601SecondsDateParse ( toParse ) )
assertNotNull ( iso8601DateParse ( toParse ) )
assertEquals ( myData . expected , dsString )
assertNotNull ( dsDate )
assertEquals ( "2011-11-07T11:19:13.38225Z" , date . toString ( ) )
assertEquals ( "2009-02-03T05:26:32.612278" , date . toString ( ) )
assertEquals ( "expectedString" , client . download ( "id" ) )
assertEquals ( XML , getStringResponse . getBody ( ) )
assertEquals ( "foo" , e . getMessage ( ) )
assertEquals ( 200 , response . getStatusCode ( ) )
assertEquals ( "http://locahost" , response . getFirstHeaderOrNull ( LOCATION ) )
assertEquals ( null , response . getFirstHeaderOrNull ( LOCATION ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertEquals ( now , options . getIfModifiedSince ( ) )
assertEquals ( new ContentRange ( 0 , 5 ) , options . getRange ( ) )
assertEquals ( 100 , options . getTail ( ) )
assertEquals ( 100 , options . getLimit ( ) )
assertEquals ( 100 , options . getStartAt ( ) )
assertEquals ( 100 , options . getStartAt ( ) )
assertEquals ( new ContentRange ( 0 , 5 , 10 , 100 ) , options . getRange ( ) )
assertNull ( options . getRange ( ) )
assertNotNull ( json2 )
assertThrows ( IllegalArgumentException . class , ( ) -> fromJson ( json , type ) )
assertThrows ( NullPointerException . class , ( ) -> {
assertEquals ( "http://leader" , fn . apply ( "leader" ) )
assertEquals ( "http://leader" , fn . apply ( "leader" ) )
assertEquals ( contentMetadata , create ( contentMetadata ) )
assertEquals ( fn . getEndpoint ( "1" ) , URI . create ( "http://1" ) )
assertEquals ( regionIds , filter . getRegionIds ( ) )
assertEquals ( ImmutableSet . of ( "us-east-1" ) , regionIds )
assertEquals ( zoneIds , filter . getZoneIds ( ) )
assertEquals ( ImmutableSet . of ( "us-east-1a" , "us-east-1b" ) , zoneIds )
assertEquals ( "expectedValue" , < AssertPlaceHolder >  )
assertEquals ( "zone2" , zoneIdsSupplier . get ( ) . iterator ( ) . next ( ) )
assertEquals ( "Expected NoSuchElementException" , e . getMessage ( ) )
assertEquals ( "expectedValue" , fn . get ( ) )
assertEquals ( "Expected NoSuchElementException" , e . getMessage ( ) )
assertEquals ( "expectedValue" , fn . get ( ) )
assertEquals ( "Expected NoSuchElementException" , e . getMessage ( ) )
assertEquals ( "expectedValue" , fn . get ( ) )
assertEquals ( "expectedValue" , fn . get ( ) )
assertEquals ( "expectedValue" , ? ? ? )
assertEquals ( "expectedValue" , ? ? ? )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Expected NoSuchElementException" )
assertEquals ( ImmutableSet . of ( provider ) , supplier . get ( ) )
assertEquals ( "expectedValue" , fn . get ( ) )
assertEquals ( 0 , fields . size ( ) )
assertEquals ( 1 , fields . size ( ) )
assertEquals ( 2 , fields . size ( ) )
assertEquals ( null , apiMd . getBuildVersion ( ) )
assertEquals ( Integer . MAX_VALUE , session )
assert providerMetadata . getLinkedServices ( ) . contains ( toTest . getId ( ) )
assert ! useProxyForSockets . getBoolean ( proxy )
"<AssertPlaceHolder>"
assertEquals ( config . getType ( ) , Proxy . Type . DIRECT )
assertEquals ( "https://example.com/file" , uri . toString ( ) )
assertNotNull ( uri )
config . getType ( ) == Proxy . Type . DIRECT
assertEquals ( factory . create ( blob2ContentMd . apply ( from ) , blob2SysMd . apply ( from ) , userMd ) , ? ? ? )
assertEquals ( factory . create ( blob2ContentMd . apply ( from ) , blob2SysMd . apply ( from ) , userMd ) , ? ? ? )
assertEquals ( test , jvm )
assertEquals ( "Hello World" , result . getElem ( ) )
assertEquals ( "Hello World" , result . getElem ( ) )
assertEquals ( "<test><elem>Hello World</elem></test>" , result )
assertEquals ( "PATCH" , testPATCH . method )
assertEquals ( client , requestsSendResponses ( ImmutableMap . < HttpRequest , HttpResponse > of ( ) ) )
assertEquals ( "expectedValue" , client . foo ( ) )
assertNotNull ( request . getRawContent ( ) )
assertNotNull ( request )
obj . getElem ( ) . equals ( "foo" )
assertEquals ( "100-Continue" , request . getFirstHeaderOrNull ( HttpHeaders . EXPECT ) )
assertEquals ( AuthorizationException . class , authException . get ( ) . getClass ( ) )
assertNotNull ( authException . get ( ) )
assertNotNull ( authException . get ( ) )
assertNotNull ( authException . get ( ) )
assertEquals ( AuthorizationException . class , authException . get ( ) . getClass ( ) )
assertEquals ( AuthorizationException . class , authException . get ( ) . getClass ( ) )
assertNotNull ( authException . get ( ) )
assertEquals ( 0 , password . length ( ) )
assertThat ( duration , both ( greaterThanOrEqualTo ( 3000 - EARLY_RETURN_GRACE ) ) . and ( lessThanOrEqualTo ( 3000 + SLOW_BUILD_SERVER_GRACE ) ) )
assertThat ( predicate . apply ( null ) , is ( nullValue ( ) ) )
assertCallTimes ( rawPredicate . callTimes , 0 )
assertNotNull ( factory . create ( blob2ContentMd . apply ( from ) , blob2SysMd . apply ( from ) , userMd ) )
assertThat ( predicate . test ( "input" ) ) . isTrue ( )
assertThat ( actual . size ( ) , is ( expected . length ) )
assertEquals ( "expectedValue" , get ( ) )
assertEquals ( null , dateService . rfc822DateFormat ( ) )
assertEquals ( dateService . rfc822DateFormat ( ) , "<AssertPlaceHolder>" )
assertEquals ( "bar" , combined . get ( ) )
assertNotNull ( b )
assertNotNull ( dsDate )
assertEquals ( "rabbit" , contents )
assertEquals ( loadbalancer . getNodes ( ) . size ( ) , nodes . size ( ) )
assert defaultTemplate . getImage ( ) . getProviderId ( ) . startsWith ( "ami-" ) : defaultTemplate
assertEquals ( "mykeypair" , options . getKeyPair ( ) )
options . assertKeyPairIsNull ( )
assertEquals ( "mykeypair" , options . getKeyPair ( ) )
assert ! options . shouldAutomaticallyCreateKeyPair ( )
options . shouldAutomaticallyCreateKeyPair ( )
options . shouldAutomaticallyCreateKeyPair ( )
assert options . isMonitoringEnabled ( )
assertNotNull ( options . getPrivateKey ( ) )
assertNull ( options . getPrivateKey ( ) )
assertNotNull ( options )
assertEquals ( "ssh-rsa" , options . getPublicKey ( ) . getAlgorithm ( ) )
assertNotNull ( options . getPublicKey ( ) )
assertEquals ( "ssh-rsa" , options . getPublicKey ( ) . getAlgorithm ( ) )
options . iamInstanceProfileArn ( "arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Webserver" )
options . assertIAMInstanceProfileArnIsNull ( )
assertEquals ( "arn:aws:iam::123456789012:instance-profile/application_abc/component_xyz/Webserver" , options . getIAMInstanceProfileArn ( ) )
assertEquals ( "Webserver" , options . getIAMInstanceProfileName ( ) )
options . assertIAMInstanceProfileNameIsNull ( )
assertEquals ( "Webserver" , options . getIAMInstanceProfileName ( ) )
options . getPrivateIpAddress ( ) . equals ( "10.0.0.1" )
assertEquals ( Tenancy . DEDICATED , options . getTenancy ( ) )
assertEquals ( Tenancy . HOST , options . getTenancy ( ) )
assertEquals ( "hostId-1234" , options . get ( DedicatedHostId . class ) . get ( ) )
assertEquals ( "hostId-5678" , options . getDedicatedHostId ( ) )
assertEquals ( subnet . getSubnetId ( ) , subnetFound . getSubnetId ( ) )
assertEquals ( subnet . getSubnetId ( ) , subnetFound . getSubnetId ( ) )
assertEquals ( true , result )
assertEquals ( true , detached )
assertEquals ( 1 , monitoringState . size ( ) )
assertEquals ( 0 , monitoringState . size ( ) )
assertEquals ( 1 , allResults . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "10.0.0.0/16" , vpc . getCidrBlock ( ) )
assertEquals ( size , vpcs . size ( ) )
assertEquals ( "test" , options . getExecutableBy ( ) )
assertNotNull ( options )
assertEquals ( dateService . rfc822DateFormat ( ) , "<expected value>" )
assertEquals ( "test" , options . getOwners ( ) . get ( 0 ) )
assertEquals ( dateService . rfc822DateFormat ( ) , options . get ( ) )
assertEquals ( "test" , options . getOwners ( ) . get ( 0 ) )
assertEquals ( "test" , options . getImageIds ( ) )
assertNotNull ( options )
assertEquals ( "test" , options . getImageIds ( ) )
assertEquals ( "test" , options . getKeyName ( ) )
options . getKeyName ( ) , null )
assertEquals ( "test" , options . getKeyName ( ) )
assertEquals ( "test" , options . getSecurityGroup ( ) )
assertNull ( options . getSecurityGroups ( ) )
assertEquals ( "test" , options . getSecurityGroups ( ) . get ( 0 ) )
assertEquals ( "test" , options . getSecurityGroupId ( ) )
assertNotNull ( options )
assertEquals ( "test" , options . getSecurityGroupId ( ) )
options . getAdditionalInfo ( ) , is ( nullValue ( ) )
assertEquals ( "test" . getBytes ( ) , options . getUserData ( ) )
options . getUserData ( ) == null
assertEquals ( "test" . getBytes ( ) , options . getUserData ( ) )
assertEquals ( InstanceType . C1_XLARGE , options . getInstanceType ( ) )
assertNull ( options . get ( ) )
assertEquals ( InstanceType . C1_XLARGE , options . getInstanceType ( ) )
assertEquals ( "test" , options . getKernelId ( ) )
options . getKernelId ( ) , is ( nullValue ( ) )
assertEquals ( "test" , options . getKernelId ( ) )
assertEquals ( true , options . isMonitoringEnabled ( ) )
assertNull ( options )
assertNotNull ( options )
assertEquals ( "test" , options . getSubnetId ( ) )
assertNull ( options . getSubnetId ( ) )
assertEquals ( "test" , options . getSubnetId ( ) )
assertNull ( options . getIAMInstanceProfileArn ( ) )
assertEquals ( "Webserver" , options . getIAMInstanceProfileName ( ) )
assertNull ( options . getIAMInstanceProfileName ( ) )
assertEquals ( "Webserver" , options . getIAMInstanceProfileName ( ) )
assertEquals ( "test" , options . getRamdisk ( ) )
assertNotNull ( options )
assertEquals ( "test" , options . getRamdiskId ( ) )
assertNull ( options . getVirtualName ( ) )
assertNotNull ( options )
assertEquals ( "10.0.0.1" , options . getPrivateIpAddress ( ) )
assertNull ( options . getTenancy ( ) )
assertEquals ( Tenancy . DEDICATED , options . getTenancy ( ) )
assertEquals ( Tenancy . HOST , options . getTenancy ( ) )
assertNull ( options . getDedicatedHostId ( ) )
assertEquals ( "hostId-1234" , options . getDedicatedHostId ( ) )
assertEquals ( "hostId-5678" , options . getDedicatedHostId ( ) )
assertEquals ( "Expected date format" , expectedDateFormat , dateService . rfc822DateFormat ( ) )
assertEquals ( "expectedValue" , options . getProductName ( ) )
assertEquals ( "test" , options . getInstanceType ( ) )
assertEquals ( "expectedValue" , options . getInstanceType ( ) )
assertEquals ( expected , options . getFrom ( ) )
options . getStartDate ( ) . equals ( test . getStartDate ( ) )
assertEquals ( test , options . getTo ( ) )
options . getStartDate ( ) . equals ( dateService . rfc822DateFormat ( ) )
assertEquals ( "test" , options . getAvailabilityZoneGroup ( ) )
assertEquals ( "test" , options . getAvailabilityZoneGroup ( ) )
assertEquals ( "test" , options . getLaunchGroup ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "PERSISTENT" , options . getType ( ) . toString ( ) )
assertEquals ( "PERSISTENT" , options . getType ( ) . toString ( ) )
assertEquals ( blob . getPayload ( ) , compare . getPayload ( ) )
assertEquals ( request . getPayload ( ) , compare . getPayload ( ) )
assertEquals ( compare , signedRequest )
assertEquals ( "http://ACCOUNT.blob.core.windows.net/?comp=list" , host . toString ( ) )
assertEquals ( "isPublic()" , toString ( ) )
assertEquals ( "http://ACCOUNT.blob.core.windows.net/mycontainer?comp=list" , host . toString ( ) )
assertEquals ( "isPublic()" , filter . toString ( ) )
assertEquals ( expected , request . getURI ( ) . toString ( ) )
assertEquals ( "http://localhost:10000" , target . getEndpoint ( ) . toString ( ) )
assertEquals ( "http://localhost:10000/account" , target . get ( ) )
assertEquals ( "expectedValue" , target . get ( ) )
assertEquals ( "https://foo2.blob.core.windows.net/" , target . getEndpoint ( ) . toString ( ) )
assertEquals ( "https://foo2.blob.core.windows.net/" , target . getEndpoint ( ) . toString ( ) )
assert response . size ( ) == initialContainerCount + 1
assertEquals ( 1 , list . getBlobs ( ) . size ( ) )
assertEquals ( "expectedValue" , activityAlert . getType ( ) )
assertEquals ( alertRuleName , activityLogAlertRule . getName ( ) )
assertThat ( alertRulePresent ) . isTrue ( )
assertEquals ( alertId , alert . getId ( ) )
assertEquals ( expectedHistory , history )
assertEquals ( 0 , summary . getAlertCount ( ) )
assertThrows ( NoSuchElementException . class , ( ) -> {
assertEquals ( availabilitySet , api ( ) . getAvailabilitySet ( ) )
assertSent ( server , "GET" , "/subscriptions/" + subscriptionId + "/resourcegroups/" + resourceGroup + "/providers/microsoft.resources/deployments/" + deploymentName + "?api-version=2016-02-01" )
assertThat ( deployments . size ( ) ) . isEqualTo ( size )
assertThat ( deployments . size ( ) , is ( 0 ) )
assertThat ( uri . toString ( ) ) . isEqualTo ( "https://management.azure.com/subscriptions/" + subscriptionId + "/operationresults/eyJqb2JJZCI6IlJFU09VUkNFR1JPVVBERUxFVElPTkpPQi1SVEVTVC1DRU5UUkFMVVMiLCJqb2JMb2NhdGlvbiI6ImNlbnRyYWx1cyJ9?api-version=2014-04-01" )
assertThat ( uri . toString ( ) ) . isEqualTo ( "/subscriptions/" + subscriptionId + "/resourcegroups/" + resourceGroup + "/providers/microsoft.resources/deployments/" + deploymentName + "?api-version=2016-02-01" )
assertFalse ( api ( ) . deleteDiskResource ( "resourceName" ) )
assertEquals ( uri , expectedUri )
assertNotNull ( currentUser . getAppId ( ) )
assertNotNull ( currentUser . getAppId ( ) )
assertEquals ( 0 , StreamSupport . stream ( alarmNames . spliterator ( ) , false ) . count ( ) )
assertEquals ( imageName , image . getName ( ) )
assertEquals ( dateService . rfc822DateFormat ( ) , "<expected value>" )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( dateService . rfc822DateFormat ( ) , "<AssertPlaceHolder>" )
assertEquals ( 1 , api ( ) . getLocalNetworkGateway ( ) . size ( ) )
assertNotNull ( metricAlert )
assertEquals ( alertRuleName , rule . getName ( ) )
assertThat ( alertRulePresent ) . isTrue ( )
assertEquals ( 1 , nicList . size ( ) )
assertEquals ( nicList . size ( ) , < expectedSize >  )
assertEquals ( URI . create ( "https://api.example.com/networksecuritygroups/" + nsgName ) , uri )
assertEquals ( 404 , uri . getStatusCode ( ) )
assertNotNull ( rule )
assertThat ( publishers . size ( ) ) . isEqualTo ( size )
assertEquals ( 0 , total )
assertEquals ( false , status )
assertEquals ( size , ipList . size ( ) )
assertEquals ( size , ipList . size ( ) )
assertEquals ( true , status )
assertThat ( storages . size ( ) , is ( equalTo ( < expectedSize > ) ) )
assertEquals ( true , isAvailable ( "testName" ) )
assertThrows ( ResourceNotFoundException . class , ( ) -> {
assertEquals ( size , subnets . size ( ) )
assertEquals ( true , status )
assertEquals ( vaultName , vaultFound . getName ( ) )
assertEquals ( name , vault . getName ( ) )
assertSent ( server , "DELETE" , path )
assertEquals ( expectedDeletedVault , dv )
assertEquals ( vault . getName ( ) , name )
assertEquals ( keyBundle . getCreated ( ) , created )
assertNotNull ( key )
assertEquals ( KEY_NAME , keyBundle . getKey ( ) . getName ( ) )
dkb . getKey ( ) . getName ( ) . equals ( KEY_NAME )
assertEquals ( true , recoverableKeyStatus . create ( resourceGroupName , vaultUri , false ) . apply ( RECOVERABLE_KEY_NAME ) )
assertNotNull ( key . deletedDate ( ) )
assertNotNull ( key . deletedDate ( ) )
assertNotNull ( secretBundle )
assertNotNull ( secret )
assertNotNull ( secret )
assertNotNull ( dsb )
assertNotNull ( secret . deletedDate ( ) )
assertNotNull ( dsb . deletedDate ( ) )
assertEquals ( certPem , certBundle . getCertificate ( ) . getPem ( ) )
assertNotNull ( certBundle )
assertNotNull ( dcb )
assertEquals ( certOp . getStatus ( ) , CertificateOperationStatus . PENDING )
assertEquals ( certOp . getStatus ( ) , CertificateOperationStatus . DELETED )
assertEquals ( "GlobalSign" , issuer . getIssuerName ( ) )
assertEquals ( "GlobalSign" , issuer . getName ( ) )
assertEquals ( contactsIn , contacts . getContacts ( ) )
assertEquals ( policy , < expectedPolicy >  )
assertNotNull ( dc . deletedDate ( ) )
assertNotNull ( dcb . deletedDate ( ) )
AssertPlaceHolder = "Assert.assertNotNull(dcb);"
assertEquals ( vmName , vm . getName ( ) )
assertEquals ( vmName , vm . getName ( ) )
assertEquals ( expectedStatuses , vmi . getStatuses ( ) )
assertThat ( vmPresent ) . isTrue ( )
assertThat ( vmPresent ) . isTrue ( )
assertEquals ( vmssName , vmss . getName ( ) )
assertEquals ( 0 , vmssAPI . list ( ) . size ( ) )
vmssAPI . name ( "expectedName" )
assertEquals ( false , status )
assertEquals ( true , status )
assertEquals ( 1 , api ( ) . getVirtualNetworkGateway ( ) . size ( ) )
assertNotNull ( factory . create ( blob2ContentMd . apply ( from ) , blob2SysMd . apply ( from ) , userMd ) )
assertEquals ( 1 , api ( ) . getVirtualNetworkGatewayConnection ( ) . size ( ) )
assertEquals ( "http://localhost" , filtered . getEndpoint ( ) . toString ( ) )
assertEquals ( "Invalid bucket ID" , iae . getMessage ( ) )
assertEquals ( status , function . apply ( status ) )
assertEquals ( ImmutableSet . of ( 1 , 2 , 3 ) , options . getSshKeyIds ( ) )
assertEquals ( true , options . getPrivateNetworking ( ) )
assertEquals ( true , options . getBackupsEnabled ( ) )
assertThat ( options . isAutoCreateKeyPair ( ) ) . isFalse ( )
assertEquals ( userData , options . getUserData ( ) )
assertThat ( snapshots . size ( ) , equalTo ( expectedSize ) )
assertThat ( backups ) . isNotNull ( )
assertNodeTerminated ( dropletId )
assertEquals ( size , keys . size ( ) )
assertEquals ( size , keys . size ( ) )
assertEquals ( "jclouds-test-dsa-updated" , api ( ) . update ( dsa . id ( ) , "jclouds-test-dsa-updated" ) )
assertNotNull ( fingerPrint )
assertEquals ( "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZz6z3z..." , encodeAsOpenSSH ( key ) )
assertNotNull ( fingerPrint )
assertEquals ( "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZz6X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0z3X0
AssertPlaceHolder = "assertNotNull(groupDetail);"
assertEquals ( null , api ( ) . getZone ( "notFound" ) )
assertEquals ( 0 , api ( ) . deleteZone ( zoneId ) )
assertEquals ( size , adapter . size ( ) )
assertNotNull ( apply ( from ) )
assertEquals ( clazz , options . as ( clazz ) )
assertEquals ( options . getClass ( ) , GleSYSTemplateOptions . class )
assertEquals ( "1.1.1.1" , options . getIp ( ) )
assertEquals ( "1.1.1.1" , options . getIpAddress ( ) )
assertEquals ( "expectedRootPassword" , getRootPassword ( ) )
assertEquals ( "secret" , options . getRootPassword ( ) )
assertEquals ( "secret" , options . getRootPassword ( ) )
assertEquals ( options . getClass ( ) , GleSYSTemplateOptions . class )
assertEquals ( 75 , options . getTransferGB ( ) )
assertNotNull ( options )
assertNotNull ( archiveApi . apply ( blobMetadata ) )
assertEquals ( archiveUser , details . getUsername ( ) )
assertEquals ( "another-tester.jclouds.org." , domain . getResponsiblePerson ( ) )
assertEquals ( before - 1 , domainRecords . size ( ) )
assertEquals ( size , accounts . size ( ) )
assertEquals ( null , api . getServerDetails ( ) )
assertEquals ( "GET http://momma/ HTTP/1.1" , getRequestLine ( ) )
assertEquals ( "GET http://momma/ HTTP/1.1" , getRequestLine ( ) )
assertEquals ( "GET http://momma/?input=hello&input=world HTTP/1.1" , request . getRequestLine ( ) )
assertThat ( options ) . isInstanceOf ( GoGridTemplateOptions . class )
assertEquals ( 1 , response . size ( ) )
assertEquals ( dateService . rfc822DateFormat ( ) , "<expected value>" )
assertNotNull ( options )
response . size ( ) > 0
assertEquals ( "Bucket name is not correct" , BUCKET_NAME , template . getName ( ) )
assertEquals ( 404 , response . getStatus ( ) )
response . size ( ) > 0
assertEquals ( expectedImageUrl , nodeMetadata . getImageUrl ( ) )
assertNotNull ( addresses )
assertNotNull ( service )
assertThat ( backendServicesAsList . size ( ) , is ( size ) )
disk . getName ( ) . equals ( DISK_NAME )
assertThat ( disksAsList . size ( ) , equalTo ( 1 ) )
assertNotNull ( disk )
assertDiskTypeEquals ( diskType , this . diskType )
assertThat ( firewall ) . isEqualTo ( patchedFirewall )
assertEquals ( FIREWALL_NAME , firewalls . next ( ) . getName ( ) )
forwardingRule . size ( )
assertThat ( forwardingRule ) . isEqualTo ( expected )
forwardingRules . size ( )
httpHealthCheck . size ( ) == size
assertNotNull ( image )
assertNotNull ( selfLink ( ) )
assertNotNull ( instance )
assertThat ( modifiedInstance . getDisks ( ) ) . doesNotContain ( disk )
assertThat ( instancesAsList . size ( ) , is ( equalTo ( 1 ) ) )
assertThat ( originalInstance . status ( AsyncJob . Status . STOPPED ) ) . isEqualTo ( AsyncJob . Status . STOPPED )
assertNotNull ( machineType )
assertNotNull ( network )
assertThat ( networksAsList . size ( ) , is ( equalTo ( 1 ) ) )
assertNotNull ( region )
assertEquals ( ROUTE_NAME , route . getName ( ) )
assertThat ( routesAsList . size ( ) , is ( equalTo ( 1 ) ) )
snapshot . getName ( ) . equals ( name )
assertThat ( snapshotsAsList . size ( ) , is ( 1 ) )
assertNotNull ( api . networks ( ) . get ( SUBNETWORK_NAME ) )
subnet . getName ( ) . equals ( SUBNETWORK_NAME )
assertThat ( subnetsAsList . size ( ) , is ( equalTo ( 1 ) ) )
assertThat ( targetHttpProxy , equalTo ( getUrlMapUrl ( TARGET_HTTP_PROXY_URL_MAP_NAME ) ) )
assertThat ( targetHttpProxies . size ( ) ) . isEqualTo ( 1 )
assertThat ( targetInstances . size ( ) , is ( 1 ) )
targetPool . size ( size )
assertNotNull ( urlMap )
assertThat ( urlMaps . size ( ) ) . isEqualTo ( size )
assertEquals ( expected , results )
assertNotNull ( zone )
assertNodeTerminated ( deviceId )
assertEquals ( "device-number" , actual . deviceNumber ( ) )
assertEquals ( 15 , completedJobs . get ( ) )
assertEquals ( "expectedValue" , focalMethod . get ( ) )
assertEquals ( expected , actual )
assertNotNull ( dc )
assertEquals ( null , dataCenter )
assertThat ( result ) . isFalse ( )
assertEquals ( 0 , dataCenterApi ( ) . getDataCenter ( dcId ) . getServers ( ) . size ( ) )
assertEquals ( dataCenter , null )
assertEquals ( result , true )
assertEquals ( result , false )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertNotNull ( result )
assertEquals ( firewall , null )
assertEquals ( result , true )
assertEquals ( result , true )
assertEquals ( result , true )
assertEquals ( result , true )
assertEquals ( result , true )
assertEquals ( result , false )
assertEquals ( result , true )
assertEquals ( result , true )
assertEquals ( 0 , imageApi ( ) . listImages ( ListImagesOptions . Builder . id ( id ) ) . size ( ) )
assertEquals ( image , null )
assertNotNull ( ipBlock )
assertNotNull ( requestId )
assertEquals ( ipBlock , null )
assertEquals ( ipBlocks . size ( ) , 1 )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertNotNull ( createdId )
assertNotNull ( result )
assertEquals ( loadBalancer , null )
assertNotNull ( nicId )
assertEquals ( expectedNics . size ( ) , nics . size ( ) )
assertNotNull ( result )
assertEquals ( nic , null )
assertEquals ( nics . size ( ) , expectedSize )
assertEquals ( result , true )
assertEquals ( result , false )
assertNotNull ( serverId )
assertNotNull ( result )
assertEquals ( srvr , null )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertEquals ( request . getBody ( ) . readUtf8 ( ) , payloadSoapWithBody ( content ) )
assertEquals ( result , true )
assertEquals ( result , false )
assertNotNull ( snapshot )
assertNotNull ( requestId )
assertTrue ( snapshotAvailable . apply ( snapshotId ) , String . format ( "Snapshot %s wasn't available in the configured timeout" , snapshotId ) )
assertEquals ( snapshot , null )
assertEquals ( result , true )
assertEquals ( result , false )
assertNotNull ( storageId )
assertNotNull ( result )
assertEquals ( storage , null )
assertEquals ( result , true )
assertEquals ( result , false )
assertThat ( ex . getMessage ( ) , containsString ( "404" ) )
assertEquals ( "Request should have failed" , ex . getMessage ( ) )
assertThat ( ex . getMessage ( ) , containsString ( "Unauthorized" ) )
assertThat ( ex . getMessage ( ) , containsString ( "Request should have failed." ) )
assertEquals ( "Request should have failed." , ex . getMessage ( ) )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertEquals ( "expectedLoadBalancerId" , loadBalancerId )
assertEquals ( "expectedNicId" , nicId )
assertEquals ( "expectedValue" , serverId )
assertEquals ( "expectedValue" , storageId )
assertEquals ( "some notes" , request . getRawContent ( ) )
assertEquals ( "" , request . getRawContent ( ) )
assertEquals ( ImmutableSet . of ( "jclouds" ) , tags )
assertNotNull ( best )
assertNotNull ( best )
assertEquals ( "root" , best . getUsername ( ) )
assertEquals ( clazz , options . as ( clazz ) )
assertEquals ( "expectedDomainName" , options . getDomainName ( ) )
assertEquals ( "me.com" , options . getDomainName ( ) )
assertEquals ( "me.com" , options . getDomainName ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( response . size ( ) , is ( size ) )
assertEquals ( "expectedName" , name )
assertEquals ( "expectedNotes" , notes )
assertEquals ( 1 , network . getSubnets ( ) . size ( ) )
assertEquals ( null , found )
assertNotNull ( configurationOption )
assertEquals ( VirtualGuest . State . PAUSED , found . getPowerState ( ) . getKeyName ( ) )
assertEquals ( VirtualGuest . State . RUNNING , found . getPowerState ( ) . getKeyName ( ) )
assertNotNull ( virtualGuestBlockDeviceTemplateGroup )
assertEquals ( geoGroupId , getGroup ( ) )
assertEquals ( null , api ( ) . get ( guid ) )
assertEquals ( null , api ( ) . getTask ( "notFound" ) )
assertEquals ( null , getNameByDName ( "testHostName" ) )
assertEquals ( null , getRecordSpec ( poolRecordID ) )
assertEquals ( HttpStatus . NOT_FOUND , exception . getStatusCode ( ) )
assertEquals ( null , api ( ) . getZone ( "notFound" ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( from . getId ( ) , ? ? ? )
assertEquals ( from . getId ( ) , "<expectedId>" )
assertEquals ( from . getUserMetadata ( ) , userMd . getMetadata ( ) )
assertEquals ( from . getUserMetadata ( ) , userMd . getMetadata ( ) )
assertEquals ( from . getId ( ) , ? ? ? )
assertEquals ( from . getId ( ) , "<expectedId>" )
assertEquals ( from . getUserMetadata ( ) , userMd . getMetadata ( ) )
assertEquals ( from . getUserMetadata ( ) , userMd . getMetadata ( ) )
assertEquals ( factory . create ( blob2ContentMd . apply ( from ) , blob2SysMd . apply ( from ) , userMd ) , ? ? ? )
assertEquals ( null , ? ? ? )
assertEquals ( size , builder . size ( ) )
assertEquals ( size , builder . size )
assertEquals ( size , builder . size )
assertEquals ( ComputeServiceContext . class , context . unwrap ( ComputeServiceContext . class ) )
assertEquals ( "$brooklyn:config(\"p.parent\")" , child . getConfig ( ConfigKeys . newStringConfigKey ( "p.child" ) ) )
assertEquals ( child . getConfig ( "blueprint_yaml" ) , "services:\n- type: " + BasicEntity . class . getName ( ) )
assertNotNull ( entity . getConfig ( HasConfigKey . of ( "type" , String . class ) ) )
assertEquals ( TEST_VERSION , getVersion ( ) )
assertNotNull ( sl2 )
assertNotNull ( sl2 )
assertEquals ( "myDefaultParamVal" , entity . get ( TestEntity . ATTRIBUTE_AND_CONF_STRING ) )
assertNotNull ( entity . getConfig ( TestEntity . MY_OTHER_OBJ ) )
assertEquals ( "custom-type" , entity . getType ( ) )
assertEquals ( "hi0" , entity . getConfig ( ) . getBag ( ) . getStringKey ( "z" ) )
assertEquals ( "hi1" , entity . getConfig ( CustomTypeInitializerYamlTest . TestingCustomInitializerTypeFinal . class ) . getZ ( ) )
assertEquals ( "bar" , getConfigInTask ( testEntity , Sensors . newStringSensor ( "foo" ) ) )
assertEquals ( "bar" , getConfigInTask ( e2 , Sensors . newStringSensor ( "foo" ) ) )
assertEquals ( expectedValue , getConfigInTask ( testEntity , configKey ) )
assertEquals ( expectedValue , getConfigInTask ( testEntity , configKey ) )
assertEquals ( "Expected value" , expectedValue , getConfigInTask ( e2 , configKey ) )
assertThat ( testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "test.regex.config" ) ) ) . isEqualTo ( "somebarname" )
assertEquals ( "bar" , testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "test.regex.config" ) ) )
assertThat ( getConfigInTask ( e2 , ConfigKeys . < String > newConfigKey ( "key" ) ) , is ( "value" ) )
assertEquals ( "New Name" , entity . sensors ( ) . get ( TestEntity . NAME ) )
assertEquals ( "Foo Bar" , testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( "Foo Bar" , testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "test.dynamic.confName" ) ) )
assertEquals ( "Foo Bar" , testEntity . getConfig ( "confName" ) )
assertNotNull ( testEntity . getConfig ( "confName" ) )
assertThat ( testEntity . getConfig ( testConfigKeyAtRoot ( ) ) , is ( "Foo Bar" ) )
assertEquals ( dynamicConfNameValue , "Foo Bar" )
assertEquals ( "Foo Bar" , testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( "Foo Bar" , testEntity . getConfig ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertThat ( dynamicConfNameValue , is ( "Foo Bar" ) )
assertEquals ( "expectedValue" , object )
assertEquals ( "inchildspec" , child . getConfig ( ConfigKeys . newStringConfigKey ( "test.confName" ) ) )
assertNotNull ( child . getConfig ( ConfigKeys . newStringConfigKey ( "test.confName" ) ) )
assertEquals ( "inchildspec" , child . getConfig ( TestEntity . CONF_NAME ) )
assertEquals ( "inchildspec" , child . getConfig ( TestEntity . CONF_NAME ) )
assertEquals ( CustomTestEntityImpl . class , testEntity . getEntityType ( ) )
assertEquals ( "expectedValue" , entity . get ( key ) )
assertEquals ( parent , child . getConfig ( TestEntity . CONF_PARENT ) )
assertNotNull ( entity . getConfig ( TestEntity . CONF_OBJECT ) )
assertNotNull ( child . getConfig ( TestEntity . TEST_CONF_OBJECT ) )
assertEquals ( "myliteral" , val )
assertEquals ( "$brooklyn:external(\"myprovider\", \"mykey\")" , result )
assertEquals ( "$brooklyn:external(\"myprovider\", \"mykey\")" , getConfig ( MY_CONFIG_KEY ) )
assertEquals ( "$brooklyn:external(\"myprovider\", \"mykey\")" , app . get ( ConfigKeys . newStringConfigKey ( "my.config.key" ) ) )
assertEquals ( "my.config.key" , MY_CONFIG_KEY . getName ( ) )
assertEquals ( "$brooklyn:external(\"myprovider\", \"mykey\")" , entity . getAttribute ( SoftwareProcess . PROVISIONING_PROPERTIES ) . get ( "credential" ) )
assertEquals ( 1 , app . getLocations ( ) . size ( ) )
assertEquals ( "localhost:(name=myname)" , loc . getDisplayName ( ) )
assertEquals ( 1 , app . getLocations ( ) . size ( ) )
assertEquals ( "localhost:(name=loc1)" , loc . getDisplayName ( ) )
assertThat ( val , is ( notNullValue ( ) ) )
assertThat ( BrooklynObjectType . of ( testObject ) , equalTo ( BrooklynObjectType . UNKNOWN ) )
assertThat ( BrooklynObjectType . of ( testObject ) , equalTo ( BrooklynObjectType . UNKNOWN ) )
app . getAttribute ( key )
app . sensors ( ) . get ( key )
assertEquals ( true , constructorProps . get ( "winrm.useHttps" ) )
assertEquals ( "Test" , appMade . getDisplayName ( ) )
assertEquals ( "one" , grandchild . getName ( ) )
Asserts . assertNotNull ( eff )
Asserts . assertFailsWith ( expressionUnderTest , e -> Asserts . expectedFailureContainsIgnoreCase ( e , "unavailable" , "entity.attributeWhenReady.foo" , "Error resolving attribute" , "BasicEntity" ) )
assertEquals ( "unset" , expressionUnderTest . call ( ) )
assertEquals ( "bar" , x )
assertThat ( invocation . getUnchecked ( ) , is ( instanceOf ( Failure . class ) ) )
assertEquals ( "Test" , entity . getDisplayName ( ) )
assertNotNull ( item )
assertEquals ( "classpath:/org/apache/brooklyn/test/osgi/entities/icon.gif" , url )
assertEquals ( "Catalog addition expected to fail due to non-existent java type " + symbolicName , e . getMessage ( ) )
assertEquals ( "Catalog addition expected to fail due to non-existent java type " + versionedId , e . getMessage ( ) )
assertEquals ( "Expected exception to be thrown" , Exception . class , e . getClass ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( expectedValue , testEntity . getAttribute ( key ) )
assertEquals ( expectedValue , testEntity . get ( key ) )
assertEquals ( "expectedValue" , testEntity . get ( key ) )
assertEquals ( expectedValue , testEntity . get ( key ) )
assertNotNull ( testEntity . get ( AttributeSensor . class ) )
assertEquals ( expectedValue , testEntity . get ( key ) )
assertNotNull ( silly1 )
assertEquals ( "defaultNameInItemEntity" , entity . getDisplayName ( ) )
assertEquals ( "defaultNameInSuperItemEntity" , entity . getDisplayName ( ) )
assertEquals ( "defaultNameInEntity" , entity . getDisplayName ( ) )
assertNotNull ( item )
assertNotNull ( item )
assertNotNull ( catalogItem )
assertNotNull ( entity )
assertNotNull ( entity )
assertEquals ( referencedSymbolicName , entity . getEntityType ( ) . getSymbolicName ( ) )
assertEquals ( val , testEntity . config ( ) . get ( TestEntity . CONF_NAME ) )
assertEquals ( val , testEntity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( val , testEntity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( val , testEntity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "test.confName" ) ) )
assertEquals ( val , testEntity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( val , testEntity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "confName" ) ) )
assertEquals ( "My name in top-level" , spec . getDisplayName ( ) )
assertEquals ( "My name in item metadata" , spec . getDisplayName ( ) )
assertEquals ( "My name within item" , spec . getDisplayName ( ) )
assertEquals ( icon , item . getIconUrl ( ) )
assertEquals ( "0.2.0" , item . getVersion ( ) )
assertEquals ( "0.1.0" , item . getVersion ( ) )
assertEquals ( expectedType , app . getEntityType ( ) . getName ( ) )
assertEquals ( expectedType , app . getEntityType ( ) . getName ( ) )
assertEquals ( "Av2" , x . getDisplayName ( ) )
assertEquals ( "Av1" , x . getDisplayName ( ) )
assertEquals ( "Av1" , x . getDisplayName ( ) )
assertEquals ( SIMPLE_PARAM . getName ( ) , "simple" )
assertEquals ( spec . getType ( ) , testClass . getName ( ) )
assertEquals ( sensorSupplier1 , sensor . getName ( ) )
assertEquals ( "expectedValue" , val )
assertEquals ( "expectedValue" , val )
assertEquals ( "mySensorName" , sensor . getName ( ) )
assertEquals ( "myval" , val )
assertEquals ( "ENT2" , ent2 . getDisplayName ( ) )
assertEquals ( "ENT2" , ent2 . getConfig ( BrooklynCampConstants . PLAN_ID ) )
Asserts . assertEquals ( "dest" , y1 . toString ( ) )
assertEquals ( "expectedValue" , y2 )
assertEquals ( expectedValue , actualValue . get ( ) )
assertNotNull ( result . getUnchecked ( ) )
assertEquals ( getConfigEventually ( app , ConfigKeys . newStringConfigKey ( "dest" ) ) , app )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( entity . config ( ) . get ( configKey ) , blockingValue )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "myvalue" )
assertEquals ( "myvalue" , getConfigEventually ( app , ConfigKeys . newStringConfigKey ( "source" ) ) )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "$brooklyn:entity(\"sourceEntity\").config(\"source\")" )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "source" ) ) , "myvalue" )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "myvalue" )
assertEquals ( app . getId ( ) , getConfigEventually ( app , BrooklynConfigKeys . ENTITY_ID ) )
assertEquals ( child . entityId ( ) , getConfigEventually ( app , BrooklynConfigKeys . DEST ) )
assertEquals ( getConfigEventually ( app , TestApplication . MY_ATTRIBUTE ) , app . sensors ( ) . get ( TestApplication . MY_ATTRIBUTE ) )
assertEquals ( getConfigEventually ( app , ConfigKeys . newStringConfigKey ( "dest" ) ) , "$brooklyn:entity(\"sourceEntity\").sensor(\"test.myattribute\")" )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "$brooklyn:sensor(\"org.apache.brooklyn.core.test.entity.TestApplication\", \"test.myattribute\")" )
assertEquals ( literal , app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) )
assertEquals ( "Broooklyn" , app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "Broooklyn" )
assertThat ( replacementFn . apply ( "foo" ) , is ( "foo" ) )
assertThat ( replacementFn . apply ( "Broooklyn" ) , is ( "Booooklyn" ) )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( immediateValue . get ( ) , blockingValue )
assertEquals ( getConfigEventually ( app , ConfigKeys . newConfigKey ( TestDslSupplierValue . class , "targetValue" ) ) , new TestDslSupplierValue ( ) )
assertEquals ( dest , app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "test.sourceName" ) ) , "hello world and all" )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "test.sourceName" ) ) , "hello world" )
assertEquals ( app . config ( ) . get ( ConfigKeys . newStringConfigKey ( "dest" ) ) , "hello world" )
assertEquals ( Arrays . asList ( "hi" ) , app . tags ( ) )
app . tags ( ) . contains ( "myval" )
app . tags ( ) . contains ( "newStyle" )
app . tags ( ) . contains ( "oldStyle" )
app . config ( ) . get ( WEIGHT_CONFIG ) == - 1
assertEquals ( "Expected name" , "<expectedName>" , getName ( ) )
assertNotNull ( get ( key ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( v )
assertEquals ( true , item . entitledToSee ( entity ) )
assertEquals ( catalogItem , new BrooklynMementoRawDataBuilder ( symbolicName , version ) . build ( ) )
assertNotNull ( catalogItem )
assertNotNull ( catalogItem )
assertNotNull ( catalogItem )
assertEquals ( "brooklyn.catalog:\n" + " version: 1\n" + " items:\n" + " - id: test\n" + " itemType: template\n" + " item: |\n" + " # comment\n" + " type: " + BasicEntity . class . getCanonicalName ( ) + "\n" , item . getPlanYaml ( ) )
assertEquals ( "type: " + BasicEntity . class . getCanonicalName ( ) , item . getPlanYaml ( ) )
assertEquals ( "brooklyn.catalog:\n" + " version: 1\n" + " items:\n" + " - id: test\n" + " itemType: template\n" + " item: |\n" + " " + BasicEntity . class . getCanonicalName ( ) + "\n" , item . getPlanYaml ( ) )
assertEquals ( "brooklyn.catalog:\n" + " version: 1\n" + " items:\n" + " - id: test\n" + " itemType: template\n" + " item:\n" + " type: " + BasicEntity . class . getCanonicalName ( ) + "\n" , item . getPlanYaml ( ) )
assertThat ( result . getUpgradesProvidedByBundles ( ) . size ( ) ) . isZero ( )
assertThatThereAreNoUpgrades ( result )
assertThatBundleHasUpgrades ( result , upgradeFrom , upgradeTo )
assertThatBundleHasNoUpgrades ( result , unmanagedBundle )
assertThatBundleHasUpgrades ( result , upgradeFrom , upgradeTo )
assertThatBundleHasNoUpgrades ( result , upgradeFrom )
assertThat ( props . getConfig ( ConfigKeys . newStringConfigKey ( "brooklyn.mykey" ) ) ) . isEqualTo ( "myval" )
assertEquals ( "myval" , entity . get ( AttributeSensor . class ) )
assertEquals ( "myval1" , entity . get ( AttributeSensor . class ) )
assertEquals ( "myval" , child . get ( AttributeSensor . class ) )
assertEquals ( "myval" , loc . getConfig ( MyLocation . OLD_KEY_1 ) )
assertEquals ( "myval" , policy . getConfig ( ) . get ( "oldKey1" ) )
assertNotNull ( enricher . get ( AttributeSensor . class ) )
assertEquals ( "myval" , entity . config ( ) . get ( ConfigKeys . newStringConfigKey ( "oldKey1" ) ) )
assertEquals ( "private-key-file" , key2 . getName ( ) )
assertEquals ( v1 , entity . config ( ) . get ( TestEntity . CONF_MAP_PLAIN ) )
assertNull ( entity . config ( ) . getConfig ( TestEntity . CONF_SET_THING . subKey ( ) ) )
assertNull ( entity . config ( ) . get ( TestEntity . CONF_LIST_THING . subKey ( ) ) )
assertNull ( entity . config ( ) . get ( TestEntity . CONF_MAP_THING . subKey ( "akey" ) ) )
assertEquals ( Collections . emptyMap ( ) , sanitized )
assertNotNull ( ecs )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertNotNull ( ecs )
assertEqualsIgnoringOrder ( app . getLocs ( ) , locs )
assertEqualsIgnoringOrder ( col1 , col2 )
assertEqualsIgnoringOrder ( app . getLocations ( ) , locs )
assertThat ( BrooklynObjectType . of ( entity ) , is ( equalTo ( BrooklynObjectType . UNKNOWN ) ) )
assertNotNull ( BrooklynObjectType . of ( instance ) )
assertTrue ( failed )
assertEquals ( "expectedOutput" , output )
assertEquals ( "hi" , trim ( val ) )
assertEquals ( "The error if required PID is not found is: " , e . getMessage ( ) )
assertThat ( enricher . config ( ) . get ( MyEnricher . STR_KEY ) ) . isEqualTo ( "diffval" )
assertNotEquals ( "newval" , getConfig ( MyEnricher . STR_KEY ) )
assertNull ( enricher . getConfig ( MyConfigKey . DEFAULT_VALUE ) )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( child ) )
assertEquals ( i , nextSensor . getValue ( ) . intValue ( ) )
assertEquals ( 1 , map . get ( sensor ) . getValue ( ) )
assertEquals ( "red" , entity . sensors ( ) . get ( COLOR ) )
assertNull ( getAttribute ( sensor ) )
assertEquals ( 2 , t . get ( ) )
assertEquals ( "http://localhost:8081/" , t . get ( ) )
assertEquals ( "expectedValue" , regexReplacer . apply ( "inputValue" ) )
assertEquals ( "foo" , regexReplacer . apply ( "foo" ) )
assertEquals ( "somebartext" , result )
assertEquals ( "myentity" , entity . sensors ( ) . get ( TestEntity . NAME ) )
assertEquals ( 0 , entity . getEntityType ( ) . getEffectors ( ) . size ( ) )
assertNotNull ( getEntityType ( ) )
assertEquals ( "myname" , entity . sensors ( ) . get ( TestEntity . NAME ) )
assertEquals ( val , entity . sensors ( ) . get ( nextSensor ) )
assertEquals ( val , entity . config ( ) . get ( nextKey ) )
assertEquals ( numPrePolicies + NUM_TASKS , entity . policies ( ) . size ( ) )
assertEquals ( numPreEnrichers + NUM_TASKS , entity . enrichers ( ) . size ( ) )
assertEquals ( NUM_TASKS , entity . feeds ( ) . size ( ) )
assertNotNull ( entity . getConfig ( key ) )
assertThat ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) ) . isEqualTo ( "changed" )
assertThat ( entity . getConfig ( MySubEntity . SUPER_KEY_1 ) ) . isEqualTo ( "changed" )
assertThat ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) ) . isEqualTo ( "changed" )
assertThat ( entity . getConfig ( MySubEntity . SUPER_KEY_1 ) ) . isEqualTo ( "changed" )
assertThat ( entity . getConfig ( MySubEntity . SUPER_KEY_2 ) ) . isEqualTo ( "changed" )
assertNotNull ( child )
assertEquals ( "1m" , child . getConfig ( MyEntityWithDuration . DURATION_POSITIVE ) )
assertEquals ( "shouldIgnoreAndPreferFlagName" , entity . getConfig ( "myentity.myconfigwithflagname" ) )
assertEquals ( false , entity . getConfig ( intKeyWithDefault ) )
assertEquals ( false , entity . getConfig ( intKeyWithDefault ) )
assertNull ( entity . getConfig ( strKeyWithDefault ) )
assertEquals ( null , entity . getConfig ( strKeyWithDefault ) )
assertNotEquals ( "aval" , entity . getConfig ( strKey ) )
assertThat ( entity . config ( ) . get ( strKey ) ) . isEqualTo ( "diffval" )
assertEquals ( "diffval" , entity . config ( ) . get ( strKey ) )
assertThat ( entity . getConfig ( strKey ) ) . isEqualTo ( "aval" )
assertEquals ( expectedValue , entity . getConfig ( key ) )
assertThat ( entity . getConfig ( TestEntity . CONF_NAME ) ) . isEqualTo ( "aval" )
assertEquals ( "aval" , entity2 . getConfig ( TestEntity . CONF_NAME ) )
assertEquals ( "avalmysuffix" , entity2 . getConfig ( TestEntity . NAME ) )
assertThrows ( IllegalStateException . class , ( ) -> app . config ( ) . set ( strKey , "aval" ) )
assertEquals ( "myname" , entity . sensors ( ) . get ( TestEntity . NAME ) )
assertEquals ( val , displayName )
assertEquals ( x , AbstractResource . this . getId ( ) )
assertEquals ( 1 , entity . getLocations ( ) . size ( ) )
assertEquals ( "myval" , resolve ( configBag , key , executionContext ) )
assertNotNull ( BrooklynObjectType . of ( instance ) )
assertEquals ( "" , entity . getDisplayName ( ) )
assertEquals ( "myDisplayName" , entity . getDisplayName ( ) )
assertEquals ( "myDefaultName" , entity . getDisplayName ( ) )
assertEquals ( "myDisplayName" , entity . getDisplayName ( ) )
assertEquals ( "myDefaultName" , entity . getDisplayName ( ) )
assertEquals ( "myDefaultName" , app2 . getDisplayName ( ) )
assertEquals ( "myName" , app2 . getDisplayName ( ) )
assertEquals ( "/img/myicon.gif" , entity . getIconUrl ( ) )
assertEquals ( "myname" , entity . getConfig ( TestEntity . CONF_NAME ) )
assertEquals ( "Default Display Name" , entity . getDisplayName ( ) )
assertEquals ( "entityname" , entity . getDisplayName ( ) )
assertEquals ( "myOverriddenDefaultName" , entity . getDisplayName ( ) )
assertEquals ( "myEntityName" , entity . getDisplayName ( ) )
assertEquals ( BrooklynObjectType . UNKNOWN , of ( observedEntity ) )
assertEquals ( 123 , observedMemberEntity . sensors ( ) . get ( TestEntity . SEQUENCE ) )
assertEquals ( machine , entity . get ( Attributes . LOCATION ) )
assertEquals ( TestEntity . class , entity2 . getEntityType ( ) )
assertEquals ( "TestEntity" , entity2 . getSimpleName ( ) )
assertNotNull ( getEntityType ( ) )
assertEquals ( null , loc . getFlag ( ) )
assertEquals ( loc . getFlag ( ) , defaultValue )
assertEquals ( new SinglePort ( 0 ) , loc . fromInteger ( 0 ) )
assertThat ( BrooklynObjectType . of ( instance ) , equalTo ( BrooklynObjectType . UNKNOWN ) )
assertCollectionEqualsEventually ( removed , ImmutableSet . of ( new PolicyDescriptor ( policy1 ) , new PolicyDescriptor ( policy2 ) ) )
assertEquals ( "myval" , policy . getStr1 ( ) )
assertEquals ( "myval" , policy . getAltStr2 ( ) )
assertEquals ( "overridden str3" , policy . getStr3 ( ) )
assertEquals ( 1f , policy . getDouble1 ( ) )
assertEquals ( new SinglePort ( 0 ) , policy . fromInteger ( 0 ) )
assertEquals ( "1-3" , policy . getPortRange1 ( ) )
assertEquals ( 123 , policy . getInt1 ( ) )
assertEquals ( MyDriver . class , manager . getRegisteredDriver ( SshMachineLocation . class ) )
assertNotNull ( build ( entity , location ) )
assertEquals ( MyDriver . class , driver . getClass ( ) )
assertEquals ( MyDriver . class , driver . getClass ( ) )
assertEquals ( "myfile-myversion.tar.gz" , actual . getFilename ( ) )
assertEquals ( "myfile-myaddonversion.tar.gz" , actual . getFilename ( ) )
assertEquals ( "overridden.filename.tar.gz" , actual . getFilename ( ) )
assertThat ( result , is ( "version=myversion,type=,simpletype=" ) )
assertEquals ( "id=" + entityid , result )
assertEquals ( "id=" + driver . getEntity ( ) . getId ( ) , result )
assertEquals ( "version=overriddenversion,mykey1=myval1" , result )
assertEquals ( 5 , h . getAttribute ( HelloEntity . AGE ) )
assertThat ( son . getConfig ( HelloEntity . MY_NAME ) ) . isEqualTo ( "Dannyy" )
assertThat ( son . getConfig ( HelloEntity . MY_NAME ) ) . isEqualTo ( "Bob" )
assertNotNull ( result . getDisplayName ( ) )
assertNotNull ( entity2 )
assertThat ( entity2 . getConfig ( TestEntity . CONF_NAME ) ) . isEqualTo ( "foo" )
assertThat ( entity2 . getConfig ( TestEntity . CONF_NAME ) ) . isEqualTo ( "bar" )
assertEquals ( "baz" , entity2 . getConfig ( "confName" ) )
assertEquals ( "myentityid" , app . getId ( ) )
assertEquals ( "myglobalval" , val )
assertEquals ( storage . getMap ( "mykey" ) . put ( "k1" , "v1" ) , "<AssertPlaceHolder>" )
assertEquals ( "Outer Mongolia" , name )
assertEquals ( "myval" , loc . getMyField ( ) )
assertEquals ( loc . getField ( ) , defaultValue )
assertNotNull ( loc )
assertEquals ( "Outer Mongolia" , location . getDisplayName ( ) )
assertSame ( locationManager . getLocation ( loc . getId ( ) ) , loc )
assertEquals ( "My Foo" , l . getDisplayName ( ) )
assertNotNull ( getLocationRegistry ( ) )
assertEquals ( 123 , observedMemberEntity . sensors ( ) . get ( TestEntity . SEQUENCE ) )
assertEquals ( "myaddr" , entity . sensors ( ) . get ( Attributes . SUBNET_ADDRESS ) )
assertEquals ( expectedValue , entity . get ( key ) )
assertEquals ( expectedValue , entity . get ( key ) )
assertEquals ( "myval" , entity . sensors ( ) . get ( Attributes . SUBNET_HOSTNAME ) )
assertEquals ( "Expected hostname" , expectedHostname , entity . get ( TestEntity . HOSTNAME ) )
assertEquals ( "Expected hostname to be null" , null , entity . get ( TestEntity . HOSTNAME ) )
assertEquals ( "myval" , entity . sensors ( ) . get ( Attributes . ADDRESS ) )
assertEquals ( "myval" , entity . sensors ( ) . get ( Attributes . SUBNET_ADDRESS ) )
assertEquals ( "expected-val" , entity . sensors ( ) . get ( Attributes . ADDRESS ) )
assertEquals ( "expected-value" , entity . sensors ( ) . get ( Attributes . ADDRESS ) )
assertEquals ( "80, 8080, 8000, 8080-8099" , r . toString ( ) )
assertThat ( range . getStartPort ( ) , equalTo ( 80 ) )
assertNull ( p )
assertEquals ( 1240 , p )
assertEquals ( new UserAndHostAndPort ( "user" , HostAndPort . fromParts ( publicNatIp , publicNatPort ) ) , entity . getAttribute ( BrooklynAccessUtils . BROOKLYN_ACCESSIBLE_ADDRESS ) )
assertEquals ( new UserAndHostAndPort ( "user" , HostAndPort . fromParts ( publicNatIp , publicNatPort ) ) , TestEntity . fromParts ( "user" , HostAndPort . fromParts ( publicNatIp , publicNatPort ) ) )
assertEquals ( new UserAndHostAndPort ( "user" , HostAndPort . fromParts ( privateIp , privatePort ) ) , ? ? ? fromParts ( "user" , HostAndPort . fromParts ( privateIp , privatePort ) ) )
assertEquals ( acquiredPort , acquiredPort2 )
assertEquals ( 1234 , port )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "number999" , generateNewMachineUniqueName ( config ) )
assertEquals ( "foo-foo-bar-bar-baz-this" , config . getMachineName ( ) )
assertEquals ( "expectedValue" , ? ? ? )
assertTrue ( e instanceof NotEntitledException )
assertEquals ( ManagementNodeState . STOPPED , state . getNodeState ( ) )
assertThat ( job . isRunning ( ) ) . isFalse ( )
assertEquals ( "No provider found with name" , e . toString ( ) )
Asserts . assertEquals ( entity . sensors ( ) . get ( TestEntity . SEQUENCE ) , count . get ( ) )
Asserts . assertEquals ( 10 , listener . getEvents ( ) . size ( ) )
assertNotNull ( result . get ( ) )
assertEquals ( "expectedValue" , rename ( "inputValue" ) )
assertThat ( BrooklynObjectType . of ( instance ) ) . isEqualTo ( BrooklynObjectType . UNKNOWN )
assertThat ( accessor . get ( "abc" ) , is ( notNullValue ( ) ) )
assertThat ( accessor . exists ( ) , is ( true ) )
assertNotNull ( accessor . get ( "abc" ) )
assertThat ( accessor . get ( key ) ) . isEqualTo ( "abc\ndef" )
assertTrue ( accessor . exists ( ) )
assertEquals ( expectedForm , serializedForm . trim ( ) )
assertEquals ( reffer , reffer2 )
assertEquals ( reffer , reffer2 )
assertSame ( loc1 , loc2 )
assertEquals ( origMementoTidied , replaceAll ( origMemento , replacements ) )
assertEquals ( "myval" , newE . getConfig ( "myconfig" ) )
assertThat ( newE . getConfig ( TestApplication . MY_ATTRIBUTE ) , is ( "myval" ) )
assertEquals ( "myval" , newE . getAttribute ( myCustomAttribute ) )
assertEquals ( "mysensorval" , newE . getEvents ( ) . get ( 0 ) )
assertThat ( newE . getConfig ( HasConfigKey . of ( "confName" ) ) , is ( equalTo ( "myval" ) ) )
assertEquals ( "myval" , origApp . sensors ( ) . get ( MY_ATTRIBUTE ) )
assertThat ( type . getKind ( ) , is ( RegisteredTypeKind . CATALOG_ITEM ) )
assertEquals ( origLoc . getMyField ( ) , newLoc . getMyField ( ) )
assertEquals ( "myval" , newLoc . myTransientFieldNotSetFromFlag )
assertEquals ( "myval" , newLoc . getMyTransientFieldSetFromFlag ( ) )
assertEquals ( origLoc . getMyField ( ) , newLoc . getMyField ( ) )
assertEquals ( origApp . getAttribute ( TestEntity . ATTRIBUTE_NAME ) , newApp . getAttribute ( TestEntity . ATTRIBUTE_NAME ) )
assertEquals ( "newval" , newPolicy . getConfig ( MyPolicyReconfigurable . MY_CONFIG ) )
assertEquals ( new RenamedType ( "myfieldval" ) , newConfVal )
assertEquals ( origPredicate , newPredicate )
assertEquals ( BrooklynVersion . getInstance ( ) , INSTANCE )
assertEquals ( entry . getValue ( ) , enricher . getKey ( ) . matches ( regex ) )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( null ) )
assertEquals ( true , isPinned ( ) )
assertNotNull ( policy . getConfig ( MyPolicyWithDuration . DURATION_POSITIVE ) )
assertThat ( app . getConfig ( MyPolicy . STR_KEY ) ) . isEqualTo ( "diffval" )
assertThrows ( UnsupportedOperationException . class , ( ) -> policy . config ( ) . set ( MyPolicy . STR_KEY , "newval" ) )
assertThat ( policy . config ( ) . get ( MyPolicy . RECONFIGURABLE_KEY ) ) . isEqualTo ( "diffval" )
assertEquals ( expectedValue , policy . getConfig ( key ) )
assertEquals ( "aval" , policy . getConfig ( TestEntity . CONF_NAME ) )
Asserts . assertStringContainsIgnoreCase ( fooG [ 0 ] . toString ( ) , "list<foo>" , "Object" )
Asserts . assertInstanceOf ( deser ( "{\"type\":\"" + EmptyObject . class . getName ( ) + "\"}" ) , EmptyObject . class )
assertEquals ( Duration . minutes ( 5 ) , ? ? ? )
assertEquals ( "1b" , x . toString ( ) )
assertEquals ( "hello" , a . x )
Asserts . assertInstanceOf ( impl , SampleBean . class )
Asserts . assertInstanceOf ( impl , SampleBean . class )
assertEquals ( 0 , log . getErrorCount ( ) )
assertEquals ( "hello" , impl . getX ( ) )
assertEquals ( "null" , ser ( a . x , WrappedValue . class ) )
assertAttributeEventuallyNonNull ( entity , attribute )
assertEquals ( minRatePerSec , ? ? ? , 0.001 )
assertEquals ( numIterations , i [ 0 ] )
assertNull ( score )
assertThat ( score , equalTo ( expectedScore ) )
assertEquals ( true , entity . entitledToSee ( item ) )
Asserts . assertInstanceOf ( s , SleepWorkflowStep . class )
assertEquals ( 1 , output )
assertNotNull ( output )
assertEquals ( "EXPECTED_VALUE" , output )
assertEquals ( "{i=1, ii=2}" , output . toString ( ) )
assertEquals ( ConstraintViolationException . class , output . getClass ( ) )
assertEquals ( "2" , output )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( output ) )
assertEquals ( 10 , app . getCount ( ) )
EntityAsserts . assertAttributeEquals ( app , COUNT , 1 )
EntityAsserts . assertAttributeEquals ( app , COUNT , 15 )
EntityAsserts . assertAttributeEquals ( app , COUNT , 15 )
assertEquals ( 10 , app . getCount ( ) )
EntityAsserts . assertAttributeEquals ( app , COUNT , 10 )
assertEquals ( "should have failed" , lastInvocation . getUnchecked ( ) )
assertThrows ( IOException . class , ( ) -> {
assertEquals ( "one" , lastInvocation . getUnchecked ( ) . get ( "next" ) )
assertNotNull ( enr )
EntityAsserts . assertAttributeEqualsEventually ( entity , NUM3 , 5 )
assertNotNull ( func )
assertNull ( func . apply ( null ) )
assertNotNull ( func )
assertNotNull ( func )
assertEquals ( 5 , func . apply ( input ) )
assertEquals ( 10 , average )
assertEquals ( costPerMonth , costPerMonthFromParent )
EntityAsserts . assertAttributeEqualsEventually ( cluster , Attributes . SERVICE_STATE_ACTUAL , Lifecycle . RUNNING )
EntityAsserts . assertAttributeEqualsEventually ( cluster , Attributes . SERVICE_STATE_ACTUAL , Lifecycle . RUNNING )
assertEquals ( maxConcurrentCommands , cluster . getAttribute ( DynamicCluster . MAX_CONCURRENT_CHILD_COMMANDS ) )
assertEqualsIgnoringOrder ( group . getMembers ( ) , Collections . singletonList ( e1 ) )
assertEqualsIgnoringOrder ( col1 , col2 )
assertEquals ( group . getEntityFilter ( ) , Predicates . alwaysTrue ( ) )
assertEqualsIgnoringOrder ( col1 , col2 )
assertEqualsIgnoringOrder ( col1 , col2 )
assertEqualsIgnoringOrder ( group . getMembers ( ) , Collections . emptyList ( ) )
assertEquals ( 1 , group . getMembers ( ) . size ( ) )
assertEqualsIgnoringOrder ( result , Arrays . asList ( entity1 , entity2 ) )
assertEquals ( expectedValue , val )
assertEquals ( expectedResponseCode , actualResponseCode )
assertEquals ( expected , actual )
// </AssertPlaceHolder>
< AssertPlaceHolder >
assertThrows ( NoSuchElementException . class , ( ) -> apply ( entity ) )
assertEquals ( jsonElement , result )
assertEquals ( null , asJson ( null ) )
assertEquals ( 1000000 , pop . getAsInt ( ) )
assertEquals ( "wet" , weather )
pop . assertValue ( expectedValue )
assertEquals ( 1000000 , pop . getAsInt ( ) )
assertEquals ( 500 * 1000 , m . getAsJsonObject ( ) . get ( "population" ) . getAsInt ( ) )
assertEquals ( 500000 , obj )
assertEquals ( "edinburgh.lighting" , obj )
assertEquals ( null , obj )
assertEquals ( 2 , obj )
assertEquals ( 3 , obj )
assertEquals ( null , obj )
assertEquals ( expectedValue , val )
< AssertPlaceHolder >
assertEquals ( "expectedOutput" , ? ? ? testStdout ( ) . getOutput ( ) )
assertNull ( System . err )
assertEquals ( before + 1 , after )
assertEquals ( "byon(hosts=\"1.1.1.1\")" , brooklynProperties . get ( "brooklyn.location.named.mynamed" ) )
assertEquals ( "bob" , l . getUser ( ) )
assertEquals ( "bob" , getUser ( ) )
assertEquals ( expected , obtained . getHostAddress ( ) )
assertEquals ( ImmutableList . of ( "1.1.1.1" , "2.2.2.2" ) , flags . get ( "hosts" ) )
assertEquals ( defaultValue , getConfig ( key , defaultValue ) )
assertThat ( after , not ( equalTo ( before ) ) )
assertNull ( provisioner . get ( ConfigKeys . newConfigKey ( AttributeSensor . class , "key" ) ) )
assertNotNull ( obtained )
assertNotEquals ( obtained , obtained2 )
assertThat ( obtained , is ( equalTo ( desiredMachine ) ) )
assertEquals ( 1 , provisioner . getMachineCount ( ) )
assertEquals ( 1 , provisioner2 . getAllMachines ( ) . size ( ) )
assertEquals ( "host:(\"1.1.1.1\")" , brooklynProperties . get ( "brooklyn.location.named.mynamed" ) )
assertEquals ( "single(target=byon:(hosts=\"1.1.1.1\"))" , brooklynProperties . get ( "brooklyn.location.named.mynamed" ) )
assertEquals ( m1 , l . obtain ( ) )
assertEquals ( before + 1 , after )
assertNotNull ( resolve ( l ) )
assertEquals ( start , actual )
assertEquals ( start , i1 )
assertEquals ( "myname" , multiLoc . getDisplayName ( ) )
assertEquals ( "multi:(targets=byon:(hosts=\"1.1.1.1\"))" , brooklynProperties . get ( "brooklyn.location.named.mynamed" ) )
assertEquals ( before . size ( ) , after . size ( ) - 1 )
assertNotNull ( obtained )
assertEquals ( "expectedProviderName" , location . getPaasProviderName ( ) )
assertEquals ( expectedDetails , details )
assertEquals ( 0 , rc )
assertEquals ( expectedValue , get ( key ) )
assertEquals ( host . get ( customSshConfigKeys ( ) ) , host . get ( customSshConfigKeys ( ) ) )
assertEquals ( expectedValue , get ( key ) )
assertEquals ( "#!/bin/bash -e\n" , host . get ( SshTool . PROP_SCRIPT_HEADER ) )
assertEquals ( expectedValue , host2 . get ( key ) )
assertEquals ( values , testEntity . sensors ( ) . get ( DEFAULT_SENSOR ) )
assertEquals ( ImmutableSet . of ( 2 ) , testEntity . sensors ( ) . get ( DEFAULT_SENSOR ) )
assertThat ( url ) . isEqualTo ( BrooklynMavenArtifacts . localUrl ( "example" , "brooklyn-example-GOODBYE-world-sql-webapp" , "war" ) )
assertEquals ( "expectedValue" , readFullyStringAndClose ( stream ) )
assertEquals ( "" , readFullyStringAndClose ( stream ) )
assertEquals ( "" , readFullyStringAndClose ( stream ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "http://test%40me%3Atest@/auth_escape2" , url )
assertEquals ( "" , readFullyStringAndClose ( stream ) )
assertEquals ( "" , readFullyStringAndClose ( stream ) )
assertEquals ( "Expected redirected URL" , expectedUrl , utils . getResourceFromUrl ( baseUrl + "/redirect" ) )
assertEquals ( "" , readFullyStringAndClose ( stream ) )
assertEquals ( "mycontents" , lines . get ( 0 ) )
assertEquals ( stream , getResourceFromUrl ( "classpath://brooklyn/config/sample.properties" ) )
assertEquals ( stream , getResourceFromUrl ( "/brooklyn/config/sample.properties" ) )
assertEquals ( "expectedValue" , readFullyStringAndClose ( stream ) )
assertEquals ( "expectedValue" , readFullyStringAndClose ( stream ) )
assertTrue ( exists ( ) )
assertEquals ( "expected value" , "actual value" )
assertEquals ( "/java/lang" , d )
assertEquals ( "expectedValue" , readFullyStringAndClose ( stream ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "v1" , bag . get ( K1 ) )
assertNotNull ( bag . get ( K1 . getName ( ) ) )
assertNotNull ( bag2 . get ( K1 ) )
assertThat ( tt . getTypeName ( ) ) . isEqualTo ( "list<foo>" )
assertEquals ( HttpStatus . SC_OK , result . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_MOVED_TEMPORARILY , result . getStatusCode ( ) )
assertEquals ( HttpStatus . SC_OK , result . getStatusCode ( ) )
assertEquals ( expectedResult , result . getContent ( ) )
assertEquals ( HttpStatus . SC_OK , result . getStatusCode ( ) )
assertThat ( BrooklynObjectType . of ( s ) , equalTo ( BrooklynObjectType . UNKNOWN ) )
assertEquals ( "127.0.0.1" , s . getHostAddress ( ) )
assertThat ( s , is ( instanceOf ( Set . class ) ) )
assertThat ( s , is ( instanceOf ( List . class ) ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "{a=1, b='2'}" , s . toString ( ) )
assertEquals ( "{a=1, b: 2}" , s . toString ( ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "http://localhost:1234/" , s )
assertEquals ( "http://localhost:1234/" , s )
assertEquals ( 3 , x . intValue ( ) )
assertEquals ( "3" , x . getFrom ( ) )
assertEquals ( expectedValue , actualValue )
Asserts . assertEquals ( MyClazz . class , r1 . properties . get ( "x" ) . getClass ( ) )
assertEquals ( 123 , exitcode )
assertEquals ( 0 , exitcode )
assertEquals ( "Expected value" , makeTimeStringRounded ( watch ) , "Actual value" )
assertEquals ( 123 , exitcode )
assertEquals ( 0 , exitcode )
assertEquals ( "val is myval" , out )
assertEquals ( "expectedOutput" , out )
assertEquals ( Arrays . asList ( "echo hello world!" ) , actual )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "hello world\nbye bye\n" , trim ( contents ) )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( null ) )
assertEquals ( "Simulating ssh execution failure" , e . getMessage ( ) )
assertNotNull ( localtool . get ( AttributeSensor . class ) )
assertEquals ( "Simulating ssh execution failure" , e . getMessage ( ) )
assertEquals ( 123 , exitCode )
assertEquals ( "{\"a\":[1,2,3]}" , json )
assertEquals ( "{\"entity\":{\"id\":\"<expected_id>\"},\"values\":[1,2,3]}" , json )
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"<expected query>\"}" , query )
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"<expected_query>\"}" , query )
AssertPlaceHolder = "assertEquals(\"{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"<expected_query>\"}\", query);"
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"<expected query>\"}" , query )
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"some phrase\"}" , query )
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"<expected query>\"}" , query )
assertEquals ( "{\"size\":10,\"sort\":{\"timestamp\":\"asc\"},\"query\":\"taskId:taskIdxxxx\"}" , query )
assertEquals ( "mybundle" , result . getSymbolicName ( ) )
assertNotNull ( result )
assertEquals ( 1 , result . size ( ) )
Asserts . assertThat ( p . tag , Predicates . instanceOf ( DslPredicates . DslPredicateDefault . class ) , "Expected DslPredicateDefault but found " + ( p . tag == null ? "null" : p . tag + " (" + p . tag . getClass ( ) + ")" ) )
assertEquals ( "expectedValue" , trim ( result ) )
assertEquals ( 88 , returnCode )
assertEquals ( "2" , trim ( output ) )
assertNull ( toobig )
assertEquals ( "A" , t . getTag ( ) )
assertEquals ( BrooklynObjectType . UNKNOWN , of ( t ) )
assertEquals ( BrooklynObjectType . UNKNOWN , of ( t ) )
assertEquals ( 0 , m . getNumActiveTasks ( ) )
assertEquals ( NUM_TIMES , counter . get ( ) )
assertEquals ( 123 , future . get ( ) )
assertEquals ( 123 , future . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( false , executed . get ( ) )
assertEquals ( 123 , future . get ( ) )
assertResolvesValue ( v , Object . class , "foo" )
assertEquals ( "bar" , trim ( t . getStdout ( ) ) )
assertEquals ( "bar" , trim ( t . getStdout ( ) ) )
assertEquals ( "myval" , result )
assertEquals ( "myval" , result )
assertEquals ( "123456" , result )
assertEquals ( "123456" , result )
assertEquals ( "123456" , result )
assertEquals ( "myval" , result )
assertEquals ( "My Test Entity" , result )
assertEquals ( "myval" , result )
assertEquals ( "expectedId" , result )
assertEquals ( "expectedId" , result . getId ( ) )
assertEquals ( "myval" , result )
assertEquals ( "defval" , result )
assertEquals ( "defval" , result )
assertEquals ( "myval" , result )
assertEquals ( "myval" , result )
assertEquals ( "myval" , result )
assertEquals ( "war = peace" , result )
assertEquals ( "myval" , result )
assertThrows ( IllegalArgumentException . class , ( ) -> focalMethodCall )
assertEquals ( out , obj )
assertEquals ( result , parsed . get ( ) )
assertEquals ( 123 , result )
assertThat ( xpath ( xml , xpath ) , is ( equalTo ( "expectedValue" ) ) )
assertEquals ( 1 , xpath ( xml , "/a/b" , XPathConstants . NUMBER ) )
assertEquals ( true , xpath ( xml , "/a/b/text()" , XPathConstants . BOOLEAN ) )
assertEquals ( "<expected value>" , xpath ( xml . toString ( ) , "<xpath expression>" ) )
assertEquals ( "<a><b>myb</b><c>&#x0;&#x1;&#x2;&#x3;&#x4;&#x5;&#x6;&#x7;&#x8;&#xB;&#xC;&#xE;&#xF;&#x10;&#x11;&#x12;&#x13;&#x14;&#x15;&#x16;&#x17;&#x18;&#x19;&#x1A;&#x1B;&#x1C;&#x1D;&#x1E;&#x1F;&#x20;&#x21;&#x22;&#x23;&#x24;&#x25;&#x26;&#x27;&#x28;&#x29;&#x2A;&#x2B;&#x2C;&#x2D;&#x2E;&#x2F;&#x30;&#x31;&#x32;&#x33;&#x34;&#x35;&#x36;&#x37;&#x38;&#x39;&#x3A;&#x3B;&#x3C;&#x3D;&#x3E;&#x3F;&#x40;&#x41;&#x42;&#x43;&#x44;&#x45;&#x46;&#x47;&#x48;&#x49;&#x4A;&#x4B;&#x4C;&#x4D;&#x4E;&#x4F;&#x50;&#x51;&#x52;&#x53;&#x54;&#x55;&#x56;&#x57;&#x58;&#x59;&#x5A;&#x5B;&#x5C;&#x5D;&#x5E;&#x5F;&#x60;&#x61;&#x62;&#x63;&#x64;&#x65;&#x66;&#x67;&#x68;&#x69;&#x6A;&#x6B;&#x6C;&#x6D;&#x6E;&#x6F;&#x70;&#x71;&#x72;&#x73;&#x74;&#x75;&#x76;&#x77;&#x78;&#x79;&#x7A;&#x7B;&#x7C;&#x7D;&#x7E;&#x7F;&#x80;&#x81;&#x82;&#x83;&#x84;&#x85;&#x86;&#x87;&#x88;&#x89;&#x8A;&#x8B;&#x8C;&#x8D;&#x8E;&#x8F;&#x90;&#x91;&#x92;&#x93;&#x94;&#x95;&#x96;&#x97;&#x98;&#x99;&#x9A;&#x9B;&#x9C;&#x9D;&#x9E;&#x9F;&#xA0;&#xA1;&#xA2;&#xA3;&#xA4;&#xA5;&#xA6;&#xA7;&#xA8;&#xA9;&#xAA;&#xAB;&#xAC;&#xAD;&#xAE;&#xAF;&#xB0;&#xB1;&#xB2;&#xB3;&#xB4;&#xB5;&#xB6;&#xB7;&#xB8;&#xB9;&#xBA;&#xBB;&#xBC;&#xBD;&#xBE;&#xBF;&#xC0;&#xC1;&#xC2;&#xC3;&#xC4;&#xC5;&#xC6;&#xC7;&#xC8;&#xC9;&#xCA;&#xCB;&#xCC;&#xCD;&#xCE;&#xCF;&#xD0;&#xD1;&#xD2;&#xD3;&#xD4;&#xD5;&#xD6;&#xD7;&#xD8;&#xD9;&#xDA;&#xDB;&#xDC;&#xDD;&#xDE;&#xDF;&#xE0;&#xE1;&#xE2;&#xE3;&#xE4;&#xE5;&#xE6;&#xE7;&#xE8;&#xE9;&#xEA;&#xEB;&#xEC;&#xED;&#xEE;&#xEF;&#xF0;&#xF1;&#xF2;&#xF3;&#xF4;&#xF5;&#xF6;&#xF7;&#xF8;&#xF9;&#xFA;&#xFB;&#xFC;&#xFD;&#xFE;&#xFF;&#x100;&#x101;&#x102;&#x103;&#x104;&#x105;&#x106;&#x107;&#x108;&#x109;&#x10A;&#x10B;&#x10C;&#x10D;&#x10E;&#x10F;&#x110;&#x111;&#x112;&#x113;&#x114;&#x115;&#x116;&#x117;&#x118;&#x119;&#x11A;&#x11B;&#x11C;&#x11D;&#x11E;&#x11F;&#x120;&#x121;&#x122;&#x123;&#x124;&#x125;&#x126;&#x127;&#x128;&#x129;&#x12A;&#x12B;&#x12C;&#x12D;&#x12E;&#x12F;&#x130;&#x131;&#x132;&#x133;&#x134;&#x135;&#x136;&#x137;&#x138;&#x139;&#x13A;&#x13B;&#x13C;&#x13D;&#x13E;&#x13F;&#x140;&#x141;&#x142;&#x143;&#x144;&#x145;&#x146;&#x147;&#x148;&#x149;&#x14A;&#x14B;&#x14C;&#x14D;&#x14E;&#x14F;&#x150;&#x151;&#x152;&#x153;&#x154;&#x155;&#x156;&#x157;&#x158;&#x159;&#x15A;&#x15B;&#x15C;&#x15D;&#x15E;&#x15F;&#x160;&#x161;&#x162;&#x163;&#x164;&#x165;&#x166;&#x167;&#x168;&#x169;&#x16A;&#x16B;&#x16C;&#x16D;&#x16E;&#x16F;&#x170;&#x171;&#x172;&#x173;&#x174;&#x175;&#x176;&#x177;&#x178;&#x179;&#x17A;&#x17B;&#x17C;&#x17D;&#x17E;&#x17F;&#x180;&#x181;&#x182;&#x183;&#x184;&#x185;&#x186;&#x187;&#x188;&#x189;&#x18A;&#x18B;&#x18C;&#x18D;&#x18E;&#x18F;&#x190;&#x191;&#x192;&#x193;&#x194;&#x195;&#x196;&#x197;&#x198;&#x199;&#x19A;&#x19B;&#x19C;&#x19D;&#x19E;&#x19F;&#x1A0;&#x1A1;&#x1A2;&#x1A3;&#x1A4;&#x1A5;&#x1A6;&#x1A7;&#x1A8;&#x1A9;&#x1AA;&#x1AB;&#x1AC;&#x1AD;&#x1AE;&#x1AF;&#x1B0;&#x1B1;&#x1B2;&#x1B3;&#x1B4;&#x1B5;&#x1B6;&#x1B7;&#x1B8;&#x1B9;&#x1BA;&#x1BB;&#x1BC;&#x1BD;&#x1BE;&#x1BF;&#x1C0;&#x1C1;&#x1C2;&#x1C3;&#x1C4;&#x1C5;&#x1C6;&#x1C7;&#x1C8;&#x1C9;&#x1CA;&#x1CB;&#x1CC;&#x1CD;&#x1CE;&#x1CF;&#x1D0;&#x1D1;&#x1D2;&#x1D3;&#x1D4;&#x1D5;&#x1D6;&#x1D7;&#x1D8;&#x1D9;&#x1DA;&#x1DB;&#x1DC;&#x1DD;&#x1DE;&#x1DF;&#x1E0;&#x1E1;&#x1E2;&#x1E3;&#x1E4;&#x1E5;&#x1E6;&#x1E7;&#x1E8;&#x1E9;&#x1EA;&#x1EB;&#x1EC;&#x1ED;&#x1EE;&#x1EF;&#x1F0;&#x1F1;&#x1F2;&#x1F3;&#x1F4;&#x1F5;&#x1F6;&#x1F7;&#x1F8;&#x1F9;&#x1FA;&#x1FB;&#x1FC;&#x1FD;&#x1FE;&#x1FF;&#x200;&#x201;&#x202;&#x203;&#x204;&#x205;&#x206;&#x207;&#x208;&#x209;&#x20A;&#x20B;&#x20C;&#x20D;&#x20E;&#x20F;&#x210;&#x211;&#x212;&#x213;&#x214;&#x215;&#x216;&#x217;&#x218;&#x219;&#x21A;&#x21B;&#x21C;&#x21D;&#x21E;&#x21F;&#x220;&#x221;&#x222;&#x223;&#x224;&#x225;&#x226;&#x227;&#x228;&#x229;&#x22A;&#x22B;&#x22C;&#x22D;&#x22E;&#x22F;&#x230;&#x231;&#x232;&#x233;&#x234;&#x235;&#x236;&#x237;&#x238;&#x239;&#x23A;&#x23B;&#x23C;&#x23D;&#x23E;&#x23F;&#x240;&#x241;&#x242;&#x243;&#x244;&#x245;&#x246;&#x247;&#x248;&#x249;&#x24A;&#x24B;&#x24C;&#x24D;&#x24E;&#x24F;&#x250;&#x251;&#x252;&#x253;&#x254;&#x255;&#x256;&#x257;&#x258;&#x259;&#x25A;&#x25B;&#x25C;&#x25D;&#x25E;&#x25F;&#x260;&#x261;&#x262;&#x263;&#x264;&#x265;&#x266;&#x267;&#x268;&#x269;&#x26A;&#x26B;&#x26C;&#x26D;&#x26E;&#x26F;&#x270;&#x271;&#x272;&#x273;&#x274;&#x275;&#x276;&#x277;&#x278;&#x279;&#x27A;&#x27B;&#x27C;&#x27D;&#x27E;&#x27F;&#x280;&#x281;&#x282;&#x283;&#x284;&#x285;&#x286;&#x287;&#x288;&#x289;&#x28A;&#x28B;&#x28C;&#x28D;&#x28E;&#x28F;&#x290;&#x291;&#x292;&#x293;&#x294;&#x295;&#x296;&#x297;&#x298;&#x299;&#x29A;&#x29B;&#x29C;&#x29D;&#x29E;&#x29F;&#x2A0;&#x2A1;&#x2A2;&#x2A3;&#x2A4;&#x2A5;&#x2A6;&#x2A7;&#x2A8;&#x2A9;&#x2AA;&#x2AB;&#x2AC;&#x2AD;&#x2AE;&#x2AF;&#x2B0;&#x2B1;&#x2B2;&#x2B3;&#x2B4;&#x2B5;&#x2B6;&#x2B7;&#x2B8;&#x2B9;&#x2BA;&#x2BB;&#x2BC;&#x2BD;&#x2BE;&#x2BF;&#x2C0;&#x2C1;&#x2C2;&#x2C3;&#x2C4;&#x2C5;&#x2C6;&#x2C7;&#x2C8;&#x2C9;&#x2CA;&#x2CB;&#x2CC;&#x2CD;&#x2CE;&#x2CF;&#x2D0;&#x2D1;&#x2D2;&#x2D3;&#x2D4;&#x2D5;&#x2D6;&#x2D7;&#x2D8;&#x2D9;&#x2DA;&#x2DB;&#x2DC;&#x2DD;&#x2DE;&#x2DF;&#x2E0;&#x2E1;&#x2E2;&#x2E3;&#x2E4;&#x2E5;&#x2E6;&#x2E7;&#x2E8;&#x2E9;&#x2EA;&#x2EB;&#x2EC;&#x2ED;&#x2EE;&#x2EF;&#x2F0;&#x2F1;&#x2F2;&#x2F3;&#x2F4;&#x2F5;&#x2F6;&#x2F7;&#x2F8;&#x2F9;&#x2FA;&#x2FB;&#x2FC;&#x2FD;&#x2FE;&#x2FF;&#x300;&#x301;&#x302;&#x303;&#x304;&#x305;&#x306;&#x307;&#x308;&#x309;&#x30A;&#x30B;&#x30C;&#x30D;&#x30E;&#x30F;&#x310;&#x311;&#x312;&#x313;&#x314;&#x315;&#x316;&#x317;&#x318;&#x319;&#x31A;&#x31B;&#x31C;&#x31D;&#x31E;&#x31F;&#x320;&#x321;&#x322;&#x323;&#x324;&#x325;&#x326;&#x327;&#x328;&#x329;&#x32A;&#x32B;&#x32C;&#x32D;&#x32E;&#x32F;&#x330;&#x331;&#x332;&#x333;&#x334;&#x335;&#x336;&#x337;&#x338;&#x339;&#x33A;&#x33B;&#x33C;&#x33D;&#x33E;&#x33F;&#x340;&#x341;&#x342;&#x343;&#x344;&#x345;&#x346;&#x347;&#x348;&#x349;&#x34A;&#x34B;&#x34C;&#x34D;&#x34E;&#x34F;&#x350;&#x351;&#x352;&#x353;&#x354;&#x355;&#x356;&#x357;&#x358;&#x359;&#x35A;&#x35B;&#x35C;&#x35D;&#x35E;&#x35F;&#x360;&#x361;&#x362;&#x363;&#x364;&#x365;&#x366;&#x367;&#x368;&#x369;&#x36A;&#x36B;&#x36C;&#x36D;&#x36E;&#x36F;&#x370;&#x371;&#x372;&#x373;&#x374;&#x375;&#x376;&#x377;&#x378;&#x379;&#x37A;&#x37B;&#x37C;&#x37D;&#x37E;&#x37F;&#x380;&#x381;&#x382;&#x383;&#x384;&#x385;&#x386;&#x387;&#x388;&#x389;&#x38A;&#x38B;&#x38C;&#x38D;&#x38E;&#x38F;&#x390;&#x391;&#x392;&#x393;&#x394;&#x395;&#x396;&#x397;&#x398;&#x399;&#x39A;&#x39B;&#x39C;&#x39D;&#x39E;&#x39F;&#x3A0;&#x3A1;&#x3A2;&#x3A3;&#x3A4;&#x3A5;&#x3A6;&#x3A7;&#x3A8;&#x3A9;&#x3AA;&#x3AB;&#x3AC;&#x3AD;&#x3AE;&#x3AF;&#x3B0;&#x3B1;&#x3B2;&#x3B3;&#x3B4;&#x3B5;&#x3B6;&#x3B7;&#x3B8;&#x3B9;&#x3BA;&#x3BB;&#x3BC;&#x3BD;&#x3BE;&#x3BF;&#x3C0;&#x3C1;&#x3C2;&#x3C3;&#x3C4;&#x3C5;&#x3C6;&#x3C7;&#x3C8;&#x3C9;&#x3CA;&#x3CB;&#x3CC;&#x3CD;&#x3CE;&#x3CF;&#x3D0;&#x3D1;&#x3D2;&#x3D3;&#x3D4;&#x3D5;&#x3D6;&#x3D7;&#x3D8;&#x3D9;&#x3DA;&#x3DB;&#x3DC;&#x3DD;&#x3DE;&#x3DF;&#x3E0;&#x3E1;&#x3E2;&#x3E3;&#x3E4;&#x3E5;&#x3E6;&#x3E7;&#x3E8;&#x3E9;&#x3EA;&#x3EB;&#x3EC;&#x3ED;&#x3EE;&#x3EF;&#x3F0;&#x3F1;&#x3F2;&#x3F3;&#x3F4;&#x3F5;&#x3F6;&#x3F7;&#x3F8;&#x3F9;&#x3FA;&#x3FB;&#x3FC;&#x3FD;&#x3FE;&#x3FF;&#x400;&#x401;&#x402;&#x403;&#x404;&#x405;&#x406;&#x407;&#x408;&#x409;&#x40A;&#x40B;&#x40C;&#x40D;&#x40E;&#x40F;&#x410;&#x411;&#x412;&#x413;&#x414;&#x415;&#x416;&#x417;&#x418;&#x419;&#x41A;&#x41B;&#x41C;&#x41D;&#x41E;&#x41F;&#x420;&#x421;&#x422;&#x423;&#x424;&#x425;&#x426;&#x427;&#x428;&#x429;&#x42A;&#x42B;&#x42C;&#x42D
assertEquals ( "" , xpathHandlingIllegalChars ( xml . toString ( ) , xpath ) )
assertEquals ( origApp . getId ( ) , newLauncher . getManagementContext ( ) . getEntityManager ( ) . getEntity ( origApp . getId ( ) ) . getId ( ) )
assertEquals ( "simple-entity:1" , entity . getCatalogItemId ( ) )
assertThat ( lastMgmt ( ) , is ( notNullValue ( ) ) )
assertEquals ( lastMgmt ( ) , ? ? ? )
assertNotNull ( getServerDetails ( ) )
assertNotNull ( launcher . getBrooklynProperties ( ) . getConfig ( "mykey" ) )
assertEquals ( file , getFile ( ) . getPath ( ) )
assertNotNull ( pfm . getId ( ) )
assertEquals ( imageId , image . getId ( ) )
assertThat ( loc . getConfig ( DockerLocationConfig . LOGIN_USER ) ) . isEqualTo ( "myLoginUser" )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNull ( orNull ( ) )
assertNotNull ( certs )
assertNotNull ( loc )
assertNotNull ( loc )
assertEquals ( loc . getEndpoint ( ) , "myMasterUrl" )
assertEquals ( "myMasterUrl" , loc . getConfig ( OpenShiftLocation . MASTER_URL ) )
assertEquals ( imageId , image . getId ( ) )
assertEquals ( 1 , loc . getMachines ( ) . size ( ) )
assertEquals ( N1_STANDARD_1_HARDWARE_ID_LONG_FORM , getHardware ( ) . getId ( ) )
assertNotNull ( getHardware ( ) )
assertNotNull ( getHardware ( ) )
assertEquals ( N1_STANDARD_1_HARDWARE_ID , getHardware ( ) . getId ( ) )
assertNotNull ( getHardware ( ) )
assertEquals ( "DEBIAN_8_64" , getImage ( ) . getId ( ) )
assertEquals ( ".*DEBIAN_8_64.*" , JcloudsLocationConfig . IMAGE_DESCRIPTION_REGEX )
assertNull ( getImage ( ) )
assertThat ( loc . getConfig ( ConfigKeys . newStringConfigKey ( "brooklyn.location.jclouds.aws-ec2@us-west-1.latitude" ) ) ) . isEqualTo ( "41.2" )
assertNotNull ( e . getCause ( ) )
assertEquals ( "myfile" , file )
assertNotNull ( resolve ( l ) )
assertNotNull ( resolve ( l ) )
assertEquals ( l , resolve ( l ) )
assertNotNull ( resolve ( l ) )
assertEquals ( "bar" , loc . getConfig ( ) . getBag ( ) . getStringKey ( "brooklyn.location.jclouds.openstack-nova.foo" ) )
assertEquals ( "bar" , loc . getConfig ( ) . getBag ( ) . getStringKey ( "brooklyn.location.jclouds.openstack-nova.foo" ) )
assertEquals ( JcloudsLocationResolverTest . class . getName ( ) + "$" + MyFunction . class . getSimpleName ( ) , brooklynProperties . get ( "brooklyn.location.named.myloc.imageChooser" ) )
assertEquals ( 3 , count . get ( ) )
assertEquals ( "expectedValue" , input . getString ( "key" ) )
assertNotNull ( jcloudsLocation . tryObtainAndCheck ( flags , new Predicate < ConfigBag > ( ) {
assertEquals ( ports , jcloudsLocation . getOptions ( ) . getInboundPorts ( ) )
assertEquals ( ports , jcloudsLocation . getOptions ( ) . getInboundPorts ( ) )
assertEquals ( "myname" , brooklynProperties . get ( BROOKLYN_PROPERTIES_PREFIX + JcloudsLocationConfig . USER . getName ( ) ) )
assertEquals ( BrooklynObjectType . UNKNOWN , ? ? ? of ( instance ) )
assertEquals ( 0 , exitCode )
assertEquals ( location , resolve ( "single:(target='" + JCLOUDS_LOCATION_SPEC + "')" ) )
assertEquals ( Collections . emptySet ( ) , securityApi . listSecurityGroupsForNode ( NODE_ID ) )
assertEquals ( "1.1.1.1" , machine . getHostAddress ( ) )
assertEquals ( "Fred" , customizer . getLocationName ( ) )
assertEquals ( "1.1.1.1/24" , cidr . toString ( ) )
assertEquals ( "unrelated-value" , templateOptions . get ( "unrelated-key" ) )
assertEquals ( 3 , getCurrentSize ( ) . intValue ( ) )
assertEquals ( policy . getId ( ) , "<expectedId>" )
assertEquals ( 2 , resizable . getCurrentSize ( ) )
assertEquals ( 2 , resizable . getCurrentSize ( ) )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( expectedValue , newApp . sensors ( ) . get ( INT_METRIC ) )
assertEquals ( expectedValue , newApp . sensors ( ) . get ( INT_METRIC ) )
assertNotNull ( getAverage ( ) )
assertEquals ( null , averager . getAverage ( ) )
assertEquals ( 10.0 , averager . getAverage ( ) )
assertEquals ( 25.0 , averager . getAverage ( ) )
assertEquals ( 35.0 , averager . getAverage ( ) )
assertEquals ( 10 , average )
assertNotNull ( enricher )
assertNotNull ( enricher . getAttribute ( fractionSensor ) )
EntityAsserts . assertAttributeEqualsEventually ( e1 , Attributes . SERVICE_STATE_ACTUAL , Lifecycle . RUNNING )
assertNull ( e1 . getAttribute ( ServiceStateLogic . FAILURE_DETECTOR_STATE ) )
assertEquals ( BrooklynObjectType . UNKNOWN , of ( instance ) )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( instance ) )
assert pool2 . getCurrentSize ( ) == 123
assertThat ( pool . getCurrentSize ( ) ) . isEqualTo ( 123 )
assertEquals ( expectedJson , actualJson )
assertEquals ( expected , actual )
assertEquals ( "explanatory message" , error . getMessage ( ) )
assertEquals ( expectedJson , actualJson )
assertEquals ( expected , actual )
assertEquals ( expectedJson , actualJson )
assertEquals ( Status . RUNNING , running . getStatus ( ) )
assertEqualsIgnoringOrder ( app . getChildren ( ) , Collections . singletonList ( app ) )
assertEquals ( expectedJson , actualJson )
assertEquals ( expected , actual )
assertEquals ( expectedUri , selfUri . toString ( ) )
assertEquals ( 2 , summary . getActions ( ) . size ( ) )
assertEquals ( tag , "expectedTag" )
assertEquals ( "initialPolicy" , initialPolicy . getName ( ) )
assertEquals ( "expectedName" , policy . getName ( ) )
assertEquals ( expectedVal , configVal )
assertEquals ( ManagementNodeState . ACTIVE , getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , e . getResponse ( ) . getStatus ( ) )
assertEquals ( "Expected error message" , "Invalid entity type: not.existing.entity" , error . getMessage ( ) )
assertEquals ( "Expected error message" , "expectedErrorMessage" , error . getMessage ( ) )
HttpAsserts . assertHealthyStatusCode ( response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( readings . size ( ) , sensors . size ( ) )
AssertPlaceHolder = "Assert.assertEquals(ManagementNodeState.INVALID, getStatus());"
Asserts . assertStringContainsIgnoreCase ( response . readEntity ( String . class ) , "Missing bundle symbolic name in BOM or MANIFEST" )
Asserts . assertEquals ( ManagementNodeState . RUNNING , getStatus ( ) )
Asserts . assertStringContainsIgnoreCase ( response . readEntity ( String . class ) , "Missing bundle symbolic name in BOM or MANIFEST" )
Asserts . assertStringContainsIgnoreCase ( response . readEntity ( String . class ) , "BOM" , "bundle" , "version" )
assertThat ( application . getVersion ( ) , equalTo ( TEST_LASTEST_VERSION ) )
assertEquals ( TEST_LASTEST_VERSION , application . getVersion ( ) )
assertThat ( application . getVersion ( ) ) . isEqualTo ( TEST_LASTEST_VERSION )
assertEquals ( "zip file is empty" , response . readEntity ( String . class ) )
assertEquals ( "Missing bundle symbolic name in BOM or MANIFEST" , response . readEntity ( String . class ) )
Asserts . assertStringContainsIgnoreCase ( response . readEntity ( String . class ) , "Missing bundle symbolic name in BOM or MANIFEST" )
Asserts . assertEquals ( ManagementNodeState . RUNNING , getStatus ( ) )
Asserts . assertStringContainsIgnoreCase ( response . readEntity ( String . class ) , "BOM" , "bundle" , "version" )
assertThat ( application . getVersion ( ) , equalTo ( TEST_LASTEST_VERSION ) )
assertEquals ( TEST_LASTEST_VERSION , application . getVersion ( ) )
assertEquals ( TEST_LASTEST_VERSION , application . getVersion ( ) )
assertThat ( application . getVersion ( ) ) . isEqualTo ( TEST_LASTEST_VERSION )
assertEquals ( "expectedValue" , configValue )
assertEquals ( "expectedValue" , configValue )
assertEquals ( "New Name" , entity . getDisplayName ( ) )
assertEquals ( expectedLocationUri , URI . create ( "/locations/" + locationName ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
HttpAsserts . assertJsonEquals ( response . getContentAsString ( ) , expectedJson )
assertEquals ( "expectedValue" , bytes )
assertEquals ( "1.0.0" , version . getVersion ( ) )
assertEquals ( "expectedPlaneId" , planeId )
assertEquals ( "expectedStatus" , nodeState . getStatus ( ) )
assertEquals ( 1 , reloadCount . get ( ) )
assertThat ( client ( ) . getEndpointAddress ( ) , is ( "quux" ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "cn=user,ou=Users,dc=example,dc=org" , ldapSecurityProvider . getSecurityPrincipal ( "user" ) )
assertEquals ( "cn=user,ou=organizationUnit,dc=users" , ldapSecurityProvider . getSecurityPrincipal ( "user" ) )
assertEquals ( "cn=user,ou=organizationUnit,dc=users" , ldapSecurityProvider . getSecurityPrincipal ( "user" ) )
assertEquals ( 1 , result . size ( ) )
assertNotNull ( v2 )
assertEquals ( "expectedValue" , result . get ( Attributes . HTTP_PORT ) )
Asserts . assertInstanceOf ( tt2 , TypeToken . class )
groovyOutput . containsKey ( key )
assertEquals ( "expectedValue" , getServerUser ( server ) )
assertEquals ( "config mgmt is:\n" + content , toString ( ) . toLowerCase ( Locale . ENGLISH ) )
assertThat ( values , hasEntry ( key , value ) )
assertEquals ( expectedValue , get ( key ) )
assertTrue ( e instanceof ParseException )
assertEquals ( "help" , command . getName ( ) )
assertEquals ( "expected single result, but got %s" , ImmutableSet . of ( "dummyKey" ) , result . keySet ( ) )
assertThat ( brooklynNode . getConfig ( BrooklynNode . BROOKLYN_GLOBAL_PROPERTIES_CONTENTS ) ) . isEqualTo ( "abc=def" )
assertThat ( brooklynNode . getConfig ( BrooklynNode . BROOKLYN_LOCAL_PROPERTIES_CONTENTS ) ) . isEqualTo ( "abc=def" )
assertEquals ( "Non-existend entity ID provided." , e . getMessage ( ) )
EntityAsserts . assertAttributeEqualsEventually ( javaProcess2 , VanillaJavaApp . SERVICE_UP , false )
assertEquals ( port , javaProcess . config ( ) . get ( UsesJmx . JMX_PORT ) . intValue ( ) )
assertEquals ( "4.3.2.1" , generateHostname ( machine ) )
assertEquals ( "4.3.2.1" , generateHostname ( machine ) )
assertEquals ( "4.3.2.1" , generateHostname ( machine ) )
assertEquals ( "Expected hostname is null" , null , generateHostname ( machine ) )
assertAttributeEqualsEventually ( app , Attributes . SERVICE_UP , true )
assertNotNull ( added )
assertEquals ( expectedValue , call . getUnchecked ( ) )
assertEquals ( expectedValue , call . getUnchecked ( ) )
assertNotNull ( installDir )
assertEquals ( home ( ) , installDir + "/home" )
assertEquals ( 1 , result )
usage . isEmpty ( )
usage . isEmpty ( )
assertEquals ( "myval" , mbean . getAttribute ( objectName , "myattr" ) )
assertEquals ( "myval" , mbean . getAttribute ( objectName , "myattr" ) )
assertEquals ( "abc" , actual )
assertEquals ( "abc" , actual )
assertEquals ( trim ( message ) , trim ( output . toString ( ) ) )
assertEquals ( "hello " + Strings . makeRandomId ( 10 ) . toLowerCase ( ) + " world" , trim ( output ) )
assertEquals ( trim ( message ) , trim ( output . toString ( ) ) )
assertEquals ( "hello world" , trim ( output ) )
assertNotNull ( containerTask )
assertEquals ( BrooklynObjectType . UNKNOWN , of ( host ) )
assertEquals ( 0 , newLines )
assertEquals ( 0 , newLines )
assertEquals ( "<t1><t2>fdskljfds</t2><t3>djskdsjk</t3></t1>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<t1><t2>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<expected value>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<t1><t2></t2></t1>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<t1><t2></t2></t1>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<t1><t2><t3>Some Text</t3></t2></t1>" , prettyXmlWriter . toString ( ) )
assertEquals ( "<t1><t2><t3/><t3/></t2><t3/></t1>" , prettyXmlWriter . toString ( ) )
assertEquals ( "#< CLIXML\n<t1><t2><t3/></t2></t1>" , prettyXmlWriter . toString ( ) )
assertNotNull ( app . get ( TestEntity . EffectorFailureException . class ) )
assertEquals ( "uptime" , getLastExecCmd ( ) . getCommand ( ) )
assertEquals ( 0 , getLastExecCmd ( ) . getExitStatus ( ) )
assertThat ( s , not ( startsWith ( "F" ) ) )
assertEquals ( s . hashCode ( ) , s2 . hashCode ( ) )
s . hash = s . hashCode ( ) - 1
assertEquals ( s1 - 1000 , BrooklynValidation . getInstance ( ) . size ( ) )
assertTrue ( result )
assertEquals ( expectedValue , get ( key ) )
assertEquals ( 1 , reached )
assertEquals ( null , focalMethod ( null ) )
assertEquals ( BrooklynObjectType . UNKNOWN , BrooklynObjectType . of ( result ) )
assertEquals ( 1 , l . size ( ) )
assertEquals ( 2 , l . size ( ) )
j . assertContains ( "a" , "b" )
j . assertContains ( "a" , 1 )
assertThat ( e , is ( equalTo ( tothrow ) ) )
assertThat ( e . getCause ( ) ) . isEqualTo ( tothrow )
assertThat ( e . getMessage ( ) , is ( nullValue ( ) ) )
assertEquals ( tothrow , e )
assertEquals ( "simulated1" , ise . getMessage ( ) )
assertNotEquals ( "simulated1: simulated2" , collapseText ( ise ) )
assertEquals ( "simulated1: simulated2" , Exceptions . collapseText ( ise ) )
assertEquals ( "" , text )
assertEquals ( "test" , t . getMessage ( ) )
assertEquals ( "important" , t . getMessage ( ) )
assertNotNull ( t )
assertEquals ( "test" , t . getMessage ( ) )
assertThat ( t , instanceOf ( NoClassDefFoundError . class ) )
assertEquals ( "A" , t . getMessage ( ) )
assertThat ( t , is ( instanceOf ( IOException . class ) ) )
assertThat ( t , instanceOf ( ExecutionException . class ) )
assertEquals ( "F" , f . apply ( false ) )
assertEquals ( expectedValue , getUnchecked ( ) )
assertNotNull ( BrooklynObjectType . of ( instance ) )
assertThat ( genericArguments , contains ( TypeToken . of ( String . class ) , TypeToken . of ( Integer . class ) ) )
assertNotNull ( map1 )
assertEquals ( "JavaClassNames.niceClassAndMethod(StackTraceElement.getClassName()).equals(result)" , true )
assertEquals ( "600" , permissions )
assertEquals ( "700" , permissions )
assertEquals ( "700" , permissions )
return Assert . assertEquals ( expectedValue , get ( key ) )
assertNotNull ( get ( key ) )
assertNotNull ( coercer . registerAdapter ( "test-" + Strings . makeRandomId ( 4 ) , new TryCoercer ( ) {
assertEquals ( 2 , val . length )
s . assertEquals ( BrooklynObjectType . UNKNOWN , of ( null ) )
s . contains ( 1 )
assertEquals ( "java.lang.Integer" , s . get ( "int" ) )
assertEquals ( "int" , s . get ( Integer . class ) )
assertEquals ( "{ \"a\" : \"1\", b : 2 }" , s . toString ( ) )
assertEquals ( "{a=1, b=2}" , s . toString ( ) )
assertEquals ( "a=1,b=2" , s . toString ( ) )
assertEquals ( 2 , s . size ( ) )
assertEquals ( "{a=1, b='2'}" , s . toString ( ) )
assertEquals ( "{a=1, b: 2}" , s . toString ( ) )
assertEquals ( "a=1, b: 2" , s . toString ( ) )
assertEquals ( "http://localhost:1234/" , s )
assertEquals ( "http://localhost:1234/" , s )
assertEquals ( 3 , x . intValue ( ) )
assertEquals ( "3" , x . toString ( ) )
< AssertPlaceHolder >
assertEquals ( expectedValue , entity . apply ( ) )
assertNotNull ( entity )
assertNotNull ( entity )
assertEquals ( true , f . exists ( ) )
assertEquals ( "0.0.0.0" , c . netmask ( ) . getHostAddress ( ) )
assertEquals ( "255.248.0.0" , c . netmask ( ) . getHostAddress ( ) )
assertEquals ( "Expected exception to be thrown" , expectedException . getClass ( ) , e . getClass ( ) )
assertEquals ( null , makeRandomId ( 10 ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( ImmutableList . of ( socket1 , socket2 ) , actual )
assertEquals ( url , "data:text/plain;charset=utf-8;base64,aGVsbG8gd29ybGQ=" )
assertThat ( foo1 . getVersion ( ) . getVersionNumber ( ) ) . isEqualTo ( "1" )
assertEquals ( 1 , lease4 . leasedObject ( ) )
assertEquals ( false , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "expectedValue" , firewalldServiceStart ( ) )
assertEquals ( "expectedValue" , firewalldServiceStatus ( ) )
assertEquals ( "expectedValue" , firewalldServiceStop ( ) )
assertEquals ( true , instance . firewalldServiceIsActive ( ) )
// assertion code
assertEquals ( expected , result )
assertEquals ( BrooklynObjectType . UNKNOWN , ClassName . of ( instance ) )
assertEquals ( 0.0 , probability , 0.01 )
assertEquals ( "expectedValue" , escapeSql ( "inputValue" ) )
assertEquals ( "\"" + value + "\"" , wrapJavaString ( value ) )
assertEquals ( line . toString ( ) , lines . get ( 0 ) )
// </AssertPlaceHolder>
assertEquals ( input . getId ( ) , "<expected value>" )
// </AssertPlaceHolder>
assertEquals ( "expected lowercase string" , "expected lowercase string" , toLowerCase ( "EXPECTED LOWERCASE STRING" ) )
assertEquals ( expected , actual )
assertEquals ( expectedValue , entity . getConvertedValue ( ) )
assertNotNull ( apply ( entity , key ) )
assertEquals ( v , entity . getAttribute ( key ) )
assertEquals ( expectedLength , actualLength )
assertNotNull ( trim ( s ) )
// </AssertPlaceHolder>
assertEquals ( null , dropMilliseconds ( null ) )
assertEquals ( val , result . get ( "dummyKey" ) )
assertEquals ( "20200101-1200Z" , makeIso8601DateStringZ ( noon ) )
assertEquals ( "" , e . getMessage ( ) )
assertThrows ( IllegalStateException . class , ( ) -> new C2HttpClient ( c2ClientConfig , serializer ) )
assertEquals ( expectedCompression , forType ( compressionType ) )
assertNotNull ( heartbeat . getAgentInfo ( ) )
assertEquals ( MANIFEST_HASH , heartbeat . getAgentInfo ( ) . getManifestHash ( ) )
assertEquals ( 0 , properties . size ( ) )
assertEquals ( OperationState . ERROR , response . getState ( ) )
assertEquals ( properties , result )
assertEquals ( getExpected ( OperationState . FULLY_APPLIED ) , result )
assertEquals ( getExpected ( OperationState . NO_OPERATION ) , result )
assertEquals ( getExpected ( OperationState . NOT_APPLIED ) , result )
assertThrows ( RuntimeException . class , ( ) -> updatePropertiesOperationHandler . handle ( c2Operation ) )
assertEquals ( responseHeaders . size ( ) , expectedSize )
assertEquals ( responseHeaders . size ( ) , 0 )
assertEquals ( "" , outputStream . toString ( ) )
assertEquals ( trim ( unknown ) , "<expected value>" )
assertEquals ( trim ( "expectedValue" ) , trim ( "actualValue" ) )
assertEquals ( "" , outputStream . toString ( ) . trim ( ) )
assertEquals ( "expectedValue" , trim ( "actualValue" ) )
assertEquals ( "SHUTDOWN" , trim ( outputStream . toString ( ) ) )
assertEquals ( "RELOAD" , trim ( outputStream . toString ( ) ) )
assertEquals ( trim ( "UPDATE_CONFIGURATION" ) , c2Operation . getIdentifier ( ) )
assertEquals ( "id" , c2Operation . getIdentifier ( ) )
assertThrows ( IOException . class , ( ) -> bootstrapCodec . communicate ( inputStream , outputStream ) )
assertEquals ( null , getCurrentPort ( ) )
assertNull ( xpath . evaluate ( expression , config ) )
assertNull ( xpath . evaluate ( expression , config ) )
assertEquals ( "org.apache.nifi.prioritizer.FirstInFirstOutPrioritizer" , xpath . evaluate ( expression , config ) )
assertNull ( properties . getProperty ( descriptor ) )
assertEquals ( HttpURLConnection . HTTP_OK , urlConnection . getResponseCode ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , urlConnection . getResponseCode ( ) )
assertEquals ( 1 , idToNameList . size ( ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertEquals ( true , isValid ( ) )
assertEquals ( "Unsupported version: 9999999" , e . getMessage ( ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertThat ( sourceRelationshipNames . size ( ) , is ( equalTo ( 0 ) ) )
assertEquals ( "" , ? ? ? )
assertEquals ( "" , ? ? ? )
assertEquals ( operationQueue , objectMapper . readValue ( any ( File . class ) , eq ( OperationQueue . class ) ) )
assertFalse ( result ) ;
assertEquals ( true , result )
assertEquals ( true , result )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expected , status )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expected , actual )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Expected FileNotFoundException to be thrown" , FileNotFoundException . class , assertThrows ( FileNotFoundException . class , ( ) -> { ? ? ? testTransformErrorOpeningInput ( ) ; } ) . getClass ( ) )
assertEquals ( "CsvToJson.xml" , testOutput )
assertEquals ( "malformed xml" , ? ? ? )
assertEquals ( 25 , new LimitedInputStream ( ConfigMainTest . class . getClassLoader ( ) . getResourceAsStream ( "TemplateWithFunnel.xml" ) , 25 ) . getLimit ( ) )
assertEquals ( 1 , 1 )
assertThrows ( FileNotFoundException . class , ( ) -> pathInputStreamFactory . create ( testInput ) )
assertThrows ( IOException . class , ( ) -> execute ( action , facts ) )
assertEquals ( "CsvToJson-v1.yml" , testOutput )
assertEquals ( "CsvToJson-v1.yml" , getClass ( ) . getClassLoader ( ) . getResourceAsStream ( "CsvToJson-v1.yml" ) )
assertEquals ( true , configSchema . isValid ( ) )
assertEquals ( ConnectableType . FUNNEL . name ( ) , dto . getSource ( ) . getType ( ) )
assertNotNull ( exception )
assertEquals ( null , new C2ClientConfig ( this ) )
assertEquals ( "java" , builder . command )
assertEquals ( "Expected message" , "REFERENCE_CLASS" , message )
assertEquals ( deprecationLogger , DeprecationLoggerFactory . getLogger ( DeprecationLoggerFactoryTest . class ) )
assertEquals ( "value" , evaluated )
assertEquals ( "x" , "x" , result )
assertThat ( attrs . get ( "yy" ) ) . isEqualTo ( "world" )
assertEquals ( "world" , attrs . get ( "xx" ) )
assertEquals ( "Hello, World how are you?" , evaluate ( "Hello, #audience# #comma##question#" , attributes ) )
assertEquals ( trim ( property ) , trim ( outputProperty ) )
assertEquals ( value , resultValue )
assertEquals ( value , resultValue )
assertEquals ( keyValues , resultMap )
assertThat ( size ( ) , is ( equalTo ( expectedSize ) ) )
assertThat ( tokens . size ( ) ) . isEqualTo ( expectedSize )
assertEquals ( 0 , size ( ) )
assertThat ( tokens . size ( ) ) . isEqualTo ( < expected size > )
assertThat ( tokens . size ( ) , is ( 2 ) )
assertThat ( tokens . size ( ) ) . isEqualTo ( < expected size > )
assertEquals ( Optional . empty ( ) , paramContext . getParameter ( "foo" ) )
assertEquals ( 8000 , clusterProtocolAddress . getPort ( ) )
assertEquals ( expected , titleCased )
assertEquals ( PROPERTY , decrypted )
assertArrayEquals ( decoded , Hex . decodeHex ( encrypted ) )
assertEquals ( encryptResponse , kmsClient . encrypt ( any ( EncryptRequest . class ) ) )
assertEquals ( PROTECTED_PROPERTY , property )
assertEquals ( "expectedIdentifierKey" , identifierKey )
assertEquals ( secretName , createSecretResponse . getName ( ) )
assertEquals ( secretName , getSecretValueResponse . getName ( ) )
assertEquals ( "anyValue" , property )
assertEquals ( encryptResult , cryptographyClient . encrypt ( eq ( ALGORITHM ) , any ( byte [ ] . class ) ) )
assertEquals ( property , PROTECTED_PROPERTY )
assertEquals ( protectedProperty , "<expected value>" )
assertEquals ( PROPERTY , property )
assertEquals ( "expectedIdentifierKey" , identifierKey )
assertEquals ( "expectedIdentifierKey" , identifierKey )
assertEquals ( "expectedValue" , getContextKey ( ) )
assertNotNull ( exception )
assertEquals ( null , identifierKey )
assertEquals ( null , identifierKey )
assertEquals ( "Boston" , attributes . get ( "city" ) )
assertEquals ( "Doe" , record . getValue ( "lastName" ) )
assertEquals ( "id" , 48 , record . getField ( "id" ) )
assertEquals ( recordSchema , resultSchema )
assertEquals ( RecordFieldType . STRING . getDataType ( ) , resultSchema . getField ( "column" ) . getDataType ( ) )
assertEquals ( recordSchema , resultSchema )
assertEquals ( null , getDecimalDataType ( 0 , 0 ) )
assertEquals ( DataType . DECIMAL , getDecimalDataType ( 10 , 2 ) )
assertEquals ( DataType . class , getDataType ( ) . getClass ( ) )
assertEquals ( null , timestamp )
assertEquals ( field , timestamp )
assertEquals ( EMPTY , timestamp )
assertNotNull ( exception )
assertEquals ( expected , timestamp )
assertEquals ( expected , timestamp )
assertNotNull ( exception )
assertEquals ( set . getDataType ( ) , RecordFieldType . DOUBLE . getDataType ( ) )
assertEquals ( 2 , set . size ( ) )
assertEquals ( RecordFieldType . INT . getDataType ( ) , set . getDataType ( ) )
assertEquals ( RecordFieldType . INT . getDataType ( ) , set . getDataType ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "SUCCESS" , resultHolder . get ( ) )
assertEquals ( KEY_ID , secretKeyFound . getKey ( ) )
assertEquals ( keyIds . size ( ) , expectedSize )
assertEquals ( SECRET_KEY , secretKeyFound )
assertEquals ( Collections . singletonList ( KEY_ID ) , keyIds )
assertEquals ( secretKey , readSecretKey )
assertEquals ( sslContext , builder . build ( ) )
assertEquals ( TLS_PROTOCOL , builder . protocol )
assertEquals ( keyStore , builder . getKeyStore ( ) )
assertEquals ( trustStore , builder . getTrustStore ( ) )
assertEquals ( "expectedValue" , configuration . getFunctionalKeyPassword ( ) )
assertEquals ( PROTOCOL , configuration . getEnabledProtocols ( ) )
assertNotNull ( transaction )
assertThrows ( Exception . class , ( ) -> client . createTransaction ( TransferDirection . SEND ) )
assertEquals ( 1 , peers . size ( ) )
assertNotNull ( e )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , assertThrows ( Exception . class , ( ) -> {
assertThat ( serverChecksum , is ( "1071206772" ) )
assertNotNull ( e )
assertNotNull ( packet )
assertEquals ( "output-timeout" , client . portName )
assertEquals ( "http://host1:8080/nifi,https://host2:8080/nifi,http://host3:8080/nifi" , exception . getMessage ( ) )
assertNotNull ( exception )
assertEquals ( data , decompressed )
assertEquals ( data , decompressed )
assertEquals ( 0 , demarcator . nextOffsetInfo ( ) . getOffset ( ) )
assertEquals ( 0 , demarcator . nextOffsetInfo ( ) . getOffset ( ) )
assertEquals ( "1 validation error: <error message>" , mex . getLocalizedMessage ( ) )
assertEquals ( jarFilePath , getClassLoader ( ) . toString ( ) )
assertEquals ( 1 , urls . length )
assertEquals ( 4 , urls . length )
assertEquals ( i , ringBuffer . getNewestElement ( ) )
assertEquals ( LOCALHOST , builder . getHost ( ) )
assertEquals ( PORT , builder . getPort ( ) )
assertEquals ( ENCODED_PATH , builder . getEncodedPath ( ) )
assertEquals ( URI . create ( "http://localhost/resources" ) , uri )
assertEquals ( "http://localhost/resources?parameterName=parameterValue" , uri . toString ( ) )
assertEquals ( null , builder . getQueryParameters ( ) . get ( PARAMETER_NAME ) )
assertEquals ( "https" , determineProxiedScheme ( request ) )
assertEquals ( "http" , determineProxiedScheme ( request ) )
assertEquals ( "http" , determineProxiedScheme ( request ) )
assertEquals ( "localhost" , determineProxiedHost ( request ) )
assertEquals ( "x-proxy-host" , determineProxiedHost ( request ) )
assertEquals ( "x-proxy-host:443" , request . getHeader ( WebUtils . PROXY_HOST_HTTP_HEADER ) )
assertEquals ( "x-forwarded-host" , request . getHeader ( WebUtils . FORWARDED_HOST_HTTP_HEADER ) )
assertEquals ( "x-forwarded-host:443" , request . getHeader ( WebUtils . FORWARDED_HOST_HTTP_HEADER ) )
assertEquals ( "443" , determineProxiedPort ( request ) )
assertEquals ( "8443" , determineProxiedPort ( request ) )
assertEquals ( "1234" , determineProxiedPort ( request ) )
assertEquals ( "8443" , determineProxiedPort ( request ) )
assertEquals ( "8443" , determineProxiedPort ( request ) )
assertEquals ( "1234" , determineProxiedPort ( request ) )
assertEquals ( "8443" , determineProxiedPort ( request ) )
assertEquals ( firstObject , secondObject )
assertEquals ( pool . size ( ) , 10 )
assertEquals ( 10 , recovered . size ( ) )
assertEquals ( records . size ( ) , recovered . size ( ) )
assertEquals ( 1 , document . getVersion ( ) )
assertNotNull ( document )
assertThat ( stringData , is ( "12345" ) )
assertEquals ( RESOURCE_NOT_FOUND , ? ? ? testResourceNotFound ( ) )
assertEquals ( RequestAction . READ , policy . getAction ( ) )
assertEquals ( ParseResultType . NOT_NUMBER , extensionManifest )
assertEquals ( iterations , processor . getCounter ( ) . getValue ( ) )
assertEquals ( 5 , runner . getThreadCount ( ) )
f . assertAttributeEquals ( "key" , "expectedValue" )
validator . assertFlowFile ( mockFlowFile )
assertEquals ( "TestName" , runner . getProcessorName ( ) )
assertRecordCount ( results , 5 )
assertThat ( size ( ) , is ( 5 ) )
assertQueueSize ( results , 1 )
assertQueueSize ( results , 5 )
assert results . size ( ) == 5
assertThat ( results . size ( ) , equalTo ( 5 ) )
assertThat ( results . size ( ) , is ( 5 ) )
assertThat ( results . size ( ) , equalTo ( 5 ) )
assertThat ( results . size ( ) , is ( equalTo ( 1 ) ) )
assert results . size ( ) == 0
assertEquals ( 0 , readCount )
assertEquals ( "hello Joe" , new String ( response . getBody ( ) ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) . size ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) . size ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) . size ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) . size ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( null , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( 0 , fetcher . fetchNext ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( null , deserialize ( null ) )
assertEquals ( null , deserialize ( new byte [ 0 ] ) )
runner . assertTransferCount ( REL_NEW , 0 )
assertEquals ( state , mockObjectFetcher . saveState ( ) )
assertEquals ( state , mockObjectFetcher . saveState ( ) )
assertEquals ( "namespace1" , nifiFlow . getNamespace ( ) )
assertEquals ( 2 , size ( ) )
assertThat ( atlasProperties . getProperty ( ATLAS_URLS ) ) . isEqualTo ( atlasUrls )
assertNotNull ( atlasProperties )
assertEquals ( "expectedValue" , getParameterValue ( "rawValue" , ParameterValueEncoding . BASE64 ) )
assertEquals ( rawValue , getParameterValue ( rawValue , encoding ) )
assertEquals ( rawValue , getParameterValue ( rawValue , encoding ) )
runner . assertAllFlowFilesTransferred ( PutCloudWatchMetric . REL_FAILURE , 1 )
runner . assertAllFlowFilesTransferred ( PutCloudWatchMetric . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( PutDynamoDBRecord . REL_SUCCESS , 1 )
assertThat ( result . getItemsToPut ( ) . size ( ) , is ( 3 ) )
assertEquals ( "expectedValue" , flowFile . getAttribute ( "key" ) )
flowFile . assertAttributeEquals ( "key" , "expectedValue" )
assertEquals ( 1 , size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , size ( ) )
size ( ) . assertEquals ( flowFiles . size ( ) )
size ( ) == 2
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( "invalid state" , exception . getMessage ( ) )
assertEquals ( false , fixture . isProcessingRecords ( ) )
assertEquals ( false , fixture . isProcessingRecords ( ) )
session . assertTransferCount ( ConsumeKinesisStream . REL_SUCCESS , 0 )
runner . assertAllFlowFilesTransferred ( PutS3Object . REL_SUCCESS , 3 )
runner . assertAllFlowFilesTransferred ( PutS3Object . REL_SUCCESS , 3 )
assertEquals ( storageClass . name ( ) , request . getStorageClass ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( false , result . isValid ( ) )
assertEquals ( false , result . isValid ( ) )
assertEquals ( false , result . isValid ( ) )
assertEquals ( null , ? ? ? createEncryptionClient ( credentialsProvider , clientConfiguration ) )
assertEquals ( 1 , runner . getFlowFilesForRelationship ( PutSNS . REL_SUCCESS ) . size ( ) )
runner . assertAllFlowFilesTransferred ( PutSQS . REL_SUCCESS , 1 )
assertEquals ( "https://myaccount.blob.core.usgovcloudapi.net" , endpoint )
assertEquals ( "https://myaccount.blob.core.windows.net" , endpoint )
AssertPlaceHolder = "assertEquals(\"https://myaccount.dfs.core.usgovcloudapi.net\", endpoint);"
assertEquals ( "https://myaccount.azure.net" , endpoint )
assertNotNull ( processor . getCosmosClient ( ) )
assertEquals ( null , processor . getCosmosClient ( ) )
assertNotNull ( getProcessor ( ) )
assertNotNull ( flowFile . getAttribute ( "key" ) )
assertNotNull ( flowFile . getAttribute ( "key" ) )
assertEquals ( 10 , size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( clientOne , clientTwo )
assertEquals ( getEndpointSuffix ( ) , actual . getEndpointSuffix ( ) )
assertEquals ( "expectedValue" , actual . getEndpointSuffix ( ) )
assertEquals ( "expectedEndpointSuffix" , actual . getEndpointSuffix ( ) )
assertEquals ( expectedJson , actualJson )
assertEquals ( primitiveType . toString ( ) , dataTypeName )
assertEquals ( "ONE" , testRunner . getProperty ( AbstractCassandraProcessor . CONSISTENCY_LEVEL ) )
assertEquals ( "Expected AssertionError to be thrown" , AssertionError . class , e . getClass ( ) )
outFile . assertAttributeEquals ( "key" , "value" )
assertEquals ( expectedFileNames , actualFileNames )
assertEquals ( expectedFileNames , actualFileNames )
assertEquals ( true , passed )
assertEquals ( false , condition . evaluate ( facts ) )
assertEquals ( true , passed )
assertEquals ( 49 , condition . evaluate ( facts ) )
assert rules . size ( ) == < expected size >
assert rules . size ( ) > 0
assertEquals ( 1 , rules . size ( ) )
assert rules . size ( ) > 0
assertThat ( size ( ) , equalTo ( expectedSize ) )
QueueSize size = new QueueSize ( rules . size ( ) )
assertNotNull ( size )
assertEquals ( 60 , size ( ) )
runner . assertQueueSize ( ExtractEmailAttachments . REL_ATTACHMENTS , 0 )
runner . assertTransferCount ( ExtractEmailAttachments . REL_ATTACHMENTS , 1 )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( "basename-chunk1-record2.txt" , getName ( "basename" , 1 , 2 , ".txt" ) )
assertEquals ( "basename-chunk1-record2.txt" , getName ( "basename" , 1 , 2 , ".txt" ) )
assertEquals ( "basename-chunk1-record2.txt" , getName ( "basename" , 1 , 2 , ".txt" ) )
assertEquals ( "basename" , getBasename ( flowFile , componentLog ) )
assertEquals ( "basename" , getBasename ( flowFile , componentLog ) )
assertEquals ( 10 , binaryReader . getOffset ( ) )
assertEquals ( expectedValue , getCdata ( ) )
? ? ? testInit ( ) { assertEquals ( "expectedValue" , getToken ( ) ) ; } @ Override public String getToken  ( ) { return token ; } ? ? ?
? ? ? testInit ( ) { assertEquals ( "expectedValue" , getToken ( ) ) ; } @ Override public String getToken  ( ) { return token ; } ? ? ?
? ? ? testInit ( ) { assertEquals ( "expectedValue" , getToken ( ) ) ; } @ Override public String getToken  ( ) { return token ; } ? ? ?
? ? ? testInit ( ) { assertEquals ( "expectedValue" , getToken ( ) ) ; } @ Override public String getToken  ( ) { return token ; } ? ? ?
assertEquals ( "The description of the dynamic property value" , getValue ( ) )
? ? ? testInit ( ) { assertEquals ( "expectedValue" , getToken ( ) ) ; } @ Override public String getToken  ( ) { return token ; } ? ? ?
assertEquals ( val . length ( ) , binaryReader . getDWord ( ) )
assertEquals ( val . length ( ) , binaryReader . getString ( ) . length ( ) )
assertEquals ( val . length ( ) , binaryReader . length ( ) )
assertEquals ( 4 , data . size ( ) )
assertEquals ( false , testBinaryReaderBuilder . putDWord ( intBits ) )
assertEquals ( 1.23456 , value , 0.00001 )
assertEquals ( guid , "a1b2c3d4-e5f6-a7b8-c9da-ebf001121314" )
assertEquals ( "04D2" , hex )
assertEquals ( "fffffffffffffff2" , hex )
assertEquals ( null , < focalMethod > ( ) )
assertEquals ( 7 , testBinaryReaderBuilder . getDWord ( ) )
assertEquals ( - 25 , value )
assertEquals ( value . length ( ) , < expected length >  )
assertEquals ( value , binaryReader . getValue ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( value . length ( ) , data . size ( ) )
assertEquals ( value , "<AssertPlaceHolder>" )
assertNotNull ( clazz )
assertEquals ( 1 , 1 )
assertEquals ( 1 , queue . size ( ) )
assertEquals ( readSchema , result )
assertEquals ( 6 , result . getFields ( ) . size ( ) )
assertThat ( isDynamicCSVFormat ) . isTrue ( )
assertThat ( isDynamicCSVFormat ) . isTrue ( )
assertEquals ( true , isDynamicCSVFormat )
assertThat ( isDynamicCSVFormat ) . isTrue ( )
assertThat ( isDynamicCSVFormat ) . isTrue ( )
assert . assertEquals ( 3 * MAXIMUM_CHUNK_SIZE - 1 , size ( ) )
assertThat ( size ( ) , is ( 11 ) )
assertEquals ( "Attribute map is null" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( AZURE_STORAGE_CREDENTIALS_NAME_ATTRIBUTE , actual )
assertEquals ( true , event . isValid ( ) )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( 0 , size ( ) )
assertEquals ( StandardLineageResult . class , result . getClass ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 0 , users . size ( ) )
assertEquals ( 0 , userGroupProvider . getTenants ( ) . size ( ) )
assertEquals ( null , managedAuthorizer . getFingerprint ( ) )
assertEquals ( TENANT_FINGERPRINT , userGroupProvider . getFingerprint ( ) )
assertEquals ( Collections . emptyList ( ) , proxiedEntitiesChain )
assertEquals ( StandardLineageResult . class , result . getClass ( ) )
assertNull ( result )
assertEquals ( result , testDataAuthorizable . checkAuthorization ( testAuthorizer , RequestAction . READ , user , null ) )
assertEquals ( StandardLineageResult . class , result . getClass ( ) )
assertEquals ( StandardLineageResult . class , result . getClass ( ) )
assertEquals ( StandardLineageResult . class , result . getClass ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 0 , size ( ) )
assertEquals ( msg , unmarshalled )
assertNotNull ( unmarshalled )
objectType . assertEquals ( JdbcConnectionPool . class )
assertEquals ( length , builder . length )
assertEquals ( RunStatus . Stopped . name ( ) , nodeOneControllerserviceEntity . getComponent ( ) . getRunStatus ( ) )
assertEquals ( false , proxiedService . isProxied ( ) )
assertEquals ( "Testing 1 being shown in exception message" , observer . getLogs ( ) . get ( 0 ) . getMessage ( ) )
assertEquals ( 0 , observer . getLoggedMessages ( ) . size ( ) )
assertThat ( size ( ) , is ( 1024 * 1024L ) )
assertEquals ( year , val )
assertEquals ( expected , filtered )
assertEquals ( expectedFlow , actualFlow )
assertEquals ( authFingerprint . getBytes ( StandardCharsets . UTF_8 ) , proposedDataFlow . getAuthorizerFingerprint ( ) )
assertEquals ( id , processorNode . getId ( ) )
assertNull ( controller . getFlowManager ( ) . getControllerServices ( pg . getIdentifier ( ) ) )
assertEquals ( 2 , repositoryRecord . getAttributes ( ) . size ( ) )
assertEquals ( 65536 , repositoryRecord . getAttributes ( ) . get ( "testName" ) . length ( ) )
assertEquals ( 2 , repositoryRecord . getVersion ( ) )
assertNotNull ( ff1 )
assertNotNull ( outputStreamHolder . get ( ) )
assertNotNull ( inputStreamHolder . get ( ) )
assertNotNull ( outputStreamHolder . get ( ) )
assertEquals ( 0 , flowFileQueue . size ( ) )
assertEquals ( 1 , flowFileQueue . size ( ) )
assertEquals ( 7 , flowFiles . size ( ) )
assertEquals ( "hello, world" , new String ( buffer ) )
assertThat ( bogus . exists ( ) ) . isFalse ( )
assertNotEquals ( claim1 . getResourceClaim ( ) , claim2 . getResourceClaim ( ) )
assertEquals ( helloWorldFile . toPath ( ) , toPath ( ) )
assertEquals ( 1 , size ( ) )
assertEquals ( "value" , getProvider ( protectionScheme ) . getState ( ) . get ( "testSetAndGet" ) )
assertEquals ( false , replaced )
assertNotNull ( heartbeat )
assertEquals ( null , ? ? ? getProperty ( descriptor ) ? ? ? )
statusAnalyticsEngine . getStatusAnalytics ( "1" )
assertEquals ( RecordFieldType . SIMPLE_NAME_MAP . get ( "typeString" ) , of ( "typeString" ) )
assert ( target == 50 )
assertEquals ( expected , result )
assertEquals ( 6 , size . size ( ) )
assertEquals ( fp1 , fp2 )
assertEquals ( fp1 , fp2 )
assertEquals ( 0 , validationErrors . size ( ) )
assertEquals ( extensionMapping , unpackNars ( properties , NarClassLoaders . FRAMEWORK_NAR_ID , SystemBundle . create ( properties ) , NarUnpackMode . UNPACK_INDIVIDUAL_JARS ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( illegalArgumentException . getMessage ( ) )
assertEquals ( "Invalid port number: null" , illegalArgumentException . getMessage ( ) )
assertNotNull ( ioException )
assertNotNull ( e )
assertNotNull ( e . getMessage ( ) )
assertNull ( authentication )
assertNull ( requestLog )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( AgentStatus . class , response . getStatus ( ) . getClass ( ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 0 , matches . size ( ) )
assertThat ( matches . size ( ) , is ( 0 ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , mappings . size ( ) )
assertEquals ( 0 , mappings . size ( ) )
assertEquals ( 3 , mappings . size ( ) )
assertEquals ( "jsmith@aaa.bbb" , mappedIdentity )
assertEquals ( "cn=jsmith,dc=aaa,dc=bbb" , mappedIdentity )
assertEquals ( "cn=jsmith,dc=aaa,dc=bbb" , mappedIdentity )
assertEquals ( 0 , size . size ( ) )
assertEquals ( 0 , groups . size ( ) )
assertEquals ( "Expected NiFiUserDetails to be an instance of NiFiUser" , NiFiUser . class , userDetails . getNiFiUser ( ) . getClass ( ) )
assertEquals ( "Expected NiFiUserDetails to be an instance of NiFiUser" , NiFiUser . class , userDetails . getNiFiUser ( ) . getClass ( ) )
assertEquals ( "Expected NiFiUserDetails to be an instance of NiFiUser" , NiFiUser . class , userDetails . getNiFiUser ( ) . getClass ( ) )
assertNotNull ( getPath ( ) )
assertEquals ( expiration , now ( ) )
assertEquals ( serialized , saved )
assertEquals ( "Bearer " + BEARER_TOKEN , request . getHeader ( SecurityHeader . AUTHORIZATION . getHeader ( ) ) )
assertEquals ( null , bearerToken )
assertEquals ( null , bearerToken )
assertEquals ( BEARER_TOKEN , bearerToken )
assertFalse ( result . hasErrors ( ) )
assertTrue ( result . hasErrors ( ) )
assertEquals ( null , saved )
assertFalse ( request . isSecure ( ) )
assertEquals ( null , request . getCookies ( ) )
assertNull ( request . getCookies ( ) )
assertEquals ( "not-hadoop-jwt" , authRequest . getCredentials ( ) )
assertEquals ( USERNAME , usernameCaptor . getValue ( ) )
assertEquals ( null , shouldNotExistRequest )
assertNotNull ( exception )
assertEquals ( request , get ( REQUEST_IDENTIFIER . getBytes ( ) , new ValueInboundAdapter < AbstractSaml2AuthenticationRequest > ( ) ) )
assertEquals ( request , repository . removeAuthenticationRequest ( httpServletRequest , httpServletResponse ) )
assertNull ( request )
assertNotNull ( request )
assertEquals ( request , cachedRequest )
assertNotNull ( object )
runner . assertValid ( )
runner . assertValid ( )
assertEquals ( 0 , runner . getQueueSize ( ) )
assertEquals ( Collections . emptyList ( ) , mockList )
assertNull ( parseContentDisposition ( contentDisposition ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , integer . get ( ) )
assertEquals ( "OperationQueue{currentOperation=null, remainingOperations=[]}" , queue . toString ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( 1 , privilegedExceptionActionArgumentCaptor . getAllValues ( ) . size ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) )
runner . assertAllFlowFilesTransferred ( MoveHDFS . REL_SUCCESS )
assertEquals ( 1 , flowFiles . size ( ) )
runner . assertAllFlowFilesTransferred ( MoveHDFS . REL_SUCCESS )
assertNotNull ( error )
assertNull ( value )
assertEquals ( true , filter . accept ( path ) )
assertEquals ( true , filter . accept ( Paths . get ( "/root" ) ) )
assertEquals ( value , getParameterValue ( rawValue , encoding ) )
assertEquals ( Collections . emptyMap ( ) , vaultCommunicationService . readKeyValueSecretMap ( PATH , "context" ) )
assertEquals ( value , getParameterValue ( value , ParameterValueEncoding . BASE64 ) )
assertEquals ( VALUE , result )
assertEquals ( VALUE_2 , result )
assertEquals ( true , result )
assertTrue ( result )
assertEquals ( false , result )
assertThat ( result ) . isEqualTo ( 2 )
assertEquals ( value , result )
assertEquals ( true , exception )
runner . assertTransferCount ( PutHBaseCell . REL_SUCCESS , 0 )
assertEquals ( json , "<expected value>" )
assertEquals ( json , "<expected value>" )
assertEquals ( null , deserialized )
assertEquals ( "bad sql" , e . getMessage ( ) )
assertEquals ( expectedSize , queue . size ( ) )
assertEquals ( expectedSize , queue . size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( 1 , size ( ) )
assertEquals ( "badDb" , e . getCause ( ) . getDbName ( ) )
assertEquals ( "Test Exception" , e . getMessage ( ) )
assertEquals ( expectedType , orcType )
assertEquals ( "enum" , orcType . getTypeName ( ) )
assertNotNull ( pe . getCause ( ) )
runner . assertTransferCount ( PutHive3Streaming . REL_FAILURE , 1 )
runner . assertTransferCount ( PutHive3Streaming . REL_FAILURE , 1 )
runner . assertTransferCount ( PutHive3Streaming . REL_FAILURE , 1 )
runner . assertTransferCount ( PutHive3Streaming . REL_FAILURE , 1 )
assertThat ( orcType , equalTo ( createBoolean ( ) ) )
orcType . assertEquals ( TypeInfo . createEnumTypeInfo ( "enum" , "a" , "b" , "c" ) , "Incorrect Orc type for enumField" )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , runner . getFlowFilesForRelationship ( PutInfluxDB . REL_SUCCESS ) . size ( ) )
assertEquals ( result . getResults ( ) . size ( ) , 1 )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 2 , flowFiles . get ( 0 ) . getAttribute ( "rain" ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( SINGLE_TEST_BROKER_WITH_SCHEME , runner . getProperty ( cfProvider , JMSConnectionFactoryProperties . JMS_BROKER_URI ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<AssertPlaceHolder>" , cnf . getMessage ( ) )
runner . assertAllFlowFilesTransferred ( PublishKafkaRecord_2_0 . REL_FAILURE , 0 )
assertEquals ( 0 , runner . getFlowFilesForRelationship ( PublishKafkaRecord_2_0 . REL_FAILURE ) . size ( ) )
runner . assertAllFlowFilesTransferred ( PublishKafka_2_0 . REL_FAILURE , 0 )
assertEquals ( 3 , getQueueSize ( ) . getQueueSize ( ) )
runner . assertAllFlowFilesTransferred ( PublishKafkaRecord_2_6 . REL_FAILURE , 0 )
assertEquals ( 0 , runner . getFlowFilesForRelationship ( PublishKafkaRecord_2_6 . REL_FAILURE ) . size ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) )
assertEquals ( 3 , runner . getQueueSize ( ) )
assertEquals ( expectedConfig , builder . build ( ) . toString ( ) )
assertEquals ( properties . get ( KafkaClientComponent . SECURITY_PROTOCOL ) , securityProtocol . name ( ) )
assertEquals ( 1 , size ( ) )
assertEquals ( 1 , size ( ) )
runner . assertQueueSize ( ResizeImage . REL_FAILURE , 1 )
runner . assertAllFlowFilesTransferred ( ResizeImage . REL_FAILURE , 1 )
runner . assertAllFlowFilesTransferred ( ResizeImage . REL_FAILURE , 1 )
assertEquals ( 0 , size ( ) )
assertEquals ( 0 , reporterMock . reportCount ( ) )
runner . assertTransferCount ( GetMongo . REL_SUCCESS , 3 )
assertEquals ( 10 , count )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "expected formatted date" , expectedFormattedDate , formatted )
assertEquals ( ParseResultType . WHOLE_NUMBER , parsed )
assertEquals ( null , rootGroupStatus . getName ( ) )
assertEquals ( 1 , closeCount . get ( ) )
assertEquals ( 0 , closeCount . get ( ) )
assert newSize > storeSize
assertEquals ( "Expected UnsupportedOperationException to be thrown" , UnsupportedOperationException . class , assertThrows ( AuthorizationAccessException . class , ( ) -> managedRangerAuthorizer . getFingerprint ( ) ) )
assertEquals ( "" , userGroupProvider . getFingerprint ( ) )
assertEquals ( TENANT_FINGERPRINT , userGroupProvider . getFingerprint ( ) )
assertEquals ( "" , serialize ( null ) )
assertEquals ( null , deserialize ( null ) )
assertEquals ( 0 , results . size ( ) )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , "Deleted count should be 1 but was 0 for document with id 'id1'" )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , AbstractRethinkDBProcessor . DOCUMENT_ID_EMPTY_MESSAGE )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , AbstractRethinkDBProcessor . DOCUMENT_ID_EMPTY_MESSAGE )
runner . getAttribute ( key )
assertEquals ( 1 , flowFiles . size ( ) )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , "Document with id '" + DOCUMENT_ID + "' not found" )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , GetRethinkDB . DOCUMENT_ID_EMPTY_MESSAGE )
flowFiles . get ( 0 ) . assertAttributeEquals ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE , GetRethinkDB . DOCUMENT_ID_EMPTY_MESSAGE )
runner . getAttribute ( "rethinkdb.id" )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 200 , describeSObjectResultJson . getResponseCode ( ) )
assertEquals ( query , "SELECT id,BillingAddress FROM Account" )
assertEquals ( errorMessage , exception . getMessage ( ) )
assertEquals ( expectedWrappedNode , actualWrappedJson )
assertEquals ( expectedExtendedSchema , actualExtendedSchema )
assertQueueNotEmpty ( )
assertEquals ( actions . size ( ) , 2 )
assertEquals ( initialStartTime , timers . getStartTime ( ) . toString ( ) )
assertEquals ( initialStartTime , timers . getStartTime ( new Date ( initialStartTime ) ) )
assertEquals ( expectedEndTime , timers . getEndTime ( ) . toString ( ) )
assertEquals ( expectedEndTime , timers . getExclusiveEndTime ( ) )
assertEquals ( expectedEndTime , timers . getEndTime ( ) . toString ( ) )
assertEquals ( 3 , size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( 1000 , size ( ) )
assertEquals ( 1000 , size ( ) )
assertEquals ( 1000 , task . size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( 3 , size ( ) )
assertEquals ( 3 , size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( 0 , size ( ) )
assertNotNull ( getString ( 0 ) )
assertEquals ( expected , requestBody )
testRunner . assertAllFlowFilesTransferred ( PutSlack . REL_SUCCESS , 1 )
testRunner . assertTransferCount ( REL_SUCCESS , 1 )
assertEquals ( 0 , testRunner . getFlowFilesForRelationship ( REL_SUCCESS ) . size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( 0 , testRunner . getFlowFilesForRelationship ( REL_SUCCESS ) . size ( ) )
assertEquals ( 0 , testRunner . getFlowFilesForRelationship ( "success" ) . size ( ) )
assertEquals ( 0 , testRunner . getFlowFilesForRelationship ( REL_SUCCESS ) . size ( ) )
assertEquals ( shareAccessSet , testRunner . getProperty ( PutSmbFile . SHARE_ACCESS_READ ) )
assertEquals ( suffix , testRunner . getProperty ( PutSmbFile . RENAME_SUFFIX ) )
assertEquals ( "Enterprise OID cannot be null" , exception . getMessage ( ) )
assertEquals ( "Invalid agent address" , exception . getMessage ( ) )
assertEquals ( "Invalid generic trap type: -1" , exception . getMessage ( ) )
assertEquals ( "The generic trap type should be greater than 6" , "The generic trap type should be greater than 6" , exception . getMessage ( ) )
assertEquals ( "Invalid generic trap type" , exception . getMessage ( ) )
assertEquals ( "Specific trap type should be negative" , "Specific trap type is not negative" , exception . getMessage ( ) )
assertEquals ( "Invalid generic trap type" , exception . getMessage ( ) )
assertEquals ( target . getAddress ( ) . toString ( ) , actualTargetAddress )
assertEquals ( LOCALHOST , address )
assertEquals ( cannotModifyOidStatusMessage , getErrorStatusText ( ) )
assertEquals ( null , format ( null , null ) )
assertEquals ( "Expected error message" , "Expected error message" , logMessage . getMessage ( ) )
assertEquals ( expectedDebugLog , sendTrapSNMPHandler . getMsg ( ) )
assertEquals ( expectedLogMessage , actualLogMessage )
assertEquals ( expectedLogMessage , actualLogMessage )
assertEquals ( expectedLogMessage , actualLogMessage )
assertEquals ( "testOIDValue" , getSNMP . getAttribute ( TEST_OID ) )
runner . assertAllFlowFilesContainAttribute ( CoreAttributes . MIME_TYPE . key ( ) )
assertEquals ( expectedXml , runner . getOutputData ( QuerySolr . RESULTS ) . get ( 0 ) . toString ( ) )
assertThat ( rows . size ( ) , equalTo ( 0 ) )
assertEquals ( componentDetails , new ComponentDetails . Builder ( ) . build ( ) )
assertEquals ( expectedStatus , focalMethod . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
responseFlowFile . assertContentEquals ( "expectedContent" )
assertNotNull ( userAgentHeader , "User agent header is null" )
runner . assertAllFlowFilesTransferred ( CompressContent . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( CompressContent . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( CompressContent . REL_SUCCESS , 1 )
runner . assertQueueEmpty ( )
runner . assertQueueNotEmpty ( )
runner . assertQueueSize ( 0 )
runner . assertQueueSize ( 0 )
assertNotNull ( contains ( value ) )
assertNotNull ( runner . contains ( value ) )
assertNotNull ( runner . contains ( value ) )
assertNotNull ( runner . getFlowFilesForRelationship ( "failure" ) . get ( 0 ) )
assertNotNull ( contains ( value ) )
assertNotNull ( containsResult )
assertNotNull ( contains ( value ) )
assertEquals ( 1 , results . size ( ) )
assertNotNull ( out . getAttribute ( jsonPathAttrKey ) )
out . assertAttributeEquals ( "xpath.result2" , "Hello" )
testRunner . assertContentEquals ( out , expectedXml )
assertEquals ( ProvenanceEventType . SOME_EVENT_TYPE , getEventType ( ) )
runner . getFlowFilesForRelationship ( FetchFileTransfer . REL_SUCCESS ) . get ( 0 ) . assertContentEquals ( "world" )
runner . assertContentEquals ( "world" )
runner . assertAllFlowFilesTransferred ( FetchFileTransfer . REL_COMMS_FAILURE , 1 )
runner . assertAllFlowFilesTransferred ( FetchFileTransfer . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( FetchFileTransfer . REL_SUCCESS , 1 )
assertEquals ( 5 , parsed . size ( ) )
assertEquals ( 5 , parsed . size ( ) )
assertEquals ( 2 , parsed . size ( ) )
assertEquals ( currentProtocol , sslSession . getProtocol ( ) )
flowFile . assertAttributeEquals ( "client.certificate.subject.dn" , "CN=localhost" )
assertEquals ( 3 , runner . getQueueSize ( ) )
mff . assertAttributeEquals ( "record.count" , "2" )
mff . assertAttributeEquals ( "record.count" , "2" )
runner . getQueueSize ( ) . assertEquals ( 34 )
assertEquals ( 33 , runner . getQueueSize ( ) . getObjectCount ( ) )
runner . assertAllFlowFilesTransferred ( ModifyBytes . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( ModifyBytes . REL_SUCCESS , 1 )
out . assertAttributeEquals ( "filename" , "expectedFileName" )
runner . assertAllFlowFilesTransferred ( MonitorActivity . REL_SUCCESS )
assertEquals ( "2" , runner . getProperty ( "releaseSignalAttribute" ) )
runner . assertAllFlowFilesTransferred ( ParseSyslog5424 . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( ParseSyslog5424 . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( ParseSyslog5424 . REL_SUCCESS , 1 )
runner . assertQueueSize ( 0 )
runner . assertAllFlowFilesTransferred ( FetchFile . REL_SUCCESS , 1 )
runner . assertAllFlowFilesTransferred ( FetchFile . REL_SUCCESS , 1 )
assertThrows ( NumberFormatException . class , ( ) -> {
runner . assertTransferCount ( PutSQL . REL_RETRY , 4 )
assertEquals ( expected , actual )
runner . assertTransferCount ( ReplaceText . REL_SUCCESS , 1 )
assertEquals ( 1 , runner . getResults ( ) . size ( ) )
runner . assertContentEquals ( out , expected )
runner . assertContentEquals ( expected , outputString )
runner . assertContentEquals ( expected , outputString )
assertEquals ( expected , outputString )
assertEquals ( expected , outputString )
mff . assertAttributeEquals ( "exceeded.time" , "${now():toString()}" )
assertEquals ( false , validationResult . isValid ( ) )
assertEquals ( false , validationResult . isValid ( ) )
assertEquals ( "expectedValue" , getSimpleName ( "extensionName" ) )
assertEquals ( "expectedValue" , getSimpleName ( "extensionName" ) )
assertEquals ( 0 , subDirectories . size ( ) )
assertThat ( success ) . isFalse ( )
assertThat ( success ) . isTrue ( )
assertThat ( success ) . isTrue ( )
assertThat ( success ) . isFalse ( )
assertEquals ( expectedDirectory , file . getAbsolutePath ( ) )
assertEquals ( expectedDirectory , file . getAbsolutePath ( ) )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( 3 , frames . size ( ) )
assertEquals ( expected , new String ( result , StandardCharsets . UTF_8 ) )
assertEquals ( expected , new String ( result , StandardCharsets . UTF_8 ) )
assertEquals ( attributes , result )
assertEquals ( attributes , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( "Failure" , e . getMessage ( ) )
assertThat ( skipped ) . isEqualTo ( SALT_LENGTH )
assertEquals ( 1 , callCounter . get ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , cnf . getLocalizedMessage ( ) )
assertThrows ( ProcessException . class , service :: getConnection )
assertNotNull ( privateKey )
assertEquals ( privateKey , generatedPrivateKey )
assertNotNull ( e . getMessage ( ) )
assertEquals ( true , val . isValid ( ) )
assertEquals ( accessTokenValue , actual )
assertEquals ( expected , requestCaptor . getValue ( ) . header ( "Authorization" ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( false , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertEquals ( true , result . isValid ( ) )
assertNotNull ( value )
assertNotNull ( inference . toDataType ( ) )
assertNotNull ( inference . toDataType ( ) )
assertEquals ( firstId , secondId )
assertEquals ( expectedResult , getDataType ( ) )
assertThat ( getDataType ( RecordFieldType . STRING , false ) ) . isEqualTo ( expectedResult )
assertEquals ( expectedMessage , actualMessage . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( xmlResult , out . toString ( ) )
assertEquals ( trim ( xmlResult ) , trim ( out . toString ( ) ) )
assertEquals ( trim ( xmlResult ) , trim ( out . toString ( ) ) )
assertEquals ( xmlResult , out . toString ( ) )
runner . assertValid ( service )
assertEquals ( new URI ( "https://localhost:8080/pathSegment?parameterName=parameterValue" ) , uri )
assertNotNull ( webClientService . getUri ( ) )
assertNotNull ( t . getCause ( ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertNotNull ( e )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 1 , results . size ( ) )
assertEquals ( CUSTOM_AUTH , testSubject . getAuthHeaderValue ( ) )
assertEquals ( eventXmls . size ( ) , flowFilesForRelationship . size ( ) )
assertEquals ( 0 , size ( ) )
assertEquals ( WinError . ERROR_INSUFFICIENT_BUFFER , kernel32 . GetLastError ( ) )
assertEquals ( Integer . MAX_VALUE , kernel32 . GetLastError ( ) )
runner . assertTransferCount ( ORIGINAL , 0 )
runner . assertTransferCount ( ORIGINAL , 1 )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( expectedUserName , enrichUserName ( userName ) )
assertEquals ( null , existingKey )
assertEquals ( null , entity )
assertEquals ( null , entity )
assertEquals ( 0 , versionEntities . size ( ) )
assertEquals ( 3 , versionEntities . size ( ) )
assertEquals ( 0 , extensions . size ( ) )
assertNull ( event . getField ( ) )
assertEquals ( "new content" , bundleStorageDir . getBundleVersionContent ( versionCoordinate ) )
assertEquals ( BundlePersistenceException . class , e . getClass ( ) )
assertNull ( message )
assertNull ( message )
assertNotNull ( e . getMessage ( ) )
assertThrows ( UntrustedProxyException . class , ( ) -> {
assertNull ( retrievedPolicy )
assertEquals ( null , retrievedPolicy )
assertEquals ( user1 , updatedUser1 )
assertEquals ( null , updatedUser1 )
assertEquals ( group1 , updatedGroup1 )
assertEquals ( null , updatedGroup1 )
assertEquals ( 1 , size ( ) )
assertEquals ( 1 , size ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected SerializationException" , expectedMessage , e . getMessage ( ) )
assertEquals ( null , entity )
assertEquals ( null , keyStoreProvider )
assertEquals ( "BouncyCastleProvider" , keyStoreProvider )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( expectedJwt , service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertEquals ( null , service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertEquals ( "expectedFingerprint" , configurationContext . getFingerprint ( ) )
assertEquals ( "" , userGroupProvider . getFingerprint ( ) )
assertEquals ( TENANT_FINGERPRINT , userGroupProvider . getFingerprint ( ) )
assert taskScheduleDuration . toMillis ( ) >= 1000
assertEquals ( null , parseDurationInvalid ( ) )
assertEquals ( 2 , getNifiClient ( ) . getClusterSummary ( ) . getCluster ( ) . getNodes ( ) . size ( ) )
assertEquals ( clusterSummary , getNifiClient ( ) . getFlowClient ( ) . getClusterSummary ( ) )
assertEquals ( false , component . getSupportsSensitiveDynamicProperties ( ) )
assertEquals ( false , component . getSupportsSensitiveDynamicProperties ( ) )
assertThat ( candidates . size ( ) ) . isEqualTo ( < expected size > )
assertThat ( candidates . size ( ) ) . isEqualTo ( < expected size > )
assertThat ( candidates . size ( ) ) . isEqualTo ( expectedSize )
assertThat ( candidates . size ( ) , is ( equalTo ( 0 ) ) )
assertThat ( candidates . size ( ) ) . isEqualTo ( 0 )
assertEquals ( expected , resultOut )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( 0 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 4090 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 4096 , zeroCount )
assertEquals ( 1024 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( "dataFile" , getDataFile ( ) )
assertEquals ( 0 , dataPackets . size ( ) )
assertEquals ( "The description of the attribute" , getDescription ( ) )
assertNotNull ( mainClass )
assertEquals ( 2 , tlsToolkitMain . getMainMap ( ) . size ( ) )
assertEquals ( expectedSize , queue . size ( ) )
assertNotNull ( e )
assertEquals ( testAlgorithm , tlsCertificateAuthorityClientCommandLine . getKeyAlgorithm ( ) )
assertNotNull ( e )
assertEquals ( testCaHostname , tlsCertificateAuthorityClientCommandLine . getCaHostname ( ) )
assertEquals ( testDn , tlsCertificateAuthorityClientCommandLine . getDn ( ) )
assertEquals ( testPort , tlsCertificateAuthorityClientCommandLine . getPort ( ) )
assertEquals ( testCertificateFile , tlsCertificateAuthorityClientCommandLine . getCertificateDirectory ( ) )
assertEquals ( "Expected IOException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected status code to be SC_OK" , Response . SC_OK , statusCode )
assertEquals ( "Expected IOException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected IOException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Invalid HMAC" , e . getMessage ( ) )
assertEquals ( "Expected IOException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( testCaHostname , tlsCertificateAuthorityServiceCommandLine . getCaHostname ( ) )
assertEquals ( testAlgorithm , tlsCertificateAuthorityServiceCommandLine . getKeyPairAlgorithm ( ) )
assertEquals ( testSigningAlgorithm , tlsCertificateAuthorityServiceCommandLine . getSigningAlgorithm ( ) )
assertNotNull ( e )
assertEquals ( "Unknown argument: --unknownArg" , e . getMessage ( ) )
assertEquals ( testKeyAlgorithm , tlsToolkitStandaloneCommandLine . getKeyPairAlgorithm ( ) )
assertEquals ( "Expected exception message" , "Expected exception type" , e . getMessage ( ) )
assertEquals ( testSigningAlgorithm , tlsToolkitStandaloneCommandLine . getSigningAlgorithm ( ) )
assertNotNull ( e )
assertEquals ( expectedKeyStoreType , tlsToolkitStandaloneCommandLine . getKeyStoreType ( ) )
assertEquals ( testPath , tlsToolkitStandaloneCommandLine . getBaseDir ( ) . getAbsolutePath ( ) )
"<AssertPlaceHolder>"
assertEquals ( HttpURLConnection . class , tlsToolkitStandaloneCommandLine . parse ( ) )
assertNotNull ( e )
assertEquals ( testPrefix , config . getDnPrefix ( ) )
assertEquals ( testSuffix , tlsToolkitStandaloneCommandLine . getDnSuffix ( ) )
assertEquals ( root , root . getRoot ( ) )
assertEquals ( "." , calculateDefaultOutputDirectory )
assertEquals ( HttpURLConnection . class , get ( endpointPath ) . getClass ( ) )
assertNotNull ( nifiProperties )
assertEquals ( nifiProperties . getProperty ( descriptor ) , null )
assertEquals ( nifiProperties . getProperty ( descriptor ) , null )
assertEquals ( ExitCode . HELP , e . getExitCode ( ) )
assertEquals ( "Expected exception type to be CommandLineParseException" , CommandLineParseException . class , e . getClass ( ) )
assertEquals ( "Expected exception message" , "Expected exception message" , e . getMessage ( ) )
assertEquals ( "Invalid truststore type" , e . getMessage ( ) )
assertEquals ( length , generated . length ( ) )
assertEquals ( "my_silly_filename.pem" , result )
assertEquals ( "my_silly_filename.pem" , result )
assertEquals ( "my_illyfilename.pem" , result )
assertEquals ( "my_sillyfilename.pem" , result )
assertEquals ( "my-silly-filename.pem" , result )
assertEquals ( "my_silly_filename.pem" , result )
assertEqualsid,
assertEquals ( "OU=NiFi/Organisation,CN=testuser" , clientDn )
assertEquals ( "OU=NiFi#!Organisation,CN=testuser" , clientDn )
assertEquals ( key . getPrivateKey ( ) . getEncoded ( ) , getEncoded ( plaintextSensitiveValue ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertEquals ( "Expected output" , expectedOutput , getStdoutString ( ) )
assertEquals ( "expectedOutput" , testFrontend . info ( parameters ) )
assertEquals ( "expectedSavepointPath" , savepointPath )
assertEquals ( 1 , verify ( clusterClient , times ( 1 ) ) . triggerSavepoint ( eq ( jobId ) , eq ( savepointDirectory ) , eq ( SavepointFormatType . DEFAULT ) ) )
assertEquals ( formatType . toString ( ) , "<AssertPlaceHolder>" )
assertThat ( cliUnderTest . isActiveWhenTargetOnlyInConfig ( emptyCommandLine ) ) . isTrue ( )
assertEquals ( "target/maven-test-jar.jar" , getTestJobJar ( ) . getPath ( ) )
assertNotNull ( job1 )
assertThat ( accumulators . size ( ) ) . isEqualTo ( size )
assertThat ( sleepTime ) . isEqualTo ( expectedSleepTime )
assertThat ( exponentialWaitStrategy . getMaxWait ( ) ) . isEqualTo ( maxWait )
assertTrue ( nettyConfiguration . isTcpKeepAlive ( ) )
assertFalse ( nettyConfiguration . isSomeCondition ( ) )
assertThat ( region ) . isEqualTo ( expectedRegion )
assertThat ( isFalse ( ) ) . isFalse ( )
assertEquals ( null , caughtException . get ( ) )
assertThat ( actual ) . isEqualTo ( summary )
assertThat ( currentRate ) . isEqualTo ( expectedRate )
assertThat ( currentRate ) . isEqualTo ( expectedRate )
assertNotNull ( source )
assertNotNull ( source )
assertThat ( reader . pollNext ( ) , is ( nullValue ( ) ) )
assertThat ( records . getSplitsRecycled ( ) ) . isEmpty ( )
assertEquals ( true , fetcher . isIdle ( ) )
assertEquals ( true , future . isDone ( ) )
assertEquals ( true , fetcher . isRunning ( ) )
assertFalse ( fetcherThread . isAlive ( ) )
assertEquals ( false , queue . isAvailable ( ) )
assertEquals ( 0 , queue . take ( ) )
assertEquals ( true , future . isDone ( ) )
assertNull ( queue . poll ( ) )
assertEquals ( 1 , queue . size ( ) )
assertEquals ( true , future . isDone ( ) )
assertEquals ( Arrays . asList ( 0L , 1L , 2L , 3L , 4L , 5L , 6L , 7L , 8L , 9L ) , result )
assertEquals ( 10000 , result . size ( ) )
assertEquals ( n , result . size ( ) )
assertNotNull ( sink . getWriter ( ) )
assertEquals ( 0 , Files . list ( tempDir ) . count ( ) )
assertThat ( splits ) . hasSize ( 1 )
assertThat ( splits ) . hasSize ( 1 )
assertThrows ( IOException . class , ( ) -> {
assertThrows ( IOException . class , ( ) -> {
assertEquals ( 1 , enumerator . getPendingSplitsCount ( ) )
assertThat ( records ) . isEmpty ( )
assertNull ( secondSplitId )
assertThat ( recycled . get ( ) ) . isTrue ( )
iter . hasNext ( ) == false
assertNull ( iter . next ( ) )
assertEquals ( true , recycled . get ( ) )
iter . hasNext ( )
iter . hasNext ( ) == false
"<AssertPlaceHolder>"
assertTrue ( recycled . get ( ) )
assertEquals ( true , deserializationSchema . isEndOfStream ( input ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 4 , results . size ( ) )
assertEquals ( 4 , results . size ( ) )
assertEquals ( 1 , rows . size ( ) )
assertEquals ( 1 , results . size ( ) )
assertEquals ( 1 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertArrayEquals ( new Object [ ] { "what" , "i" , "think" } , acc . getValues ( ) )
assertEquals ( 5 , udf . getOutput ( ) . size ( ) )
assertEquals ( 2 , udf . getRows ( ) . size ( ) )
assertThat ( udf . isTrue ( ) ) . isTrue ( )
assertThat ( udf . evaluate ( 1.0f ) ) . isEqualTo ( expectedValue )
assertThat ( udf . evaluate ( 1 ) ) . isEqualTo ( expectedValue )
assertThat ( udf . evaluate ( "input" ) ) . isEqualTo ( "expected" )
assertEquals ( 0.0 , result , 0.0001 )
assertThat ( udf . < AssertPlaceHolder > ) . isEqualTo ( < expectedValue > )
assertThat ( udf . evaluate ( new BytesWritable ( "test" . getBytes ( ) ) ) ) . isEqualTo ( new Text ( "dGVzdA==" ) )
assertThat ( udf . evaluate ( 5.678 ) ) . isEqualTo ( 5 )
assertEquals ( expected , actual )
assertEquals ( 1 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertNotNull ( results )
assertNumTransactions ( i )
assertThat ( guarantee . isTrue ( ) ) . isTrue ( )
assertEquals ( null , error . get ( ) )
assertTrue ( testHarness . isOpened ( ) )
assertNotNull ( e )
assertNotNull ( e )
assertTrue ( testHarness . isOpened ( ) )
assertEquals ( 1 , testHarness . getOutput ( ) . size ( ) )
assertEquals ( 1 , testHarness . getOutput ( ) . size ( ) )
assertThat ( topicsDescriptor ) . isEqualTo ( expectedTopicsDescriptor )
assertEquals ( serializer . getClass ( ) , GenericTypeSerializer . class )
assertNotNull ( config )
assertEquals ( executionConfig , configuration )
assertEquals ( configFromSetters . getRegisteredKryoTypes ( ) , configFromConfiguration . getRegisteredKryoTypes ( ) )
assertEquals ( configFromSetters . getRegisteredPojoTypes ( ) , configFromConfiguration . getRegisteredPojoTypes ( ) )
assertEquals ( configFromSetters . getRestartStrategy ( ) , configFromConfiguration . getRestartStrategy ( ) )
assertEquals ( set , configuration . getRegisteredKryoTypes ( ) )
assertEquals ( set , config . getRegisteredPojoTypes ( ) )
assertEquals ( restartStrategyConfiguration , config . getRestartStrategy ( ) )
assertEquals ( config . getDefaultKryoSerializers ( ) , serialiers )
assertNotNull ( average . getLocalValue ( ) )
assertEquals ( 7.0 , avg1 . getLocalValue ( ) )
assertEquals ( average . getLocalValue ( ) , averageNew . getLocalValue ( ) )
assertNull ( max . getLocalValue ( ) )
assert max . getLocalValue ( ) == 9876.5432
assertEquals ( value , clone . getLocalValue ( ) )
assertNotNull ( min . getLocalValue ( ) )
assertEquals ( - 987.6543 , min . getLocalValue ( ) , 0.0001 )
assertEquals ( value , clone . getLocalValue ( ) )
max . getLocalValue ( )
assertEquals ( - 987 , max . getLocalValue ( ) )
assertEquals ( value , clone . getLocalValue ( ) )
assertEquals ( 0 , min . getLocalValue ( ) )
assertEquals ( - 987 , min . getLocalValue ( ) )
assertEquals ( value , clone . getLocalValue ( ) )
assertNull ( max . getLocalValue ( ) )
assert max . getLocalValue ( ) == 9876543210L
assertEquals ( value , clone . getLocalValue ( ) )
assertNull ( min . getLocalValue ( ) )
assert min . getLocalValue ( ) == - 9876543210L
assertEquals ( value , clone . getLocalValue ( ) )
assertEquals ( output . getWatermarks ( ) . size ( ) , 1 )
assertEquals ( 1337L , watermarks . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( 12345L , watermarks . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( 1337L , watermarks . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( 12345L , watermarks . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( output . getLastWatermark ( ) , lastWatermark ( ) )
assertEquals ( 2 , lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( highTimestamp , multiplexer . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( highTimestamp , multiplexer . lastWatermark ( ) . getTimestamp ( ) )
assertEquals ( new Watermark ( highTimestamp ) , multiplexer . lastWatermark ( ) )
assertEquals ( true , unregistered )
assertEquals ( false , unregistered )
assertEquals ( 10 , sum )
assertNull ( stats )
assertEquals ( 0 , stats . getNumberOfFiles ( ) )
assertNull ( format . getFilePath ( ) )
assertEquals ( "/some/imaginary/path" , format . getFilePath ( ) )
assertEquals ( filePath , format . getFilePath ( ) )
assertEquals ( null , stats )
assertEquals ( 2 , splits . length )
matcher . isFalse ( )
AssertPlaceHolder = "assertFalse(matcher.matchAllFilesByDefault())"
assertThat ( matcher . excludeFilesIfMatchesExclude ( ) ) . isTrue ( )
assertEquals ( IllegalArgumentException . class , ex . getClass ( ) )
assertEquals ( rs1 , rs2 )
assertEquals ( spec2 , merged )
assertEquals ( spec1 , merged )
assertEquals ( spec1 , merged )
assertEquals ( subtracted , ResourceSpec . newBuilder ( 0.2 , 100 ) . setExtendedResource ( new ExternalResource ( EXTERNAL_RESOURCE_NAME , 0.5 ) ) . build ( ) . subtract ( ResourceSpec . UNKNOWN ) )
assertEquals ( rs1 . getCpuCores ( ) , subtracted . getCpuCores ( ) , 0.001 )
assertThat ( testInstance . size ( ) ) . isZero ( )
assertThat ( testInstance . size ( ) ) . isZero ( )
assertEquals ( v1 . hashCode ( ) , v2 . hashCode ( ) )
assertEquals ( 0.5 , v . getValue ( split ) )
assertThat ( type , is ( equalTo ( expected ) ) )
assertThat ( type , is ( equalTo ( expected ) ) )
assertThat ( type ) . isEqualTo ( expected )
assertThat ( type , is ( equalTo ( expected ) ) )
assertEquals ( BasicTypeInfo . STRING_TYPE_INFO , type )
assertEquals ( serializerA , serializerB )
assertEquals ( 0 , illegalCleanUpSize )
assertNotNull ( of ( inner ) )
assertEquals ( "expectedErrorMessage" , e . getMessage ( ) )
assertEquals ( inner , PluginFileSystemFactory . of ( inner ) )
assertEquals ( "Number of deserialized values is incorrect." , testData . length , num )
assertEquals ( "Number of deserialized values is incorrect." , testData . length , num )
assertEquals ( 6 , result )
assertEquals ( 6 , result )
assertEquals ( 3 , result )
assertEquals ( true , InstantiationUtil . isSerializable ( result ) )
assertEquals ( 4 , result )
assertEquals ( 4 , result )
assertEquals ( "text" , writeReplace . getRaw ( ) )
assertEquals ( "text" , writeReplace . getRaw ( ) )
assertEquals ( "Object " + map + " is not serializable" , e . getMessage ( ) )
assertEquals ( InvalidProgramException . class , assertThrows ( InvalidProgramException . class , ( ) -> ClosureCleaner . ensureSerializable ( map ) ) )
assertNull ( tuple . getFieldNotNull ( 1 ) )
assertEquals ( PrimitiveTypeInfo . INT_TYPE_INFO , ti )
assertEquals ( directTypeInfo . getTypeClass ( ) , ParameterizedParentImpl . class )
assertEquals ( expectedTypeInfo , mapReturnTypeInfo )
assertThrows ( InvalidTypesException . class , ( ) -> {
assertEquals ( 2 , e . getNumberOfInvalidTypes ( ) )
assertNotNull ( ti )
tpeInfo . isNotNull ( )
assertThat ( a ) . isEqualTo ( 123456 )
assertEquals ( intList , recovered )
assertEquals ( intArray , recovered . toArray ( ) )
assertEquals ( "another value" , cfg2 . getString ( key , "defaultValue" ) )
assertEquals ( TestEnum . VALUE1 , parsedEnumValue )
assertEquals ( expectedMessage , e . getMessage ( ) )
assertEquals ( properties , mapProperties )
? ? ? testFormatting ( ) { assertEquals ( "expectedValue" , toString ( ) ) ; } @ Override public String toString  ( ) { return versionStr ; } ? ? ?
assertEquals ( new BigDecimal ( 100L ) . divide ( by , MAX_VALUE_SCALE , RoundingMode . DOWN ) , memory . divide ( by ) )
assertEquals ( expectedOptional , optional )
assertEquals ( expectedOptional , optional )
assertEquals ( value , defaultValue )
assertEquals ( value , testSpec . getDefaultValueOverride ( ) )
assertEquals ( expectedAddress , actualAddress )
assertEquals ( expectedAddress , actualAddress )
assertEquals ( "expectedValue" , encoded )
assertThat ( splits . size ( ) , equalTo ( expectedSize ) )
assertEquals ( "This is a text that has some percentage value of 20%." , formattedDescription )
assertEquals ( "<AssertPlaceHolder>" , formattedDescription )
assertEquals ( null , loadedResource )
assertEquals ( RESOURCE_RETURNED_BY_OWNER , loadedResource )
assertEquals ( expected , actual )
assertEquals ( pathWithEntropy , streamAndPath . path ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertEquals ( true , Files . exists ( filePath ) )
assertEquals ( false , new File ( "testFile.txt" ) . exists ( ) )
assertEquals ( true , directory . toFile ( ) . exists ( ) )
assertEquals ( 0 , files . count ( ) )
assertEquals ( content . length , fileLength )
assertEquals ( 0 , unclosedCounter . get ( ) )
Note : The suggested  assertion assumes  the use  of a  testing framework  like JUnit  or AssertJ .
assertArrayEquals ( payload , restored )
assertArrayEquals ( preVersionedPayload , restored )
assertEquals ( payload , testWriteable . getData ( ) )
assertEquals ( "test" , testWriteable . getData ( ) )
assertEquals ( - 1 , read )
assertEquals ( - 1 , read )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( pluginsDirectory . getAbsolutePath ( ) , System . getenv ( ConfigConstants . ENV_FLINK_PLUGINS_DIR ) )
assertEquals ( true , configuration . get ( ClusterOptions . HALT_ON_FATAL_ERROR ) )
assertEquals ( TEST_EXIT_CODE , getExitStatus ( ) )
assertEquals ( TEST_EXIT_CODE , getExitStatus ( ) )
assertEquals ( TEST_EXIT_CODE , getExitStatus ( ) )
assertEquals ( TEST_EXIT_CODE , getExitStatus ( ) )
assertEquals ( socket . getLocalPort ( ) , JMXService . getInstance ( ) . getPort ( ) )
assertNotEquals ( tpeInfo1 , tpeInfo2 )
assertEquals ( type , sink . copy ( ) )
assertEquals ( row1 , row2 )
assertEquals ( expected , projected )
assertEquals ( expected , projected )
assertArrayEquals ( expected . getArity ( ) , joinedRow . getArity ( ) )
assertEquals ( null , v )
assertEquals ( "expectedResult" , result )
assertEquals ( "URL ClassLoader:http://example.com" , getUserCodeClassLoaderInfo ( loader ) )
assertThat ( element ) . isEqualTo ( summary )
assertThat ( strippedException , instanceOf ( RuntimeException . class ) )
assertThat ( strippedException , instanceOf ( RuntimeException . class ) )
assertEquals ( "new message" , rootThrowable . getMessage ( ) )
assertEquals ( "old message" , root . getMessage ( ) )
assertThat ( parent . exists ( ) , is ( false ) )
assertThrows ( IllegalStateException . class , ( ) -> childClassLoader . loadClass ( className ) )
assertNotNull ( stringValue )
assertNotNull ( stringValue )
assertEquals ( deque . poll ( ) , stream . findFirst ( ) . orElse ( null ) )
assertNotNull ( map . get ( "java.lang.String" , null ) )
assertNull ( map . get ( "java.lang.String" , null ) )
assertEquals ( 4 , first . size ( ) )
assertEquals ( url , getCorrectHostnamePort ( "foo.com:8080" ) )
assertEquals ( "foo.com" , socketAddress . getHostName ( ) )
assertEquals ( expected , acceptWithoutTimeout ( serverSocket ) )
assertEquals ( expected , acceptWithoutTimeout ( serverSocket ) )
assertEquals ( expected , acceptWithoutTimeout ( serverSocket ) )
assertEquals ( "192.168.0.1" , ipAddressToUrlString ( address ) )
assertEquals ( normalizedAddress , ipAddressToUrlString ( address ) )
assertEquals ( ProcessorArchitecture . CURRENT , arch )
assertEquals ( true , value . isOwned ( ) )
assertFalse ( value . isOwned ( ) ) ;
assertEquals ( "\\b \\t \\n \\f \\r default" , controlString )
assertEquals ( "01a1314a" , hex )
assertEquals ( "test" , testString . toString ( ) )
assertEquals ( "TEST123_!" , testString . toString ( ) )
assertNotNull ( tokenizer . next ( testString ) )
assertNotNull ( tokenizer . next ( ) )
assertNotNull ( tokenizer . getStringToTokenize ( ) )
assertEquals ( "Expected exception not thrown" , e . getMessage ( ) )
assertNotNull ( e . getCause ( ) )
assertThat ( future . get ( ) ) . isEqualTo ( expectedResult )
assertThat ( handled . get ( ) ) . isEqualTo ( "foobar" )
assertThat ( handled . get ( ) ) . isEqualTo ( "foobar" )
assertThat ( handled ) . isCompletedExceptionally ( )
assertNotNull ( completionException . getCause ( ) )
assertNotNull ( completionException . getCause ( ) )
assertEquals ( 1 , completableFuture . get ( ) )
assertThrows ( RuntimeException . class , ( ) -> getWithoutException ( completableFuture ) )
assertEquals ( null , getWithoutException ( completableFuture ) )
assertThat ( lines . get ( 0 ) ) . isEqualTo ( expectedResultLines )
assert awaitCompleted . get ( )
assertEquals ( true , Files . exists ( target . resolve ( name ) ) )
assertThat ( gpuResource . size ( ) ) . isEqualTo ( gpuAmount )
assertEquals ( "temp" , bucketName )
assertEquals ( "foo" , bucketName )
assertEquals ( "foo/bar/" , partialName )
assertEquals ( "foobarf09c43e5-ea49-4537-a406-0586f8f09d47" , partialName )
assertEquals ( IOException . class , e . getClass ( ) )
assertEquals ( stream . getPath ( ) , path )
assertEquals ( testData1 , getContentsOfFile ( path ) )
assertEquals ( testData1 + testData2 , getContentsOfFile ( path ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( FileSystemKind . FILE_SYSTEM , fs . getKind ( ) )
assertEquals ( FileSystemKind . OBJECT_STORE , getKindForScheme ( "s3" ) )
assertEquals ( true , result )
assertTrue ( result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( false , result )
assertTrue ( R . exists ( name ) )
assertTrue ( fs . exists ( name ) )
assertEquals ( recoverableTwo . getLastPartObject ( ) , lastPartObject )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertEquals ( dir1 + "," + dir2 , conf . getString ( "io.tmp.dirs" ) )
assertEquals ( 0 , hadoopConfiguration . size ( ) )
assertEquals ( REGION , configuration . getString ( CONFIG_PREFIX + ".s3.region" ) )
assertEquals ( "" , objectNamePrefix )
assertEquals ( "no_slash_path_tmp_" , objectNamePrefix )
assertEquals ( "" , objectNamePrefix )
assertEquals ( "/root/home/test-file_tmp_" , objectNamePrefix )
assertNull ( sslSocketFactory )
assertNotNull ( sslSocketFactory )
assertNull ( basicAuthCredentialProvider )
assertNull ( bearerAuthCredentialProvider )
assertThat ( this . actual . size ( ) ) . isEqualTo ( size )
assertThat ( client . getRegisteredSchemas ( ) ) . hasSize ( 1 )
assertNotNull ( < AssertPlaceHolder > )
glueSchemaRegistryAvroSerializationSchema . serialize ( null ) == null
assertNull ( deserializedAddress )
assertTrue ( error )
AssertPlaceHolder = "assertNull(deserializationSchema.deserialize(null));"
assertThat ( tableStats ) . isEqualTo ( summary )
assertEquals ( csvMapper , passedMapper . get ( ) )
assertNull ( isNull ( ) )
assertEquals ( "expectedValue" , deserializedRow . getField ( 0 ) )
assertNull ( isNull ( ) )
assertNull ( isNull ( ) )
assertEquals ( null , glueSchemaRegistryJsonDeserializationSchema . deserialize ( null ) )
assertEquals ( null , glueSchemaRegistryJsonSerializationSchema . serialize ( null ) )
assertNull ( < AssertPlaceHolder > )
assertNull ( rowData )
assertThrows ( IllegalArgumentException . class , ( ) -> new JsonRowDeserializationSchema . Builder ( Types . ROW_NAMED ( new String [ ] { "one" , "two" , "three" } , Types . LONG ) ) . build ( ) )
assertThat ( result ) . isEqualTo ( expectedResult )
assertEquals ( DataTypeUtils . ROW ( ) , result )
assertThat ( result . getType ( ) ) . isEqualTo ( Arrays . asList ( "string" , "null" ) )
assertThat ( result ) . isEqualTo ( expectedResult )
assertThat ( serialized ) . isEqualTo ( summary )
assertThat ( collector . getRecords ( ) ) . hasSize ( size )
assertTrue ( reader . reachedEnd ( ) )
assertThat ( rows1 ) . hasSize ( 5 )
assertThat ( tableStats . getRowCount ( ) ) . isEqualTo ( 3 )
assertThat ( paths ) . hasSize ( 2 )
assertThat ( tableStats ) . isEqualTo ( summary )
assertThat ( rows1 ) . hasSize ( 5 )
assertThat ( tableStats . getRowCount ( ) ) . isEqualTo ( 3 )
assertThat ( paths . size ( ) ) . isEqualTo ( 2 )
assertThat ( tableStats ) . isEqualTo ( expectedTableStats )
assertNotNull ( reader )
assertThat ( isFalse ( ) ) . isFalse ( )
assertThat ( reader . reachedEnd ( ) ) . isTrue ( )
assertThat ( map ) . isEmpty ( )
assertNull ( test . getD ( ) )
assertNull ( nullTest . get ( ) )
assertEquals ( mapTest , row . getField ( 1 ) )
assertEquals ( mapTest , row . getField ( 1 ) )
assertEquals ( 1 , row . getArity ( ) )
assertEquals ( 1 , result . getSchema ( ) . getFieldCount ( ) )
assertEquals ( OptionalInt . of ( 42 ) , getInt ( "key" ) )
assertEquals ( 1 , testSameOuterClassName . getB ( ) )
assert fs . getFieldSet ( ) . contains ( "f1" )
assertEquals ( true , reader . isIgnoreFirstLine ( ) )
assertEquals ( Item . class , items . getTypeClass ( ) )
assertThat ( distinct , is ( notNullValue ( ) ) )
customDs . distinct ( "field1" , "field2" , "field3" ) . collect ( )
assertThat ( groupBy ( fields ) . select ( "count" ) . sum ( 0 ) . collect ( ) ) . isEqualTo ( 0 )
assertEquals ( 1 , customDs . count ( ) )
assertEquals ( 1 , tupleDs . groupBy ( fields ) . count ( ) . collect ( ) . get ( 0 ) )
assertThat ( tupleDs . groupBy ( fields ) ) . isInstanceOf ( WindowGroupedTable . class )
assertEquals ( 1 , customDs . count ( ) )
assertThat ( dataSet . groupBy ( fields ) ) . isInstanceOf ( WindowGroupedTable . class )
assertEquals ( t , expectedType )
< AssertPlaceHolder >
assertNull ( retrievalEventHandler . getLeaderInformation ( ) )
assertEquals ( new Endpoint ( flinkContainers . getJobManagerHost ( ) , flinkContainers . getJobManagerPort ( ) ) , < expected value >  )
assertEquals ( true , executorService . isShutdown ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( resultAnnotations ) . isEqualTo ( expectedAnnotations )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( resultAnnotations ) . isEqualTo ( expectedAnnotations )
assertThat ( resultRestartPolicy ) . isEqualTo ( summary . getRestartPolicy ( ) )
assertThat ( pod . getMetadata ( ) . getAnnotations ( ) . containsKey ( "flink-decorator-hadoop" ) ) . isFalse ( )
assertThat ( flinkConfig . get ( RestOptions . PORT ) ) . isEqualTo ( 12345 )
assertThat ( actual . getRpcPort ( ) ) . isEqualTo ( 1234 )
assertThat ( flinkConfig . get ( BlobServerOptions . PORT ) ) . isEqualTo ( "2345" )
assertThat ( actual . getJobManagerServiceAccount ( ) ) . isEqualTo ( "flink" )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getServiceAccount ( ) ) . isEqualTo ( "flink" )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertFalse ( isFalse ( ) )
assertEquals ( "wrong lock" , leaderConfigMap . getAnnotations ( ) . get ( LEADER_ANNOTATION_KEY ) )
assertEquals ( "other information " + lockIdentity , leaderConfigMap . getAnnotations ( ) . get ( LEADER_ANNOTATION_KEY ) )
assertEquals ( true , pod . isTerminated ( ) )
assertTrue ( called . get ( ) )
assertThat ( matches . size ( ) ) . isEqualTo ( 1 )
assertThat ( matches . size ( ) ) . isEqualTo ( 1 )
assertThat ( matches ) . hasSize ( 2 )
assertEquals ( Time . seconds ( 30 ) , getWindowTime ( ) )
assertEquals ( Time . seconds ( 0 ) , getWindowTime ( ) )
assertThat ( hash ) . isEqualTo ( summary . getUidHash ( ) )
assertThat ( operatorId ) . isEqualTo ( OperatorIDGenerator . fromUid ( uid ) )
AssertPlaceHolder = "assertNull(collector.next());"
assertEquals ( expectedId , generatedId )
assertThat ( m . getCount ( ) ) . isEqualTo ( 5 )
assertThatGaugeIsExported ( testCounter , "testCounter" , "7" )
assertThat ( testGauge . getValue ( ) ) . isEqualTo ( 1 )
assertThat ( testGauge . getValue ( ) ) . isNull ( )
assertThat ( testMeter . getRate ( ) ) . isEqualTo ( expectedRate )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertEquals ( PartitioningProperty . RANDOM_PARTITIONED , rgProps . getPartitioning ( ) )
assertEquals ( PartitioningProperty . FORCED_REBALANCED , rgProps . getPartitioning ( ) )
assertThat ( graph . getJobType ( ) ) . isEqualTo ( JobType . BATCH )
assertEquals ( value , aggrState . get ( ) )
assertEquals ( null , value )
assertEquals ( 54L , reduceState . get ( ) )
assertEquals ( 0 , value )
assertEquals ( 54L , value )
assertThrows ( UnsupportedOperationException . class , ( ) -> valueState . clear ( ) )
assertEquals ( expectedValue , actualValue )
assertThat ( actualValue . size ( ) ) . isZero ( )
assertThat ( actualValue . size ( ) ) . isZero ( )
assertNotNull ( rpcSystem )
assertNotNull ( rpcSystem )
assertNotNull ( rpcSystem )
assertEquals ( TEST_CLASS_LOADER , contextClassLoader . get ( ) )
assertEquals ( TEST_CLASS_LOADER , contextClassLoader . get ( ) )
assertNotNull ( contextClassLoader . get ( ) )
assertThat ( actual ) . isEqualTo ( summary )
assertThat ( runRemoteMessageResponseTest ( PAYLOAD , MessageRpcGateway :: messageSync ) ) . isEqualTo ( summary )
assertThat ( actual ) . isEqualTo ( summary )
assertThat ( actual ) . isEqualTo ( summary )
assertEquals ( null , nullValuedResponseFuture . get ( ) )
assertEquals ( null , value )
assertEquals ( true , latch . isTriggered ( ) )
assertEquals ( numberActors , rpcServiceShutdownTestHelper . getStoppedActorsCount ( ) )
assertThat ( hostname , equalTo ( InetAddress . getLocalHost ( ) . getHostName ( ) ) )
assertEquals ( Thread . currentThread ( ) . getContextClassLoader ( ) , contextClassLoader . get ( ) )
assertEquals ( Thread . currentThread ( ) . getContextClassLoader ( ) , contextClassLoader . get ( ) )
assertEquals ( expected , testEndpoint . take ( ) )
assertNull ( nullValuedResponseFuture . get ( ) )
assertEquals ( null , value )
assertThat ( taskManagers . size ( ) ) . isEqualTo ( size )
assertNotNull ( webMonitorExtension )
assertThat ( jarId ) . isEqualTo ( expectedJarId )
assertThat ( toString ) . isEqualTo ( expected )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( keys . size ( ) ) . isEqualTo ( 0 )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 0 )
assertEquals ( IOException . class , error . getClass ( ) )
assertTrue ( isTrue ( ) )
assertThat ( blockedNode1 ) . isEqualTo ( blockedNode2 )
assert counter . get ( ) >= 0
assertEquals ( "Did not throw expected Exception" , expected . getMessage ( ) )
assertThat ( expected . getMessage ( ) , is ( equalTo ( br . getErrorHeader ( re ) + " " + br . getErrorMessage ( re , tokenNames ) ) ) )
assertEquals ( request , decider . decide ( ) )
assertThat ( restored , is ( false ) )
assertEquals ( 1 , ack . getNumberOfAcknowledgedTasks ( ) )
assertEquals ( num , CheckpointedPosition . NO_OFFSET )
empty . assertSize ( 0 )
assertEquals ( null , counter . shutdown ( JobStatus . FINISHED ) . join ( ) )
assertEquals ( 0 , stream . getCheckpointCount ( ) )
assertNotNull ( buffer )
assertTrue ( dataStream . flushed )
assertEquals ( TestException . class , assertThrows ( TestException . class , ( ) -> callStart ( writer ) ) . getClass ( ) )
assertThat ( exitCode ) . isEqualTo ( expectedExitCode )
assertThat ( exitCode ) . isEqualTo ( expectedExitCode )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertEquals ( null , config . getTmpDirectories ( ) )
assertThat ( res . size ( ) ) . isEqualTo ( 1 )
taskExecutorProcessSpec . getTaskHeapSize ( ) . equals ( taskHeapSize )
assertEquals ( totalProcessMemorySize , getTotalProcessMemorySize ( ) )
assertNotNull ( match )
assertEquals ( Optional . empty ( ) , match )
assertEquals ( Optional . empty ( ) , match )
assertEquals ( rp2 , rp1 . merge ( rp1 ) )
assertEquals ( rp1 , create ( value . multiply ( multiplier ) ) )
assertThat ( profile , equalTo ( fromResourceSpec ( copiedSpec ) ) )
assertEquals ( "CPU and memory should be included in toString if they are below threshold" , "versionStr" , resourceProfile . toString ( ) )
assertThat ( resourceProfile . getExtendedResource ( ) . getValue ( ) ) . isEqualTo ( 0.0 )
assertThat ( resourceProfile . getExtendedResource ( ) . getName ( ) ) . isEqualTo ( EXTERNAL_RESOURCE_NAME )
assertThat ( testInstance . isRegistered ( jobId ) ) . isTrue ( )
assertThat ( isFalse ( ) ) . isFalse ( )
assertEquals ( jobId , testInstance . getRegisteredJobId ( ) )
assertEquals ( "location" , savepointLocation )
assertThatNoCleanupWasTriggered ( )
assertEquals ( false , isArchived . get ( ) )
assertEquals ( conversion . toHiveObject ( object ) , < expected value >  )
assertNotNull ( executionGraphStore )
assertNotNull ( testingJobManagerRunner . getJobID ( ) )
assertNotNull ( testingCleanupRunner )
assertThat ( jobIds , contains ( jobID ) )
assertNotNull ( leaderConnectionInfo )
assertThat ( clusterConfiguration . getConfigDir ( ) ) . isEqualTo ( configDir )
assertEquals ( "Any other message won't be changed." , getMessage ( ) )
assert workingDir . exists ( )
assertEquals ( executions . size ( ) , 0 )
assertEquals ( 0 , scheduler . getExecutionGraph ( ) . getRegisteredExecutions ( ) . size ( ) )
assertEquals ( 0 , scheduler . getExecutionGraph ( ) . getRegisteredExecutions ( ) . size ( ) )
assertEquals ( 0 , scheduler . getExecutionGraph ( ) . getRegisteredExecutions ( ) . size ( ) )
assertEquals ( 3 , initialAttemptCounts . size ( ) )
assertNotNull ( ejv )
assertThat ( restartStrategy . getBackoffTime ( ) ) . isEqualTo ( expectedBackoffTime )
assertThat ( restartStrategy . getBackoffTime ( ) ) . isEqualTo ( expectedBackoffTime )
assertEquals ( Duration . ofMillis ( 10_000L ) , restartStrategy . getBackoffTime ( ) )
assertThat ( restartStrategy . getBackoffTime ( ) ) . isEqualTo ( Duration . ofMillis ( backoffTimeMS ) )
assertEquals ( 0 , configMap . size ( ) )
assertNotNull ( externalResourceDrivers )
assertEquals ( expected , actual )
assertEquals ( externalResourceInfoProvider , ExternalResourceUtils . createStaticExternalResourceInfoProvider ( externalResourceAmountMap , externalResourceDrivers ) )
assertEquals ( Collections . singletonMap ( RESOURCE_NAME_1 , 0L ) , externalResourceAmountMap )
assertThat ( externalResources , hasSize ( 0 ) )
assertEquals ( 0 , heartbeatListener . getNumHeartbeatsReceived ( ) )
assertThat ( buffers . size ( ) ) . isEqualTo ( 1 )
assertEquals ( null , exception . get ( ) )
assertEquals ( true , exceptionForwarded . get ( ) )
assertEquals ( DataExchangeMode . FORWARD [ mode . ordinal ( ) ] , getForForwardExchange ( mode ) )
assertEquals ( DataExchangeMode . SHUFFLE [ mode . ordinal ( ) ] , getForShuffleOrBroadcast ( mode ) )
assertEquals ( DataExchangeMode . BREAKING [ mode . ordinal ( ) ] , getPipelineBreakingExchange ( mode ) )
assertEquals ( true , eofException )
assertEquals ( recordWriters . get ( i ) . get ( ) , conversion . toHiveObject ( object ) )
assertEquals ( value , getByte ( buffer ) )
buffer . get ( i ) == 0
assert value [ j ] == expectedValueContent [ j ]
assertEquals ( expectedValue . getByte ( j ) , value [ j ] )
assert value . getByte ( j ) == expectedValue . getByte ( j )
assertEquals ( "Hello, World!" , buffer . toString ( ) )
assertEquals ( ByteOrder . BIG_ENDIAN , focalMethodReturnValue )
assertNotNull ( buffer )
assertEquals ( 0 , recycler . getRecycleCount ( ) )
assertEquals ( 1 , localBufferPool . getNumBuffers ( ) )
assertEquals ( true , taskResults [ i ] . get ( ) )
assertEquals ( length , buffer . getLength ( ) )
assertEquals ( maxCapacity , newBuffer ( length , maxCapacity , isBuffer ) . getMaxCapacity ( ) )
AssertPlaceHolder = "assertFalse(ch.isOpen());"
assertEquals ( "invalidpassword" , config . getString ( SecurityOptions . SSL_INTERNAL_KEYSTORE_PASSWORD ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 1 , partitionRequestQueue . getAllReaders ( ) . size ( ) )
assertEquals ( 1 , partitionRequestQueue . getAllReaders ( ) . size ( ) )
assertEquals ( 0 , listener . getNumAvailableBuffers ( ) )
AssertPlaceHolder = "Assert.assertTrue(reader.getAvailabilityAndBacklog(numCreditsAvailable).isAvailable());"
assertEquals ( 0 , bbspr . getNumberOfBuffersReturned ( ) )
assertNull ( result )
assertEquals ( - 1 , subpartition . bufferSize ( ) )
assertEquals ( 2 , subpartition . getNumBuffers ( ) )
resultPartition . isReleased ( )
resultPartition . isReleased ( )
resultPartition . isReleased ( )
resultPartition . isReleased ( )
assertEquals ( null , reader . getNextBuffer ( ) )
assertEquals ( notFound . getPartitionId ( ) , getPartitionId ( ) )
assertEquals ( 1 , localChannel . getNumberOfQueuedBuffers ( ) )
assertEquals ( notFound . getPartitionId ( ) , getPartitionId ( ) )
assertEquals ( ex . getMessage ( ) , "Expected PartitionConnectionException." )
assertEquals ( null , spilledFuture . get ( ) )
assertThat ( bufferContext . getBuffer ( ) ) . isNull ( )
assertNotNull ( consumerId )
assertEquals ( 0 , partition . getNumberOfBuffers ( ) )
assertEquals ( null , t )
assertNull ( error )
assertNull ( t )
assertEquals ( expectedValue , actualValue )
assertEquals ( testingJobGraph , actual )
assertEquals ( testingJobGraph . getJobID ( ) , actual )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 1 )
assertThat ( testInstance . size ( ) ) . isZero ( )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 1 )
assertThat ( testingJobGraphStoreWatcher . containsJobGraph ( testingJobGraph . getJobID ( ) ) ) . isFalse ( )
assertEquals ( testingJobGraph . getJobID ( ) , actual )
assertThat ( jobManagerProcessSpec . getJvmHeapMemorySize ( ) ) . isEqualTo ( jvmHeapSize )
assertThat ( jobManagerProcessSpec . getJvmDirectMemorySize ( ) ) . isEqualTo ( jvmHeap )
assertEquals ( 0 , tracker . getNumPendingDeployments ( ) )
assertEquals ( 0 , tracker . getNumPendingDeployments ( ) )
assertEquals ( false , serviceProcess . isNotInitialized ( ) )
assertNotNull ( jobMasterServiceFuture . get ( ) )
assertFalse ( serviceProcess . isInitialized ( ) )
assertThat ( isTrue ( ) , equalTo ( expectedValue ) )
internalTestClusterPartitionReuse ( isTrue ( ) . < AssertPlaceHolder >
assertEquals ( executionGraphInfo , jobManagerRunnerResult . getExecutionGraphInfo ( ) )
AssertPlaceHolder = "assertNotNull(jobManagerRunnerResult.getInitializationFailure());"
assertEquals ( new JobID ( ) , registrationResponse . get ( ) . getJobId ( ) )
assertNotNull ( e )
assertEquals ( jobResult . getJobId ( ) , new JobID ( ) )
assertEquals ( jobResult , new JobResult . Builder ( ) . jobId ( new JobID ( ) ) . netRuntime ( Long . MAX_VALUE ) . build ( ) )
assertEquals ( cause , expected . getCause ( ) )
assertEquals ( "Test exception" , expected . getCause ( ) . getMessage ( ) )
assertEquals ( true , slotPool . containsFreeSlot ( ) )
assertEquals ( false , slotPool . containsFreeSlot ( allocatedSlot . getAllocationId ( ) ) )
assertEquals ( 0 , slotPool . getNumberOfAvailableSlots ( ) )
assertNotNull ( result . getSlotRequestId ( ) )
assertEquals ( true , cancellationFuture . isCancelled ( ) )
assertNotNull ( stripExecutionException ( e ) )
assertThat ( e . getCause ( ) , instanceOf ( TimeoutException . class ) )
assertThat ( e . getCause ( ) , instanceOf ( TimeoutException . class ) )
assertEquals ( expected , actual )
assertEquals ( "test leader exception" , testingLeaderElectionDriver . getError ( ) )
assertTrue ( leaderElectionEventHandler . isLeaderElected ( ) )
assertEquals ( "test exception" , getError ( ) )
assertSame ( resource1 . getResourceHandle ( ) , resource2 . getResourceHandle ( ) )
AssertPlaceHolder = "assertEquals(fraction, resource.getMemorySize(" type ").getBytes() / memoryManager.getTotalMemory().getBytes(), 0.001);"
assertEquals ( 0.5 , memoryManager . getMemorySize ( "type" ) . getGigabytes ( ) , 0.001 )
resource . getSize ( )
assertSame ( resource1 . getResourceHandle ( ) , resource2 . getResourceHandle ( ) )
assertNull ( resource . getResourceHandle ( ) )
fail ( "MemoryAllocationException should not be thrown" )
assertEquals ( 0 , disposer . getCount ( ) )
assertEquals ( null , tr )
assertEquals ( 0 , resources . getReservedResources ( ) . size ( ) )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 2 )
assertThat ( reporterSetups . size ( ) ) . isEqualTo ( 1 )
assertThat ( reporterSetups ) . hasSize ( 2 )
assertEquals ( "hello" , passedConfig . getProperty ( "test.arg" ) )
info . getScopeName ( ) . equals ( "jobmanager" )
assertEquals ( 3 , root . getNumberOfGroups ( ) )
assertEquals ( 0 , metricGroup . getJobMetricsGroups ( ) . size ( ) )
assertEquals ( true , config . getBoolean ( SecurityOptions . SSL_REST_ENABLED ) )
assertEquals ( true , config . getBoolean ( SecurityOptions . SSL_REST_ENABLED ) )
assertEquals ( "expected exception" , e . getMessage ( ) )
assertTrue ( coordinator . isRunning ( ) )
assertNull ( coordinator )
assertThrows ( Exception . class , ( ) -> scheduler . startScheduling ( ) )
assertThat ( coordinator . getFailedTasks ( ) ) . hasSize ( 1 )
assertThat ( coordinator . getFailedTasks ( ) ) . hasSize ( 1 )
assertThat ( coordinator . getFailedTasks ( ) ) . hasSize ( 1 )
assertThat ( coordinator . getFailedTasks ( ) ) . hasSize ( 2 )
assertNull ( gateway )
assertNotNull ( gateway )
assertThat ( coordinator . getNotifiedTasks ( ) ) . hasSize ( 1 )
assertThat ( coordinator . getRunningTasks ( ) ) . hasSize ( 0 )
assertThrows ( Exception . class , ( ) -> quiesceableContext . failJob ( new Exception ( ) ) )
assertThat ( isClosed ) . isTrue ( )
assertThat ( isClosed , is ( false ) )
assertFalse ( isClosed )
assertNotNull ( e )
assertEquals ( "Expected exception not thrown" , expectedException . getClass ( ) , e . getClass ( ) )
assertNotNull ( e )
AssertPlaceHolder = "fail(new AssertionError(" + "\"Expected verifyWrongPartitionHashKey(1, 0) to return true\"" + "));"
AssertPlaceHolder = "fail(new AssertionError(" Expected verifyWrongPartitionHashKey ( 0 , 1 )  to return true "));"
assertNotNull ( response )
assertThat ( e . getCause ( ) ) . isInstanceOf ( ExecutionException . class )
assertEquals ( differentJobMasterId , unMatchedLeaderFuture . get ( ) . getJobMasterId ( ) )
assertThat ( e . getCause ( ) , instanceOf ( ExecutionException . class ) )
assertThat ( resourceDeclaration . getSpec ( ) ) . isNotNull ( )
assertEquals ( 0 , tracker . getFreeSlots ( ) . size ( ) )
response . isSuccessful ( )
AssertPlaceHolder = "Assert.assertTrue(response.isSuccessful());"
assertNotNull ( responseFuture )
assertEquals ( 1 , responseFuture . get ( ) . getStatusCode ( ) )
assertNotNull ( invalidVersionResponse )
assertEquals ( "foobar" , fileContents )
assertEquals ( 200 , response . code ( ) )
assertThat ( R . exists ( "testUploadDir" ) ) . isFalse ( )
assertThrows ( IllegalArgumentException . class , ( ) -> new FileUploads ( relative ) )
assertThat ( detectedFiles ) . isEmpty ( )
"<AssertPlaceHolder>"
assertEquals ( baseTimeout . multipliedBy ( 10 ) , completedOperationCache . getTimeout ( ) )
assertEquals ( 0 , logListInfo . getLogs ( ) . size ( ) )
assertNotNull ( generatedUrl )
assertEquals ( "expectedValue" , taskManager . toString ( ) )
assertEquals ( JobStatus . RUNNING , responseBody . getJobStatus ( ) )
assertEquals ( JobStatus . INITIALIZING , response . get ( ) . getJobStatus ( ) )
assertEquals ( null , response . getWatermarks ( ) )
assertEquals ( checkpoint , cache . tryGet ( 0 ) )
assertEquals ( HttpStatus . NOT_FOUND , routed . getStatus ( ) )
assertEquals ( null , routed )
assertThat ( logListInfo ) . hasSize ( size )
assertEquals ( true , queryParameter )
assertNotNull ( e )
assertThat ( allowNonRestoredState ) . isEqualTo ( true )
? ? ? assertEquals ( HttpMethodWrapper . GET , getHttpMethod ( ) )
assertEquals ( "/foobar" , getTargetRestEndpointURL ( ) )
assertEquals ( "/foobar" , getTargetRestEndpointURL ( ) )
assertEquals ( fields , input2 . getType ( ) )
assertEquals ( HttpStatus . OK , response . getStatus ( ) )
assertEquals ( fields , input2 . getType ( ) )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertEquals ( RuntimeRestAPIVersion . V1 , getLatestVersion ( candidates ) )
assertEquals ( expectedValue , foobar . get ( ) . intValue ( ) )
assertEquals ( conversion . toHiveObject ( object ) , < expected value >  )
assertEquals ( null , gateway . get ( ) )
assertEquals ( expectedInteger , integerFuture . get ( ) )
assertThat ( executionGraph . getReleaseSlotIfVertexVersionOutdated ( attemptId ) ) . isNull ( )
assertThat ( executionGraph . getState ( ) ) . isEqualTo ( JobStatus . FAILED )
assertEquals ( false , scheduler . updateTaskExecutionState ( taskExecutionState ) )
assertThat ( testExecutionSlotAllocator . isAutoCompletePendingRequestsDisabled ( ) ) . isTrue ( )
assertEquals ( info , storedInfo )
assertEquals ( 0 , unmodifiedExecutionVertices . size ( ) )
< AssertPlaceHolder >
assertEquals ( TransactionState . RUNNING , store . getState ( ) )
assertThat ( store . getStatusTimestamp ( JobStatus . RUNNING ) , is ( 1L ) )
assertEquals ( physicalSlot , sharedSlot . getSlotContext ( ) . getPhysicalSlot ( ) )
assertThat ( bulk . getPendingRequests ( ) ) . isEmpty ( )
assertEquals ( slotFuture1 , slotFuture2 )
assertEquals ( true , isTrue ( ) )
assertFalse ( isFalse ( ) )
assertThat ( allPipelinedRegions ) . hasSize ( size )
assertThat ( stateSupplier . getExecutionState ( ) ) . isEqualTo ( state )
assertThat ( resultPartitionState . getResultPartitionState ( ) ) . isEqualTo ( state )
assertEquals ( "Expected exception not thrown" , e . getMessage ( ) )
assertEquals ( TransactionState . INITIAL , scheduler . getState ( ) )
assertTrue ( ran . get ( ) )
AssertPlaceHolder = "assertFalse(ran.get());"
assertFalse ( scheduler . hasEnoughResources ( resourceRequirement ) )
assertThat ( scheduler . hasEnoughResources ( ) ) . isTrue ( )
assertEquals ( TransactionState . WAITING_FOR_RESOURCES , scheduler . getState ( ) )
assertThat ( scheduler . getState ( ) , is ( TransactionState . FINISHED ) )
AssertPlaceHolder = "assertFalse(scheduler.isFailureRejectedByStrategy())"
assertFalse ( assignmentResult . isPossible ( ) )
assertEquals ( expectedValue , backgroundTask . get ( ) )
assertEquals ( TransactionState . CANCELED , getState ( ) )
archivedExecutionGraph -> assertEquals ( TransactionState . SUSPENDED , archivedExecutionGraph . getState ( ) )
assertEquals ( TransactionState . SUSPENDED , created . getState ( ) )
assertEquals ( TransactionState . FAILED , created . getState ( ) )
assertEquals ( TransactionState . COMPLETED , job . getState ( ) )
assertThat ( ctx . getBackoffTime ( ) ) . isEqualTo ( duration )
archivedExecutionGraph . getState ( ) . equals ( TransactionState . FINISHED )
assertEquals ( TransactionState . FINISHED , archivedExecutionGraph . getState ( ) )
assertEquals ( true , ctx . canScaleUp ( ) )
assertThat ( restartingArguments . getFailureResult ( ) . canRestart ( ) ) . isTrue ( )
assertEquals ( ExecutionState . CREATED , notRunningExecutionGraph . getState ( ) )
ctx . assertNoStateTransition ( )
archivedExecutionGraph -> assertEquals ( JobStatus . FAILED , archivedExecutionGraph . getState ( ) )
archivedExecutionGraph . getState ( ) . equals ( TransactionState . FINISHED )
assertEquals ( ctx . getExecutionGraph ( ) , getArchivedExecutionGraph ( ) )
assertEquals ( JobStatus . CANCELED , ctx . getArchivedExecutionGraph ( ) . getState ( ) )
assertEquals ( ArchivedExecutionGraph . class , ctx . getArchivedExecutionGraph ( ) . getClass ( ) )
assertEquals ( ArchivedExecutionGraph . class , ctx . getArchivedExecutionGraph ( ) . getClass ( ) )
assertEquals ( testJobStatus , archivedExecutionGraph . getState ( ) )
assertEquals ( TransactionState . CANCELLED , getState ( ) )
archivedExecutionGraph -> assertEquals ( TransactionState . SUSPENDED , archivedExecutionGraph . getState ( ) )
assertNotNull ( state ) ;
assertNotNull ( state )
assertEquals ( true , called . get ( ) )
assertEquals ( Optional . empty ( ) , result )
assertEquals ( "yes" , result . get ( ) )
assertEquals ( TransactionState . FINISHED , stateWithExecutionGraph . getState ( ) )
assertThat ( archivedExecutionGraph . getState ( ) ) . isEqualTo ( TransactionState . CANCELED )
assertEquals ( true , executed . get ( ) )
assertEquals ( false , physicalSlot . isShared ( ) )
assertNotEquals ( logicalSlot1 . getSlotRequestId ( ) , logicalSlot2 . getSlotRequestId ( ) )
assertEquals ( false , externalReleaseInitiated . get ( ) )
hybridPartitionDataConsumeConstraint . isTrue ( )
assertThat ( sinkExecutionJobVertex . getParallelism ( ) ) . isEqualTo ( 8 )
assertThat ( deployedExecutions . size ( ) ) . isEqualTo ( size )
assertThat ( scheduler . getRestartTasks ( ) ) . isEmpty ( )
assertThat ( slowTasks ) . isEmpty ( )
assertThat ( slowTasks . get ( ev3 . getID ( ) ) ) . hasSize ( 1 )
assertEquals ( userKerberosAce , entry )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "expected message" , e . getMessage ( ) )
container . getToken ( )
assertEquals ( null , provider . getRenewer ( ) )
assertEquals ( renewer , provider . getRenewer ( ) )
assertEquals ( null , ? ? ? )
result . get ( ) == 1234
assertEquals ( exception , e )
assertThat ( enumeratorSupportsHandleExecutionAttemptSourceEvent ) . isFalse ( )
assertEquals ( coordinator , provider . create ( new MockOperatorCoordinatorContext ( OPERATOR_ID , NUM_SPLITS ) ) )
assertEquals ( true , sourceCoordinator . isStarted ( ) )
assertEquals ( true , sourceCoordinator . isClosed ( ) )
assertNotNull ( coordinator )
assertEquals ( "Expected IllegalArgumentException to be thrown" , IllegalArgumentException . class , ex . getClass ( ) )
assertEquals ( 1 , handle . getIntersection ( newRange ) . getNumberOfKeyGroups ( ) )
assertEquals ( fullHandle . getKeyGroupRange ( ) , keyRange )
assertThrows ( NullPointerException . class , ( ) -> new LocalRecoveryDirectoryProviderImpl ( new File [ ] { null } , JOB_ID , JOB_VERTEX_ID , SUBTASK_INDEX ) )
assertThat ( result . getStateObject ( ) . getSize ( ) ) . isEqualTo ( size )
assertEquals ( NullPointerException . class , expectedException . getException ( ) . getClass ( ) )
assertEquals ( 3 , state . get ( ) . size ( ) )
assertEquals ( NullPointerException . class , expectedException . getException ( ) . getClass ( ) )
assertEquals ( NullPointerException . class , expectedException . getException ( ) . getClass ( ) )
assertEquals ( null , state . get ( ) )
assertEquals ( taskLocalStateStore . retrieveLocalState ( i ) , null )
assertNull ( retrieveNullIfNoPersistedLocalState ( ) )
assertEquals ( false , loaded . isEnabled ( ) )
assertEquals ( true , fs . exists ( path ) )
assertTrue ( Files . exists ( Paths . get ( name ) ) )
assertEquals ( handle , null )
assertThat ( canFastDuplicate , is ( false ) )
assertEquals ( expected , canFastDuplicate )
assertThat ( canFastDuplicate , is ( false ) )
assertEquals ( path , decoded )
assertEquals ( handle , storage . resolveCheckpoint ( completed . getExternalPointer ( ) ) )
assertEquals ( null , conversion . toHiveObject ( object ) )
assertEquals ( 50 , timeProvider . time )
assertEquals ( null , jobTable . getJob ( jobId ) )
assertEquals ( 1 , miniCluster . getTaskManagers ( ) . size ( ) )
assertThat ( task . getExecutionState ( ) ) . isEqualTo ( ExecutionState . FAILED )
assertNotEquals ( ExecutionState . FAILED , task . getExecutionState ( ) )
assertEquals ( 1 , releasePartitionsForJobFuture . get ( ) . getId ( ) )
assertEquals ( Collections . singleton ( resultPartitionId ) , releasePartitionsFuture . get ( ) )
assertEquals ( Collections . singleton ( resultPartitionId ) , promotePartitionsFuture . get ( ) )
assertThat ( releasePartitionsFuture . isDone ( ) ) . isTrue ( )
assertNotNull ( e . getCause ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( taskManagerRpcService )
assertNotNull ( taskManagerResourceID )
assertEquals ( resourceID , taskManagerResourceID . getResourceIdString ( ) )
assertEquals ( 0 , taskSlotTable . getTaskCount ( ) )
AssertPlaceHolder = "assertEquals(SlotState.FREE, taskSlotTable.getSlotState())"
assertEquals ( TaskInvokable . class , createTaskBuilder ( ) . setInvokable ( InvokableWithExceptionInRestore . class ) . build ( Executors . directExecutor ( ) ) . run ( ) . getClass ( ) )
assertEquals ( TaskStatus . FAILED , task . getStatus ( ) )
assertEquals ( TaskState . CANCELLED , task . getState ( ) )
assertEquals ( TestInvokableCorrect . class , createTaskBuilder ( ) . setInvokable ( TestInvokableCorrect . class ) . build ( Executors . directExecutor ( ) ) . run ( ) . getInvokable ( ) . getClass ( ) )
assertEquals ( ExecutionState . INITIALIZING , taskExecutionState . getExecutionState ( ) )
assertEquals ( ExecutionState . CANCELED , task . getExecutionState ( ) )
assertEquals ( TaskState . FAILED , task . getTerminationFuture ( ) . get ( ) )
uniqueValues . size ( )
assertThat ( uniqueValues . size ( ) ) . isEqualTo ( 100 )
assertEquals ( 0 , resourceCounter . getResourceCount ( "unknown" ) )
assertEquals ( - 1 , parseRestBindPortFromWebInterfaceUrl ( "" ) )
assertEquals ( - 1 , parseRestBindPortFromWebInterfaceUrl ( null ) )
assertEquals ( true , discardCalled . get ( ) )
assertEquals ( errorMsg , handler . getErrorMessage ( ) )
assertEquals ( 0 , curatorFramework . asCuratorFramework ( ) . getChildren ( ) . forPath ( path ) . size ( ) )
assertEquals ( spec1 , spec2 )
assertEquals ( 0.3 , fractionOfSlot , 0.0001 )
assertEquals ( 0.3 , fractionOfSlot , 0.0001 )
assertThat ( processSpec . getTotalFlinkMemorySize ( ) ) . isEqualTo ( totalFlinkMemorySize )
assertThat ( processSpec . getTotalProcessMemorySize ( ) ) . isEqualTo ( totalProcessMemorySize )
assertEquals ( jvmMetaspaceSize , getJvmMetaspaceSize ( ) )
assertThat ( jobManagerProcessSpec . getJvmOverheadSize ( ) ) . isEqualTo ( MemorySize . parse ( "100m" ) )
assertEquals ( spec1 , spec2 )
historyServerURL . isPresent ( )
assertEquals ( Optional . of ( new URL ( "https://localhost:8443" ) ) , historyServerURL )
assertNotNull ( e . getCause ( ) )
assertEquals ( 0 , zkStore . getPaths ( ) . size ( ) )
assert poolSize == poolCapacity - 1
assertThat ( list , contains ( "a" , "b" , "c" ) )
assertEquals ( "z" , state . entries ( ) . iterator ( ) . next ( ) . getValue ( ) )
assertNotNull ( state . get ( "x" ) )
assertEquals ( 0 , state . size ( ) )
assertEquals ( 0 , state . size ( ) )
assertThat ( list , contains ( "x" ) )
assertNotNull ( storage )
backend instanceof DisabledStateBackend
assertEquals ( backend . getClass ( ) , MockStateBackend . class )
assertNotNull ( stateSnapshot ( ) )
assertThrows ( NoSuchElementException . class , ( ) -> iterator . next ( ) )
assertNotNull ( iterator . next ( ) )
assertNotNull ( iterator . next ( ) )
assertThat ( map . containsKey ( reference ) ) . isFalse ( )
assertEquals ( null , toApiSpecificExpression ( unresolvedCall ( IS_NULL , toExpr ( ) ) ) )
assertEquals ( null , map . get ( reference ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertNotNull ( state )
assertEquals ( state . getRawKeyedState ( ) , "<expected value>" )
assertEquals ( storageBackend , rocksDbBackend . getCheckpointBackend ( ) )
assertEquals ( "org.apache.flink.contrib.streaming.state.RocksDBStateBackendFactory" , factoryName )
assertEquals ( "org.apache.flink.contrib.streaming.state.EmbeddedRocksDBStateBackendFactory" , factoryName )
assertThat ( listState . get ( ) , hasSize ( 0 ) )
assertThat ( value . getId ( ) , equalTo ( "<expected value>" ) )
assertEquals ( 10000 , value . intValue ( ) )
src . assertNext ( 0 )
transformation . getSink ( ) . getClass ( ) . equals ( TestSink . class )
assertEquals ( "java.io.IOException: <expected message>" , stringifyException ( e ) )
assertEquals ( 1000 , elapsedTime )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 2 )
assertThat ( e . getMessage ( ) , is ( "Expected exception not thrown" ) )
assertEquals ( basePath . toUri ( ) , bucket . getBucketPath ( ) . toUri ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( expected2 , ext . extract ( ) )
current . getField ( j ) == testStrings [ j ]
assertThat ( writerNode . getParallelism ( ) ) . isEqualTo ( PARALLELISM )
assertEquals ( JobType . BATCH , ? ? ? getJobType ( ) )
assertEquals ( "hello" , streamGraphGenerator . getRestorePath ( ) )
assertEquals ( "operatorPrettyName" , "expectedOperatorPrettyName" , head . getOperatorPrettyName ( ) )
assertEquals ( 4 , testHarness . getOutput ( ) . size ( ) )
assertEquals ( expectedOutput , testHarness . getOutput ( ) )
assertEquals ( 100L , operator . getLastCompletedCheckpointId ( ) )
assertEquals ( 100L , operator . getLastCheckpointAborted ( ) )
stream should  not be  null .
stream . shouldNotBeNull ( )
assertEquals ( 1 , state . get ( ) . size ( ) )
assertEquals ( 3 , state . get ( ) . size ( ) )
assertEquals ( 0 , state . get ( ) . spliterator ( ) . getExactSizeIfKnown ( ) )
assertEquals ( Arrays . asList ( 3L , null , 5L ) , state . get ( ) )
assertEquals ( 0 , state . get ( ) . size ( ) )
assertEquals ( 6L , state . get ( ) . longValue ( ) )
assertNotNull ( e . getCause ( ) )
assertThat ( vertex . getID ( ) , is ( notNullValue ( ) ) )
assertEquals ( expected , actual )
assertEquals ( boe , inputGate . getNext ( ) )
assertEquals ( boe , inputGate . pollNext ( ) )
assertEquals ( conversion . toHiveObject ( object ) , "<expected value>" )
assertEquals ( boe , inputGate . pollNext ( ) )
assertEquals ( boe , inputGate . pollNext ( ) )
assertEquals ( boe , inputGate . pollNext ( ) )
assertEquals ( boe , inputGate . pollNext ( ) )
assertEquals ( 0 , testHarness . getOutput ( ) . getPos ( ) )
assertEquals ( 0 , testHarness . getOutput ( ) . getPos ( ) )
assertEquals ( "Exception in Timer" , errorRef . get ( ) . getMessage ( ) )
assertEquals ( 42L , testHarness . getOutput ( ) . getWatermark ( ) )
assertEquals ( WatermarkStatus . IDLE , testHarness . getOutput ( ) )
assertEquals ( value , getTimestamp ( ) )
assertEquals ( 2 , testHarness . getOutput ( ) . size ( ) )
assertThat ( testHarness . getOutput ( ) . size ( ) , is ( 1 ) )
assertEquals ( clone , streamPartitioner )
assertEquals ( ValidatingOperator . CHECKPOINT_ID , chain . getCheckpointId ( ) )
assertEquals ( true , processingTimeService . isQuiesced ( ) )
assertThat ( testHarness . getStreamTask ( ) . getMaxWatermark ( ) ) . isNotEqualTo ( Long . MAX_VALUE )
assertEquals ( ExecutionState . CANCELED , task . getExecutionState ( ) )
assertEquals ( ExecutionState . CANCELED , task . getExecutionState ( ) )
assertEquals ( numberOfProcessCalls , inputProcessor . getNumberOfProcessCalls ( ) )
assertEquals ( true , wasExecuted . get ( ) )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 2 )
assertThrows ( RejectedExecutionException . class , ( ) -> mailboxProcessor . getMailboxExecutor ( DEFAULT_PRIORITY ) . execute ( ( ) -> { } , "dummy" ) )
assertEquals ( expectedInvocations , counter . get ( ) )
assertEquals ( expected , actual )
assertThrows ( Exception . class , ( ) -> {
assertEquals ( true , Files . exists ( realDirHistoryFile ) )
assertEquals ( true , Files . exists ( subDirHistoryFile ) )
assertEquals ( expectedEnvironment . getDefaultCatalog ( ) , actualEnvironment . getDefaultCatalog ( ) )
assertThat ( defaultVersions . size ( ) ) . isEqualTo ( size )
assertEquals ( 4 , getDefaultResultSet ( ) . getRowCount ( ) )
assertEquals ( "cat2" , getCurrentCatalog ( sessionHandle ) )
assertThat ( cachedValueRows , is ( equalTo ( valueRows ) ) )
assertEquals ( minRetention , tEnv . getConfig ( ) . getIdleStateRetention ( ) )
assertEquals ( minRetention , tEnv . getConfig ( ) . getIdleStateRetention ( ) )
assertFalse ( settings . isBatchMode ( ) )
assertEquals ( descriptor . getConnector ( ) , "test-connector" )
assertEquals ( view , resolvedView . getCatalogView ( ) )
assertEquals ( expected , actual )
assertEquals ( TEST_CATALOG_NAME , catName )
assertThat ( resolvedSchema . toSinkRowDataType ( ) , is ( expectedDataType ) )
assertEquals ( expr , array ( 1 , 2 ) )
assertEquals ( expr , array ( array ( 1 ) , array ( 2 ) ) )
assertEquals ( expected , actual )
assertEquals ( 0 , fileSystem . getDownloadedResources ( ) . size ( ) )
assertEquals ( expectedKey , schema . getPrimaryKey ( ) )
assertEquals ( expectedKey , schema . getPrimaryKey ( ) )
AssertPlaceHolder . assertEquals ( false , catalog . alterDatabase ( "nonexistent" , createDb ( ) , true ) )
assertThrows ( TableNotExistException . class , ( ) -> catalog . alterTable ( nonExistObjectPath , createTable ( ) , true ) )
assertEquals ( table , ( CatalogTable ) catalog . getTable ( path3 ) )
assertEquals ( newView , ( CatalogView ) catalog . getTable ( path1 ) )
AssertPlaceHolder = "assertThat(catalog.alterTable(nonExistObjectPath, createView(), true)).isFalse();"
assertEquals ( newFunc , actual )
assertEquals ( newFunc , actual )
assertThrows ( Exception . class , ( ) -> {
assertEquals ( reloadTime , trigger . getReloadTime ( ) )
assertThat ( joinedRow . getKind ( ) ) . isEqualTo ( kind )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertThat ( actual . getSubtaskId ( ) ) . isEqualTo ( summary . getSubtaskId ( ) )
assertEquals ( null , getFunctionDefinition ( identifier ) )
assertEquals ( "GeneratorTableSource" , newTableSource . explainSource ( ) )
assertThat ( getConversionClass ( ) ) . isEqualTo ( clazz )
assertEquals ( clazz , getConversionClass ( ) )
assertNotNull ( bridgedTo ( newConversionClass ) )
assertThat ( transform ( factory , dataType ) ) . isEqualTo ( expected )
assertEquals ( DataType . ROW ( FIELD ( "f0" , INT ( ) ) , FIELD ( "f1" , STRING ( ) ) ) , dataType )
assertNotNull ( distinctType )
dataType . isCompositeType ( )
assertThat ( dataType . getLogicalType ( ) . getTypeRoot ( ) , equalTo ( LogicalTypeRoot . STRUCTURED_TYPE ) )
dataType . isCompositeTypeLegacySimpleType ( )
assertThat ( dataType . isCompositeType ( ) ) . isFalse ( )
dataType . getFieldCount ( )
assertEquals ( pojo , decodeStringToObject ( base64 , classLoader ) )
assertThat ( statistic ) . isEqualTo ( summary )
assertThat ( statistic ) . isEqualTo ( summary )
assertThat ( statistic ) . isEqualTo ( summary )
assertThat ( tableEnv . getCatalog ( "default_catalog" ) . getExists ( name ) ) . isTrue ( )
assertEquals ( instance . hashCode ( rowData ) , instance . hashCode ( rowData ) )
assertNotNull ( m )
assertThrows ( IllegalArgumentException . class , ( ) -> MemorySize . parse ( sql ) )
assertThat ( extendedParser . parse ( command ) , equalTo ( new MemorySize ( parseBytes ( command ) ) ) )
assertNotNull ( extendedParser )
assertEquals ( command , "CLEAR" )
assertThrows ( IllegalArgumentException . class , ( ) -> ExtendedParser . parse ( command ) )
assertThat ( testObject . isFalse ( ) ) . isFalse ( )
assertThat ( sourceTransform . getBoundedness ( ) ) . isEqualTo ( Boundedness . BOUNDED )
assertThat ( sourceTransform . getBoundedness ( ) , is ( Boundedness . CONTINUOUS_UNBOUNDED ) )
assertThat ( actual ) . isEqualTo ( summary )
assertEquals ( 2 , util ( ) . explain ( ) . size ( ) )
assertThat ( appliedKeys . get ( ) ) . hasSize ( size )
assertEquals ( 1 , util ( ) . explain ( ) . contains ( "SELECT 1 FROM T4" ) )
assertThat ( path . listFiles ( ) ) . hasSize ( 10 )
assertEquals ( 3 , sinkData . length )
assertThat ( results . size ( ) ) . isEqualTo ( size )
assertThat ( transformation ) . hasSize ( size )
assertThat ( estimate ) . isEqualTo ( 0 )
assertEquals ( 0.0d , error , 0.0001d )
assertEquals ( 1.0d , estimate , 0.0d )
assertEquals ( 0 , area . getUsedMemory ( ) )
assertThat ( operator . getOutput ( ) ) . hasSize ( size )
assertEquals ( false , data . isFilteringEnabled ( ) )
assertThat ( data . contains ( rowTypeInfo , rowData ( 0 , 31L , "d" ) ) ) . isTrue ( )
assertThat ( assigner ) . isEqualTo ( SliceAssigners . windowed ( 0 , tumbleAssigner ) )
assertEquals ( NUM_ENTRIES , table . size ( ) )
assertThat ( future . isDone ( ) ) . isTrue ( )
assertNotNull ( clusterClient )
assertNotNull ( clusterClient )
assertNotNull ( miniCluster )
assertNotNull ( address )
assertNotNull ( config )
assertEquals ( results , Arrays . asList ( 20L , 25L ) )
assertEquals ( results . size ( ) , 2 )
assertThat ( testInstance . size ( ) ) . isEqualTo ( 2 )
assertEquals ( "Expected error message" , "java.lang.OutOfMemoryError: Direct buffer memory" , result . getStandardOut ( ) )
assertEquals ( "Expected OutOfMemoryError" , "OutOfMemoryError" , oomOut . getStandardOut ( ) . trim ( ) )
assertEquals ( "Expected error message" , expectedErrorMessage , e . getMessage ( ) )
assertThat ( e , instanceOf ( IllegalArgumentException . class ) )
assertEquals ( client . listJobs ( ) . get ( ) . size ( ) , 1 )
assertEquals ( jobIdReference . get ( ) , jobClient . getJobID ( ) )
assertEquals ( Thread . currentThread ( ) , threadReference . get ( ) )
assertEquals ( Thread . currentThread ( ) , threadReference . get ( ) )
assertEquals ( Thread . currentThread ( ) , threadReference . get ( ) )
assertEquals ( Thread . currentThread ( ) , threadReference . get ( ) )
assertEquals ( 1000000L , counter . getLocalValue ( ) . longValue ( ) )
assert cur >= cmp
assertThat ( res , is ( new Tuple2 < > ( "expectedString" , expectedInteger ) ) )
assertThat ( emittedRecords , containsInAnyOrder ( expectedRecords ) )
assertEquals ( 55 , sum )
assertEquals ( 55 , sum )
assertEquals ( 2 , jobResult . getSlots ( ) )
assertEquals ( null , jobResult . getSerializedThrowable ( ) )
assertEquals ( 3 , env . getParallelism ( ) )
assertThat ( cachedDataStream . isInitialized ( ) , is ( false ) )
env . execute ( )
assertEquals ( "Savepoint path: src/test/resources/savepoints/savepoint-1" , savepointPath )
assertThat ( result . size ( ) ) . isEqualTo ( expectedSize )
assertThat ( isActive , is ( false ) )
assertThat ( executorConfig . getBoolean ( YarnConfigOptions . DETACHED_MODE ) ) . isFalse ( )
assertEquals ( nodeLabelCliInput , getNodeLabel ( ) )
assertThat ( containersFromPreviousAttemptsUnsafe . size ( ) ) . isEqualTo ( size )
assertThat ( externalResources . size ( ) ) . isEqualTo ( size )
assertEquals ( RESOURCE_VALUE , getResourceWithName ( RESOURCE_NAME ) )
assertEquals ( false , requestFuture . isCancelled ( ) )
< AssertPlaceHolder >
assertThat ( reduce ( left ) ) . isEqualTo ( expectedResult )
assertThatClusterIsContactable ( cluster )
assertEquals ( CURRENT_VERSION , getCurrentVersion ( ) )
assertEquals ( 42 , testee . getCurrentSchemaVersion ( ) )
assertEquals ( version , testee . getCurrentSchemaVersion ( ) )
assertThat ( testee . isBeforeShouldReturnTrueWhenBefore ( ) ) . isTrue ( )
assertThat ( testee . isBeforeShouldReturnFalseWhenEquals ( ) ) . isFalse ( )
assertEquals ( currentVersion , testee . getCurrentSchemaVersion ( ) . block ( ) . get ( ) )
assertNotNull ( block ( mono ) )
assertThrows ( MailboxException . class , ( ) -> block ( openSearch . getDockerOpenSearch ( ) . pause ( ) ) )
assertEquals ( Result . healthy ( COMPONENT_NAME ) , toHealthCheckResult ( response ) )
assertEquals ( Result . unhealthy ( COMPONENT_NAME , response . clusterName ( ) + " status is RED" ) , toHealthCheckResult ( response ) )
assertEquals ( Result . healthy ( COMPONENT_NAME ) , toHealthCheckResult ( response ) )
assertEquals ( null , rabbitMQ . basicGet ( queueName , false ) )
assertEquals ( 0 , countDownLatch . getCount ( ) )
assertEquals ( null , result . getCause ( ) )
assertEquals ( cause , result . getCause ( ) . getMessage ( ) )
assertEquals ( cause , result . getCause ( ) . getMessage ( ) )
Note : This assertion  assumes that  the focal method "instance(long value)" should throw an IllegalArgumentException when a negative value is passed as an argument .
assertEquals ( false , ? ? ? )
assertEquals ( false , focalMethod ( < input > ) )
assertEquals ( true , usage > limitInstance ( value ) )
assertEquals ( false , ? ? ? usageInstance ( 10 ) . greaterThan ( QuotaCountUsage . unlimited ( ) ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( expectedPort , actual . getPort ( ) )
assertEquals ( expectedPort , actual . getPort ( ) )
assertEquals ( expectedIp , actual . getIp ( ) )
assertThat ( eventCollector . getSpeedProfile ( ) ) . hasSize ( expectedSize )
assertThat ( eventCollector . getSpeedProfile ( ) . longWaitCondition ( ) . hasSize ( expectedSize ) )
assertEquals ( 0 , eventDeadLetters . groupsWithFailedEvents ( ) . size ( ) )
assertThat ( eventDeadLetters . containEvents ( ) ) . isFalse ( )
assertTrue ( eventDeadLetters . containEvents ( GROUP_A ) )
"<AssertPlaceHolder>"
assertNotNull ( block ( mono ) )
assertEquals ( true , firstListener . get ( ) )
assertTrue ( firstListener . get ( ) )
assertEquals ( 1 , testee . getListeners ( KEY_1 ) . size ( ) )
assertEquals ( listener , registration . getLastListenerRemoved ( ) )
assertThrows ( MailboxException . class , ( ) -> block ( mono ) )
assertNull ( block ( mono ) )
assertNull ( e . getCause ( ) )
assertThat ( listener . getEvents ( ) ) . isEmpty ( )
assertThat ( listener . getEvents ( ) ) . isEmpty ( )
assertThat ( listener . getEvents ( ) ) . isEmpty ( )
assertThat ( listener . getEvents ( ) ) . isEmpty ( )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThat ( eventCollector . getEvents ( ) ) . containsOnly ( EVENT )
assertThat ( eventCollector . getEvents ( ) ) . containsOnly ( EVENT )
assertThat ( eventCollector . getEvents ( ) ) . containsOnly ( EVENT )
AssertPlaceHolder = "assertFalse(session.hasInbox())"
assertThat ( retrievedMailbox . getName ( ) ) . isEqualTo ( "INBOX" )
assertEquals ( mailboxName , createMailbox ( "" , USER_1 , mailboxName ) )
assertEquals ( "a.b.c" , mailboxName )
assertEquals ( mailboxName , originPath . getName ( ) )
assertEquals ( "a.b" , mailboxName )
assertNotThrows ( ( ) -> ? ? ? , Exception . class )
assertThat ( mailboxManager . getAnnotations ( inbox , session ) )
assertNull ( block ( mailboxManager . getMailbox ( inbox , session ) ) )
assertEquals ( 1 , mailboxManager . list ( session ) . size ( ) )
assertEquals ( 1 , mailboxManager . listMailboxes ( session ) . size ( ) )
assertNotNull ( mailboxManager . getMailbox ( inboxSubMailbox , session ) )
assertEquals ( 4 , mailboxManager . list ( ) . size ( ) )
assertNotNull ( mailboxManager . createMailbox ( trash , session ) )
assertEquals ( 1 , mailboxManager . getMailbox ( MailboxPath . inbox ( session ) , session ) . getMessageCount ( ) )
assertEquals ( composeId1 . getUid ( ) , messageResult . getThreadId ( ) )
assertEquals ( false , event . isMoveTo ( ) )
assertEquals ( false , event . isMoveFromShouldReturnFalseWhenMailboxIdIsNotInRemovedMailboxIds ( ) )
assertNull ( user1 . getSubscriptionManager ( ) . getSubscription ( ) )
assertEquals ( 1 , getSubscriptionManager ( ) . getSubscriptions ( ) . size ( ) )
assertEquals ( 1 , getSubscriptionManager ( ) . getSubscriptions ( ) . size ( ) )
assertThat ( getSubscriptionManager ( ) . getSubscriptions ( SESSION ) ) . containsExactly ( MAILBOX1 , MAILBOX2 )
assert ! getSubscriptionManager ( ) . isSubscribed ( SESSION , MAILBOX1 )
assertEquals ( 0 , getSubscriptionManager ( ) . getSubscriptions ( SESSION ) . size ( ) )
assertNotEquals ( attachmentId , attachmentId2 )
assertEquals ( "" , contentType . charset ( ) . toString ( ) )
assertEquals ( charset , contentType . getCharset ( ) )
assertNull ( annotation . getValue ( ) )
assertEquals ( true , messageAttachment . isInline ( ) )
assertThat ( messageAttachment . isInlinedWithCid ( ) ) . isTrue ( )
assertThat ( messageAttachment . isInlinedWithCid ( ) ) . isFalse ( )
assertEquals ( false , messageAttachment . isInlinedWithCid ( ) )
assertEquals ( 1 , ranges . size ( ) )
assertEquals ( MessageRange . range ( MessageUid . of ( 1L ) , MessageUid . of ( 2L ) ) , ranges . get ( 0 ) )
assertEquals ( 1 , ranges . size ( ) )
assertEquals ( Arrays . asList ( MessageRange . from ( MessageUid . of ( 1 ) ) ) , ranges )
Note : This assumes  that the  return type of getQuotaSize ( ) is Long . If it is a different type , you may need to use a different assertion method from the Assert class .
assertEquals ( expectedQuotaCount , getQuotaCount ( ) )
assertNull ( rights . getRights ( ) )
? ? ? assertThat ( noneRights , hasSize ( 0 ) ) ; ? ? ?
assertEquals ( "Sigma" , ? ? ? )
assertEquals ( "Sigma" , ? ? ? )
assertEquals ( "Sigma" , ? ? ? )
assertEquals ( "" , ? ? ? )
assertEquals ( "" , serialize ( null ) )
assertEquals ( null , toAdd )
assertEquals ( true , actual . isDirectory ( ) )
assertEquals ( flags , testee . getValue ( ) )
assertEquals ( "myFlags" , testee . getValue ( ) )
assertEquals ( flags , testee . getValue ( ) )
assertEquals ( "myFlags" , testee . getValue ( ) )
assertEquals ( id , cassandraId . asUuid ( ) )
cassandraMessageId should  not be  null .
assertThat ( generate ( ) , instanceOf ( Serializable . class ) )
assertEquals ( new MailboxACL ( ) , toACL ( jsonACLString ) )
assertNull ( cassandraACLMapper ( ) . retrieveACL ( ) )
assertNull ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID ) )
assertThat ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID ) ) . doesNotContainEntry ( key , rights )
assertNull ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID , key ) )
assertEquals ( 1 , cassandraACLMapper ( ) . updateACL ( MAILBOX_ID , MailboxACL . command ( ) . key ( key ) . rights ( rights ) . asReplacement ( ) ) . block ( ) )
assertThatThrownBy ( ( ) -> block ( mono ) )
assertEquals ( 0 , list . size ( ) )
assertDoesNotThrow ( ( ) -> listStream ( ) . forEach ( Throwing . consumer ( this :: remove ) . sneakyThrow ( ) ) )
assertThat ( mailbox . countMessagesInMailbox ( ) ) . isEqualTo ( 0 )
assertThat ( countUnseenMessagesInMailboxShouldReturnEmptyByDefault ( ) ) . isEqualTo ( 0 )
assertNull ( retrieveMailboxCounterShouldReturnEmptyByDefault ( ) )
assertEquals ( 1 , testee . getCount ( ) )
assertEquals ( 1 , testee . incrementUnseen ( MAILBOX_ID ) . block ( ) )
assertDoesNotThrow ( ( ) -> block ( mono ) )
assertThat ( mailboxes . size ( ) ) . isEqualTo ( 1 )
assertEquals ( 1 , testee . create ( MAILBOX_PATH , UID_VALIDITY ) . block ( ) . size ( ) )
assertThat ( listAllShouldBeEmptyByDefault ( ) ) . isEmpty ( )
assertDoesNotThrow ( ( ) -> block ( mono ) )
assertEquals ( textualLineCount , attachmentRepresentation . getTextualLineCount ( ) )
assertEquals ( textualLineCount , attachmentRepresentation . getTextualLineCount ( ) )
assertEquals ( 1L , getUnseen ( ) )
assertEquals ( 0L , getUnseen ( ) )
assertEquals ( 5L , getUnseen ( ) )
assertEquals ( nbEntries , modSeqs . size ( ) )
assertThat ( messageUids ) . hasSize ( expectedSize )
assertEquals ( nbOperations , messageUids . size ( ) )
assertEquals ( false , messageAttachmentRepresentation . isInline ( ) . orElse ( true ) )
assertThat ( daoV2 . getACL ( MAILBOX_ID ) . block ( ) ) . isEqualTo ( acl )
AssertPlaceHolder = "assertEquals(expectedCount, context.snapshot().count());"
assertThat ( statementRecorder . getStatements ( ) ) . hasSize ( expectedSize )
assertEquals ( - 1L , readMailbox . getUidValidity ( ) )
assertEquals ( "Subject: the null message" , message . getFullContent ( ) )
assertThat ( result ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . hasSize ( expectedSize )
assertThat ( result ) . hasSize ( expectedSize )
assertThat ( generate ( ) , instanceOf ( Serializable . class ) )
assertEquals ( 0 , getCurrentMessageCount ( ) )
assertNotNull ( block ( mockedCurrentQuotaCalculator . recalculateCurrentQuotas ( QUOTA_ROOT , null ) ) . block ( ) )
assertNotNull ( block ( mockedCurrentQuotaCalculator . recalculateCurrentQuotas ( QUOTA_ROOT , null ) ) . block ( ) )
assertThat ( testee . getCurrentQuotas ( ) ) . isEqualTo ( CURRENT_QUOTAS )
assertEquals ( "" , eMailers . serialize ( new T ( ) ) )
assertEquals ( "{}" , serialize ( subjects ) )
assertEquals ( 1 , messageIds . count ( ) )
assertEquals ( 0 , ? ? ? retrieveUsers ( ) . size ( ) )
assertEquals ( 0 , ? ? ? retrieveBuckets ( ) )
assertEquals ( 1 , testee . retrieveUsers ( ) . size ( ) )
assertEquals ( 1 , testee . retrieveBuckets ( ) . size ( ) )
assertEquals ( 2 , testee . retrieveUsers ( ) . block ( ) . size ( ) )
assertEquals ( 2 , testee . retrieveBuckets ( ) . size ( ) )
assertEquals ( 1 , testee . retrieveUsers ( BUCKET_NAME ) . collectList ( ) . block ( ) . size ( ) )
assertEquals ( 2 , testee . retrieveBuckets ( ) . collectList ( ) . block ( ) . size ( ) )
assertEquals ( 1 , testee . getUsers ( ) . size ( ) )
assertEquals ( 0 , testee . retrieveUsers ( ) . collectList ( ) . block ( ) . size ( ) )
assertEquals ( "Deleted message subject" , getSubject ( ) )
assertThat ( messages . map ( DeletedMessageWithStorageInformation :: getMessage ) )
assertThat ( messages )
assertThat ( messages . collect ( Collectors . toList ( ) ) ) . containsOnlyElementsOf ( expected )
assertThat ( messages ) . isEmpty ( )
assertEquals ( storageInformation , getStorageInformation ( ) )
assertEquals ( id , UserQuotaThresholds . Id . fromKey ( "BOB_listenerName" ) )
assertEquals ( 3 , keyParts . size ( ) )
assertEquals ( 3 , keyParts . size ( ) )
assertEquals ( "IllegalArgumentException should be thrown when prefix is not QuotaThresholdEvents" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> { ? ? ? } ) )
assertThat ( mailetContext . getSentMails ( ) ) . hasSize ( expectedSize )
assertThat ( mailetContext . getSentMails ( ) ) . hasSize ( expectedSize )
assertThat ( mailetContext . getSentMails ( ) ) . hasSize ( expectedSize )
assertThat ( testee . getMailContext ( ) . getSentMails ( ) ) . hasSize ( expectedSize )
assertThat ( testee . getEvents ( ) ) . hasSize ( expectedSize )
assertThat ( testee . getMetadataMap ( ) ) . hasSize ( expectedSize )
assertThat ( testee . getNotifications ( ) ) . hasSize ( expectedSize )
assertThat ( testee . getMailContext ( ) . getSentMails ( ) ) . hasSize ( expectedSize )
assertEquals ( "" , quotaRatioAsJson . getDomain ( ) )
assertEquals ( domain , quotaRatioAsJson . getDomain ( ) )
assertEquals ( _50 , lessThanQuery . getValue ( ) ) ; // <AssertPlaceHolder>
assertNotNull ( moreThanQuery ) ; // suggested assertion
assertEquals ( QuotaCountUsage . count ( messageCount ) , ? ? ? )
assertThat ( messageIdManager . searchFromMessageManagerShouldReturnMessagesUsingSetInMailboxesFromMessageIdManager ( ) , hasSize ( expectedSize ) )
assertThat ( messageId , is ( notNullValue ( ) ) )
assertThat ( messageIdManager . getMetadataFromMessageManager ( ) . getHighestModSeq ( ) ) . isEqualTo ( highestModSeq )
assertEquals ( QuotaCountUsage . count ( messageCount ) , ? ? ? )
assertEquals ( 0 , messageManager1 . getMessages ( searchQuery , session ) . size ( ) )
assertEquals ( 0 , messageManager1 . search ( searchQuery , session ) . count ( ) . block ( ) )
assertEquals ( ImmutableList . of ( aliceMailbox1 . getMailboxId ( ) , aliceMailbox3 . getMailboxId ( ) ) , messageMailboxIds )
assertThat ( messageIdManager ) . hasSize ( expectedSize )
assertEquals ( 2 , actual . getUsersAcl ( ) . size ( ) )
assertEquals ( Collections . singleton ( BOB ) , actual . getReadRights ( ) . getUsers ( ) )
assertThrows ( MailboxException . class , ( ) -> block ( hook1 . notifyDelete ( any ( ) ) ) )
assertThrows ( MailboxException . class , ( ) -> block ( hook1 . notifyDelete ( any ( ) ) ) )
assertThat ( ResultUtils . haveValidContent ( fetchGroup ) ) . isTrue ( )
assertThat ( ResultUtils . haveInvalidContent ( fetchGroup ) ) . isFalse ( )
assertEquals ( new SchemaVersion ( 2 ) , iterator . next ( ) )
assertThat ( actual . getEntries ( ) ) . containsOnlyKeys ( createUserEntryKey ( BOB ) )
assertEquals ( true , areDomainsDifferentShouldReturnTrueWhenOneHasDomainNotTheOther ( ) )
assertEquals ( true , areDomainsDifferentShouldReturnTrueWhenOtherHasDomainNotTheOne ( ) )
assertEquals ( false , areDomainsDifferentShouldReturnFalseWhenNoDomain ( ) )
assertEquals ( true , areDomainsDifferentShouldReturnTrueWhenDomainsAreDifferent ( ) )
assertEquals ( false , areDomainsDifferentShouldReturnFalseWhenDomainsAreIdentical ( ) )
assertEquals ( RuntimeException . class , assertThrows ( RuntimeException . class , ( ) -> ? ? ? eventShouldPropagateFailure ( ) ) )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
assertEquals ( 0 , ? ? ? getAnnotationsByKeysWithOneDepthShouldReturnEmptyIfDoNotFind ( ) )
assertEquals ( 0 , ? ? ? getAnnotationsByKeysWithAllDepthShouldReturnEmptyIfDoNotFind ( ) )
assertThat ( annotationMapper . getAnnotations ( mailboxId ) ) . containsOnly ( PRIVATE_ANNOTATION , PRIVATE_ANNOTATION_WITH_KEY_UPPER )
assertThat ( actual . getUserFlags ( ) ) . containsOnly ( "userFlag" )
assertEquals ( null , flags )
assertThat ( actual . getUserFlags ( ) ) . containsOnly ( "soCool" )
assertThat ( actual . getFilteringFlags ( ) . getSystemFlags ( ) ) . containsOnly ( Flag . SEEN )
assertThat ( actual . getUserFlags ( ) ) . isNull ( )
? ? ? assertNotNull ( builder , "Builder should not be null" )
assertEquals ( filter , flag -> false )
assertEquals ( filter , flag -> false )
assertEquals ( expectAclDiff , "<AssertPlaceHolder>" )
assertEquals ( expectedMailboxId , benwaInboxMailbox . getMailboxId ( ) )
assertEquals ( "benwaWorkMailbox" , benwaWorkMailbox , mailboxMapper . rename ( benwaWorkMailbox ) . block ( ) )
assertThat ( block ( mono ) . hasChildren ( ) ) . isFalse ( )
assertNotNull ( mono . block ( ) )
assertNotNull ( block ( mono ) )
assertEquals ( "" , ? ? ? findShouldReturnEmptyWhenIdListIsEmpty ( ) )
assertEquals ( 0 , ? ? ? findMailboxesShouldReturnEmptyWhenMessageDoesntExist ( ) )
assertThat ( mailboxes . size ( ) ) . isEqualTo ( 1 )
assertEquals ( 2 , mailboxes . size ( ) )
assertEquals ( 2 , mailboxes . size ( ) )
assertEquals ( mailboxes . size ( ) , 2 )
assertEquals ( 2 , mailboxes . size ( ) )
assertEquals ( 0 , mailboxes . size ( ) )
assertEquals ( 0 , sut . getUnseen ( ) . longValue ( ) )
assertEquals ( 0L , sut . getUnseen ( ) )
assertThat ( sut . getUnseen ( ) ) . isEqualTo ( 0L )
assertEquals ( 1 , sut . getUnseen ( ) . intValue ( ) )
assertThat ( sut . getUnseen ( ) ) . isEqualTo ( expectedUnseen )
assertNull ( sut . getUnseen ( ) )
assertNotEquals ( 0 , sut . getUnseen ( ) )
assertEquals ( 0 , getUnseen ( ) . intValue ( ) )
assertEquals ( expectedUnseenCount , getUnseen ( ) )
assertEquals ( 0 , getUnseen ( ) . intValue ( ) )
assertEquals ( 0L , getUnseen ( ) )
assertEquals ( unseen - 1 , getUnseen ( ) )
assertThat ( messageMapper . getFlags ( benwaInboxMailbox , message2 . getUid ( ) ) ) . doesNotContain ( Flag . RECENT )
assertEquals ( false , messageMapper . isRecent ( benwaInboxMailbox , message1 . getUid ( ) ) )
assertThat ( message1 . getFlags ( ) . contains ( Flags . Flag . RECENT ) ) . isTrue ( )
assertNull ( findFirstUnseenMessageUidShouldReturnNullWhenNoUnseenMessagesCanBeFound ( ) )
assertEquals ( MessageUid . of ( 1 ) , findFirstUnseenMessageUid ( mailbox ) )
assertEquals ( message2 . getUid ( ) , findFirstUnseenMessageUid ( benwaInboxMailbox ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , ? ? ? deleteMessagesInMailboxShouldReturnEmptyResultOnEmptyMailbox ( ) )
assertEquals ( 0 , retrieveMessagesMarkedForDeletionInMailbox ( ) . size ( ) )
assertEquals ( uid . next ( ) , message . getUid ( ) )
assertEquals ( 1 , getUnseen ( ) )
assertEquals ( modSeq . increment ( ) , messageMapper . getHighestModSeq ( ) )
assertEquals ( expectedUnseenMessages , messageMapper . getMailboxCounters ( benwaInboxMailbox ) . getUnseen ( ) )
assertEquals ( new Flags ( Flags . Flag . FLAGGED ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( new Flags ( Flags . Flag . FLAGGED , Flags . Flag . SEEN ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( new Flags ( Flags . Flag . FLAGGED , Flags . Flag . SEEN ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( textualLineCount , message . getTextualLineCount ( ) )
assertEquals ( mediaType , message . getMediaType ( ) )
assertEquals ( subType , message . getSubType ( ) )
assertEquals ( new Flags ( USER_FLAG ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( message , retrieveMessageFromStorage ( message ) )
assertEquals ( originalMessage . getSaveDate ( ) . plusSeconds ( 1000 ) , copiedMessageMetaData . get ( 0 ) . getSaveDate ( ) )
assertEquals ( originalMessage . getSaveDate ( ) . plusSeconds ( 1000 ) , movedMessageMetaData . get ( 0 ) . getSaveDate ( ) )
assertEquals ( benwaWorkMailbox , messageToMove . getMailbox ( ) )
assertThat ( retrievedMessageIterator . next ( ) . getAttachments ( ) ) . isEmpty ( )
assertThat ( retrievedMessageIterator . next ( ) . getAttachments ( ) ) . isEmpty ( )
assertEquals ( 0 , retrievedMessageIterator . next ( ) . getAttachments ( ) . size ( ) )
assertThat ( attachments , hasSize ( expectedSize ) )
assertThat ( attachments , hasSize ( expectedSize ) )
assertEquals ( ImmutableList . of ( getDefaultApplicableFlag ( ) ) , calculator . computeApplicableFlags ( ) )
assertEquals ( new Flags ( Flag . USER ) , calculator . computeApplicableFlags ( ) . getDefaultApplicableFlag ( ) )
assertEquals ( expected , calculator . computeApplicableFlags ( ) )
assertEquals ( 0 , getCurrentStorage ( ) )
assertEquals ( 0 , getCurrentMessageCountShouldReturnZeroByDefault ( ) )
assertEquals ( 0 , getCurrentQuotasShouldReturnZeroByDefault ( ) )
assertEquals ( quotaRoot , testee . getQuotaRoot ( new MailboxPath ( "#private" , null , "INBOX" ) ) )
assertThat ( block ( retrieveAssociatedMailboxes ( ) ) ) . containsExactly ( MAILBOX , MAILBOX_2 )
assertEquals ( QuotaCountLimit . count ( 23 ) , maxQuotaManager . getMaxMessage ( ) )
assertEquals ( QuotaCountLimit . count ( 36 ) , maxQuotaManager . getMaxMessage ( ) )
assertEquals ( QuotaSizeLimit . size ( 36 ) , maxQuotaManager . getMaxStorage ( ) )
assertEquals ( QuotaSizeLimit . size ( 111 ) , maxQuotaManager . getMaxStorage ( DOMAIN ) )
assertEquals ( QuotaCountLimit . count ( 36 ) , maxQuotaManager . getMaxMessage ( QUOTA_ROOT ) )
assertEquals ( QuotaSizeLimit . size ( 36 ) , maxQuotaManager . getMaxStorage ( QUOTA_ROOT ) )
assertEquals ( QuotaCountLimit . count ( 36 ) , maxQuotaManager . getDomainMaxMessage ( DOMAIN ) )
assertEquals ( QuotaSizeLimit . size ( 36 ) , maxQuotaManager . getDomainMaxStorage ( DOMAIN ) )
assertEquals ( 1 , actual . size ( ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertEquals ( expectedMessageId , actual . get ( 0 ) )
assertEquals ( 1 , actual . size ( ) )
assertThat ( actual . size ( ) ) . isEqualTo ( expectedSize )
assertEquals ( 0 , actual . size ( ) )
assertEquals ( MessageRange . all ( ) , row . getRange ( ) )
assertThat ( results ) . containsOnly ( subscription )
assertThat ( results ) . containsOnly ( subscription1 )
assertNotNull ( information . failures ( ) )
failures = information . getFailures ( )
assertNotNull ( failures ( ) )
AssertPlaceHolder = "assertEquals(expectedCount, snapshot().count());"
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( 0 , newMail . getAttributes ( ) . size ( ) )
assertEquals ( 0 , attributes . size ( ) )
assertEquals ( 1 , attributes . size ( ) )
assertThat ( actual . getUid ( ) ) . isEqualTo ( expected . getUid ( ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( 2 , attributes . size ( ) )
mail . getAttribute ( "name" ) == null
assertEquals ( VALUE , mail . getAttribute ( KEY ) )
assertEquals ( NEW_VALUE , mail . getAttribute ( KEY ) )
assertNull ( mail . getAttribute ( KEY ) )
assertNull ( mail . getAttribute ( KEY ) )
assertEquals ( "" , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( "" , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , ? ? ? )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , ? ? ? )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , parseShouldIgnoreCase ( ) )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , parseShouldRecogniseNever ( ) )
assertEquals ( mailboxId , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( mailboxId , parse ( mailboxIdString ) )
assertEquals ( null , parseShouldRecogniseFailure ( ) )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , parseShouldIgnoreCase ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( null , mailetConfig . getInitParameter ( "name" , "defValue" ) )
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertEquals ( attribute , testee . getAttribute ( name ) )
assertEquals ( 0 , mail . getMessage ( ) . getFlags ( ) . size ( ) )
assertEquals ( 0 , testee . getMessage ( ) . getAllRecipients ( ) . length )
assertEquals ( 0 , testee . getMessage ( ) . getAllRecipients ( ) . length )
assertEquals ( 0 , testee . getMessage ( ) . getAllAttributes ( ) . size ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "ICalendarParser" , mailet . getMailetName ( ) )
assertEquals ( "ICalendarParser" , mailet . getMailetName ( ) )
assertEquals ( sourceAttribute , mailet . getSourceAttributeName ( ) . getValue ( ) )
assertEquals ( destinationAttribute , mailet . getDestinationAttributeName ( ) . getValue ( ) )
assertEquals ( 0 , mail . getAttributeNames ( ) . size ( ) )
assertEquals ( null , mail . getAttribute ( "calendarData" ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( DEFAULT_SEQUENCE_VALUE , ical . getSequence ( ) )
assertThat ( descriptors ) . doesNotContain ( notExcludedMailet )
assertEquals ( "JUNITtest" , getSubject ( ) )
assertEquals ( "Русский=?iso8859-15?Q?Beno=EEt_TELLIER_vous_a_d=E9pos=E9_des_fichiers?=", maile t getSub j ect())
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( 1 , message . getAllRecipients ( ) . length )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( initialState , mail . getState ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertThat ( mail . getAttribute ( MAIL_ATTRIBUTE_NAME1 ) ) . isEqualTo ( ImmutableList . of ( AttributeValue . of ( 3L ) , AttributeValue . of ( value ) ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( 1 , mockedMail . getRecipients ( ) . size ( ) )
assertEquals ( "first value" , mockedMail . getMessage ( ) . getHeader ( HEADER_NAME1 ) )
assertEquals ( null , testee . getAttribute ( MimeDecodingMailet . ATTRIBUTE_PARAMETER_NAME ) )
assertEquals ( "ghost" , getState ( ) )
assertEquals ( patternsFromString . get ( 0 ) . getPattern ( ) , Pattern . compile ( "/a/\\\\r/i/" ) )
assertEquals ( patternsFromString . get ( 0 ) . getPattern ( ) , Pattern . compile ( "/a/\\\\n/i/" ) )
assertEquals ( patternsFromString . get ( 0 ) . getPattern ( ) , Pattern . compile ( "/a/\\\\t/i/" ) )
assertEquals ( "" , testee . getRecipients ( ) )
assertEquals ( postmaster , mail . getRecipients ( ) )
assertEquals ( MailAddressFixture . ANY_AT_JAMES , mail . getRecipients ( ) )
assertEquals ( "" , testee . getRecipients ( ) )
assertEquals ( postmasterAlias , testee . getRecipients ( ) )
assertEquals ( postmasterAlias , mail . getRecipients ( ) )
assertEquals ( "postmasterAlias,postmaster" , testee . getRecipients ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( 0 , mail . getAttributes ( ) . size ( ) )
assertEquals ( 0 , mail . getAttributes ( ) . size ( ) )
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( 0 , mailetConfig . getAttributeNames ( ) . size ( ) )
assertEquals ( "Expected exception MessagingException to be thrown" , MessagingException . class , assertThrows ( MessagingException . class , ( ) -> service . service ( mail ) ) )
assertEquals ( 0 , mail . getAttributeNames ( ) . size ( ) )
assertEquals ( ImmutableMap . of ( "ATTRIBUTE1" , "VALUE_1" , "ATTRIBUTE2" , "VALUE_2" ) , removeMailet . attributes )
assertEquals ( 2 , mail . getAttributes ( ) . size ( ) )
assertEquals ( ImmutableMap . of ( "attribute1" , VALUE_1 , "attribute2" , VALUE_2 ) , removeMailet . attributes )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( 0 , reconnectionHandlers . size ( ) )
assertEquals ( "" , mailetConfig . getProperty ( RemoveMimeHeaderByPrefix . PREFIX ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "a" , mailet . getSubject ( ) )
assertEquals ( MY_MESSAGE , testee . getErrorMessage ( ) )
assertEquals ( "MY_MESSAGE" , testee . getErrorMessage ( ) )
assertEquals ( 0 , mailet . getAttributes ( ) . size ( ) )
assertEquals ( "bar" , mail . getAttribute ( "org.apache.james.junit1" ) )
assertEquals ( "test-value" , message . getHeader ( "header-name" ) [ 0 ] )
assertEquals ( "test-value" , message . getHeader ( "header-name" ) )
assertEquals ( 0 , reconnectionHandlers . size ( ) )
assertEquals ( 0 , reconnectionHandlers . size ( ) )
assertEquals ( "correct" , mailetConfig . getProperty ( "value" ) )
assertEquals ( "" , mailetConfig . getProperty ( "value" ) )
assertEquals ( "" , mailetConfig . getProperty ( "name" ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "expectedState" , getState ( ) )
assertEquals ( "error in message" , mailet . getErrorMessage ( ) )
assertEquals ( "error in message" , mailet . getErrorMessage ( ) )
assertEquals ( "reason\n\nHere is the following promotion code that you can use on your next order: promotionCode" , response . getText ( ) )
assertEquals ( expectedSubject , message . getSubject ( ) )
assertEquals ( expectedSubject , message . getSubject ( ) )
assertThat ( matchedRecipients , not ( empty ( ) ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertEquals ( 2 , message . getAllRecipients ( ) . length )
assertEquals ( 0 , message . getAllHeaders ( ) . length )
assertEquals ( 2 , mimeMultipart . getCount ( ) )
assertEquals ( "application/json" , mimeMessage . getContentType ( ) )
assertEquals ( "Expected recipients to be empty" , "" , testee . getRecipients ( ) )
assertEquals ( "javax.mail.MessagingException" , testee . getRecipients ( ) )
assertEquals ( "java.lang.InvalidClassName" , matcherConfig . getCondition ( ) )
assertEquals ( "Expected MessagingException to be thrown" , MessagingException . class , assertThrows ( MessagingException . class , ( ) -> {
assertEquals ( "Expected exception not thrown" , MessagingException . class , mockedMail . getAttribute ( Mail . MAILET_ERROR ) . getValue ( ) . getClass ( ) )
assertEquals ( "expectedValue" , matcher . getRecipients ( ) )
assertEquals ( expectedAddresses , actualAddresses )
assertEquals ( "expectedValue" , focalMethodCall )
assertThat ( mail . getRecipients ( ) ) . isEqualTo ( "aduprat <duprat@linagora.com>" )
assertEquals ( "To=Benoît TELLIER <tellier@linagora.com>",  ail. g etRecipients( ) )
assertEquals ( 2 , mail . getRecipients ( ) . size ( ) )
assertEquals ( 2 , mail . getRecipients ( ) . size ( ) )
assertEquals ( 2 , mail . getRecipients ( ) . size ( ) )
assertNotNull ( getMatcherConfig ( ) )
assertNotNull ( matchedRecipients )
assertEquals ( 0 , matchedRecipients . size ( ) )
assertEquals ( 2 , mail . getRecipients ( ) . size ( ) )
assertEquals ( "text/plain, application/zip" , matcher . getCondition ( ) )
assertEquals ( "Expected recipients do not match" , "RECIPIENT" , mail . getRecipients ( ) )
assertEquals ( "" , mail . getRecipients ( ) )
assertEquals ( "abc=123,def==--" , matcher . getCondition ( ) )
assertEquals ( "application/zip" , mail . getMimeMessage ( ) . getBodyPart ( 2 ) . getContentType ( ) )
assertThat ( mail . getRecipients ( ) ) . hasSize ( expectedSize )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( "ANY@james.apache.org" )
assertThat ( matcher . getCondition ( ) ) . isEqualTo ( "james.apache.org" )
assertThat ( mailetContext . localRecipients ( any ( ) ) ) . doesNotContain ( mailAddress2 )
assertEquals ( false , mailMatcher . match ( mailWithNoRecipient , defaultFakeMail ( ) ) )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( "mail@james.com" )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( ANY_AT_JAMES , OTHER_AT_JAMES )
assertThat ( fakeMail . getRecipient ( ) ) . isEqualTo ( ANY_AT_JAMES )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( ANY_AT_JAMES , OTHER_AT_JAMES )
assertThat ( results ) . containsOnly ( recipient )
assertNotNull ( matchedRecipients )
assertThat ( senderHosts ) . containsOnly ( new Domain ( "james.apache.org" ) )
assertThat ( results ) . containsOnly ( recipient )
assertEquals ( 0 , result . size ( ) )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( ANY_AT_JAMES )
assertThat ( fakeMail . getRecipients ( ) ) . containsOnly ( ANY_AT_JAMES , OTHER_AT_JAMES )
assertEquals ( "text with spaces" , text . fromRawText ( "text with spaces" ) )
assertEquals ( "text with spaces\r\non several lines" , text . formatted ( ) )
assertEquals ( "text with spaces\r\n on several lines" , text . formatted ( ) )
assertEquals ( "text with spaces on several lines" , text . formatted ( ) )
assertEquals ( "text with spaces on several lines" , text . formatted ( ) )
assertEquals ( "text with folding spaces" , text . formatted ( ) )
assertEquals ( in , session . readLine ( ) )
assertEquals ( 1 , adder . getUsers ( ) . size ( ) )
assertEquals ( Collections . emptySet ( ) , ? ? ? supportedFeaturesShouldReturnEmptySetWhenNoFeatures ( ) )
assertEquals ( "http" , HostScheme . of ( "http" ) . value )
assertEquals ( null , HostScheme . of ( "invalidScheme" ) )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
assertEquals ( HostScheme . of ( "" ) , null )
assertEquals ( HostScheme . of ( "" ) , ? ? ? )
assertEquals ( "" , mailboxIdFactory . fromString ( input ) )
assertEquals ( "" , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , "<expected value>" )
AssertPlaceHolder = "assertNull(parse(input));"
assertEquals ( "" , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( "" , mailboxIdFactory . fromString ( input ) )
assertEquals ( TimeUnit . MILLISECONDS , imapConfiguration . getIdleTimeIntervalUnit ( ) )
assertEquals ( TimeUnit . MINUTES , imapConfiguration . getIdleTimeIntervalUnit ( ) )
assertEquals ( ImmutableSet . of ( "AnyValue" ) , imapConfiguration . getDisabledCaps ( ) )
assertEquals ( ImmutableSet . of ( "AnyValue" , "OtherValue" ) , imapConfiguration . getDisabledCaps ( ) )
assertEquals ( ImmutableSet . of ( "AnyValue" , "OtherValue" ) , imapConfiguration . getDisabledCaps ( ) )
assertEquals ( Arrays . asList ( "AnyValue" , "OtherValue" ) , imapConfiguration . getDisabledCaps ( ) )
assertEquals ( "AnyValue" , imapConfiguration . getDisabledCap ( ) )
assertEquals ( false , imapConfiguration . isCondstoreEnable ( ) )
assertTrue ( imapConfiguration . isCondstoreEnable ( ) )
assertEquals ( false , imapConfiguration . isCondstoreEnable ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedSize , actual . size ( ) )
assertEquals ( expectedSize , actual . size ( ) )
assertEquals ( range , ? ? ? )
assertEquals ( expected , actual )
assertEquals ( this . lowVal + ":" + this . highVal , getFormattedString ( ) )
assertEquals ( HostScheme . ZERO_RANGE , HostScheme . of ( "zero_range" ) )
AssertPlaceHolder = "assertEquals(LocalDateTime.now(clock), parseDateTime(request));"
assertEquals ( "any" , request . readLine ( ) )
assertEquals ( "09-Apr-2008 15:17:51 +0200" , testee . parseDateTime ( request ) )
assertEquals ( "" , request . getValue ( ) )
assertEquals ( "NIL" , request . getValue ( ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , encoder . encode ( new ListResponse ( MailboxMetaData . Children . HAS_CHILDREN , MailboxMetaData . Selectability . NONE , "name" , '.' , false , false , EnumSet . noneOf ( ListResponse . ChildInfo . class ) , MailboxType . OTHER ) , composer ) )
assertEquals ( "expectedValue" , encoder . encode ( new XListResponse ( MailboxMetaData . Children . HAS_CHILDREN , MailboxMetaData . Selectability . NONE , "name" , '.' , MailboxType . INBOX ) , composer ) )
assertThat ( propertiesToInnerProperties ( actual ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( propertiesToInnerProperties ( captorAnnotationResponse . getValue ( ) ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( captorAnnotationResponse . getAllValues ( ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( humanTextCaptor . getValue ( ) ) . isEqualTo ( "NO [NONEXISTENT] No such mailbox" )
assertThat ( humanTextCaptor . getValue ( ) ) . isEqualTo ( "expected value" )
assertThat ( propertiesToInnerProperties ( actual ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( selectedMailbox . getApplicableFlags ( ) ) . isEmpty ( )
AssertPlaceHolder = "Assert.assertEquals(Optional.empty(), testee.getMsn());"
assertEquals ( 0 , element . size ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( "-1" ) )
assertDoesNotThrow ( ( ) -> HostScheme . of ( "schemeValue" ) )
assertEquals ( "http" , HostScheme . of ( "http" ) . value )
assertEquals ( "Unknown HostScheme 'test'" , assertThrows ( IllegalArgumentException . class , ( ) -> {
assertDoesNotThrow ( ( ) -> HostScheme . of ( "schemeValue" ) )
assertEquals ( "http" , HostScheme . of ( "http" ) . value )
assertEquals ( expectedValue , actualValue )
assertEquals ( Optional . empty ( ) , noMessage ( ) . asInt ( ) )
ref . get ( ) == 24
assertEquals ( null , unquote ( null ) )
assertEquals ( "" , unquote ( "" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "" , unquote ( "" ) )
assertEquals ( "expected" , unquote ( "actual" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "expected" , unquote ( "quoted" ) )
assertEquals ( "expected" , unquote ( "actual" ) )
assertEquals ( "expected" , unquote ( "actual" ) )
assertEquals ( "expected" , unquote ( "'expected'" ) )
assertEquals ( "expected" , unquote ( "'expected'" ) )
assertEquals ( "554" , client . getReplyCode ( ) )
assertEquals ( "451" , client . getReplyCode ( ) )
assertEquals ( Action . DENY , resp )
assertEquals ( Action . DECLINED , resp )
AssertPlaceHolder = "assertEquals(Action.DECLINED, response.getAction());"
assertEquals ( Action . DENY , response )
assertEquals ( true , login )
assertThat ( getServerConnectionResponse ( socketChannel ) ) . startsWith ( "* OK JAMES IMAP4rev1 Server" )
assertThat ( getServerConnectionResponse ( socketChannel ) ) . startsWith ( "* OK JAMES IMAP4rev1 Server" )
assertThat ( getServerConnectionResponse ( socketChannel ) ) . startsWith ( "* OK JAMES IMAP4rev1 Server" )
assertThat ( server . getProbe ( ImapGuiceProbe . class ) . getImapPort ( ) ) . isGreaterThan ( 0 )
assertThat ( server . isStarted ( ) ) . isTrue ( )
assertEquals ( "Expected output" , expectedOutput , outputCapture . getOutput ( ) )
assertThat ( ServerCmd . doMain ( new String [ ] { "-h" , "127.0.0.1" , "-p" , "9999" , "createmailbox" , MailboxConstants . USER_NAMESPACE , USER , MAILBOX } ) ) . isEqualTo ( expected )
assertTrue ( getContent ( ) . isEmpty ( ) )
assertEquals ( CmdType . ADD_USER , lookup ( "addUser" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . ADD_DOMAIN , lookup ( "add_domain" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<domain>" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . DELETE_USER_MAILBOXES , lookup ( "deleteUserMailboxes" ) )
assertEquals ( CmdType . CREATE_MAILBOX , lookup ( "createMailbox" ) )
assertEquals ( CmdType . < expectedValue > , lookup ( < inputValue > ) )
assertEquals ( CmdType . DELETE_MAILBOX , lookup ( "deleteMailbox" ) )
assertNotNull ( lookup ( "command" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertNotNull ( lookup ( "command" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . MAX_STORAGE_QUOTA , lookup ( "getMaxStorageQuota" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . ? ? ? , lookup ( "???" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<inputCommand>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( CmdType . < expectedEnumValue > , lookup ( "<command>" ) )
assertEquals ( expectedValue , actualValue )
assertNull ( lookup ( "" ) )
assertEquals ( null , lookup ( "unknownString" ) )
assertNull ( lookup ( null ) )
assertEquals ( "command <argument1> <argument2>" , getUsage ( ) )
assertEquals ( "/path" , configuration . getRootDirectory ( ) )
assertEquals ( "/path/conf/" , configuration . getConfDirectory ( ) )
assertEquals ( true , login )
assertEquals ( ResultType . class , check . getResultType ( ) )
assertEquals ( ResultType . BAD , getResultType ( ) )
assertEquals ( ResultType . GOOD , checkSecondStartUp . check ( ) )
assertEquals ( "220" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( expectedDefaultDomain , getProbe ( GuiceProbe . class ) . getHostName ( ) )
assertEquals ( expectedDefaultDomain , InetAddress . getLocalHost ( ) . getHostName ( ) )
assertEquals ( 2 , listComponentNames . size ( ) )
assertEquals ( "Expected response" , "Actual response" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( blobIdFactory . create ( defaultBucketName , SHORT_STRING , storagePolicy ) , blobId )
assertEquals ( blobIdFactory . create ( defaultBucketName , SHORT_BYTEARRAY , storagePolicy ) , blobId )
assertEquals ( blobIdFactory . create ( defaultBucketName , SHORT_BYTEARRAY , storagePolicy ) , blobId )
assertEquals ( writeHash . hash ( ) , readHash . hash ( ) )
assertEquals ( DATA , maybeBytes . get ( ) )
assertEquals ( DATA_2 , maybeBytes . get ( ) )
assertEquals ( 0 , ? ? ? listAllShouldReturnEmptyWhenNone ( ) )
assertEquals ( 0 , testee . listAll ( ) . size ( ) )
assertEquals ( DATA , maybeBytes . get ( ) )
assertEquals ( DATA_2 , maybeBytes . get ( ) )
assertNotNull ( schemeValue )
assertEquals ( emptyMessage , mail . getMessage ( ) . getMimeMessage ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( nameMaxLength , newName . length ( ) )
assertEquals ( 86 , newName . length ( ) )
assertEquals ( "average value 01234567" , called6Times )
assertEquals ( nameMaxLength , newName . length ( ) )
assertEquals ( "looooooonnnnnngggggggggggggggg" , called6Times )
assertEquals ( currentName , deriveNewName ( currentName ) )
assertEquals ( 1048576 , testee . getInputStream ( ) . available ( ) )
assertEquals ( 10240 , testee . getInputStream ( ) . available ( ) )
assertEquals ( veryShortName , testee . getVeryShortName ( ) )
assertEquals ( "Subject: test\r\n" + "MIME-Version: 1.0\r\n" + "Date: Tue, 16 Jan 2018 09:56:01 +0700 (ICT)\r\n" + "Content-Type: text/plain; charset=us-ascii\r\n" + "Content-Transfer-Encoding: 7bit\r\n" + "\r\n" + "test body" , m . getContent ( ) )
assertEquals ( "" , mw . getSubject ( ) )
assertThat ( length , is ( equalTo ( expectedLength ) ) )
assertEquals ( expectedValue , getMessageSizeShouldReturnExpectedValueWhenNoHeader ( ) . length ( length ) )
assertEquals ( length , mw . length ( ) )
assertEquals ( "UTF-8" , wrapper . getEncoding ( ) )
assertEquals ( "/path" , configuration . getWorkingDirectory ( ) )
assertEquals ( "/path/conf/" , configuration . getConfDirectory ( ) )
assertEquals ( "" , getSimplified ( ) )
assertEquals ( inputValue , getSimplified ( ) )
assertEquals ( inputValue , getSimplified ( ) )
assertEquals ( simplifiedUrl , "<expected value>" )
assertEquals ( simplifiedUrl , "<expected value>" )
assertEquals ( simplifiedUrl , "<expected value>" )
assertEquals ( expectedSimplifiedUrl , getSimplified ( ) )
assertEquals ( "expectedValue" , getSimplified ( ) )
assertEquals ( "" , getSimplified ( ) )
assertEquals ( "expectedValue" , getSimplified ( ) )
assertEquals ( "expectedValue" , getSimplified ( ) )
assertEquals ( "expectedValue" , getSimplified ( ) )
assertEquals ( "" , simplifyPath ( null ) )
assertEquals ( "" , file . getPath ( ) )
assertThat ( file ) . isDirectory ( )
assertEquals ( true , expected . exists ( ) )
AssertPlaceHolder = "assertTrue(expected.exists());"
assertEquals ( inputStream . available ( ) , 0 )
assertEquals ( inputStream . available ( ) , 0 )
assertEquals ( ResultType . PASSTHROUGH , checkResult . getResultType ( ) )
assertEquals ( StartUpCheck . CheckResult . SUCCESS , checkResult )
assertEquals ( DEDUPLICATION , checkResult )
assertEquals ( ResultType . PASSTHROUGH , checkResult . getResultType ( ) )
assertThat ( history ) . hasSize ( expectedSize )
assertEquals ( "Expected response" , "actual response" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( "Expected response" , "actual response" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( "Expected response" , "Shabang" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( "Expected response" , "actual response" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( DurationParser . parse ( PERIOD ) , configuration . getPeriod ( ) )
assertThat ( sut ) . hasSize ( expectedSize )
assertEquals ( Arrays . asList ( MyConfigurable . class , MyConfigurable2 . class ) , sut . getElements ( ) )
assertEquals ( probe , getProbe ( probe . getClass ( ) ) )
assertEquals ( expectedClazz , listenerConfiguration . getClazz ( ) )
assertEquals ( 0 , listenerConfiguration . getGroup ( ) . size ( ) )
assertEquals ( groupName , listenerConfiguration . getGroup ( ) . getName ( ) )
assertEquals ( "CustomMailetWithCustomDependencyInService" , mailet . getMailetInfo ( ) . getName ( ) )
assertEquals ( "MyGenericMailet" , mailet . getMailetInfo ( ) . getName ( ) )
assertEquals ( true , staged . get ( ) )
assertEquals ( true , staged . get ( ) )
assertEquals ( 0 , LeakAware . getLeakCount ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( ) . size ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertThat ( mailboxManagerManagement . list ( ) ) . doesNotContain ( mailbox )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertEquals ( 0 , mapperFactory . createMailboxMapper ( session ) . list ( ) . block ( ) . size ( ) )
assertEquals ( 1 , mailbox . getMailboxId ( ) )
assertEquals ( 6 , mapper . listMailboxes ( USER ) . collectList ( ) . block ( ) . size ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( ) . size ( ) )
assertEquals ( 1 , mailboxManagerManagement . list ( ) . size ( ) )
assertEquals ( 1 , mailboxManagerManagement . list ( ) . size ( ) )
assertNotNull ( mailboxManagerManagement . getMailbox ( MailboxConstants . USER_NAMESPACE , USER . asString ( ) , "name" ) )
assertEquals ( 0 , chunks . count ( ) . block ( ) )
assertThat ( chunks . collectList ( ) . block ( ) . size ( ) ) . isEqualTo ( 1 )
assertThat ( chunks . collectList ( ) . block ( ) . size ( ) ) . isEqualTo ( 1 )
assertThat ( chunks . collectList ( ) . block ( ) ) . contains ( ByteBuffer . wrap ( part1 ) , ByteBuffer . wrap ( part2 ) )
assertThat ( chunks . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( chunks . collectList ( ) . block ( ) . size ( ) ) . isEqualTo ( 1 )
assertThat ( chunks . collectList ( ) . block ( ) . size ( ) ) . isEqualTo ( 1 )
assertThat ( chunks . collectList ( ) . block ( ) ) . contains ( ByteBuffer . wrap ( part1 ) , ByteBuffer . wrap ( part2 ) )
assertEquals ( 17 , getCounter ( ) )
assertEquals ( 27 , getCounter ( ) )
assertion . isNotNull ( )
assertion . isFalse ( )
assertNull ( supplier . get ( ) )
assertEquals ( true , performAfterInitialization . get ( ) )
assertEquals ( false , performAfterInitialization . get ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( false , empty ( ) . containsDifferent ( ) )
assertEquals ( false , ? ? ? containsDifferentShouldReturnFalseWhenSameValue ( ) )
assertEquals ( true , ? ? ? containsDifferentShouldReturnTrueWhenDifferentValue ( ) )
assertThat ( recordedExceptions ) . hasSize ( expectedSize )
assertEquals ( true , canceled . get ( ) )
Assertions are  used to  verify the  expected behavior  of a  program . In order  to suggest  an assertion , I  need to  understand the  expected behavior  of the  code . Could you  please provide  more information  about what  you expect  to be  asserted in this test  method ?
assertEquals ( true , canceled . get ( ) )
assertEquals ( true , canceled . get ( ) )
assertThat ( countDownLatch . getCount ( ) ) . isEqualTo ( 0 )
assertNotNull ( parse ( "mailboxIdString" ) )
assertNotNull ( parse ( "mailboxIdString" ) )
assertEquals ( expectedResult , result )
assertEquals ( expected , actual )
assertNotNull ( parse ( "mailboxIdString" ) )
assertEquals ( expected , actual )
assertNotNull ( parse ( "mailboxIdString" ) )
assertEquals ( "Expected exception to be thrown" , expectedException . getClass ( ) , assertThrows ( YourException . class , ( ) -> focalMethod ( ) ) . getClass ( ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> removeShouldNotBeKept ( ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> removeShouldBeRemoved ( ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> ? ? ? removedShouldNotBeModified ( ) )
assertEquals ( "Read-Only" , exception . getMessage ( ) )
assertEquals ( replacement , getOrElse ( replacement ) )
assertEquals ( replacement , getOrElse ( replacement ) )
assertEquals ( replacement , getOrElse ( replacement ) )
assertEquals ( null , getOrElse ( null ) )
assertEquals ( null , focalMethod ( replacement ) )
assertEquals ( replacement , getOrElse ( replacement ) )
assertEquals ( dateTime , ZonedDateTime . parse ( "3 Jun 2017 04:35:11 -0712" , ImapDateTimeFormatter . rfc5322 ( ) ) )
assertEquals ( 0 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 24 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 10 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 12 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 10 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 6 , currentPositionInputStream . getPosition ( ) )
assertEquals ( 6 , currentPositionInputStream . getPosition ( ) )
assertEquals ( "body 1" , actual . getTextBody ( ) )
assertEquals ( "text" , actual . getTextBody ( ) )
assertEquals ( "" , actual . getTextBody ( ) )
assertEquals ( "éééé\r\nèèèè\r\nàààà", actual.get B dy())
assertEquals ( actual . collect ( Collectors . toList ( ) ) , Arrays . asList ( "a" , "b" , "c" ) )
assertEquals ( 0 , actual . count ( ) . block ( ) )
assertThat ( actual . collectList ( ) . block ( ) ) . containsExactly ( "a" , "b" , "c" )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( "Unknown HostScheme 'test'" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( "test" ) ) )
assertEquals ( "Unknown HostScheme ' '" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( " " ) ) . getMessage ( ) )
assertEquals ( REGEX , dlpConfigurationItem . getRegexp ( ) . pattern ( ) )
assertEquals ( EXPLANATION , dlpConfigurationItem . getExplanation ( ) )
assertEquals ( Arrays . asList ( RULE , RULE_2 ) , dlpConfigurationStore . list ( ) )
assertEquals ( 2 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 0 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 1 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 1 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 2 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 2 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 2 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 2 , dlpConfigurationStore . list ( ) . size ( ) )
assertEquals ( 0 , dlpConfigurationStore . size ( ) )
assertFalse ( result ) ; // <AssertPlaceHolder>
assertTrue ( result )
assertFalse ( canSendFrom )
assertEquals ( true , canSendFrom )
assertEquals ( true , canSendFrom ( ) )
assertEquals ( false , canSendFrom ( ) . shouldBeFalseWhenSenderIsAnAliasOfAnAliasOfAnAliasOfTheUser ( ) )
assertEquals ( true , canSendFrom ( ) )
assertEquals ( true , canSendFrom )
assertEquals ( true , canSendFrom ( ) )
assertThat ( canSendFrom ( ) . userCanSendFrom ( fromUser ) ) . isFalse ( )
assertEquals ( false , canSendFrom ( ) )
assertEquals ( true , canSendFrom ( ) . allValidFromAddressesShouldContainASenderAliasOfAnAliasOfTheUser ( ) )
assertEquals ( "expectedValue" , mappingSource . asMailAddressString ( ) )
assertEquals ( "user@domain" , mappingSource . asMailAddressString ( ) )
assertEquals ( "user@domain.com" , mappingSource . asMailAddressString ( ) )
assertEquals ( "user" , mappingSource . asMailAddressString ( ) . split ( "@" ) [ 0 ] )
assertEquals ( "user@domain.com" , mappingSource . asMailAddressString ( ) )
assertEquals ( true , ? ? ? )
assertEquals ( false , ? ? ? hasDomain ( Domain . EMPTY ) ? ? ? . hasDomain ( ) )
assertEquals ( false , hasDomain ( "" ) . hasDomain ( ) )
assertEquals ( false , ? ? ? hasDomain ( Domain . EMPTY ) . hasDomain ( ) )
assertEquals ( true , hasDomain ( ) )
assertEquals ( 0 , mapping . getDomains ( ) . size ( ) )
assertEquals ( null , domain . get ( ) )
assertEquals ( Type . Regex , regex ( mapping ) . getType ( ) )
assertEquals ( Type . Error , error ( "mapping" ) . getType ( ) )
assertEquals ( "domain" , domain . get ( ) , builder . domain . get ( ) )
assertEquals ( Type . DomainAlias , domainAlias ( mapping ) . getType ( ) )
assertEquals ( Type . Forward , forward ( mapping ) . getType ( ) )
assertEquals ( Type . Group , group ( mapping ) . getType ( ) )
assertEquals ( Type . Alias , alias ( mapping ) . getType ( ) )
assertEquals ( "expectedErrorMessage" , error ( "mapping" ) . getErrorMessage ( ) )
assertEquals ( "" , error ( "" ) . getErrorMessage ( ) )
assertEquals ( "" , focalMethod ( ) )
assertEquals ( "" , asMailAddressShouldReturnEmptyForRegex ( ) )
assertEquals ( "" , ? ? ? )
assertEquals ( "" , domainAlias ( mapping ) . asString ( ) )
assertEquals ( "regex:(.*)@localhost, regex:user@test" , separator )
assertEquals ( "expectedValue" , getIdentifier ( ) )
assert . assertFalse ( recipientId . isRegister ( ) )
assertEquals ( ACCOUNT_ID , notificationRegistry ( ) . getRegisteredRecipientId ( ) )
assertEquals ( recipientId ( ) , "<expected value>" )
assertEquals ( 1 , notificationRegistry ( ) . getFlushCount ( ACCOUNT_ID ) )
assertEquals ( ACCOUNT_ID , recipientId ( ) )
assertEquals ( recipientId ( ) , notificationRegistry ( ) . getRegisteredRecipientId ( ACCOUNT_ID ) )
assertThrows ( NullPointerException . class , ( ) -> builder . fromDate ( null ) )
assertThrows ( NullPointerException . class , ( ) -> toDate ( ) )
assertThrows ( NullPointerException . class , ( ) -> {
assertThrows ( NullPointerException . class , ( ) -> {
assertThrows ( NullPointerException . class , ( ) -> subject ( null ) )
assertThrows ( NullPointerException . class , ( ) -> Preconditions . checkNotNull ( isEnabled ) )
assertEquals ( 0 , vacationRepository . retrieveVacation ( ) )
assertNull ( retrieveSourcesShouldReturnEmptyByDefault ( ) )
assertThat ( dao . retrieveSources ( ) . block ( ) ) . containsOnly ( MAPPING , SOURCE )
assertThrows ( MailboxException . class , ( ) -> dao . retrieveSourcesShouldNotReturnRemovedMapping ( ) )
assertThat ( dao . retrieveSourcesShouldReturnMultipleStoredMappingSourcesForMapping ( ) )
assertThat ( dao . retrieveSources ( ) . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( mappings ) . isEmpty ( )
assertEquals ( 1 , dao . retrieveMappings ( ) . size ( ) )
assertNotNull ( dao . getAllMappings ( ) . block ( ) )
assertNull ( dao . getAllMappings ( ) . block ( ) )
assertEquals ( 0 , listScripts ( session ) . size ( ) )
assertThat ( spaceUsedByShouldReturnZeroByDefault ( ) ) . isEqualTo ( 0 )
assertEquals ( 18L , spaceUsed )
assertThat ( sieveQuotaDAO . updateSpaceUsed ( USERNAME , spaceUsed ) . block ( ) ) . isEqualTo ( expectedValue )
assertThat ( sieveQuotaDAO . updateSpaceUsed ( USERNAME , - 1 * spaceUsed ) . block ( ) ) . isEqualTo ( expectedValue )
assertThat ( dom . getDomains ( ) ) . isEmpty ( )
assertThat ( dom . getDomains ( ) , hasSize ( expectedSize ) )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
assertThat ( dom . getDomainsAutoDetectLocalHost ( ) , hasSize ( expectedSize ) )
assertEquals ( "expectedValue" , generator . current ( ) . toString ( ) )
assertThat ( generator . evictionPredicateShouldKeepPresentBucket ( ) ) . isTrue ( )
assertThat ( generator . evictionPredicateShouldKeepFutureBuckets ( ) ) . isTrue ( )
assertThat ( generator . evictionPredicateShouldKeepRecentBuckets ( ) ) . isTrue ( )
assertThat ( generator . evictionPredicateShouldMatchOldBuckets ( ) ) . isInstanceOf ( ZipArchiveEntryAssert . class )
assertEquals ( TOKEN , accessTokenRepository ( ) . getToken ( USERNAME ) . block ( ) )
assertNull ( accessTokenRepository ( ) )
accessTokenRepository ( ) . removeToken ( TOKEN ) . block ( )
assertNull ( accessTokenRepository ( ) . getToken ( USERNAME ) . block ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( "Unknown HostScheme 'test'" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( "test" ) ) )
assertEquals ( "Unknown HostScheme ' '" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( " " ) ) . getMessage ( ) )
assertEquals ( CONDITION , rule . getCondition ( ) )
assertEquals ( ACTION , rule . getAction ( ) )
assertEquals ( fieldNameString , getField ( fieldNameString ) . getValue ( ) )
assertEquals ( comparator , getComparator ( ) )
assertEquals ( expectedMailboxIdsList , actualMailboxIdsList )
assertEquals ( 0 , mailbox . clear ( ) . size ( ) )
assertEquals ( 0 , ? ? ? delete ( ) . size ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( hashPassword ( "password" , null , null ) , "expectedHash" )
assertEquals ( "<expected value>" , hashPassword ( "<password>" , "<nullableSalt>" , "<nullableAlgorithm>" ) )
assertEquals ( hashPassword ( "password" , null , null ) , "expectedHash" )
assertEquals ( "<expected value>" , hashPassword ( "<password>" , "<nullableSalt>" , "<nullableAlgorithm>" ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "<expected value>" , hashPassword ( "<password>" , "<nullableSalt>" , "<nullableAlgorithm>" ) )
assertEquals ( expectedHash , hashPassword ( password , nullableSalt , nullableAlgorithm ) )
assertNull ( getUserByName ( name ) )
assertEquals ( 1 , usersLDAPRepository . getUsers ( ) . size ( ) )
assertTrue ( testSystem . isAdministratorShouldReturnTrueWhenConfiguredAndUserIsAdmin ( ) )
assertEquals ( expectedList , actualList )
assertEquals ( false , ? ? ? containsShouldReturnFalseWhenUserDoesNotExists ( ) )
assertEquals ( true , getUser ( ) )
assertEquals ( expectedList , actualList )
where ? ? ? is the condition that you want to assert .
assertEquals ( true , ? ? ? asMailAddress ( ) . contains ( "getUser" ) )
assertEquals ( expectedDefaultDomain , getDefaultDomain ( ) )
assertEquals ( expectedDefaultDomain , domainList . getDefaultDomain ( ) )
assertThat ( domainList . getDomains ( ) ) . isEmpty ( )
assertEquals ( "detected.tld" , ? ? ? )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
assertEquals ( envDomain , envDetector . getEnv ( AbstractDomainList . ENV_DOMAIN ) )
assertEquals ( "localhost" , domainList . getDefaultDomain ( ) )
assertEquals ( true , ? ? ? )
assertEquals ( 1 , domainList ( ) . size ( ) )
assertEquals ( null , ? ? ? domainList ( ) . listDomains ( ) )
assertEquals ( 0 , domainList ( ) . size ( ) )
assertEquals ( false , ? ? ? )
assertEquals ( false , domainList ( ) . contains ( DOMAIN_1 ) )
assertEquals ( 0 , domainList ( ) . getDomains ( ) . size ( ) )
assertEquals ( 0 , domainList ( ) . getDomains ( ) . size ( ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
actual should  contain a  collection with  two elements .
assertThat ( actual ) . containsOnly ( expected )
assertThat ( actual ) . containsOnly ( expected )
actual . getMappings ( ) . size ( ) == 2
actual . getMappings ( ) . size ( ) == 3
actual . getAddress ( )
actual . getAddress ( )
actual . getRawString ( ) , "value1,value1,value2" )
actual . getRawString ( )
assertEquals ( Type . Error , actual . get ( 0 ) . getType ( ) )
assertThat ( actual . getRawString ( ) ) . isEqualTo ( "domain:test" )
assertEquals ( Type . DomainAlias , actual . getType ( ) )
assertThat ( actual ) . isEqualTo ( MappingsImpl . fromRawString ( "regex:test" ) )
assertEquals ( "" , ? ? ? serializeShouldReturnEmptyStringWhenEmpty ( ) )
assertEquals ( expected , mappings . select ( ) )
assertThat ( mappings . selectShouldReturnEmptyCollectionWhenNoMatchingMapping ( ) ) . isEmpty ( )
assertThat ( mappings . exclude ( type ) ) . containsExactlyElementsOf ( expected )
assertThat ( mappings . exclude ( type ) ) . isEmpty ( )
assertEquals ( "toto tata" , mappings . toString ( ) )
assertThat ( mappingsImpl ) . containsOnly ( expectedMapping )
assertThat ( mappingsImpl ) . containsOnlyElementsOf ( right . build ( ) )
assertEquals ( 1 , virtualUserTable ( ) . getMappings ( ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getMappings ( source ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getMappings ( SOURCE ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getUserDomainMapping ( ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 0 , mapping . listSources ( ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . listSources ( ) . size ( ) )
assertEquals ( 0 , ? ? ? getSourcesForTypeShouldReturnEmptyWhenNoMapping ( ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getSourcesForType ( SOURCE ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . getSourcesForType ( SOURCE ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getSourcesForType ( SOURCE ) . size ( ) )
assertEquals ( 0 , ? ? ? virtualUserTable ( ) . getMappingsForType ( "type" ) . size ( ) )
assertEquals ( 0 , virtualUserTable ( ) . getMappingsForType ( SOURCE ) . size ( ) )
assertEquals ( 1 , virtualUserTable ( ) . getMappingsForType ( SOURCE ) . size ( ) )
assertEquals ( 2 , virtualUserTable ( ) . getMappingsForType ( ADDRESS ) . size ( ) )
assertEquals ( SCRIPT_CONTENT , sieveRepository ( ) . getScript ( USERNAME , SCRIPT_NAME ) )
assertEquals ( Collections . emptyList ( ) , ? ? ? listScriptsShouldReturnAnEmptyListIfUserNotFound ( ) )
assertEquals ( 0 , listScripts . size ( ) )
assertEquals ( SCRIPT_CONTENT , sieveRepository ( ) . getScript ( USERNAME , SCRIPT_NAME ) )
assertEquals ( true , sieveRepository ( ) . isActive ( USERNAME , SCRIPT_NAME ) )
assertEquals ( SCRIPT_CONTENT + OTHER_SCRIPT_CONTENT , sieveRepository ( ) . getCombinedScript ( USERNAME ) )
assertEquals ( SCRIPT_CONTENT , sieveRepository ( ) . getScriptContent ( ) )
assertEquals ( SCRIPT_CONTENT , sieveRepository ( ) . getScriptContent ( ) )
assertEquals ( OTHER_SCRIPT_NAME , sieveRepository ( ) . getScript ( USERNAME , OTHER_SCRIPT_NAME ) . getName ( ) )
assertEquals ( OTHER_SCRIPT_NAME , sieveRepository ( ) . getScriptContent ( ) )
assertEquals ( DEFAULT_QUOTA , sieveRepository ( ) . getDefaultQuota ( ) )
assertEquals ( USER_QUOTA , sieveRepository ( ) . getQuota ( USERNAME ) )
assertEquals ( false , ? ? ? sieveRepository . hasQuota ( ) )
assertEquals ( true , ? ? ? sieveRepository ( ) . hasQuota ( ) )
assertEquals ( false , ? ? ? sieveRepository . hasQuota ( ) )
assertEquals ( true , focalMethod ( ) )
assertEquals ( 0 , sieveRepository ( ) . getQuota ( ) )
assertEquals ( 0 , sieveRepository ( ) . getQuota ( USERNAME ) )
assertEquals ( DEFAULT_QUOTA , sieveRepository ( ) . getDefaultQuota ( ) )
assertEquals ( DEFAULT_QUOTA , sieveRepository ( ) . getQuota ( USERNAME ) )
assertEquals ( QuotaSizeLimit . size ( USER_QUOTA . asLong ( ) - 1 ) , sieveRepository ( ) . getQuota ( USERNAME ) )
assertEquals ( 1 , testee ( ) . getUsers ( ) . size ( ) )
assertEquals ( testSystem . user1CaseVariation , testee ( ) . getAddedUser ( ) . getUsername ( ) )
assertEquals ( 1 , testee ( ) . getUsersCount ( ) )
assertEquals ( "password2" , testSystem . user1 . getPassword ( ) )
assertEquals ( 2 , testee ( ) . getUsers ( ) . size ( ) )
assertEquals ( 0 , testee ( ) . getUsers ( ) . size ( ) )
assertEquals ( "newpass" , testee ( ) . getUserByName ( testSystem . user1 ) . getPassword ( ) )
assertEquals ( "newpass" , testee ( ) . getUserByName ( testSystem . user1 ) . getPassword ( ) )
assertEquals ( netMatcher . getNetworks ( ) . size ( ) , expectedSize )
assertEquals ( netMatcher . getNetworks ( ) . size ( ) , DNSFixture . LOCALHOST_IP_V6_ADDRESSES_DUPLICATE . size ( ) )
assertEquals ( InetAddress . getByName ( "example.com" ) , ? ? ? )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 0 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 0 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( "All" , mailetConfiguration . getMatcher ( ) . getCanonicalName ( ) )
assertEquals ( "condition" , mailetConfiguration . getMatcherCondition ( ) . orElse ( null ) )
assertEquals ( "expectedValue" , readFirstMessage ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( BOB_ALIAS . toUpperCase ( ) , readFirstMessage ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertThat ( testIMAPClient . readFirstMessage ( ) ) . isEqualTo ( expectedMessage )
assertEquals ( USER_DOMAIN2 , readFirstMessage ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( "Expected message to redirect to user with different domain" , expectedRedirectUrl , actualRedirectUrl )
assertEquals ( 1 , testIMAPClient . getNumberOfMessages ( ) )
assertEquals ( "Content1" , readFirstMessage ( ) )
assert . assertFalse ( testee . isLocalUserShouldBeFalseOnNullUser ( ) )
assertThat ( testee . isLocalServer ( ) ) . isFalse ( )
assertEquals ( true , testee . isLocalServer ( ) )
assertEquals ( true , testee . isLocalUserShouldBeTrueWhenUsernameExist ( ) )
assertEquals ( true , testee . isLocalUser ( USERMAIL ) )
assertEquals ( false , testee . isLocalUser ( "localpart@defaultdomain" ) )
assert . assertFalse ( testee . isLocalUserShouldBeFalseWhenUsernameDoNotExist ( ) )
assertEquals ( false , mailAddress . isLocalEmail ( ) )
assertEquals ( false , mailAddress . isLocalEmail ( ) )
assertEquals ( true , mailAddress . isLocalEmail ( ) )
assertEquals ( USERMAIL , mailAddress . getAddress ( ) )
assertEquals ( null , mailAddress . getEmailAddress ( ) )
assertEquals ( null , mailAddress . getLocalPart ( ) )
assert . assertFalse ( testee . isLocalEmailShouldBeFalseWhenMailIsNull ( ) )
assertEquals ( "root" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( "root" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( "other" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( "root" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( "root" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( "other" , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( otherState , mailArgumentCaptor . getValue ( ) . getState ( ) )
assertEquals ( 1 , mailArgumentCaptor . getAllValues ( ) . size ( ) )
assertThat ( testee . getMatchers ( ) ) . containsOnly ( matcher1 )
assertThat ( testee . getProperties ( ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( testee . getMatchers ( ) ) . containsOnly ( matcher1 , matcher2 )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "expectedState" , bounce . getState ( ) )
assertEquals ( initialState , bounce . getState ( ) )
assertEquals ( "My subject" , bounce . getSubject ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( recipients , reversePath )
assertThat ( propertiesToInnerProperties ( actual ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertEquals ( "expectedState" , getState ( ) )
assertEquals ( "expectedState" , getState ( ) )
assertEquals ( "expectedState" , getState ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( null , ? ? ? getToShouldReturnEmpty ( ) . getTo ( ) )
assertEquals ( null , ? ? ? getReplyToShouldReturnNull ( ) )
assertNull ( getSender ( ) )
assertEquals ( "postmaster" , forward . getRecipients ( ) )
assertEquals ( expectedSubject , getSubject ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "expectedValue" , notifyPostmaster . getRecipients ( ) )
assertThat ( notifyPostmaster . getTo ( ) ) . isEqualTo ( "Postmaster" )
assertThat ( notifyPostmaster . getTo ( ) ) . isEqualTo ( "postmaster" )
assertThat ( notifyPostmaster . getTo ( ) ) . isEqualTo ( "unaltered" )
assertThat ( notifyPostmaster . getTo ( ) ) . isEqualTo ( "postmaster" )
assertEquals ( "My subject" , mail . getSubject ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "expectedValue" , notifySender . getRecipients ( ) )
assertThat ( notifySender . getTo ( ) ) . isEqualTo ( sender )
assertThat ( notifySender . getTo ( ) ) . isEqualTo ( "sender" )
assertThat ( notifySender . getTo ( ) ) . isEqualTo ( "unaltered" )
assertThat ( notifySender . getTo ( ) ) . isEqualTo ( "from" )
assertThat ( notifySender . getTo ( ) ) . isEqualTo ( "sender" )
assertEquals ( "My subject" , mail . getSubject ( ) )
assertThat ( result ) . containsOnly ( mailAddressFixture . OTHER_AT_JAMES )
assertThat ( result ) . containsOnly ( MailAddressFixture . ANY_AT_LOCAL . toString ( ) )
assertThat ( result ) . containsOnlyElementsOf ( expected )
assertEquals ( "Expected recipients to be unchanged" , "ANY@JAMES,OTHER@JAMES" , processor . getRecipients ( ) )
assertEquals ( MailAddressFixture . OTHER_AT_LOCAL , processor . getRecipients ( ) )
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( "expectedRecipients" , mailet . getRecipients ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "" , redirect . getRecipients ( ) )
assertEquals ( "postmaster" , redirect . getRecipients ( ) )
assertThat ( redirect . getTo ( ) ) . isEqualTo ( "special@address.com" )
assertEquals ( "My subject" , redirect . getSubject ( ) )
assertEquals ( "pre subj" , newMail . getSubject ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "My subject" , getSubject ( ) )
assertEquals ( "pre subj" , newMail . getSubject ( ) )
assertEquals ( inputStream , sieveRepository . getActive ( USERNAME ) )
assertEquals ( null , mailet . getAttribute ( "name" ) )
assertEquals ( "ghost" , mailet . getState ( ) )
assertEquals ( "ghost" , mailet . getState ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( PROPERTY_PRIORITY . getValue ( ) . value ( ) . toString ( ) , mockedMailetConfig . getProperty ( "priority" ) )
assertEquals ( 5 , mail . getAttribute ( MailPrioritySupport . MAIL_PRIORITY ) )
assertEquals ( "state" , testee . getState ( ) )
assertEquals ( state , testee . getState ( ) )
assertEquals ( "wellDelivered" , testee . getAttribute ( "deliveryStatus" ) )
assertEquals ( "receiver@localhost" , mail . getRecipients ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertEquals ( "" , testee . getRecipients ( ) )
assertEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertEquals ( null , getAttribute ( "name" ) )
assertEquals ( null , getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertTrue ( getAttribute ( "name" ) instanceof Serializable )
assertTrue ( getAttribute ( "name" ) instanceof Serializable )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertEquals ( 100 , mail . getMessageSize ( ) )
assertEquals ( 100 , mail . getMessageSize ( ) )
assertNotNull ( testee . getAttribute ( "name" ) )
assertEquals ( 1000 , mail . getMessageSize ( ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( "source1" , testee . getAttribute ( "name" ) )
assertNotNull ( testee . getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertNotEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNotEquals ( "otherAddress" , testee . getAttribute ( "name" ) )
assertNotEquals ( "otherDomain.org" , testee . getAttribute ( "From" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNotEquals ( "otherAddress" , testee . getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotEquals ( "otherDomain.org" , testee . getAttribute ( "name" ) )
assertEquals ( "source@domain.com" , testee . getAttribute ( "From" ) )
assertEquals ( "source@domain.com" , testee . getAttribute ( "Resend-From" ) )
assertEquals ( "source2@domain.com" , testee . getAttribute ( "Resend-From" ) )
assertEquals ( "source@domain.org" , testee . getAttribute ( "Resend-From" ) )
assertNull ( getAttribute ( "name" ) )
assertEquals ( "source@domain.com" , testee . getAttribute ( "Resend-To" ) )
assertNull ( getAttribute ( "Resend-To" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( null , testee . getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( expectedValue , actualValue )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertEquals ( "expectedValue" , testee . getAttribute ( "name" ) )
assertNull ( getAttribute ( "name" ) )
assertNotNull ( getAttribute ( "name" ) )
assertEquals ( false , mail . getAttribute ( SieveExecutor . SIEVE_NOTIFICATION ) . getValue ( ) )
assertEquals ( "" , mail . getRecipients ( ) )
assertEquals ( "name" , mail . getRecipients ( ) )
assertEquals ( null , mail . getRecipients ( ) )
assertEquals ( "name" , mail . getRecipients ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertNotNull ( heloNameProvider . getHeloName ( ) )
assertEquals ( DOMAIN , heloNameProvider . getHeloName ( ) )
assertEquals ( "Expected heloName to be LOCALHOST" , "LOCALHOST" , heloNameProvider . getHeloName ( ) )
assertNotNull ( result )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . PERMANENT_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . PERMANENT_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( "invalid" , testee . getRecipients ( ) )
assertEquals ( "validUnsent" , Arrays . toString ( validUnsent ) , Arrays . toString ( mail . getRecipients ( ) ) )
assertEquals ( "validUnsent" , Arrays . toString ( validUnsent ) , Arrays . toString ( mail . getRecipients ( ) ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getExecutionState ( ) )
assertEquals ( ExecutionState . TEMPORARY_ERROR , executionResult . getExecutionState ( ) )
assertEquals ( ExecutionState . TEMPORARY_ERROR , executionResult . getExecutionState ( ) )
assertEquals ( DeliveryResult . PermanentError , executionResult . getResult ( ) )
assertEquals ( DeliveryResult . PermanentError , executionResult . getResult ( ) )
assertNull ( mailetConfig . getBindAddress ( ) )
assertEquals ( value , mailetConfig . getBindAddress ( ) )
assertEquals ( null , mailetConfig . getAuthUser ( ) )
assertNull ( getAuthUser ( ) )
assertEquals ( value , getAuthUser ( ) )
assertEquals ( "" , value )
assertEquals ( value , getAuthUser ( ) )
assertEquals ( "" , value )
assertEquals ( value , getAuthUser ( ) )
assertEquals ( null , mailetConfig . getAuthPass ( ) )
assertNull ( mailetConfig . getProperty ( RemoteDeliveryConfiguration . GATEWAY_PASSWORD ) )
assertEquals ( value , focalMethod ( ) )
assertEquals ( "" , value )
assertEquals ( "ghost" , remoteDelivery . getState ( ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . containsOnly ( MailAddressFixture . OTHER_AT_JAMES )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . containsOnlyElementsOf ( Arrays . asList ( new MailAddress ( "recipient1@domain.tld" ) ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertDoesNotThrow ( ( ) -> new FakeMatcherConfig . Builder ( ) . matcherName ( "RemoteDeliveryFailedWithSMTPCode" ) . condition ( condition ) . build ( ) )
assertThat ( dlp . match ( mail ) ) . containsOnly ( expected )
assertThat ( mailAddresses . get ( 0 ) ) . isEqualTo ( expectedMailAddress )
assertThat ( internetAddresses . length ) . isEqualTo ( 1 )
assertThat ( internetAddresses . size ( ) ) . isEqualTo ( 1 )
assertEquals ( subject , getSubject ( ) )
assertEquals ( "1 Byte" , humanReadableSize ( 1 ) )
assertEquals ( "1 KB" , humanReadableSize ( 1024 ) )
assertEquals ( "0 bytes" , humanReadableSize ( 0 ) )
assertEquals ( "Expected humanReadableSize to return a string representation of the size" , expectedSize , humanReadableSize ( size ) )
assertEquals ( "1 MB" , humanReadableSize ( 1048576 ) )
assertEquals ( "1 GB" , humanReadableSize ( 1024 * 1024 * 1024 ) )
assertEquals ( "1 KB" , humanReadableSize ( 1024 ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( "1.2 KB" , humanReadableSize ( 1234 ) )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( expected )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( sender )
assertThat ( addresses ) . containsOnly ( expected )
assertEquals ( 4 , behaviorRepository . getBehaviors ( ) . size ( ) )
? ? ? assertEquals ( 0 , list ( ) . size ( ) )
assertEquals ( 1 , testee . list ( ) . size ( ) )
assertEquals ( 2 , testee . list ( ) . size ( ) )
assertEquals ( 2 , testee . list ( ) . size ( ) )
assertEquals ( 1 , testee . list ( ) . size ( ) )
assertEquals ( condition . getOperator ( ) , "contains" )
assertEquals ( json , "{\"operator\":\"CONTAINS\",\"value\":\"matchme\"}" )
assertEquals ( response . getCode ( ) , 250 )
assertEquals ( json , "{\"statusCode\":250,\"message\":\"OK\"}" )
store . listDistinct ( )
assertThat ( store . listDistinctShouldNotReturnDuplicates ( ) ) . doesNotHaveDuplicates ( )
assertThat ( store ) . hasSize ( expectedSize )
assertThat ( store ) . hasSize ( expectedSize )
assertEquals ( true , testee . store ( URL , KEY_1 ) . block ( ) )
assertNull ( e . getCause ( ) )
assertEquals ( false , testee . store ( URL , KEY_1 ) . block ( ) )
assertThat ( result , is ( false ) )
assertThat ( response . getBody ( ) . asString ( ) , containsString ( "mailboxesSet" ) )
assertThat ( response . getBody ( ) . asString ( ) , containsString ( "The mailbox 'iNbOx' already exists as 'INBOX'" ) )
assertEquals ( 1 , mailboxProbe . getChildren ( inboxId ) . size ( ) )
assertEquals ( token , accessTokenManager . grantAccessToken ( USERNAME ) )
assertEquals ( USERNAME , token . getUsername ( ) )
assertThat ( < AssertPlaceHolder > ) . isFalse ( )
assertThat ( isValid ) . isFalse ( )
assertNotNull ( accessToken )
assertNull ( token )
assertEquals ( validSignature , focalMethod . sign ( source ) )
assertEquals ( "expectedValue" , actualValue )
assertThat ( ? ? ? ) . isFalse ( )
assertEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertNotEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertNotEquals ( TokenStatus . VALID , getValidity ( continuationToken ) )
assertNotEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertEquals ( serializedToken , "<expectedSerializedToken>" )
assertEquals ( Date . from ( messageDate . toInstant ( ) ) , result . getDate ( ) )
assertEquals ( expected , result . getBody ( ) )
assertEquals ( expected , result . getBody ( ) )
assertEquals ( expected , result . getBody ( ) . getContent ( ) )
AssertPlaceHolder = "assertThrows(MessagingException.class, () -> buildMail(message, envelope));"
assertThrows ( MessagingException . class , ( ) -> buildMail ( message , envelope ) )
assertEquals ( false , ? ? ? requestChangedShouldReturnFalseWhenRequestValueAndStoreValueAreEmpty ( ) )
assertEquals ( false , ? ? ? requestChangedShouldReturnFalseWhenEmptyRequestMeansNoChanging ( ) )
assertEquals ( true , ? ? ? requestChangedShouldReturnTrueWhenEmptyStoreValue ( ) )
assertEquals ( true , ? ? ? requestChangedShouldReturnTrueWhenRequestValueAndStoreValueAreNotTheSame ( ) )
assertEquals ( false , ? ? ? requestChangedShouldReturnFalseWhenRequestValueAndStoreValueAreTheSame ( ) )
assertThrows ( MailboxNotFoundException . class , ( ) -> mockedMailboxManager . getMailbox ( mailboxId , session ) )
assertEquals ( true , tested . isInlinedWithCid ( ) )
assertFalse ( tested . isInlinedWithCid ( ) )
assertEquals ( false , tested . isInlinedWithCid ( ) )
assertEquals ( "" , exception . getMessage ( ) )
assertNotNull ( schemeValue )
sut . validate ( port )
assertThrows ( InvalidRecipientException . class , ( ) -> sut . validate ( port ) )
sut . getErrors ( ) . isEmpty ( )
assertNotNull ( sut )
assertNotNull ( sut )
AssertPlaceHolder = "assertFalse(message.isDraft());"
assertTrue ( message . isDraft ( ) )
assertFalse ( message . isDraft ( ) )
assertEquals ( false , message . isDraft ( ) )
assertFalse ( message . getKeywords ( ) . containsKey ( Flag . DRAFT . getFlagName ( ) ) ) ;
assertTrue ( message . getKeywords ( ) . containsKey ( Keyword . DRAFT . getFlagName ( ) ) )
assertEquals ( Optional . of ( ImmutableList . of ( "1" , "2" ) ) , filterCondition . getInMailboxes ( ) )
assertEquals ( Arrays . asList ( "1" , "2" ) , filterCondition . getInMailboxes ( ) )
assertEquals ( Optional . of ( ImmutableList . of ( "1" , "2" ) ) , filterCondition . getNotInMailboxes ( ) )
assertEquals ( "1" , filterCondition . getNotInMailboxes ( ) . get ( 0 ) )
assertEquals ( "Expected exception to be thrown when header is null" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> {
assertEquals ( "HEADER FROM Smith" , header ( ) . getHeader ( ) )
assertEquals ( "'count' need to be strictly positive" , e . getMessage ( ) )
? ? ? assertThrows ( IllegalArgumentException . class , ( ) -> builder ( ) . build ( ) )
assertEquals ( 3 , asProtocolSpecification . length )
assertEquals ( maxLengthFlagName , keyword . getFlagName ( ) )
assertEquals ( minLengthFlagName , keyword . getFlagName ( ) )
assertThat ( internalFlags . contains ( Flags . Flag . DRAFT ) ) . isTrue ( )
assertEquals ( false , flagsBuilder . isDraft ( true ) )
assertEquals ( field . toLowerCase ( Locale . US ) , "<AssertPlaceHolder>" )
assertEquals ( "Expected exception to be thrown when start with header prefix" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> { fromFieldName ( "headerPrefix_field" ) ; } ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HeaderProperty . valueOf ( null ) )
assertEquals ( null , ? ? ? valueOf ( "null" ) )
assertEquals ( "headers.prop" , headerProperty . asFieldName ( ) )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> HeaderProperty . valueOf ( "invalidProperty" ) ) )
assertEquals ( property , HeaderProperty . valueOf ( property ) )
assertEquals ( false , valueOf ( "property" ) . equals ( valueOf ( "differentProperty" ) ) )
assertEquals ( property . toLowerCase ( Locale . US ) , HeaderProperty . valueOf ( property ) . toString ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( "Unknown HostScheme 'test'" , exception . getMessage ( ) )
assertEquals ( emptyBuilder . build ( ) , testee )
assertThrows ( NullPointerException . class , ( ) -> subject ( null ) )
assertThrows ( NullPointerException . class , ( ) -> builder . fromDate ( null ) )
assertThrows ( NullPointerException . class , ( ) -> toDate ( ) )
assertThrows ( NullPointerException . class , ( ) -> builder . textBody ( null ) )
assertThrows ( NullPointerException . class , ( ) -> {
assertThrows ( NullPointerException . class , ( ) -> new Builder ( ) . id ( null ) )
assertNotNull ( role )
assertEquals ( Optional . empty ( ) , builder . role )
assertNotNull ( id )
assertNotNull ( sortOrder )
assertEquals ( sortOrder , this . sortOrder )
assertNotNull ( parentId )
assertEquals ( null , builder . name ( ) )
assertEquals ( "" , mailbox . getParentId ( ) )
assertEquals ( 0 , mailbox . getTotalMessages ( ) )
assertEquals ( 0 , mailbox . getUnreadMessages ( ) )
assertEquals ( 0 , mailbox . getTotalMessages ( ) )
assertEquals ( 0 , mailbox . getUnreadMessages ( ) )
assertEquals ( expectedTotalMessages , mailbox . getTotalMessages ( ) )
assertEquals ( expectedTotalMessages , mailbox . getUnreadMessages ( ) )
assertThat ( sortOrder ) . isGreaterThanOrEqualTo ( 0 )
assertEquals ( 0 , getSortOrder ( ) )
assertEquals ( 1 , sortOrder )
assertEquals ( mail , actual )
assertEquals ( 1 , criteria . count ( ) )
assertEquals ( 1 , criteria . count ( ) )
criteria . anyMatch ( c -> c instanceof HeaderCriterion && ( ( HeaderCriterion ) c ) . getHeaderName ( ) . equals ( AddressType . CC . name ( ) ) && ( ( HeaderCriterion ) c ) . getOperator ( ) . getValue ( ) . equals ( cc ) )
assertEquals ( BooleanOperator . set ( ) , attachmentCriterion . getOperator ( ) )
assertEquals ( 0 , criteria . count ( ) )
assertEquals ( bcc , headerCriterion . getOperator ( ) . getValue ( ) )
assertEquals ( 1 , criteria . count ( ) )
criteria . anyMatch ( c -> c instanceof TextCriterion && ( ( TextCriterion ) c ) . getValue ( ) . equals ( body ) && ( ( TextCriterion ) c ) . getScope ( ) == Scope . BODY )
criteria . anyMatch ( criterion -> criterion instanceof TextCriterion && ( ( TextCriterion ) criterion ) . getValue ( ) . equals ( attachments ) && ( ( TextCriterion ) criterion ) . getScope ( ) == Scope . ATTACHMENTS )
assertThat ( criterion ) . isEqualTo ( sentDateAfter ( after . toInstant ( ) . toEpochMilli ( ) , DateResolution . MILLISECOND ) )
assertThat ( criterion ) . isEqualTo ( sentDateBefore ( before . toInstant ( ) . toEpochMilli ( ) , DateResolution . MILLISECOND ) )
assertEquals ( BooleanOperator . set ( ) , flagCriterion . getOperator ( ) )
criteria . anyMatch ( c -> c instanceof FlagCriterion && ( ( FlagCriterion ) c ) . getFlag ( ) == Flag . IS_DRAFT && ( ( FlagCriterion ) c ) . getOperator ( ) == BooleanOperator . SET )
assertEquals ( true , flagCriterion . getFlag ( ) . isSet ( ) )
// <AssertPlaceHolder>
assertFalse ( criterion . isAnswered ( ) )
// <AssertPlaceHolder>
assertFalse ( criterion . isFlagged ( ) )
criteria . map ( Criterion :: getFlag ) . allMatch ( Flag :: isSet )
assertEquals ( 123L , sizeCriterion . getOperator ( ) . getValue ( ) )
assertTrue ( sizeCriterion . getOperator ( ) . getValue ( ) > minSize )
assertEquals ( ExistsOperator . exists ( ) , headerCriterion . getOperator ( ) )
assertEquals ( headerValue , containsOperator . getValue ( ) )
criteria . anyMatch ( c -> c instanceof FlagCriterion && ( ( FlagCriterion ) c ) . getFlag ( ) == Flag . FLAGGED )
assertEquals ( BooleanOperator . set ( ) , flagCriterion . getOperator ( ) )
assertEquals ( flagCriterion . getOperator ( ) , BooleanOperator . unset ( ) )
assertEquals ( BooleanOperator . unset ( ) , flagCriterion . getOperator ( ) )
assertEquals ( "text without html" , textWithoutHtml )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( 1 , mailboxManager . getMailboxes ( ) . size ( ) )
assertThat ( results ) . containsOnly ( recipient )
assertEquals ( "BayesianAnalysis Mailet" , ? ? ? )
assertEquals ( "multipart/mixed" , message . getContentType ( ) )
assertEquals ( "Expected content class header to be removed from original message" , null , getMessage ( ) . getHeader ( "Content-Class" ) )
assertEquals ( "Content-Disposition: inline" , message . getContentDisposition ( ) )
assertEquals ( "rfc-8621" , version )
assertDoesNotThrow ( ( ) -> sut . get ( ) )
assertEquals ( null , sut . get ( ) )
assertEquals ( 0 , testee . get ( ) . size ( ) )
executed . get ( ) should be true .
assertEquals ( false , executed . get ( ) )
assertThat ( executed . get ( ) ) . isTrue ( )
assertEquals ( true , executed . get ( ) )
assertEquals ( false , executed . get ( ) )
assertThat ( isEnabled . getValue ( ) ) . isFalse ( )
assertNotNull ( spf )
assertEquals ( HookReturnCode . connected ( Action . DENY ) , spf . deny ( ) )
AssertPlaceHolder = "assertEquals(HookReturnCode.DECLINED, spf.handle(sender, session));"
assertEquals ( Action . DENY , spf . handle ( sender , session ) )
assertEquals ( HookReturnCode . connected ( Action . DENY ) , < AssertPlaceHolder >  )
assertEquals ( HookReturnCode . connected ( Action . DENYSOFT ) , spf . denySoft ( ) )
AssertPlaceHolder = "assertEquals(HookReturnCode.DECLINED, spf.declined());"
assertEquals ( HookReturnCode . connected ( Action . DECLINED ) , spf . doSPFCheck ( sender , session , dnsService ) )
assertEquals ( HookReturnCode . DECLINED , response . getResult ( ) )
assertEquals ( HookReturnCode . DENY , response . getResult ( ) )
assertEquals ( HookReturnCode . DENY , response . getResult ( ) )
assertEquals ( HookReturnCode . DENY , rCode )
assertEquals ( HookReturnCode . DENY , rCode )
assertEquals ( HookReturnCode . declined ( ) , rCode )
assertEquals ( HookReturnCode . declined ( ) , rCode )
assertEquals ( HookReturnCode . DECLINED , rCode )
assertEquals ( HookReturnCode . declined ( ) , rCode )
assertEquals ( HookReturnCode . declined ( ) , rCode )
assertEquals ( HookReturnCode . DECLINED , rCode )
assertEquals ( HookReturnCode . declined ( ) , rCode )
assertEquals ( Action . DENYSOFT , rCode )
assertEquals ( HookReturnCode . DENY , rCode )
assertEquals ( QuotaCountUsage . count ( messageCount ) , < AssertPlaceHolder >  )
assertEquals ( HttpStatus . NO_CONTENT_204 , ? ? ? )
assertEquals ( HttpStatus . NO_CONTENT_204 , when ( ) . delete ( SPECIFIC_MAILBOX ) . then ( ) . statusCode ( ) )
assertThrows ( NullPointerException . class , ( ) -> mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( "Expected exception to be thrown on empty input" , expectedException , assertThrows ( YourException . class , ( ) -> focalMethod ( "" ) ) )
assertEquals ( "Expected exception to be thrown" , expectedExceptionClass , assertThrows ( expectedExceptionClass , ( ) -> {
assertEquals ( "Expected exception to be thrown on empty JSON" , expectedException , assertThrows ( YourException . class , ( ) -> focalMethod ( ) ) )
assertEquals ( "Expected exception to be thrown" , expectedExceptionClass , assertThrows ( expectedExceptionClass , ( ) -> focalMethod ( ) ) )
assertEquals ( "IllegalArgumentException should be thrown when ipAndPort is null" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> {
assertEquals ( "Expected exception not thrown" , NullPointerException . class , assertThrows ( NullPointerException . class , ( ) -> {
assertEquals ( expectedException , assertThrows ( expectedException . getClass ( ) , ( ) -> parse ( request , tag , session ) ) )
assertEquals ( QuotaSizeLimit . size ( 500L ) , sieveRepository . getDefaultQuota ( ) )
assertThat ( sieveRepository . getQuota ( USERNAME_A ) ) . isEqualTo ( QuotaSizeLimit . size ( 500L ) )
assertThat ( delegatedUserList ) . containsExactlyInAnyOrder ( BOB , ANDRE )
assertThat ( delegationStore ) . containsOnly ( expected )
assertEquals ( HttpStatus . OK_200 , ? ? ? )
assertEquals ( HttpStatus . OK_200 , ? ? ? statusCode )
assertEquals ( HttpStatus . CONFLICT_409 , response . getStatusCode ( ) )
assertEquals ( "username_with_domain" , users . get ( 0 ) . get ( "username" ) )
assertThat ( allowedFroms , hasItem ( "user@example.com" ) )
assertThat ( allowedFroms , contains ( aliasAddress ) )
assertEquals ( HttpStatus . CONFLICT_409 , response . getStatusCode ( ) )
assertEquals ( "username" , users . get ( 0 ) . get ( "username" ) )
assertEquals ( QuotaCountLimit . UNLIMITED , ? ? ? )
assertEquals ( HttpStatus . NO_CONTENT_204 , given ( ) . body ( "42" ) . put ( QUOTA_DOMAINS + "/" + FOUND_LOCAL . name ( ) + "/" + COUNT ) . then ( ) . statusCode ( ) )
assertEquals ( QuotaCountLimit . UNLIMITED , ? ? ? )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertNull ( deadLetters . getEvent ( SERIALIZED_GROUP_A ) )
assertThat ( actual . size ( ) , is ( expectedSize ) )
assertThat ( deadLetters . store ( groupA , EVENT_1 ) . block ( ) ) . hasSize ( 1 )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertEquals ( - 1 , maxQuotaManager . getQuota ( userQuotaRootResolver . forUser ( BOB ) ) )
assertEquals ( 42 , maxQuotaManager . getQuota ( userQuotaRootResolver . forUser ( BOB ) . key ) . getCount ( ) )
assertEquals ( 42 , maxQuotaManager . getMaxQuota ( userQuotaRootResolver . resolveQuotaRoot ( key ) ) . getSize ( ) )
assertEquals ( QuotaCountLimit . count ( 0 ) , maxQuotaManager . getMaxMessage ( userQuotaRootResolver . forUser ( BOB ) ) )
assertEquals ( QuotaSizeLimit . size ( 0 ) , maxQuotaManager . getMaxStorage ( userQuotaRootResolver . forUser ( BOB ) ) )
assertEquals ( ".csv" , getFileUrl ( ) . substring ( getFileUrl ( ) . lastIndexOf ( "." ) ) )
assertEquals ( "expectedFileName" , file . getName ( ) )
assertEquals ( Stage . EXPORTING , getStage ( ) )
assertEquals ( Stage . EXPORTING , testee . getStage ( ) )
assertEquals ( Stage . COMPLETE , getStage ( ) )
assertEquals ( - 1 , quotaCount ( quotaCount ) )
assertEquals ( < expected value > , quotaSize . quotaSize  ( ) )
assertThat ( actual . size ( ) ) . isEqualTo ( 1 )
assertThrows ( MailboxException . class , ( ) -> block ( mono ) )
assertThrows ( MailboxException . class , ( ) -> block ( next ) )
assertEquals ( "name1" , mailQueueItem . getMail ( ) . getName ( ) )
assertThat ( dequeuedItemNames ) . hasSize ( expectedSize )
assertEquals ( mail , testee . getMail ( ) )
assertEquals ( 0 , mailQueueFactory . getQueue ( queueName ) . size ( ) )
assertEquals ( mailQueueFactory . createQueue ( NAME_1 ) , getQueue ( MailQueueName . of ( NAME_1 ) ) )
assertEquals ( 0 , mailQueueFactory . getQueue ( queueName ) . size ( ) )
assertEquals ( getQueue ( NAME_1 ) , getQueue ( NAME_2 ) )
assertNotNull ( schemeValue )
assertEquals ( "Unknown HostScheme ' '" , exception . getMessage ( ) )
assertEquals ( 0 , mailQueue . getSize ( ) )
assertEquals ( 1 , getManageableMailQueue ( ) . getSize ( ) )
assertEquals ( 2 , getSizeShouldReturnMessageCountWhenSeveralMails ( ) . getManageableMailQueue ( ) . getSize ( ) )
assertEquals ( 0 , getManageableMailQueue ( ) . size ( ) )
assertThat ( getManageableMailQueue ( ) . size ( ) ) . isEqualTo ( 1 )
assertEquals ( 1 , getManageableMailQueue ( ) . size ( ) )
assertEquals ( 3 , getManageableMailQueue ( ) . browse ( ) . size ( ) )
assertEquals ( "name2" , items . peek ( ) . getName ( ) )
assertEquals ( "name1" , mailQueueItem . getMail ( ) . getName ( ) )
assertEquals ( firstCreation , secondCreation )
assertEquals ( "name1" , mailQueueItem . getMail ( ) . getName ( ) )
assertEquals ( queue1 , queue2 . get ( ) )
assertEquals ( "name" , mail . getName ( ) )
assertEquals ( null , DocumentId . fromString ( "" ) )
assertEquals ( new DocumentId ( "arbitraryString" ) , ? ? ? )
assertNotNull ( block ( mono ) )
assertThat ( selectedEnqueuedMails ) . hasSize ( expectedSize )
assertEquals ( Duration . ofMinutes ( 20 ) , actual . getSliceWindow ( ) )
assertEquals ( TaskManager . Status . COMPLETED , taskManager . getExecutionDetails ( id ) . getStatus ( ) )
assertEquals ( TaskManager . Status . FAILED , taskManager . getExecutionDetails ( id ) . getStatus ( ) )
assertTrue ( tasks . isEmpty ( ) ) ; // <AssertPlaceHolder>
assertEquals ( 0 , taskManager . listCancelled ( ) . size ( ) )
assertEquals ( 0 , taskManager . listCancelRequested ( ) . size ( ) )
assertEquals ( Task . Result . COMPLETED , task2 . getResult ( ) )
assertEquals ( "Unknown HostScheme 'null'" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) ) . getMessage ( ) )
assertThat ( taskExecutionDetails . collect ( Collectors . toList ( ) ) ) . containsOnlyElementsOf ( expected )
assertThat ( taskManager . getExecutionDetails ( taskId ) . getStatus ( ) , Matchers . equalTo ( TaskManager . Status . CANCELED ) )
assertThat ( receivedEventsFirst ) . hasSize ( expectedSize )
assertEquals ( "Expected exception to be thrown" ,  < ExceptionClassName > . class , assertThrows (  < ExceptionClassName > . class , ( ) -> ? ? ? empty ( ) . taskAggregate ( ) ) )
assertThat ( aggregate . getAdditionalInformation ( ) ) . isEqualTo ( olderAdditionalInformation )
assertThat ( taskExecutionDetails ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertEquals ( 0 , testee . getProbability ( "a" ) )
assertEquals ( "a" , testee . streamOfSingleDistributionMap ( ) . findFirst ( ) . get ( ) )
assertEquals ( hasVirus , < focalMethodCall >  )
assertEquals ( hasVirus , < focalMethodCall >  )
assertThat ( messageMoveEvent . isEventOnSpamMailbox ( ) ) . isFalse ( )
assertThat ( messageMoveEvent . isEventOnSpamMailbox ( ) ) . isTrue ( )
assertThat ( messageMoveEvent . isEventOnSpamMailbox ( ) ) . isFalse ( )
assertThat ( messageMoveEvent . isMessageMovedOutOfSpamMailbox ( ) ) . isFalse ( )
assertThat ( messageMoveEvent . isMessageMovedOutOfSpamMailbox ( ) ) . isFalse ( )
assertEquals ( true , ? ? ? )
AssertPlaceHolder = "assertFalse(messageMoveEvent.isMovedOutOfSpamMailbox());"
assertThat ( mailet . requiredProcessingStateShouldReturnVirusProcessor ( ) ) . isEqualTo ( "virus" )
assertThat ( mailet . requiredProcessingState ( ) ) . isEqualTo ( ProcessorState . REJECTED )
assertEquals ( "spam" , mailet . getState ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( hasVirus , analysisResult . hasVirus ( ) )
assertEquals ( false , analysisResult . hasVirus ( ) )
assertEquals ( 0 , result . getHits ( ) )
assertEquals ( "expectedValue" , result . getRequiredHits ( ) )
assertEquals ( "Expected result" , expectedValue , actualValue )
assertEquals ( "SpamAssasinMailet" , ? ? ? mailet . getName ( ) )
assertEquals ( TestBusFactory . class . getName ( ) , System . getProperty ( BusFactory . BUS_FACTORY_PROPERTY_NAME ) )
assertNotNull ( bus . getExtension ( BusApplicationContext . class ) . getBean ( "cxf" ) )
assertEquals ( mockHandler , m . getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
assertEquals ( mockHandler , m . getProperty ( "com.ibm.xml.xlxp.escapeHandler" ) )
assertEquals ( EnumTest . class , method . getDeclaringClass ( ) )
assertEquals ( text , decodedText )
assertEquals ( "com.example" , packageName )
assertEquals ( "" , getPackageName ( className ) )
assertEquals ( "expectedPackageName" , packageName )
assertThat ( packageName , is ( notNullValue ( ) ) )
assertEquals ( "expectedPackageName" , packageName )
assertEquals ( "/foo%2Fz.txt" , s )
assertEquals ( value , urlDecode ( value ) )
assertEquals ( "ß",  rlUtils. u rlDecode( e ncoded) )
ex . printStackTrace ( )
assertEquals ( "dummy" , System . getProperty ( "java.io.tmpdir" ) )
assertEquals ( ISO88591 , cs )
assertEquals ( "" , cs )
assertEquals ( "ISO-8859-1" , cs )
assertEquals ( charset , cs )
assertEquals ( "http://com.example.ws" , tns )
assertEquals ( result , getResetOutValue ( result , cache ) )
assertEquals ( method , ? ? ? )
assertEquals ( "expectedValue" , getName ( ) )
assertNotNull ( getBinding ( ) )
assertEquals ( "[message:sequenceNumber:timestamp]" , toString ( event ) )
assertEquals ( "[expected value]" , "<actual value>" )
assertEquals ( sayHi , dr . getName ( ) )
assertEquals ( XMLStreamConstants . START_DOCUMENT , reader . getEventType ( ) )
assertThat ( reader . getLocalName ( ) , equalTo ( "Body" ) )
assertEquals ( input , output )
assertEquals ( "<foo xmlns=\"http://example.com/\"><bar xmlns=\"\"/></foo>" , out . toString ( ) )
assertNotNull ( e )
assertNotNull ( exception )
assertNotNull ( rex )
assertEquals ( "Hi Bob!" , response )
assertEquals ( "Hi Sam" , response )
assertEquals ( "java.lang.String" , c1 . getName ( ) )
assertEquals ( null , url )
assertEquals ( null , url )
assertNull ( url )
AssertPlaceHolder
assertEquals ( true , con1 . isBound ( ) )
assertEquals ( connectionSet , con1 . getCon ( ) )
assertEquals ( null , get ( key ) )
assertEquals ( writer , mc . getLogWriter ( ) )
assertEquals ( s , mc . getSubject ( ) )
assertEquals ( ri , mc . getConnectionRequestInfo ( ) )
re . getLinkedException ( ) == null
assertNull ( re . getLinkedException ( ) )
AssertPlaceHolder = "assertNotNull(getLinkedException());"
assertEquals ( rai , mci . getResourceAdapter ( ) )
assertEquals ( "exception expected" , re . getMessage ( ) )
assertEquals ( "exception expected" , re . getMessage ( ) )
assertSame ( mci . createManagedConnection ( null , null ) , unboundMC )
assertEquals ( "http://localhost:9000/soap" , cri . getAddress ( ) )
assertEquals ( mockHandler , handler . getNext ( ) )
assertEquals ( method , getMethod ( testTarget , op ) )
assertEquals ( "org.apache.hello_world_soap_http.GreeterBean" , endpoint . getServiceClassName ( ) )
assertEquals ( 1 , actual . size ( ) )
assertEquals ( Collections . singleton ( new Timed ( "timed2" ) ) , actual )
assertEquals ( Collections . emptySet ( ) , actual )
assertNotNull ( unwrap ( clazz ) )
assertNotNull ( unwrap ( clazz ) )
assertNotNull ( unwrap ( HttpTracing . class ) )
assertNotNull ( unwrap ( HttpTracing . class ) )
assertEquals ( "Hi Sam!" , response )
assertEquals ( "Hi Sam!" , response )
assertNotNull ( getPhase ( ) )
assertEquals ( conduit , setupCorbaConduit ( false ) )
assertEquals ( ref , ? ? ? )
assertEquals ( endpoint , conduit . getTarget ( ) )
assertEquals ( conduit , ? ? ? )
assertEquals ( endpoint , conduit . getTarget ( ) )
assertEquals ( "String" , stringValue )
assertEquals ( "WString" , wstringValue )
assertEquals ( ulongValue , ul )
assertEquals ( "String" , s )
assertEquals ( "String" , s )
assertEquals ( new QName ( "http://foo.org" , "test" ) , mock . getName ( ) )
assertEquals ( "test" , focalMethod ( ) )
assertEquals ( "http://foo.org" , getNamespaceURI ( "test" ) )
assertEquals ( "abcdef" , mock . getText ( ) )
assertEquals ( "abcd" , pointer [ 0 ] )
assertEquals ( org . omg . CORBA . ARG_IN . value , mode )
assertEquals ( "TestWString" , value )
assertNotNull ( oe )
assertNotNull ( soapMessage . getContent ( Exception . class ) )
assertNotNull ( nsc )
assertEquals ( "urn:cxf" , action )
assertEquals ( "" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "Channa Doll" , sholder . value )
assertEquals ( "reflection" , boing )
assertEquals ( "expectedURI" , uri )
assertEquals ( sb , expectedSimpleBean )
assertEquals ( "simple" , s )
assertEquals ( "expectedNodeName" , rootElement . getNodeName ( ) )
assertEquals ( MediaType . valueOf ( "Array" ) , invoke ( "Array" , "takeNumber.xml" ) )
assertEquals ( "expectedValue" , h . getSomeValue ( ) )
assertEquals ( correctAnswer , something )
assertEquals ( correctAnswer , something )
assertArrayEquals ( STRING_ARRAY , client . getStringArrayValue ( ) )
assertThat ( out2 . value , is ( "hi" ) )
assertEquals ( "Expected exception not thrown" , DatabindingException . class , e . getClass ( ) )
assertNotNull ( pds )
assertEquals ( objects , readWriteReadRef ( "arrayUrType1.xml" , Object [ ] . class ) )
assertEquals ( 0 , objects . length )
? ? ? assertThat ( typeCreator ) . isNotNull ( ) ; ? ? ?
assertEquals ( new QName ( "urn:foo" , "BadBean" ) , type . getSchemaType ( ) )
this . assertValidBoolean ( "//xsd:simpleType[@name='class']/xsd:restriction" , doc . getDocumentElement ( ) )
assertEquals ( true , config . isDefaultNillable ( ) )
assertEquals ( false , config . getDefaultNillable ( ) )
assertEquals ( 0 , config . getDefaultMinOccurs ( ) )
assertEquals ( 1 , config . getDefaultMinOccurs ( ) )
assertValid ( "//xsd:complexType[@name='getValuesResponse']//xsd:element" + "[@name='return'][@type='xsd:string']" , wsdl )
assertEquals ( SmallEnum . class , type . getTypeCreator ( ) . createType ( SmallEnum . class ) )
assertEquals ( new QName ( "urn:foo" , "BadBean" ) , type . getSchemaType ( ) )
assertEquals ( 0 , lts . size ( ) )
assertEquals ( "somevalue" , db . getUnmarshallerProperties ( ) . get ( "someproperty" ) )
assertEquals ( "org.apache.cxf.jaxb.DatatypeFactory" , Class . forName ( "org.apache.cxf.jaxb.DatatypeFactory" ) . getName ( ) )
assertEquals ( "TestSOAPMessage" , elNode . getTextContent ( ) )
assertEquals ( "GET" , event . getOperationName ( ) )
assertEquals ( "preflight_passed" , event . getType ( ) )
assertEquals ( null , event . getOperationName ( ) )
assertEquals ( "http://localhost:9001/api" , event . getUri ( ) )
assertEquals ( Arrays . asList ( TEST_HEADER_VALUE ) , event . getContextData ( ) . get ( TEST_HEADER_NAME ) )
assertEquals ( "nullTest" , event . getOperationName ( ) )
assertEquals ( "PUT" , event . getOperationName ( ) )
assertEquals ( actual , expected )
assertNull ( actual )
assertNull ( actual . getCause ( ) )
assertNull ( actual )
assertEquals ( 1 , actual . size ( ) )
assertNotNull ( actual . getName ( ) )
assertEquals ( expected , actual )
assertEquals ( actual , expected )
assertNull ( actual )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertNull ( actual )
assertNull ( actual )
assertEquals ( DUMMY_TAG , actual . iterator ( ) . next ( ) )
assertEquals ( DUMMY_TAG , actual . iterator ( ) . next ( ) )
assertEquals ( DUMMY_TAG , actual . iterator ( ) . next ( ) )
assertSame ( resolver2 , resolver )
mc . getContext ( ) == context
assertEquals ( "a=b&c=d" , formToString ( form ) )
assertEquals ( "expectedValue" , a . getHeader ( "name" ) )
assertEquals ( "baz" , xp . getAttributeValue ( "bar" , "attr" ) )
assertEquals ( "barValue" , xp . getNodeTextValue ( "/foo/bar" ) )
assertNotNull ( bar )
assertNotNull ( element )
assertNotNull ( element )
assertNotNull ( xp . getNode ( expression , cls ) )
assertEquals ( bar , getNode ( xp . getDocumentElement ( ) , "http://baz" , "bar" ) )
assertNotNull ( bar )
assertEquals ( "http://baz" , bar . getNamespaceURI ( ) )
assertEquals ( bar , getNode ( xp . getDocumentElement ( ) , "http://baz" , "bar" ) )
assertEquals ( "2" , value )
assertEquals ( "/2" , value . toString ( ) )
assertEquals ( "http://bar" , value . toString ( ) )
assertEquals ( "private=\"foo\",no-cache=\"bar\",no-store,no-transform,must-revalidate,proxy-revalidate,max-age=2,s-maxage=3" , parsed )
assertEquals ( "[test message:1:123456789]" , toString ( event ) )
assertEquals ( false , cc . isNoCache ( ) )
assertEquals ( "[a:b]" , toString ( cc . getPrivateFields ( ) ) )
assertEquals ( "[c,d]" , cc . getNoCacheFields ( ) . toString ( ) )
assertEquals ( retry , retry2 )
assertEquals ( "200" , response . getStatus ( ) )
assertEquals ( HttpStatus . SC_NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( HttpStatus . NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( HttpStatus . SC_NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( "304" , response . getStatus ( ) )
assertEquals ( "200" , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( Arrays . asList ( "b=c; param=c" , "a=b;param=b" ) , values )
assertEquals ( MediaType . valueOf ( "application/json" ) , h . getContentType ( ) )
assertEquals ( "text/plain" , h . getFirst ( "content-type" ) )
assertEquals ( "Expected date header value" , expectedValue , date )
assertEquals ( "expectedValue" , date )
assertEquals ( null , h . getLanguage ( ) )
assertEquals ( "en-US" , h . getLanguage ( ) . toString ( ) )
assertEquals ( "[http://example.com/page1:previous]" , toString ( prevLink ) )
assertEquals ( "http://localhost:8080/resource/1" , link . getHref ( ) )
assertEquals ( "[http://example.com/page1:1:2]" , toString ( prevLink ) )
assertEquals ( "http://example.com/page1" , prevLink . getUri ( ) . toString ( ) )
assertEquals ( "http://localhost:8080/base/relative" , link . getUri ( ) . toString ( ) )
assertEquals ( "/base/path/relative" , link . getUri ( ) . toString ( ) )
assertEquals ( "[A title:1:2021-01-01]" , toString ( prevLink ) )
l . getUri ( ) . equals ( "<http://bar>" )
assertEquals ( "</>" , l . getUri ( ) )
assertEquals ( expected , result )
assertEquals ( rb , ? ? ? )
assertEquals ( eTag , rb . getEntityTag ( ) )
assertEquals ( rb , evaluateAll ( serverDate , null ) )
assertEquals ( "Expected status is not equal to actual status" , expectedStatus , rb . getStatus ( ) )
assertEquals ( rb , expectedResponseBuilder )
assertEquals ( ResponseBuilder . class , rb . getClass ( ) )
assertEquals ( null , getStatus ( ) )
assertEquals ( null , getStatus ( ) )
assertEquals ( null , r . getAllowedMethods ( ) )
assertEquals ( "foo" , eTag )
assertEquals ( "\"foo\"" , eTag )
assertEquals ( "foo" , eTag )
assertEquals ( "\"foo\"" , eTag )
assertEquals ( str , response . getEntity ( ) )
assertEquals ( expected , actual )
assertEquals ( doc . getDocumentElement ( ) , getDocumentElement ( new DOMSource ( responseSource ) ) )
assertSame ( "Wrong entity" , entity , ri . getEntity ( ) )
assertEquals ( bean . get ( ) , header )
assertEquals ( "1234" , ri . getMetadata ( ) . getFirst ( HttpHeaders . ETAG ) )
assertEquals ( "http://localhost:8080" , ri . getMetadata ( ) . getFirst ( HttpHeaders . LOCATION ) )
assertEquals ( "en-US" , ri . getLanguage ( ) )
assertEquals ( MediaType . TEXT_XML , ri . getMediaType ( ) )
assertEquals ( null , builder )
assertNotNull ( response . getEntity ( ) )
assertNotNull ( response . readEntity ( Reader . class , annotations ) )
// <AssertPlaceHolder>
assertEquals ( "Digest" , scheme )
assertEquals ( "[b:null:null]" , toString ( event ) )
assertEquals ( "http://localhost:8080/1/2" , uri . toString ( ) )
assertEquals ( "http://localhost/1/2" , uri . toString ( ) )
assertEquals ( "/{}" , uri . toString ( ) )
assertEquals ( "/{}" , uri . getPath ( ) )
assertEquals ( "/1" , uri . getPath ( ) )
assertEquals ( "/1/2" , uri . getPath ( ) )
assertEquals ( "/2/1" , uri . toString ( ) )
assertEquals ( "/1/2?c=3" , uri . toString ( ) )
assertEquals ( "/1/2?c={c}" , uri . toString ( ) )
assertEquals ( "/%20%20" , uri . toString ( ) )
assertEquals ( "/1/2" , uri . getPath ( ) )
assertEquals ( "/index.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "my/path?qp=value" , uri )
assertEquals ( "my/path?qp=value" , uri )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "http://foo/bar/baz?query=1#fragment" , newUri . toString ( ) )
assertEquals ( "http://bar" , newUri . toString ( ) )
assertEquals ( "/" , newUri . getPath ( ) )
assertEquals ( "/" , newUri . getPath ( ) )
assertEquals ( uri , newUri )
assertEquals ( "bar/foo" , newUri . toString ( ) )
assertEquals ( "/bar/foo" , newUri . getPath ( ) )
assertEquals ( "/bar/foo" , newUri . getPath ( ) )
assertEquals ( "http://bar/foo%20" , newUri . toString ( ) )
assertEquals ( "http://bar?q=a%2Bb%20%2B" , newUri . toString ( ) )
assertEquals ( "" , newUri . getQuery ( ) )
assertEquals ( "http://bar/foo;q" , newUri . toString ( ) )
assertEquals ( "http://bar/foo;q=1%2F2" , newUri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "https://localhost:8080/foo/bar" , newUri . toString ( ) )
assertEquals ( expectedUri , newUri )
assertEquals ( "/newpath" , newUri . getPath ( ) )
assertEquals ( "httppnewpath" , newUri . getPath ( ) )
assertEquals ( null , newUri . getPath ( ) )
assertEquals ( uri , newUri )
assertEquals ( "/foo/bar/foo" , newUri . getPath ( ) )
assertEquals ( "/foo" , newUri . getPath ( ) )
assertEquals ( "foo%25/bar%" , newUri . getPath ( ) )
assertEquals ( "/foo%25/bar%/baz%20" , newUri . getPath ( ) )
assertEquals ( "/foo/bar/foo" , newUri . getPath ( ) )
assertEquals ( "/foo" , newUri . getPath ( ) )
assertEquals ( "/foo%25/bar%25" , newUri . getPath ( ) )
assertEquals ( expectedPath , rawPath )
assertEquals ( expectedPath , rawPath )
assertEquals ( "/bar/baz/blah/" , newUri . getPath ( ) )
assertEquals ( "/bar/baz/blah" , newUri . getPath ( ) )
assertEquals ( "/bar/baz" , newUri . getPath ( ) )
assertEquals ( "/BookStore/" , newUri . getPath ( ) )
assertEquals ( "http://foo/BookStore/updateBook/bar" , newUri . toString ( ) )
assertEquals ( new URI ( "http://foo/bar" ) , newUri )
assertEquals ( null , newUri . getQuery ( ) )
assertEquals ( null , uri . getQuery ( ) )
assertEquals ( "" , newUri . getQuery ( ) )
assertEquals ( "http://foo/bar?p1=nv1" , newUri . toString ( ) )
assertEquals ( "p1=nv1" , newUri . getQuery ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "http://foo/bar?p1=v1" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p1=v1&p2=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p1=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p1=v2&p1=v3" , newUri . toString ( ) )
assertEquals ( null , newUri . getQueryParameters ( ) . get ( "p1" ) )
assertEquals ( "http://foo/bar?p2=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p1=nv1" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p1=nv1&p2=v2" , newUri . toString ( ) )
assertEquals ( null , newUri . getMatrix ( ) )
assertEquals ( "" , newUri . getMatrix ( ) )
assertEquals ( "http://foo/bar;p1=nv1;p2=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar/;p1=nv1" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=v1;p1=v1" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=v1;p2=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=v2,v3" , newUri . toString ( ) )
assertEquals ( "v1%20" , newUri . getMatrixParameters ( ) . get ( "p1" ) . get ( 0 ) )
assertEquals ( null , newUri . getMatrixParameters ( ) . get ( "p1" ) )
assertEquals ( "http://foo/bar;p1=v3;p2=v2?noise=bazzz" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=nv1" , newUri . toString ( ) )
assertEquals ( new URI ( "http://foo/bar;p1=nv1;p2=v2" ) , newUri )
assertEquals ( "http://blah/foo;p1=v1/bar" , newUri . toString ( ) )
assertEquals ( "http://blah/foo/bar" , newUri . toString ( ) )
assertEquals ( "/foo/bar/baz;p1=v1;p2=v2" , newUri . getPath ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . getFragment ( ) )
assertEquals ( expected , uri . getFragment ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , template )
assertEquals ( "/1/2?c={c}" , template )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( - 1 , uri . getPort ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . getScheme ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( uri . toString ( ) , "[expected value]" )
assertEquals ( uriString , uri . toString ( ) )
assertEquals ( "myscheme" , uri . getScheme ( ) )
assertThat ( uri . getQuery ( ) , is ( "foo=v1&foo=v2&foo=v3" ) )
assertEquals ( "foo=v1,v2,v3" , uri . getQuery ( ) )
assertEquals ( "foo=v1&foo=v2&foo=v3" , uri . getQuery ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "Expected IllegalArgumentException to be thrown" , IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> {
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "my/path?p=%250%" , template )
assert template . equals ( "my/path?p=%250%" )
assertEquals ( "my" , uri . getPath ( ) )
assertEquals ( "his/him" , uri . getPath ( ) )
assertEquals ( "his/him" , uri . getPath ( ) )
assertEquals ( "my" , uri . getPath ( ) )
assertEquals ( "my/path/p{d}/my" , uri . toString ( ) )
assertEquals ( "my" , uri . getPath ( ) )
assertEquals ( "/" , uri . getPath ( ) )
assertEquals ( "/" , uri . getPath ( ) )
assertEquals ( "my/day" , uri . getPath ( ) )
assertEquals ( "my/path/p/{d:my/day}" , uri . getPath ( ) )
assertEquals ( "/{}" , uri . getPath ( ) )
assertEquals ( parent , c . getParent ( ) )
assertThat ( names , containsInAnyOrder ( "Singleton" ) )
assertEquals ( 1 , names . size ( ) )
assertEquals ( 1 , names . size ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( false , match )
assertEquals ( "/foo/{var/bar" , ut . getTemplate ( ) )
assertEquals ( "/foo/var}/bar" , ut . getTemplate ( ) )
assertEquals ( "a {id} b" , ut . encodeLiteralCharacters ( false ) )
assertEquals ( "a {digit:[0-9]} b" , ut . encodeLiteralCharacters ( false ) )
assertEquals ( bus , provider . getBus ( ) )
assertEquals ( "image" , readStringFromStream ( ds . getInputStream ( ) ) )
assertEquals ( "Expected output" , expectedOutput , os . toString ( ) )
assertEquals ( "image" , readStringFromStream ( ds . getInputStream ( ) ) )
assertEquals ( "a=a1&b=b1" , result )
assertEquals ( "Félix",  alue)
assertEquals ( "Félix",  ook. g etName( ) )
assertEquals ( "中文", bo o .get N ame())
assertEquals ( p . isWriteable ( Object . class , null , null , null ) , false )
assertNotNull ( p )
assertNotNull ( p )
assertEquals ( p . isReadable ( Object . class , null , null , null ) , false )
assertNotNull ( p )
assertEquals ( MediaType . valueOf ( "text/plain" ) , p . readFrom ( Object . class , null , null , null , null ) )
assertEquals ( helloStringISO88591 , os . toString ( "ISO-8859-1" ) )
assertEquals ( OneShotAsyncExecutor . getInstance ( ) , INSTANCE )
assertSame ( reader , reader2 )
assertSame ( writer , writer2 )
em . getClass ( ) . getName ( ) . equals ( "ExpectedExceptionMapperClassName" )
em . getClass ( ) . getName ( ) . equals ( "com.example.ExceptionMapper" )
assertEquals ( "Expected message body reader to be an instance of StringMessageBodyReader" , StringMessageBodyReader . class , mbr . getClass ( ) )
assertEquals ( mbr . getClass ( ) , CustomBooleanReader . class )
assertNotNull ( mbr )
assertEquals ( mbr . getClass ( ) , MessageBodyWriter . class )
assertNotNull ( s )
assertSame ( StreamSource . class , verifyRead ( p , StreamSource . class ) . getClass ( ) )
assertEquals ( "Expected output" , expectedOutput , s )
assertEquals ( "TheBook2" , b2 . getName ( ) )
assertEquals ( b , b2 )
assertEquals ( "TheBook2" , b2 . getName ( ) )
assertEquals ( "TheBook2" , b2 . getName ( ) )
assertEquals ( b , b2 )
assertEquals ( "PUT" , getHttpMethodValue ( m ) )
assertEquals ( "expected" , encodePartiallyEncoded ( "input" , true ) )
assertEquals ( "expectedValue" , encodePartiallyEncoded ( "inputValue" , true ) )
assertEquals ( expected , encodePartiallyEncoded ( encoded , query ) )
assertEquals ( value , urlDecode ( value ) )
assertEquals ( "file:/c:/abc/def/images/subdir/image.png" , c . toString ( ) )
assertEquals ( urlEncode ( "test" ) , "test" )
assertEquals ( ":@!$&'()*+,;=-._~" , str )
assertEquals ( "expectedValue" , pathEncode ( "inputValue" ) )
assertEquals ( URLEncoder . encode ( value , StandardCharsets . UTF_8 . name ( ) ) , urlEncode ( value ) )
assertNotNull ( urlDecode ( value , enc ) )
assertEquals ( urlDecode ( value , StandardCharsets . UTF_8 . name ( ) , true ) , "<expected value>" )
assertEquals ( "http://localhost:8080/bar/foo" , u . toString ( ) )
assertEquals ( "http://localhost:8080/bar/foo" , u . toString ( ) )
assertEquals ( "1.1" , id . getId ( ) )
helmId . getId ( )
assertEquals ( 0.0f , f , 0.0f )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( 0L , c . getB ( ) )
assertEquals ( "Expected address is not equal to actual address" , expectedAddress , application . getAddress ( ) )
assertEquals ( "Expected address is not equal to actual address" , expectedAddress , application . getAddress ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( expeced , e . getMessage ( ) )
assertEquals ( binding , endpoint . getBinding ( ) )
assertEquals ( target , object )
AssertPlaceHolder
assertEquals ( false , server . isStarted ( ) )
assertEquals ( false , server . isStarted ( ) )
assertNotNull ( serverFB )
assertEquals ( "Did not throw exception" , e . getMessage ( ) )
assertEquals ( "Did not throw expected exception" , WebServiceException . class , assertThrows ( WebServiceException . class , ( ) -> {
assertEquals ( "Did not throw expected exception" , WebServiceException . class , e . getClass ( ) )
assertEquals ( WebServiceException . class , assertThrows ( WebServiceException . class , ( ) -> {
assertEquals ( "http://www.w3.org/2003/05/soap/bindings/HTTP/" , seviceImpl . getBindingID ( ) )
assertValid ( "/s:Envelope/s:Body/s:Fault/faultstring[text()='I blame Hadrian.']" , response )
assertNotNull ( response )
assertEquals ( HTTPBinding . HTTP_BINDING , disp . getBinding ( ) . getBindingID ( ) )
assertEquals ( SOAPBinding . SOAP11HTTP_BINDING , disp . getBinding ( ) . getBindingID ( ) )
assertEquals ( true , pi . handleMessage ( message ) )
assertEquals ( resourceName , ret )
assertEquals ( "Operation" , event . getOperationName ( ) )
assertNoFault ( response )
assertNoFault ( response )
info . getWsdlLocation ( ) . equals ( getWsdlLocation ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
AssertPlaceHolder = "assertEquals(dir, f.getParent());"
assertEquals ( "http://localhost/Hello" , server . getDestination ( ) . getAddress ( ) )
assertEquals ( "Hello, yo!" , result )
assertEquals ( info , assembler . getModelMbeanInfo ( AnnotationTestInstrumentation . class ) )
assertEquals ( "John Smith" , val )
assertEquals ( 50 , result )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( 1 , headers . size ( ) )
assertEquals ( "http://foo/bar+%2B;a=value+%20?b=bv+%2B" , u . toString ( ) )
assertEquals ( "http://foo/*" , u . toString ( ) )
assertEquals ( "http://foo/*" , u . toString ( ) )
assertEquals ( "http://localhost/somepath" , u . toString ( ) )
assertEquals ( "http://foo/**" , u . toString ( ) )
assertNull ( wc . query ( "_wadl" ) )
assertEquals ( "" , wc . getCurrentURI ( message ) . getQuery ( ) )
assertEquals ( ClientConfiguration . class , wc . getConfiguration ( ) . getClass ( ) )
assertEquals ( "http://foo" , wc . getCurrentURI ( message ) . toString ( ) )
assertThat ( wc . getHeaders ( ) . getAuthorization ( ) ) . isEqualTo ( auth )
assertEquals ( "en_CA" , wc . getHeaders ( ) . getLanguage ( ) )
assertEquals ( "IllegalStateException is expected" , e . getMessage ( ) )
assertEquals ( "expectedResult" , result )
assertEquals ( "Expected exception message" , "Expected message" , ex . getMessage ( ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertEquals ( "Expected ModelAndView to be null" , null , controller . service ( request , response ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( json , "{\"createdAt\":\"" + date . toString ( ) + "\"}" )
assertEquals ( "<?xml version=\"1.0\" encoding=\"utf-8\"?><AegisTestBean><boolValue>true</boolValue><strValue>hovercraft</strValue></AegisTestBean>" , xml )
assertEquals ( "<?xml version=\"1.0\" encoding=\"utf-8\"?><AegisTestBean><boolValue>true</boolValue><strValue>hovercraft</strValue></AegisTestBean>" , xml )
assertEquals ( "{\"a\":{}}" , str )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( "{\"url\":\"http://cxf\",\"id\":123}" , bos . toString ( ) )
assertEquals ( "{\"url\":\"http://cxf\",\"id\":123}" , bos . toString ( ) )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( true , p . isIgnoreNamespaces ( ) )
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( "{\"name\":\"CXF\",\"pages\":125}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( "" , s . trim ( ) )
assertEquals ( "{\"name\":\"a\",\"id\":\"b\"}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( "[{\"name\":\"a\",\"value\":\"b\"}]" , s )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "{\"id\":333}" , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( book , p . readFrom ( Book2 . class , null , Book2 . class . getAnnotations ( ) , MediaType . APPLICATION_JSON_TYPE , null , new ByteArrayInputStream ( s . getBytes ( ) ) ) )
assertEquals ( "myCallback" , message . get ( Message . QUERY_STRING ) . split ( "=" ) [ 1 ] )
assertEquals ( "[message:1:123456789]" , toString ( ( SimpleEvent ) message . getContent ( ) ) )
assertEquals ( "[expected value]" , toString ( message . getContent ( OutputStream . class ) ) )
assertEquals ( "[expected value]" , toString ( message . getContent ( OutputStream . class ) ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( "a=b" , exp )
assertEquals ( null , getCondition ( ) )
assertEquals ( "a=b&a=b1" , exp )
assertEquals ( "a=b&c=d" , exp )
assertEquals ( "a=b&a=b2&c=d&f=g" , exp )
assertEquals ( "aFrom=1&aTill=3" , exp )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertNull ( getCondition ( ) )
assertEquals ( "" , query ( ) )
assertEquals ( "expectedValue" , ret )
assertEquals ( 123.5 , Double . parseDouble ( ret ) , 0.001 )
assertEquals ( "foo" , ret )
assertEquals ( d , ret )
assertThat ( ret , is ( "expected value" ) )
assertEquals ( "foo" , ret )
assertNotEquals ( "expectedValue" , ret )
assertNotEquals ( 123.5 , ret )
assertNotEquals ( "foo" , ret )
assertNotEquals ( "foo" , d )
assertThat ( ret , greaterThan ( "abc" ) )
assertThat ( ret , is ( lessThan ( "abc" ) ) )
assertThat ( ret , lessThanOrEqualTo ( "abc" ) )
assertThat ( ret , greaterThanOrEqualTo ( "abc" ) )
assertThat ( ret , greaterThan ( 25.0 ) )
assertThat ( ret , greaterThan ( 25 ) )
assertThat ( ret , lessThan ( 25.333 ) )
assertThat ( ret , is ( lessThanOrEqualTo ( 0.0 ) ) )
assertThat ( ret , is ( equalTo ( "foo" ) ) )
assertThat ( ret ) . isEqualTo ( "foo" )
assertThat ( ret , is ( "foo" ) )
assertNotNull ( ret )
assertNotNull ( ret )
assertNotNull ( ret )
assertNotNull ( ret )
assertThat ( ret , is ( "foo" ) )
assertThat ( ret , is ( "foo" ) )
assertThat ( ret , is ( notNullValue ( ) ) )
assertThat ( ret , is ( notNullValue ( ) ) )
assertThat ( ret , anyOf ( greaterThan ( 20 ) , lessThan ( 10 ) ) )
assertThat ( ret , anyOf ( greaterThan ( 20 ) , lessThan ( 10 ) ) )
assertThat ( ret , is ( equalTo ( "plonk" ) ) )
assertThat ( ret , is ( greaterThan ( 20 ) ) )
assertThat ( ret , is ( equalTo ( "expectedValue" ) ) )
assertEquals ( "aaa" , ret )
assertEquals ( "foo" , ret )
assertThat ( ret , equalTo ( expectedValue ) )
ret , equalTo  ( "baz" )
assertEquals ( "foo" , ret )
assertEquals ( "baz" , ret )
assertEquals ( "baz" , ret )
assertNotNull ( SearchConditionBuilder . instance ( ) )
assertNotNull ( result )
// suggested assertion: assertEquals(DEFAULT_LANGUAGE, instance().getLanguage())
assertEquals ( "description" , place . getCondition ( ) . getDescription ( ) )
assertEquals ( "description" , room . getCondition ( ) . getFeatures ( ) . getDescription ( ) )
assertEquals ( expectedSql , sql )
assertEquals ( "myitem" , job . getItemName ( ) )
assertEquals ( "id=lt=10" , jpa . getQuery ( ) )
assertNotNull ( ldap )
assertEquals ( "name==ami*;level=gt=10" , ldap )
assertEquals ( "name==ami*,level=gt=10" , ldap )
assertNotNull ( ldap )
assertEquals ( "(name==test,level==18);(name==test1,level!=19)" , ldap )
assertEquals ( "SELECT * FROM table WHERE name='test'" , sql )
assertEquals ( "SELECT * FROM table WHERE NAMES.name = 'test'" , sql )
assertEquals ( "SELECT * FROM table WHERE NAMES='test'" , sql )
assertThrows ( NullPointerException . class , ( ) -> extract ( null ) )
assertEquals ( "Expected exception message" , expectedMessage , cs . toCompletableFuture ( ) . get ( ) )
assertEquals ( "defaultValue" , client . myDefaultMethod ( false ) )
assertEquals ( IOException . class , assertThrows ( IOException . class , ( ) -> client . myDefaultMethod ( true ) ) )
? ? ? assertEquals ( expectedValue , actualValue )
assertEquals ( "Hello" , getContentText ( ) )
assertEquals ( null , jwk1 . asMap ( ) . get ( JsonWebKey . RSA_PUBLIC_EXP ) )
thumbprint = "expectedThumbprint"
assertNotNull ( thumbprint )
assertNotNull ( thumbprint )
assertEquals ( "expectedThumbprint" , thumbprint )
assertEquals ( "expectedThumbprint" , thumbprint )
assertEquals ( "expectedThumbprint" , thumbprint )
assertEquals ( xLength , 32 )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertNotNull ( jwsConsumer . getExpiryTime ( ) )
assertEquals ( "expectedValue" , < AssertPlaceHolder >  )
assertEquals ( "expectedAlgorithm" , jws . getAlgorithm ( ) )
assertEquals ( tokenKey , cat . getTokenKey ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , t . getExpiresIn ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( new OAuthDataProviderImpl ( ) , handler . getDataProvider ( ) )
assertEquals ( "newSecret" , savedClient . getClientSecret ( ) )
assertEquals ( c . getClientId ( ) , c2 . getClientId ( ) )
assertEquals ( "Expected exception message" , "Exception expected" , ex . getMessage ( ) )
assertEquals ( "Invalid timestamp" , ex . getMessage ( ) )
assertEquals ( OutboundSseEventImpl . BuilderImpl . class , sse . newEventBuilder ( ) . getClass ( ) )
assertThrows ( Exception . class , ( ) -> {
assertEquals ( "Hello, finally! 5000" , greetMeLater ( 5000 ) )
assertEquals ( "expectedResponseType" , resp . getResponseType ( ) )
assertEquals ( "expectedResponseType" , resp . getResponseType ( ) )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
assertEquals ( factory , bus . getExtension ( JettyHTTPServerEngineFactory . class ) )
assertEquals ( "expectedValue" , response )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
AssertPlaceHolder = "assertNotNull(factory);"
assertNotNull ( get ( key ) )
assertNotNull ( get ( key ) )
assertEquals ( null , get ( "key" ) )
assertNotNull ( get ( key ) )
assertEquals ( null , get ( key ) )
assertNotNull ( conduit )
assertNotNull ( conduit )
assertEquals ( "POST" , message . get ( "http.redirect.allowed.verbs" ) )
assertEquals ( "[Expected Message]" , "<Actual Message>" )
assertEquals ( desiredStyleSheetPath , styleSheetPath )
assertEquals ( OutputStream . class , os . getClass ( ) )
assertEquals ( "java:/comp/TransactionManager" , endpoint . getJndiTransactionManagerName ( ) )
assertEquals ( "expectedValue" , config . getMessageSelector ( ) )
assertEquals ( outMessage , destMessage )
assertEquals ( "Principal in SecurityContext should be" , "testUser" , securityContext . getUserPrincipal ( ) . getName ( ) )
assertEquals ( true , destination . isMultiplexCapable ( ) )
assertEquals ( "Principal in SecurityContext should be" , "testUser" , ctx . getUserPrincipal ( ) . getName ( ) )
assertEquals ( TEST_VALUE , messageHeaders . getProperty ( org . apache . cxf . message . Message . RESPONSE_CODE ) )
assertEquals ( null , provider . getContinuation ( ) )
assertEquals ( 5000 , cw . getSuspendTime ( ) )
assertEquals ( userObject , cw . getObject ( ) )
assertEquals ( "jms://" , endpoint . getJmsVariant ( ) )
assertEquals ( "test" , endpoint . getJndiTransactionManagerName ( ) )
assertEquals ( TEST_VALUE , endpoint . getDurableSubscriptionName ( ) )
assertEquals ( JMSConstants . BYTE_MESSAGE_TYPE , jmsMessage . getJMSType ( ) )
assertEquals ( 1 , added )
assertEquals ( 1 , added )
assertEquals ( "expectedActionUri" , action )
assertEquals ( "expected SOAPFaultException on invalid MAP" , sfe . getMessage ( ) )
assertNotNull ( doc )
assertNull ( filter . getContent ( ) . get ( 0 ) )
assertEquals ( "Expected PolicyException not thrown." , ex . getMessage ( ) )
assertEquals ( uri , eap . getLocation ( ) )
assertSame ( assertion , eap . getEffectivePolicy ( bfi , null ) . getAssertions ( ) . get ( 0 ) )
assertSame ( assertion , eap . getEffectivePolicy ( bmi , null ) )
assertSame ( assertion , eap . getEffectivePolicy ( boi , null ) . getAssertions ( ) . get ( 0 ) )
assertSame ( assertion , eap . getEffectivePolicy ( ei , null ) )
assertSame ( assertion , eap . getEffectivePolicy ( si , null ) . getAssertions ( ) . get ( 0 ) )
assertEquals ( 2 , ep )
assertEquals ( "abc" , seq . getEndpointIdentifier ( ) )
assertEquals ( EMPTY_SEQUENCE , getSequence ( type ) )
assertSame ( id , proxy . getOfferedIdentifier ( ) )
assertEquals ( control , c )
assertEquals ( URN_UUID + UUID . randomUUID ( ) , generateUUID ( ) )
assertEquals ( ret , expectedHandler )
assertSame ( as , ws . getWrappedService ( ) )
assertEquals ( binding , control . createMock ( SoapBinding . class ) )
assertSame ( null , manager . getDestination ( message ) )
assertSame ( null , manager . getSource ( message ) )
assertEquals ( 0 , manager . getReliableEndpointsMap ( ) . size ( ) )
assertEquals ( null , manager . getReliableEndpointsMap ( ) . get ( e ) )
assertEquals ( name , seq . getSource ( ) . getName ( ) )
assertEquals ( DATA , msgbytes )
assertEquals ( "testRole" , echo . getClass ( ) . getMethod ( "echo" ) . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "Expected action property value" , ConfigurationConstants . ENCRYPTION + " " + ConfigurationConstants . SIGNATURE , wsIn . getProperty ( ConfigurationConstants . ACTION ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getClass ( ) . getMethod ( "echo" ) . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertThat ( service . getInInterceptors ( ) , contains ( inhandler ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( null , ctx . getAuthentication ( ) . getPrincipal ( ) )
assertNotNull ( returnedRepresentation )
assertEquals ( true , result )
assertThrows ( XMLStreamException . class , ( ) -> {
assertEquals ( "mimeAttachment" , part . getName ( ) )
assertEquals ( service . getInterface ( ) , ? ? ? )
assertEquals ( true , received )
assertEquals ( true , received )
assertEquals ( "CN-Example-OU-Test-O-Organization-L-Location-ST-State-C-Country" , convertedName )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . CREATED . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertNotNull ( ret )
assertEquals ( Integer . class , clz )
assertEquals ( int expected , int actual )
assertEquals ( "expectedValue" , s )
assertEquals ( bytes . length , expectedLength )
assertEquals ( bytes . length , expectedLength )
assertEquals ( expected , widgetFromService )
assertEquals ( expected , widgetFromService )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( "/" , getBaseAddress ( m ) )
assertNotNull ( str )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "/books/subresources/books/resume" , getBaseAddress ( m ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 1 , book . getId ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/bookheaders/simple" , address )
assertEquals ( "simple" , book . getId ( ) )
assertEquals ( "simple" , book . getId ( ) )
assertEquals ( "bookId" , book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( 555L , book . getId ( ) )
assertEquals ( "PUT" , wc . getHeaders ( ) . getFirst ( "THEMETHOD" ) )
assertEquals ( "PUT" , wc . getHeaders ( ) . getFirst ( "THEMETHOD" ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "Expected value" , book . getId ( ) )
assertEquals ( 200 , wc . getResponse ( ) . getStatus ( ) )
assertEquals ( 200 , wc . getResponse ( ) . getStatus ( ) )
assertEquals ( 10000000 , WebClient . getConfig ( wc ) . getHttpConduit ( ) . getClient ( ) . getReceiveTimeout ( ) )
assertNotNull ( future )
assertEquals ( "BOOKSTORE" , entity )
assertEquals ( "BOOKSTORE" , entity )
assertEquals ( "Expected exception message" , "Expected exception message" , ex . getMessage ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( book )
assertEquals ( "Patch" , book . getName ( ) )
assertNotNull ( book )
assertEquals ( "Delete" , book . getName ( ) )
assertNotNull ( book . get ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , future . get ( ) . getStatus ( ) )
assertEquals ( "Expected exception message" , expectedMessage , cause . getMessage ( ) )
assertNotNull ( callback . getResult ( ) )
assertEquals ( true , holder . value )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "Delete" , book . getName ( ) )
assertEquals ( "expectedValue" , book . getName ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( b . getId ( ) )
assertEquals ( "bookId" , book . getId ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertNotNull ( cause )
assertNotNull ( cause )
assertEquals ( "relative Redirect is not allowed" , cause . getMessage ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "Intro" , chapter . getTitle ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/allCharsButA-B/:@!$&'()*+,;=-._~" , wc . getCurrentURI ( ) . toString ( ) )
assertEquals ( "application" , wc . getResponse ( ) . getMediaType ( ) . toString ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( "Many spaces" , b . getName ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/object" , endpointAddress )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertNotNull ( client ( proxy ) )
assertEquals ( "12" , book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( null , client ( store ) )
assertEquals ( null , client ( store ) )
assertEquals ( BookStore . class , bean . getResourceClass ( ) )
assertNotNull ( str )
assertNull ( client ( store ) )
assertEquals ( HttpURLConnection . HTTP_UNSUPPORTED_TYPE , urlConnection . getResponseCode ( ) )
assertNotNull ( wc )
assertEquals ( Response . Status . OK . getStatusCode ( ) , store . checkBook ( id ) . getStatus ( ) )
assertNotNull ( wc )
assertEquals ( null , get ( "123" ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( b . getId ( ) )
assertEquals ( "123" , b . getId ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 888 , book . getId ( ) )
assertNotNull ( b . getId ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/books/querycontext/id=ge=123" , address )
assertEquals ( "222" , book . getId ( ) )
assertEquals ( "1" , book . getId ( ) )
assertNull ( store . getEmptyBookNullable ( ) )
assertEquals ( "" , response )
assertEquals ( "1" , b . getId ( ) )
assertEquals ( "bookId" , info . getId ( ) )
assertEquals ( "expectedId" , info . getId ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( null , defaultBook . getContent ( ) )
assertEquals ( 0 , book . getId ( ) )
assertEquals ( "/application/bookstore/uifromconstructor" , response )
assertEquals ( 123 , book . getId ( ) )
assertEquals ( null , client ( proxy ) )
assertEquals ( "Expected header value" , expectedValue , getHeaderString ( "headerName" ) )
assertEquals ( "PropValue" , getHeaderString ( "property" ) )
assertNotNull ( ex )
assertNotNull ( ex )
assertNotNull ( b . getId ( ) )
assertEquals ( getStringFromInputStream ( in ) , getStringFromInputStream ( expected ) )
assertEquals ( "expectedName" , name )
assertEquals ( "application/json" , wc . getResponse ( ) . getMediaType ( ) . toString ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "" , book . getId ( ) )
XMLAssert . assertXpathEvaluatesTo ( "this is the book title" , "/root/text()" , source . getNode ( "/root" ) )
assertEquals ( "this is" , book . getName ( ) )
assertEquals ( "this is the book title" , book . getName ( ) )
assertEquals ( "expectedValue" , source . getValue ( ) )
assertNotNull ( get ( 444 ) )
assertNotNull ( get ( "ssn" ) )
assertNotNull ( get ( "ssn/book" ) )
assertEquals ( 444L , book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( 1000000 , conduit . getClient ( ) . getReceiveTimeout ( ) )
assertEquals ( 1000000 , conduit . getClient ( ) . getReceiveTimeout ( ) )
assertEquals ( null , get ( key ) )
assertEquals ( "expectedStatus" , type . getStatus ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( books . size ( ) , < expectedSize >  )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , wc . getResponse ( ) . getStatus ( ) )
assertEquals ( 404 , wc . getResponse ( ) . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "book" , book . getXsiType ( ) )
assertEquals ( "SuperBook2" , book2 . getName ( ) )
assertEquals ( "SuperBook2" , book2 . getName ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "[expected value]" , toString ( event ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( expectedChapter , c )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "expectedStatus" , response . getStatus ( ) )
assertString ( suspend , "SUSPENDED" )
wc . get ( )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "bookType" , "expectedValue" , book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "expectedStatus" , localProxy . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "New" , response . getId ( ) )
assertEquals ( 124L , response . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "book" , book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( 12345L , book . getId ( ) )
assertEquals ( "expectedValue" , book . getName ( ) )
assertEquals ( "file name with semicolon" , partContent )
assertThat ( interceptor . getResponseStream ( ) , is ( nullValue ( ) ) )
assertEquals ( "http://localhost:" + PORT + "/one/bookstore/request" , path )
assertEquals ( "http://localhost:" + PORT + "/two/bookstore/request" , path )
assertEquals ( "expectedValue" , value )
assertEquals ( "Welcome to the website!" , welcome )
assertEquals ( "http://localhost:" + PORT + "/webapp/filter/resources/servlet/config/query?name=a" , endpointAddress )
assertEquals ( "Welcome to the application" , welcome )
assertEquals ( "redirectedBook" , book . getName ( ) )
assertEquals ( "expectedValue" , getStringFromInputStream ( in ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "BookNotFoundFault" , ex . getMessage ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "http://localhost:" + PORT + "/кирилица", wc.get C rr e ntURI().toStr i n g ())
assertEquals ( "expectedValue" , data )
assertEquals ( 100000000L , wc . getConfig ( ) . getHttpConduit ( ) . getClient ( ) . getReceiveTimeout ( ) )
assertEquals ( 100000000L , wc . getConfig ( ) . getHttpConduit ( ) . getClient ( ) . getReceiveTimeout ( ) )
assertEquals ( 100000000L , wc . getConfig ( ) . getHttpConduit ( ) . getClient ( ) . getReceiveTimeout ( ) )
assertEquals ( null , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( 246 , holder . value . getId ( ) )
assertNotNull ( text )
assertNotNull ( text )
assertNotNull ( text )
assertNotNull ( text )
assertEquals ( "Hello World" , text )
assertEquals ( "123" , b . getId ( ) )
assertEquals ( "123" , b . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertThrows ( ValidationException . class , ( ) -> service . echoBook ( new BookWithValidation ( null , "123" ) ) )
assertThrows ( ConstraintViolationException . class , ( ) -> service . echoBook ( new BookWithValidation ( null , "123" ) ) )
assertEquals ( "Validation failure expected" , ex . getMessage ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "Expected SOAPFaultException" , expectedExceptionMessage , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertEquals ( "expected exception message" , e . getMessage ( ) )
assertEquals ( "expected exception message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "http://cxf.apache.org/greeter_control/types" , nd . getAttributes ( ) . getNamedItem ( "namespace" ) . getNodeValue ( ) )
assertEquals ( false , created . value )
assertEquals ( o , null )
assertEquals ( "Bonjour John!" , g . greetMe ( "John" ) )
assertEquals ( "Hello World" , resp )
assertEquals ( "[<echo/>:0:0]" , toString ( event ) )
assertEquals ( wsdl . toString ( ) , wsdlLocator . getBaseURI ( ) )
assertEquals ( 0 , bytes )
assertEquals ( "Invalid response message" , "<AssertPlaceHolder>" , sfe . getMessage ( ) )
assertEquals ( "test" , cause . getMessage ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , conn . getResponseCode ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , conn . getResponseCode ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , conn . getResponseCode ( ) )
cert . assertNotNull ( )
assertNull ( cert )
assertNotNull ( cert )
cert should  be null .
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "book" , text )
assertEquals ( "book" , book . getName ( ) )
assertEquals ( "book" , text )
assertEquals ( "book" , text )
assertNotNull ( at )
assertEquals ( "http://localhost:" + pubPort + "/oauth2Public/token" , wc . getCurrentURI ( ) . toString ( ) )
assertNotNull ( at )
assertNotNull ( at )
assertNotNull ( at )
assertEquals ( "expectedValue" , at . getTokenKey ( ) )
assertNotNull ( ex )
assertNotNull ( at )
assertNotNull ( ex )
assertEquals ( Response . Status . FORBIDDEN . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertNotNull ( book . getId ( ) )
assertThat ( ex . getResponse ( ) . getStatus ( ) , is ( equalTo ( 403 ) ) )
assertNotNull ( book . getId ( ) )
assertEquals ( Response . Status . FORBIDDEN . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertThat ( ex . getResponse ( ) . getStatus ( ) , is ( equalTo ( 403 ) ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( Response . Status . UNAUTHORIZED . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "125" , book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "125" , book . getId ( ) )
assertNotNull ( book )
assertNotNull ( book )
assertEquals ( "Patch" , book . getName ( ) )
assertNotNull ( book )
assertNotNull ( book . get ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , future . get ( ) . getStatus ( ) )
assertEquals ( "java.net.UnknownHostException" , cause . getClass ( ) . getName ( ) )
assertTrue ( callback . getResult ( ) )
assertEquals ( true , holder . value )
assertNotNull ( client . get ( String . class ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( "Expected reply is not correct" , "Hello" , reply )
assertEquals ( "Hello FooBar" , reply )
assertEquals ( "Hello Chris" , greeting )
assertThrows ( Exception . class , ( ) -> greeter . greetMe ( "Bad guy" ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 1 , 1 )
assertEquals ( HelloContinuation . class , helloPort . getClass ( ) )
assertNotNull ( client . get ( String . class ) )
assertEquals ( 1 , 1 )
assertEquals ( "http://schemas.xmlsoap.org/wsdl/soap/http" , ep . getBinding ( ) . getBindingID ( ) )
assertEquals ( "qualified" , ef )
assertEquals ( "Hi John!" , greeter . sayHi ( "John" ) )
assertNotNullExtensions ( bus )
assertNotNull ( bus . getExtension ( WSDLManager . class ) )
assertEquals ( wsdlUrl , getClass ( ) . getResource ( "/wsdl/hello_world.wsdl" ) )
assertEquals ( "expectedValue" , resp )
assertEquals ( "Hello Betty" , output )
assertEquals ( "dummy" , sendNotification ( new testnotification . SendNotification ( ) ) )
assertEquals ( true , numResp . isEven ( ) )
assertEquals ( bytes , image . value )
assertEquals ( bytes , image . value )
assertEquals ( "[expected value]" , toString ( event ) )
assertEquals ( "[Hello World:1:123456789]" , toString ( event ) )
assertEquals ( expected , e . getMessage ( ) )
assertEquals ( "Expected result" , "Actual result" , echo )
assertEquals ( "expected exception message" , ex . getMessage ( ) )
assertEquals ( "Hello" , retObj )
assertEquals ( "expectedValue" , port . sayHello ( "inputValue" ) )
assertEquals ( expectedValue , port . doubleIt ( numberToDouble ) )
assertEquals ( expectedValue , port . doubleIt ( numberToDouble ) )
assertEquals ( "Expected output" , "Actual output" , output )
assertEquals ( "Frank is unauthorized" , ex . getMessage ( ) )
assertEquals ( INPUT , output )
assertEquals ( "Frank is unauthorized" , ex . getMessage ( ) )
assertEquals ( INPUT , output )
assertEquals ( "Frank is unauthorized" , ex . getMessage ( ) )
assertNotEquals ( "Result = 0" , port . addNumbers ( 0 , 0 ) )
assertThrows ( AddNumbersException . class , ( ) -> port . addNumbers ( 1 , 2 ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Result = 3" , port . addNumbers ( 1 , 2 ) )
assertEquals ( "Result = 3" , port . addNumbers ( 1 , 2 ) )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "v1" , value )
assertEquals ( "v2" , value )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( "[message:sequenceNumber:timestamp]" , toString ( event ) )
assertEquals ( "[Hello:1:123456789]" , toString ( new SimpleEvent ( "Hello" , 1 , 123456789 ) ) )
assertEquals ( "[header:true:true:INOUT:OUT]" , annotation . toString ( ) )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( tsSource , toolSpec . getTsSource ( ) )
assertEquals ( "expectedValue" , getStreamRefName ( "streamId" ) )
assertEquals ( "expectedValue" , getStreamRefName ( "streamId" ) )
assertEquals ( "test" , result . getParameter ( "n" ) )
assertEquals ( "arg1" , result . getParameter ( "name" ) )
assertEquals ( "test" , result . getParameter ( "n" ) )
assertNotNull ( commandLineParser . parseArguments ( "-r unknown" ) )
assertEquals ( "" , getDetailedUsage ( ) )
jType = "string"
assertEquals ( "com.iona.test/A.java" , fileWriter . getRoot ( "com.iona.test/A.java" ) )
assertEquals ( w . getClass ( ) , OutputStreamWriter . class )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "Did not find foo element" , "foo" , el . getAttribute ( "name" ) )
assertEquals ( null , error )
assertEquals ( null , error )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "[expected message:expected sequence number:expected timestamp]" , toString ( event ) )
assertEquals ( "Expected output" , expectedOutput , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "JavaToWS Error: " , ex . toString ( ) )
assertEquals ( "test.wsdl" , getLocation ( "test.wsdl" ) )
assertEquals ( "JavaToWS Error: <expected exception message>" , getStdOut ( ) )
assertEquals ( "JavaToWS Error: java.lang.IllegalArgumentException: Invalid argument: a.ww" , getStdOut ( ) . trim ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "demo.xjb" , gen . getJAXBCustFile ( outputdir ) . getName ( ) )
assertEquals ( Style . Simple , factory . discoverStyle ( ) )
assertEquals ( Style . Jaxws , discoverStyle ( ) )
assertEquals ( Style . Simple , factory . discoverStyle ( ) )
assertEquals ( oldCP , newCP )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdErr ( ) )
assertEquals ( "" , getStdErr ( ) )
assertEquals ( "" , getStdErr ( ) )
assertEquals ( "" , getStdErr ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdErr ( ) )
assertEquals ( "Expected error message" , "Error message" , getStdErr ( ) )
assertEquals ( "Expected error message" , "Error message" , getStdErr ( ) )
assertEquals ( expected , e . getMessage ( ) )
assertEquals ( "[expected value]" , toString ( def ) )
assertEquals ( "Should throw ToolException." , ToolException . class , e . getClass ( ) )
assertEquals ( "hello world" , writer . toString ( ) )
assertEquals ( "hello world" , writer . toString ( ) )
assertNotNull ( wrex . getMessage ( ) )
assertEquals ( 1 , processor . getGeneratedFiles ( ) . size ( ) )
assertNotNull ( clz )
assertEquals ( cls , classLoader . loadClass ( "org.apache.cxf.w2j.hello_world1.Greeter" ) )
assertEquals ( clz , ClassLoaderUtils . loadClass ( className , ProviderFactory . class ) )
assertEquals ( 1 , 1 )
assertEquals ( boolA , boolB )
assertEquals ( "Expected message" , "WRAPPER_STYLE_NAME_COLLISION" , msg . getMessage ( ) )
assertEquals ( "The cxf918/bug2.wsdl should not have generated code" , e . getMessage ( ) )
assertEquals ( clz , org . mytest . ObjectFactory . class )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "org.apache.intfault.BadRecordLitFault" , webFault . name ( ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( greeterServer , classLoader . loadClass ( "org.apache.cxf.w2j.hello_world_soap_http.Greeter_SoapPort_Server" ) )
assertEquals ( Holder . class , method . getParameterTypes ( ) [ 0 ] )
assertEquals ( "org.apache.cxf.w2j.hello_world_soap_http.Greeter" , clz . getName ( ) )
assertEquals ( "org.apache.cxf.w2j.hello_world_soap_http.types.ActionType" , clz . getName ( ) )
assertEquals ( expected , e . getMessage ( ) )
assertEquals ( addr1 , addr2 )
assertEquals ( "Expected KafkaException to be null" , null , getAndClearFailure ( ) )
assertEquals ( 0 , delay )
assertEquals ( 0 , delay )
assertEquals ( "Expected string representation" , "<expected value>" , versions . toString ( ) )
assertEquals ( "337.0.1" , versions . toString ( ) )
assertEquals ( null , get ( nodeId ) )
assertNotNull ( exception . getCause ( ) )
assertNull ( reporters )
assertEquals ( "org.apache.kafka.common.metrics.JmxReporter" , props . getProperty ( AdminClientConfig . METRIC_REPORTER_CLASSES_CONFIG ) )
assertEquals ( defaultFeatureMetadata ( ) , metadata )
assertNotNull ( e . getCause ( ) )
assertEquals ( 1 , result . values ( ) . size ( ) )
assertEquals ( "expectedValue" , result . values ( ) . get ( tpr2 ) )
assertEquals ( 0 , result . all ( ) . get ( ) )
The suggested  assertion line is ` TestUtils . assertFutureThrows  ( result . all ( ) , Errors . UNKNOWN_SERVER_ERROR . exception ( ) . getClass ( ) ) ; ` . This line  asserts that  the future  returned by ` result . all  ( ) ` throws an exception  of type ` Errors . UNKNOWN_SERVER_ERROR . exception  ( ) . getClass ( ) ` when it  is completed .
assertEquals ( 0 , result . all ( ) . get ( ) )
TestUtils . assertFutureThrows ( result . all ( ) , Errors . UNKNOWN_SERVER_ERROR . exception ( ) . getClass ( ) )
TestUtils . assertFutureThrows ( result . all ( ) , Errors . REQUEST_TIMED_OUT . exception ( ) . getClass ( ) )
assertEquals ( Errors . REQUEST_TIMED_OUT . exception ( ) . getClass ( ) , TestUtils . assertFutureThrows ( result . all ( ) ) . getClass ( ) )
assertEquals ( Errors . NONE , result . error ( ) )
assertEquals ( AllBrokersStrategy . LOOKUP_KEYS , builder . build ( ) . topics ( ) )
assertEquals ( partitionResults , result . completedKeys . get ( groupKey ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "test-group" , config . getProperty ( ConsumerConfig . GROUP_ID_CONFIG ) )
assertEquals ( false , getBoolean ( "defaultThrowOnUnsupportedStableFlag" ) )
assertEquals ( "Invalid group instance id" , ce . getMessage ( ) )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertNotNull ( assignors )
assertEquals ( 1 , assignors . size ( ) )
assertThat ( subscription , is ( notNullValue ( ) ) )
assertEquals ( false , props . getProperty ( ConsumerConfig . AUTO_INCLUDE_JMX_REPORTER_CONFIG ) )
assertNotNull ( consumer )
assertThat ( consumer . position ( tp0 ) ) . isEqualTo ( 20L )
assertEquals ( 0L , metricValue ( ) )
assertEquals ( 0 , metricValue ( ) )
assertEquals ( deserializedObject . getClass ( ) , EndTransactionMarker . class )
assertEquals ( deserializedObject , Serializer . deserialize ( fileName ) )
assertEquals ( 3 , assignment . get ( topic ) . size ( ) )
assertEquals ( Collections . singletonList ( tp ( topic , 0 ) ) , assignment . get ( consumerId ) )
assertEquals ( 2 , assignment . get ( consumerId ) . size ( ) )
assertEquals ( initialTime + 10L , endTime )
assertEquals ( false , received . get ( ) )
assertEquals ( 100L , coordinator . offsets ( ) . get ( t1p ) . offset ( ) )
assertEquals ( 100L , offsets . get ( t1p ) . offset ( ) )
assertEquals ( Long . MAX_VALUE , time . timer ( Long . MAX_VALUE ) . timeoutMs ( ) )
assertEquals ( "Expected group authorization error" , e . getMessage ( ) )
assertEquals ( 0 , threadCount )
assertThat ( groupMetadata ( ) . generationId ( ) ) . isEqualTo ( 2 )
assertEquals ( "Expected exception to be propagated" , metadataException , e )
assertEquals ( expectedValue , actualValue )
assertEquals ( false , future . isDone ( ) )
assertEquals ( Errors . UNKNOWN_TOPIC_OR_PARTITION , topicMetadata . get ( topicName ) . get ( 0 ) . error ( ) )
assertEquals ( offsetsToExpect , fetcher . offsets ( ) )
assertEquals ( 2L , client . prepareResponse ( listOffsetResponse ( tp0 , Errors . NONE , ListOffsetsRequest . EARLIEST_TIMESTAMP , 2L ) ) . size ( ) )
assertEquals ( 2L , client . offsets ( ) . get ( tp0 ) . offset ( ) )
assertEquals ( expectedOffsets , actualOffsets )
assertEquals ( 0 , fetcher . getBeginningOffsets ( ) . size ( ) )
assertEquals ( 5L , client . prepareResponse ( listOffsetResponse ( tp0 , Errors . NONE , ListOffsetsRequest . LATEST_TIMESTAMP , 5L ) ) . getOffsets ( tp0 ) . get ( 0 ) . offset ( ) )
assertEquals ( 5L , client . offset ( tp0 ) )
assertEquals ( expectedOffsets , ? ? ? )
assertEquals ( 0 , fetcher . getEndOffsets ( ) . size ( ) )
assertEquals ( false , props . getProperty ( ProducerConfig . AUTO_INCLUDE_JMX_REPORTER_CONFIG ) )
assertThat ( props . getProperty ( ProducerConfig . METRIC_REPORTER_CLASSES_CONFIG ) ) . isEqualTo ( "org.apache.kafka.common.metrics.JmxReporter" )
assertEquals ( "Invalid key type" , e . getMessage ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertEquals ( 50L , future . offset ( ) )
assertEquals ( null , transactionManager . coordinator ( CoordinatorType . TRANSACTION ) )
assertNotNull ( transactionManager . lastError ( ) )
assertEquals ( transactionManager . coordinator ( CoordinatorType . TRANSACTION ) , null )
assertEquals ( expectedHosts , actualHosts )
assertIsFailed ( future )
assertEquals ( expected , partitionInfo . toString ( ) )
assertEquals ( origTp , deserializedObject )
assertEquals ( topicPartition , deserializedObject )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected IOException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "message" , e . getMessage ( ) )
assertEquals ( config . getImmutableMap ( ) , immutableMap )
assertEquals ( expectedValue , actualValue )
assertEquals ( config . get ( "random" ) , "${test:/foo/bar/testpath:random}" )
assertEquals ( config . getProviders ( ) . size ( ) , 2 )
assertNull ( config . documentationOf ( "someKey" ) )
assertEquals ( null , vals . get ( "a" ) )
assertNotNull ( vals . get ( key ) )
assertEquals ( expectedConfig , config )
assertEquals ( maxSize , listSizeValidator . toString ( ) )
assertEquals ( type , type )
assertEquals ( "hello, value1; goodbye, value2!!!" , data . get ( MY_KEY ) )
assertEquals ( "${test:testPath:missingKey}" , data . get ( MY_KEY ) )
assertEquals ( "${test:testPath:testIndirection}" , data . get ( MY_KEY ) )
assertEquals ( expectedValue , value )
assertEquals ( allFeatures , features . getAllFeatures ( ) )
assertNull ( pool . tryAllocate ( 5 ) )
assertEquals ( type , type2 )
assertThat ( type . getId ( ) ) . isPositive ( )
assertEquals ( position , expectedPosition )
assertEquals ( message , newMessage )
assertEquals ( "Expected exception cause to be null" , null , e . getCause ( ) )
assertEquals ( "Expected exception cause to be null" , null , e . getCause ( ) )
e . getCause ( ) instanceof SomeException
assertEquals ( n1 , n2 )
assertEquals ( 0.0 , measure ( max , config ) , 0.001 )
assertEquals ( 1 , metrics . metrics ( ) . size ( ) )
assertEquals ( 0.0d , p50 . metricValue ( ) )
assertEquals ( max , p50 . metricValue ( ) )
assertEquals ( 1 , hist . getCount ( 0 ) )
assertNull ( selector . disconnected ( ) . get ( node ) )
assertThat ( blockingRequest ( node , big ) , is ( equalTo ( asString ( createSend ( node , big ) ) ) ) )
assertNotNull ( blockingRequest ( node , s ) )
assertNotEquals ( Errors . NONE , error )
assertNull ( exception )
assertSame ( expectedError , actualError )
assertNotNull ( error )
assertThrows ( SchemaException . class , ( ) -> { "<AssertPlaceHolder>" ; } )
assertEquals ( nodeId , this . nodeApiVersions . get ( nodeId ) )
assertEquals ( "foo bar baz" , newFormat . getString ( "field1" ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Missing required field: field2" )
assertEquals ( "Extra data found at the end of the record: field2" , e . getMessage ( ) )
assertEquals ( "foo" , new String ( records . records ( ) . iterator ( ) . next ( ) . value ( ) ) )
assertEquals ( "foo" , read ( path ) )
assertThat ( record . offset ( ) , is ( offset ) )
assertEquals ( ControlRecordType . CURRENT_CONTROL_RECORD_KEY_VERSION , buffer . getShort ( ) )
assertEquals ( ControlRecordType . ABORT , type )
assertEquals ( coordinatorEpoch , deserialized . coordinatorEpoch ( ) )
assertEquals ( 79 , deserialized . coordinatorEpoch ( ) )
assertEquals ( args . getExpected ( ) , copyOf ( args . getActual ( ) ) )
assertEquals ( "Invalid compression type" , e . getMessage ( ) )
assertEquals ( 0 , buffer ( ) . position ( ) )
assertEquals ( "Invalid compression type: ZSTD" , e . getMessage ( ) )
assertEquals ( "Not authorized" , response . error ( ) . getMessage ( ) )
assertEquals ( request , requestBuilder . build ( EnvelopeRequestData . HIGHEST_SUPPORTED_VERSION ) )
assertThat ( request . requireStable ( ) ) . isEqualTo ( requireStable )
assertEquals ( "Invalid request" , msg )
assertEquals ( "Invalid request" , msg )
assertEquals ( header , parsed )
assertEquals ( byteLimit , maxBytes ( byteLimit ) . getMaxBytes ( ) )
assertEquals ( jgr , jgr2 )
assertEquals ( expectedErrorCode , response . errorCode ( ) )
assertEquals ( expectedErrorCode , response . errorCode ( ) )
assertEquals ( "Unsupported version: 2" , exception . getMessage ( ) )
assertEquals ( "Invalid request version" , msg )
assertEquals ( "Invalid request size" , msg )
assertEquals ( "Not authorized" , response . error ( ) . getMessage ( ) )
assertEquals ( KafkaPrincipal . ANONYMOUS , principal )
assertNotNull ( e . getCause ( ) )
assertEquals ( expected , handler . getAccessTokenRetriever ( ) . getAccessToken ( ) )
assertEquals ( "an ID" , jaasConfigs . get ( CLIENT_ID_CONFIG ) )
assertEquals ( "Expected cause to be instance of PrivilegedActionException" , PrivilegedActionException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( maxTokens , privateCredentials . size ( ) )
assertEquals ( expectedMesssage , message )
assertNotNull ( message )
response . extensions ( extensions )
assert . assertEquals ( expectedToken , message )
assertThat ( message , is ( equalTo ( expectedToken ) ) )
assertEquals ( expected , accessTokenRetriever . retrieve ( ) )
assertEquals ( expected , actual )
assertNotNull ( actual )
assertNull ( actual )
assertNull ( actual )
assertEquals ( expectedResponse , response )
assertEquals ( "Can't read" , ioe . getMessage ( ) )
assertEquals ( "Can't read" , ioe . getMessage ( ) )
assertEquals ( expected , actual )
assertEquals ( "otherSub" , token . getPrincipalName ( ) )
assertNotNull ( extensions )
assertEquals ( credentialToString ( credential1 ) , credentialToString ( credential2 ) )
assertEquals ( sslFactory . getMode ( ) , Mode . SERVER )
assertEquals ( sslFactory , sslEngineFactory ( ) )
assertEquals ( sslConfigsBuilder ( Mode . SERVER ) . createNewTrustStore ( TestUtils . tempFile ( "truststore" , ".jks" ) ) . useClientCert ( false ) . build ( ) . get ( SslConfigs . SSL_ENGINE_FACTORY_CLASS_CONFIG ) , TestSslUtils . TestSslEngineFactory . class )
assertEquals ( "Invalid exception message" , "List key deserializer is already initialized" , exception . getMessage ( ) )
assertEquals ( "Invalid exception message" , "List value deserializer is already initialized" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Expected exception message" )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Expected exception message" )
assertEquals ( writeValue , readValue )
assertEquals ( values [ i ] , buffer . getInt ( i * 4 ) )
assertEquals ( expected , output . array ( ) )
assertEquals ( crc1 . getValue ( ) , crc2 . getValue ( ) )
assertEquals ( crc1 . getValue ( ) , crc2 . getValue ( ) )
assertEquals ( null , get ( "nodeId" ) )
assertEquals ( null , get ( "nodeId" ) )
AssertPlaceHolder = "assertNotNull(multiColl);"
AssertPlaceHolder = "assertNotNull(multiSet);"
output . equals ( "hello" )
assertEquals ( "Expected to get an exception when trying to run a program that does not exist" , e . getMessage ( ) )
assertEquals ( null , caughtException . get ( ) )
assertEquals ( c . getValue ( ) , Murmur2 . hash ( c . getKey ( ) ) )
assertEquals ( 2 , source . position ( ) )
assertEquals ( testContent , readFileAsString ( tempFile . getPath ( ) ) )
assertEquals ( "testing" , schemaBuilder . name ( ) )
assertEquals ( 234 , targetStruct . get ( "field2" ) )
assertEquals ( 42L , target . field ( "id" ) . defaultValue ( ) )
assertEquals ( Schema . Type . INT64 , target . field ( fieldName ) . schema ( ) . type ( ) )
assertEquals ( null , this . nodeApiVersions . get ( nodeId ) )
assertEquals ( null , get ( nodeId ) )
AssertPlaceHolder = "assertEquals(NULL_SCHEMA_AND_VALUE, schemaAndValue);"
AssertPlaceHolder = "assertNull(schemaAndValue);"
assertEquals ( expected , escape ( original ) )
assertEquals ( type , ConverterType . withName ( type . name ( ) ) )
assertEquals ( "expectedValue" , utf8 ( "inputBytes" ) )
assertEquals ( "expectedValue" , utf8 ( bytes ) )
assertEquals ( "expectedValue" , utf8 ( bytes ) )
assertEquals ( StandardCharsets . UTF_16 . name ( ) , converter . getEncoding ( ) )
assertEquals ( "expectedValue" , utf8 ( "inputBytes" ) )
assertEquals ( "Expected value" , "Actual value" )
assertEquals ( "Bad JAAS config is bad" , thrownException . getCause ( ) . getMessage ( ) )
assertThat ( future . isDone ( ) ) . isTrue ( )
assertEquals ( "Numeric" , config . getDecimalFormat ( ) . toPattern ( ) )
assertEquals ( expected , actual )
assertNotNull ( toConnectData ( topic , headers , value ) )
? ? ? assertEquals ( expected , actual ) ; ? ? ?
? ? ? Assert . assertEquals ( expected , actual ) ; ? ? ?
assertEquals ( expected , actual )
assertArrayEquals ( reference . array ( ) , converted . array ( ) )
default SchemaAndValue toConnectData  ( String topic , Headers headers , byte [ ] value ) {
assertArrayEquals ( arrayJson , value )
assertEquals ( expected , ? ? ? mapToConnectStringKeys ( topic , value ) )
assertEquals ( expected , ? ? ? mapToConnectNonStringKeys ( topic , value ) )
assertEquals ( expected , converted )
assertEquals ( expected , converted )
assertNull ( converted )
assertNull ( converted . value ( ) )
assertEquals ( expected , converted . value ( ) )
assertNull ( converted )
assertNull ( converted )
assertNotNull ( toConnectData ( topic , value ) )
assertNotNull ( result )
assertEquals ( expectedAdminProps , connectorAdminProps )
assertEquals ( expectedAdminProps , connectorAdminProps )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertNotNull ( response )
assertEquals ( 1 , callback . call ( ) . size ( ) )
assertEquals ( null , herder . connectorType ( ) )
assertEquals ( ConnectorType . class , herder . connectorType ( ) )
assertEquals ( records , workerTask . toSend )
assertEquals ( 1 , sent . getValues ( ) . size ( ) )
assertNotNull ( metrics ( ) )
assertEquals ( originalSensor , recreatedSensor )
assertNotNull ( reporters )
assertEquals ( 0 , cm . reporters . size ( ) )
assertEquals ( "org.apache.kafka.common.metrics.JmxReporter" , props . get ( CommonClientConfigs . METRIC_REPORTER_CLASSES_CONFIG ) )
assertEquals ( "Invalid connector configuration: Invalid value dangler for configuration transforms: Not a valid transform alias" , e . getMessage ( ) )
assertEquals ( "Invalid connector name" , e . getMessage ( ) )
assertEquals ( "Invalid transformation type: uninstantiable" , e . getMessage ( ) )
assertEquals ( "Invalid transformation type: a" , e . getMessage ( ) )
assertEquals ( "Invalid configuration: Missing required configuration \"transforms.a.magic.number\"" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertEquals ( "Invalid predicate int value" , "84" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
assertEquals ( "Invalid predicate configuration" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( false , executor . awaitTermination ( timeoutMs , TimeUnit . MILLISECONDS ) )
assertEquals ( null , currentState ( ) )
assertEquals ( state , tracker . currentState ( ) )
assertEquals ( "Invalid admin listeners configuration: http://a.b:9999," , ce . getMessage ( ) )
assertEquals ( "Invalid value abc for configuration ssl.client.auth" , ce . getMessage ( ) )
assertEquals ( "dummyHost-1:1234,dummyHost-2:1234" , lookupKafkaClusterId ( config ) )
assertEquals ( null , adminClient . clusterId ( ) )
assertEquals ( "Expected result" , expectedValue , actualValue )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( requestId , result . get ( MY_KEY ) )
assertEquals ( << expected value >> , << actual value >> )
assertEquals ( "Invalid security protocol: abc" , ce . getMessage ( ) )
assertEquals ( null , errorCapture . getValue ( ) )
assertEquals ( "HmacSHA489" , signature . keyAlgorithm ( ) )
assertEquals ( expectedConnectors , callback . getValue ( ) . onCompletion ( null , expectedConnectors ) )
assertNotNull ( clusterDetails ( ) )
assertEquals ( i , - 1 )
assertEquals ( expectedValue , actualValue )
assertEquals ( null , ? ? ? )
assertEquals ( null , ? ? ? )
assertNotNull ( e . getCause ( ) )
assertEquals ( ct , ConnectorType . valueOf ( value . toUpperCase ( Locale . ROOT ) ) )
assertEquals ( expectedConnectorPlugins , actualConnectorPlugins )
assertThat ( actualProps . size ( ) , equalTo ( expectedSslProps . size ( ) ) )
assertEquals ( connectorInfo , createdInfo ( SourceSink . SINK ) )
assertNotNull ( ee . getCause ( ) )
assertThat ( values . get ( buffer ( "key" ) ) , is ( notNullValue ( ) ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "preparing" , props . get ( EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG ) )
assertEquals ( "disabled" , props . get ( EXACTLY_ONCE_SOURCE_SUPPORT_CONFIG ) )
assertEquals ( 0 , store . size ( ) )
assertEquals ( 0 , store . size ( ) )
assertEquals ( 0 , store . size ( ) )
assertEquals ( status , ? ? ? get ( "nodeId" ) )
assertEquals ( TaskStatus . State . RUNNING , store . get ( TASK ) . state )
assertEquals ( status , ? ? ? get ( nodeId ) )
assertEquals ( status , store . get ( nodeId ) )
assertNull ( this . nodeApiVersions . get ( nodeId ) )
assertEquals ( NodeApiVersions . class , get ( nodeId ) . getClass ( ) )
assertEquals ( 1 , writer . flushesInProgress . get ( ) )
assertEquals ( 1 , writer . flushesInProgress . get ( ) )
assertEquals ( 1 , writer . flushesInProgress . get ( ) )
assertEquals ( 0 , flushesInProgress . get ( ) )
assertThat ( writer . flushesInProgress . get ( ) ) . isEqualTo ( 1 )
assertEquals ( 0 , writer . flushesInProgress . get ( ) )
assertEquals ( 1 , writer . flushesInProgress . get ( ) )
assertThat ( testCallback . isCancelled ( ) ) . isTrue ( )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "timeout exception" )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Non retriable" )
assertEquals ( "timeout exception" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "timeout exception" )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( false , created )
assertEquals ( Collections . emptyList ( ) , admin . describeTopics ( Collections . singletonList ( newTopic . name ( ) ) ) )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( Schema . INT64_SCHEMA , transformed . valueSchema ( ) )
assertEquals ( Schema . INT64_SCHEMA , transformed . valueSchema ( ) )
assertEquals ( "foo:int64" , xformKey . configure ( Collections . singletonMap ( Cast . SPEC_CONFIG , "foo:int64" ) ) )
assertEquals ( "foo:int64" , xformKey . configure ( Collections . singletonMap ( Cast . SPEC_CONFIG , "foo:int64" ) ) )
assertNull ( xformed . headers ( ) . lastWithName ( "to-drop" ) )
assertEquals ( expected , xformed . headers ( ) )
assertHeadersNotModified ( headers , xformed . getHeaders ( ) )
assertEquals ( "Field 'nonexistent' does not exist in the schema" , iae . getMessage ( ) )
assertEquals ( value , Collections . singletonMap ( "foo" , Arrays . asList ( "bar" , Collections . singletonMap ( "baz" , Collections . singletonMap ( "lfg" , "lfg" ) ) ) ) )
assertEquals ( null , transformedRecord . value ( ) . get ( "firstNull" ) )
assertHeaders ( expect , xformed . headers ( ) )
assertEquals ( expect , xformed . headers ( ) )
assertHeaders ( expect , xformed . headers ( ) )
return assertPlaceholder
assertThat ( apply ( regex , replacement , topic ) ) . doesNotMatch ( regex )
assertThat ( sinkTopic ) . isEqualTo ( expectedSinkTopic )
assertThat ( sinkTopic ) . isEqualTo ( expectedSinkTopic )
assertEquals ( expected , actual )
assertThat ( sinkTopic , equalTo ( expectedSinkTopic ) )
assertThat ( updatedRecord . valueSchema ( ) . name ( ) ) . isEqualTo ( "foo" )
assertNotNull ( updatedRecord )
assertEquals ( updatedValue , null )
assertNotNull ( record )
assertEquals ( "Field 'not_exist' does not exist in the schema" , actual . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Name may not be empty" , e . getMessage ( ) )
assertEquals ( configs . size ( ) , 1 )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Pattern may not be empty" , e . getMessage ( ) )
assertEquals ( "Invalid regex pattern" , e . getMessage ( ) )
assertEquals ( MetadataVersion . DEFAULT , config . metadataVersion ( ) )
assertEquals ( 0 , clusterInstance . getSocketServers ( ) . size ( ) )
assertEquals ( "Indent must be non-negative" , e . getMessage ( ) )
assertNotNull ( e )
assertEquals ( "PLAIN" , props . get ( "log4j.appender.KAFKA.SaslMechanism" ) )
assertEquals ( "jaas-config" , props . get ( "log4j.appender.KAFKA.ClientJaasConf" ) )
assertEquals ( 5 , getMockKafkaLog4jAppender ( ) . getLogEvents ( ) . size ( ) )
assertEquals ( MetadataVersion . IBP_3_3_IV3 . featureLevel ( ) , manager . metadataVersion ( ) . featureLevel ( ) )
assertEquals ( 100 , nextProducerBlock ( ) . size ( ) )
valid . complete ( curValid )
assertEquals ( expectedProvenance , provenance )
assertEquals ( 0 , writer . getDelta ( ) . size ( ) )
assertEquals ( 0 , writer . records ( ) . size ( ) )
assertEquals ( i . value , value )
assertNotNull ( i )
assertEquals ( state , state2 )
assertThrows ( IllegalArgumentException . class , ( ) -> Instruction . fromValue ( value ) )
assertNotEquals ( recovery . value ( ) , "NoChange" )
assertThat ( acl2 . toBinding ( ) , is ( equalTo ( binding ) ) )
assertEquals ( "expectedValue" , read ( testDirectory . path ( ) ) )
assertEquals ( "clientDnsLookup" , partitionAssignment . toString ( ) )
assertEquals ( "clientDnsLookup" , topicAssignment . toString ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertThat ( maxBytesExceeded ( bytes , maxBytes ) . getMessage ( ) , is ( expectedMessage ) )
assert . assertEquals ( expectedMessage , maxIntervalExceeded ( interval , maxInterval ) . getMessage ( ) )
AssertPlaceHolder = "assertEquals(expectedMessage, metadataVersionChanged(metadataVersion).getMessage());"
assertEquals ( null , this . nodeApiVersions . get ( nodeId ) )
assertEquals ( highWatermark , state . getHighWatermark ( ) )
assertEquals ( snapshotId , context . getLatestSnapshotId ( ) )
assertEquals ( snapshotId , context . getLatestSnapshotId ( ) )
assertEquals ( response . errorCode ( ) , "<expectedErrorCode>" )
assertEquals ( response . errorCode ( ) , "<expectedErrorCode>" )
context . assertSentVoteResponse ( Errors . NONE , epoch , OptionalInt . of ( localId ) , false )
assertEquals ( epoch , context . getVotedCandidateEpoch ( ) )
assertThat ( context . client . scheduleAppend ( epoch + 1 , singletonList ( "a" ) ) ) . isInstanceOf ( IllegalArgumentException . class )
assertEquals ( KafkaRaftClient . MAX_BATCH_SIZE_BYTES , size * 8 )
assertEquals ( currentEpoch - 1 , context . client . getResignedEpoch ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> context . client . resign ( leaderEpoch ) )
assertEquals ( OptionalInt . of ( epoch ) , context . currentClaimedEpoch ( ) )
assertEquals ( topicPartition ( ) , < expectedTopicPartition >  )
testTopicId ( )  { assertEquals ( expectedTopicId , topicId ( ) ) ; }
assertEquals ( 5L , log . getHighWatermark ( ) )
assertEquals ( Arrays . asList ( recordOneBuffer , recordTwoBuffer ) , extractRecords )
assertEquals ( resultOffsetAndEpoch . getOffset ( ) , offset )
assertEquals ( resultOffsetAndEpoch . getOffset ( ) , offset - 1 )
assertEquals ( offset , resultOffsetAndEpoch . getOffset ( ) )
assertEquals ( new ValidOffsetAndEpoch ( Kind . DIVERGING , new OffsetAndEpoch ( 100 , 2 ) ) , resultOffsetAndEpoch )
assertEquals ( ValidOffsetAndEpoch . class , resultOffsetAndEpoch . getClass ( ) )
assertEquals ( 0 , state . transitionToFollower ( 0 , localId ) )
assertEquals ( expectedKind , kind ( ) )
assertEquals ( expectedKind , validOffsetAndEpoch . kind ( ) )
assertEquals ( expectedKind , validOffsetAndEpoch . kind ( ) )
assertEquals ( true , future . isDone ( ) )
assertEquals ( 0 , count . get ( ) )
assertEquals ( apiVersions . length , 3 )
assertSame ( latest , duplicate )
assertEquals ( 0 , consumer . getInfos ( ) . size ( ) )
assertEquals ( "quux contents" , quuxNodde . contents ( ) )
assertEquals ( "" , read ( snapshotFile . getPath ( ) ) )
assertEquals ( metadata , remoteLogSegmentMetadataFromRecord )
assertEquals ( metadataUpdate , metadataUpdateFromRecord )
assertEquals ( partitionDeleteMetadata , partitionDeleteMetadataFromRecord )
assertEquals ( ConsumerGroupState . NOT_RUNNING , streams . state ( ) )
assertThat ( expected . getMessage ( ) ) . isEqualTo ( "Streams never started." )
assertNotNull ( queryMetadataForKey ( "storeName" , "key" , keySerializer ) )
assertEquals ( false , streams . close ( nodeId ) )
assertThat ( streams . close ( nodeId ) ) . doesNotBlock ( )
assertThat ( streams . closeOptions ( ) . timeout ( ) ) . isEqualTo ( Duration . ofMillis ( 10L ) )
assertThat ( streams . closeOptions ( ) . timeout ( ) ) . isEqualTo ( Duration . ZERO )
assertEquals ( expectedBootstrapServers , actualBootstrapServers )
assertEquals ( 1 , consumerConfigs . get ( consumerPrefix ( ConsumerConfig . METRICS_NUM_SAMPLES_CONFIG ) ) )
assertEquals ( "host" , consumerConfigs . get ( "interceptor.statsd.host" ) )
assertNotNull ( consumerConfigs )
assertNotNull ( producerConfigs )
assertEquals ( 1 , props . get ( ConsumerConfig . METRICS_NUM_SAMPLES_CONFIG ) )
assertEquals ( 10 , configs . get ( AdminClientConfig . DEFAULT_API_TIMEOUT_MS_CONFIG ) )
assertEquals ( "10" , props . get ( StreamsConfig . consumerPrefix ( ConsumerConfig . MAX_POLL_RECORDS_CONFIG ) ) )
assertEquals ( "true" , props . get ( StreamsConfig . consumerPrefix ( ConsumerConfig . ENABLE_AUTO_COMMIT_CONFIG ) ) )
assertEquals ( "true" , props . get ( StreamsConfig . consumerPrefix ( ConsumerConfig . ENABLE_AUTO_COMMIT_CONFIG ) ) )
assertThat ( returnedProps . get ( StreamsConfig . consumerPrefix ( ConsumerConfig . MAX_POLL_RECORDS_CONFIG ) ) ) . isEqualTo ( "5" )
assertEquals ( 1 , consumerConfigs . get ( consumerPrefix ( ConsumerConfig . METRICS_NUM_SAMPLES_CONFIG ) ) )
assertNotNull ( consumerConfigs . get ( consumerPrefix ( "interceptor.statsd.host" ) ) )
assertNotNull ( consumerConfigs )
assertEquals ( true , consumerConfigs . get ( ConsumerConfig . ENABLE_AUTO_COMMIT_CONFIG ) )
assertThat ( returnedProps . get ( StreamsConfig . consumerPrefix ( ConsumerConfig . MAX_POLL_RECORDS_CONFIG ) ) ) . isEqualTo ( "5" )
assertEquals ( false , consumerConfigs . get ( "internal.leave.group.on.close" ) )
assertEquals ( false , consumerConfigs . get ( "internal.throw.on.fetch.stable.offset.unsupported.config" ) )
assertNotNull ( nodeApiVersions . get ( nodeId ) )
assertNotNull ( nodeApiVersions . get ( nodeId ) )
assertEquals ( false , consumerConfigs . get ( StreamsConfig . INTERNAL_THROW_ON_FETCH_STABLE_OFFSET_UNSUPPORTED_CONFIG ) )
producerConfigs . containsKey ( "internal.auto.downgrade.txn.commit" )
assertNotNull ( nodeApiVersions . get ( nodeId ) )
assertNotNull ( nodeApiVersions . get ( nodeId ) )
assertEquals ( false , producerConfigs . get ( "internal.auto.downgrade.txn.commit" ) )
config . getString ( "default.builtin.metrics.version" )
assertThat ( producerConfigs . get ( ProducerConfig . ENABLE_IDEMPOTENCE_CONFIG ) ) . isEqualTo ( false )
assertNotNull ( config . defaultTimestampExtractor ( ) )
assertEquals ( expectedOptimizeConfig , actualOptimizedConifig )
assertEquals ( expectedOptimizeConfig , actualOptimizedConifig )
assertEquals ( expectedDefaultStoreType , actualDefaultStoreType )
assertEquals ( expectedDefaultStoreType , actualDefaultStoreType )
config . getLong ( "default.acceptable.recovery.lag" )
assertEquals ( 1 , config . getInt ( "default.num.standby.replicas" ) )
config . getInt ( "max.warmup.replicas" )
config . getLong ( "default.probing.rebalance.interval" )
assertNotNull ( ce . getMessage ( ) )
assertEquals ( "Invalid topology optimization configuration" , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( exception . getMessage ( ) , is ( "Expected exception message" ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Expected exception message" )
assertEquals ( value , config . getString ( TOPOLOGY_OPTIMIZATION_CONFIG ) )
AssertPlaceHolder = "assertTrue(config.getBoolean(" partition . autoscaling . enabled  "));"
assertEquals ( 0L , config . getLong ( "partition.autoscaling.timeout.ms" ) )
assertNotNull ( supplier )
assertEquals ( "" , < AssertPlaceHolder >  )
assertEquals ( "sink-1" , expectedSinkNode . topic ( ) )
assertEquals ( expectedSinkNode . getTopicNameExtractor ( ) , topicNameExtractor )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
assertEquals ( "Expected exception message" , "Expected exception when null passed to duration." , e . getMessage ( ) )
assertEquals ( "Expected exception message is incorrect" , "Expected exception when maximum days passed for duration, because of long overflow" , e . getMessage ( ) )
assertEquals ( "Expected exception message is incorrect." , "Expected exception when null value passed for instant." , e . getMessage ( ) )
assertEquals ( "Expected exception message is incorrect" , "Expected exception when maximum value passed for instant, because of long overflow." , e . getMessage ( ) )
assertEquals ( windowSize , < AssertPlaceHolder >  )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Supplier should not be null" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Retention cannot be negative" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException to be thrown" , "Expected exception message" , e . getMessage ( ) )
assertEquals ( "hi" , new String ( data ) )
assertEquals ( "good" , sysOutPrinter . getOutput ( ) )
assertEquals ( "label: hello, 3, 0" , sysOut . toString ( ) . trim ( ) )
assertEquals ( "hello -> 1" , sysOut . toString ( ) . trim ( ) )
assertEquals ( 2 , topology . describe ( ) . subtopologies ( ) . size ( ) )
assertEquals ( timeDifferenceMs , timeDifferenceMs )
assertEquals ( anyAdvance , advanceMs )
assertEquals ( startMs , < expected value >  )
assertEquals ( timeWindowed , windowed )
assertEquals ( windowed , sessionWindowed )
assertEquals ( "storePrefix" , materializedInternal . queryableStoreName ( ) )
assertEquals ( "globalTable" , table1 . queryableStoreName ( ) )
assertEquals ( null , builder . getTimestampExtractor ( ) )
assertEquals ( new MockTimestampExtractor ( ) , consumed . getTimestampExtractor ( ) )
assertEquals ( null , processorTopology . getTimestampExtractor ( ) )
assertEquals ( new MockTimestampExtractor ( ) , consumed . timestampExtractor )
assertEquals ( "session-store" , table . queryableStoreName ( ) )
assertEquals ( "session-store" , table . queryableStoreName ( ) )
assertEquals ( "storeName" , table . queryableStoreName ( ) )
assertEquals ( "session-store" , table . queryableStoreName ( ) )
assertEquals ( "storeName" , table . queryableStoreName ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , throwable . getMessage ( ) )
assertEquals ( transformer , processor )
assertEquals ( processor , processorSupplier . get ( ) )
assertEquals ( "Predicate should not be null" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Predicate cannot be null" , exception . getMessage ( ) )
assertEquals ( "Predicate cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "valueMapper cannot be null" , exception . getMessage ( ) )
assertEquals ( "valueMapperWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Mapper function cannot be null" , exception . getMessage ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "message" , exception . getMessage ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "flatValueMapper cannot be null" , exception . getMessage ( ) )
assertEquals ( "flatValueMapperWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "Name should not be null" , exception . getMessage ( ) )
assertEquals ( "Name should not be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected NullPointerException to be thrown" , NullPointerException . class , exception . getClass ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "At least one predicate should be provided when branching with named" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Predicate cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "KStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Topic cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Repartition key cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Selector should not be null" , exception . getMessage ( ) )
assertEquals ( "Selector cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Table name should not be null" , exception . getMessage ( ) )
assertEquals ( "Materialized table should not allow null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner should not be null" , "Joiner should not be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join stream cannot be null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner should not be null" , "Joiner should not be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join stream cannot be null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "OtherStream cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner should not be null" , "Joiner should not be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join windows cannot be null" , exception . getMessage ( ) )
assertEquals ( "Join stream cannot be null" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Table join should not allow null table" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joined table should not be null" , exception . getMessage ( ) )
assertEquals ( "Table cannot be null" , exception . getMessage ( ) )
assertEquals ( "Table cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey should not be null" , exception . getMessage ( ) )
assertEquals ( "Joined table cannot be null" , exception . getMessage ( ) )
assertEquals ( "Table cannot be null" , exception . getMessage ( ) )
assertEquals ( "Table cannot be null" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoiner should not be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "name" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Table on left join cannot be null" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Mapper should not be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey cannot be null" , exception . getMessage ( ) )
assertEquals ( "Joiner cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueJoinerWithKey should not be null" , "ValueJoinerWithKey should not be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "NullPointerException expected" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Transformer supplier should not be null" , exception . getMessage ( ) )
assertEquals ( "NullPointerException expected" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "transformer" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerSupplier should not be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "ValueTransformerSupplier should not be null" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "NullPointerException" , exception . getClass ( ) . getSimpleName ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "valueTransformerWithKey" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "valueTransformerWithKey" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerWithKeySupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerWithKeySupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "message" , exception . getMessage ( ) )
assertEquals ( "ValueTransformerSupplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "stateStore" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "message" , exception . getMessage ( ) )
assertEquals ( "NullPointerException should be thrown" , "null array of store names" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Supplier cannot be null" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , throwable . getMessage ( ) )
assertEquals ( expectedResult [ i ] , flushOutDatas [ i ] )
assertEquals ( generatedName , materialized . storeName ( ) )
assertEquals ( storeName , "store-name" )
assertEquals ( storeName , materialized . storeName ( ) )
assertEquals ( StreamsConfig . IN_MEMORY , materialized . storeType ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "should have thrown." , e . getMessage ( ) )
assertEquals ( null , context . getRecordContext ( ) . topic ( ) )
assertEquals ( null , context . getRecordContext ( ) . getTopic ( ) )
assertEquals ( "expectedTopic" , topic ( ) )
assertEquals ( null , context . getRecordContext ( ) )
assertEquals ( dummyPartition , context . partition ( ) )
assertEquals ( expectedPartition , partition ( ) )
assertEquals ( expectedOffset , actualOffset )
assertEquals ( null , context . timestamp ( ) )
assertEquals ( expectedTimestamp , timestamp ( ) )
assertEquals ( expectedHeaders , headers ( ) )
assertEquals ( 0 , context . headers ( ) . size ( ) )
assertEquals ( null , activeTaskCreator . getThreadProducer ( ) )
assertEquals ( null , activeTaskCreator . getTaskProducer ( new TaskId ( 0 , 0 ) ) )
assertEquals ( "Expected exception message" , "Expected message" , thrown . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , thrown . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , thrown . getMessage ( ) )
assertEquals ( null , activeTaskCreator . get ( "nodeId" ) )
assertEquals ( 1 , activeTaskCreator . getTaskProducers ( ) . size ( ) )
assertEquals ( "Expected exception message" , "Expected message" , thrown . getMessage ( ) )
assertEquals ( partitions , numberOfPartitions ( ) )
assertEquals ( 2 , validator . numberOfPartitions ( ) )
assertEquals ( expected , offsets )
assertEquals ( "Error message" , "Expected error message" , e . getMessage ( ) )
assertEquals ( 1 , Security . getProviders ( ) . length )
assertEquals ( ConsumerGroupState . DEAD , state ( ) )
assertEquals ( ConsumerGroupState . CLOSED , state ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 10 , topicConfig . getRetentionMs ( ) )
assertEquals ( properties , Collections . emptyMap ( ) )
assertEquals ( Collections . emptySet ( ) , newlyCreatedTopics )
assertThat ( expected . getCause ( ) ) . isInstanceOf ( TimeoutException . class )
assertEquals ( "processor" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( expectedPattern . pattern ( ) , pattern ( ) . pattern ( ) )
assertEquals ( expectedPattern . pattern ( ) , pattern ( ) . pattern ( ) )
assertEquals ( "topic-\\d" , patternString )
assertEquals ( "topics[A-Z]|.*-\\d" , patternString )
assertEquals ( expectedPattern . pattern ( ) , pattern ( ) . pattern ( ) )
assertEquals ( MockTimestampExtractor . class , processorTopology . source ( "source" ) . timestampExtractor ( ) . getClass ( ) )
assertEquals ( pattern , builder . getPattern ( ) )
assertEquals ( "Name should not be null" , e . getMessage ( ) )
assertEquals ( "Topic and pattern cannot be null" , e . getMessage ( ) )
assertEquals ( "Both topic and pattern cannot be non-null" , e . getMessage ( ) )
assertNotNull ( exception . getCause ( ) )
assertNotNull ( exception . getCause ( ) )
assertEquals ( "" , getFullTopologyDescription ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , expected . getMessage ( ) )
assertEquals ( "Expected exception message" , "Should have thrown IllegalArgumentException" , expected . getMessage ( ) )
assertThat ( thrown . getCause ( ) , is ( exception ) )
assertEquals ( exception , thrown )
assertThat ( thrown . getCause ( ) , is ( exception ) )
assertEquals ( exception , thrown )
assertNotNull ( thrown . getCause ( ) )
assertEquals ( "Source node 'source-1' does not exist in the topology" , exception . getMessage ( ) )
assertEquals ( false , functionCalled . get ( ) )
assertNotNull ( exception . getCause ( ) )
assertNotNull ( exception . getCause ( ) )
assertEquals ( 4 , repartitionTopicConfig . numberOfPartitions ( ) )
assertEquals ( 1.0 , task . state ( ) . closeTaskMetric ( ) , 0.001 )
assertEquals ( ConsumerGroupState . CREATED , task . state ( ) )
assertEquals ( Collections . emptyMap ( ) , stateManager . changelogOffsets ( ) )
assertEquals ( Collections . emptyMap ( ) , stateManager . changelogOffsets ( ) )
assertEquals ( ConsumerGroupState . CLOSED , task . state ( ) )
assertEquals ( ConsumerGroupState . CLOSED , task . state ( ) )
assertNotNull ( thrown . getCause ( ) )
assertEquals ( expectedAssignment , stateConsumer . assignment ( ) )
assertEquals ( expectedNodeApiVersions , get ( nodeId ) )
assertEquals ( 1 , stateConsumer . getRecords ( ) . count ( ) )
assertEquals ( 0 , stateConsumer . getFlushedOffsets ( ) . size ( ) )
assertTrue ( stateConsumer . isClosed ( ) )
assertEquals ( true , stateConsumer . isStoreWiped ( ) )
task . equals ( TaskId . parse ( "1,0" ) )
assertEquals ( TransactionState . UNKNOWN , TaskId . parse ( "namedTopology" ) )
AssertPlaceHolder = "assertTrue(directory.isLocked(taskId));"
assertEquals ( false , version . topologyLock . isLocked ( ) )
version . topologyLock . isLocked ( )
assertEquals ( "Expected LockException to be thrown" , "Expected message" , thrown . getMessage ( ) )
assertEquals ( "state manager failed to close" , thrown . getMessage ( ) )
assertNotNull ( thrown . getCause ( ) )
assertNotNull ( thrown . getCause ( ) )
assertEquals ( "Task is closed" , thrown . getMessage ( ) )
assertEquals ( null , task . currentNode ( ) )
assertNotNull ( thrown . getCause ( ) )
assertEquals ( StreamThread . State . DEAD , thread . state ( ) )
assertEquals ( 1 , internalTopologyBuilder . stateStores ( ) . size ( ) )
assertEquals ( Collections . singleton ( partition ) , createStandbyTask ( ) . partitions ( ) )
assertEquals ( false , storeBuilder . loggingEnabled ( ) )
assertEquals ( null , actual )
assertEquals ( USER_END_POINT , subscriptionInfo . userEndPoint ( ) )
assertEquals ( "KafkaException should be thrown if reference container is not configured" , "Reference container partition assignor is not configured" , expected . getMessage ( ) )
assertEquals ( Long . MAX_VALUE , time . getCurrentTimeMs ( ) )
assertNotNull ( thrown )
assertNotNull ( thrown )
assertNotNull ( thrown )
assertNotNull ( thrown . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , thrown . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , thrown . getMessage ( ) )
thrown . getMessage ( )
assertNotNull ( thrown . getMessage ( ) )
assertNotNull ( thrown . getMessage ( ) )
thrown . getMessage ( )
assertNotNull ( thrown . getMessage ( ) )
assertNotNull ( thrown )
assertEquals ( "KABOOM!" , thrown . getMessage ( ) )
assertThat ( thrown . getMessage ( ) ) . isEqualTo ( "Expected error message" )
assertNotNull ( thrown . getMessage ( ) )
assertEquals ( "KABOOM!" , thrown . getMessage ( ) )
assertEquals ( "KABOOM!" , thrown . getMessage ( ) )
assertEquals ( "KABOOM!" , thrown . getMessage ( ) )
assertEquals ( expectedMessage , thrown . getMessage ( ) )
assertEquals ( AssignorError . INCOMPLETE_SOURCE_TOPIC_METADATA . code ( ) , assignmentErrorCode . get ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected error code not found" , Integer . MAX_VALUE , exception . getErrorCode ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , exception . getMessage ( ) )
assertEquals ( LATEST_SUPPORTED_VERSION , info . version ( ) )
assertEquals ( Long . MAX_VALUE , info . nextRebalanceMs ( ) )
assertEquals ( 0 , info . nextRebalanceMs ( ) )
assertEquals ( 1000L , info . getNextRebalanceTime ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertNull ( get ( nodeId ) )
assertNull ( queue . poll ( time . timer ( Long . MAX_VALUE ) , future ) )
assertEquals ( StandbyTaskAssignor . class , standbyTaskAssignor . getClass ( ) )
assertEquals ( StandbyTaskAssignorFactory . create ( newAssignmentConfigs ( Collections . emptyList ( ) ) ) , StandbyTaskAssignorFactory . create ( ) )
assertEquals ( 2 , sensorKeys . getValues ( ) . size ( ) )
assertEquals ( 1 , sensorKeys . getValues ( ) . size ( ) )
assertEquals ( 1 , sensorKeys . getValues ( ) . size ( ) )
assertEquals ( 1 , sensorKeys . getValues ( ) . size ( ) )
assertEquals ( 1 , sensorKeys . getValues ( ) . size ( ) )
assertEquals ( "Invalid tag: bad-tag" , exception . getMessage ( ) )
assertEquals ( "Invalid tag: bad-tag" , exception . getMessage ( ) )
assertEquals ( 0 , streamsMetrics . metrics ( ) . size ( ) )
assertEquals ( 0 , streamsMetrics . metrics ( ) . size ( ) )
assertEquals ( startTime , captor . getValue ( ) . getValue ( ) , 0.001 )
assertEquals ( null , currentTask . currentTask ( ) )
assertEquals ( 0 , bound . size ( ) )
assertEquals ( bound1 , bound2 )
assertEquals ( bound1 , bound2 )
assertEquals ( bound1 , PositionBound . at ( Position . emptyPosition ( ) ) )
assertEquals ( null , bound1 )
assertEquals ( position1 , position2 )
assertEquals ( position1 , position2 )
assertNotNull ( position )
assertEquals ( position , position )
assertEquals ( validResult , result . getResult ( ) )
AssertPlaceHolder = "assertNull(buildFromEndpoint(null));"
assertNull ( buildFromEndpoint ( "" ) )
assertEquals ( "PersistentKeyValueStore store name cannot be null" , e . getMessage ( ) )
assertEquals ( "Store name should not be null" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "NullPointerException" , e . getMessage ( ) )
assertEquals ( "Capacity must be non-negative" , e . getMessage ( ) )
assertEquals ( "Store name cannot be null" , e . getMessage ( ) )
assertEquals ( "Store name cannot be null" , e . getMessage ( ) )
assertEquals ( "Retention period must be non-negative" , e . getMessage ( ) )
assertEquals ( "Retention period must be non-negative" , e . getMessage ( ) )
assertEquals ( "Window size must be non-negative" , e . getMessage ( ) )
assertEquals ( "Window size must be non-negative" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Retention period cannot be negative" , e . getMessage ( ) )
assertEquals ( "Supplier should not be null" , e . getMessage ( ) )
assertEquals ( "NullPointerException" , e . getMessage ( ) )
assertEquals ( "Supplier should not be null" , e . getMessage ( ) )
assertEquals ( name , inMemoryKeyValueStore ( name ) . name ( ) )
assertEquals ( maxCacheSize , new MemoryNavigableLRUCache ( name , maxCacheSize ) . maxCacheSize ( ) )
assertEquals ( name , persistentTimestampedKeyValueStore ( name ) . name )
assertEquals ( name , "expectedName" )
assertEquals ( expectedContents , store . all ( ) )
assertEquals ( null , store . get ( 2 ) )
assertThrows ( ConcurrentModificationException . class , ( ) -> store . put ( 1 , "one" ) )
assertEquals ( 3L , result )
assertNull ( fetchSession ( key , earliestSessionEndTime , latestSessionStartTime ) )
assertEquals ( null , ? ? ? )
assertEquals ( null , configWithAccessibleCache . blockCache ( ) )
assertEquals ( serializedContext . length , bytes . length - withoutContext . length )
assertEquals ( Arrays . copyOfRange ( bytes , 0 , serializedContext . length ) , serializedContext )
assertEquals ( Arrays . copyOfRange ( bytes , 0 , serializedContext . length ) , serializedContext )
assertEquals ( serializedContext , Arrays . copyOfRange ( bytes , 0 , serializedContext . length ) )
assertEquals ( serializedContext , Arrays . copyOfRange ( bytes , 0 , serializedContext . length ) )
assertEquals ( EndTransactionMarker . class , ? ? ? deserialize ( ? ? ? ) )
assertEquals ( EndTransactionMarker . class , ? ? ? deserialize ( ? ? ? ) )
assertNotNull ( wrapped )
assertEquals ( "there" , store . get ( "hi" ) )
assertEquals ( "there" , store . get ( hi ) )
assertEquals ( "Expected value" , expectedValue , store . get ( hi ) )
assertEquals ( v , store . putIfAbsent ( k , v ) )
assertEquals ( null , ? ? ? )
assertEquals ( world , store . get ( hello ) )
assertEquals ( null , get ( nodeId ) )
assertEquals ( rawThere , store . get ( hi ) )
assertEquals ( rawThere , store . get ( hi ) )
assertEquals ( rawThere , store . get ( hi ) )
assertEquals ( v , store . putIfAbsent ( k , v ) )
assertEquals ( null , ? ? ? )
assertEquals ( rawWorld , store . get ( hello ) )
assertEquals ( null , get ( nodeId ) )
assertEquals ( "value" , stubOneUnderlying . get ( "key" ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( expected , actual )
assertEquals ( "key" , mockedKeyValueIterator . peekNextKey ( ) )
assertEquals ( new KeyValue < > ( "key" , ValueAndTimestamp . make ( "value" , 42L ) ) , mockedKeyValueIterator . next ( ) )
assertEquals ( segment , segments . get ( segmentId ( timestamp ) ) )
assertEquals ( "expectedValue" , segment . toString ( ) )
assertEquals ( null , segments . get ( segmentId ( timestamp ) ) )
assertEquals ( "Metrics scope cannot be null" , e . getMessage ( ) )
assertEquals ( false , iterator . hasNext ( ) )
assertEquals ( false , iterator . hasNext ( ) )
assertEquals ( expected , mergeIterator . next ( ) )
assertEquals ( expectedValue , mergeIterator . next ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertEquals ( expected , mergeIterator . next ( ) )
assertEquals ( mergeIterator . next ( ) , original . next ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertEquals ( expectedValue , mergeIterator . next ( ) )
assertEquals ( expectedValue , mergeIterator . next ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertNotNull ( mergeIterator . peekNextKey ( ) )
assertEquals ( expectedValue , mergeIterator . next ( ) )
assertEquals ( mergeIterator . next ( ) , original . next ( ) )
assertEquals ( expectedKey , mergeIterator . peekNextKey ( ) )
assertEquals ( expectedKey , mergeIterator . peekNextKey ( ) )
assertEquals ( expectedValue , metricValue ( ) )
assertEquals ( VALUE_BYTES , metricValue ( ) )
assertEquals ( 0.0 , metricValue ( ) )
assertEquals ( Collections . singletonList ( KeyValue . pair ( KEY , VALUE ) ) , inner . putAll ( anyObject ( List . class ) ) )
assertEquals ( VALUE_BYTES , metricValue ( ) )
assertEquals ( 0 , metricValue ( ) )
assertNull ( inner . get ( Bytes . wrap ( "a" . getBytes ( ) ) ) )
assertEquals ( VALUE_BYTES , innerStore . get ( WINDOWED_KEY_BYTES ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( expectedValue , metricValue ( ) )
assertNull ( innerStore . fetchSession ( Bytes . wrap ( "a" . getBytes ( ) ) , 0 , Long . MAX_VALUE ) )
assertEquals ( VALUE_AND_TIMESTAMP , metricValue ( ) )
assertEquals ( 0.0 , metricValue ( ) )
assertEquals ( Collections . singletonList ( KeyValue . pair ( KEY , VALUE_AND_TIMESTAMP ) ) , inner . putAll ( anyObject ( List . class ) ) )
AssertPlaceHolder = "assertEquals(VALUE_AND_TIMESTAMP_BYTES, metricValue());"
assertNull ( store . fetch ( Bytes . wrap ( "a" . getBytes ( ) ) , 0 ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( 1.0 , metric . metricValue ( ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertEquals ( 0.0 , metric . metricValue ( ) )
assertNull ( store . fetch ( Bytes . wrap ( "a" . getBytes ( ) ) , 0 ) )
assertEquals ( MurmurHash3 . hash32 ( b , seed ) , c . getValue ( ) )
assertEquals ( null , get ( null ) )
assertEquals ( "Expected value" , read ( file . toPath ( ) ) )
assertEquals ( offsetsToWrite , readOffsets )
assertEquals ( "java.io.IOException" , e . getClass ( ) . getName ( ) )
assertNotNull ( getStore ( streams , param ) )
assertNotNull ( getStore ( streams , param ) )
assertNotNull ( getStore ( streams , param ) )
getStore ( DEFAULT_TIMEOUT , streams , param )
assertEquals ( "Invalid state store exception message" , "Store with partition " + partition + " does not exist" , thrown . getMessage ( ) )
assertNotNull ( getStore ( streams , param ) )
assertEquals ( "Invalid state store exception message" , "The state store, windowStore, may have migrated to another instance." , thrown . getMessage ( ) )
assertNull ( convert ( nullValueRecord . value ( ) ) )
assertEquals ( expectedValue , actualValue )
assertThrows ( ProcessorStateException . class , ( ) -> rocksDBStore . openDB ( tmpContext . appConfigs ( ) , tmpContext . stateDir ( ) ) )
assertEquals ( "A" , retrievedValue )
assertDoesNotThrow ( ( ) -> context . restore ( rocksDBStore . name ( ) , entries ) )
assertEquals ( "Expected exception message" , "NullPointerException" , e . getMessage ( ) )
assertEquals ( "Retention period must be non-negative" , e . getMessage ( ) )
assertEquals ( "Window size must be non-negative" , e . getMessage ( ) )
assertEquals ( "Window size must be smaller than retention period" , e . getMessage ( ) )
assertEquals ( windowedKey , result . getKey ( ) )
assertEquals ( null , serialize ( null , version ) )
assertNull ( deserialize ( topic , new byte [ 0 ] ) )
assertNull ( deserialize ( topic , data ) )
assertEquals ( windowedKey , result . key ( ) )
assertEquals ( 1 , curValid . size ( ) )
assertEquals ( 1 , curValid . size ( ) )
assertEquals ( 1 , curValid . size ( ) )
assertEquals ( ByteBuffer . wrap ( serialized ) , getBytes ( field ) )
assertEquals ( "expectedValue" , sinkTopic )
assertEquals ( curValid , valid . get ( ) )
assertEquals ( "Expected NullPointerException to be thrown" , "NullPointerException" , e . getMessage ( ) )
assertEquals ( "Key serde cannot be null" , e . getMessage ( ) )
assertEquals ( "Value serde cannot be null" , e . getMessage ( ) )
assertEquals ( "Time cannot be null" , e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( null , cache . delete ( key ) )
assertNull ( cache )
assertEquals ( theByte , iterator . peekNextKey ( ) )
assertEquals ( theByte , iterator . peekNextKey ( ) )
assertEquals ( expected , received )
assertNull ( threadCache . get ( namespace , Bytes . wrap ( new byte [ ] { 1 } ) , cleanEntry ( new byte [ ] { 1 } ) ) )
assertEquals ( "name" , store . name ( ) )
assertEquals ( "name" , store . name ( ) )
assertEquals ( "Metrics scope cannot be null" , e . getMessage ( ) )
assertNotNull ( segment )
assertEquals ( "expectedValue" , segment . toString ( ) )
assertEquals ( "name" , store . name ( ) )
assertEquals ( "name" , store . name ( ) )
assertEquals ( false , builder . cachingEnabled ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( windowedKey , result . getKey ( ) )
assertEquals ( windowedKey , result . key ( ) )
assertEquals ( result , windowedKey )
assertEquals ( null , deserialize ( topic , new byte [ 0 ] ) )
assertNull ( deserialize ( topic , data ) )
assertEquals ( serialized , extractStoreWindow . apply ( serialized . get ( ) , 0 ) )
assertEquals ( ByteBuffer . wrap ( extractStoreKeyBytes . apply ( serialized . get ( ) ) ) , getBytes ( windowedKey ) )
assertEquals ( false , builder . cachingEnabled ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( expectedSinglePairMap , parsedMap )
assertEquals ( Collections . emptyList ( ) , adminClient . listTopics ( ) . names ( ) . get ( ) )
assertEquals ( "name" , mockedKeyValueTimestampStore . name ( ) )
assertThrows ( NoSuchElementException . class , outputTopic :: readRecord , "Empty topic" )
assertEquals ( expectedNodeApiVersions , result )
assertEquals ( null , testDriver )
assertThat ( exception . getMessage ( ) , is ( str ) )
assertEquals ( "name" , mockedWindowTimestampStore . name ( ) )
assertEquals ( expectedRecord , testRecord )
assertEquals ( "QtNwvtfVQ3GEFpzOmDEE-w" , adminClient . clusterId ( ) )
assertEquals ( "Expected clusterId to be null" , null , adminClient . getClusterId ( ) )
assertEquals ( "expectedValue" , stream . toString ( ) )
assertEquals ( "Expected output" , expectedOutput , stream . toString ( ) )
assertEquals ( "Unrecognized arguments: --test, test, --topic, Hello-Kafka, --num-records, 5, --throughput, 100, --record-size, 100, --producer-props, bootstrap.servers=localhost:9000" , thrown . getMessage ( ) )
assertEquals ( payload , getBytes ( payload ) )
assertEquals ( "Expected exception message" , "Expected message" , thrown . getMessage ( ) )
assertEquals ( new AgentStatusResponse ( serverStartMs , workerManager . workerStates ( ) ) , status )
assertEquals ( "2022-01-01T00:00:00+00:00" , dateString ( 1640995200000L , ZoneOffset . UTC ) )
assertEquals ( 0 , adminClient . listTopics ( ) . names ( ) . get ( ) . size ( ) )
assertEquals ( existingTopic , tpInfo . get ( 0 ) . name ( ) )
assertEquals ( 2 , adminClient . listTopics ( ) . names ( ) . get ( ) . size ( ) )
assertEquals ( 0 , listTopics ( ) . listings ( ) . get ( ) . size ( ) )
status . getWorkerStates ( ) . size ( )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR , resp . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR , resp . getStatus ( ) )
assertEquals ( expected , materializedTopics )
assertNotNull ( doneFuture )
assertNotNull ( doneFuture . get ( ) )
assertEquals ( null , doneFuture . get ( ) )
assertEquals ( prev , cur )
assertSame ( base , ex . getCause ( ) )
assertSame ( base , ex . getCause ( ) )
assertEquals ( r . getProviderName ( ) , providerName )
assertEquals ( id , getAuthorizable ( new SimplePrincipal ( id ) ) . getID ( ) )
a . hasProperty ( ExternalIdentityConstants . REP_EXTERNAL_PRINCIPAL_NAMES )
assertNotNull ( userManager . getAuthorizable ( principal ) )
assertNotNull ( getAuthorizable ( new SimplePrincipal ( USER_ID . toUpperCase ( ) ) ) )
assertNotNull ( userManager . getAuthorizable ( principal ) )
assertEquals ( LoginException . class , e . getClass ( ) )
assertNotNull ( getAuthInfo ( ) )
assertNotNull ( testUser . getID ( ) )
assertEquals ( null , createSyncedIdentity ( null ) )
assertEquals ( null , getIdentityRef ( null ) )
assertNotNull ( createTestGroup ( ) )
assertEquals ( getTestUser ( ) . getIdentityRef ( ) , ? ? ? )
assertEquals ( null , ref )
assertNotNull ( result )
assertNull ( getExternalGroupFromRef ( ref ) )
assertNotNull ( getExternalGroupFromRefFails ( ) . getName ( ) )
assertEquals ( user . getExternalGroup ( ) , getExternalGroupFromRef ( user . getExternalGroupRef ( ) ) )
assertThat ( a , hasProperty ( propName ) )
assertThat ( a , hasProperty ( propName ) )
assertThat ( a , hasProperty ( propName ) )
assertThat ( a , hasProperty ( propName ) )
assertEquals ( false , gr . isExpired ( ) )
assertEquals ( 0 , gr . getProperty ( DefaultSyncContext . REP_LAST_SYNCED ) . length )
assertEquals ( createTestGroup ( ) . getID ( ) , createTestGroup ( ) . getID ( ) )
assertEquals ( getTestUser ( ) . getIDP ( ) , "local" )
assertEquals ( externalGroup , getAuthorizable ( principal ) )
assertNotNull ( getAuthorizable ( principal ) )
assertEquals ( id , user . getID ( ) )
assertNotNull ( res . getIdentity ( ) )
assertNotNull ( si . getIdentity ( ref ) )
assertEquals ( true , list . isEmpty ( ) )
assertEquals ( true , list . isEmpty ( ) )
assertNull ( info . getUserID ( ) )
assertNotNull ( config . getName ( ) )
assertEquals ( userConfig . getPropertyMapping ( ) , invalidMapping )
assertEquals ( validMapping , userConfig . getPropertyMapping ( ) )
assertEquals ( "getName() should not return null" , expected , actual )
assertEquals ( ctx . getIdp ( ) , idp )
assertNotNull ( id )
assertNull ( getUser ( userId ) )
assertNotNull ( handler . getName ( ) )
assertThat ( t , hasProperty ( "name" ) )
assertNotNull ( getAuthorizable ( principal ) )
assertNotNull ( a )
assertThat ( t , hasProperty ( "name" ) )
assertThat ( t , hasProperty ( "name" ) )
AssertPlaceHolder = "assertThrows(ExternalIdentityException.class, () -> syncContext.syncMembership(externalUser, a, 1));"
assertThat ( t , hasProperty ( "groups" , containsInAnyOrder ( "a" , "aa" , "secondGroup" ) ) )
assertSame ( syncManager , f . get ( factory ) )
assertSame ( idpManager , f . get ( factory ) )
assertEquals ( "Expected syncName to not be null" , syncName , ? ? ? )
assertEquals ( "invalid" , syncMBean . getSyncHandlerName ( ) )
assertEquals ( "Expected idpName to not be null" , idpName , "<AssertPlaceHolder>" )
assertEquals ( "invalid" , syncMBean . getIDPName ( ) )
assertNotNull ( getAuthorizable ( principal ) )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , principals . size ( ) )
assertTrue ( "Exception should be thrown" , assertThrows ( RepositoryException . class , ( ) -> amprincipals . getPrincipals ( authorizable ) ) . getMessage ( ) . contains ( "RepositoryException" ) )
assertEquals ( IDP_INVALID_AM , getTestUser ( ) . getExternalId ( ) )
assertEquals ( false , user . isGroup ( ) )
assertEquals ( false , user . isGroup ( ) )
assertNull ( um . getAuthorizable ( any ( Principal . class ) ) )
assertTrue ( "User should not be a group" , ! user . isGroup ( ) )
assertTrue ( list . isEmpty ( ) )
assertThrows ( RepositoryException . class , ( ) -> {
assertEquals ( validator , provider . getRootValidator ( nsBefore , nsAfter , CommitInfo . EMPTY ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( ref . getId ( ) , gr . getID ( ) )
assertEquals ( "thirdGroup" , gr . getID ( ) )
assertEquals ( ref . getId ( ) , gr . getID ( ) )
assertEquals ( true , gr . exists ( ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertEquals ( getTestUser ( ) . getPrincipal ( ) , "<expectedPrincipal>" )
assertNull ( gr . getPrincipal ( "testPrincipal" ) )
assertNotNull ( n )
assertNotNull ( getPrincipal ( pName ) )
assertEquals ( 0 , principals . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , principals . size ( ) )
assertEquals ( 0 , principals . size ( ) )
principals . isEmpty ( )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , principalNames . size ( ) )
assertEquals ( all . size ( ) , result . size ( ) )
assertEquals ( all . size ( ) + 1 , result . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertNotNull ( externalIdIndex )
assertNotNull ( externalPrincipalNames )
assertEquals ( new PrincipalManagerImpl ( getPrincipalProvider ( root , namePathMapper ) ) , ? ? ? )
assertEquals ( true , < focal method >  . < assertion method > ( ) )
externalUserTree should  have property "test" with value "value"
profile . should ( hasProperty ( "test" ) )
assert g . isMember ( getTestUser ( ) )
assertThat ( externalUserTree , hasProperty ( "id" ) )
assertThat ( externalUserTree , hasProperty ( "jcr:language" ) )
assertEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertTrue ( "Expected group principal name to be 'a'" , gp . getName ( ) . equals ( idp . getGroup ( "a" ) . getPrincipalName ( ) ) )
assertEquals ( 0 , list . size ( ) )
assertTrue ( "Service should be added" , tracker . isServiceAdded ( ref ) )
assertEquals ( "testSH" , ref . getProperty ( PARAM_SYNC_HANDLER_NAME ) )
assertEquals ( 0 , list . size ( ) )
assertTrue ( "Modified service should be tracked" , tracker . isServiceTracked ( ref , service ) )
assertTrue ( "Modified service should have sync handler set" , ref . getSyncHandlerName ( ) . equals ( "testSH" ) )
assertTrue ( "Service should be removed" , tracker . getRemovedServices ( ) . contains ( ref ) )
assertNotNull ( getAuthInfo ( ) )
assertNotNull ( getAuthInfo ( ) )
assertNotNull ( id )
assertNotNull ( getAuthorizable ( principal ) )
assertEquals ( 5 , props . getInitialSize ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( null , keyMapping . get ( convert ( key ) ) )
assertEquals ( authorizable , focalMethodReturnValue )
assertEquals ( null , get ( null ) )
assertNotNull ( getName ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( authenticate ( credentials ) )
assertNotNull ( getIdentity ( ref ) )
assertEquals ( "id" , ref . getId ( ) )
assertEquals ( "id" , ref . getId ( ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertEquals ( null , user )
assertNotNull ( id )
assertNotNull ( id )
assertNull ( group )
assertIfEquals ( "Group members" , TEST_GROUP1_MEMBERS , grp . getDeclaredMembers ( ) )
assertEquals ( expected , Sets . newHashSet ( memberIds ) )
assertEquals ( 0 , memberrefs . spliterator ( ) . getExactSizeIfKnown ( ) )
assertIfEquals ( "Groups" , TEST_USER1_GROUPS , id . getDeclaredGroups ( ) )
assertNotNull ( id . getDeclaredGroups ( ) )
assertEquals ( 0 , Iterables . size ( groupIds ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertNotNull ( config . getName ( ) )
assertNotNull ( config . getName ( ) )
assertEquals ( encodedValue , encodeFilterValue ( value ) )
assertEquals ( encodedValue , encodeFilterValue ( value ) )
assertEquals ( validator , getValidator ( ) )
assertEquals ( validator , validator )
assertEquals ( buffer , lc . getBuffer ( ) )
assertEquals ( IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> validate ( path ) ) )
assertEquals ( false , connection . isConnected ( ) )
assertEquals ( null , connection . lookup ( Dn . ROOT_DSE , SchemaConstants . NO_ATTRIBUTE ) )
assertEquals ( null , connection . lookup ( Dn . ROOT_DSE , SchemaConstants . NO_ATTRIBUTE ) )
assertEquals ( true , connection . isConnected ( ) )
assertNotNull ( id )
assertNotNull ( id . getId ( ) )
assertNotNull ( id )
assertNotNull ( id )
assertNotNull ( id )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( name , parent . getName ( ) )
assertNotNull ( getTree ( selectorName ) )
acPath , isGrantedPath  ( acPath )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( true , list . isEmpty ( ) )
assertNotNull ( effective )
assertNotNull ( ntMgr . getNodeType ( MIX_REP_CUG_MIXIN ) )
assertEquals ( Sets . newHashSet ( MIX_REP_CUG_MIXIN ) , tree . getProperty ( JcrConstants . JCR_MIXINTYPES ) . getValues ( ) )
assertNotNull ( effective )
assertEquals ( 2 , effective . length )
assertEquals ( 0 , effective . length )
AssertPlaceHolder = "assertNotNull(acMgr);"
assertEquals ( null , getPath ( ) )
assertEquals ( SUPPORTED_PATH , cugPolicy . getPath ( ) )
assertEquals ( AccessControlException . class , e . getClass ( ) )
assertSame ( EmptyPermissionProvider . getInstance ( ) , permissionProvider )
assertNotNull ( permissionProvider )
assertNotNull ( defConfig . getParameters ( ) )
assertNotNull ( getName ( ) )
assertEquals ( "/content" , pp . getSupportedPaths ( ) )
cc . getAccessControlManager ( root , NamePathMapper . DEFAULT )
assertEquals ( true , cc . isCugEnabled ( ) )
assertEquals ( "/content" , cc . getSupportedPaths ( ) )
assertEquals ( mock ( MountInfoProvider . class ) , f . get ( cugConfiguration ) )
assertEquals ( 0 , cugConfiguration . getExclude ( ) . size ( ) )
assertEquals ( defaultValue , getConfigValue ( key , defaultValue ) )
assertNotNull ( configuration )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( "rep:CugPolicy" , getTargetNode ( ) . getProperty ( "jcr:primaryType" ) . getString ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertThrows ( IllegalStateException . class , ( ) -> importer . init ( session , root , getNamePathMapper ( ) , true , ImportUUIDBehavior . IMPORT_UUID_CREATE_NEW , new ReferenceChangeTracker ( ) , getSecurityProvider ( ) ) )
assertTrue ( "Tree should exist" , tree . exists ( ) )
assertTrue ( cugPermProvider . getPrivileges ( tree ) . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( ImportBehavior . ABORT , createCugPolicy ( ImportBehavior . ABORT , principals ) )
assertTrue ( "Empty list should be empty" , empty . isEmpty ( ) )
assertEquals ( "" , empty . getPath ( ) )
assertEquals ( "/oak:testPath" , empty . getPath ( ) )
assertEquals ( 1 , cug . getExcludedPrincipals ( ) . size ( ) )
assertNotNull ( cug . getExcludedPrincipals ( ) )
assertEquals ( expected , defaultMountInfoProvider ( ) . getSupportedPaths ( ) )
assertNotNull ( connection )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( "empty" , ? ? ? )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( true , ? ? ? getPrivileges ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( true , bits . isSupported ( p ) )
assertEquals ( true , list . isEmpty ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( connection )
assertNotNull ( connection )
assertThat ( immutableRoot , hasProperty ( "name" ) )
assertEquals ( message , tlp . containsNoCug ( p ) )
assertThat ( tlp . getHiddenTopCugCount ( ) ) . isEqualTo ( 4 )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertSame ( t . getPath ( ) , TreePermission . NO_RECOURSE , tp )
assertEquals ( VersionConstants . JCR_UUID , versionable . getProperty ( VersionConstants . JCR_UUID ) . getValue ( Type . STRING ) )
atp . getTree ( ) . equals ( getTree ( selectorName ) )
assertEquals ( CommitFailedException . class , exception . getClass ( ) )
assertNotNull ( pp )
assertEquals ( PrincipalBasedAccessControlManager . class , acMgr . getClass ( ) )
assertEquals ( PrincipalBasedAccessControlManager . class , acMgr . getClass ( ) )
assertEquals ( exists , tree . exists ( ) )
assertNotNull ( getUserManager ( ) )
assertEquals ( "testUser" , getTestUser ( ) . getUid ( ) )
assertEquals ( getTestSystemUser ( ) , ? ? ? )
assertNotNull ( principal . getName ( ) )
assertEquals ( EMPTY , ConfigurationParameters . of ( new Hashtable < > ( ) ) )
assertEquals ( "testUser" , getTestUser ( ) . getUsername ( ) )
assertNotNull ( getTestSystemUser ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertNotNull ( getValidPrincipal ( oakPath ) )
assertNotNull ( filter )
assertNotNull ( getFilterRoot ( ) )
AssertPlaceHolder = "assertNotNull(filter);"
assertNotNull ( modifiedPath )
assertNotNull ( getTestSystemUser ( ) )
assertEquals ( pm , getPrincipalManager ( ) )
assertSame ( pm , mgrProvider . getPrivilegeManager ( ) )
assertEquals ( pbp , mgrProvider . getPrivilegeBitsProvider ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( type , ( ( TreeTypeAware ) readOnly ) . getType ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( type , ( ( TreeTypeAware ) readOnly ) . getType ( ) )
assertEquals ( 1 , rootState . getChildNodeCount ( REP_PRINCIPAL_POLICY ) )
AssertPlaceHolder = "Assert.assertEquals(AccessControlPolicyIteratorAdapter.EMPTY, mgr.getApplicablePolicies(absPath));"
assertThat ( effective . length , is ( 1 ) )
assertEquals ( AccessControlPolicyIteratorAdapter . EMPTY , ? ? ? )
assertEquals ( "expectedPath" , getPath ( ) )
assertEquals ( null , ? ? ? getParameters ( ) )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
ri . assertNotNull ( )
assertEquals ( ri , pbac . getRepositoryInitializer ( ) )
assertEquals ( 1 , pp . size ( ) )
assertEquals ( securityProvider , pbac . getSecurityProvider ( ) )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( "<expected value>" , getPath ( ) )
assertNotNull ( getOakPath ( validPrincipal ) )
assertEquals ( expectedSize , entries . get ( principalName ) . getSize ( ) )
assertEquals ( expectedSize , entries . get ( principalName ) . getSize ( ) )
assertEquals ( jcrName , mockPropInfo ( jcrName ) . getName ( ) )
assertThat ( tree . getProperty ( REP_PRINCIPAL_POLICY ) ) . isNull ( )
assertEquals ( null , focalMethod ( mockPropertyDefinition ( "jcrName" ) ) )
assertEquals ( NT_REP_PRINCIPAL_POLICY , t . getProperty ( REP_PRINCIPAL_POLICY ) . getValue ( ) . getString ( ) )
assertThat ( hasProperty ( oakPath ) , is ( true ) )
assertEquals ( false , watch . isRunning ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertThat ( policyTree . exists ( ) ) . isTrue ( )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( expectedSize , entries . get ( principalName ) . getSize ( ) )
assertEquals ( RepositoryPermission . EMPTY , testObject . getRepositoryPermission ( ) )
assertEquals ( RepositoryPermission . EMPTY , ? ? ? getRepositoryPermission ( ) )
assertEquals ( RepositoryPermission . EMPTY , testObject . getRepositoryPermission ( ) )
assertEquals ( PrivilegeConstants . JCR_ALL , permissionProvider . getRepositoryPermission ( ) )
assertEquals ( AccessControlException . class , exception . getClass ( ) )
assertNotNull ( applicable )
assertEquals ( 2 , policies . length )
assertEquals ( "expected size is 0" , 0 , acl . size ( ) )
assertTrue ( policy instanceof PrincipalAccessControlList )
assertEquals ( false , mockTree ( false , "name" , "type" ) . exists ( ) )
assertEquals ( "wrongName" , tree . getName ( ) )
assertEquals ( "principalPolicyTree is of wrong type" , expectedType , actualType )
assertEquals ( false , mockTree ( false , "name" , "type" ) . isPrincipalPolicyTreeMissingType ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( false , filter . canHandle ( any ( Set . class ) ) )
assertEquals ( true , filter . canHandle ( any ( Set . class ) ) )
assertEquals ( behavior , ImportBehavior . ABORT )
assertEquals ( "Invalid privilege name should throw AccessControlException" , AccessControlException . class , assertThrows ( AccessControlException . class , ( ) -> privilegeManager . getPrivilege ( INVALID_PRIVILEGE_NAME ) ) )
assertEquals ( false , filter . canHandle ( any ( Set . class ) ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( rootversionTp )
assertEquals ( tp . getTree ( ) , ( ( AbstractTreePermission ) versionTp ) . getTree ( ) )
assertEquals ( tp . getTree ( ) , ( ( AbstractTreePermission ) labelsTp ) . getTree ( ) )
assertEquals ( frozenTp . getTree ( ) , tp . getTree ( ) )
assertThat ( identifiers , containsInAnyOrder ( ds . getAllIdentifiers ( ) . toArray ( ) ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( null , e . getMessage ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( null , backend . getRecord ( identifier ) )
assertEquals ( "expected" , "actual" )
assertEquals ( "expected" , "actual" )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( service , getService ( ) )
assertEquals ( blobLength , length )
assertEquals ( 0 , existingAfterGC . size ( ) )
assert existingAfterGC . isEmpty ( )
assert missing == 0
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( KEYS + misses , cacheStats . getElementCount ( ) )
assertThat ( retrieved , containsInAnyOrder ( added . toArray ( ) ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( "<Expected Value>" , "<Actual Value>" )
assertThat ( retrieved , containsInAnyOrder ( initAdd . toArray ( ) ) )
assertEquals ( 0 , filtered . size ( ) )
assertEquals ( initAdd , retrieved )
assertEquals ( initAdd , retrieved )
assertEquals ( initAdd , retrieved )
assertEquals ( initAdd , retrieved )
assertThat ( retrieved , containsInAnyOrder ( initAdd . toArray ( ) ) )
assertEquals ( initAdd , retrieved )
assertNotNull ( props . getProperty ( "name" ) )
assertEquals ( "FileDataStore" , System . getProperty ( DS_CLASS_NAME ) )
assertEquals ( 0 , noop . size ( ) )
assertEquals ( uri , getDataStore ( ) . getDownloadURI ( record . getIdentifier ( ) , DataRecordDownloadOptions . DEFAULT ) )
assertEquals ( null , ds . getDownloadURI ( blob , downloadOptions ) )
assertEquals ( "Expected download URI is not null" , true , getDownloadURI ( blob , downloadOptions ) != null )
assertThrows ( NullPointerException . class , ( ) -> getDownloadURI ( blob , downloadOptions ) )
assertEquals ( null , uri )
assertThrows ( IllegalArgumentException . class , ( ) -> getDataStore ( ) . initiateDataRecordUpload ( ONE_MB , - 2 ) )
assertNull ( b . getNewStream ( ) )
assertEquals ( true , closed . get ( ) )
assertThat ( blobId2 , equalTo ( blobId ) )
assertEquals ( 0 , ids . size ( ) )
assertEquals ( 0 , ret . size ( ) )
assertCollectedSize ( collector . size , size )
assertEquals ( "Test string" , iCharacter )
assertEquals ( "Test " , new String ( result , StandardCharsets . UTF_8 ) )
assertEquals ( list , retrieved )
assertEquals ( list , retrieved )
assertEquals ( e . getKey ( ) , getKey ( ) )
assertEquals ( v , cache . get ( k ) )
AssertPlaceHolder = "assertEquals(1, runnable.getCount());"
assertEquals ( "100" , tree . getPropertyCount ( ) )
assertEquals ( 1 , logs . size ( ) )
assertNotNull ( name ( ) )
? ? ? getRequestCount ( ) { assertEquals ( KEYS , cacheStats . getRequestCount ( ) ) ; } @ Test public void getRequestCount  ( ) { assertEquals ( KEYS , cacheStats . getRequestCount ( ) ) ; } ? ? ?
assertEquals ( KEYS - misses - fails , cacheStats . getHitCount ( ) )
assertEquals ( ( KEYS - ( double ) misses - fails ) / KEYS , cacheStats . getHitRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getMissCount ( ) )
assertEquals ( ( ( double ) misses + fails ) / KEYS , cacheStats . getMissRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getLoadCount ( ) )
? ? ? getLoadSuccessCount ( ) { assertEquals ( misses , cacheStats . getLoadSuccessCount ( ) ) ; } @ Test public void getLoadSuccessCount  ( ) { assertEquals ( misses , cacheStats . getLoadSuccessCount ( ) ) ; } ? ? ?
assertEquals ( fails , cacheStats . getLoadExceptionCount ( ) )
assertEquals ( ( double ) fails / ( misses + fails ) , cacheStats . getLoadExceptionRate ( ) , Double . MIN_VALUE )
cacheStats . getTotalLoadTime ( )
assertTrue ( ( ( double ) loadTime / ( misses + fails ) ) <= cacheStats . getAverageLoadPenalty ( ) )
? ? ? getEvictionCount ( ) { assertEquals ( 0 , cacheStats . getEvictionCount ( ) ) ; } @ Test public void getEvictionCount  ( ) { "<AssertPlaceHolder>" ; }
assertEquals ( KEYS + misses , cacheStats . getElementCount ( ) )
assertEquals ( Long . MAX_VALUE , cacheStats . getMaxTotalWeight ( ) )
assertEquals ( KEYS + misses , cacheStats . estimateCurrentWeight ( ) )
assertEquals ( null , test . put ( null , 10 , 100 ) )
assertEquals ( null , lookup ( context , "name" ) )
assertEquals ( "" , lookup ( context , "name" ) )
assertEquals ( " " , lookup ( context , "name" ) )
assertEquals ( "42" , lookup ( context , "name" ) )
assertEquals ( "value" , lookup ( context , "name" ) )
assertEquals ( null , context . getBundleContext ( ) . getProperty ( "name" ) )
assertEquals ( "" , context . getProperty ( "name" ) )
assertEquals ( " " , context . getBundleContext ( ) . getProperty ( "name" ) )
assertEquals ( "value" , context . getProperty ( "name" ) )
assertEquals ( cs1 , cs2 )
assertEquals ( 3 , whiteboard . getServiceCount ( Service1 . class ) )
assertEquals ( 0 , meterStats . getCount ( ) )
assertNotNull ( cs . getWorkspace ( ) . getName ( ) )
assertEquals ( r0 , r1 )
assertNotNull ( getBlob ( reference ) )
assertSame ( root . getContentSession ( ) . getAuthInfo ( ) , cs . getAuthInfo ( ) )
assertNotNull ( getWorkspaceName ( ) )
assertSame ( permissionProvider , pp )
assertEquals ( null , child )
child . assertNotNull ( )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( null , getChildNode ( "nonExisting" ) )
assertNotNull ( getChildNode ( "name" ) )
assertEquals ( "Expected child node to be non-null" , expectedValue , actualValue )
assertNotNull ( ns )
assertEquals ( null , ns )
assertEquals ( ns , secureNodeBuilder . getChildNode ( NAME_NON_ACCESSIBLE ) . getBaseState ( ) )
assertEquals ( ns , getNodeState ( tree ) )
assertEquals ( null , ns )
assertNotNull ( ns )
assertEquals ( "size of list must be 1 after adding an entry" , 1 , list . size ( ) )
assertEquals ( "size after removing property must be 0" , 0 , secureNodeBuilder . size ( ) )
assertEquals ( Type . STRINGS , secureNodeBuilder . getPropertyType ( "strings" ) )
assertEquals ( Long . MAX_VALUE , secureNodeBuilder . getProperty ( "long" , Type . LONG ) )
assertEquals ( "a" , getName ( ) )
assertEquals ( "value" , getName ( ) )
assertEquals ( "expected size is 0" , 0 , secureNodeBuilder . size ( ) )
assertEquals ( "value" , secureNodeBuilder . getProperty ( "another" ) )
assertEquals ( "anothervalue" , secureNodeBuilder . getProperty ( NAME_NON_ACCESSIBLE ) )
assertEquals ( "value" , secureNodeBuilder . getProperty ( name ) )
secureNodeBuilder . should ( not ( hasProperty ( "prop" ) ) )
assertThat ( secureNodeBuilder , hasProperty ( NAME_NON_ACCESSIBLE ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertNotNull ( getOakPath ( validPrincipal ) )
assertThrows ( IllegalArgumentException . class , ( ) -> getOakPath ( validPrincipal ) )
assertEquals ( jcrName , getOakName ( jcrName ) )
assertNotNull ( getOakPath ( validPrincipal ) )
assertThrows ( Exception . class , ( ) -> getOakPath ( validPrincipal ) )
assertNotNull ( getProperty ( name ) )
assertEquals ( null , p )
assertEquals ( null , p )
assertEquals ( null , n )
assertEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( OUR_VALUE , p . getValue ( ) )
assertEquals ( OUR_VALUE , n . getProperty ( "p" ) )
assertEquals ( true , cleaned . get ( ) )
assertEquals ( 2 , provider . getCallbacks ( ) . size ( ) )
assertEquals ( 2 , provider . getCallbacks ( ) . size ( ) )
assertEquals ( newArrayList ( "/file" ) , actual )
assertEquals ( 0 , actual . size ( ) )
assertThat ( statsMBean ) . hasStatus ( IndexStatsMBean . STATUS_RUNNING )
assertThat ( idxBuilder , hasProperty ( "barIndexProp" , equalTo ( "barbar" ) ) )
assertEquals ( "foo" , info2 . getCheckpoint ( ) )
assertThat ( updater . contains ( message ) ) . isTrue ( )
assertEquals ( expectedLogs , getLogs ( ) )
assertArray ( cd , "values" , asList ( "x" ) )
assertThat ( callbackInvoked . get ( ) ) . isTrue ( )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 5 , meterStats . getCount ( ) )
assertNotNull ( statsProvider . getTimer ( Type . SESSION_READ_DURATION . name ( ) , StatsOptions . TIME_SERIES_ONLY ) )
assertEquals ( "NONE" , service . getProviderType ( ) )
assertEquals ( "DEFAULT" , service . getProviderType ( ) )
assertEquals ( "/content" , decorated . getPath ( ) )
assertNotNull ( getProperty ( "name" ) )
assertNotNull ( frozenNode )
assertNotNull ( property )
assertEquals ( new Date ( t0 + 1000 ) , getTime ( Clock . ACCURATE . getTime ( ) ) )
assertEquals ( 0 , limiter . getDelay ( ) )
assertNotNull ( condition )
assertNotNull ( createFilter ( before , after ) )
assertNotNull ( createFilter ( before , after ) )
assertNotNull ( createFilter ( before , after ) )
assertEquals ( filter , new GlobbingPathFilter ( "q" ) )
assertEquals ( filter , new GlobbingPathFilter ( STAR ) )
assertEquals ( value , p . test ( createWithProperty ( name , value ) ) )
assertEquals ( "baz" , createWithProperty ( name , value ) . getProperty ( name ) . getValue ( STRING ) )
assertEquals ( value , createWithProperty ( name , value ) . getProperty ( name ) . getValue ( STRING ) )
assertNotNull ( selectDescendant ( ) )
assertEquals ( true , root . isRoot ( ) )
assertNotNull ( getChild ( "name" ) )
assertEquals ( "hidden" , getHiddenTree ( immutable ) . getName ( ) )
assertNotNull ( getChild ( "name" ) )
assertEquals ( "expectedName" , getName ( ) )
child . exists ( )
assertNotNull ( getHiddenTree ( immutable ) )
hidden . shouldNotBeNull ( )
assertThat ( orderable , hasProperty ( "hidden" ) )
orderable . shouldNotBeNull ( )
assertEquals ( 3 , orderable . getPropertyCount ( ) )
assertEquals ( TreeType . VERSION , immutable . getType ( ) )
assertNull ( f , "Filter should be null" )
assertEquals ( "empty" , f . toString ( ) )
assertEquals ( 0 , f . getHits ( ) )
assertEquals ( sql2 , "<expected value>" )
assertThat ( e . getMessage ( ) , containsString ( "Error: Query length exceeds limit" ) )
assertEquals ( count , 10 )
assertEquals ( q , token )
assertNotNull ( plan . getAttribute ( "foo" ) )
assertNull ( sc )
assertNull ( sc )
assertNull ( sc )
assertEquals ( expected , context . registerInjectActivateService ( authenticationConfiguration , ConfigurationParameters . of ( PARAM_APP_NAME , "name" ) ) )
assertNotNull ( getName ( ) )
assertNotNull ( authConfiguration . getLoginContextProvider ( contentRepository ) )
assertSame ( wb , lcp . getWhiteboard ( ) )
assertEquals ( "" , cb . getPassword ( ) )
assertEquals ( "" , cb . getPassword ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( cb . getName ( ) )
assertNotNull ( cb . getContentSession ( ) )
assertEquals ( null , authInfo )
assertEquals ( anonymousID , authInfo . getUserId ( ) )
assertNotNull ( getAuthInfo ( ) )
assertEquals ( "" , sc . getAttribute ( ".token" ) . toString ( ) )
assertNotNull ( getAuthInfo ( ) )
assertEquals ( "" , sc . getAttribute ( ".token" ) )
assertEquals ( cs , ? ? ? )
assertNull ( authenticate ( creds ) )
assertNotNull ( info )
assertEquals ( "LoginException expected" , e . getClass ( ) , LoginException . class )
assertEquals ( true , auth . authenticate ( tc ) )
assertEquals ( true , auth . authenticate ( tc ) )
assertEquals ( "LoginException expected" , e . getMessage ( ) )
assertNotNull ( getName ( ) )
assertEquals ( exp , tc . getConfigValue ( TokenProvider . PARAM_TOKEN_EXPIRATION , TokenProviderImpl . DEFAULT_TOKEN_EXPIRATION ) )
assertEquals ( exp , getConfig ( TokenConfiguration . class ) . getParameters ( ) . getConfigValue ( TokenProvider . PARAM_TOKEN_EXPIRATION , TokenProviderImpl . DEFAULT_TOKEN_EXPIRATION ) )
assertNotNull ( refresh )
tp . assertNotNull ( tp )
assertNotNull ( ctx )
assertEquals ( 0 , keyMapping . size ( ) )
assertEquals ( 0 , tokens . getChildren ( ) . size ( ) )
assertNotNull ( getAuthInfo ( ) )
assertEquals ( "Token info can only be retrieved after successful authentication." , exception . getMessage ( ) )
assertEquals ( 1 , 1 )
assertNotNull ( readOnlyInfo )
assertEquals ( info , null )
assertEquals ( gr . getGroupId ( ) , "groupId" )
assertEquals ( null , info )
assertNotNull ( getTokenInfo ( ) )
assertEquals ( token , getTokenInfo ( ) . getToken ( ) )
assertEquals ( 50 , cnt )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . INVALID_TOKEN , e . getCode ( ) )
assertEquals ( "The token parent node must be located below the configured user root." , e . getMessage ( ) )
assertEquals ( StatusCode . INVALID_PATH , e . getStatusCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( null , authInfo . getUserID ( ) )
assertNotNull ( authInfo . getUserId ( ) )
// code to be asserted
assertNotNull ( getName ( ) )
assertEquals ( WorkspaceInitializer . DEFAULT , testObject . getWorkspaceInitializer ( ) )
assertEquals ( expected , ? ? ? getCommitHooks ( ) )
assertEquals ( treeProvider , ac . getTreeProvider ( ) )
assertEquals ( PermissionProvider . class , pp . getClass ( ) )
assertEquals ( mip , f . get ( authorizationConfiguration ) )
assertEquals ( tree . getPath ( ) , defPath )
assertNotNull ( ttp . getTree ( selectorName ) )
assertNotNull ( getType ( tree , parent ) )
assertEquals ( value , getPath ( ) )
assertNotNull ( getOakPath ( validPrincipal ) )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( RestrictionType . REP_SUBTREES , getRestrictionType ( null ) )
assertEquals ( map . getRecordId ( ) , mapInfo . mapId )
assertEquals ( 0 , acl . getAccessControlEntries ( ) . size ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( mockJackrabbitSession ( ) . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertNotNull ( getNamePathMapper ( ) )
assertThat ( watch . isRunning ( ) ) . isFalse ( )
assertThat ( watch . isRunning ( ) ) . isFalse ( )
assertThat ( watch . isRunning ( ) ) . isFalse ( )
assertThat ( watch . isRunning ( ) ) . isFalse ( )
AssertPlaceHolder = "assertTrue(watch.isRunning());"
watch . isRunning ( ) should be asserted  to be  true .
assertThat ( watch . isRunning ( ) ) . isTrue ( )
assertEquals ( false , watch . isRunning ( ) )
assertEquals ( ImmutableList . of ( unknownPrincipalInfo , privs ) , importer . getChildInfo ( ) )
assertEquals ( privilege . getName ( ) , privilegeName )
assertEquals ( JCR_READ , readPriv . getName ( ) )
assertEquals ( policy . getClass ( ) , expectedPolicyClass )
assertPolicies ( acMgr . getPolicies ( testPath ) , 0 )
assertPolicies ( acMgr . getPolicies ( ( String ) null ) , 0 )
assertNotNull ( applicable )
assertNotNull ( applicable )
assertNotNull ( policies [ 0 ] )
assertNotNull ( of ( properties ) )
assertNotNull ( effective )
ace . getBits ( "JCR_READ" , "JCR_READ" )
assertEquals ( PrivilegeBits . EMPTY , getBits ( ) )
assertEquals ( Collections . emptySet ( ) , val )
assertNull ( ace . getRestriction ( s ) )
assertEquals ( val , nameValue )
assertEquals ( 0 , vs . length )
assertEquals ( 0 , list . size ( ) )
assertEquals ( ace , ace2 )
assertEquals ( 2 , acl . getAccessControlEntries ( ) . size ( ) )
assertEquals ( 0 , acl . getAccessControlEntries ( ) . length )
assertEquals ( store . getHead ( ) , backup . getHead ( ) )
assertEquals ( policy1 , policy2 )
assertEquals ( policy1 . getPath ( ) , null )
assertEquals ( policy2 . getPath ( ) , null )
assertEquals ( policy1 . getPath ( ) , policy2 . getPath ( ) )
assertEquals ( expected , "/some/path1" . compareTo ( "/some/path2" ) )
assertEquals ( expected , Ints . compare ( PathUtils . getDepth ( "/some/deeper/path" ) , PathUtils . getDepth ( "/" ) ) )
assertEquals ( expected , Ints . compare ( PathUtils . getDepth ( "/path" ) , PathUtils . getDepth ( "/a/deeper/path" ) ) )
assertEquals ( expectedAcl , actualAcl )
assertEquals ( expectedACL , actualACL )
assertEquals ( expectedAcl , actualAcl )
assertEquals ( 1 , acl . getEntries ( ) . size ( ) )
assertTrue ( found )
assertEquals ( true , found )
assertEquals ( false , t . exists ( ) )
assertNotNull ( getInstance ( root , namePathMapper ) )
assertEquals ( AccessControlConstants . NT_REP_DENY_ACE , t . getProperty ( JCR_PRIMARYTYPE ) . getString ( ) )
assertEquals ( cnt , expectedCount )
assertEquals ( 1 , applicable . length )
assertNotNull ( applicable )
assertEquals ( EMPTY , getInstance ( new byte [ 0 ] ) )
assertEquals ( 1 , composite . getPolicies ( EveryonePrincipal . getInstance ( ) ) . length )
assertEquals ( 1 , composite . getPolicies ( EveryonePrincipal . getInstance ( ) ) . length )
assertNotNull ( accessControlManager )
assertEquals ( pp , cc . getPermissionProvider ( root , root . getContentSession ( ) . getWorkspaceName ( ) , Collections . < Principal > emptySet ( ) ) )
assertEquals ( rp , ac . getRestrictionProvider ( ) )
AssertPlaceHolder = "assertNotNull(accessControlManager);"
assertEquals ( 2 , pp . getPermissionCount ( ) )
assertEquals ( 2 , cc . getAuthorizationConfigurations ( ) . size ( ) )
assertEquals ( mock ( RestrictionProvider . class ) , rp )
assertEquals ( ac . getRestrictionProvider ( ) , rp )
assertSame ( RestrictionProvider . EMPTY , rp )
assertNotNull ( tp )
assertNotNull ( tp )
assertEquals ( tp , createPermissionProvider ( ) . getTreePermission ( rootTree , TreePermission . EMPTY ) )
assertEquals ( tp , createPermissionProviderOR ( ) . getTreePermission ( rootTree , TreePermission . EMPTY ) . getChildPermission ( childNames . get ( 0 ) , ns ) )
assertTrue ( cugPermProvider . getPrivileges ( tree ) . isEmpty ( ) )
assertTrue ( expected . equals ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertTrue ( expected . equals ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertNotNull ( tpField )
assertTrue ( expected . equals ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( true , a . hasProperty ( "name" ) )
assertNotNull ( a )
assertEquals ( 3 , tree . getPropertyCount ( ) )
assertNotNull ( a )
assertThat ( a , hasProperty ( propName ) )
assertNotNull ( a . getProperty ( propName ) )
assertNotNull ( a . getPropertyStatus ( propName ) )
assertEquals ( 3 , tree . getChildrenCount ( 4 ) )
assertEquals ( expected , testAcMgr . getPrivileges ( getTestRoot ( ) ) )
assertThat ( a , hasProperty ( "<property_name>" ) )
assertNotNull ( a . getProperty ( "name" ) )
assertEquals ( 3 , a . getPropertyCount ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( vs . exists ( ) )
assertEquals ( 0 , vs . getChildrenCount ( ) )
assertEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertSame ( TreePermission . ALL , permissionProvider . getTreePermission ( tree , TreePermission . EMPTY ) )
assertNotEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "/path" , tree . getPath ( ) )
assertEquals ( max , num )
assertEquals ( NumEntries . valueOf ( 0 , true ) , getNumEntries ( "unknownPrincipalName" , 100 ) )
assertEquals ( validator , maValidator . childNodeAdded ( "name" , mock ( NodeState . class ) ) )
assertEquals ( 1 , validator . getMoveTracker ( ) . getMoves ( ) . size ( ) )
assertSame ( TreePermission . EMPTY , actualPermission )
assertNotNull ( tree )
assertEquals ( maxPaths + 1 , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertEquals ( maxPaths + 1 , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertEquals ( Long . MAX_VALUE , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertFalse ( "Non-empty list should be non-empty" , list . isEmpty ( ) )
assertEquals ( 5 , entries . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "empty" , h2 . toString ( ) )
assertEquals ( null , getName ( ) )
assertEquals ( ZERO , NumEntries . valueOf ( 0 , false ) )
assertEquals ( ZERO , NumEntries . valueOf ( 0 , false ) )
assertEquals ( ZERO , everyoneTree . getProperty ( REP_NUM_PERMISSIONS ) )
assertEquals ( 1 , everyoneTree . getProperty ( REP_NUM_PERMISSIONS ) . getValues ( ) . length )
assertFalse ( ps . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 0 , privilegeNames . size ( ) )
assertEquals ( null , getReadOnlyTreeOrNull ( null , r ) )
tp . assertHasParentPermission ( parentPermission )
assertEquals ( name , parent . getName ( ) )
assertEquals ( 1 , gp . getPatterns ( ) . size ( ) )
assertEquals ( "empty" , ? ? ? )
assertEquals ( "empty" , ? ? ? )
assertEquals ( "empty" , ? ? ? )
assertEquals ( sc , ConfigurationInitializer . getConfiguration ( ) )
assertEquals ( sc . getParameters ( ) , defConfig . getParameters ( ) )
assertNotNull ( getWhiteboard ( ) )
assertEquals ( defaultConfig , securityProvider . getConfiguration ( PrincipalConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertSame ( uc , securityProvider . getConfiguration ( UserConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertSame ( ac , securityProvider . getConfiguration ( AuthenticationConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertSame ( ac , securityProvider . getConfiguration ( AuthorizationConfiguration . class ) )
assertEquals ( 5 , getConfiguration ( ) . getAppConfigurationEntry ( "" ) . length )
assertSame ( pc , securityProvider . getConfiguration ( PrivilegeConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertSame ( tc , securityProvider . getConfiguration ( TokenConfiguration . class ) )
assertEquals ( true , f . get ( registration ) )
assertNotNull ( service )
assertEquals ( mockConfiguration , registration . getBoundAuthorizationConfiguration ( ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( getItemBasedPrincipal ( jcrPath ) )
assertNotNull ( propPath )
assertNull ( getItemBasedPrincipal ( "nonExistingPrincipalOakPath" ) )
assertNotNull ( principal )
assertNull ( getPrincipal ( "nonExistingPrincipal" ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( principalName , umMock . getAuthorizable ( new PrincipalImpl ( principalName ) ) . getName ( ) )
assertEquals ( userMock , um . getAuthorizable ( p ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( um )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( findPrincipals ( null ) )
assertNotNull ( findPrincipals ( null ) )
assertEquals ( 1 , umMock . findAuthorizables ( any ( Query . class ) ) )
assertEquals ( 1 , membership . size ( ) )
assertEquals ( aggregates . size ( ) , expectedSize )
assertEquals ( "empty" , ? ? ? )
assertEquals ( true , privilegesTree . exists ( ) )
assertEquals ( PrivilegeBits . EMPTY , getBits ( Collections . emptyList ( ) , true ) )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertNotNull ( copyOf ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( pMgr )
assertEquals ( new ExternalIdentityRepositoryInitializer ( protectedExternalIds ( ) ) , getRepositoryInitializer ( ) )
assertEquals ( property . getName ( ) , propName )
assertEquals ( ntName , property . getName ( ) )
assertEquals ( ntName , property . getName ( ) )
assertEquals ( true , PathUtils . denotesRoot ( tree . getPath ( ) ) )
assertEquals ( ntName , PrivilegeConstants . PRIVILEGE_NODETYPE_NAMES )
assertEquals ( 0 , treeProvider . getTree ( ) . size ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertNull ( readDefinition ( privilegeName ) )
assertNull ( readDefinition ( "nonExistingPrivilege" ) )
assertNotNull ( readDefinition ( privilegeName ) )
assertNotNull ( reader . readDefinition ( privilegeName ) )
assertNotNull ( getName ( ) )
assertNotNull ( def )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 5 , testGroup . getMembers ( ) . size ( ) )
assertNotNull ( copyOf ( ) )
assertEquals ( t , root . getTree ( authorizable . getPath ( ) ) )
assertEquals ( "-1" , getSize ( indexPath ) )
assertEquals ( "-1" , focalMethodCall )
assertThat ( names ) . containsExactlyElementsIn ( expected )
assertEquals ( expected , new HashSet < > ( names ) )
assertNotNull ( getProperty ( "name" ) )
assertNotNull ( getProperty ( "name" ) )
assertNotNull ( t . getProperty ( "jcr:language" ) )
assertEquals ( true , properties . hasProperty ( "prop2" ) )
assertEquals ( "val" , properties . getProperty ( "relPath/prop2" ) . getString ( ) )
assertEquals ( "val" , properties . getProperty ( "newPath/prop2" ) )
assertNotNull ( properties . getProperty ( "prop" ) )
assertNotNull ( properties . getProperty ( "mvProp" ) )
assertArrayEquals ( new Value [ ] { v , v } , properties . getProperty ( "relPath/prop" ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( new DataIdentifier ( getIdentifierName ( input . getName ( ) ) ) , < AssertPlaceHolder >  )
assertEquals ( new DataIdentifier ( getIdentifierName ( input . getName ( ) ) ) , < AssertPlaceHolder >  )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertEquals ( "size of list must be 0" , 0 , list . size ( ) )
assertEquals ( "dmp.coversAllMembers(any(Group.class)) should return true" , true , dmp . coversAllMembers ( any ( Group . class ) ) )
assertTrue ( dmp . coversAllMembers ( any ( Group . class ) ) )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertEquals ( "expected size after adding one element" , 1 , list . size ( ) )
assertEquals ( "expected size after removing an item" , expectedSize , list . size ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( 1 , members . size ( ) )
assert members . contains ( id )
assertEquals ( 1 , getUserManager ( root ) . getUsers ( ) . size ( ) )
assertNull ( getUserManager ( ) . getMembership ( "everyone" ) )
assertEquals ( 0 , getTestUser ( ) . getMembers ( ) . size ( ) )
assertEquals ( groups , a . memberOf ( ) )
assertEquals ( groups , a . declaredMemberOf ( ) )
assertNull ( getAuthorizable ( external , type ) )
assertEquals ( 1 , members . size ( ) )
assertEquals ( 1 , members . size ( ) )
assertEquals ( 1 , members . size ( ) )
assertEquals ( 1 , verifyMonitor ( 1 , true ) )
assertEquals ( true , groupPrincipal . isMember ( getTestUser ( ) ) )
assertEquals ( 2 , impersonators . size ( ) )
assertNotNull ( getAdminPrincipal ( ) )
assertNotNull ( getAdminPrincipal ( ) )
assertNull ( getPrincipal ( "testGroup" ) )
assertEquals ( "testUser" , getTestUser ( ) . getUsername ( ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertEquals ( false , testUser . isGranted ( ) )
assertEquals ( ImmutableSet . copyOf ( principals ) , createSubject ( principals ) . getPrincipals ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( principals , createSubject ( principals ) . getPrincipals ( ) )
assertEquals ( principals , createSubject ( principals ) . getPrincipals ( ) )
assertEquals ( 1 , createSubject ( principals ) . getPrincipals ( ) . size ( ) )
assertNotNull ( gr )
assertNotNull ( gr )
assertNull ( getPrincipal ( "nonExistingGroup" ) )
assertEquals ( 0 , createSubject ( ) . getPrincipals ( ) . size ( ) )
assertEquals ( null , imp . lookupUser ( nonExisting ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertNull ( createAuthorizable ( false , null ) )
assertNotNull ( createAuthorizable ( true , null ) )
assertEquals ( "a/b/c" , authorizable . getPath ( ) )
assertEquals ( "a/b/c" , authorizable . getPath ( ) )
assertEquals ( UserConstants . DEFAULT_USER_PATH + "/a/b/c" , authorizable . getPath ( ) )
assertEquals ( UserConstants . DEFAULT_GROUP_PATH + "/a/b/c" , authorizable . getPath ( ) )
assertEquals ( "/a/b" , authorizable . getPath ( ) )
assertNotNull ( authorizable )
assertEquals ( 0 , gr . getTree ( selectorName ) . getMembers ( ) . size ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 0 , getUserManager ( root ) . getUsers ( ) . size ( ) )
AssertPlaceHolder = "assertEquals(expected, failed);"
assertEquals ( memberDN , memberTree . getName ( ) . toString ( ) )
assertEquals ( true , getTree ( selectorName ) . isDeclaredMemberTransient ( ) )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( id , grp . getMembers ( ) . contains ( id ) )
assertEquals ( memberDN , attribute . getValue ( ) )
assertNotNull ( g . getTree ( selectorName ) )
assertThrows ( LoginException . class , ( ) -> authenticate ( expiredPw , newPw ) )
assertEquals ( 0 , root . getTree ( user . getPath ( ) ) . getChild ( UserConstants . REP_PWD ) . getProperty ( UserConstants . REP_PASSWORD_LAST_MODIFIED ) )
assertEquals ( newModTime , user . getPasswordLastModified ( ) )
assertEquals ( 0 , getTestUser ( ) . getProperty ( UserConstants . REP_PASSWORD_LAST_MODIFIED ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNull ( getTree ( selectorName ) )
assertNull ( getTree ( selectorName ) )
assertEquals ( "expected size after changing password" , expectedSize , list . size ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( failed )
assertEquals ( 2 , testGroup . getMembers ( ) . size ( ) )
assertNotNull ( userTree . getProperty ( "name" ) )
assertEquals ( "testRelPath" , u . getName ( ) )
assertEquals ( "testBelowRelPath/subtree" , u . getPath ( ) )
assertThrows ( ConstraintViolationException . class , ( ) -> getUserManager ( root ) . createSystemUser ( "testDefaultRelPath" , DEFAULT_SYSTEM_RELATIVE_PATH ) )
assertNotNull ( user )
assertNotNull ( user )
assertEquals ( "Expected user to be not null" , user , ? ? ? )
assertNotNull ( user )
assertThat ( userTree , hasProperty ( "password" , null ) )
assertEquals ( "userRoot + \"/any/path/to/the/new/user\"" , path )
assertNull ( getPrincipal ( null ) )
assertNotNull ( authentication )
assertNull ( authenticate ( creds ) )
assertEquals ( null , a . authenticate ( sc ) )
assertNotNull ( e )
assertEquals ( AuthenticationStatus . SUCCESS , a . authenticate ( creds ) )
assertEquals ( "LoginException expected" , e . getMessage ( ) )
assertNotNull ( a )
assertEquals ( userId , sc . getUserID ( ) )
AssertPlaceHolder = "assertNotNull(ua.authenticate(credentials));"
assertNotNull ( authenticate ( credentials ) )
assertNotNull ( getUserId ( ) )
assertEquals ( userId , authentication . getUserPrincipal ( ) . getName ( ) )
params . get ( PARAM_DEFAULT_DEPTH ) . equals ( "8" )
assertEquals ( defines , property . defines ( ) )
assertThat ( property . getName ( ) , is ( propName ) )
assertEquals ( ntName , tree . getPath ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertNotNull ( admin )
assertEquals ( null , getUserManager ( ) . getUser ( id ) )
assertThrows ( ConstraintViolationException . class , ( ) -> importer . processReferences ( ) )
assertEquals ( RepositoryException . class , exception . getClass ( ) )
assertEquals ( RepositoryException . class , exception . getClass ( ) )
assertThrows ( ConstraintViolationException . class , ( ) -> importer . processReferences ( ) )
assertThat ( importer , hasProperty ( "name" ) )
assertThat ( importer , hasProperty ( "<property_name>" ) )
assertThat ( importer , hasProperty ( "<property_name>" ) )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( umgr , uc . getUserManager ( root , getNamePathMapper ( ) ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( mockJackrabbitSession ( ) . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertNotNull ( def . getDeclaringNodeType ( ) )
assertEquals ( expectedHash , actualHash )
assertEquals ( buildPasswordHash ( "password" ) , "<expected value>" )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( null , pd . getName ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( false , def . isMultiple ( ) )
assertNotNull ( userTree )
assertThat ( refTracker . getProcessedReferences ( ) , hasItem ( unknownReferenceObj ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertThat ( userTree , hasProperty ( "id" ) )
assertNotNull ( importer . getProperty ( REP_AUTHORIZABLE_ID ) )
assertEquals ( NT_REP_USER , userTree . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) . getString ( ) )
assertEquals ( "testGroup" , groupTree . getName ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertTrue ( watch . isRunning ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertEquals ( 0 , repMembers . getChildrenCount ( ) )
assertEquals ( 0 , watch . getTime ( ) )
assertEquals ( 1 , repMembers . getChildrenCount ( ) )
assertEquals ( 0 , watch . getTime ( ) )
AssertPlaceHolder = "assertFalse(tree.exists());"
assertEquals ( NT_REP_MEMBER_REFERENCES_LIST , memberRefList . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) )
assertEquals ( NT_REP_MEMBER_REFERENCES_LIST , memberRefList . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) )
assertEquals ( NT_REP_MEMBERS , repMembers . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) )
assertEquals ( 1 , importer . startChildInfo ( createNodeInfo ( "memberRef" , NT_OAK_UNSTRUCTURED ) , ImmutableList . of ( createPropInfo ( REP_MEMBERS , "member1" ) ) ) )
assertEquals ( "sid" , su . getUserId ( ) )
assertNull ( getAuthorizable ( principal ) )
assertNotNull ( getAuthorizable ( external , type ) )
assertNull ( getAuthorizable ( null ) )
assertNull ( getAuthorizable ( null , null ) )
assertNull ( getAuthorizable ( null ) )
assertEquals ( authorizable . getPath ( ) , byPath . getPath ( ) )
assertEquals ( getTestUser ( ) . getAuthorizable ( ) , ? ? ? )
assertNull ( getAuthorizable ( null ) )
assertNull ( getAuthorizable ( principal ) )
assertNull ( getAuthorizable ( principal ) )
assertNotNull ( userTree )
assertEquals ( principal . getName ( ) , user . getPrincipal ( ) . getName ( ) )
assertNotNull ( principal )
assertNull ( principal )
assertNull ( t . getProperty ( REP_PRINCIPAL_NAME ) )
assertNotNull ( getPrincipals ( searchType ) )
assertNotNull ( principalsAgain )
assertNull ( getAuthorizable ( user ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( CommitFailedException . class , e . getClass ( ) )
assertEquals ( 1 , policies . length )
assertEquals ( "expectedId" , dlg . getID ( ) )
assertNull ( getPrincipal ( principalName ) )
assertEquals ( 2 , dlg . getPropertyCount ( ) )
assertNotNull ( dlg . getProperty ( "propName" ) )
assertEquals ( 1 , timesInvoked ( dlg , "removeProperty" ) )
assertEquals ( "" , dlg . getPath ( ) )
dlg . toString ( ) , "empty" )
assertNotNull ( it . next ( ) )
assertThrows ( Exception . class , ( ) -> {
assertEquals ( 1 , members . size ( ) )
assertEquals ( 3 , group . getMembers ( ) . size ( ) )
assertThat ( dlg , times ( 1 ) ) . removeMembers ( "u" , getTestUser ( ) . getID ( ) )
assertEquals ( credentials , ? ? ? )
assertEquals ( null , ? ? ? getDisabledReason ( ) )
assertEquals ( new DataIdentifier ( getIdentifierName ( input . getName ( ) ) ) , < AssertPlaceHolder >  )
assertEquals ( new DataIdentifier ( getIdentifierName ( input . getName ( ) ) ) , < expected value >  )
assertEquals ( "Expected exception of type RepositoryException to be thrown" , RepositoryException . class , assertThrows ( RepositoryException . class , ( ) -> a . getID ( ) ) )
assertEquals ( "a" , a . getID ( ) )
assertEquals ( path , "/configured/user_and_group/path" )
assertEquals ( ntNames . size ( ) , 3 )
assertEquals ( Text . escapeIllegalJcrChars ( name ) , escapeNodeName ( name ) )
assertEquals ( "'string\\value" , value )
? ? ? assertEquals ( "{" + System . lineSeparator ( ) + "  \"key\": true" + System . lineSeparator ( ) + "}" , result )
assertEquals ( Long . MAX_VALUE , longV . getValue ( ) )
assertEquals ( 2.3 , doubleV . getValue ( ) , 0.001 )
assertNotNull ( dateString )
assertEquals ( "'string\\\\value" , escapeForQuery ( value ) )
assertEquals ( null , getID ( ) )
assertEquals ( "id" , a . getID ( ) )
assertNotNull ( a . getID ( ) )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( EMPTY , ConfigurationParameters . of ( properties ) )
assertEquals ( options . size ( ) , properties . size ( ) )
assertEquals ( 4 , Iterators . size ( resultIt ) )
assertEquals ( "str" , it . next ( ) )
assertEquals ( null , ? ? ? )
assertEquals ( tree , resultRow . getTree ( null ) )
assertEquals ( tree , resultRow . getTree ( null ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( rrta )
assertEquals ( "g2" , result . next ( ) . getID ( ) )
assertEquals ( "g2" , result . next ( ) . getID ( ) )
assert . assertEquals ( expected , s )
assertEquals ( "visitor.visit((Condition.PropertyExists) new XPathQueryBuilder().exists(REL_PATH));" , "<AssertPlaceHolder>" )
assertEquals ( 2 , visitor . getVisitedConditions ( ) . size ( ) )
assertEquals ( message , visitor . getLog ( ) )
assertEquals ( "expectedSortProperty" , getSortProperty ( ) )
? ? ? testGetGroupId ( ) { assertEquals ( "expectedGroupID" , getGroupID ( ) ) ; } String getGroupID  ( ) { return groupID ; } ? ? ?
assertEquals ( - 1 , builder . getLimit ( Mockito . mock ( Value . class ) ) )
assertEquals ( DateValue . valueOf ( bound ) . getDate ( ) , < expected value >  )
assertEquals ( - 1 , builder . getLimit ( v ) )
assertThat ( c ) . isTrue ( )
assertThat ( c ) . isEqualTo ( condition . or ( condition2 ) )
assertEquals ( authorizableId . length ( ) , generateNodeName ( authorizableId ) . length ( ) )
assertEquals ( authorizableNodeName . getNodeName ( ) , generateNodeName ( authorizableId ) )
assertEquals ( "generated" , registered . generateNodeName ( "authorizableId" ) )
assertEquals ( null , factory . getUserConfiguration ( ) )
assertThat ( recorder . includedChanges , contains ( expected . toArray ( ) ) )
assertNotNull ( props . get ( "type" ) )
assertNotNull ( authInfo . getPrincipals ( searchType ) )
assertEquals ( expectedID , anonymousID )
assertNotNull ( testSession . getAuthInfo ( ) )
assertNotNull ( getString ( ) )
assertEquals ( rootVersion , baseVersion )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( permissionStoreTree . exists ( ) )
assertFalse ( testRoot . hasNode ( testPath ) )
assertThat ( effective . length , equalTo ( 2 ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
AssertPlaceHolder = "Assert.assertNotNull(effectivePolicies);"
assertNotNull ( expected )
assertEquals ( true , hasPrivilege )
assertEquals ( expectedPw , systemUserTree . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertNull ( expected , creds )
assertNotNull ( nodeName )
assertNotNull ( getValue ( key ) )
assertEquals ( expected , new PathRev ( path , rv ) )
assertNotNull ( system )
assertNull ( r2 . getTree ( "/c" ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getRoot ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertNotNull ( getRoot ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertThat ( store . checkpointInfo ( checkpoint ) , equalTo ( info ) )
assertEquals ( true , store . release ( checkpoint ) )
assertNotNull ( retrievedBlob )
assertNotNull ( retrievedBlob )
assertNotNull ( retrievedBlob )
assertEquals ( 0 , test . getChildNodeCount ( ) )
assertNotNull ( validator )
assertNotNull ( c )
assertNotNull ( child . getName ( ) )
assertNotNull ( x . getChild ( "added" ) )
assertEquals ( 1 , ClusterRepositoryInfo . getClusterId ( ds1 ) )
assertNotNull ( dataStoreStats )
assertNotNull ( getAuthorizable ( new Principal ( "testUser" ) ) )
assertEquals ( 1 , aces . length )
assertNotNull ( dataStoreStats )
assertThat ( store . checkpointInfo ( cp ) , equalTo ( props ) )
assertEquals ( path , copiedRecsFile . getPath ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertNotEquals ( base , added . getBaseState ( ) )
assertNotNull ( root )
assertEquals ( "b" , nb . getChildNode ( "a" ) . getChildNode ( "b" ) . getName ( ) )
assertEquals ( 3 , tree . getPropertyCount ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertNotNull ( n . getNodeOrNull ( "child" ) )
assertNotNull ( n . getPropertyOrNull ( "prop" ) )
assertEquals ( "abc" , root . getProperty ( "test" ) . getString ( ) )
assertEquals ( new String [ ] { "abc" , "def" } , root . getProperty ( "test" ) . getValues ( ) )
assertEquals ( "Property value should be null" , null , p . getValue ( ) )
assertEquals ( "Property should be removed" , false , root . hasProperty ( "missing" ) )
assertEquals ( "jcr:primaryType" , property . getName ( ) )
assertEquals ( cal . getTime ( ) , root . getProperty ( "start" ) . getDate ( ) )
assertEquals ( "Path should not exist after removal" , false , s1 . nodeExists ( path ) )
assertEquals ( n . getPath ( ) , n2 . getPath ( ) )
assertEquals ( n . getPath ( ) , n2 . getPath ( ) )
assertEquals ( "/new" , n . getPath ( ) )
assertEquals ( "/new" , n . getPath ( ) )
assertEquals ( "/new" , n2 . getPath ( ) )
assertEquals ( "/parent/new" , n . getPath ( ) )
assertEquals ( "/parent" , n . getParent ( ) . getPath ( ) )
assertEquals ( "/parent/new" , n2 . getPath ( ) )
assertEquals ( "/moved" , n . getPath ( ) )
assertEquals ( "/moved" , n . getPath ( ) )
assertEquals ( "/moved" , n2 . getPath ( ) )
assertEquals ( "/moved/new" , n . getPath ( ) )
assertEquals ( "/moved/new" , n2 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
repository . assertNotNull ( )
assertEquals ( value , property . getLong ( ) )
assertEquals ( childPath , child . getPath ( ) )
assertEquals ( expected , new PathRev ( path , rv ) )
assertEquals ( null , root . getNode ( ".." ) )
assertNotNull ( getPath ( ) )
assertNotNull ( getPath ( ) )
assertThat ( hasProperty ( "name" ) ) . isNotNull ( )
assertNotNull ( getPath ( ) )
assertNotNull ( descriptors . getValue ( key ) )
assertNotNull ( n . getName ( ) )
assertNotNull ( n . getName ( ) )
assertNotNull ( n . getName ( ) )
assertEquals ( null , getConfigurableHttpDataRecordProvider ( ) . setDirectDownloadURIExpirySeconds ( REGULAR_READ_EXPIRY ) )
assertEquals ( 0 , getConfigurableHttpDataRecordProvider ( ) . getDirectDownloadURIExpirySeconds ( ) )
assertEquals ( "issue with test setup, cannot retrieve underlying DataStore / ConfigurableDataRecordAccessProvider" , e . getMessage ( ) )
assertNull ( upload )
assertNotNull ( binary )
assertEquals ( null , downloadURI )
assertEquals ( nt , testRootNode . getPrimaryNodeType ( ) )
assertEquals ( 90 , count )
assertEquals ( "/a/b" , path )
assertEquals ( "/etc/p1/p2/r" , n . getPath ( ) )
assertEquals ( 0 , testAcMgr . getPolicies ( acl . getPath ( ) ) . length )
assertNotNull ( e . getMessage ( ) )
assertEquals ( RestrictionType . REP_SUBTREES , getRestrictionType ( name ) )
assertEquals ( pPath , p . getPath ( ) )
assertTrue ( testSession . checkPermission ( childPath , Session . ACTION_READ ) )
assertEquals ( 2 , childNodeNames . size ( ) )
assertThat ( n , hasProperty ( propertyName1 , equalTo ( "modified" ) ) )
assertThat ( n , hasProperty ( propertyName1 ) )
assertThat ( n , not ( hasProperty ( propertyName1 ) ) )
assertThat ( n , hasProperty ( propertyName1 ) )
assertEquals ( "Version should not be removed without jcr:versionManagement privilege" , 1 , testNode . getVersionHistory ( ) . getAllVersions ( ) . getSize ( ) )
assertEquals ( versionablePath . getName ( ) , superuser . getWorkspace ( ) . getName ( ) )
assertNotNull ( pp . getName ( ) )
assertNotNull ( memb . getName ( ) )
assertNotNull ( memb )
assertNull ( getProperty ( name ) )
assertThat ( focalMethod ( path ) , is ( false ) )
assertEquals ( false , user . hasProperty ( propName ) )
assertEquals ( v . getType ( ) , expectedType )
assertEquals ( path , gr . getPath ( ) )
assertEquals ( path , user . getPath ( ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertArrayEquals ( data , getInstance ( data ) . getData ( ) )
assertEquals ( true , memberOfEveryone )
assertEquals ( found , true )
AssertPlaceHolder = "Assert.assertTrue(!entry.containsGroup(group));"
AssertPlaceHolder = "Assert.assertTrue(!entry.contains(user));"
assertTrue ( auth instanceof Authorizable )
assertTrue ( auth instanceof Authorizable )
assertEquals ( a , it . next ( ) )
assertEquals ( 0 , newGroup . getMembers ( ) . size ( ) )
assertNull ( userMgr . getAuthorizable ( newGroupId ) )
assertNotNull ( userManager . getAuthorizable ( principal ) )
assertEquals ( "val" , a . getProperty ( "prop" ) . getString ( ) )
assertEquals ( "Invalid path " + path , e . getMessage ( ) )
assertThat ( relPath , hasProperty ( "<property_name>" ) )
assertNotNull ( u . getID ( ) )
assertEquals ( id , gr . getID ( ) )
assertNull ( getAuthorizable ( new SimplePrincipal ( uid ) ) )
assertEquals ( UserConstants . DEFAULT_USER_PATH + "/test" , test . getPath ( ) )
assertNotNull ( authorizable )
assertEquals ( "changed" , user . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertEquals ( hash , getNode ( user , superuser ) . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertEquals ( true , c . getProperty ( "reindex" ) . getBoolean ( ) )
assertEquals ( 1 , counter . getProperty ( "oak:increment" ) . getValue ( ) . getLong ( ) )
assertEquals ( "t1" , remote . listAll ( ) [ 0 ] )
assertEquals ( fileNames . size ( ) , files . size ( ) )
assertEquals ( 1 , planner . getSortEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . getEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . getEntries ( ) . size ( ) )
assertEquals ( 1 , basePlans . size ( ) )
assertEquals ( 1 , basePlans . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertNotNull ( planner . getPlan ( "/foo" ) )
assertEquals ( 1 , basePlans . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertEquals ( 0 , plan . getCost ( ) )
assertEquals ( 1 , planner . getPlan ( "/test/a" ) . getRestrictions ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/test/a" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertNotNull ( planner )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "jcr:content/*" ) . getAggregates ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "jcr:content/*" ) . size ( ) )
assertEquals ( 2 , planner . getPlans ( ) . size ( ) )
assertEquals ( plan . getSelectionPolicy ( ) , IndexSelectionPolicy . TAG )
assertEquals ( 2 , stats . numDocs ( ) )
assertEquals ( 0 , stats . numDocs ( ) )
assertEquals ( "jcr:primaryType of index " + invalidJcrPrimaryTypeIndexName + " should be oak:QueryIndexDefinition instead of " + invalidJcrPrimaryTypeForIndex , logs . get ( 0 ) )
assertEquals ( "jcr:primaryType of index " + invalidJcrPrimaryTypeIndexName + " should be oak:QueryIndexDefinition instead of " + invalidJcrPrimaryTypeForIndex , logs . get ( 0 ) )
assertEquals ( "jcr:primaryType of index " + invalidJcrPrimaryTypeIndexName + " should be oak:QueryIndexDefinition instead of " + invalidJcrPrimaryTypeForIndex , logs . get ( 0 ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( "v2" , getVersion ( ) )
assertEquals ( V2 , defn . getVersion ( ) )
assertEquals ( "V1" , defn . getCompatibilityMode ( ) )
assertEquals ( "whitespace" , defn . getAnalyzer ( ) . getName ( ) )
assertEquals ( rule , getApplicableIndexingRule ( primaryNodeType ) )
assertNotNull ( getApplicableIndexingRule ( primaryNodeType ) )
assertEquals ( editorProvider . getIndexingQueue ( ) , mock ( DocumentQueue . class ) )
assertThat ( dir , hasProperty ( "saveDirectoryListing" ) )
assertEquals ( "async" , info . getName ( ) )
assertNotNull ( getProperty ( "name" ) )
assertEquals ( false , config . get ( "enableOpenIndexAsync" ) )
assertEquals ( V2 , IndexFormatVersion . getDefault ( ) )
assertEquals ( mock ( PreExtractedTextProvider . class ) , service . getExtractedTextProvider ( ) )
assertEquals ( true , editorProvider . isAlwaysUsePreExtractedCache ( ) )
assertEquals ( 0 , sr . length )
assertEquals ( "explain test1" , explain ( "test1" ) )
assertEquals ( asList ( "/test/a" , "/test/a/b" ) , executeQuery ( "select [jcr:path] from [nt:base] where [propa] = 10" ) )
assertThat ( explain ( query ) , containsString ( "test/a" ) )
assertEquals ( loader . openResource ( "foo" ) , new ByteArrayInputStream ( testData ) )
assertEquals ( 0 , executionCount . get ( ) )
assertEquals ( f1 , f2 )
assertTrue ( "Directory should not be empty" , dir . nonEmptyDir ( ) )
assertEquals ( dataSize , input . length ( ) )
assertEquals ( fileNames , files )
assertEquals ( fileSize , dir . fileLength ( fileName ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( queue )
assertEquals ( 2 , index . numDocs ( ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( current )
assertEquals ( readers , readers3 )
assertThat ( explain ( query ) ) . isEqualTo ( "expected result" )
assertThat ( explain ( query ) ) . isEqualTo ( "expected result" )
assertThat ( explain ( query ) ) . isEqualTo ( "expected explanation" )
assertEquals ( Double . NEGATIVE_INFINITY , test . getProperty ( FulltextIndexConstants . FIELD_BOOST ) )
assertEquals ( "HELLO" , test . getPropertyValue ( FulltextIndexConstants . PROP_FUNCTION ) )
assertEquals ( 100 , bs . getBucket ( ) )
assertNotNull ( bs . getBucket ( 100 ) )
assertEquals ( 1 , f . getRestrictions ( ) . size ( ) )
assertThat ( paths ) . containsExactly ( "/a" )
assertThat ( newString ( "bar" ) . getString ( ) , is ( equalTo ( "bar" ) ) )
assertThat ( callback . getUniqueProperties ( ) ) . containsOnly ( "foo" )
assertEquals ( "Unique property constraint violated" , e . getMessage ( ) )
assertEquals ( "Unique property index should have thrown CommitFailedException" , CommitFailedException . class , e . getClass ( ) )
assertQuery ( "select * from [oak:TestMixA]" , asList ( "/a" , "/b" ) )
assertEquals ( 0 , builder . child ( "a" ) . getProperty ( PROP_CREATED ) )
assertEquals ( 0 , builder . child ( "b" ) . getProperty ( PROP_CREATED ) )
assertEquals ( 0 , readers . size ( ) )
assertEquals ( facetsConfigProvider . getFacetsConfig ( ) , FacetHelper . getFacetsConfig ( root . builder ( ) ) )
assertEquals ( true , session . nodeExists ( path ) )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( writer . isOpen ( ) , true )
assertEquals ( 1 , writer . numDocs ( ) )
assertEquals ( 1 , writer . getIndexWriter ( ) . numDocs ( ) )
assertEquals ( configClass , getConfig ( configClass ) )
assertEquals ( writerConfig , w . getConfig ( ) )
assertEquals ( 42 , writerConfig . getRAMSize ( ) )
assertEquals ( 1 , writer . numDocs ( ) )
assertEquals ( 1 , writer . numDocs ( ) )
assertEquals ( 2 , config . size ( ) )
assertEquals ( sortStrategy . getClass ( ) , DefaultSortStrategy . class )
assertEquals ( FlatFileNodeStoreBuilder . SortStrategyType . TRAVERSE_WITH_SORT . toString ( ) , System . getProperty ( OAK_INDEXER_SORT_STRATEGY_TYPE ) )
assertEquals ( "false" , System . getProperty ( OAK_INDEXER_TRAVERSE_WITH_SORT ) )
assertEquals ( FlatFileNodeStoreBuilder . SortStrategyType . TRAVERSE_WITH_SORT . toString ( ) , System . getProperty ( OAK_INDEXER_SORT_STRATEGY_TYPE ) )
assertEquals ( 0 , flatFileList . size ( ) )
assertNotNull ( a . getPath ( ) )
assertNull ( list . get ( list . size ( ) - 1 ) )
assertEquals ( blobId , "<expected_blob_id>" )
assertNotNull ( p2 . getProperty ( "foo" ) )
assertClusterInvisible ( store )
getOptionBean ( CommonOptions . class ) != null
assertEquals ( 0 , opts . getCommonOpts ( ) . getHelp ( ) )
assertNotNull ( is )
assertEquals ( value , nodeState2 . getProperty ( property ) )
assertEquals ( 0 , dumpDir . listFiles ( ) . length )
assertThrows ( ClassNotFoundException . class , ( ) -> command . checkTikaDependency ( ) )
assertThat ( config1 , is ( equalTo ( config2 ) ) )
assertEquals ( IOUtils . toString ( new FileInputStream ( output ) , StandardCharsets . UTF_8 ) , buildIndexes . toString ( ) )
assertEquals ( new Revision ( i , 0 , 1 ) , map . get ( Path . fromString ( "/some/test/path/node-" + i ) ) )
assertEquals ( 2 , files . count ( ) )
assertEquals ( 3 , files . count ( ) )
assertEquals ( output . contains ( message ) , true )
assertThat ( output , containsString ( message ) )
assertEquals ( client1 , client2 )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( ps )
assertThat ( inOperandStringValues ( ) , containsInAnyOrder ( "a" , "e" , "i" ) )
assertThat ( inOperandLongValues ( ) , contains ( "/test/node-2" , "/test/node-3" , "/test/node-5" , "/test/node-7" ) )
assertThat ( inOperandDoubleValues ( ) , containsInAnyOrder ( 2.0 , 3.0 , 5.0 , 7.0 ) )
assertQuery ( "//*[jcr:contains(@analyzed_field, 'foo}')] " , XPATH , Collections . emptyList ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( 1 , planner . getSortEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . getPaths ( ) . size ( ) )
assertNotNull ( planner )
assertNotNull ( planner )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . getPaths ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/test2" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . getPaths ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 10 , counter . get ( ) )
assertEquals ( 0 , cache . getCacheStats ( ) . size ( ) )
assertEquals ( "foo" , text )
assertEquals ( "foo" , text )
assertEquals ( "bar" , text )
assertEquals ( "bar" , text )
config should  not be  null .
assertEquals ( seed1 , seed2 )
assertEquals ( rule , getApplicableIndexingRule ( primaryNodeType ) )
assertNotNull ( getApplicableIndexingRule ( primaryNodeType ) )
assertEquals ( new File ( "/foo" ) , extractor . getIndexDefinition ( ) . getRoot ( ) )
assertEquals ( 0 , builder . getLimit ( ) )
assertNotNull ( estimate )
assertEquals ( mse , currentMSE )
assertEquals ( value , state . getProperty ( property ) )
assertEquals ( "y" , test . getProperty ( "foo" ) . getString ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( result )
assertNotNull ( getName ( ) )
assertEquals ( "<expected value>" , getPath ( ) )
assertNull ( keyMapping . get ( convert ( key ) ) )
assertEquals ( name , parent . create ( name ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getName ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( result )
assertEquals ( 1 , verify ( child , times ( 1 ) ) . removeProperty ( propName ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getName ( ) )
assertEquals ( "<expected value>" , getPath ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( result )
assertEquals ( true , child . remove ( ) )
assertEquals ( false , child . remove ( ) )
assertEquals ( null , location . remove ( ) )
assertEquals ( "TreeLocation.create(rootTree)" , location . toString ( ) )
assertNotNull ( getType ( test . getTree ( ) , test . getParent ( ) ) )
assertEquals ( test . getType ( ) , expectedType )
assertNull ( primaryTypeName )
assertEquals ( child . getPath ( ) , t . getPath ( ) )
assertEquals ( relPath , child . getPath ( ) )
assertNotNull ( t )
assertEquals ( root . getTree ( authorizable . getPath ( ) ) , < AssertPlaceHolder >  )
assertEquals ( null , getTree ( authorizable , root ) )
assertEquals ( null , getTree ( authorizable , root ) )
assertEquals ( state , target . getChildNode ( name ) )
AssertPlaceHolder = "assertTrue(child.exists());"
assertEquals ( t , rootTree . addChild ( "newChild" ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( getName ( ) )
assertSame ( ConfigurationParameters . EMPTY , compositeConfiguration . getParameters ( ) )
assertNotNull ( compositeConfiguration . getDefaultConfig ( ) )
assertNotNull ( base . getParameters ( ) )
assertEquals ( defaultValue , getConfigValue ( "test" , defaultValue , targetClass ) )
assertThrows ( IllegalArgumentException . class , ( ) -> getConfigValue ( "str" , "abc" , String . class ) )
assertNull ( params . getConfigValue ( "str" , null , Boolean . class ) )
assertNull ( options . get ( "test" ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( connection , create ( ) )
assertEquals ( 5 , getConfiguration ( ) . getAppConfigurationEntry ( "" ) . length )
assertEquals ( 5 , entries . length )
assertEquals ( "expected size of configurations is 0" , 0 , configurations . size ( ) )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( true , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
AssertPlaceHolder = "assertTrue(sessions.contains(session));"
assertEquals ( false , transientWrites )
assertEquals ( 1 , ( ( Destroyable ) creds ) . destroy ( ) )
assertEquals ( false , transientWrites )
AssertPlaceHolder = "assertThrows(SQLFeatureNotSupportedException.class, () -> loginModule.abort(null));"
AssertPlaceHolder = "assertThrows(SQLFeatureNotSupportedException.class, () -> loginModule.abort(null));"
assertNotNull ( credentials )
assertEquals ( TestCredentials . class , lm . getCredentials ( ) . getClass ( ) )
assertEquals ( null , lm . getCredentials ( ) )
assertEquals ( UnsupportedCallbackException . class , lm . getCallbackException ( ) )
assertNull ( credentials )
assertEquals ( null , loginModule . getSharedPreAuthLogin ( ) )
assertNull ( getSharedPreAuthLogin ( ) )
assertSame ( root , loginModule . getRoot ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( loginModule . getRoot ( ) )
assertSame ( securityProvider , loginModule . getSecurityProvider ( ) )
assertEquals ( TestSecurityProvider . class , loginModule . getSecurityProvider ( ) . getClass ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( loginModule )
assertSame ( wb , loginModule . getWhiteboard ( ) )
assertNotNull ( getWhiteboard ( ) )
assertThrows ( IOException . class , ( ) -> loginModule . getWhiteboard ( ) )
assertThrows ( UnsupportedCallbackException . class , ( ) -> loginModule . getWhiteboard ( ) )
assertNull ( loginModule . getWhiteboard ( ) )
assertNotNull ( userManager )
assertEquals ( expectedUserManager , loginModule . getUserManager ( ) )
assertEquals ( "Expected exception of type IOException" , IOException . class , assertThrows ( IOException . class , ( ) -> loginModule . getUserManager ( ) ) )
assertEquals ( UnsupportedCallbackException . class , assertThrows ( UnsupportedCallbackException . class , ( ) -> loginModule . getUserManager ( ) ) )
assertEquals ( um , loginModule . getUserManager ( ) )
AssertPlaceHolder = "Assert.assertNotNull(loginModule);"
AssertPlaceHolder
assertEquals ( null , loginModule . getSecurityProvider ( ) )
assertEquals ( 0 , principals . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( null , getUserID ( ) )
assertEquals ( null , attributeName )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( "empty" , ? ? ? )
assertEquals ( null , getUserID ( ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( getPrincipals ( searchType ) )
assertEquals ( "empty" , info . toString ( ) )
assertEquals ( "empty" , toString ( ) )
assertEquals ( SQLFeatureNotSupportedException . class , assertThrows ( LoginException . class , ( ) -> abort ( null ) ) . getCause ( ) . getClass ( ) )
assertEquals ( null , session )
assertEquals ( "name" , ctx . getName ( ) )
assertEquals ( SystemSubject . INSTANCE , subject )
assertEquals ( SystemSubject . INSTANCE , subject )
assertEquals ( SystemSubject . INSTANCE , subject )
assertNotNull ( getUserId ( ) )
assertNull ( getUserId ( ) )
assertNotNull ( getPrincipals ( searchType ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( repo , cb . getContentRepository ( ) )
assertSame ( sp , cb . getSecurityProvider ( ) )
assertEquals ( wspName , cb . getWorkspaceName ( ) )
assertNotNull ( cb . getLoginModuleMonitor ( ) )
assertNotNull ( getUserId ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( EMPTY , ConfigurationParameters . of ( new Dictionary < > ( ) ) )
composite . getName ( )
assertEquals ( 2 , tp . getProviders ( ) . size ( ) )
assertSame ( info , composite . getTokenInfo ( TOKEN ) )
assertEquals ( properties . size ( ) , options . size ( ) )
assertEquals ( "expired" , e . getMessage ( ) )
assertNull ( ace . getRestrictions ( ) )
assertEquals ( null , val )
assertEquals ( null , ace . getRestriction ( s ) )
assertNotNull ( val )
vs . length == 0
assertTrue ( "ACE should be created with testPrincipal, JCR_READ privilege, and isAllow flag set to true" , ace . getPrincipal ( ) . equals ( testPrincipal ) && ace . getPrivilegeBits ( ) . equals ( PrivilegeBits . BUILT_IN . get ( JCR_READ ) ) && ace . isAllow ( ) )
assertEquals ( expectedACE , ace )
assertEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( "val" , ace . getRestriction ( ) . getValue ( ) )
assertNotNull ( acl )
assertNotNull ( getOakPath ( validPrincipal ) )
assertEquals ( "expected size after adding one entry" , 1 , list . size ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( getRestrictionType ( null ) )
assertEquals ( 0 ,  < AssertPlaceHolder > . size ( ) )
assertEquals ( root , accessControlManager . getMgrProvider ( this . root ) )
assertNotNull ( getOakPath ( null ) )
assertEquals ( null , getTree ( null , 0 , false ) )
assertEquals ( "No tree at " + oakPath , e . getMessage ( ) )
assertSame ( pbp , acMgr . getPrivilegeBitsProvider ( ) )
assertNotNull ( p )
assertTrue ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) . isEmpty ( ) )
assertTrue ( Arrays . equals ( privileges , cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertTrue ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) . isEmpty ( ) )
assertTrue ( pc . isEmpty ( ) )
assertEquals ( "invalid privilege name must be detected" , e . getMessage ( ) )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( options )
assertEquals ( 0 , names . size ( ) )
assertEquals ( str , Permissions . getString ( permission ) )
assertEquals ( "ALL" , str )
assertEquals ( "" , str )
assertEquals ( expected , actual )
assertEquals ( repoPermissions . contains ( permission ) , true )
assertNotNull ( getString ( ) )
assertNotNull ( getString ( ) )
assertThat ( hadNext ) . isTrue ( )
assertEquals ( 0 , restrictions . size ( ) )
assertEquals ( 0 , restrictions . size ( ) )
assertNotNull ( restrictionTree )
assertNotNull ( restrictionTree )
assertEquals ( 2 , rp . size ( ) )
assertEquals ( "empty" , ? ? ? )
assertNotNull ( getName ( ) )
assertNotNull ( rd . getName ( ) )
assertEquals ( def , tree . getProperty ( pInfo . asPropertyState ( def ) ) )
assertEquals ( null , getDefinition ( ) )
assertNull ( r . getDefinition ( ) )
assertEquals ( null , getDefinition ( ) )
assertEquals ( NodeState . class , ? ? ? getDefinition ( ) )
assertEquals ( true , ? ? ? getDefinition ( ) . isMandatory ( ) )
assertEquals ( def , tree . getProperty ( pInfo . asPropertyState ( def ) ) )
assertEquals ( null , ? ? ? getDefinition ( ) )
assertEquals ( pInfo . asPropertyState ( def ) , tree . getProperty ( pInfo . getName ( ) ) )
assertNotNull ( pMgr )
pp = getComposite ( ) . getPrincipalProvider ( root , NamePathMapper . DEFAULT )
assertEquals ( testConfig , pMgr . getConfiguration ( ) )
assertEquals ( principalConfigurationMock , pMgr . getPrincipalConfiguration ( ) )
assertSize ( 2 , ( CompositePrincipalProvider ) pp )
assertNotNull ( getPrincipalUnknown ( ) )
assertNotNull ( principal )
assertNotNull ( principal )
assertEquals ( p , pp . getItemBasedPrincipal ( anyString ( ) ) )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( "expected_id" , getIDFromPrincipal ( principal ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( getName ( ) )
assertEquals ( EMPTY , InMemoryDataRecord . getInstance ( new byte [ 0 ] ) )
assertEquals ( Objects . hashCode ( data ) , Objects . hashCode ( InMemoryDataRecord . getInstance ( data ) ) )
assertNotNull ( getName ( ) )
assertEquals ( "name" , p . getName ( ) )
assertNotEquals ( "name" , p . getName ( ) )
assertEquals ( EMPTY , getInstance ( new byte [ 0 ] ) )
assertNotNull ( pcpl . getName ( ) )
assertEquals ( "Unknown" , getName ( ) )
assertNull ( getPrincipal ( "unknown" ) )
assertNotNull ( memb . getName ( ) )
assertNotNull ( getGroupMembership ( principal ) )
assertNotNull ( getGroupMembership ( principal ) )
it . hasNext ( )
assertEquals ( 1 , it . size ( ) )
assertEquals ( 1 , it . size ( ) )
it . hasNext ( )
it . hasNext ( )
assertEquals ( "TestPrincipalProvider.UNKNOWN.getName().substring(0, 4)" , unknownHint )
assertEquals ( "TestPrincipalProvider.UNKNOWN.getName().substring(0, 4)" , unknownHint )
assertEquals ( "TestPrincipalProvider.UNKNOWN.getName().substring(0, 4)" , unknownHint )
assertNotNull ( getItemBasedPrincipal ( principalOakPath ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( getName ( ) )
assertEquals ( "Expected name to be not null" , ? ? ? getName ( ) , ? ? ? SystemPrincipal . INSTANCE . getName ( ) )
assertNotNull ( getName ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "anyName" , propertyState . getName ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( expected , asPropertyState ( "anyName" , bits , provider ) )
assertEquals ( getAllBits ( provider ) , getPrivilegeBits ( propertyState , provider ) )
assertThat ( asPropertyState ( "name" , bits , provider ) , is ( equalTo ( expectedPropertyState ) ) )
assertEquals ( type , PropertyType . REFERENCE )
assertEquals ( true , privilegesTree . exists ( ) )
assertEquals ( PrivilegeBits . EMPTY , getBits ( ) )
assertEquals ( PrivilegeBits . EMPTY , getBits ( ) )
assertEquals ( PrivilegeBits . EMPTY , getBits ( ) )
assertEquals ( bits1 , bits2 )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 0 , names . size ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( copyOf )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( ImmutableSet . of ( JCR_LOCK_MANAGEMENT , JCR_READ_ACCESS_CONTROL ) , result )
assertThat ( result ) . containsExactlyElementsIn ( expected )
assertEquals ( expected , ImmutableSet . copyOf ( result ) )
assertEquals ( expected , result )
assertEquals ( EMPTY , ? ? ? getInstance ( new byte [ 0 ] ) )
assertEquals ( toTest , bits )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertArrayEquals ( bits , diff ( bits , other . longValues ( ) ) ) ;
assertEquals ( next . asPropertyState ( REP_BITS ) , tmp . getProperty ( REP_BITS ) )
assertEquals ( JCR_READ , readPrivTree . getName ( ) )
assertEquals ( JCR_LIFECYCLE_MANAGEMENT , oakName )
assertTrue ( list . isEmpty ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( hint , generateNodeName ( hint ) )
assertNotNull ( creds . getUserId ( ) )
assertEquals ( 1 , action . getLogs ( ) . size ( ) )
assertEquals ( 1 , action . getLogs ( ) . size ( ) )
assertTrue ( "Empty list should be empty" , cap . isEmpty ( ) )
assertEquals ( aap , aap2 )
assertEquals ( aap , aap2 )
assertEquals ( "[" , action . getPattern ( ) )
assertEquals ( null , buildPasswordHash ( null ) )
assertEquals ( "" , buildPasswordHash ( "" ) )
assertEquals ( "" , buildPasswordHash ( "" ) )
assertEquals ( test , createTree ( builder ) . getTypes ( ) )
assertEquals ( expected , createTree ( builder ) . isType ( ntName ) )
assertEquals ( expected , createTree ( builder ) . isTypeAuthorizable ( ntName ) )
assertEquals ( test . get ( UserConstants . NT_REP_GROUP ) , AuthorizableType . GROUP )
assertEquals ( ntName , createTree ( builder ) . getType ( ) )
assertEquals ( expected , actual )
assertEquals ( null , getAuthorizableRootPath ( parameters , type ) )
assertNotNull ( createTree ( ntName , id ) )
assertNotNull ( createTree ( ntName , id ) )
assertNotNull ( createTree ( ntName , id ) )
assertNotNull ( getName ( ) )
assertNotNull ( getPrimaryTypeName ( tree ) )
assertEquals ( "Expected mixin type name" , expectedMixinTypeName , actualMixinTypeName )
assertNotNull ( getUUID ( ) )
assertEquals ( "value" , propInfo . getName ( ) )
assertEquals ( PropertyType . PATH , propInfo . getType ( ) )
assertEquals ( tv , propInfo . getTextValue ( ) )
assertEquals ( tv , propInfo . getTextValue ( ) )
assertNotNull ( getValue ( "string" ) )
assertEquals ( "value" , getValue ( "string" ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , rct . size ( ) )
assertNotNull ( getChildNode ( "name" ) )
assertEquals ( "v2" , base . getRoot ( ) . getChildNode ( "foo" ) . getChildNode ( "bar" ) . getProperty ( "version" ) )
assertEquals ( "v2" , split . getRoot ( ) . getChildNode ( "foo" ) . getChildNode ( "bar" ) . getProperty ( "version" ) )
assertEquals ( lines , entries )
assertReadAccessGranted ( persistence , BLOBS )
assertWriteAccessGranted ( persistence )
assertWriteAccessNotGranted ( persistence )
assertWriteAccessGranted ( persistence )
assertWriteAccessGranted ( persistence )
assertEquals ( entries , reader . readAllLines ( ) )
assertEquals ( 0 , entries . size ( ) )
assertEquals ( entries . size ( ) , 10 )
assertThat ( store . isReleased ( cp ) ) . isTrue ( )
assertEquals ( 0 , compactor . getCancelledCount ( ) )
assertEquals ( 10000 , getRevisions ( ) . size ( ) )
assertEquals ( defaultValue , toString ( propValue , defaultValue ) )
assertFalse ( EMPTY_STORE . containsSegment ( SegmentId . NULL ) )
assertEquals ( entries , iterated )
assertEquals ( message , logCustomizerBuilder . contains ( message ) )
assert set . contains ( 42 )
assertTrue ( reference > 0 )
assertEquals ( firstReference + 1 , secondReference )
assertEquals ( reference , 0 )
assertEquals ( first , second )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertEquals ( "loader #" + segment + " offset " + offset , x )
assertEquals ( KEYS - misses - fails , cacheStats . getHitCount ( ) )
assertEquals ( ( KEYS - ( double ) misses - fails ) / KEYS , cacheStats . getHitRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getMissCount ( ) )
assertEquals ( ( ( double ) misses + fails ) / KEYS , cacheStats . getMissRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getLoadCount ( ) )
assertEquals ( misses , cacheStats . getLoadSuccessCount ( ) )
assertEquals ( fails , cacheStats . getLoadExceptionCount ( ) )
assertEquals ( ( double ) fails / ( misses + fails ) , cacheStats . getLoadExceptionRate ( ) , Double . MIN_VALUE )
assertTrue ( loadTime <= cacheStats . getTotalLoadTime ( ) )
assertTrue ( ( ( double ) loadTime / ( misses + fails ) ) <= cacheStats . getAverageLoadPenalty ( ) )
assertEquals ( KEYS + misses , cacheStats . getElementCount ( ) )
assertEquals ( Long . MAX_VALUE , cacheStats . getMaxTotalWeight ( ) )
assertEquals ( KEYS + misses , cacheStats . estimateCurrentWeight ( ) )
assertNotNull ( after )
assertEquals ( before , after )
assertEquals ( before , after )
assertNotNull ( state . getProperty ( "jcr:primaryType" ) )
assertThat ( state . getProperty ( "jcr:mixinTypes" ) . getType ( ) , is ( PropertyType . STRING ) )
assertEquals ( null , res . get ( ) )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( existingAfterGC , new HashSet < > ( ) , "GC should remove all special character nodes" )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( null , mapInfo . getRecordId ( null ) )
assertEquals ( 0 , builder . binariesInlineThreshold ( ) )
assertEquals ( base . getRecordId ( ) , ro . getHead ( ) . getRecordId ( ) )
fail ( "Expected exception was not thrown" )
assertEquals ( 1 , in . getGeneration ( ) )
assertEquals ( true , in . getGCGeneration ( 1 ) . isCompacted ( ) )
assertEquals ( 2 , before . getStoreVersion ( ) )
assertEquals ( backend . read ( new DataIdentifier ( key ) ) , < expected value >  )
assertEquals ( defaultStoreVersion , ? ? ? load ( "someKey" ) . getVersion ( ) )
assertEquals ( "data" , property . getName ( ) )
assertEquals ( n . getBackend ( ) , mockBackend ( ) )
assertEquals ( n . getBackend ( ) , mockBackend ( ) )
assertEquals ( Optional . empty ( ) , backend . getSegment ( "s" ) )
assertEquals ( true , segment . isDataSegment ( ) )
assertEquals ( Optional . of ( segment ) , backend . getSegment ( "s" ) )
assertArrayEquals ( entries , new SegmentArchiveEntry [ ] { new SegmentArchiveEntry ( msb , lsb , buffer , 0 , buffer . length , newGCGeneration ( 1 , 2 , false ) ) } )
assertArrayEquals ( entries , new SegmentArchiveEntry [ ] { new SegmentArchiveEntry ( msb , lsb , buffer , 0 , buffer . length , new GCGeneration ( 1 , 2 , true ) ) } )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertEquals ( "expected size after adding one element" , 1 , list . size ( ) )
assertEquals ( "expected size after writeSegment" , 1 , list . size ( ) )
assertEquals ( 2 , fileStore . getSegmentCount ( ) )
assertEquals ( 2 , fileStore . getSegmentCount ( ) )
assertFalse ( EMPTY_STORE . containsSegment ( SegmentId . NULL ) )
assertEquals ( true , EMPTY_STORE . containsSegment ( SegmentId . NULL ) )
assertEquals ( 1 , tarFiles . getSegments ( ) . size ( ) )
assertEquals ( segmentId , assertThrows ( SegmentNotFoundException . class , ( ) -> focalMethodCall ) . getSegmentId ( ) )
assertThrows ( SegmentNotFoundException . class , ( ) -> readSegment ( segmentId ) )
assertThrows ( SegmentNotFoundException . class , ( ) -> focalMethodCall )
assertEquals ( expected , graph )
assertEquals ( sizeBefore + 42 , sizeAfter )
assertEquals ( "Invalid magic number" , e . getMessage ( ) )
assertEquals ( "Invalid index exception should be thrown" , InvalidIndexException . class , e . getClass ( ) )
assertEquals ( v1 . loadIndex ( reader ) , ? ? ? )
assertEquals ( "Invalid index exception should be thrown" , InvalidIndexException . class , e . getClass ( ) )
assertEquals ( 10 , buffer . position ( ) )
assertEquals ( 2 * IndexEntryV2 . SIZE , buffer . position ( ) )
assertThat ( blobId , is ( notNullValue ( ) ) )
assertThat ( blobId , is ( notNullValue ( ) ) )
assertEquals ( "clientId" , "blobId" , message )
assertEquals ( "GET /head?clientId=clientId HTTP/1.1\r\n\r\n" , message )
assertEquals ( expected , buffer )
assertEquals ( "clientId" , "clientId" )
assertEquals ( expected , buffer )
assertEquals ( "expectedValue" , message )
assertEquals ( expected , buffer )
assertEquals ( "Expected message" , expectedMessage , extractMessageFromPayloadWithoutMagic ( ) )
assertEquals ( null , extractMessageFromEmptyPayload ( ) )
assertEquals ( "Expected message not extracted" , expectedMessage , extractMessageFrom ( payload ) )
assertEquals ( "Expected message not extracted" , expectedMessage , extractMessageFromPayloadWithoutClient ( ) )
assertEquals ( "expectedValue" , extractClientFromPayloadWithoutMagic ( ) )
assertEquals ( null , extractClientFromEmptyPayload ( ) )
assertEquals ( "expectedClient" , extractClientFrom ( payload ) )
assertEquals ( "expectedClient" , extractClientFromPayloadWithoutClient ( ) )
assertEquals ( "clientId" , request . getClientId ( ) )
assertEquals ( recordId , response . getHeadRecordId ( ) )
assertEquals ( new InetSocketAddress ( InetAddress . getByName ( client ) , 8080 ) , createAddress ( ) )
assertEquals ( null , r . readBlob ( "test" ) )
assertEquals ( null , r . readBlob ( "id" ) )
assertEquals ( persistedHead . toString ( ) , "<expected value>" )
assertNull ( reader . getSegment ( "nonexistent" ) )
assertEquals ( "expectedID" , focalMethod . getID ( ) )
assertEquals ( "expected size is 1" , 1 , list . size ( ) )
assertEquals ( "list size must be 20" , 20 , list . size ( ) )
assertEquals ( "client" , observer . getClientName ( ) )
assertEquals ( "127.0.0.1" , observablePartnerMBean . getRemoteAddress ( ) )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( "request" , getLastRequest ( ) )
assertEquals ( new Date ( ) , observablePartnerMBean . getLastSeen ( ) )
assertEquals ( before , after )
assertEquals ( "expectedValue" , observablePartnerMBean . getLastSeenTimestamp ( ) )
assertEquals ( 100 , observer . getSentSegmentBytes ( "client" ) )
assertEquals ( 100 , observer . getSentSegmentsSize ( ) )
assertEquals ( 100 , observer . getSentBinariesBytes ( "client" ) )
assertEquals ( 100 , observer . getSentBinariesSize ( ) )
assertEquals ( "empty list must be 0-sized" , 0 , list . size ( ) )
assertEquals ( test , roundtripped )
assertNotNull ( remoteSolrServerProvider )
assertNotNull ( embeddedSolrServerProvider )
assertEquals ( OakSolrConfigurationDefaults . CATCHALL_FIELD , nodeStateConfiguration . getCatchAllField ( ) )
assertEquals ( collection , "sample_" + System . nanoTime ( ) )
assertEquals ( 1 , ctx . getServices ( MountInfoProvider . class ) . size ( ) )
assertEquals ( 3 , provider . getMountInfo ( ) . size ( ) )
assertEquals ( null , d )
assertEquals ( desc . size ( ) , expectedSize )
assertEquals ( blobLength , length )
assertEquals ( "v" , ns . getRoot ( ) . getProperty ( "p" ) . getValue ( ) )
assertEquals ( info , Collections . emptyMap ( ) )
assertEquals ( false , createInactive ( true ) . isActive ( ) )
assertEquals ( false , ? ? ? )
assertEquals ( null , getTime ( 0 ) )
assertEquals ( defaultLeaseCheckMode ( ) , "<expected value>" )
assertEquals ( "branchVisible" , nodes . contains ( "branchVisible" ) )
assertEquals ( "Must fail with DocumentStoreException" , e . getMessage ( ) )
assertEquals ( true , op . isDeleted ( ) )
assertEquals ( op . getOperationType ( ) , UpdateOp . Operation . ADD )
assertEquals ( true , op . isDeleted ( ) )
assertEquals ( "v" , op . getValue ( ) )
assertEquals ( null , op )
assertNotNull ( c . getStartRevisions ( ) )
assertNotNull ( c )
assertEquals ( "expectedValue" , val )
assertEquals ( "conflict" , cfe . getMessage ( ) )
assertJsonEquals ( expectedNode , mergedNode )
String assertLine = "assertEquals(\"expectedValue\", jsop);"
assertEquals ( rebased , branch )
assertEquals ( rebased , branch )
assertNotNull ( state )
assertEquals ( 2 , ns . getPropertyCount ( ) )
assertNotNull ( bean . getRevision ( ) )
assertThat ( bean . getRevision ( ) , equalTo ( entry . getRevision ( ) ) )
assertFalse ( config . getBoolean ( "socketKeepAlive" ) )
assertEquals ( includes , config . getPersistentCacheIncludes ( ) )
assertEquals ( jobScheduled , true )
assertNotNull ( clusterNodeInfo )
assertNotNull ( clusterNodeInfo )
"<AssertPlaceHolder>"
assertNotNull ( statisticManager . getStatsCounter ( type ) )
assertEquals ( 7 , writeStats . num )
assertEquals ( 10 , counter . get ( ) )
AssertPlaceHolder = "assertEquals(documentStore, store);"
assertEquals ( true , clusterNodeInfo . renewLease ( ) )
assertEquals ( false , clusterNodeInfo . renewLease ( ) )
assertEquals ( true , "<AssertPlaceHolder>" )
assertEquals ( DocumentMK . UPDATE_LIMIT + 1 , Iterables . size ( b1 . getChildNode ( "child" + DocumentMK . UPDATE_LIMIT ) . getChildNodeNames ( ) ) )
assertEquals ( NUM_CHILDREN , b1 . getChildNodeCount ( ) )
assertEquals ( 2 , ws . getWriteCount ( ) )
assertEquals ( 3 , ws . getWriteCount ( ) )
assertEquals ( updateLimit , ns . getUpdateLimit ( ) )
assertEquals ( "bar" , ns . getRoot ( ) . getChildNode ( "bar" ) . getName ( ) )
assertEquals ( "must fail with CommitFailedException" , e . getMessage ( ) )
assertEquals ( "must fail with DocumentStoreException" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , e . getMessage ( ) )
assertNotNull ( checkpoint ( lifetime ) )
assertEquals ( store . isDisposed ( ) , true )
assertThat ( store . checkpointInfo ( ref ) , equalTo ( info ) )
assertThat ( copiedRecsFile . getPath ( ) ) . isEqualTo ( path )
assertEquals ( ref , checkpoint )
assertNotNull ( path )
assertEquals ( 1 , ns . getSplitCandidates ( ) . size ( ) )
assertEquals ( 1 , ns . getSplitCandidates ( ) . size ( ) )
AssertPlaceHolder = "assertTrue(success);"
assertEquals ( "0.9.7" , v . toString ( ) )
assertEquals ( "Unnamed item definition" , exception . getMessage ( ) )
assertEquals ( "10" , getSize ( "/foo" ) )
assertEquals ( "{/foo=, /bar=+\"qux\"}" , diff . diffFromAsString ( ) )
assertEquals ( diff , diff2 )
assertEquals ( 1000 , ? ? ? nodeChildrenCache ( ) . size ( ) )
assertEquals ( "foo/bar" , p . toString ( ) . trim ( ) )
assertEquals ( expected , key )
assertEquals ( NUM_REVS_THRESHOLD + 1 , docs )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , existingAfterGC . size ( ) )
blobs . hasNext ( )
assertEquals ( expected , paths )
assertEquals ( 6 , uncommittedRevisions )
assertEquals ( 0 , uncommittedRevisions )
assertEquals ( 1 , tds . paths . size ( ) )
assertEquals ( expected , paths )
assertEquals ( expected , ? ? ? )
assertThrows ( IllegalArgumentException . class , ( ) -> new Path ( p ) )
assertNotNull ( getRoot ( ) . getChild ( "child" ) )
assertEquals ( rv , ? ? ? getBranchRevision ( ) )
assertEquals ( rv , rvFromStr )
assertEquals ( null , asString ( empty ) )
assertEquals ( true , success )
assertEquals ( sweepRev , ns2 . getSweepRevisions ( ) )
t . assertEndNotLaterThan ( end + 1 )
t . assertNotEarlierThan ( start - 1 )
t . assertEquals ( fromMs , t . getStart ( ) )
assertEquals ( 0 , processingTime . get ( ) )
assertNotNull ( find ( collection , key ) )
assertNotNull ( find ( collection , key ) )
assertTrue ( Sets . symmetricDifference ( cluster . blobStoreState . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertEquals ( 0 , store . findVersionGC . get ( ) )
assertThat ( deletedOnceCountCalls . get ( ) ) . isEqualTo ( 0 )
assertEquals ( "expectedValue" , actualValue )
assertTrue ( "The property 'nt:file' should have been set with the property 'jcr:content'" , registry . hasProperty ( "nt:file" , "jcr:content" ) )
assertEquals ( 1 , registry . getMixinTypes ( ) . size ( ) )
assertEquals ( "nt:file" , builder . getProperty ( JCR_FROZENPRIMARYTYPE ) . getValue ( ) . getString ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( "Node '/test/book.jpg/jcr:content' should have been removed" , e . getMessage ( ) )
assertEquals ( "Node '/test/book.jpg/jcr:content' should not be modified" , "Node '/test/book.jpg/jcr:content' is modified" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , "CommitFailedException" , e . getMessage ( ) )
assertEquals ( "CommitFailedException expected" , "CommitFailedException" , e . getClass ( ) . getSimpleName ( ) )
assertEquals ( 0 , result . size ( ) )
assertThat ( pr . getName ( ) , is ( "book.jpg" ) )
assertEquals ( 1L , getModCount ( ) )
assertEquals ( totalPaths , ds ( c1 ) . getCache ( ) . size ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( configuredCompressor )
AssertPlaceHolder = "Assert.assertNull(builder.getDocStoreThrottlingFeature());"
assertEquals ( true , builder . isCollectionCompressionDisabled ( ) )
assertNotNull ( createMissingLastRevSeeker ( ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( 50 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 50 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertThrows ( IllegalArgumentException . class , ( ) -> connectionFactory . getConnection ( ) )
assertEquals ( 0 , docs . size ( ) )
assertEquals ( 0 , nodeCache . size ( ) )
assertEquals ( empty , revisionVectorFromBuffer ( rb ) )
assertEquals ( "r9-0-1,br7-0-2" , revisions . toString ( ) )
assertEquals ( p , pathFromBuffer ( rb ) )
assertEquals ( "/foo/bar/quux" , p . toString ( ) )
assertEquals ( p , pathFromBuffer ( rb ) )
assertEquals ( p , pathFromBuffer ( rb ) )
assertEquals ( expected , pathRevFromBuffer ( rb ) )
assertEquals ( expected , namePathRevFromBuffer ( rb ) )
assertThat ( requests , equalTo ( 1 ) )
assertEquals ( null , doc . getModified ( ) )
assertEquals ( 0 , cnt )
assertEquals ( 2 , secondaryRoot ( ) . getChildNodeCount ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( k1 , k2 )
assertEquals ( test , roundtripped )
assertEquals ( false , throttlingEnabled )
assertEquals ( true , throttlingEnabled )
assertEquals ( false , throttlingEnabled )
assertEquals ( b , Utils . max ( a , b ) )
assertEquals ( a , Utils . min ( a , b ) )
assertEquals ( 1 , doc . getLastRev ( ) . getClusterId ( ) )
assertEquals ( false , closed . get ( ) )
assertEquals ( 0 , rv . getDimensions ( ) )
assertNotNull ( nodeState2 . getProperty ( "name" ) )
assertEquals ( expectedOrder , childNames )
assertEquals ( getBaseState ( ) , root . getNodeState ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( builder ( ) )
assertEquals ( date , builder . getPropertyState ( ) . getValue ( ) )
assertEquals ( Arrays . asList ( date1 , date2 ) , builder . getValues ( ) )
assertEquals ( source , builder . getPropertyState ( ) )
assertEquals ( nameProperty , namePropertyFromValue )
assertEquals ( "oak-prefix:a/oak-prefix:b" , pathPropertyFromPathValue ( ) . getString ( ) )
assertEquals ( expected , actual )
assertThrows ( IOException . class , ( ) -> ? ? ? getStreamWithError ( ) . read ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( 0 , mt . getMoves ( ) . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( blobLength , length )
assertEquals ( "expected size after adding one entry" , 1 , list . size ( ) )
assertNotNull ( blobStore )
assertEquals ( "empty" , factory . toString ( ) )
assertEquals ( blobId , getBlobId ( ) )
assertThat ( getReference ( ) , is ( equalTo ( blobId ) ) )
assertEquals ( blobId . length ( ) , getBlobLength ( blobId ) )
assertEquals ( matcher . group ( 1 ) , "<expected value>" )
assertEquals ( "" , stripValue ( "\"   \"" ) )
assertThat ( stripValue ( "input" ) ) . isEqualTo ( "expected" )
assertEquals ( "" , stripValue ( "" ) )
assertEquals ( "abc" , task . getUserName ( ) )
assertEquals ( "xyz" , task . getPassword ( ) )
assertEquals ( "jdbc:///" , task . getUrl ( ) )
assertEquals ( "DbImporterTask" , DbImporterTask . class , getCdbImport ( "build.xml" ) . getClass ( ) )
assertThat ( hasNoDuplicates ) . isTrue ( )
assertEquals ( fullyQualifiedType , formatJavaType ( baseType ) )
assertEquals ( "LAST_NAME" , capitalizedAsConstant ( "lastName" ) )
assertEquals ( expected , capitalizedAsConstant ( "aClass" ) )
assertEquals ( expected , capitalizedAsConstant ( "varA" ) )
assertEquals ( expected , capitalizedAsConstant ( "lastName" ) )
assertEquals ( expected , capitalizedAsConstant ( "abcA" ) )
assertEquals ( expected , capitalizedAsConstant ( "a123" ) )
assertEquals ( expected , capitalizedAsConstant ( "abCdef" ) )
assertEquals ( expected , capitalizedAsConstant ( "abCe" ) )
assertEquals ( "../testTemplate.vm" , cgenConfiguration . getTemplate ( ) . getTemplatePath ( ) )
assertEquals ( "testTemplate2.vm" , cgenConfiguration . getTemplate ( ) . getName ( ) )
assertEquals ( tempFolder . getRoot ( ) . getParent ( ) , cgenConfiguration . getRootPath ( ) )
assertSame ( changes . getChanges ( ) . size ( ) , 2 )
assertEquals ( 2 , logs . size ( ) )
assertNotNull ( f )
assertEquals ( expectedOutput1 , output1 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "expectedValue" , converter . fromBytes ( bytes ) )
assertEquals ( "" , converter . fromBytes ( new byte [ ] { } ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertNull ( e . encrypt ( null , null ) )
assertEquals ( 36.6d , originalValue , 0.001 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "0.0" , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( - 36.6f , originalValue , 0.001 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "0.0" , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "expectedValue" , focalMethod ( bytes ) )
assertEquals ( "expectedValue" , focalMethod ( bytes ) )
assertNotNull ( date ( "2022-01-01 00:00:00" ) )
assertArrayEquals ( new byte [ ] { 1 , 3 , 5 } , output )
assertArrayEquals ( new byte [ ] { 1 , 3 , 5 , 8 } , output )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 0 , db . size ( ) )
assertEquals ( 1 , tokens . size ( ) )
assertEquals ( 1 , tokens . size ( ) )
assertEquals ( 1 , tokens . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , dataMap1 . getProcedures ( ) . size ( ) )
assertNotNull ( dbEntity . getAttribute ( "NEWCOL1" ) )
assertNotNull ( column )
assertArrayEquals ( expected . toArray ( ) , actual . toArray ( ) )
assertArrayEquals ( expected . toArray ( ) , actual . toArray ( ) )
assertNotNull ( column )
assertNotNull ( dbEntity . getAttribute ( "NEWCOL2" ) )
assertThat ( entity . getCallbackMethods ( ) ) . contains ( name )
assertEquals ( "expectedValue" , stem ( "dbEntityName" ) )
assertEquals ( adapter . getPkGenerator ( ) , ? ? ? )
This line  of code  asserts that  the getInstance  ( ) method of the StringUtils class returns an instance of the StringUtils class .
manyToManyEntity . assertMatches ( DataMapMerger . build ( tokenFactory ) )
assertEquals ( 1 , entity . getDbEntity ( ) . getAttributes ( ) . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( 0 , map . size ( ) )
emptyInjector should  not be  null .
assertNotNull ( service )
assertEquals ( "MockImplementation1_DepOn2Provider" , service . getClass ( ) . getSimpleName ( ) )
assertEquals ( "altered_" , service . getName ( ) . substring ( 0 , 8 ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "E1-ID-5" , getStringId ( e1 . getObjectId ( ) ) )
assertEquals ( "Expected ObjectIdSingle" , ObjectIdSingle . class , handler . of ( "entityName" , "keyName" , "value" ) . getClass ( ) )
assertEquals ( "E1:010a64" , getStringId ( e1 . getObjectId ( ) ) )
assertEquals ( decoded , of ( ".E1:01D70A64" , key ) )
assertEquals ( "E1:5,2,11,99,ID=6" , getStringId ( id ) )
assertEquals ( 1 , document . getElementsByTagName ( "PROJECT1" ) . getLength ( ) )
assertEquals ( 1 , paints . size ( ) )
assertEquals ( 1 , paints . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertSame ( target , o1 . getTargets ( ) . get ( "B1" ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( null , p1 . getToPaintingInfo ( ) )
assertEquals ( p1 . getToArtist ( ) , a1 )
assertEquals ( null , p2 . getToPaintingInfo ( ) )
assertEquals ( src . getToOneToFK ( ) , src2 . getToOneToFK ( ) )
assertEquals ( 0 , Cayenne . intPKForObject ( object ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 4 , performQuery ( query ) . get ( 0 ) )
assertEquals ( 0 , a1 . getGroupArray ( ) . size ( ) )
assertNotNull ( object . getObjectId ( ) )
assertEquals ( 1 , rezult . size ( ) )
assertEquals ( 3 , artists . size ( ) )
o1 . getObjectContext ( )
assertEquals ( "expectedValue" , p1 . getToArtist ( ) )
assertEquals ( g1 , p1 . getToGallery ( ) )
assertEquals ( 0 , artist . getPaintingArray ( ) . size ( ) )
assertEquals ( null , object2 . getToArtist ( ) )
assertEquals ( 0 , paints . size ( ) )
assertEquals ( id , ? ? ? )
assertEquals ( 44001 , Cayenne . objectForPK ( context , Artist . class , 44001 ) . getId ( ) )
assertSame ( cause , ex . getCause ( ) )
assertEquals ( "xabx" , ex . getUnlabeledMessage ( ) )
assertEquals ( "x%sx%sx" , ex . getMessage ( ) )
assertSame ( cause , ex . getCause ( ) )
assertEquals ( 100 , queriesCount )
assertEquals ( 0 , queriesCount )
assertEquals ( 0 , queriesCount )
assertEquals ( 10 , tempList . size ( ) )
assertEquals ( 10 , tempList . size ( ) )
assertEquals ( ft1 , ft5Persisted . getToFT1 ( ) )
assertEquals ( 2 , flattenedCirculars . get ( 0 ) . getSide1s ( ) . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( expected , lazyData )
assertEquals ( 1 , song . getAuthors ( ) . size ( ) )
assertEquals ( ref , oid )
assertEquals ( null , o )
assertEquals ( oid1 , oid2 )
assertEquals ( oid1 , oid2 )
assertEquals ( t12 , t2 . getToOneOneWayDb ( ) )
assertEquals ( context , object . getObjectContext ( ) )
assertNotNull ( object . getObjectId ( ) )
assertEquals ( 0 , queryCounter )
assertEquals ( new ASTObjPath ( "pathSpec" ) , result )
assertNotNull ( dbPathExp ( pathSpec ) )
assertEquals ( "x$" , buffer . toString ( ) )
assertEquals ( 3 , objects2 . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 2000 , obj . getPkAttribute ( ) )
assertEquals ( 1 , checkQ . getResults ( ) . size ( ) )
assertEquals ( 3 , query . select ( context ) . size ( ) )
assertEquals ( 3 , query . select ( ) . size ( ) )
assertSame ( object , context . getUserProperty ( "ABC" ) )
assertEquals ( primaryDataMap . getNamespace ( ) , ? ? ? )
assertEquals ( 5 , objects . size ( ) )
assertEquals ( "expectedArtistName" , artist . getArtistName ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 7 , count )
assertEquals ( 7 , count )
assertEquals ( 1 , it . size ( ) )
assertEquals ( "Y" , a1 . getArtistName ( ) )
assertEquals ( 1234.01f , ap1 . getSalary ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 1 , managers . size ( ) )
assertNotNull ( nPeer . getPerson ( ) )
assertEquals ( 4 , query . size ( ) )
assertEquals ( 4 , query . size ( ) )
assertEquals ( 4 , result . size ( ) )
assertSame ( context . getEntityResolver ( ) , deserializedContext . getEntityResolver ( ) )
assertSame ( context . getChannel ( ) , deserializedContext . getChannel ( ) )
assertEquals ( NEW_NAME , a1 . getArtistName ( ) )
assertEquals ( 2 , components2 . size ( ) )
assertSame ( a1 , listener1 . getPublicCalledbackEntity ( ) )
assertEquals ( null , d1 . getDataMap ( m1 . getName ( ) ) )
assertSame ( entity , resolver . getObjEntity ( "TestEntity" ) )
assert cacheShutdown [ 0 ]
assertSame ( resolver , node . getEntityResolver ( ) )
assertSame ( a1 , node . getAdapter ( ) )
assertNotNull ( dataStore )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( Enum1 . one , e . getEnumAttribute ( ) )
assertEquals ( Enum1 . one , e . getEnumAttribute ( ) )
assertEquals ( Enum1 . < expected value > , test . getEnumAttribute ( ) )
assertEquals ( "222" , painting . getPaintingTitle ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 3 , allObjects . size ( ) )
assertEquals ( 0 , object . getToSimpleLockingTest ( ) . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 1 , objects11 . size ( ) )
assertEquals ( 1 , resultList . size ( ) )
assertEquals ( 6 , list . size ( ) )
assertEquals ( 49 , list . size ( ) )
assertEquals ( 25 , list . size ( ) )
assertEquals ( 4 , result . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( note . getPerson ( ) , getPerson ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertNotEquals ( parent1 , child . getParent ( ) )
assertEquals ( 2 , query ( "IvImpl" ) . selectCount ( ) )
assertEquals ( 1 , observer . getQueries ( ) . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , observer . getResults ( ) . size ( ) )
assertEquals ( 0 , sorted . size ( ) )
assertEquals ( effectiveOpId1 , effectiveOpId2 )
assertEquals ( "abc" , column . getName ( ) )
assertNotNull ( column . getDataRowKey ( ) )
assertSame ( bindings , statement . getBindings ( ) )
assertEquals ( "A BC" , template . getTemplate ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "select distinct a from Artist a" , sql )
assertThat ( sql , equalTo ( "select p from Painting p where p.estimatedPrice >= 2" ) )
assertThat ( sql , equalTo ( "SELECT p FROM Painting p WHERE p.estimatedPrice < 1.0" ) )
assertThat ( sql ) . isEqualTo ( "select p from Painting p where p.estimatedPrice <= 1.0" )
assertEquals ( "select a from Artist a where a.artistName <> 'Dali'" , sql )
assertThat ( sql , is ( "select p from Painting p where p.paintingTitle like 'Stuff'" ) )
assertNotEquals ( "select p from Painting p where p.paintingTitle NOT like 'Stuff'" , sql )
assertEquals ( "select a from Artist a where a.artistName = ?1 or a.artistName = ?2" , sql )
assertEquals ( "select p from Painting p WHERE p.toArtist=:x" , ejbql )
assertEquals ( totalJoins , 1 )
assertEquals ( totalJoins , 2 )
assertEquals ( totalJoins , 2 )
assertEquals ( 2 , totalJoins )
assertTrue ( type instanceof BooleanType )
assertEquals ( EnumTypeFactory . class , map . getClass ( ) )
assertEquals ( null , createType ( null ) )
assertEquals ( null , testRead . getDate ( ) )
assertSame ( tstType1 , converter1 . extendedType )
assertSame ( tstType2 , converter2 . extendedType )
assertEquals ( int . class , converter3 . extendedType )
assertSame ( tstType4 , converter4 . extendedType )
converter5 . extendedType
assertSame ( descriptor , merged )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( localRuntime . getDataDomain ( ) , injector . getInstance ( DataDomain . class ) )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertNotNull ( runtime )
assertNotNull ( runtime )
assertEquals ( true , task . isExecuted ( ) )
assertEquals ( max , ds . getMaxConnections ( ) )
assertEquals ( str , createTable ( entity ) )
assertEquals ( len , actualLen )
assertEquals ( "TEST_ENTITY" , entity . getSequenceName ( ) )
assertEquals ( "CUSTOM_GENERATOR" , entity . getPrimaryKeyGenerator ( ) . getGeneratorName ( ) )
assertEquals ( "CUSTOM_GENERATOR" , customGenerator . getGeneratorName ( ) )
parser . assertNotNull ( )
assertNotNull ( select )
assertNotNull ( select )
assertEquals ( "select p from Painting p WHERE db:p.toArtist.ARTIST_NAME = 'a'" , select . getEjbqlStatement ( ) )
assertNotNull ( select )
assertThat ( select . getEjbqlStatement ( ) ) . isEqualTo ( "SELECT a FROM Artist a WHERE a.paintingArray+.toGallery.galleryName = 'gallery2'" )
assertEquals ( "x.y" , path . getAbsolutePath ( ) )
assertEquals ( s1 , s2 )
assertEquals ( 0 , artist . getPaintingArray ( ) . size ( ) )
assertNotNull ( exp )
assertThat ( exp . evaluate ( ) , is ( greaterThanOrEqualTo ( "abc" ) ) )
assertThat ( exp . evaluate ( ) , is ( true ) )
assertEquals ( "abc" , exp . getValue ( ) )
assertEquals ( "abc" , exp . getProperty ( ) )
assertEquals ( 0 , exp . getValues ( ) . size ( ) )
exp . shouldNotContain ( "a" )
assertThat ( exp . getType ( ) , equalTo ( type ) )
assertNotNull ( exp )
assertEquals ( false , exp . evaluate ( ) )
assertEquals ( "c" , "C" , e3 )
assertEquals ( "*******" , e . toString ( ) )
assertNull ( e )
assertEquals ( "*******" , e . toString ( ) )
assertEquals ( 1 , e1 . get ( "a" ) )
e . isEmpty ( )
assertEquals ( "*******" , e . toString ( ) )
assertEquals ( "Expected result" , expected , actual )
e . evaluate ( o )
assertEquals ( "abc" , e1 . getOperand ( 0 ) )
assertEquals ( ExpEnum1 . TWO , a . getA ( ) )
e . toString ( )
assertEquals ( new ASTObjPath ( "pathSpec" ) , result )
assertNotNull ( dbPathExp ( pathSpec ) )
assertEquals ( null , e4 . first ( paintingList ) )
assertEquals ( 0 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( "abc" , p . getValue ( ) )
assertEquals ( "consignment.parts" , 123 , e . getValue ( ) )
assertEquals ( expectedEJBQL , e . toEJBQL ( rootId ) )
e . toString ( )
assertEquals ( "consignment.parts >= 3.14" , toEJBQL ( "rootId" ) )
assertEquals ( "\"artistName\" IN (:a, :b, :c)" , ejbql )
assertEquals ( "x.artist = Artist:1" , ejbql )
assertEquals ( "artistName != 'bla'" , ejbql )
assertNotNull ( e )
assertEquals ( e1 . evaluate ( null ) , e2 . evaluate ( null ) )
assertEquals ( e1 . evaluate ( null ) , e2 . evaluate ( null ) )
assertEquals ( 2012 , evaluate ( e1 ) )
assertEquals ( e1 . evaluate ( null ) , e2 . evaluate ( null ) )
theHuntingEquation . evaluate ( o )
theRobbinsEquation . evaluate ( null )
assertEquals ( "a = enum:org.apache.cayenne.exp.ExpEnum1.THREE" , ejbql )
assertEquals ( "a = 'abc'" , buffer . toString ( ) )
assertEquals ( "a = enum:org.apache.cayenne.exp.ExpEnum1.TWO" , buffer . toString ( ) )
assertEquals ( "true" , transformed . toString ( ) )
assertEquals ( "a in ($ap, $bp)" , transformed . toString ( ) )
assertEquals ( "X = null" , e . toString ( ) )
assertEquals ( e1 , e2 )
assertEquals ( null , params . get ( "a" ) )
assertNull ( e2 )
assertEquals ( e1 , e2 )
exp . shouldBeInstanceOf ( ASTCurrentDate . class )
assertEquals ( new ASTCurrentTime ( ) , exp )
exp . shouldBeInstanceOf ( ASTCurrentTimestamp . class )
assertEquals ( true , parsed1 . evaluate ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 3 , parsed1 . size ( ) )
assertEquals ( 22 , parsed1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( "Expected function name to be null" , null , avg . getFunctionName ( ) )
assertEquals ( expectedValue , count . getFunctionName ( ) )
assertEquals ( null , min . getFunctionName ( ) )
assertEquals ( null , max . getFunctionName ( ) )
assertEquals ( "<expected value>" , sum . getFunctionName ( ) )
assertEquals ( new Date ( ) , result )
assertEquals ( new Date ( ) , result )
assertEquals ( new Date ( ) , result )
assertEquals ( "test" , sb . toString ( ) )
assertEquals ( "*******" , ? ? ? )
assertEquals ( "x.y" , buffer . toString ( ) )
assertEquals ( "Expected EJBQL: SELECT e FROM Entity e WHERE e.artistName = 'bla'" , "SELECT e FROM Entity e WHERE e.artistName = 'bla'" , toEJBQL ( null ) )
assertEquals ( "expectedEJBQL" , ejbql )
assertEquals ( 1 , res )
assertEquals ( 3 , res )
assertEquals ( 2 , res )
assertEquals ( 2 , res )
assertEquals ( 28 , res )
assertEquals ( 28 , res )
assertEquals ( 2 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 39 , res )
assertTrue ( res . getDateColumn ( ) . after ( new Date ( ) ) )
assertNotNull ( res )
assertNotNull ( res )
assertEquals ( - 10 , p1 . getIntColumn ( ) )
assertEquals ( 3 , p2 . getIntColumn ( ) )
assertEquals ( 1 , p1 . getIntColumn ( ) % 3 )
assertEquals ( 3 , evaluate ( exp ) )
exp . evaluate ( )
exp . evaluate ( o )
assertEquals ( 5.0 , evaluate ( exp ) )
assertEquals ( "name" , a2 . getArtistName ( ) )
assertEquals ( "NAME" , a2 . getArtistName ( ) )
assertEquals ( "name" , a2 . getArtistName ( ) )
assertEquals ( "23456789" , a2 . getArtistName ( ) . substring ( 2 , 8 ) )
assertEquals ( "Pablo Picasso" , a2 . getArtistName ( ) )
assertEquals ( "An Artist" , a2 . getArtistName ( ) )
assertEquals ( "SDEFGHIJ test" , a2 . getArtistName ( ) )
exp . evaluate ( null )
assertEquals ( "34" , evaluate ( exp ) )
exp . trim ( ) . equals ( "abc" )
assertEquals ( "abc" , evaluate ( exp ) )
assertEquals ( "ABC" , evaluate ( exp ) )
assertEquals ( 2 , evaluate ( exp ) )
assertEquals ( exp . evaluate ( null ) , true )
assertEquals ( "SELECT consignment FROM Consignment consignment WHERE consignment.parts IN (91, 23)" , e . toEJBQL ( "consignment" ) )
assertEquals ( "Expected EJBQL expression" , "a LIKE '%b%'" , toEJBQL ( null , "rootId" ) )
assertEquals ( "|%|%?|_title|%" , like . getPattern ( ) )
assertEquals ( "x" , ejbql )
assertEquals ( "four" , node . getEnumAttribute ( ) )
assertEquals ( "paintingArray.paintingTitle" , node . getPath ( ) )
assertEquals ( "paintingArray+.paintingTitle" , node . getPath ( ) )
assertEquals ( "*******" , ? ? ? )
assertNotNull ( toEJBQL ( null , rootId ) )
assertNotNull ( toEJBQL ( null , rootId ) )
assertEquals ( "x.y" , buffer . toString ( ) )
add . evaluate ( null )
subtract . evaluate ( null )
multiply . evaluate ( null )
assertEquals ( new BigDecimal ( "3.5" ) , divide . evaluate ( null ) )
? ? ? assertThat ( evaluate ( true ) ) . isEqualTo ( < expected value > )
assert ! evaluate ( o )
assertNotNull ( getExpression ( ) )
assertEquals ( "path" , property . getPath ( ) )
exp . shouldBeEqualTo ( 1 )
exp . ne ( 1 ) . build ( )
assertNull ( exp )
exp . isNotNull ( )
exp . isTrue ( )
exp ( property ) . isFalse ( ) . assertion ( )
assertEquals ( 7 , INT_FIELD . getFrom ( bean ) )
assertEquals ( 7 , OBJECT_FIELD_INT_FIELD . getFrom ( bean ) )
assertEquals ( null , OBJECT_FIELD_INT_FIELD . getFrom ( bean ) )
assertEquals ( 7 , OBJECT_FIELD_INT_FIELD . getIn ( bean ) )
assertEquals ( "property.function(\"%\", Integer.class, arg)" , "<AssertPlaceHolder>" )
assertNotNull ( operator )
assertEquals ( "%" , operator . getOperator ( ) )
assertNotNull ( operator )
exp . year ( ) . getExpression ( ) . isEqualTo ( < AssertPlaceHolder > )
exp . shouldBeEqualTo ( exp )
exp ( property . dayOfMonth ( ) ) . getExpression ( )
exp . hour ( ) . getExpression ( ) . assertMethod ( )
assertEquals ( exp , property . minute ( ) . getExpression ( ) )
exp ( property . second ( ) . getExpression ( ) ) . isEqualTo ( expectedExpression )
exp . max ( ) . getExpression ( ) . equals ( < AssertPlaceHolder > )
assertThat ( exp , is ( notNullValue ( ) ) )
assertEquals ( 1 , exp . getProperty ( ) . eqId ( ) )
exp . neqId ( 1 )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , exp . size ( ) )
assertEquals ( true , exp . evaluate ( ) )
assertNotContains ( exp , artist )
assertFalse ( exp . evaluate ( ) )
exp . assertEquals ( new ASTFullObject ( ) )
exp ( property ) . containsId ( 1 )
exp . notContainsOneId ( ) . assertNotContainsId ( 1 )
assertNotNull ( getExpression ( ) )
assertEquals ( expectedExpression , expression )
assertNotNull ( getExpression ( ) )
assertNotNull ( jjtn000 )
assertNotNull ( getExpression ( ) )
jjtn000 . modNumber ( )
assertNotNull ( jjtn000 )
assertNotNull ( jjtn000 )
assertNotNull ( jjtn000 )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertEquals ( exp ( "path - 42" ) , property . sub ( 42 ) . getExpression ( ) )
assertEquals ( exp ( "path - 42" ) , property . sub ( 42 ) . getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertEquals ( exp ( "-path" ) , property . neg ( ) . getExpression ( ) )
assertThat ( exp1 , equalTo ( exp2 ) )
assertEquals ( exp ( "-path" ) , property . neg ( ) . getExpression ( ) )
assertEquals ( builder , exp ( builder ) )
assertEquals ( builder , exp ( builder ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( exp ( builder ) )
assertNotNull ( exp ( builder ) )
assertThat ( exp ( builder ) , equalTo ( new ExpressionNodeBuilder ( builder ) ) )
// suggested assertion: assert builder instanceof ExpressionNodeBuilder
assertNotNull ( exp ( builder ) )
assertNotNull ( exp ( builder ) )
assert < AssertPlaceHolder >
assertTrue ( lteProp ( ) )
assertThat ( ExpressionFactory . matchExp ( getExpression ( ) , Boolean . TRUE ) ) . isTrue ( )
AssertPlaceHolder . assertEquals ( false , ExpressionFactory . matchExp ( getExpression ( ) , Boolean . FALSE ) )
assertNotNull ( expression )
assertEquals ( expected , expression )
assertEquals ( ExpressionFactory . likeExp ( getExpression ( ) , pattern , escapeChar ) , ? ? ? )
assertEquals ( ExpressionFactory . likeIgnoreCaseExp ( getExpression ( ) , pattern ) , ? ? ? )
assertEquals ( ExpressionFactory . likeIgnoreCaseExp ( getExpression ( ) , pattern ) , ? ? ? )
assertEquals ( ExpressionFactory . notLikeExp ( getExpression ( ) , value ) , ? ? ? )
assertEquals ( ExpressionFactory . notLikeExp ( getExpression ( ) , value ) , ? ? ? )
assertEquals ( ExpressionFactory . notLikeIgnoreCaseExp ( getExpression ( ) , value ) , ? ? ? )
assertEquals ( ExpressionFactory . notLikeIgnoreCaseExp ( getExpression ( ) , value ) , ? ? ? )
assertThat ( ExpressionFactory . matchExp ( getExpression ( ) , value ) ) . isTrue ( )
assertThat ( startsWith ( "test" ) ) . isTrue ( )
assertThat ( expression . endsWith ( value ) ) . isTrue ( )
assertThat ( expression . containsIgnoreCase ( value ) ) . isTrue ( )
assertThat ( expression . startsWithIgnoreCase ( value ) ) . isTrue ( )
assertEquals ( expected , actual )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertNotNull ( jjtn000 )
assertNotNull ( jjtn000 )
assertEquals ( < expected value > , expression )
assertNotNull ( getExpression ( ) )
assertEquals ( "bind[0].getColumnName()" , "t0.NAME" , bindings [ 0 ] . getColumnName ( ) )
assertEquals ( tstName , a . getName ( ) )
assertEquals ( LifecycleEvent . POST_LOAD , m . getCallbackType ( ) )
assertEquals ( tstName , map . getName ( ) )
assertEquals ( null , map . getQueryDescriptor ( "a" ) )
assertEquals ( 1 , queries . size ( ) )
ent . getName ( ) . equals ( parentTask . getTaskName ( ) )
assertEquals ( "abc" , ent . getName ( ) )
assertEquals ( tstName , ent . getCatalog ( ) )
assertEquals ( tstName , ent . getSchema ( ) )
assertEquals ( "artistExhibitArray" , translated . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand (
assertNotNull ( translated )
assertEquals ( relationship , join . getRelationship ( ) )
assertEquals ( "abc" , generator . getGeneratorName ( ) )
assertEquals ( targetMap , ? ? ? )
assertEquals ( tstName , entity . getName ( ) )
assertEquals ( null , entity . getAttribute ( attribute . getName ( ) ) )
assertSame ( null , entity . getRelationship ( rel . getName ( ) ) )
assertSame ( descriptor , resolved )
assertEquals ( q , resolver . getQueryDescriptor ( "query1" ) )
assertNotNull ( attribute . getDbAttributePath ( ) )
assertEquals ( "org.aa.zz" , attribute . getType ( ) )
assertEquals ( a1 , a2 )
assertEquals ( entity , d1 )
assertEquals ( tstName , entity . getClassName ( ) )
assertEquals ( tstName , entity . getSuperClassName ( ) )
assertEquals ( "artistExhibitArray" , translated . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0
assertEquals ( "artistExhibitArray" , translated . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0 ) . getOperand ( 0
assertEquals ( "paintingArray" , r . getDbRelationshipPath ( ) )
assertSame ( target , relationship . getTargetEntity ( ) )
assertEquals ( "aaa" , builder . getName ( ) )
assertEquals ( tstName , rel . getName ( ) )
assertEquals ( QueryType . SQL_TEMPLATE , builder . getQueryType ( ) )
assertSame ( entity , ( ( SQLTemplate ) query ) . getRoot ( ) )
query . getSql ( ) . equals ( "abc" )
builder . setRoot ( "FakeRoot" )
assertSame ( entity , builder . buildQuery ( ) . getRoot ( ) )
assertEquals ( "abc = 5" , builder . getWhere ( ) . toString ( ) )
query . setRoot ( "SomeEntity" )
assertSame ( e , query . getRoot ( ) )
query . setRoot ( Artist . class )
assertThrows ( IllegalArgumentException . class , ( ) -> query . setRoot ( 1 ) )
assertEquals ( "a%" , Artist . ARTIST_NAME . like ( "a%" ) . getExpression ( ) )
assertEquals ( Long . valueOf ( 1L ) , date )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( "John Doe" , artistName )
assertEquals ( "expected message" , e . getMessage ( ) )
assertEquals ( "<query name=\"Test\" type=\"EJBQLQuery\">\n<ejbql><![CDATA[select a FROM Artist a]]></ejbql>\n</query>\n" , w . toString ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( expectedCount , count )
assertEquals ( 1 , count )
assertEquals ( date , avg )
assertThat ( avg , equalTo ( date ) )
assertThat ( avg , equalTo ( date ) )
assertEquals ( 1 , count )
assertEquals ( 5 , intColumn2 )
assertEquals ( 8 , intColumn2 )
assertEquals ( true , boolColumn )
assertEquals ( true , boolColumn )
assertEquals ( expectedSum , sum )
assertEquals ( expectedAvg , avg )
assertEquals ( count , expectedCount )
assertEquals ( null , a )
assertEquals ( null , a )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( artist . getPaintingArray ( ) . get ( 0 ) . getPaintingTitle ( ) , "expectedTitle" )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertNotEquals ( 0 , count )
assertThat ( count , equalTo ( expectedCount ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( count , 0 )
assertEquals ( count , < expected value >  )
assertEquals ( count , ? ? ? )
assertEquals ( "a.b.c" , ord . getPathSpec ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 3 , artists . size ( ) )
assertEquals ( CapsStrategy . UPPER , q1 . getColumnNamesCapitalization ( ) )
assertEquals ( params , clone . getParameters ( ) )
assertEquals ( "abc.AAAA" , query . getResultEntityName ( ) )
assertEquals ( 1 , inserted )
assertEquals ( 1 , inserted )
assertEquals ( 2 , result . size ( ) )
q1 . fetch ( ) . size ( )
assertEquals ( 4 , q1 . getOffset ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "painting3" , a . getPaintingTitle ( ) )
assertEquals ( 2 , count )
assertEquals ( 33001 , id )
assertEquals ( 2 , c )
assertEquals ( data , bytes )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( painting . getToArtist ( ) , artist )
assertEquals ( "AAA # BBB" , query . getDefaultTemplate ( ) )
assertEquals ( CapsStrategy . UPPER , q1 . getColumnNamesCapitalization ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( "field = 1.0" , s1 )
assertEquals ( "field in (1.0,2.0,3.0)" , s1 )
assertEquals ( true , map . isEmpty ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( "xyz" , p . getName ( ) )
assertEquals ( "ABC" , accessor . getValue ( o1 ) )
assertSame ( o1 , accessor . getValue ( o1 ) )
assertNotNull ( accessor )
assertEquals ( "abc" , object . getString ( ) )
assertSame ( newValue , object . stringField )
assertEquals ( "123" , to . getString ( "string" ) )
assertArrayEquals ( new byte [ ] { 3 , 4 , 5 } , o1 . getRelated ( ) . getByteArrayField ( ) )
assertEquals ( 55 , o1 . getRelated ( ) . getIntegerField ( ) )
assertEquals ( "SELECT #from(1) FROM a" , compiled . getSql ( ) )
assertNotNull ( parser )
parserPool . createNewParser ( ) ; "<AssertPlaceHolder>"
assertEquals ( "SELECT * FROM a" , sql )
assertNotNull ( sql )
assertEquals ( "SELECT field FROM table WHERE field = 5" , sql )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" } , $a . arrayMethod ( new String [ ] { "1" , "2" , "3" } ) )
assertEquals ( "['1', '2', '3']" , sql )
assertThat ( sql , is ( "expected result" ) )
assertThat ( sql , is ( "expectedValue" ) )
assertThat ( sql , is ( "5.0" ) )
assertEquals ( "m2_true" , sql )
assertThat ( sql , is ( "5" ) )
assertEquals ( "5" , sql )
assertEquals ( "(#bind('A' 'b'))" , sql )
assertEquals ( "val,val" , sql )
assertNotNull ( BaseTransaction . getThreadTransaction ( ) )
assertNotNull ( BaseTransaction . getThreadTransaction ( ) )
assertThrows ( CayenneRuntimeException . class , ( ) -> {
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , children . size ( ) )
assertEquals ( 1 , set . size ( ) )
assertEquals ( 2 , set . size ( ) )
assertEquals ( Dispatch . this , inv0 . getDispatch ( ) )
assertEquals ( "Expected result" , expected , actual )
assertEquals ( 0 , inv0 . getInvocationCount ( ) )
assertEquals ( expectedPath , getPackagePath ( ) )
assertEquals ( expectedPath , getPackagePath ( ) )
assertNotNull ( getPackagePath ( ) )
assertEquals ( "abcd/12345/" , substBackslashes ( strBefore ) )
assertEquals ( "ext" , extractFileExtension ( fullName ) )
assertEquals ( "n" , extractFileExtension ( fullName ) )
assertNotNull ( extractFileExtension ( fullName ) )
assertEquals ( "n" , stripFileExtension ( fullName ) )
assertEquals ( "n" , stripFileExtension ( fullName ) )
assertThat ( stripFileExtension ( fullName ) ) . isEqualTo ( "" )
assertEquals ( "normalstring" , encodeXmlAttribute ( "normalstring" ) )
assertEquals ( "&lt;a&gt;" , encodeXmlAttribute ( "<a>" ) )
assertEquals ( "a&amp;b" , encodeXmlAttribute ( "a&b" ) )
assertEquals ( 3 , map . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( "Error message with a % literal (should be escaped)" , e . getValidationResult ( ) . getFailures ( ) . get ( 0 ) . getMessage ( ) )
assertNotNull ( object )
assertEquals ( "-123.321e12" , object . toString ( ) )
assertEquals ( "SELECT #from(1) FROM a" , compiled . getSql ( ) )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( "[A] OR [B] OR [C]" )
assertEquals ( "#chain(' OR ' 'WHERE ')#chunk([A])[A]#end#chunk([B])[B]#end#chunk([C])[C]#end#end" , compiled . getSql ( ) )
assertThat ( compiled . getSql ( ) , is ( "[A][C]" ) )
assertThat ( compiled . getSql ( ) , is ( " OR WHERE [B][C]" ) )
assertEquals ( "#chain(' OR ' 'WHERE ')[A][B]" , compiled . getSql ( ) )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( "[A] OR [C] WHERE [A] OR [C]" )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( delegateTranslator . getSql ( ) )
assertNull ( compiled )
assertNull ( compiled )
assertNull ( compiled )
assertEquals ( "expectedValue" , config . getDefaultPackage ( ) )
assertEquals ( "someName" , event . getNewName ( ) )
assertEquals ( 3 , artifacts . size ( ) )
assertEquals ( CUSTOM_TPL , saver . getSavedTemplate ( ) )
assertEquals ( CUSTOM_TPL , saver . getSavedTemplate ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( this , visitor . visitAttribute ( this ) )
assertNull ( accept ( visitor ) )
assertEquals ( "Expected result" , expected , actual )
a . toString ( ) . equals ( "*******" )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( in . available ( ) , expectedValue )
assertNotNull ( url )
assertNotNull ( url )
assertEquals ( map . get ( "key3" ) , list )
assertThrows ( ParseException . class , ( ) -> object ( "parentKeyPath" ) )
assertThat ( list . get ( 0 ) , is ( "s/t\\r" ) )
assertEquals ( 0 , map . size ( ) )
// <assertion code>
assertEquals ( 1 , list . size ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 5 , map . get ( "str" ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( "s//tr" , list . get ( 0 ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 1 , list . size ( ) )
