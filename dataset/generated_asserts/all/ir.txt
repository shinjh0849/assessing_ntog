assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( 3 , features . getLength ( ) )
assertEquals ( "Hello World!" , doc . getFirstSection ( ) . getBody ( ) . getText ( ) . trim ( ) )
assertEquals ( 4 , mergeResult . getConflicts ( ) . size ( ) )
assertEquals ( 4 , mergeResult . getConflicts ( ) . size ( ) )
assertEquals ( "Hello World" , reply )
assertThat ( doc . getKey ( ) ) . isNotNull ( )
assertEquals ( Connection . Method . GET , con . request ( ) . method ( ) )
assertThat ( doc . getKey ( ) ) . isNotNull ( )
assertEquals ( "Testing" , s )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( text , instance ( ) . getText ( ) )
assertEquals ( "jcr:read" , privileges [ 0 ] . getName ( ) )
assertThat ( request . getAttribute ( name ) , is ( sameInstance ( value ) ) )
assertNull ( this . mocker . getComponentUnderTest ( ) . createPatientSummary ( summary , this . uriInfo ) )
assertThat ( request . getKey ( ) , equalTo ( aList ) )
assertThat ( request . getKey ( ) , equalTo ( aList ) )
assertThat ( request . getAttribute ( name ) , is ( sameInstance ( value ) ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertNotNull ( value )
assertNotNull ( value )
assertEquals ( "Default name" , name )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( form . footer ( ) , is ( "</testsuites>" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( adjuster . getAdjustmentInSeconds ( responseWithDate ( "X" ) ) ) . isEqualTo ( 0 )
assertThat ( adjuster . getAdjustmentInSeconds ( responseWithDate ( "X" ) ) ) . isEqualTo ( 0 )
assertThat ( adjuster . getAdjustmentInSeconds ( responseWithDate ( "X" ) ) ) . isEqualTo ( 0 )
assertThat ( adjuster . getAdjustmentInSeconds ( responseWithDate ( "X" ) ) ) . isEqualTo ( 0 )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertNull ( key1 . getNamespace ( ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "" , result )
assertNull ( component . getComponent ( VEvent . class ) )
assertNull ( existingName )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( userObject . getRawEmail ( ) , is ( equalTo ( "Bill@test.com" ) ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( 0 , this . repository . count ( ) )
assertThat ( objectArray ( "A" , 5L ) ) . asList ( ) . contains ( "A" )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertNull ( component . getComponent ( VEvent . class ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertNull ( result )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( "" , buf . toString ( ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertNotNull ( basic )
assertEquals ( expected , ( ( DefaultMessageBuilder ) builder . build ( ) . getMessageBuilder ( ) ) . buildMessageHeaderData ( context ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertEquals ( "itemName" , captor . getValue ( ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertEquals ( "aQute.libg" , p . process ( "${basename;${dir;.project}}" ) )
assertEquals ( "aQute.libg" , p . process ( "${basename;${dir;.project}}" ) )
assertEquals ( 2 , result . getValue ( ) . intValue ( ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( "SUCCESS" , future . get ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( injector . getInstance ( Thing . class ) ) . isSameInstanceAs ( thing )
assertThat ( injector . getInstance ( Thing . class ) ) . isSameInstanceAs ( thing )
assertEquals ( "Hello World!" , result )
assertNull ( result . getPayload ( ) )
assertNull ( result . getPayload ( ) )
assertEquals ( i + 1 , actions . get ( i ) . getSequenceNo ( ) )
assertEquals ( 2 , ts . output . get ( ) . split ( "\n" ) . length )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertEquals ( "myTrue" , toTest . write ( true ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( "aQute.libg" , p . process ( "${basename;${dir;.project}}" ) )
assertEquals ( "This is __bold__." , translate ( src ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( "This is __bold__." , translate ( src ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "This is __bold__." , translate ( src ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertNull ( result )
assertEquals ( "bar" , eventBuilder . build ( ) . getVariables ( ) . get ( "foo" ) . getValue ( ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertTrue ( configuration != null )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertTrue ( INVALID_DOCUMENT_NPE_MESSAGE . equals ( exception . getMessage ( ) ) )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertTrue ( INVALID_DOCUMENT_NPE_MESSAGE . equals ( exception . getMessage ( ) ) )
assertEquals ( message , actual )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertTrue ( isDaemon . get ( ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "Invalid signature marker: 1" , ex . getMessage ( ) )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertThat ( attrMeta . charAt ( 3 ) , is ( "myString" . charAt ( 3 ) ) )
assertSame ( component , table . getHeader ( ) )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( propertyParser . getProperty ( ConfigVars . ACTIVEMQ_QUEUE_NAME_KEY ) , amq . getQueueName ( ) )
assertThat ( interpreter . render ( "foo" ) ) . isEqualTo ( "foo" )
assertEquals ( params , facet . getParams ( ) )
assertEquals ( "aQute.libg" , p . process ( "${basename;${dir;.project}}" ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Hello valA valB" , result . getBody ( ) )
assertEquals ( exception , promise . getError ( ) )
assertEquals ( exception , promise . getError ( ) )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "w00pw00p mustache rocks " , sw . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( instance . getMostRecentResult ( ) . get ( ) , is ( "yeey!" ) )
assertEquals ( "get [" + i + ']' , values [ i + OFFSET ] , test . get ( i ) , EPSILON )
assertEquals ( "Hello valA valB" , result . getBody ( ) )
assertEquals ( "Hello valA valB" , result . getBody ( ) )
assertEquals ( "[\"int_to_string\"]" , serialized . toString ( ) )
assertEquals ( "[\"int_to_string\"]" , serialized . toString ( ) )
assertThat ( authorityEntry . getPort ( ) ) . isEqualTo ( - 1 )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertTrue ( domain . check ( ) )
assertTrue ( domain . check ( ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertNotNull ( id )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( id )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertTrue ( pass )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertThat ( result ) . asString ( ) . isEqualTo ( "3" )
assertNull ( "Result should have been null but was [" + result + "]." , result )
assertNull ( "Result should have been null but was [" + result + "]." , result )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( conversable , context . getForWhom ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( id )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( id )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertNull ( "Result should have been null but was [" + result + "]." , result )
assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertEquals ( "http://example.org/bla" , info . get ( "@id" ) )
assertEquals ( "Hello World" , reply )
assertEquals ( expectedOutputMaxima , result . getMaximaInput ( ) )
assertNotNull ( id )
assertEquals ( "Hello World" , reply )
assertThat ( result ) . asString ( ) . isEqualTo ( "3" )
assertNull ( "Result should have been null but was [" + result + "]." , result )
assertTrue ( false )
assertNotNull ( id )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( id )
assertEquals ( "Hello World" , reply )
assertNotNull ( psConf . getConfiguration ( ) )
assertThat ( logger . getSlf4jLogger ( ) . getName ( ) ) . isEqualTo ( "abc" )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNull ( result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "Hello World" , reply )
assertEquals ( value , presenter . getValue ( ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertTrue ( registeredKeys . contains ( whiteListEntry . getKey ( ) ) )
assertEquals ( n , new HexStringConfidentialKey ( "test" + n , n ) . get ( ) . length ( ) )
assertEquals ( status , Status . ACTIVE )
assertThat ( predicate ) . rejects ( "something" )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertNull ( arrayType . getParentClass ( ) )
assertThat ( Transformer . NoOp . INSTANCE . transform ( mock ( TypeDescription . class ) , target ) , is ( target ) )
( dataSource ) -> assertThat ( dataSource . getUrl ( ) ) . startsWith ( "jdbc:hsqldb:mem:testdb" ) )
assertNull ( arrayType . getParentClass ( ) )
assertEquals ( n , new HexStringConfidentialKey ( "test" + n , n ) . get ( ) . length ( ) )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( constraintViolations . size ( ) , 1 , "Wrong number of constraints" )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNull ( o )
assertEquals ( 404 , response . getCode ( ) )
assertEquals ( 404 , response . getCode ( ) )
assertNotNull ( result )
assertEquals ( Direction . EAST , result )
assertEquals ( "{1,2}" , result )
assertNull ( data . get ( "foo" , String . class ) )
assertEquals ( "Hello Pete :)" , greetingService . greet ( "Pete" ) )
assertThat ( Functions . errorClass ( "aaa" , "error" ) , is ( "" ) )
assertThat ( Functions . errorClass ( "aaa" , "error" ) , is ( "" ) )
assertEquals ( "abc" , home . create ( ) . getSessionContextEJBObject ( ) . echo ( "abc" ) )
assertNull ( result )
assertNull ( response . getException ( ) )
assertNotNull ( runnable . getException ( ) )
assertNotNull ( "created node" , node )
assertNotNull ( result )
assertNotNull ( endpoint )
assertEquals ( 1 , endpointArray . length )
assertTrue ( endpoint . isSingleton ( ) )
assertTrue ( endpoint . isSingleton ( ) )
assertNotNull ( endpoint )
assertTrue ( endpoint . isSingleton ( ) )
assertThat ( resource . getName ( ) , is ( "testing" ) )
assertThat ( sut ( ) . constructDerivedKeyIdentifier ( ":" , "47" , "1" ) , is ( "0001:::0002:47:0001:1" ) )
assertThat ( sut ( ) . constructDerivedKeyIdentifier ( ":" , "47" , "1" ) , is ( "0001:::0002:47:0001:1" ) )
assertEquals ( "Hello Kermit" , result )
assertThatBuildSucceeded ( )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertThatBuildSucceeded ( )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "\n" , Strings . bytes2String ( ALProtocol . DEFAULT_OUTGOING_MESSAGE_DIVIDER ) )
assertEquals ( "\n" , Strings . bytes2String ( ALProtocol . DEFAULT_OUTGOING_MESSAGE_DIVIDER ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertThat ( e . getMessage ( ) ) . contains ( "Cannot skip" )
assertTrue ( "Testing oracle in split with null collection." , defaultQuery . equals ( sqlOracle . getSelectRealmIdSql ( null ) ) )
assertNull ( testMock )
assertEquals ( expectedMessage , e . getMessage ( ) )
assertNull ( testMock )
assertEquals ( true , executeExpression ( "true" ) )
assertArrayEquals ( key . encrypt ( ) . doFinal ( str ) , key . encrypt ( ) . doFinal ( str ) )
assertArrayEquals ( key . encrypt ( ) . doFinal ( str ) , key . encrypt ( ) . doFinal ( str ) )
assertTrue ( expressions . evaluateValueExpression ( "#{foo}" ) . equals ( "baz" ) )
assertTrue ( expressions . evaluateValueExpression ( "#{foo}" ) . equals ( "baz" ) )
assertTrue ( true )
assertTrue ( true )
assertEquals ( "http://example.org/bla" , info . get ( "@id" ) )
assertEquals ( "http://example.org/bla" , info . get ( "@id" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . containsIgnoringCase ( "History event handler is null" )
assertThat ( e . getMessage ( ) ) . containsIgnoringCase ( "History event handler is null" )
assertEquals ( 3 , mapWithInitialCapacity . size ( ) )
assertEquals ( "ArrayList[{1,2}]" , logAdapter . asString ( collection ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertThat ( attrMeta . toString ( ) , is ( "myString" ) )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 500 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 500 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 500 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 409 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 409 , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( JavaConstant . Visitor . NoOp . INSTANCE . onValue ( constant ) , is ( ( JavaConstant ) constant ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertEquals ( type , instance ( ) . getValue ( ) )
assertEquals ( val1 , value )
assertNull ( model . getFile ( ) )
assertEquals ( "Fast response" , out )
assertTrue ( "The expression did not evaluate to null: " + result , result == null )
assertTrue ( "The expression did not evaluate to null: " + result , result == null )
assertTrue ( baos . toString ( ) . contains ( "OK" ) )
assertEquals ( null , result )
assertEquals ( null , ComparatorType . getByClassName ( null ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "" , writer . toString ( ) )
assertTrue ( EagleExceptionWrapper . wrap ( exception ) . startsWith ( "java.lang.Exception" ) )
assertThat ( props . get ( MessageHelper . APP_PROPERTY_ORIG_ADAPTER ) ) . isEqualTo ( ADAPTER_NAME )
assertThat ( props . get ( MessageHelper . APP_PROPERTY_ORIG_ADAPTER ) ) . isEqualTo ( ADAPTER_NAME )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertEquals ( SolutionContextListener . solutionPath , solutionContextListener . getRootPath ( ) )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertEquals ( "abc  D  e><>123" , c . execute ( rhsFuncContext , Symbols . asList ( syms , "a" , "b" , "c  D  e>" , "<>" , 1 , 2 , 3 ) ) . asString ( ) . getValue ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertTrue ( "id must be greater than zero" , hub . getId ( ) > 0 )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNotNull ( result )
assertNotNull ( toString )
assertEquals ( "Hello World" , reply )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getFirstName ( ) , is ( equalTo ( firstName ) ) )
assertThat ( userObject . getUserName ( ) , is ( equalTo ( "Bill_FFOW" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertEquals ( "wordjoiner" + "@" + domain + "/" + resource , fullJID )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertEquals ( Integer . valueOf ( 5 ) , cfg . someValue ( ) )
assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertNull ( "DNS data returend" , result )
assertEquals ( "gzip" , newRequest ( url ) . get ( ) . response ( ) . contentEncoding ( ) )
assertEquals ( "test" , new DBPediaLanguageString ( "test@en" ) . raw ( ) )
assertEquals ( response . getBody ( ) , "Australia" )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertNull ( community . evaluate ( null ) )
assertEquals ( resource . getId ( ) , DOC1 , "Wrong ID." )
assertNull ( community . evaluate ( null ) )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertThat ( request . getHeader ( "aaa" ) , is ( "111" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( request . getHeader ( "aaa" ) , is ( "111" ) )
assertThat ( request . getHeader ( "aaa" ) , is ( "111" ) )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertEquals ( expectedMessage , e . getMessage ( ) )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "100" , result )
assertEquals ( yt . expected ( ) , yt . actual ( ) )
assertEquals ( yt . expected ( ) , yt . actual ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertEquals ( "{\"name\":\"foo\",\"surname\":\"bar\"}" , result )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertEquals ( functionA , evaluator . getContext ( ) . resolveFunction ( "a" , "a" ) )
assertNotNull ( jarMetaData )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertTrue ( "Parser accepted the invalid value " + testValues [ i ] + "." , numRead == - 1 )
assertEquals ( 21 , proxied . count ( null ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertThat ( proxyConfiguration . getPort ( ) ) . isEqualTo ( "9090" )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertThat ( proxyConfiguration . getPort ( ) ) . isEqualTo ( "9090" )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertThat ( configuration ) . containsEntry ( TemplateEngine . class . getName ( ) , templateEngine )
assertEquals ( "a-string-with-words" , StringUtils . toDelimited ( "a string with words" , "-" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertNull ( testMock )
assertEquals ( value , factory . factorize ( null ) . getLong ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertNull ( test . toString ( ) )
assertNull ( test . toString ( ) )
assertNull ( action . getIconFileName ( ) )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertTrue ( canHandle )
assertThat ( extractionDiffNotifiers . getById ( "slack-1" ) ) . isNotNull ( )
assertTrue ( result )
assertTrue ( result )
assertTrue ( command . toString ( ) . contains ( CHANNEL ) )
assertTrue ( result )
assertThat ( reportLoader . get ( COLA_REPORT ) , notNullValue ( ) )
assertNotNull ( result )
assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertEquals ( "100" , result )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( valueExtractor . getPriority ( ) ) . isEqualTo ( getExpectedPriority ( ) )
assertEquals ( "System.out" , SystemOutput . OUT . toString ( ) )
assertEquals ( ( ( RemoteWebElement ) cached ) . getId ( ) , ( ( RemoteWebElement ) cached ) . getId ( ) )
assertTrue ( result )
assertTrue ( result )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( "Hello World" , reply )
assertThat ( aList , is ( List . of ( ) ) )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "Hello World" , reply )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "Hello World" , reply )
assertThat ( ex . getMessage ( ) , is ( "messages must not be null" ) )
assertNull ( TransactionConfig . empty ( ) . timeout ( ) )
assertThat ( "waggledance" , is ( args . getUser ( ) ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertEquals ( "Bob" , emp . getName ( ) )
assertEquals ( expResult , result )
assertEquals ( "Bob" , emp . getName ( ) )
MatcherAssert . assertThat ( map . toString ( ) , Matchers . isEmptyString ( ) )
assertEquals ( "Constructor injection failed." , "Joe" , bean . getName ( ) )
assertEquals ( expResult , result )
assertEquals ( "Constructor injection failed." , "Joe" , bean . getName ( ) )
assertEquals ( "Wrong author address" , AUTHOR_ADDRESS , author . get ( 0 ) . getEmail ( ) )
MatcherAssert . assertThat ( map . toString ( ) , Matchers . isEmptyString ( ) )
assertEquals ( 10 , e . getMax ( ) )
assertEquals ( "" , result . data ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "command" , mpdCommand . getCommand ( ) )
assertEquals ( "command" , mpdCommand . getCommand ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "" , v )
assertEquals ( "command" , mpdCommand . getCommand ( ) )
assertNull ( result )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ProjectNotFoundResult . MESSAGE , PROJECT_NAME ) )
assertEquals ( "Hello World" , reply )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertNull ( value )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertThat ( prefixMapping . getPrefix ( ) , is ( PREFIX ) )
assertThat ( prefixMapping . getPrefix ( ) , is ( PREFIX ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertNotNull ( id )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertNotNull ( id )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertNull ( ret )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
assertEquals ( UnivariateStatsMetaFunction . class , function . clone ( ) . getClass ( ) )
assertNull ( balancer . primary ( ) )
assertThat ( reloadedLegoSet . manual ) . isNull ( )
assertEquals ( inputFile . getParent ( ) , victim . getTextField ( ) . getText ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( p , p )
assertTrue ( output . getFile ( ) . delete ( ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertFalse ( isEligible )
assertThat ( exception . getMessage ( ) , is ( "Test message" ) )
assertNotNull ( tree . context ( ) )
assertTrue ( INVALID_DOCUMENT_EMPTY_LIST_EXCEPTION_MESSAGE . equals ( exception . getMessage ( ) ) )
assertTrue ( INVALID_DOCUMENT_EMPTY_LIST_EXCEPTION_MESSAGE . equals ( exception . getMessage ( ) ) )
assertEquals ( ClassB . class , theCls )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertEquals ( "" , result )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertEquals ( 1 , new ReceiptFactory ( new Local ( "/Applications/Cyberduck.app/Contents/_MASReceipt" ) ) . open ( ) . size ( ) )
assertEquals ( "" , result )
assertEquals ( KuraErrorCode . INVALID_PARAMETER , e . getCode ( ) )
assertTrue ( notified )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertThat ( request . getAttribute ( name ) , is ( nullValue ( ) ) )
assertThat ( metadata . getValue ( ) ) . isEqualTo ( "hell%o" )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( "jib.to.tags has empty tag" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( exception . getMessage ( ) ) . containsPattern ( DELETE_USER_MSG )
assertTrue ( timeout . exit ( ) )
assertFalse ( timeout . exit ( ) )
assertTrue ( wasCalled . get ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( buildCommand . getUsername ( configVars ) , configVars . getValue ( DockerTask . USERNAME ) )
assertEquals ( buildCommand . getUsername ( configVars ) , configVars . getValue ( DockerTask . USERNAME ) )
assertThat ( mpe . getMessage ( ) ) . isEqualTo ( "Missing required option: '--target=<target-image>'" )
assertNotNull ( result )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( "foo" , message )
assertEquals ( "foo" , message )
assertEquals ( "{\"name\":\"foo\",\"surname\":\"bar\"}" , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "result" , "" , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( dao . getCollectionUUIDByName ( "Asia" ) , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1" )
assertEquals ( "Hello World" , reply )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertThat ( body ) . contains ( "Hello World" )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertNotNull ( aaaFilterChain )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertEquals ( "Wrong author address" , AUTHOR_ADDRESS , author . get ( 0 ) . getEmail ( ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertNull ( service )
assertEquals ( "Hello Kermit" , result )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertEquals ( "" , ctx . getParentXPath ( ) )
assertEquals ( hints . getAll ( ) . toString ( ) , hints . toString ( ) )
assertNotNull ( result )
assertEquals ( "" , result )
assertEquals ( "The source string can not be null" , e . getMessage ( ) )
assertNotNull ( tree )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( "0b0da3" , rfAddress )
assertEquals ( message , mockAll . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertNotNull ( aaaFilterChain )
assertNotNull ( aaaFilterChain )
assertThat ( context ( ) ) . isNotNull ( )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( withoutDesiredProperties . getDesiredProperty ( JsonFactory . newPointer ( "target_year_1" ) ) ) . isEmpty ( )
assertEquals ( metrics , future . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertThat ( ConfigurationSnapshot . EMPTY . get ( Collections . singleton ( "foo" ) , String . class ) ) . isNull ( )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertNull ( result )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertEquals ( "my-foo" , body )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "my-foo" , body )
assertEquals ( "my-foo" , body )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( a1 . value ( ) , is ( "test" ) )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( new NoSpecimen ( ) , result )
assertTrue ( ( Boolean ) result . get ( "enabled" ) )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( metrics , future . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( "/set?flag=false" , UriTemplate . fromTemplate ( "/set{?flag}" ) . set ( "flag" , FLAG ) . expand ( ) )
assertTrue ( set instanceof HashSet , " set should be HashSet" )
assertEquals ( status , Status . ACTIVE )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertFalse ( valid )
assertEquals ( "\n" , Formatting . nl ( ) )
assertEquals ( "Hello World" , reply )
assertNotEquals ( expected , actual )
assertNotEquals ( expected , actual )
assertThat ( query . toString ( ) , is ( equalTo ( " where (bucket=orid)" ) ) )
assertThat ( query . toString ( ) , is ( equalTo ( " where (bucket=orid)" ) ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( UnrecognizedOptionException . class , CommandLineProcessor . getException ( ) . getClass ( ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( t , exception . getCause ( ) )
assertEquals ( t , exception . getCause ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertFalse ( isEligible )
assertFalse ( isEligible )
assertEquals ( "Hello World" , reply )
assertTrue ( e instanceof RuntimeException )
assertTrue ( e instanceof RuntimeException )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse ': " ) )
assertEquals ( 1L , dao . getPartitionCount ( pool ) )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse ': " ) )
assertThat ( request . getAttribute ( name ) , is ( sameInstance ( value ) ) )
assertEquals ( origValue , out )
assertEquals ( "Yeah Baby It rocks!" , res )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertEquals ( 22 , classifyProcessor . length ( classifyProcessor . getNormalizedURL ( "http://www.example.com" ) ) )
assertEquals ( "blocking(testvalue)" , optionalWrapWithBlocking )
assertEquals ( 22 , classifyProcessor . length ( classifyProcessor . getNormalizedURL ( "http://www.example.com" ) ) )
assertEquals ( "blocking(testvalue)" , optionalWrapWithBlocking )
assertEquals ( "blocking(testvalue)" , optionalWrapWithBlocking )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( "blocking(testvalue)" , optionalWrapWithBlocking )
assertThat ( factory . create ( value ) , hasContent ( "http://www.jboss.org" ) )
assertThat ( factory . create ( value ) , hasContent ( "http://www.jboss.org" ) )
assertThat ( factory . create ( value ) , hasContent ( "http://www.jboss.org" ) )
assertEquals ( Result . Status . OK , result . getStatus ( ) , errorDescriptions ( result ) )
assertEquals ( Result . Status . OK , result . getStatus ( ) , errorDescriptions ( result ) )
assertEquals ( TEST_EXCLUSIONS , prefs . getJavaImportExclusions ( ) . get ( 0 ) )
assertNull ( JmsMessagePropertyIntercepter . getProperty ( message , "SomeRandomPropertyName" ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( TEST_EXCLUSIONS , prefs . getJavaImportExclusions ( ) . get ( 0 ) )
assertEquals ( "PERSISTENT" , JmsMessagePropertyIntercepter . getProperty ( message , JMS_DELIVERY_MODE ) )
assertEquals ( Optional . empty ( ) , built . getStrings ( ) )
assertEquals ( "testProcess2" , testProcess . getTitle ( ) )
assertEquals ( "aa" , StringUtils . removeWhitespace ( "\t\r\n    aa" ) )
assertEquals ( 10000 + k , ia . get ( k ) )
assertEquals ( i ++ , key . intValue ( ) )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertEquals ( "8FRecord" , QProperties4Test_Naming . naming . _8FRecord . getMetadata ( ) . getName ( ) )
assertEquals ( AGG_RESULTS . length , buckets . size ( ) )
assertThat ( manager . getTransformerSchemaLocationForId ( "abc123" ) , is ( "" ) )
assertEquals ( 0 , result )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertNull ( importSession . isFileHidden ( PATH ) )
assertThat ( call . getController ( ) . popLastPull ( ) ) . isEqualTo ( 1 )
assertEquals ( "foobar" , result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertEquals ( "abc" , Strings . append ( "c" ) . to ( "ab" ) )
assertThat ( result . validate ( ) , is ( true ) )
assertThat ( result . validate ( ) , is ( true ) )
assertArrayEquals ( new String [ ] { "hello" , "world" } , Wrapper . getWrapper ( Son . class ) . getMethodNames ( ) )
assertEquals ( "test" , value )
assertEquals ( VALUE , Objects . requireNonNull ( databaseCache . get ( KEY ) ) . get ( ) )
assertEquals ( VALUE , Objects . requireNonNull ( databaseCache . get ( KEY ) ) . get ( ) )
assertNull ( importSession . isFileHidden ( PATH ) )
assertThat ( f . get ( ) , is ( sameInstance ( httpResponse ) ) )
assertTrue ( "currently returns true" , model . isSelectable ( 0 ) )
assertNull ( importSession . isFileHidden ( PATH ) )
assertTrue ( registeredKeys . contains ( whiteListEntry . getKey ( ) ) )
assertEquals ( n , new HexStringConfidentialKey ( "test" + n , n ) . get ( ) . length ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( expResult , result )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Wrong file extension" , "File" , name )
assertEquals ( "{\"person\":{\"idk\":4,\"id\":1}}" , ason . toString ( ) )
assertEquals ( "{\"person\":{\"idk\":4,\"id\":1}}" , ason . toString ( ) )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertTrue ( "Claims set should have been empty but was: " + claims . toJsonString ( ) , claims . isEmpty ( ) )
assertTrue ( "Claims set should have been empty but was: " + claims . toJsonString ( ) , claims . isEmpty ( ) )
assertNull ( arrayType . getParentClass ( ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( "Hello world" , TextPatternMethod . TEXT . getType ( ) . getParam ( "\"Hello world\"" ) )
assertEquals ( "Hello world" , TextPatternMethod . TEXT . getType ( ) . getParam ( "\"Hello world\"" ) )
assertEquals ( "secret" , twoFactorAuthenticationManager . getSecret ( "orcid" ) )
assertArrayEquals ( array , result )
assertEquals ( "prop_name" , name )
assertThat ( exc . getMessage ( ) ) . isEqualTo ( "Cannot find preConverter invalid." )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertThat ( ( Long ) cache . ms . get ( "aaa" ) , is ( 1L ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertEquals ( "This is [{Image src='Image' link='http://www.wikicreole.org'}] with a link." , translate ( src ) )
assertFalse ( this . marker . remove ( null ) )
assertEquals ( authors . size ( ) , 3 )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertEquals ( "abc" , home . create ( ) . getSessionContextEJBObject ( ) . echo ( "abc" ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( "Hello World" , template . render ( foo ) )
assertEquals ( "Hello World" , template . render ( foo ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNull ( o )
assertEquals ( "Fast response" , out )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertEquals ( value , 999 )
assertNull ( out )
assertNull ( out )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertEquals ( "Fast response" , out )
assertEquals ( "foo" , read )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( HttpStatusCodes . UNSUPPORTED_MEDIA_TYPE . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , equalTo ( 200 ) )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , equalTo ( 200 ) )
assertEquals ( HttpStatusCodes . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "POST /operation/call HTTP/1.1" , line )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "hello world" , result )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertThat ( OutputStreamFormater . spaces ( 20 ) . length ( ) , is ( 20 ) )
assertEquals ( "http://example.com/orders/{orderId}{?view}" , dummy . getTemplate ( ) . getTemplate ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertTrue ( true )
assertThat ( script ) . contains ( "livereload.com/protocols/official-7" )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertTrue ( true )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertThat ( script ) . contains ( "livereload.com/protocols/official-7" )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertThat ( value . resolvedSource ( ) , endsWith ( "ConcreteAction.properties" ) )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertNull ( properties )
assertNull ( component . getComponent ( VEvent . class ) )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( "Fast response" , out )
assertThat ( context ( ) ) . isNotNull ( )
assertEquals ( "" , result )
assertNotNull ( result )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( "external call original body" , reply )
assertEquals ( "external call original body" , reply )
assertEquals ( "external call original body" , reply )
assertNotNull ( e . getMessage ( ) )
assertThat ( addresses . length , equalTo ( MainNetParams . get ( ) . getAddrSeeds ( ) . length ) )
assertNotNull ( FieldName . unmarshal ( "x" ) )
assertEquals ( value , taskCompletionEvent . getTaskAttemptId ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Hello World" , template . render ( foo ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( future . get ( ) ) . isEqualTo ( HELLO + 5 )
assertNotNull ( resolver )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertNotNull ( configuration )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNull ( command . get ( 2 , TimeUnit . MICROSECONDS ) )
assertNotNull ( serviceWithId )
assertEquals ( epoch , scriptEngine . eval ( "new Date(" + epoch + ")" ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Fast response" , out )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertEquals ( "Hello World" , reply )
assertNull ( command . get ( 2 , TimeUnit . MICROSECONDS ) )
assertEquals ( "Hello World" , template . render ( foo ) )
assertEquals ( 1 , taskCount )
assertTrue ( CustomAsyncObserverExtension . NOTIFIED )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( "can provide ServletContext" , context )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertNotNull ( "GB" , VALIDATOR . getValidator ( "GB" ) . getRegexValidator ( ) . getPatterns ( ) )
assertNotNull ( serviceWithId )
assertEquals ( value , 999 )
assertEquals ( 0L , errors )
assertEquals ( 0L , errors )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertEquals ( DEFAULT_ENCODING , outputStreamWriter . getEncoding ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "a" , render )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertNotNull ( e , "An AttributeNotFoundException must have occurred by now as there is no attribute with the name ffname in bean" )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( "TE" , out . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertThat ( parser . getAttributeNamespace ( 0 ) ) . isEqualTo ( RES_AUTO_NS )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( "a" , render )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Test\n1" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( value , 999 )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( "Hello World" , template . render ( foo ) )
assertEquals ( "Hello World" , template . render ( foo ) )
assertThat ( disque . clientPause ( 1000 ) ) . isEqualTo ( "OK" )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello Kermit" , result )
assertEquals ( existing , result )
assertEquals ( existing , result )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( expected , MessageFormatter . format ( array ) )
assertTrue ( MyException . class . isInstance ( e . getCause ( ) ) )
assertTrue ( MyException . class . isInstance ( e . getCause ( ) ) )
assertTrue ( MyException . class . isInstance ( e . getCause ( ) ) )
assertEquals ( ClassB . class , theCls )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "System.out" , SystemOutput . OUT . toString ( ) )
assertEquals ( column . getDateFormat ( ) , "HHmm" )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( 2 , map . size ( ) )
assertEquals ( "\"foobar\"" , ETagHeaderUtils . quote ( "foobar" ) )
assertEquals ( "\"foobar\"" , ETagHeaderUtils . quote ( "foobar" ) )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertEquals ( "Hello World" , reply )
assertNull ( n )
assertNull ( "DNS data returend" , result )
assertEquals ( "Hello World!" , response )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Wrong class" , HdfsMrsImageWriter . class , provider . getMrsTileWriter ( context ) . getClass ( ) )
assertEquals ( 1 , result )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertThat ( request . getContentAsString ( ) ) . isEqualTo ( "body" )
assertEquals ( "Hello World" , reply )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "" , writer . toString ( ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( remoteLoginReply . getPassword ( ) , "smartenit123" )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( column . getDateFormat ( ) , "HHmm" )
assertEquals ( "individual" , kind . getValue ( ) )
assertNotNull ( endpoint )
assertThat ( parser . getProperty ( "foo" ) ) . isNull ( )
assertThat ( typeDescription . getName ( ) , is ( FOO + "." + PackageDescription . PACKAGE_CLASS_NAME ) )
assertEquals ( "waxyar kadib" , t . format ( now . plus ( 600 , ChronoUnit . MILLIS ) ) )
assertEquals ( 5 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( 5 * 1024 * 1024 , threshold )
assertEquals ( client . getTextReceived ( ) , "pong-from-remote-server-received" )
assertEquals ( 0L , errors )
assertNull ( cache . get ( "1" ) )
assertEquals ( tuple ( 1 , 2 ) , add1 . carry ( ) . apply ( 1 ) )
assertEquals ( tuple ( 1 , 2 ) , add1 . carry ( ) . apply ( 1 ) )
assertEquals ( CollectionUtils . EMPTY_COLLECTION , coll )
assertEquals ( value , wrapper . getByteArray ( ) )
assertTrue ( discoveryTree . isMatch ( new DiscoveryTreeNode ( ) . cacheVersion ( 1 ) , parent ) )
assertTrue ( discoveryTree . isMatch ( new DiscoveryTreeNode ( ) . cacheVersion ( 1 ) , parent ) )
assertEquals ( "Hello Kermit" , result )
assertThat ( properties . getImports ( ) ) . containsExactly ( l1 , l2 , l3 )
assertThat ( properties . getImports ( ) ) . containsExactly ( l1 , l2 , l3 )
assertNull ( request . getHeader ( "name" ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Spec 'test' is neither prefix-based nor suffix-based" , ex . getMessage ( ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( i18n . tr ( "Owner with key \"{0}\" was not found" , key ) , ex . getMessage ( ) )
assertEquals ( i18n . tr ( "Owner with key \"{0}\" was not found" , key ) , ex . getMessage ( ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( pod , response )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertEquals ( i18n . tr ( "Owner with key \"{0}\" was not found" , key ) , ex . getMessage ( ) )
assertTrue ( deleted )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertTrue ( deleted )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertNull ( "DNS data returend" , result )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertFalse ( service . contains ( entry . getKey ( ) ) )
assertEquals ( expected , instance . getPreferredProcessors ( Format . get ( "jpg" ) ) )
assertEquals ( "TestHello" , result )
assertEquals ( list ( "C" , "B" , "A" ) , redis . sort ( key , alpha ( ) . desc ( ) ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertEquals ( taskNum , counter . get ( ) )
assertEquals ( CasWebflowConstants . TRANSITION_ID_ERROR , result . getId ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertThat ( new MultipleParentClassLoader . Builder ( ) . append ( first ) . build ( first ) , is ( first ) )
assertThat ( new MultipleParentClassLoader . Builder ( ) . append ( first ) . build ( first ) , is ( first ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertEquals ( "value" , value )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertNotNull ( configuration )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( actualCacheExpiryDuration , 60L )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNotNull ( testling . getSteps ( ) . get ( testling . getSteps ( ) . size ( ) - 1 ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Hello Kermit" , result . getBody ( ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
fail ( "Exception not caught" )
fail ( "Exception not caught" )
assertEquals ( expected , actual )
assertEquals ( "" , result )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertEquals ( "A" , map . putIfAbsent ( one , "Z" ) )
assertEquals ( DRIVER_UUID , driver )
assertThat ( mockSlice . getNumber ( ) ) . isEqualTo ( 1 )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertThat ( SpringUtils . defaultIfNull ( null , mockSupplier ) ) . isEqualTo ( "supplier" )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertEquals ( DRIVER_UUID , driver )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertNull ( new FormField ( null , null , null , new FieldValue ( null , FieldValueType . LIST ) , 0 ) . getValue ( ) . asList ( ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertEquals ( this . policySet . getPolicies ( ) . get ( 0 ) . getTarget ( ) . getSubject ( ) . getName ( ) , "Operator" )
assertNull ( new FormField ( null , null , null , new FieldValue ( null , FieldValueType . LIST ) , 0 ) . getValue ( ) . asList ( ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertNull ( new FormField ( null , null , null , new FieldValue ( null , FieldValueType . LIST ) , 0 ) . getValue ( ) . asList ( ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertNull ( JsUtils . escape ( null ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertThat ( sut . canHandle ( uri ) , is ( true ) )
assertNotNull ( metrics . getRegistry ( ) )
assertNull ( new NotificationMessage ( ) . getPayloadString ( ENTRY_NAME ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertEquals ( PROPERTY_KEY_NOT_ANNOTATED , ANNOTATION_NOT_ANNOTATED . getPropertyName ( ) )
assertThat ( beanFactoryPostProcessor . getPoolName ( mockBeanDefinition ) ) . isNull ( )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( v . id ( ) , person . id ( ) )
assertEquals ( v . id ( ) , person . id ( ) )
assertEquals ( v . id ( ) , person . id ( ) )
assertEquals ( v . id ( ) , person . id ( ) )
assertEquals ( v . id ( ) , person . id ( ) )
assertNotNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fallback response" , out )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Fast response" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( ( long ) TEST_CASE_1_RESULT , crc . getValue ( ) )
assertThat ( driver . toString ( ) , is ( notNullValue ( ) ) )
assertEquals ( hello , new String ( read , "UTF-8" ) )
assertEquals ( "123" , p . staticMethod ( 123 ) )
assertNotNull ( baseBean2 )
assertEquals ( "Fast response" , out )
assertEquals ( "The validated character sequence is empty" , ex . getMessage ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( "Fast response" , out )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( "Fast response" , out )
assertNotNull ( result )
assertEquals ( bytesRead , - 1 )
assertEquals ( bytesRead , - 1 )
assertNull ( actual )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "Hello Scott" , response )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertThat ( metadata . getValue ( ) ) . isEqualTo ( "hell%o" )
assertThat ( metadata . getValue ( ) ) . isEqualTo ( "hell%o" )
assertThat ( metadata . getValue ( ) ) . isEqualTo ( "hell%o" )
assertEquals ( "" , instance . toString ( ) )
assertEquals ( "" , instance . toString ( ) )
assertEquals ( "" , instance . toString ( ) )
assertEquals ( "" , instance . toString ( ) )
assertEquals ( 1 , controller . getPriority ( ) )
assertEquals ( 10 , builder . build ( ) . getExecutes ( ) )
assertEquals ( "key%60=value%60" , instance . toString ( ) )
assertEquals ( "test" , result )
assertThat ( TextUtil . getByteBuffer ( null ) ) . isNull ( )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( toCamelCaseBySplitting ( "THIS STRING SHOULD BE IN CAMEL CASE" , " " ) ) . isEqualTo ( "thisStringShouldBeInCamelCase" )
assertEquals ( "The source string can not be null" , e . getMessage ( ) )
assertNull ( HeaderCommentsMap . getComment ( "NOT_PRESENT" ) )
assertEquals ( "OK" , e . getMessage ( ) )
assertEquals ( "The validated array index is invalid: -1" , ex . getMessage ( ) )
assertEquals ( Operation . DELETE , Operation . get ( "z" ) )
assertTrue ( gateway . creditCard ( ) . find ( "network_tokenized_credit_card" ) . isNetworkTokenized ( ) )
assertTrue ( gateway . creditCard ( ) . find ( "network_tokenized_credit_card" ) . isNetworkTokenized ( ) )
assertTrue ( gateway . creditCard ( ) . find ( "network_tokenized_credit_card" ) . isNetworkTokenized ( ) )
assertTrue ( gateway . creditCard ( ) . find ( "network_tokenized_credit_card" ) . isNetworkTokenized ( ) )
assertTrue ( gateway . creditCard ( ) . find ( "network_tokenized_credit_card" ) . isNetworkTokenized ( ) )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertEquals ( "Hello World" , reply )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertEquals ( 6 , sum . get ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertEquals ( 36 , new LazyUuid ( ) . getValue ( ) . length ( ) )
forEach ( verifierResponse -> Assertions . assertThat ( verifierResponse . getStatus ( ) ) . isEqualTo ( Verifier . Status . ERROR ) )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertTrue ( duration >= 200L )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( e . getMessage ( ) , is ( "seed must not be null" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Wrapping cause." , instance . getError ( ) . getMessage ( ) )
assertTrue ( "The expression did not evaluate to null: " + result , result == null )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( "Fast response" , out )
fail ( e . getMessage ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( "Hello World" , reply )
assertThat ( response . getCode ( ) , equalTo ( 200 ) )
assertEquals ( "Fast response" , out )
assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "MessageService could not be created because of exception 'IllegalArgumentException with message 'Parameter locale MUST NOT be NULL.'." , ms . getText ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "The expression did not throw expected ELException. Got result: " + result , true , exceptionCaught )
assertEquals ( "The expression did not throw expected ELException. Got result: " + result , true , exceptionCaught )
assertThat ( response . getCode ( ) ) . isEqualTo ( HttpStatus . SC_OK )
assertNull ( out )
assertNull ( out )
assertEquals ( "Hello World" , reply )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( CasWebflowConstants . TRANSITION_ID_SUCCESS , this . action . execute ( context ) . getId ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "The url property is required but has no value" , message )
assertEquals ( "The url property is required but has no value" , message )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Fast response" , out )
assertThat ( exception . getMessage ( ) , is ( "Content MUST exists for document template with id an identifier" ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 410 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertThat ( e . getMessage ( ) , containsString ( format ( "Access denied to User:%s" , USER1 . username ( ) ) ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertEquals ( "Hello World!5" , StringSample . toStringTest ( 5 ) )
assertNull ( community . evaluate ( null ) )
assertEquals ( "Fast response" , out )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "The url property is required but has no value" , message )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertThat ( sla . getLabelFromCell ( j , i ) ) . isEqualTo ( i + " " + j )
assertEquals ( "Hello World" , reply )
assertThat ( sla . getLabelFromCell ( j , i ) ) . isEqualTo ( i + " " + j )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertThat ( sla . getLabelFromCell ( j , i ) ) . isEqualTo ( i + " " + j )
assertEquals ( timeStamps [ i ] . getTime ( ) , DateUtil . parseRfc1123Date ( rfc1123text [ i ] ) . getTime ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( System . getProperty ( "java.version" ) . substring ( 0 , 3 ) , System . getProperty ( "targetJavaVersion" ) )
assertEquals ( null , result )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertEquals ( null , result )
assertTrue ( pti . toString ( ) . contains ( "Base<String>" ) )
assertEquals ( null , result )
assertTrue ( ex . getMessage ( ) . contains ( "Nothing to fetch" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertTrue ( toml . getTable ( "a" ) . isEmpty ( ) )
assertTrue ( toml . getTable ( "key" ) . isEmpty ( ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertNotNull ( result )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( expectedStatusCode , tableClient . deleteTableWithResponse ( null , null ) . getStatusCode ( ) )
assertEquals ( expectedStatusCode , tableClient . deleteTableWithResponse ( null , null ) . getStatusCode ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "There must be user name in the auth data config." , TEST_USER , authData . getUserName ( ) )
assertThat ( asObjectArray ( arrayAsObject ) ) . isEqualTo ( expected )
fail ( e . getMessage ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( "foo" , descriptor . getId ( ) )
assertEquals ( values , map )
assertEquals ( "Fast response" , out )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertNotNull ( list )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertNull ( prefs . getOption ( "eggs" ) )
assertNotNull ( list )
assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertThat ( fromRequestAdapter . header ( "Content-Type" ) ) . isEqualTo ( "text/plain" )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( value , 999 )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( result . getName ( ) , equalTo ( "timezone" ) )
assertEquals ( "{}" , result )
assertEquals ( "41 42 43 44" , result )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( Ipv4 . parse ( "192.168.0.1" ) . asRange ( ) , Ipv4Range . parse ( "192.168.0.1-192.168.0.1" ) )
assertEquals ( RestartPolicy . parse ( "on-failure" ) , RestartPolicy . onFailureRestart ( 0 ) )
assertThat ( sut . canHandle ( uri ) , is ( true ) )
run ( context -> assertThat ( context ) . doesNotHaveBean ( AzureKeyVaultSecretAutoConfiguration . class ) )
assertTrue ( BaseBean . postConstructCalled )
assertEquals ( "updateAAD called with inputOffset 8" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "generator must not be null" ) )
assertEquals ( zkcfNext . factory ( ) . getMaxClientCnxnsPerHost ( ) , arbitraryTestClients )
assertEquals ( original , dest , "dest string does not equal original" )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertEquals ( 0 , ( ( char [ ] ) instance . encode ( obj ) ) . length )
assertThat ( tracker . getStatus ( ) , equalTo ( "Idle" ) )
assertEquals ( conf . getBrokerDeleteInactiveTopicsMode ( ) . toString ( ) , expect )
assertEquals ( "Hello Kermit" , result )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertThat ( methodCall . withArgumentArrayElements ( 0 , 0 ) , sameInstance ( methodCall ) )
assertEquals ( "jmsHello Beate" , helloWorldService . sayHello ( "Beate" ) )
assertNotNull ( endpoint )
assertNotNull ( endpoint )
assertEquals ( "Hello Kermit" , result )
assertEquals ( pos , dw . getXPos ( ) , 0 )
assertEquals ( "<X>Hi</X>, this is it." , context )
assertTrue ( duration >= 200L )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertTrue ( dialog . onStartCalled )
assertEquals ( "TestHello" , result )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertThat ( expressionTypeManager . getExpressionSqlType ( new TimeLiteral ( new Time ( 1000 ) ) ) , is ( SqlTypes . TIME ) )
assertThat ( expressionTypeManager . getExpressionSqlType ( new TimeLiteral ( new Time ( 1000 ) ) ) , is ( SqlTypes . TIME ) )
assertThat ( expressionTypeManager . getExpressionSqlType ( new TimeLiteral ( new Time ( 1000 ) ) ) , is ( SqlTypes . TIME ) )
assertThat ( expressionTypeManager . getExpressionSqlType ( new TimeLiteral ( new Time ( 1000 ) ) ) , is ( SqlTypes . TIME ) )
assertEquals ( "abc" , format . parseName ( "\"abc\"" ) )
assertEquals ( "abc" , format . parseName ( "\"abc\"" ) )
assertEquals ( expectValid , nicknameValidator . isValid ( username , null ) )
assertThat ( origin . getLocation ( ) ) . isNull ( )
assertEquals ( mockConfig , command . getConfiguration ( ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertNotNull ( list )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertNull ( TransactionTypeHolder . get ( ) )
assertThat ( MetricsCollectorRegistry . get ( "test" ) , instanceOf ( MetricsCollectorFixture . class ) )
assertThat ( MetricsCollectorRegistry . get ( "test" ) , instanceOf ( MetricsCollectorFixture . class ) )
assertNotNull ( ec )
assertNull ( Strings . trim ( null ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( workspace )
assertNotNull ( workspace )
assertEquals ( o , ConversionHelper . toObject ( o ) )
assertEquals ( result , DEFAULT_RESULT )
assertEquals ( "Hello World" , reply )
assertNotNull ( workspace )
assertEquals ( factorial , count )
assertNotNull ( workspace )
assertEquals ( "Hello World" , reply )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertTrue ( verifyUtil . isPassed ( ) , verifyUtil . getFailureMessage ( ) )
assertEquals ( "" , testHandle . getExtension ( ) )
assertArrayEquals ( new String [ 0 ] , args )
assertThat ( settings . isEnabled ( ) , is ( true ) )
assertThat ( intEnum . get ( 0 ) ) . isEqualTo ( "Zero" )
assertEquals ( toString ( dest ) , data . substring ( 0 , halfDataLength ) )
assertThat ( intEnum . get ( 0 ) ) . isEqualTo ( "Zero" )
assertEquals ( "" , v )
assertThat ( intEnum . get ( 0 ) ) . isEqualTo ( "Zero" )
assertEquals ( expected , actual )
assertEquals ( "ex2.com:50030" , ServerName . getServerName ( "ex2.com" , 50030 ) )
assertThat ( ( DateTime ) converter . convert ( null ) ) . isNull ( )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertEquals ( Json . TRUE , object . get ( "foo" ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( 0 , array . length )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( "Instance of KuraMqttProfile expected." , kuraMqttProfile . clientId ( clientId ) , IsInstanceOf . instanceOf ( KuraMqttProfile . class ) )
assertEquals ( "Hello World" , reply )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( "Constructor injection failed." , "Joe" , bean . getName ( ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertThat ( e . getCause ( ) , ( hasMessage ( endsWith ( ", path: $.ORDERTIME" ) ) ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( ":" , result )
assertEquals ( ":" , result )
assertThat ( headers . get ( "User-Agent" ) , equalTo ( USER_AGENT ) )
assertNull ( ExchangeMetaData . getPollDelayMillis ( null ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( "http://example.com/orders/{orderId}{?view}" , dummy . getTemplate ( ) . getTemplate ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertNull ( evaluate ( "${map.bar.baz}" , Object . class ) )
assertNotNull ( serviceWithId )
assertEquals ( 0L , errors )
assertEquals ( 0L , errors )
assertThat ( info . getComponent ( ) , is ( nullValue ( ) ) )
assertNull ( ExchangeMetaData . getPollDelayMillis ( null ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertNull ( ModisProductReaderPlugIn . getInputFile ( null ) )
assertNull ( converted )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertFalse ( isEligible )
assertFalse ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertEquals ( "" , output )
assertEquals ( "Hello Kermit" , bean . doAnything ( "Kermit" ) )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertThat ( buff . toString ( ) ) . isEqualTo ( "(foo=\\2abar\\28fie\\29)" )
assertFalse ( isEligible )
assertEquals ( "AAAAT" , S ( big ( ) . getAnchorSequence ( ) ) )
assertEquals ( l , LocaleType . toLocale ( l . toString ( ) ) )
assertSame ( component , table . getHeader ( ) )
assertSame ( component , table . getHeader ( ) )
assertSame ( component , table . getHeader ( ) )
assertEquals ( Preconditions . class , type )
assertEquals ( "Entity" , entityDTO . getName ( ) )
assertThat ( e . getMessage ( ) ) . containsIgnoringCase ( "History event handler is null" )
assertThat ( e . getMessage ( ) ) . containsIgnoringCase ( "History event handler is null" )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( 1 , results . length )
assertThat ( hostnamePort . getHost ( "1.2.3.4" ) ) . isEqualTo ( "1.2.3.4" )
assertThat ( proxyConfiguration . getHost ( ) ) . isEqualTo ( "http://10.10.50.43" )
assertEquals ( NetInterfaceType . ETHERNET , config . getType ( ) )
assertEquals ( "foo" , config . getIndex ( "foo" ) )
assertEquals ( source , event . getSource ( ) )
assertEquals ( config . getContextPath ( ) , "/bla/" )
assertEquals ( d1 . getTimeValue ( ) . toString ( ) , "15:44" )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( "hello world" , AviatorEvaluator . execute ( "a+b" , env , true ) )
assertThat ( newStatusCaptor . getValue ( ) . getType ( ) , is ( equalTo ( BLOCKED ) ) )
assertThat ( newStatusCaptor . getValue ( ) . getType ( ) , is ( equalTo ( BLOCKED ) ) )
assertThat ( newStatusCaptor . getValue ( ) . getType ( ) , is ( equalTo ( BLOCKED ) ) )
assertThat ( newStatusCaptor . getValue ( ) . getType ( ) , is ( equalTo ( BLOCKED ) ) )
assertThat ( newStatusCaptor . getValue ( ) . getType ( ) , is ( equalTo ( BLOCKED ) ) )
assertEquals ( "/host=*/foo=bar" , address . toString ( ) )
assertNull ( analyzer . getResourceOutputNodeType ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "" , result )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNotNull ( serviceWithId )
assertEquals ( in , out )
assertEquals ( "Can only add to an array" , result . get ( RETURN_RESULT ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( expected , result )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertNotNull ( s3Object )
assertEquals ( "value" , value )
assertEquals ( 3 , result . size ( ) )
assertEquals ( "/mapper?city=Boston&country=USA&state=MA&street=4%20Yawkey%20Way&zipcode=02215-3496" , result )
assertThat ( "Should return the provided modules." , result . get ( 0 ) . get ( "name" ) , is ( TEST_MODULE_1 ) )
assertNotNull ( result )
assertEquals ( target . getStorageMode ( ) , "Memory" )
assertEquals ( bd , result )
assertEquals ( this . expectedAdapterAttributes . getAttributes ( ) , actualAdapterAttributes )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertNotNull ( result )
assertEquals ( target . getStorageMode ( ) , "Memory" )
assertEquals ( bd , result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( 3 , result . size ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertNotNull ( s3Object )
assertThat ( result ) . isEqualTo ( uuid . toString ( ) )
assertNull ( auth )
assertEquals ( target . getStorageMode ( ) , "Memory" )
assertEquals ( target . getStorageMode ( ) , "Memory" )
assertNull ( auth )
assertEquals ( 3 , result . size ( ) )
assertEquals ( target . getStorageMode ( ) , "Memory" )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertNotNull ( s3Object )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 0 , response . getResultList ( POServicePricing . class ) . size ( ) )
assertEquals ( someValue , caseInsensitiveMapWrapper . remove ( someKey ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 3 , result . size ( ) )
assertFalse ( result )
assertNotNull ( s3Object )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( new NoSpecimen ( ) , result )
assertFalse ( result )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertTrue ( result )
assertEquals ( new NoSpecimen ( ) , result )
assertEquals ( 3 , result . size ( ) )
assertEquals ( actual , expected )
assertEquals ( expectedResult , class1 . testRejectIteratorExp01 ( ) )
assertThat ( GemfireCache . wrap ( mockRegion ) . get ( "key" ) ) . isNull ( )
assertNotNull ( multiMatchQueryImpl )
assertEquals ( actual , expected )
assertEquals ( prev , propertiesConfigurationProperties . remove ( key ) )
assertEquals ( expectedResult , class1 . testRejectIteratorExp01 ( ) )
assertThat ( GemfireCache . wrap ( mockRegion ) . get ( "key" ) ) . isNull ( )
assertNotNull ( multiMatchQueryImpl )
assertEquals ( actual , expected )
assertTrue ( result . get ( TaskAssigningRuntimeClient . class ) instanceof TaskAssigningRuntimeClientImpl )
assertThat ( this . resolver . getValue ( this . elContext , null , MISSING_PROPERTY_NAME ) , is ( nullValue ( ) ) )
assertNull ( auth )
assertEquals ( anotherValue , caseInsensitiveMapWrapper . put ( someKey , someValue ) )
assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertNotNull ( s3Object )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( 3 , result . size ( ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
assertEquals ( description ( ) . apply ( item ) , "an item" )
assertEquals ( Status . Code . INVALID_ARGUMENT , exception . getStatus ( ) . getCode ( ) )
assertEquals ( Status . Code . INVALID_ARGUMENT , exception . getStatus ( ) . getCode ( ) )
assertEquals ( new Short ( ( short ) 3 ) , t )
assertNotNull ( result )
assertEquals ( "Hello World" , reply )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertNotNull ( result )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertNotNull ( result )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertTrue ( e instanceof IllegalStateException )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertTrue ( e instanceof IllegalStateException )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertNotNull ( result )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertNotNull ( result )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertEquals ( AzureStorageTestUtil . OBJECT_KEY_WITH_CONTENT_TYPE_BUT_NO_EXTENSION , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertNotNull ( nats )
assertFalse ( returnedValue )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertNotNull ( configurationFactory . getConfiguration ( ) )
assertEquals ( "" , exampleXml )
assertThat ( mapping . getEndpointInternal ( null ) ) . isNull ( )
assertEquals ( out . toString ( ) , parseJSONToString ( json ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNotNull ( context . getBean ( Service . class ) )
assertThat ( e . getMessage ( ) , containsString ( "bucketTree" ) )
assertEquals ( "null" , BasicConstant . NULL_PLACEHOLDER . toString ( ) )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertEquals ( Colors . getDefault ( ) , view . barColor )
assertNotNull ( service . generateSessionCookieValue ( null , "foo" ) )
assertEquals ( r , Registry . getRegistry ( "testGetRegistry_1" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "TestHello" , result )
assertEquals ( submitGetRequest ( ) . trim ( ) , XML )
assertThat ( new InstrumentedType . Frozen ( TypeDescription . ForLoadedType . of ( String . class ) , loadedTypeInitializer ) . getLoadedTypeInitializer ( ) , is ( loadedTypeInitializer ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "{1,2}" , result )
assertEquals ( "{1,2}" , result )
assertEquals ( ds , CONTAINER_RULE . resource ( DataSource . class , "r" ) )
assertEquals ( ds , CONTAINER_RULE . resource ( DataSource . class , "r" ) )
assertEquals ( ds , CONTAINER_RULE . resource ( DataSource . class , "r" ) )
assertEquals ( ds , CONTAINER_RULE . resource ( DataSource . class , "r" ) )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertEquals ( "Hello Scott" , response )
assertEquals ( "Hello Scott" , response )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( submitGetRequest ( ) . trim ( ) , XML )
assertEquals ( submitGetRequest ( ) . trim ( ) , XML )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Yeah Baby It rocks!" , res )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertEquals ( firstThreadName , secondThreadName )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( firstThreadName , secondThreadName )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertEquals ( firstThreadName , secondThreadName )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( origValue , out )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "bar" , s )
assertEquals ( value , "VALUE" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNotNull ( nats )
assertEquals ( resource . getId ( ) , DOC1 , "Wrong ID." )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( expected , actual )
assertThat ( buff . toString ( ) ) . isEqualTo ( "(foo=\\2abar\\28fie\\29)" )
assertThat ( buff . toString ( ) ) . isEqualTo ( "(foo=\\2abar\\28fie\\29)" )
assertEquals ( "{1,2}" , result )
assertNull ( data . get ( "foo" , String . class ) )
assertEquals ( expectedResult , class1 . testSelectIteratorExp01 ( ) )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( 1 , result )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertNull ( bean . getDoubleValue ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( 1 , result )
assertTrue ( INVALID_DOCUMENT_NPE_MESSAGE . equals ( exception . getMessage ( ) ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertTrue ( "Claims set should have been empty but was: " + claims . toJsonString ( ) , claims . isEmpty ( ) )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( "toLowerCase" , Functions . toLowerCase ( "Geir Ove" ) , "geir ove" )
assertEquals ( Quantity . Scale . ABSOLUTE , area . getScale ( ) )
assertEquals ( Quantity . Scale . ABSOLUTE , area . getScale ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( list ( "C" , "B" , "A" ) , redis . sort ( key , alpha ( ) . desc ( ) ) )
assertEquals ( list ( "C" , "B" , "A" ) , redis . sort ( key , alpha ( ) . desc ( ) ) )
assertEquals ( i + 20 , list . getInt ( i ) )
assertEquals ( taskNum , counter . get ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ComponentNotFoundResult . MESSAGE , COMPONENT_NAME , TYPE , MODULE_NAME ) )
assertTrue ( instance . filter ( "12.35.70 GA1 \"V\"" ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ComponentNotFoundResult . MESSAGE , COMPONENT_NAME , TYPE , MODULE_NAME ) )
assertEquals ( event . getEventProperties ( ) , map )
assertEquals ( "Fast response" , out )
assertThatExceptionOfType ( AccumuloElementConversionException . class ) . isThrownBy ( ( ) -> converter . getPropertiesFromTimestamp ( group , timestamp ) ) . extracting ( "message" ) . isNotNull ( )
assertEquals ( "System.out" , SystemOutput . OUT . toString ( ) )
assertEquals ( "System.out" , SystemOutput . OUT . toString ( ) )
assertEquals ( "Foo bar baz" , Strings . capitalize ( "foo bar baz" ) )
assertEquals ( "Foo bar baz" , Strings . capitalize ( "foo bar baz" ) )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertThat ( interpreter . render ( "{{ foo.deferred }}" ) ) . isEqualTo ( "{{ foo.deferred }}" )
assertNull ( importSession . isFileHidden ( PATH ) )
assertThat ( argument . getIndex ( ) , is ( 1 ) )
assertThat ( argument . getIndex ( ) , is ( 1 ) )
assertThat ( providers . size ( ) ) . isEqualTo ( 1 )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.util.Map<java.lang.String, java.lang.Long>" )
assertEquals ( value , 999 )
assertNull ( text )
assertEquals ( val , instance . getCaption ( ) )
assertEquals ( str , testList . getLast ( ) )
assertEquals ( stdoutFile , execShellCliParser . getStdoutPath ( ) )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertNull ( ArrayUtils . get ( array , 10 ) )
assertNull ( ArrayUtils . get ( array , 10 ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertEquals ( "Fast response" , out )
assertTrue ( text . contains ( Integer . toString ( size ) ) )
assertThat ( script ) . contains ( "livereload.com/protocols/official-7" )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertThat ( value . context ( ) , is ( context ) )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertEquals ( "3.0" , result )
assertThat ( context ( ) ) . isNotNull ( )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( route , context . getRoute ( ) )
assertEquals ( 405 , launcher . service ( "GET" , "/a" , "" , null , null , null ) . getStatus ( ) )
assertEquals ( route , context . getRoute ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
notNull ( test , "Instance was null." )
notNull ( test , "Instance was null." )
notNull ( test , "Instance was null." )
notNull ( test , "Instance was null." )
notNull ( test , "Instance was null." )
assertThat ( mappings . add ( "foo" , "bar" ) ) . isNull ( )
run ( context -> assertThat ( context ) . doesNotHaveBean ( AzureKeyVaultSecretAutoConfiguration . class ) )
assertThat ( "Instance of ConnectorDescriptorProvider expected." , ProtocolDescriptorProviders . getInstance ( ) , IsInstanceOf . instanceOf ( ProtocolDescriptorProvider . class ) )
assertEquals ( "foo" , message )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "foo" , message )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNull ( sessionAdapter )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "foo" , trimQueryString ( "foo?bar" ) )
assertEquals ( "foo" , trimQueryString ( "foo?bar" ) )
assertEquals ( "foo" , trimQueryString ( "foo?bar" ) )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertEquals ( "foo" , message )
assertEquals ( "foo" , message )
assertThat ( unwrap . toString ( ) ) . contains ( "Mock for Message" )
assertThat ( unwrap . toString ( ) ) . contains ( "Mock for Message" )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNull ( result )
assertTrue ( new ChangedUriInfo ( "/rest/foo/bar" , null ) . getPath ( ) . equals ( "foo/bar" ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( entry . getValue ( ) , ( Integer ) RawConverter . fromMarketOrderIsBuyOrder ( entry . getKey ( ) ) )
assertEquals ( map . getKey ( "value1" ) , "key1" )
assertEquals ( testJson , indexedRecord . get ( 0 ) )
assertEquals ( testJson , indexedRecord . get ( 0 ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'username'" )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'username'" )
assertEquals ( stringConstructor . getName ( ) . hashCode ( ) , resolvedConstructor . hashCode ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "bob-dispatch-prod-na.amazon.com" , Region . valueOf ( "NA" ) . getEndpoint ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertThat ( parser . getAttributeNamespace ( 0 ) ) . isEqualTo ( RES_AUTO_NS )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( HttpStatus . SC_OK , status )
assertTrue ( re . getCause ( ) instanceof InstantiationException )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertNull ( recursiveType . getArrayElementType ( ) )
assertThat ( ex . getMessage ( ) , is ( "date must not be null" ) )
assertEquals ( "Fast response" , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( origValue , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertTrue ( true )
assertNull ( dataSource . getSingleExcelRow ( 100 ) , "Returned data should have been null" )
assertEquals ( e . getMessage ( ) , "acknowledgementsGroupSize needs to be > 0" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertTrue ( "The expression did not evaluate to null: " + result , result == null )
assertEquals ( "Yeah Baby It rocks!" , res )
assertSame ( component , table . getHeader ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertThat ( entityStore . getFullGraph ( randomId ( ) ) . isEmpty ( ) ) . isTrue ( )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
MatcherAssert . assertThat ( result . getClass ( ) . getName ( ) , Matchers . is ( FolderDataProvider . class . getName ( ) ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( initializer . getContainerKey ( context ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( o )
assertEquals ( "Fast response" , out )
assertThat ( transformer . getName ( ) , is ( name ) )
assertThat ( transformer . getName ( ) , is ( name ) )
assertThat ( transformer . getName ( ) , is ( name ) )
assertThat ( file , exists ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( initializer . getContainerKey ( context ) )
assertNull ( o )
assertNull ( result )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( buff . toString ( ) ) . isEqualTo ( "(foo=\\2abar\\28fie\\29)" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertThat ( result . getName ( ) , equalTo ( "timezone" ) )
assertEquals ( "41 42 43 44" , result )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( buff . toString ( ) ) . isEqualTo ( "(foo=\\2abar\\28fie\\29)" )
assertThat ( ldapName . toString ( ) ) . isEqualTo ( "" )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertThat ( result . getName ( ) , equalTo ( "timezone" ) )
assertEquals ( "41 42 43 44" , result )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( HELLO_FROM_PUBLIC_RESOURCE , result . getBody ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "2jmj7l5rSw0yVb/vlWAYkK/YBwk=" , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Hello World" , reply )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertNull ( policyConfiguration )
assertNull ( policyConfiguration )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "" , s )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertThat ( interpreter . render ( "{{ foo.deferred }}" ) ) . isEqualTo ( "{{ foo.deferred }}" )
assertNull ( importSession . isFileHidden ( PATH ) )
assertEquals ( key , transformer . fromString ( transformer . toString ( key ) ) )
assertEquals ( key , transformer . fromString ( transformer . toString ( key ) ) )
assertEquals ( password , project . getPassword ( ) )
assertEquals ( CreateMode . values ( ) . length , listing . get ( ) . getResult ( ) . size ( ) )
assertEquals ( CreateMode . values ( ) . length , listing . get ( ) . getResult ( ) . size ( ) )
assertEquals ( config . getContextPath ( ) , "/bla/" )
assertEquals ( node , operation . get ( ) . getResult ( ) )
assertEquals ( node , operation . get ( ) . getResult ( ) )
assertEquals ( createChildListing ( "child1" ) , future . get ( ) . getResult ( ) )
assertEquals ( createChildListing ( ) , future . get ( ) . getResult ( ) )
assertEquals ( createChildListing ( "child1" ) , future . get ( ) . getResult ( ) )
assertEquals ( "/one" , result . getResult ( ) )
assertEquals ( "/one" , result . getResult ( ) )
assertEquals ( "/two" , result . getResult ( ) )
assertEquals ( "/two" , result . getResult ( ) )
assertEquals ( "/three0000000002" , result . getResult ( ) )
assertEquals ( "/four" , result . getResult ( ) )
assertArrayEquals ( "Really trust us" . getBytes ( ) , future . get ( ) . getResult ( ) )
assertEquals ( null , future . get ( ) . getResult ( ) )
assertTrue ( exists . get ( ) . isOk ( ) )
assertFalse ( exists . get ( ) . isOk ( ) )
assertTrue ( exists . get ( ) . isOk ( ) )
assertFalse ( exists . get ( ) . isOk ( ) )
assertEquals ( "/two" , result . getResult ( ) )
assertThat ( map . get ( "abc" ) ) . isEqualTo ( new BigDecimal ( 123 ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( "foo" , exception . getMessage ( ) )
assertEquals ( getType ( jsonValue ) . toString ( ) , "map<json>[]" )
assertEquals ( 10 , builder . build ( ) . getTimeout ( ) )
assertNotNull ( classUnderTest . getGreeting ( ) , "app should have a greeting" )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( uri , molgenisPlugin . getUri ( ) )
assertThat ( arrayOfValues . size ( ) , is ( 0 ) )
assertEquals ( "+a -a/b" , s . getPattern ( ) )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEquals ( "TESTfooTEST" , result )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertNull ( result )
assertThat ( Transformer . NoOp . INSTANCE . transform ( mock ( TypeDescription . class ) , target ) , is ( target ) )
assertEquals ( i , cache . getObject ( i ) )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertThat ( fragment . getRoute ( ) ) . isNotSameAs ( oldRoute )
assertFalse ( "testString" . equals ( builder . build ( ) . asText ( ) ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( ClassB . class , theCls )
assertThat ( testee . getNamespaceURI ( "xyz" ) ) . isEqualTo ( XMLConstants . NULL_NS_URI )
assertThat ( objectFactory . systemCommanderClient ( mBeanConnector , jmxConnector ) , is ( notNullValue ( ) ) )
assertEquals ( "1234.5" , result )
assertTrue ( "The expression did not evaluate to null: " + result , result == null )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( bs . getLines ( ) . mkString ( "\n" ) , is ( equalTo ( INPUT_TXT_CONTENT ) ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( testName , object . getName ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "$foo" , s )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( 10 , container . values . get ( lockKey ) . size ( ) )
assertEquals ( "daily" , intervalType . toString ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "daily" , intervalType . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "http://example.com/orders/{orderId}{?view}" , dummy . getTemplate ( ) . getTemplate ( ) )
assertTrue ( e . getMessage ( ) . contains ( "flow" ) )
assertEquals ( "Just a test" , e . getMessage ( ) )
assertEquals ( "Just a test" , e . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertTrue ( e . getMessage ( ) . contains ( "flow" ) )
assertEquals ( System . getProperty ( "java.version" ) . substring ( 0 , 3 ) , System . getProperty ( "targetJavaVersion" ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNull ( FilterUtil . quote ( null ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertThat ( doc . getName ( ) ) . isEqualTo ( name )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertThat ( doc . getName ( ) ) . isEqualTo ( name )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( "ec2.ap-southeast-1.amazonaws.com" , result )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "test" , ioe . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "Dummy" ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "getQuux2(S)" , resolver . getId ( method ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "@RequestScoped test string" , returned )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertThat ( person . getName ( ) , is ( "Smith" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertEquals ( "Hello Kermit" , result . getBody ( ) )
assertThat ( this . destination , is ( equalTo ( outcome . getDestination ( ) ) ) )
assertEquals ( "Hello Kermit" , result . getBody ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNotNull ( monthView . getSelectionModel ( ) )
assertNotNull ( monthView . getSelectionModel ( ) )
assertTrue ( expected . getMessage ( ) . toLowerCase ( ) . contains ( "package" ) )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertFalse ( timeout . exit ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( COUNT , bag . size ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "SA" , exchanges . get ( 0 ) . getIn ( ) . getBody ( Map . class ) . get ( "NAME" ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertThat ( future . get ( ) , is ( value ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertNotNull ( message )
assertEquals ( "[4,3,2,1]" , linkedList . toString ( ) )
assertEquals ( "[4,3,2,1]" , linkedList . toString ( ) )
assertEquals ( purRepository , diConfig . getRepository ( ) )
assertEquals ( purRepository , diConfig . getRepository ( ) )
assertEquals ( "MASTER.CLUSTER.ACTIVE_NODES" , MetricsUtil . getCanonicalName ( Master . Cluster . ACTIVE_NODES ) )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertNull ( lookup . lookup ( "X" ) )
assertNotNull ( result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNotNull ( endpoint )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( CasWebflowConstants . TRANSITION_ID_ERROR , mfaSetTrustAction . execute ( context ) . getId ( ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "/foo/bar/beer" , new FolderPath ( "foo" , "bar" , "beer" ) . serializeAsString ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "Test\n1" , out )
assertEquals ( "Test\n1" , out )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertNotNull ( actual )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertNotNull ( actual )
assertEquals ( "jpg" , MimeTypeUtils . fileExtensionForMIMEType ( "image/jpeg" ) )
assertTrue ( "Parser accepted the invalid value " + testValues [ i ] + "." , numRead == - 1 )
assertEquals ( "Hello Kermit" , result )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'client_id'" )
assertEquals ( PWD , pp . getPassword ( ) )
assertEquals ( "[1]" , list . toString ( ) )
assertEquals ( "100" , result )
assertTrue ( "Must create an OidcIdentityStore instance." , oidcIdentityStoreBean . create ( creationalContext ) instanceof OidcIdentityStore )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertTrue ( "Must create an OidcIdentityStore instance." , oidcIdentityStoreBean . create ( creationalContext ) instanceof OidcIdentityStore )
fail ( e . getMessage ( ) )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertEquals ( "user1" , targetBean . getPrincipalName ( ) )
assertEquals ( "jpg" , MimeTypeUtils . fileExtensionForMIMEType ( "image/jpeg" ) )
assertTrue ( "Parser accepted the invalid value " + testValues [ i ] + "." , numRead == - 1 )
assertEquals ( functionA , evaluator . getContext ( ) . resolveFunction ( "a" , "a" ) )
assertNotNull ( jarMetaData )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertEquals ( "foo.bar" , qn . toString ( ) )
assertEquals ( "foo.bar" , qn . toString ( ) )
assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertNotNull ( map . toString ( ) )
assertNotNull ( map . toString ( ) )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertThat ( bean . getPrivatePropertyWithMutators ( ) ) . isEqualTo ( "value" )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertNotNull ( date )
assertEquals ( 482196050052L , date . getTime ( ) )
assertTrue ( walSource instanceof MetricsWALSourceImpl )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertEquals ( clazz . getCanonicalName ( ) , converter . convertTo ( clazz ) )
assertNotNull ( message )
assertEquals ( MyTestAction . class , aClass )
assertNotNull ( message )
assertEquals ( clazz . getCanonicalName ( ) , converter . convertTo ( clazz ) )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertEquals ( toString ( dest ) , "!!" + data . substring ( 0 , halfDataLength ) )
assertEquals ( "another string" , Tools . getStringFromInputStream ( is ) )
assertEquals ( "Hello World, AS 7 !" , s )
assertThat ( path . toString ( ) ) . isEqualTo ( "cn=foo/bar" )
assertEquals ( "TE" , out . toString ( ) )
assertNotNull ( ds )
assertNotNull ( ds )
assertEquals ( expected , actual )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertThat ( consoleOutput . getOutput ( ) , containsString ( "No IDs or filter provided" ) )
assertEquals ( "41424344" , result )
assertEquals ( b , Database . blob ( b ) )
assertThat ( TextUtil . getByteBuffer ( null ) ) . isNull ( )
assertNotNull ( Helper . getBlueprintContainerForBundle ( context ( ) , "sample" + i ) )
assertEquals ( " AB | CD |" , iv . getValues ( ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertEquals ( "dXNlcjpzZWNyZXQ=" , instance . getBasicAuthToken ( ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertThat ( c . compute ( ) , is ( "String" ) )
assertFalse ( db ( ) . query ( new NewerConfigQuery ( serverUUID ( ) , savedMs ) ) . isPresent ( ) )
assertEquals ( timestamp , result . getTimestamp ( ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertEquals ( expected , actual )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( 2000 , Duration . milliseconds ( 2 ) . toMicroseconds ( ) )
assertEquals ( true , ( 2000L <= timeElapsed ) && ( timeElapsed <= 3000L ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
assertArrayEquals ( new byte [ 0 ] , out )
assertEquals ( xml , documentToString ( dom ) )
assertEquals ( xml , documentToString ( dom ) )
assertNotNull ( the ( result ) )
assertThat ( service . getBytes ( data ) , is ( new byte [ ] { 'a' } ) )
assertArrayEquals ( new byte [ 0 ] , out )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertEquals ( sampleTest , OAuthUtils . saveStreamAsString ( is ) )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
assertNull ( obj )
assertEquals ( "" , s )
assertEquals ( "Hello One Fred Bloggs Hello Two Fred Bloggs Hello Three Fred Bloggs Hello Four Fred Bloggs" , helloWorldReference . getGreetings ( "Fred Bloggs" ) )
assertTrue ( BaseBean . postConstructCalled )
assertEquals ( "Hello, " + name , greeter . greet ( name ) )
assertTrue ( formatter . getCurrentDay ( ) . startsWith ( f . format ( d ) ) )
assertNull ( testMock )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( sut . name ( ) , equalTo ( NAME ) )
assertThatCode ( ( ) -> client . close ( ) ) . doesNotThrowAnyException ( )
assertEquals ( Beans . getDeclaredBeanType ( Foo . class ) . getTypeName ( ) , String . class . getSimpleName ( ) )
assertEquals ( Beans . getDeclaredBeanType ( Foo . class ) . getTypeName ( ) , String . class . getSimpleName ( ) )
assertEquals ( Beans . getDeclaredBeanType ( Foo . class ) . getTypeName ( ) , String . class . getSimpleName ( ) )
assertEquals ( Beans . getDeclaredBeanType ( Foo . class ) . getTypeName ( ) , String . class . getSimpleName ( ) )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertEquals ( "3.0" , result )
assertEquals ( "Invalid credential source format type: null." , e . getMessage ( ) )
assertThat ( costMap . get ( new VectorNode ( Vector3f . ONE , null ) ) , equalTo ( 2F ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "Invalid credential source format type: null." , e . getMessage ( ) )
assertEquals ( "Invalid to have null byte array in KeyValue." , iae . getMessage ( ) )
assertEquals ( "daily" , intervalType . toString ( ) )
assertNull ( testMock )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertNotNull ( serviceWithId )
assertThat ( e . getMessage ( ) , containsString ( "@OnMessage public void " + MessageSocket . class . getName ( ) + "#onMessage" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
run ( ( context ) -> assertThat ( context ) . doesNotHaveBean ( "forWar" ) )
assertTrue ( wb1 . equals ( wb1 ) )
assertNull ( testMock )
assertEquals ( "oops" , e . getMessage ( ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertNotNull ( context . getBean ( Service . class ) )
assertNotNull ( context . getBean ( Service . class ) )
assertNotEquals ( threadName , doAsync . get ( ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "123" , searchIndexSplitsOptions . getIndexName ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( HostState . INIT , clusters . getHost ( "h1" ) . getState ( ) )
assertThat ( this . state . getSortColumn ( ) , is ( equalTo ( sortColumn ) ) )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
assertNull ( group . getConfiguration ( ) )
assertNull ( group . getConfiguration ( ) )
assertEquals ( "oops" , e . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertThat ( subject . getField ( ) ) . isEqualTo ( "value" )
assertThat ( subject . getField ( ) ) . isEqualTo ( "value" )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "1" , actie . toString ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( 1 , SomeInterceptor . invocationCount )
assertEquals ( mtlsEndpoint , endpointSelected )
assertEquals ( "123" , searchIndexSplitsOptions . getIndexName ( ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( "{1,2}" , result )
assertEquals ( "{1,2}" , result )
assertNull ( data . get ( "foo" , String . class ) )
assertNull ( data . get ( "foo" , String . class ) )
assertThat ( map . get ( "magicNumber" ) ) . isEqualTo ( 3L )
assertEquals ( "{1,2}" , result )
assertNull ( data . get ( "foo" , String . class ) )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertEquals ( "123" , searchIndexSplitsOptions . getIndexName ( ) )
assertEquals ( "file:/any/target/jwbf-3.0.0-snapshot.jar" , actual )
assertEquals ( "System.out" , SystemOutput . OUT . toString ( ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertTrue ( new SpewerStub ( ) . outputMetadata ( ) )
assertThat ( result . getStatus ( ) , is ( Status . NO_ACTION ) )
assertEquals ( status , Status . ACTIVE )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( "Correct private key expected" , BOB_ENCRYPTION_PRIVATE_KEY , key . getPrivateKey ( ) . toString ( ) )
assertEquals ( EnvironmentUtil . getVersion ( ) , settings . clientVersion ( ) )
assertTrue ( true )
assertNull ( e . getResponse ( ) )
assertEquals ( "test" , getProperties ( ) . getProperty ( "custom.plugin.stringValue" ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertTrue ( time < 5 * 1000 )
assertEquals ( "Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService" , result )
assertEquals ( null , result )
assertNull ( result )
assertEquals ( getFile ( new URL ( url ) ) , new File ( file ) . getAbsolutePath ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( 1 , result )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Hello Kermit" , bean . doAnything ( "Kermit" ) )
assertThat ( future . get ( ) . getStatusCode ( ) ) . isEqualTo ( Status . OK )
assertThat ( future . get ( ) . getStatusCode ( ) ) . isEqualTo ( Status . OK )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( "/foo/bar.jar" , FilenameUtils . separatorsToUnix ( "\\foo\\bar.jar" ) )
assertEquals ( "/foo/bar.jar" , FilenameUtils . separatorsToUnix ( "\\foo\\bar.jar" ) )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertEquals ( "number of results" , 1 , preparedQuery . countEntities ( withDefaults ( ) ) )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertEquals ( stats . getCounter ( "fuu" ) , 0 )
assertNotNull ( Main . getContext ( ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( 3 , this . engine . eval ( "a+b" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertEquals ( "Hello World" , reply )
assertThat ( e , exception ( NoSuchBeanDefinitionException . class , AsyncTaskExecutor . class . getName ( ) ) )
assertNull ( filler )
assertEquals ( true , executeExpression ( "true" ) )
assertEquals ( true , executeExpression ( "true" ) )
assertEquals ( "test" , ioe . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "E0104: Could not fully initialize service" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertThat ( sut . canHandle ( uri ) , is ( true ) )
assertThat ( sut . canHandle ( uri ) , is ( true ) )
assertEquals ( "The source string can not be null" , e . getMessage ( ) )
assertEquals ( "The source string can not be null" , e . getMessage ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertNull ( array )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( firstThreadName , secondThreadName )
assertThat ( parser . parse ( "local_hour > 0" ) , is ( "local_hour > 0" ) )
assertThat ( parser . parse ( "local_hour > 0" ) , is ( "local_hour > 0" ) )
assertThat ( parser . parse ( "local_hour > 0" ) , is ( "local_hour > 0" ) )
assertThat ( ParamsParser . parseParams ( httpDelete ) ) . isEmpty ( )
assertThat ( ParamsParser . parseParams ( httpDelete ) ) . isEmpty ( )
assertEquals ( expected . toString ( ) , result . toString ( ) )
assertEquals ( expected . toString ( ) , result . toString ( ) )
assertEquals ( expected . toString ( ) , result . toString ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e . getMessage ( ) . contains ( "flow" ) )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertTrue ( sortedSet instanceof TreeSet , " sortedSet should be TreeSet" )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertTrue ( e instanceof IllegalArgumentException )
assertThat ( ParamsParser . parseParams ( httpDelete ) ) . isEmpty ( )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertThat ( ParamsParser . parseParams ( httpDelete ) ) . isEmpty ( )
assertEquals ( expectedResult , HeaderHelper . removeQuoteEscapes ( string ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertNull ( testMock )
assertEquals ( "The url property is required but has no value" , message )
assertNull ( testMock )
assertEquals ( "test" , ioe . getMessage ( ) )
assertEquals ( "test" , ioe . getMessage ( ) )
assertNull ( community . evaluate ( null ) )
assertNull ( community . evaluate ( null ) )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( transformed . getSchema ( ) , ds . getSchema ( "states_mini" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "Wrong author address" , AUTHOR_ADDRESS , author . get ( 0 ) . getEmail ( ) )
assertEquals ( "salmonella" , view . label ( ) )
assertEquals ( "Hello Kermit" , result )
assertNull ( "stateful postConstruct operation should success: " + stateful . getPostConstructErrorMessage ( ) , stateful . getPostConstructErrorMessage ( ) )
assertEquals ( "thing" , other . getName ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "" , result )
assertNotNull ( resolver )
assertEquals ( object . getString ( ) , "Non-registered, top level class." )
assertEquals ( null , result )
assertEquals ( 1 , result )
assertEquals ( logResult , new BodyLogger . Default ( ) . log ( exchange ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "one" , command . get ( 0 , TimeUnit . MILLISECONDS ) )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertTrue ( true )
assertTrue ( true )
assertEquals ( key , ConfigurationKey . fromString ( key . get ( ) ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( ( String ) exchange . getIn ( ) . getBody ( ) , is ( "body" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertTrue ( tenants . size ( ) > 0 )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertThat ( context ( ) ) . isNotNull ( )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertThat ( path1 . toString ( ) ) . isEqualTo ( "ou=foo,ou=baz,ou=bar" )
assertThat ( path1 . toString ( ) ) . isEqualTo ( "ou=foo,ou=baz,ou=bar" )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertNull ( this . hashCache . get ( "myKey" , - 10000 ) )
assertEquals ( "Test\n1" , out )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( expResult , result )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( name , UserName . fromString ( name ) . toString ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThatThrownBy ( ( ) -> processor . process ( exchange ) ) . isSameAs ( exception )
assertNull ( community . evaluate ( null ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertThat ( methodCall . withArgumentArrayElements ( 0 , 0 ) , sameInstance ( methodCall ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( methodCall . withArgumentArrayElements ( 0 , 0 ) , sameInstance ( methodCall ) )
assertEquals ( 3 , sum )
assertThat ( exchange . getIn ( ) . getHeader ( TraceHeaderProcessor . TRACE_HEADER ) , nullValue ( ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( name , UserName . fromString ( name ) . toString ( ) )
assertEquals ( production . getProperty ( ) , "value" )
assertThat ( fragment . getRoute ( ) ) . isNotSameAs ( oldRoute )
assertThat ( e . getMessage ( ) , containsString ( "1, 2, null" ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Fast response" , out )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertEquals ( "text/html" , NanoHTTPD . getMimeTypeForFile ( "xxxx.html" ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Test\n1" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
fail ( e . getMessage ( ) )
assertTrue ( drone . getCurrentPage ( ) . render ( ) instanceof CustomiseSiteDashboardPage )
run ( context -> assertThat ( context ) . doesNotHaveBean ( PersonRepository . class ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Wrong class" , HdfsMrsImageWriter . class , provider . getMrsTileWriter ( context ) . getClass ( ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Hello Scott" , response )
assertEquals ( "Hello Scott" , response )
assertNull ( command . get ( 2 , TimeUnit . MICROSECONDS ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "Hello Kermit" , result )
assertFalse ( field . getBit ( i ) )
assertNull ( FilterUtil . quote ( null ) )
assertTrue ( ee . getCause ( ) instanceof TransactionNotFoundException )
assertEquals ( "Hello World" , reply )
assertEquals ( list ( "C" , "B" , "A" ) , redis . sort ( key , alpha ( ) . desc ( ) ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Hello World" , reply )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "Unable to find entry for 1234:1-1999" , exception . getMessage ( ) )
assertEquals ( "{\"map\":{\"\":null}}" , ADAPTER . serialize ( mapHolder , SerializerEncoding . JSON ) )
assertEquals ( null , result )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertEquals ( null , result )
assertEquals ( null , result )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( firstThreadName , secondThreadName )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Invalid fragment index or sequence order" , iae . getMessage ( ) )
assertEquals ( "Invalid fragment index or sequence order" , iae . getMessage ( ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertEquals ( "Invalid fragment index or sequence order" , iae . getMessage ( ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertThat ( response . getStatus ( ) , is ( 404 ) )
assertEquals ( e . getMessage ( ) , "Chunking on a single value is not possible" )
assertEquals ( "Hello Kermit" , result . getBody ( ) )
assertEquals ( "SA" , row . get ( "NAME" ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result . getBody ( ) )
assertEquals ( "Hello Kermit!\n" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Hello Kermit" , result )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertNull ( documentation )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertNull ( documentation )
assertNull ( documentation )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertEquals ( "Hello" , internalPlanetService . sayHello ( getServiceContext ( ) ) )
assertNotNull ( context . getBean ( "myBean" ) )
assertNotNull ( context . getBean ( "myBean" ) )
assertNotNull ( context . getBean ( "myBean" ) )
assertThat ( cause . getMessage ( ) , containsString ( cidr ) )
assertThat ( cause . getMessage ( ) , containsString ( cidr ) )
assertNull ( output )
assertNull ( output )
assertThat ( cause . getMessage ( ) , containsString ( cidr ) )
assertThat ( cause . getMessage ( ) , containsString ( cidr ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertNull ( ArrayUtils . get ( array , 1 ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( null , result )
assertThat ( context . getConfigFile ( ) , is ( nullValue ( ) ) )
assertNotNull ( result )
assertEquals ( "Entity" , entityDTO . getName ( ) )
assertNotNull ( result )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( folder . getName ( ) , "name2" )
assertTrue ( SingleTask . first )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertThat ( ( String ) processBag . getProperty ( "test" ) , is ( String . valueOf ( id ) ) )
assertThat ( ( String ) processBag . getProperty ( "test" ) , is ( String . valueOf ( id ) ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertNotNull ( basic )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNull ( requestContext . getParameter ( "UNKOWN" ) )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( "00041" , subject ( ) . lengthField ( ) )
assertEquals ( command . trim ( ) , F . readCommandFromIncomingStream ( stream ) . trim ( ) )
assertNull ( o )
assertNull ( o )
assertThat ( key . name ( ) ) . isEqualTo ( "foo.bar.baz" )
assertThat ( Converters . create ( Person2 . class , "vertx" ) . name ) . isEqualTo ( "vertx" )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( PingWithInternalDriver . class , modules . getInstance ( Ping . class ) . getClass ( ) )
assertThat ( AdapterUtils . adapt ( foo , String . class , null ) , is ( foo ) )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "com.microsoft.sqlserver.jdbc.SQLServerDriver" , dbMeta . getDriverClass ( ) )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertFalse ( listValue )
assertFalse ( nodeAbsent ( "{\"test.1\":{\"value\":1}}" , Path . create ( "test\\.1" ) , false ) )
assertEquals ( "http://test.com/some/path" , RestService . buildRequestUrl ( baseUrl , path ) )
assertEquals ( "http://test.com/some/path" , RestService . buildRequestUrl ( baseUrl , path ) )
assertNull ( manifest )
assertEquals ( name , InetAddressUtilities . getHostName ( ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertTrue ( called . get ( ) )
assertEquals ( "com.microsoft.sqlserver.jdbc.SQLServerDriver" , dbMeta . getDriverClass ( ) )
assertThat ( deduplicator . findPrevious ( key , exchange1 ) , is ( nullValue ( ) ) )
assertEquals ( "/3/300" , result )
assertNull ( to )
assertEquals ( "target-package" , ShellUtil . shellifyOptionNameDashed ( "targetPackage" ) )
assertThat ( SystemPropertyUtil . getSystemProperty ( "key0" , "value0" ) , is ( "value0" ) )
assertThat ( SystemPropertyUtil . getSystemProperty ( "key0" , "value0" ) , is ( "value0" ) )
assertTrue ( ex . getMessage ( ) . contains ( "Nothing to fetch" ) )
assertEquals ( "test" , ioe . getMessage ( ) )
assertFalse ( resources . contains ( "/login" ) )
assertFalse ( resources . contains ( "/login" ) )
assertEquals ( "432.0 MB" , actual )
assertEquals ( "00000000003v" , encodeBase32 ( 123 ) )
assertThat ( unlimitedDataSource . getUsage ( ) ) . isEqualTo ( - 1f )
assertNull ( component . getComponent ( VEvent . class ) )
assertNull ( component . getComponent ( VEvent . class ) )
assertNull ( component . getComponent ( VEvent . class ) )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertEquals ( "The url property is required but has no value" , message )
assertTrue ( "Instance of FastHeadersMapFactory" , factory instanceof FastHeadersMapFactory )
assertNull ( provider . server )
assertEquals ( message , mockAll . getExchanges ( ) . get ( 0 ) . getIn ( ) . getBody ( ) )
assertEquals ( new Long ( 1L ) , num )
assertEquals ( new Long ( 1L ) , num )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( PlatformVersion . getVersion ( ) , result )
assertEquals ( PlatformVersion . getVersion ( ) , result )
assertEquals ( PlatformVersion . getVersion ( ) , result )
assertEquals ( PlatformVersion . getVersion ( ) , result )
assertEquals ( PlatformVersion . getVersion ( ) , result )
assertEquals ( "test" , e . getAccountId ( ) )
assertEquals ( new Long ( 1L ) , num )
assertEquals ( PUBLIC_ADDRESS , worker . getPublicIpAddress ( ) )
assertEquals ( PUBLIC_ADDRESS , worker . getPublicIpAddress ( ) )
assertThat ( p . getProperty ( "testSystemProperty" ) ) . isEqualTo ( "true" )
assertEquals ( "full" , resolved )
assertTrue ( "The CXF JMX MBeans are not enabled in Liberty." , ( mbSet . size ( ) > 0 ) )
assertThat ( e . getMessage ( ) , containsString ( "1, 2, null" ) )
JSONAssert . assertEquals ( "{}" , node . toString ( ) , false )
assertEquals ( objName , testName )
assertEquals ( "bar" , s )
assertTrue ( TEXT . equals ( groupList . asText ( ) ) )
assertTrue ( TEXT . equals ( groupList . asText ( ) ) )
assertEquals ( "Server version" , "1.2.3" , result . getVersion ( ) )
fail ( )
assertEquals ( 5 , max )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertEquals ( 5 , integerBatchIterable . getBatchCount ( 3 ) )
assertThat ( IntegerUtil . toPrimitiveInt ( i ) , is ( 1 ) )
assertThat ( IntegerUtil . toPrimitiveInt ( i ) , is ( 1 ) )
assertEquals ( 5 , max )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( windows . withBlocks ( ) . isEmpty ( ) , is ( true ) )
assertThat ( windows . withBlocks ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( test , ois . readObject ( ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( 120 , Duration . hours ( 2 ) . toMinutes ( ) )
assertEquals ( "cats" , result )
assertNull ( testMock )
assertNull ( testMock )
assertNull ( testMock )
assertEquals ( timezone , "Asia/Seoul" )
assertEquals ( timezone , "Asia/Seoul" )
assertEquals ( "A-B-C-D" , parseEtagCookieId ( "\"A-B-C-D/1970-01-01-00:00:00.000\"" ) )
assertEquals ( "A-B-C-D" , parseEtagCookieId ( "\"A-B-C-D/1970-01-01-00:00:00.000\"" ) )
assertEquals ( "A-B-C-D" , parseEtagCookieId ( "\"A-B-C-D/1970-01-01-00:00:00.000\"" ) )
assertEquals ( "A-B-C-D" , parseEtagCookieId ( "\"A-B-C-D/1970-01-01-00:00:00.000\"" ) )
assertEquals ( "A-B-C-D" , parseEtagCookieId ( "\"A-B-C-D/1970-01-01-00:00:00.000\"" ) )
assertEquals ( timezone , "Asia/Seoul" )
assertNull ( testMock )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertNotNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNotNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNotNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertEquals ( CasWebflowConstants . TRANSITION_ID_ERROR , mfaSetTrustAction . execute ( context ) . getId ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( argument . getIndex ( ) , is ( 1 ) )
assertEquals ( 10 , result . toMap ( ) . get ( RETURN_NB_CALL ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( new Integer ( idx ++ ) , ex . getIn ( ) . getBody ( Integer . class ) )
assertEquals ( 10 , result . toMap ( ) . get ( RETURN_NB_CALL ) )
assertNull ( lastVersion )
assertNull ( data . get ( "foo" , String . class ) )
assertNull ( data . get ( "foo" , String . class ) )
assertEquals ( "" , result )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "image/png" , getAsServletResponse ( request ) . getContentType ( ) )
assertEquals ( UpgradeCheckStatus . PASS , result . getStatus ( ) )
assertEquals ( UpgradeCheckStatus . PASS , result . getStatus ( ) )
assertEquals ( UpgradeCheckStatus . PASS , result . getStatus ( ) )
assertEquals ( UpgradeCheckStatus . PASS , result . getStatus ( ) )
assertEquals ( "Key not a known word F" , iae . getMessage ( ) )
assertThat ( collector . extension ( ) ) . isEqualToIgnoringCase ( "thl.html" )
assertEquals ( CasWebflowConstants . TRANSITION_ID_ERROR , verifyPasswordlessAccountAuthenticationAction . execute ( context ) . getId ( ) )
assertNull ( pti . getOwnerType ( ) )
assertEquals ( "InterceptedA: InterceptedB: The Message" , result )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertNull ( bean . getDoubleValue ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "InterceptedA: InterceptedB: The Message" , result )
assertEquals ( "Hello World" , reply )
assertEquals ( "InterceptedA: InterceptedB: The Message" , result )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertNull ( bean . getDoubleValue ( ) )
assertThatThrownBy ( ( ) -> map . put ( 1 , new Value ( 1 ) ) ) . isInstanceOf ( HazelcastSerializationException . class )
assertEquals ( "Hello World" , reply )
assertTrue ( true )
assertEquals ( "Hello World" , reply )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertEquals ( "Fast response" , out )
assertEquals ( "Test\n1" , out )
assertEquals ( LazyList . get ( input , 0 ) , "a" )
assertEquals ( "Hello, " + name , greeter . greet ( name ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( "Fast response" , out )
assertEquals ( "Fast response" , out )
assertThat ( databaseBackedConfig . getEmailLogLevel ( ) ) . isEqualTo ( "INFO" )
assertEquals ( expectedResult , Utils . stripHtml ( html ) )
assertEquals ( command . trim ( ) , F . readCommandFromIncomingStream ( stream ) . trim ( ) )
assertEquals ( "bar:bar2" , substringAfter ( "foo:bar:bar2" , ':' ) )
assertEquals ( "text/plain; charset=IBM866" , metadata . get ( Metadata . CONTENT_TYPE ) )
assertEquals ( 3 , features . getLength ( ) )
assertThat ( "<foo/>" , not ( hasXPath ( "//bar" , equalTo ( "a" ) ) . withXPathFactory ( xFac ) ) )
assertNotNull ( XMLHelper . newTransformer ( ) )
assertNotNull ( path )
assertEquals ( "val" , namedConfig . get ( "non.existent.key" , "val" ) )
assertEquals ( "val" , namedConfig . get ( "non.existent.key" , "val" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertNull ( mqttUserNamePassword )
assertEquals ( "jdbc:mysql://localhost:3306/path1?/path2" , PEUrl . stripUrlParameters ( "jdbc:mysql://localhost:3306/path1?/path2?opt1=optvalue" ) )
assertNull ( mqttUserNamePassword )
assertEquals ( "jdbc:mysql://localhost:3306/path1?/path2" , PEUrl . stripUrlParameters ( "jdbc:mysql://localhost:3306/path1?/path2?opt1=optvalue" ) )
assertEquals ( "jdbc:mysql://localhost:3306/path1?/path2" , PEUrl . stripUrlParameters ( "jdbc:mysql://localhost:3306/path1?/path2?opt1=optvalue" ) )
( ) -> assertThat ( getMuleHome ( ) . get ( ) . getName ( ) , is ( EXPECTED_MULE_HOME_VALUE ) ) )
( ) -> assertThat ( getMuleHome ( ) . get ( ) . getName ( ) , is ( EXPECTED_MULE_HOME_VALUE ) ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( MethodDescriptionUtils . getConstructorSimpleName ( "String" ) , "String" )
assertEquals ( "" , result )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "_1" + FOO_SIMPLE_NAME + "_" , Formatting . replaceIfIllegalJavaIdentifierCharacter ( "1" + FOO_SIMPLE_NAME + "~" ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "_1" + FOO_SIMPLE_NAME + "_" , Formatting . replaceIfIllegalJavaIdentifierCharacter ( "1" + FOO_SIMPLE_NAME + "~" ) )
assertEquals ( "IFMISSING(1, 2, 3)" , ConditionalFunctions . ifMissing ( x ( 1 ) , x ( 2 ) , x ( 3 ) ) . toString ( ) )
assertEquals ( "IFMISSING(1, 2, 3)" , ConditionalFunctions . ifMissing ( x ( 1 ) , x ( 2 ) , x ( 3 ) ) . toString ( ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( expectedJson , JsonTemplateMapper . toUtf8String ( containerConfiguration ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "someJob" , UrlUtils . toFullJobPath ( "someJob" ) )
assertEquals ( "_1" + FOO_SIMPLE_NAME + "_" , Formatting . replaceIfIllegalJavaIdentifierCharacter ( "1" + FOO_SIMPLE_NAME + "~" ) )
assertEquals ( "_1" + FOO_SIMPLE_NAME + "_" , Formatting . replaceIfIllegalJavaIdentifierCharacter ( "1" + FOO_SIMPLE_NAME + "~" ) )
assertEquals ( false , builder . build ( ) . useMultiThreadedClientPolicy ( ) )
assertThat ( project . properties ( ) . keySet ( ) , hasSize ( 0 ) )
assertEquals ( first . not ( ) , builder . getValue ( ) )
assertEquals ( Optional . of ( value ) , config . fetchSize ( ) )
assertEquals ( 3.0 , v . dotProduct ( Vector . of ( 1 , 2 , 3 , 4 ) ) , 0.0 )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertEquals ( 2 , map . size ( ) )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringVar ( ) , is ( "" ) )
assertNull ( signer . getContent ( ) )
assertNull ( signer . getContent ( ) )
assertEquals ( ":" , result )
assertThat ( getPAC ( query ) . run ( ) , equalTo ( getAllStartingSuggestions ( query . length ( ) ) ) )
assertThat ( SerializationUtils . clone ( r ) , equalTo ( r ) )
assertNull ( attr . lookupNamespaceURI ( null ) )
assertTrue ( command . toString ( ) . contains ( CHANNEL ) )
assertEquals ( "{\"head\":null,\"boolean\":true}" , writer . toString ( ) )
assertEquals ( "{\"head\":null,\"boolean\":true}" , writer . toString ( ) )
assertEquals ( "{\"head\":null,\"boolean\":true}" , writer . toString ( ) )
assertEquals ( "{\"head\":null,\"boolean\":true}" , writer . toString ( ) )
assertEquals ( "{\"head\":null,\"boolean\":true}" , writer . toString ( ) )
assertNull ( query . getDatabase ( ) )
assertTrue ( command . toString ( ) . contains ( CHANNEL ) )
assertNull ( signer . getContent ( ) )
assertThat ( s . toString ( ) ) . isEmpty ( )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertEquals ( 15 , count )
assertEquals ( 15 , count )
assertEquals ( 15 , count )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertTrue ( StringUtils . join ( testList ) . equals ( "t, a, j, o" ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> components . add ( null ) )
assertTrue ( StringUtils . join ( testList ) . equals ( "t, a, j, o" ) )
assertThat ( builder . key ( ) ) . isEqualTo ( expected )
assertNotNull ( rs )
assertNotNull ( rs )
assertEquals ( ( double ) i + j , M . get ( i , j ) , eps )
assertEquals ( ( double ) i + j , M . get ( i , j ) , eps )
assertEquals ( ( double ) i + j , M . get ( i , j ) , eps )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
JSONAssert . assertEquals ( esc ( "{'x':'a'}" ) , node . toString ( ) , false )
assertEquals ( true , clearCachesOnBaseNavigatorCalled )
assertEquals ( true , clearCachesOnBaseNavigatorCalled )
assertNull ( checkException )
assertNotNull ( "URL not null" , resurl )
assertNull ( checkException )
assertTrue ( true )
assertNull ( checkException )
assertEquals ( null , gtc . data )
assertNull ( checkException )
assertEquals ( "Hello,      World!" , MessageUtils . getMessage ( ) )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertEquals ( create ( "http://verify.test.org" ) , post . getURI ( ) )
assertEquals ( 1 , TestUtils . regexCount ( pb . getContent ( ) , "<w:br w:type=\"page\" />" ) )
assertEquals ( 1 , TestUtils . regexCount ( pb . getContent ( ) , "<w:br w:type=\"page\" />" ) )
assertNotNull ( mapper )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertNotNull ( managerFactory )
assertEquals ( "A1" , cache . get ( "a" ) )
assertThat ( fakeValues . get ( PATH ) , is ( notNullValue ( ) ) )
assertNull ( convert )
assertThat ( s , is ( "any/xy" ) )
assertThat ( s , is ( "any/xy" ) )
assertThat ( s , is ( "any/xy" ) )
assertThat ( InsecureSecretKeyAccess . get ( ) ) . isNotNull ( )
assertThat ( InsecureSecretKeyAccess . get ( ) ) . isNotNull ( )
assertThat ( InsecureSecretKeyAccess . get ( ) ) . isNotNull ( )
assertNull ( uuid )
assertNull ( uuid )
assertNotNull ( gpf )
assertFalse ( SimpleDeallocator . getHasRun ( ) )
assertFalse ( SimpleDeallocator . getHasRun ( ) )
assertNull ( uuid )
assertNull ( uuid )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( "target" , target )
assertEquals ( BASE_URL , baseUrl )
assertThat ( InsecureSecretKeyAccess . get ( ) ) . isNotNull ( )
assertThat ( InsecureSecretKeyAccess . get ( ) ) . isNotNull ( )
assertEquals ( create ( "http://verify.test.org" ) , post . getURI ( ) )
assertEquals ( create ( "http://verify.test.org" ) , post . getURI ( ) )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertTrue ( umpleClass . setPackageName ( "" ) )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 1 , TestUtils . regexCount ( pb . getContent ( ) , "<w:br w:type=\"page\" />" ) )
assertEquals ( expectedJson , JsonHelper . toJson ( foo , JsonNameConventions . CAMEL_UNDERSCORE ) )
assertEquals ( expectedJson , JsonHelper . toJson ( foo , JsonNameConventions . CAMEL_UNDERSCORE ) )
assertEquals ( input , output )
assertEquals ( input , output )
assertNotNull ( settings )
assertEquals ( input , output )
assertEquals ( input , output )
assertEquals ( input , output )
assertEquals ( "target" , target )
assertEquals ( INPUT_BYTES , b )
assertEquals ( INPUT_BYTES , b )
assertEquals ( playReadyLicenseType , expectedPlayReadyLicenseType )
assertEquals ( playReadyLicenseType , expectedPlayReadyLicenseType )
assertEquals ( ":artifact:" , model . toString ( ) )
assertTrue ( Arrays . equals ( ciob . getContent ( ) , msg1 ) )
assertEquals ( "adl://mockAccountName.azuredatalakestore.net/mockContainer/mockFile.txt" , result . toString ( ) )
assertEquals ( "" + expected , "" + actual )
assertNotNull ( Version . str ( ) )
assertEquals ( "a" , result )
assertTrue ( umpleClass . setPackageName ( "" ) )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertNotNull ( rs )


assertFalse ( query . getIncludeEntityEtag ( ) )
assertEquals ( 15 , count )


assertNotNull ( rs )
assertNull ( JsUtils . escape ( null ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( result , expResult )
assertNotNull ( booleanQuery )
assertEquals ( URI . create ( "neo4j://localhost:7687" ) , parse ( ) . getUri ( ) )
assertEquals ( URI . create ( "neo4j://localhost:7687" ) , parse ( ) . getUri ( ) )
assertThat ( g . topologyOf ( 3 ) . configuration ( ) , is ( Configuration . AL2 ) )
assertThat ( g . topologyOf ( 3 ) . configuration ( ) , is ( Configuration . AL2 ) )
assertThat ( g . topologyOf ( 3 ) . configuration ( ) , is ( Configuration . AL2 ) )
assertThat ( g . topologyOf ( 3 ) . configuration ( ) , is ( Configuration . AL2 ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( annotation , annotationView . getModel ( ) )
assertEquals ( data , result )
assertEquals ( 0 , v . get ( ) . length )
assertEquals ( 4 , ( int ) NumberOfTrailingZerosInFactorial . calc ( 20 , IntegerNumberSystem . getInstance ( ) ) )
assertTrue ( writer2Completed . get ( ) )
assertEquals ( "SELECT *\nWHERE {\n  ?s ?p ?o .\n}\n" , processed )
assertNotNull ( gq )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( A , Formatting . tab ( ) )
assertEquals ( "" + expected , "" + actual )
assertNotNull ( gpf )
assertNotNull ( gpf )
assertEquals ( 0 , testObj . getNumChildren ( mem , createURI ( "a/b/c" ) ) )
assertNotNull ( gpf )
assertNotNull ( gpf )
assertEquals ( null , lineData . getString ( "key" ) )
assertEquals ( null , lineData . getString ( "key" ) )
assertEquals ( "default" , object . getString ( "foo" , "default" ) )
assertThat ( n . getOwnerDocument ( ) ) . isEqualTo ( Document . get ( ) )
assertNotNull ( instance )
assertNotNull ( instance )
assertEquals ( actual , "yy-mm-dd" )
assertEquals ( 42 , featureCollection . size ( ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertThat ( Strings . reverse ( "live" ) ) . isEqualTo ( "evil" )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( r , "Valid ServiceResult should be returned" )
assertNotNull ( instance )
assertNotNull ( settings )
assertNotNull ( instance )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertNotNull ( instance )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertNotNull ( instance )
assertEquals ( "Test [CLASS]" , node . toString ( ) )
assertEquals ( "Test [CLASS]" , node . toString ( ) )
assertEquals ( "Test [CLASS]" , node . toString ( ) )
assertTrue ( testObj . getVerbFrameFlags ( ) . isEmpty ( ) )
assertEquals ( null , panel . getChart ( ) )
assertEquals ( null , panel . getChart ( ) )
assertEquals ( null , panel . getChart ( ) )
assertEquals ( null , panel . getChart ( ) )
assertEquals ( null , panel . getChart ( ) )
assertEquals ( CODEC . fromJson ( CODEC . toJson ( table ) ) , table )
assertEquals ( new JsonArray ( ) , parse ( " [ ] " ) )
assertNotNull ( settings )
assertEquals ( "hello world" , res )
assertTrue ( "Created incorrect tokenizer" , st . countTokens ( ) == 5 && ( st . nextElement ( ) . equals ( "This" ) ) )
assertTrue ( "Created incorrect tokenizer" , st . countTokens ( ) == 5 && ( st . nextElement ( ) . equals ( "This" ) ) )
assertEquals ( len , da . length ( ) )
assertEquals ( "0012" , Util . paddedInt ( 12 , 4 ) )
assertEquals ( len , da . length ( ) )
assertEquals ( len , da . length ( ) )
assertEquals ( "sample.dummy:0:\tSampleXPathRule:\tTest Rule 2" , actual )
assertEquals ( "sample.dummy:0:\tSampleXPathRule:\tTest Rule 2" , actual )
assertEquals ( "sample.dummy:0:\tSampleXPathRule:\tTest Rule 2" , actual )
assertEquals ( "sample.dummy:0:\tSampleXPathRule:\tTest Rule 2" , actual )
assertEquals ( "The validated expression is false" , ex . getMessage ( ) )
assertEquals ( "The validated expression is false" , ex . getMessage ( ) )
assertThat ( decorator . decorate ( node , "" ) ) . isEqualTo ( "" )
assertEquals ( "Foo:2.0" , nf1 . toString ( ) )
assertNotNull ( fastq )
assertEquals ( "test" , charset . name ( ) )
assertEquals ( "test" , charset . name ( ) )
assertEquals ( abc . comparator ( ) , SortedSets . union ( abc , def ) . comparator ( ) )
assertThat ( Strings . append ( "c" ) . to ( "ab" ) ) . isEqualTo ( "abc" )
assertThat ( Strings . append ( "c" ) . to ( "ab" ) ) . isEqualTo ( "abc" )
assertFalse ( LogManager . getFactory ( ) . isClassLoaderDependent ( ) )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( ds , instance . getDataset ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertThat ( suggestionEngine . suggest ( new DataSet ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
TestUtils . assertEquals ( f . gradient ( point ) , g . value ( point ) , 1.0e-15 )
TestUtils . assertEquals ( f . gradient ( point ) , g . value ( point ) , 1.0e-15 )
assertThat ( aList , is ( List . of ( ) ) )
assertEquals ( table . getElementClass ( ) , Node . class )
assertEquals ( table . getElementClass ( ) , Node . class )
TestUtils . assertEquals ( f . gradient ( point ) , g . value ( point ) , 1.0e-15 )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( "button-id" , ctx . createElement ( b ) . attr ( "_id" ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( "org.eclipse.elk.layered" , graph . root . getProperty ( CoreOptions . RESOLVED_ALGORITHM ) . getId ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( "parent" , actual . getRootElement ( ) . getName ( ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertEquals ( INamedParameters . Type . MANUAL , p . getAllNamed ( ) . get ( 0 ) . getType ( ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertThat ( update . getUpdateObject ( ) ) . isEqualTo ( new Document ( ) . append ( "$mul" , new Document ( "key" , 10D ) ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertNotNull ( testTx )
assertNotNull ( testTx )
assertNotNull ( testTx )
assertNotNull ( testTx )
assertNotNull ( testTx )
assertNotNull ( testTx )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertFalse ( allow )
assertEquals ( URI . create ( "dataset:file:/tmp/data/ns/test-ds" ) , uri )
assertEquals ( "For input string: \"4 \"" , thrown . getMessage ( ) )
assertEquals ( expected , actual )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertThat ( DoubleToString . roundWithDecimalFormat ( DOUBLE_VALUE ) ) . isEqualTo ( ROUNDED_UP_DOUBLE )
assertEquals ( "iTitanc" , appendCharAtPosition . addCharUsingCharArray ( word , letter , 0 ) )
assertEquals ( "iTitanc" , appendCharAtPosition . addCharUsingCharArray ( word , letter , 0 ) )
assertNotNull ( DebugUtilities . dump ( m ) )
assertThat ( test , is ( SimpleNameSubstitutionStrategy . wrap ( VALUE1 ) ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertNull ( AttributeUtils . parse ( "" , Integer . class ) )
assertEquals ( "00000000003v" , encodeBase32 ( 123 ) )
assertEquals ( "00000000003v" , encodeBase32 ( 123 ) )
assertEquals ( "00000000003v" , encodeBase32 ( 123 ) )
assertEquals ( actual , "yy-mm-dd" )
assertEquals ( actual , "yy-mm-dd" )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "{}" , result )
assertEquals ( "{}" , result )
assertEquals ( new Vector3i ( 2 , 6 , 14 ) , v )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "100" , result )
assertEquals ( true , ctx . autoBookmark ( ) )
assertEquals ( "<qwerty>" , XMLHandler . openTag ( "qwerty" ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( INTEGER_VALUE , HerdStringUtils . convertStringToInteger ( INTEGER_VALUE . toString ( ) , INTEGER_VALUE_2 ) )
assertEquals ( 0 , testObj . getNumChildren ( mem , createURI ( "a/b/c" ) ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( "<qwerty>" , XMLHandler . openTag ( "qwerty" ) )
assertNotNull ( settings )
assertEquals ( "<qwerty>" , XMLHandler . openTag ( "qwerty" ) )
assertThat ( Strings . reverse ( "live" ) ) . isEqualTo ( "evil" )
assertThat ( min ( SHORT_DURATION , LONG_DURATION ) , is ( SHORT_DURATION ) )
assertThat ( min ( SHORT_DURATION , LONG_DURATION ) , is ( SHORT_DURATION ) )
assertTrue ( new RegexStringMatcher ( new MockServerLogger ( ) , NottableString . not ( "not_value" ) , true ) . matches ( "some_value" ) )
assertTrue ( new RegexStringMatcher ( new MockServerLogger ( ) , NottableString . not ( "not_value" ) , true ) . matches ( "some_value" ) )
assertTrue ( new RegexStringMatcher ( new MockServerLogger ( ) , NottableString . not ( "not_value" ) , true ) . matches ( "some_value" ) )
assertEquals ( 4L , ( long ) CeilingDivide . calc ( NS , 10L , 3L ) )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertThat ( Map . of ( list ) . toString ( ) ) . isEqualTo ( "Map(x->3,y->5,z->10)" )
assertNotNull ( codec )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertNotNull ( codec )
assertNotNull ( codec )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
assertEquals ( new StringValue ( "test" ) , testString )
assertEquals ( nonArrayCountFieldName , PredefinedFields . createArrayFieldNameFromCountField ( nonArrayCountFieldName ) )
assertEquals ( nonArrayCountFieldName , PredefinedFields . createArrayFieldNameFromCountField ( nonArrayCountFieldName ) )
assertEquals ( nonArrayCountFieldName , PredefinedFields . createArrayFieldNameFromCountField ( nonArrayCountFieldName ) )
assertEquals ( nonArrayCountFieldName , PredefinedFields . createArrayFieldNameFromCountField ( nonArrayCountFieldName ) )
assertEquals ( nonArrayCountFieldName , PredefinedFields . createArrayFieldNameFromCountField ( nonArrayCountFieldName ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "[b.c]\nanInt = 1\n" , new TomlWriter ( ) . write ( new A ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "At offset 2: 3 != 4" , StreamUtils . contentDiffers ( is1 , is2 ) . get ( ) )
assertEquals ( expect , parser . parse ( "token1 = null" ) )
assertThat ( Boolean . TRUE . equals ( a ) ) . isFalse ( )
assertEquals ( GBP_2_33 , test )
assertEquals ( GBP_2_33 , test )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( "test" , getFirstOrNull ( Collections . singletonList ( "test" ) ) )
assertEquals ( "test" , getFirstOrNull ( Collections . singletonList ( "test" ) ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertEquals ( "-" , result )
assertTrue ( "Same booleans should be equal" , equals )
assertTrue ( "Same booleans should be equal" , equals )
assertTrue ( "Same booleans should be equal" , equals )
assertTrue ( "Same booleans should be equal" , equals )
assertThat ( aList , is ( List . of ( ) ) )
assertThat ( aList , is ( List . of ( ) ) )
assertEquals ( "1" , list . get ( 0 ) )
assertEquals ( 100 , counter . get ( ) )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertEquals ( input , input . stream ( ) . map ( StreamEx :: of ) . reduce ( StreamEx :: append ) . get ( ) . toList ( ) )
assertEquals ( "Hello,      World!" , MessageUtils . getMessage ( ) )
assertEquals ( "" , data )
assertThat ( list . size ( ) , is ( 0 ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertThat ( list . size ( ) , is ( 0 ) )
assertTrue ( iterator . closed )
assertEquals ( "Bryn" , p1 . getProperty ( "name" ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertEquals ( 23 , copy . get ( "name" ) )
assertEquals ( 23 , copy . get ( "name" ) )
AssertionError assertionError = expectAssertionError ( ( ) -> arrays . assertNullOrEmpty ( someInfo ( ) , failures , actual ) )
assertEquals ( x , LongObjectId . toString ( null ) )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "-1.-2.-3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( x , LongObjectId . toString ( null ) )
assertEqualsStringFormat ( "%d %d" , "42" , "42" )
assertEqualsStringFormat ( "%d %d" , "42" , "42" )
assertEqualsStringFormat ( "%d %d" , "42" , "42" )
assertEqualsStringFormat ( "%d %d" , "42" , "42" )
assertEqualsStringFormat ( "%d %d" , "42" , "42" )
assertEquals ( x , LongObjectId . toString ( null ) )
assertEquals ( expected , actual )
assertEquals ( KmerEncodingHelper . toString ( 25 , x ) , KmerEncodingHelper . toApproximateString ( x ) )
assertEquals ( test [ 1 ] , ShortUUID . encode ( test [ 0 ] ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 0 , - 128 , 64 } , bytes )
assertEquals ( value , wrapper . getByteArray ( ) )
assertNull ( cache . get ( 4 ) )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertThat ( getPAC ( query ) . run ( ) , equalTo ( getAllStartingSuggestions ( query . length ( ) ) ) )
assertEquals ( "not matched" , null , stringLeftPad ( input , 10 ) )
assertEquals ( "not matched" , null , stringLeftPad ( input , 10 ) )
assertEquals ( "not matched" , null , stringLeftPad ( input , 10 ) )
assertEquals ( "not matched" , null , stringLeftPad ( input , 10 ) )
assertEquals ( "000000000000000000000000000000000000000000000000000000000000000000000000" , c )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertEquals ( index + index2 , testArrayCopy [ index ] [ index2 ] )
assertEquals ( 0 , array . length )
assertThat ( tokenise ( "{%one%}{%endbad%}" , blocks , new HashSet < String > ( ) ) . get ( 4 ) . getType ( ) , is ( LiquidLexer . InvalidEndBlockId ) )
assertArrayEquals ( expected , result )
assertThat ( tokenise ( "{%one%}{%endbad%}" , blocks , new HashSet < String > ( ) ) . get ( 4 ) . getType ( ) , is ( LiquidLexer . InvalidEndBlockId ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertThat ( tokenise ( "{%one%}{%endbad%}" , blocks , new HashSet < String > ( ) ) . get ( 4 ) . getType ( ) , is ( LiquidLexer . InvalidEndBlockId ) )
assertNull ( asyncContext )
assertNull ( asyncContext )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNotNull ( gpf )
assertNull ( w )
assertNull ( w )
assertNull ( w )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertNotNull ( colour )
assertNotNull ( colour )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( filter , filterRepository . getFilterByName ( "EMPTY" ) )
assertThat ( names ) . hasSize ( 12 ) . contains ( "1.dat" )
assertEquals ( "Only interfaces can have default methods. Not " + getClass ( ) , e . getMessage ( ) )
assertThat ( keySet . stream ( ) ) . containsExactly ( "k1" , "k2" )
assertTrue ( action . get ( ) )
assertThatExceptionOfType ( IndexOutOfBoundsException . class ) . isThrownBy ( ( ) -> this . file . getSubsection ( - 1 , 1 ) )
assertEquals ( "-" , result )
assertThat ( passwordFile . getAbsolutePath ( ) , is ( underTest . getPath ( ) ) )
assertThat ( toRequestAdapter . startTimestamp ( request ) ) . isZero ( )
assertNotNull ( xmlModelFactory . create ( ) )
assertThat ( SimpleScore . of ( - 147 ) . withInitScore ( - 7 ) ) . isEqualTo ( SimpleScore . ofUninitialized ( - 7 , - 147 ) )
assertThat ( SimpleScore . of ( - 147 ) . withInitScore ( - 7 ) ) . isEqualTo ( SimpleScore . ofUninitialized ( - 7 , - 147 ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertNull ( Linear . solve ( m , Vector . of ( 1 , 3 , 3 ) ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertEquals ( expected , elem )
assertEquals ( expected [ index ++ ] , iterator . next ( ) . longValue ( ) )
assertEquals ( closestMatch ( versions , version ( 0 , 2 , 3 ) ) , null )
assertEquals ( closestMatch ( versions , version ( 0 , 2 , 3 ) ) , null )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertEquals ( 30 , theResult , 0 )
assertEquals ( get , method )
assertNull ( w )
assertNull ( w )
assertNull ( MetadataIdentificationUtils . create ( "foo#bar" ) )
assertThat ( component . getWorkflowJob ( ) , is ( workflowJob ) )
assertNull ( IOMode . getIOMode ( INVALID_ID ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( new Point ( 3 , 1 ) , result )
assertEquals ( "[3,4,5]" , array . toString ( ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( len , da . length ( ) )
assertEquals ( uuid , McpeUtil . readUuid ( dest ) )
assertEquals ( uuid , McpeUtil . readUuid ( dest ) )
assertEquals ( uuid , uuid2 )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertTrue ( builder . includeNulls ( ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertTrue ( "expected exception" , false )
assertTrue ( "expected exception" , false )
applyToSystemProperties ( ( ) -> assertThat ( System . getProperty ( "foo" ) ) . isEqualTo ( "bar" ) )
applyToSystemProperties ( ( ) -> assertThat ( System . getProperty ( "foo" ) ) . isEqualTo ( "bar" ) )
assertNotNull ( instance )
assertEquals ( 1L , counter . get ( ) . longValue ( ) )
assertNull ( caughtThrowable ( ) )
assertTrue ( configuration != null )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertEquals ( 0 , testObj . getNumChildren ( mem , createURI ( "a/b/c" ) ) )
fail ( )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertNotNull ( factory )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertNotNull ( factory )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertNotNull ( factory )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertNotNull ( factory )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertTrue ( configuration != null )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertNotNull ( factory )
assertEquals ( expectedList , store . getNames ( ) )
assertNotNull ( factory )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertNotNull ( factory )
assertTrue ( configuration != null )
assertEquals ( "jdbc:h2:mem:" + name , EmbeddedDatabaseRule . h2 ( ) . withName ( name ) . withProperty ( "prop" , null ) . build ( ) . getConnectionJdbcUrl ( ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertTrue ( configuration != null )
message -> assertEquals ( message . getParameter ( ) , payload ) )
message -> assertEquals ( message . getParameter ( ) , payload ) )
assertThat ( forLoop . getDescriptor ( ) ) . isSameAs ( descriptor )
assertThat ( forLoop . getDescriptor ( ) ) . isSameAs ( descriptor )
assertTrue ( configuration != null )
assertNotNull ( factory )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertEquals ( "8FRecord" , QProperties4Test_Naming . naming . _8FRecord . getMetadata ( ) . getName ( ) )
assertEquals ( node , getRestGraphDb ( ) . getNodeById ( node . getId ( ) ) )
assertEquals ( "coalesce(firstname, lastname, xxx)" , c . toString ( ) )
assertTrue ( slf . toString ( ) . contains ( "Not completed" ) )
assertEquals ( String . class , propertyType )
assertThat ( builtObject . returnValuesOnConditionCheckFailureAsString ( ) , is ( returnValues ) )
assertThat ( builtObject . returnValuesOnConditionCheckFailureAsString ( ) , is ( returnValues ) )
assertThat ( builtObject . returnValuesOnConditionCheckFailureAsString ( ) , is ( returnValues ) )
assertThat ( builtObject . returnValuesOnConditionCheckFailureAsString ( ) , is ( returnValues ) )
assertFalse ( streamURL . isPresent ( ) )
assertNotNull ( layout )
assertThat ( testee . next ( ) ) . isEqualTo ( Maybe . none ( ) )
assertNotNull ( layout )
assertNotNull ( layout )
assertNotNull ( layout )
assertNotNull ( layout )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( "[one, two, three]" , result . toString ( ) )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertNotNull ( layout )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertNotNull ( layout )
assertNotNull ( layout )
assertEquals ( "a;b;c" , new VariableOrder ( "a" , "b" , "c" ) . toString ( ) )
assertEquals ( "a;b;c" , new VariableOrder ( "a" , "b" , "c" ) . toString ( ) )
assertThat ( vocabulary . getConceptFromId ( query ) . get ( ) , is ( hippocampus ) )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertThat ( verification . getHttpRequests ( ) , is ( Arrays . asList ( request ( "one" ) , request ( "two" ) , request ( "three" ) ) ) )
assertTrue ( "Node is a versioned node." , testObj . isVersionedNode ( mem , createURI ( "a/b/c" ) ) )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertThat ( verification . getHttpRequests ( ) , is ( Arrays . asList ( request ( "one" ) , request ( "two" ) , request ( "three" ) ) ) )
assertEquals ( 24 , addedValue )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertEquals ( "{}" , value )
assertEquals ( expectedList , store . getNames ( ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "" )
assertThat ( vocabulary . getConceptFromId ( query ) . get ( ) , is ( hippocampus ) )
assertEquals ( 10 , query . execute ( ) . list ( ) . size ( ) )
assertEquals ( instance , copy )
assertEquals ( 42 , s . asInteger ( ) . getValue ( ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertEquals ( instance , copy )
assertTrue ( this . mocker . getComponentUnderTest ( ) . < Boolean > getProperty ( "a.boolean" , Boolean . class ) )
assertTrue ( "Node is a versioned node." , testObj . isVersionedNode ( mem , createURI ( "a/b/c" ) ) )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertEquals ( "The GemFireException cannot be null!" , expected . getMessage ( ) )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertEquals ( "" + expected , "" + actual )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertNotNull ( acu )
assertEquals ( "" + expected , "" + actual )
assertNull ( AuthorityURLInfoInfoListConverter . toString ( list ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( e . getMessage ( ) . startsWith ( "invalid status: HTTP/1.1 404 Not Found;" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "invalid status: HTTP/1.1 404 Not Found;" ) )
assertEquals ( CIFS_SHARED_URL_PATH , smbUrl )
assertNull ( "URL should be unchanged" , validated )
assertNull ( "URL should be unchanged" , validated )
assertNull ( "URL should be unchanged" , validated )
assertEquals ( expected , iterables . take ( expected . size ( ) ) . toList ( ) )
assertThat ( body ) . contains ( "Hello World" )
assertThat ( body ) . contains ( "Hello World" )
assertThat ( body ) . contains ( "Hello World" )
assertThat ( body ) . contains ( "Hello World" )
assertThat ( body ) . contains ( "Hello World" )
assertNull ( server )
assertEquals ( projectName , DeliveryPipelineView . withoutFolderPrefix ( projectNameWithFolderPrefix ) )
assertThat ( buildIn ( newHashSet ( "foo" , "bar" ) ) , anyOf ( equalTo ( "['foo','bar']" ) , equalTo ( "['bar','foo']" ) ) )
assertEquals ( projectName , DeliveryPipelineView . withoutFolderPrefix ( projectNameWithFolderPrefix ) )
assertEquals ( "Hello world" , Args . format ( "Hello {}" , "world" ) )
assertEquals ( "Hello world" , Args . format ( "Hello {}" , "world" ) )
assertNull ( s )
assertThat ( buildIn ( newHashSet ( "foo" , "bar" ) ) , anyOf ( equalTo ( "['foo','bar']" ) , equalTo ( "['bar','foo']" ) ) )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertNull ( "URL should be unchanged" , validated )
assertNull ( "URL should be unchanged" , validated )
assertNull ( "URL should be unchanged" , validated )
assertNull ( "URL should be unchanged" , validated )
assertNotNull ( rs )
assertEquals ( result , PhasingUtils . mergeVariantContextNames ( "A" , "B" ) )
assertEquals ( lines - 1 , results )
assertEquals ( lines - 1 , results )
assertEquals ( lines - 1 , results )
assertThat ( render ( 1 , 2 , 3 ) ) . isEqualTo ( "123" )
assertThat ( render ( 1 , 2 , 3 ) ) . isEqualTo ( "123" )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertNotNull ( editCap )
assertTrue ( RootCauseFinder . findCauseUsingPlainJava ( ex ) instanceof IllegalArgumentException )
assertThat ( "Instance of Builder expected." , builder . accountName ( accountName ) , IsInstanceOf . instanceOf ( Builder . class ) )
assertThat ( "Instance of Builder expected." , builder . accountName ( accountName ) , IsInstanceOf . instanceOf ( Builder . class ) )
assertEquals ( new SortBy ( SearchFields . RELEVANCE , SortBy . DESCENDING ) , SearchFilesServiceBean . getSortBy ( null ) )
assertEquals ( "Children of resource property element must be XML elements" , e . getMessage ( ) )
assertEquals ( "SELECT *\nWHERE {\n  ?s ?p ?o .\n}\n" , processed )
assertEquals ( "SELECT *\nWHERE {\n  ?s ?p ?o .\n}\n" , processed )
assertEquals ( "foo" , getQuoteContents ( "\"foo\"" ) )
assertEquals ( "foo" , getQuoteContents ( "\"foo\"" ) )
assertEquals ( result , PhasingUtils . mergeVariantContextNames ( "A" , "B" ) )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( new BigDecimal ( "1.04711" ) , test )
assertEquals ( auditMessage . getUser ( ) , "falcon" )
assertTrue ( "Node is a versioned node." , testObj . isVersionedNode ( mem , createURI ( "a/b/c" ) ) )
assertThat ( attributeList ) . containsExactly ( name ( "firstName" ) . value ( "Leia" ) , name ( "lastName" ) . value ( "Organa" ) )
assertThat ( iter . next ( ) , is ( factory . create ( valueIter . next ( ) ) ) )
assertThat ( iter . next ( ) , is ( factory . create ( valueIter . next ( ) ) ) )
assertEquals ( "result" , "" , result )
assertEquals ( "result" , "" , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( result , expResult )
assertEquals ( expected , result )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( new DatabaseRulePersistService ( repository ) . load ( "foo_db" ) . isEmpty ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( instance . isMonitoringEnabled ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( Rect . centeredRect ( 10 , 20 , 30 , 40 ) , p . getBounds ( ) )
assertTrue ( "expected exception" , false )
assertTrue ( "expected exception" , false )
assertTrue ( "expected exception" , false )
assertFalse ( result )
assertEquals ( result , expResult )
assertFalse ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( KubernetesAPIVersion . v1 , registry . getMaxSupportedKubernetesVersion ( serverVersions ) )
assertTrue ( parseAddingRequiredArgs ( "" ) . shouldFailWhenNoMutations ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( expectedException )
assertEquals ( diff , diff2 )
assertNotNull ( expectedException )
assertEquals ( diff , diff2 )
assertEquals ( diff , diff2 )
assertEquals ( expResult , result )
assertEquals ( diff , diff2 )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertNotNull ( "null coll inp object" , collInp )
assertNotNull ( result )
assertEquals ( "" , result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNull ( result )
assertNull ( result )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( 'a' , is . read ( ) )
assertEquals ( 'a' , is . read ( ) )
assertThat ( metaData . create ( ) , is ( notNullValue ( ) ) )
assertEquals ( "Children of resource property element must be XML elements" , e . getMessage ( ) )
assertEquals ( "A1" , cache . get ( "a" ) )
assertEquals ( "default" , AttributeConverter . asStringList ( VCFConstants . MISSING_VALUE_v4 , ImmutableList . of ( "default" ) ) . get ( 0 ) )
assertEquals ( expResult , result )
assertEquals ( expResult , false )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "{1,2}" , result )
assertEquals ( "{1,2}" , result )
assertThat ( "Should be positive number" , OrthodromicDistance . calculateDistanceToGeometry ( reference . getCoordinate ( ) , polygon ) , closeTo ( 111 , 1 ) )
assertFalse ( result )
assertFalse ( result )
assertThat ( "Should be positive number" , OrthodromicDistance . calculateDistanceToGeometry ( reference . getCoordinate ( ) , polygon ) , closeTo ( 111 , 1 ) )
assertFalse ( result )
assertFalse ( result )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertArrayEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>" , doc . html ( ) )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertFalse ( succeeded )
assertFalse ( succeeded )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertThat ( stripHeader ( response ) , containsString ( trim ( QueryMessages . malformedQuery ( ) ) ) )
assertThat ( stripHeader ( response ) , containsString ( trim ( QueryMessages . malformedQuery ( ) ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertThat ( metaData . create ( ) , is ( notNullValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( "tests=4 bugs=3 duration=0:00:00.000" , value )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( diff , diff2 )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( expResult , result )
assertEquals ( diff , diff2 )
assertEquals ( type , HorseType . of ( type . getData ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "srid:1234;POINT (1 2)" , SpatialTypeUtils . asEwkt ( g1 ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertEquals ( "[1, 2, null, [...], foo]" , Arrays . deepToString ( array ) )
assertArrayEquals ( expResult , result )
assertEquals ( INDENT + INDENT + A + Formatting . nl ( ) + INDENT + INDENT + B , result )
assertEquals ( "[TOOL R0 G0 B0 D1.000, DRAW_LINE X40.000 Y90.000, DRAW_LINE X20.000 Y45.000, TRAVEL X-30.000 Y-21.000, DRAW_LINE X6.000 Y12.000, TRAVEL X24.000 Y54.000]" , turtle . history . toString ( ) )
assertEquals ( polygon , result . getValue ( ) )
assertEquals ( wkt1 , actualWkt1 )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( expResult , result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( 1 , result , "o1[0,5] should be > o2[0,10]" )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( "{}" , result )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( 1 , result , "o1[0,5] should be > o2[0,10]" )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( expResult , result )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertEquals ( result , expResult )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertThat ( checkbox , selected ( ) )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( "/settings/rbac/users/domain/user" , user ( "admin" , "pass" , null , "user" ) . path ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( logCat , logCat2 )
assertEquals ( count , facet . getCount ( ) )
assertEquals ( Size . kilobytes ( 64 ) , Size . parse ( "64   kilobytes" ) )
assertEquals ( "foo:" , captureArgument ( "foo" ) )
assertTrue ( graph instanceof DirectedGraph )
assertEquals ( expected , new HttpLogOptions ( ) . setApplicationId ( expected ) . getApplicationId ( ) )
assertNotNull ( server )
assertThat ( normalizeDecodedPath ( path , true ) , is ( "C:/ProgramFiles/zaraza" ) )
assertNull ( b . getDatabase ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( tree . getValue ( ) , TreeElementGetValue . TEST_VALUE_LVL2 )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertNull ( s )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertEquals ( TxStatus . TransactionActive . name ( ) , TxSupport . getStatus ( txSupport . txStatus ( ) ) )
assertTrue ( isAnnotationNull ( getFieldAnnotation ( "nullAnnotation" ) ) )
assertTrue ( isAnnotationNull ( getFieldAnnotation ( "nullAnnotation" ) ) )
assertTrue ( isAnnotationNull ( getFieldAnnotation ( "nullAnnotation" ) ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertEquals ( "zookeeper://192.168.99.100:32770" , registry . getAddress ( ) )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertEquals ( testData + "null" , out . getAppendable ( ) . toString ( ) )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertNotNull ( gq )
assertNotNull ( gq )
assertNotNull ( gq )
assertEquals ( query , serdeQuery )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertNotNull ( gq )
assertEquals ( true , Combination . selectQuery ( query , this . beatles ) )
assertNotNull ( gq )
assertNotNull ( gq )
assertEquals ( 0 , testObj . getNumChildren ( mem , createURI ( "a/b/c" ) ) )
assertEquals ( ff . and ( a , b ) , result )
assertNotNull ( rs )
assertThat ( ersGeneral . recognize ( new FooException ( ) ) . get ( ) . getReason ( ) , is ( "pre: foo" ) )
assertThat ( buildIn ( newHashSet ( "foo" , "bar" ) ) , anyOf ( equalTo ( "['foo','bar']" ) , equalTo ( "['bar','foo']" ) ) )
assertEquals ( "200" , String . valueOf ( l ) )
assertThat ( logger . getLevel ( ) ) . isEqualTo ( Level . OFF )
assertNull ( s )
assertNotNull ( gq )
assertThat ( CodeBlock . of ( "$N" , type ) . toString ( ) ) . isEqualTo ( "Type" )
assertEquals ( 1 , this . instance . execute ( "test()" ) )
assertEquals ( attr , method . getAttribute ( attr ) )
assertEquals ( attr , method . getAttribute ( attr ) )
assertEquals ( "2" , result . get ( "key" ) )
assertNotNull ( rs )
assertTrue ( baz . stopped )
assertNotNull ( rs )
assertArrayEquals ( "clearBatch() called, batchStatements.isEmpty()" , new long [ 0 ] , actual )
assertEquals ( expectedValue [ j ] , value [ j ] )
assertThat ( conn . getCatalog ( ) , is ( REPOSITORY_NAME ) )
assertNull ( connection . getWarnings ( ) )
assertNull ( connection . getWarnings ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertTrue ( conn . isClosed ( ) )
assertEquals ( "SELECT *\nWHERE {\n  ?s ?p ?o .\n}\n" , processed )
assertEquals ( prep . getParameterMetaData ( ) . getParameterCount ( ) , 4 )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertNotNull ( "uri cannot be null" , uri )
assertNotNull ( "uri cannot be null" , uri )
assertEquals ( "http://www.bing.com" , builder . toString ( ) )
assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertThat ( factory . create ( value . getTime ( ) ) , is ( ( DateTime ) new JodaDateTime ( value . getTime ( ) ) ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( cal . getTime ( ) , parser . parse ( "01.01.1000" ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertNotNull ( c )
assertNotNull ( c )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertEquals ( cal . getTime ( ) , parser . parse ( "01.01.1000" ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( 100 , count )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertNotNull ( c )
assertNotNull ( c )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertEquals ( cal . getTime ( ) , parser . parse ( "01.01.1000" ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertThat ( token . toString ( ) , is ( "test [0..1]" ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertThat ( KIE_PMML_SEGMENT . getModel ( ) ) . isEqualTo ( KIE_PMML_MODEL )
assertThat ( new EventIdConverter ( ) . marshal ( eventId ) ) . isEqualTo ( UUID )
assertThat ( KIE_PMML_SEGMENT . getModel ( ) ) . isEqualTo ( KIE_PMML_MODEL )
assertThat ( KIE_PMML_SEGMENT . getModel ( ) ) . isEqualTo ( KIE_PMML_MODEL )
assertTrue ( true )
assertThat ( KIE_PMML_SEGMENT . getModel ( ) ) . isEqualTo ( KIE_PMML_MODEL )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( Boolean . TRUE , result )
assertEquals ( "100" , result )
assertTrue ( mep1 . administrativeState ( ) )
assertTrue ( mep1 . administrativeState ( ) )
assertTrue ( mep1 . administrativeState ( ) )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertNull ( rs )
assertNotNull ( connection )
assertEquals ( uri , link . getUri ( ) )
assertEquals ( config1 , config2 )
assertThat ( concat3 . flip ( ) . apply ( 1 , "2" , "3" ) , is ( "213" ) )
assertEquals ( config1 , config2 )
assertTrue ( mep1 . administrativeState ( ) )
assertTrue ( mep1 . administrativeState ( ) )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertEquals ( PositionalQuery . apply ( query ) , query )
assertThat ( vocabulary . getConceptFromId ( query ) . get ( ) , is ( hippocampus ) )
assertEquals ( "{1}" , builder . toString ( ) )
assertEquals ( source , destination )
assertEquals ( 0 , FilesUncheck . copy ( FILE_PATH_EMPTY , NullOutputStream . INSTANCE ) )
assertEquals ( "HELLO" , buffer . toString ( ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertNotNull ( namesrvConfig )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertThatExceptionOfType ( IndexOutOfBoundsException . class ) . isThrownBy ( ( ) -> this . file . getSubsection ( - 1 , 1 ) )
assertEquals ( n . asPrimitiveArray ( ) , array )
assertEquals ( n . asPrimitiveArray ( ) , array )
assertEquals ( INDENT , Formatting . tab ( ) )
assertEquals ( "x" , shortForm )
assertEquals ( "x" , shortForm )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertEquals ( expected , elem )
assertEquals ( closestMatch ( versions , version ( 0 , 2 , 3 ) ) , null )
assertEquals ( closestMatch ( versions , version ( 0 , 2 , 3 ) ) , null )
assertEquals ( closestMatch ( versions , version ( 0 , 2 , 3 ) ) , null )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertSame ( map , map . asUnmodifiable ( ) )
assertSame ( map , map . asUnmodifiable ( ) )
assertEquals ( "a66abb5684c45962d887564f08346e8d" , HashHelper . getHashedPassword ( "123456" , "admin" ) )
assertEquals ( "a66abb5684c45962d887564f08346e8d" , HashHelper . getHashedPassword ( "123456" , "admin" ) )
assertEquals ( "a66abb5684c45962d887564f08346e8d" , HashHelper . getHashedPassword ( "123456" , "admin" ) )
assertTrue ( transcriptSeq . equals ( transcriptSeq ) )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertTrue ( dr == null )
assertTrue ( dr == null )
assertEquals ( - 1 , metadata . getChannelColor ( 0 , 0 ) . getValue ( ) . intValue ( ) )
assertNotNull ( it . next ( ) )
assertNotNull ( it . next ( ) )
assertNotNull ( it . next ( ) )
assertNotNull ( it . next ( ) )
assertEquals ( tuple ( "a" , 2 ) , add1 . < String > cartesian ( ) . apply ( tuple ( "a" , 1 ) ) )
assertEquals ( tuple ( "a" , 2 ) , add1 . < String > cartesian ( ) . apply ( tuple ( "a" , 1 ) ) )
assertEquals ( "" , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
_SerializationTester . assertEqualsOnRoundtrip ( Can . < String > of ( "hi" ) )
assertEquals ( "\n" , Formatting . nl ( ) )
assertThat ( new SQLTranslatorRule ( expected ) . getConfiguration ( ) , is ( expected ) )
assertThat ( new SQLTranslatorRule ( expected ) . getConfiguration ( ) , is ( expected ) )
assertEquals ( "\n" , Formatting . nl ( ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( lines - 1 , results )
assertEquals ( - 1 , metadata . getChannelColor ( 0 , 0 ) . getValue ( ) . intValue ( ) )
assertNotNull ( namesrvConfig )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertEquals ( INamedParameters . Type . MANUAL , p . getAllNamed ( ) . get ( 0 ) . getType ( ) )
assertEquals ( INamedParameters . Type . MANUAL , p . getAllNamed ( ) . get ( 0 ) . getType ( ) )
assertEquals ( 29 , iri ( "http://owlapi.sourceforge.net" , "" ) . length ( ) )
assertEquals ( "/org/example/schemas/exampleml/exml.xsd" , path )
assertEquals ( "\n" , Formatting . nl ( ) )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertTrue ( dr == null )
assertTrue ( dr == null )
assertEquals ( tuple ( "a" , 2 ) , add1 . < String > cartesian ( ) . apply ( tuple ( "a" , 1 ) ) )
assertEquals ( tuple ( "a" , 2 ) , add1 . < String > cartesian ( ) . apply ( tuple ( "a" , 1 ) ) )
_SerializationTester . assertEqualsOnRoundtrip ( Can . < String > of ( "hi" ) )
_SerializationTester . assertEqualsOnRoundtrip ( Can . < String > of ( "hi" ) )
assertEquals ( lines - 1 , results )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( 30 , theResult , 0 )
assertEquals ( location , emp1 . getLocation ( ) )
assertNotNull ( k )
assertNull ( jobName )
assertNull ( jobName )
assertThat ( closeableThreadLocal . get ( ) . isClosed ( ) , is ( false ) )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertEquals ( e . getMessage ( ) , "An attempt to change password with out providing old password" )
assertEquals ( "extension" , builder . build ( ) . getExtension ( ) )
assertNotNull ( getContext ( ) )
assertEquals ( monitorConfig , builder . build ( ) . getMonitor ( ) )
assertEquals ( generalSet , tested . getGeneral ( ) )
assertEquals ( "org.eclipse.elk.layered" , graph . root . getProperty ( CoreOptions . RESOLVED_ALGORITHM ) . getId ( ) )
assertThat ( origin . getLocation ( ) ) . isNull ( )
assertNotNull ( connection )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( "Junit error" , "FFFFFF00" , color . toString ( ) )
assertNotNull ( builder )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "Duke" , modelWithInheritArg . getName ( new Model ( ) ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( arrayType . isArray ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertEquals ( "HMAC-SHA1" , signer . getSignerName ( ) )
assertEquals ( 0 , array . length )
assertEquals ( 6 , i )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( category . isDefault ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( s . getInnerText ( ) , is ( "" ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertNotNull ( builder )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertNotNull ( builder )
assertThat ( ft . size ( ) , is ( 3 ) )
assertNotNull ( builder )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "Duke" , modelWithInheritArg . getName ( new Model ( ) ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertTrue ( category . isDefault ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "Duke" , modelWithInheritArg . getName ( new Model ( ) ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( 0 , size )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( getData ( ) [ i ] , subList . get ( i - 1 ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertSame ( sections , result . getSectionsOverride ( ) )
assertSame ( sections , result . getSectionsOverride ( ) )
assertEquals ( "{" + value + "}" , expr . toString ( ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertEquals ( hosts . size ( ) , filtered . size ( ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertNull ( new SimpleSingletonElectionPolicy ( ) . elect ( Collections . < Node > emptyList ( ) ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertThat ( sortList . size ( ) ) . isZero ( )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertNull ( strings . get ( 2 ) )
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertThat ( sortList . size ( ) ) . isZero ( )
assertEquals ( 35 , builder . build ( ) . getAccepts ( ) )
assertEquals ( 35 , builder . build ( ) . getAccepts ( ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertTrue ( references . isEmpty ( ) )
assertThat ( HugePageUtils . getHugePages ( base ) . size ( ) , is ( 0 ) )
assertEquals ( VALUE_VERSION_NR , room1 . getVersion ( ) )
assertThat ( builder . warmUp ( ) , sameInstance ( builder ) )
assertThat ( client ( ) . target ( "/config" ) . request ( ) . get ( HttpClusterConfig . class ) ) . isEqualTo ( CLUSTER_CONFIG )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( "Description" , entity . getDescription ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "Duke" , modelWithInheritArg . getName ( new Model ( ) ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertTrue ( MergedTrackingToken . isMergeInProgress ( testSubject ) )
assertEquals ( "Duke" , modelWithInheritArg . getName ( new Model ( ) ) )
assertNotNull ( builder )
assertNotNull ( client )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertNotNull ( type . toString ( ) )
assertNotNull ( type . toString ( ) )
assertNotNull ( client )
assertNotNull ( client )
assertNotNull ( instance )
assertEquals ( debug , SmppObject . getDebug ( ) )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertNotNull ( instance )
assertEquals ( debug , SmppObject . getDebug ( ) )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( "First message" , is ( container . get ( 0 ) ) )
assertThat ( "First message" , is ( container . get ( 0 ) ) )
assertThat ( "First message" , is ( container . get ( 0 ) ) )
assertNotNull ( type . toString ( ) )
assertEquals ( "name" , name )
assertNotNull ( type . toString ( ) )
assertNotNull ( type . toString ( ) )
assertEquals ( "name" , name )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertNotNull ( result )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertNotNull ( actual )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( tree . equals ( tree . clone ( ) ) , true )
assertNotNull ( result )
assertNotNull ( loanCyclePeriod )
assertEquals ( "[\"between\",1,2]" , serialized . toString ( ) )
assertEquals ( "name" , name )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertNotNull ( loanCyclePeriod )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertNull ( result )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( this . helper . getElement ( ) , is ( this . element ) )
assertNull ( result )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( status . getMessage ( ) , equalTo ( ERROR_MESSAGE ) )
assertThat ( e . getMessage ( ) , allOf ( containsString ( "Cannot replace previously assigned" ) , containsString ( "BINARY Handler" ) ) )
assertArrayEquals ( new int [ ] { 0 , 1 , 2 , 3 } , array )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( i + 1 , t1 . get ( i ) . asInt4 ( ) )
assertEquals ( i + 1 , logs . get ( i ) . getEnd ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertTrue ( configuration != null )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( "LayerableConfig [layerRefresh=0, layerDisplay=1]" , config . toString ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( 0 , es . size ( ) )
assertEquals ( 0 , es . size ( ) )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertFalse ( mo . getSolver ( ) . solve ( ) )
assertArrayEquals ( expected , ( int [ ] ) sm . getSlice ( new int [ ] { 0 } ) )
assertThat ( actual ) . isDeepEqualTo ( expected )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertEquals ( ElementType . BOOLEAN . size ( ) , ElementType . BOOLEAN . size ( Boolean . FALSE ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( 0 , array . length )
assertArrayEquals ( new int [ ] { 0 , 1 , 2 , 3 } , array )
assertArrayEquals ( new int [ ] { 0 , 1 , 2 , 3 } , array )
assertEquals ( COSNull . NULL , victim . getCOSObject ( ) )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertEquals ( Integer . class , type )
assertNull ( annotationHelper . extractComplexTypeFqn ( Object . class ) )
assertEquals ( regions , builder . getInstance ( ) . getRegions ( ) )
assertNull ( annotationHelper . extractComplexTypeFqn ( Object . class ) )
assertNull ( root . elements )
assertEquals ( exception . getAllErrors ( ) , list )
assertEquals ( exception . getAllErrors ( ) , list )
assertEquals ( exception . getAllErrors ( ) , list )
assertEquals ( hash ( buffer . getLong ( 0 ) ) , hash ( buffer , 0 , SizeOf . SIZE_OF_LONG ) )
assertEquals ( new FolderPath ( "foo" , "bar" , "beer" ) , FolderPath . deserializeFromString ( "/foo/bar/beer" ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( Matrix22 . create ( 32 , 0 , 0 , 82 ) , a )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertFalse ( foundMatches )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertFalse ( foundMatches )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertTrue ( parser . toString ( ) . startsWith ( "FastDate" ) )
assertArrayEquals ( new int [ ] { 1 , 2 } , selectValuesMeta . getSelectLength ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 } , selectValuesMeta . getSelectLength ( ) )
assertEquals ( "1:3 (2)" , myRange . toString ( ) )
assertTrue ( references . isEmpty ( ) )
assertTrue ( manager . isEnabled ( iter . next ( ) ) == values [ i ] )
assertArrayEquals ( expected , actual )
assertEquals ( Configuration . get ( PropertyKey . MASTER_JOURNAL_FOLDER ) , inputUri )
assertNotNull ( option . toString ( ) )
assertEquals ( "(1,2)" , point . toString ( ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertThat ( closeableThreadLocal . get ( ) . isClosed ( ) , is ( false ) )
assertNotNull ( instance . getRandom ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertEquals ( "001A$0" , spec . encode ( ) )
assertNull ( context . getContextParameter ( "notExist" ) )
assertEquals ( "This {0} message {1} has {2} 3 params" , message )
assertNull ( exception . getMessage ( ) )
assertEquals ( instance . getUUID ( ) . toString ( ) , instance . toString ( ) )
assertEquals ( instance . getUUID ( ) . toString ( ) , instance . toString ( ) )
assertThat ( result . endsWith ( target . getType ( ) ) , is ( true ) )
assertEquals ( instance . getUUID ( ) . toString ( ) , instance . toString ( ) )
assertEquals ( instance . getUUID ( ) . toString ( ) , instance . toString ( ) )
assertEquals ( "5" , value . toString ( ) )
assertEquals ( instance . getUUID ( ) . toString ( ) , instance . toString ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertTrue ( a instanceof AMatrix )
assertThat ( buffer . position ( ) , is ( 1 ) )
assertThat ( buffer . position ( ) , is ( 1 ) )
assertNotNull ( date1 )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( DateUtils . getDate ( milliseconds ) , DateUtils . getDate ( "2020/01/01" , "yyyy/MM/dd" ) )
assertEquals ( DateUtils . getDate ( milliseconds ) , DateUtils . getDate ( "2020/01/01" , "yyyy/MM/dd" ) )
assertTrue ( getT ( ) . equals ( c ) )
assertEquals ( "[12 CHF]" , f12CHF . toString ( ) )
assertEquals ( "[12 CHF]" , f12CHF . toString ( ) )
assertTrue ( matched )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertTrue ( matched )
assertTrue ( matched )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "admittedRelationships" , ProcedureRequestUtils . hasPossibleRequestKey ( "admittedrelationships" , Collections . singletonList ( "admittedRelationships" ) ) )
assertNotNull ( actual )
assertNotNull ( loanCyclePeriod )
assertNotNull ( loanCyclePeriod )
assertEquals ( DRUID_SCHEMA_NAME , schemaName )
assertEquals ( 2 , result , .1 )
assertEquals ( 2 , result , .1 )
assertEquals ( "http://example.com/events" , affordance . getHref ( ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertNotNull ( m )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertNotNull ( m )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertNotNull ( m )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertNotNull ( m )
assertNotNull ( m )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( LifecycleTest . class , parent . getComponentAdapter ( LifecycleTest . class ) . getComponentKey ( ) )
assertEquals ( LifecycleTest . class , parent . getComponentAdapter ( LifecycleTest . class ) . getComponentKey ( ) )
assertNotNull ( m )
assertNotNull ( m )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( "admittedRelationships" , ProcedureRequestUtils . hasPossibleRequestKey ( "admittedrelationships" , Collections . singletonList ( "admittedRelationships" ) ) )
assertEquals ( "Hello World!5" , StringSample . toStringTest ( 5 ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( "" , result )
assertNotNull ( client )
assertNotNull ( instance . getFirstAtomMapping ( ) )
assertEquals ( "[\"tokenize\",\"-\",2]" , serialized . toString ( ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( "ping" , foo . dummySessionBean . id )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertEquals ( NULL , Pretty . type ( null ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "java.lang" , type . getPackageName ( ) )
assertEquals ( file . getAbsolutePath ( ) , part . getAbsolutePath ( ) )
assertEquals ( log . getStatus ( ) , Status . PASS )
assertEquals ( log . getStatus ( ) , Status . PASS )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( "ping" , foo . dummySessionBean . id )
assertThat ( s . getInnerText ( ) , is ( "" ) )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( "1.2.3" , v . toString ( ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . toString ( ) , "    @Id" , "Unexpected annotations built by JPAAnnotationBuilder." )
assertEquals ( "1.2.3" , v . toString ( ) )
assertEquals ( "1.2.3" , v . toString ( ) )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . variables . size ( ) , 0 )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertEquals ( builder . variables . size ( ) , 0 )
assertNotNull ( bulk )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( builder . toString ( ) , "    @Id" , "Unexpected annotations built by JPAAnnotationBuilder." )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( "The validateArgTypes() method is buggy." , sf . getReturnType ( ) , sf . validateArgTypes ( argTypes ) )
assertEquals ( "The validateArgTypes() method is buggy." , sf . getReturnType ( ) , sf . validateArgTypes ( argTypes ) )
assertNotNull ( builder )
assertNotNull ( build )
assertEquals ( 3 , clock . getCurrent ( ) )
assertNull ( getObject ( ) . getJsonArray ( "missing" ) )
assertNotEquals ( b1 , k1 )
assertFalse ( rcd . getField ( "serialVersionUID" ) . isVolatile ( ) )
assertFalse ( rcd . getField ( "serialVersionUID" ) . isVolatile ( ) )
assertNotNull ( manager )
assertEquals ( "\"84db105b-b3f4-4821-b662-efc51455106a\"" , a )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( "Force [fh=1.0, fv=2.0, velocity=3.0, sensibility=4.0]" , force . toString ( ) )
assertEquals ( "BodyConfig [gravity=1.0, gravityMax=2.0]" , config . toString ( ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertEquals ( "1/3" , rational . toString ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertNotNull ( loanCyclePeriod )
assertNotNull ( loanCyclePeriod )
assertEquals ( "name" , name )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertNotNull ( toString )
assertNotNull ( toString )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertNotNull ( toString )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertNotNull ( parameters )
assertEquals ( m_graphable . getID ( ) , 10 )
assertEquals ( "01:23:12.010" , tested . toString ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertNotNull ( loanCyclePeriod )
assertNotNull ( loanCyclePeriod )
assertEquals ( "name" , name )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertNotNull ( build )
assertFalse ( placeHolder . isArray ( ) )
assertEquals ( expected , actual )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertNotNull ( builder )
assertNotNull ( build )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertNotNull ( parameters )
assertEquals ( "a" , testCase . getProperty ( "x" ) )
assertEquals ( ArrayProducer . STRING_BAR , stringBar )
assertEquals ( parameter . getParameterId ( ) , id )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertThatCode ( ( ) -> assumeThat ( STRING_OBJECT ) . isNotNull ( ) . isEqualTo ( "test" ) ) . doesNotThrowAnyException ( )
assertEquals ( 4 , UUID . fromString ( run . getID ( ) ) . version ( ) )
assertNotNull ( searchRequestBuilder )
assertNotNull ( h2Config )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertNotNull ( builder )
assertNotNull ( build )
assertEquals ( a . multiplyByItsTranspose ( ) , a . multiply ( a . transpose ( ) ) )
assertEquals ( a . multiplyByItsTranspose ( ) , a . multiply ( a . transpose ( ) ) )
assertEquals ( a . multiplyByItsTranspose ( ) , a . multiply ( a . transpose ( ) ) )
assertNotNull ( toString )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertNotNull ( build )
assertEquals ( new AffineTransform ( 1 , 3 , 2 , 1 , 0 , 0 ) , g2 . getTransform ( ) )
assertEquals ( a . multiplyByItsTranspose ( ) , a . multiply ( a . transpose ( ) ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( new FolderPath ( "foo" , "bar" , "beer" ) , FolderPath . deserializeFromString ( "/foo/bar/beer" ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertNotNull ( loanCyclePeriod )
assertEquals ( Guid . Empty , i )
assertEquals ( Guid . Empty , i )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertNotNull ( loanCyclePeriod )
assertNull ( getObject ( ) . getJsonArray ( "missing" ) )
assertNotNull ( build )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertNotNull ( build )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( ( LocalDateTime ) property . getValue ( ) , is ( new LocalDateTime ( 1968 , 1 , 13 , 0 , 0 ) ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( "Force [fh=1.0, fv=2.0, velocity=3.0, sensibility=4.0]" , force . toString ( ) )
assertNotNull ( build )
assertEquals ( 3 , clock . getCurrent ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertNotNull ( toString )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertNotNull ( toString )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertNotNull ( toString )
assertEquals ( "Environment" , source . getName ( ) )
assertEquals ( null , actual )
assertEquals ( null , actual )
assertEquals ( null , actual )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertNull ( systemEntityTypeRegistry . getSystemEntityType ( "unknownEntityTypeId" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertNotNull ( build )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( httpResponse . getHttpStatusCode ( ) , response . status ( ) )
assertEquals ( "com.querydsl.codegen.TypeFactoryTest.EnumExample" , type . getFullName ( ) )
assertEquals ( "com.querydsl.codegen.TypeFactoryTest.EnumExample" , type . getFullName ( ) )
assertNotNull ( build )
assertEquals ( "knows" , e1 . getLabel ( ) )
assertEquals ( "knows" , e1 . getLabel ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertNotNull ( toString )
assertNotNull ( toString )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertNotNull ( build )
assertNotNull ( loanCyclePeriod )
assertNotNull ( build )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( discreteTableCellRenderer , editor . getDiscreteTableCellRenderer ( ) )
assertEquals ( Collections . emptyList ( ) , mapper . map ( Collections . emptySet ( ) ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertNull ( getObject ( ) . getJsonArray ( "missing" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertNotNull ( build )
assertEquals ( format , columnFilter . getFormat ( ) )
assertEquals ( "0.0" , testResult )
assertThat ( date . getFormatCode ( ) ) . isEqualTo ( "102" )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertThat ( ServiceCoordinate . parse ( "foo bar baz" ) , is ( nullValue ( ) ) )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( 1 )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertEquals ( "AAAAT" , S ( big ( ) . getAnchorSequence ( ) ) )
assertEquals ( 0 , array . length )
assertArrayEquals ( destArray , origin )
assertThat ( writer . toString ( ) , is ( emptyString ( ) ) )
assertEquals ( tree . equals ( tree . clone ( ) ) , true )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertEquals ( ryaInstance , resolvedRyaInstance . get ( ) )
assertNull ( _Bytes . decompress ( _Bytes . compress ( null ) ) )
assertNull ( _Bytes . decompress ( _Bytes . compress ( null ) ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( r1 . getLength ( 0 ) , 5 , TOLERANCE )
assertEquals ( "192.168.1.0/24" , configuration . getNetworkMask ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( List . of ( ) , bookmarks )
assertEquals ( MyEnum . third , result )
assertEquals ( "" , result )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertArrayEquals ( in , out )
assertEquals ( "" , result )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( out . toString ( ) , parseJSONToString ( json ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertNotNull ( client )
assertNotNull ( client )
assertEquals ( "{\"BASIC_STATS\":\"true\"}" , params . get ( StatsSetupConst . COLUMN_STATS_ACCURATE ) )
assertThat ( containerWalker . findComboBoxWithValue ( request ) . isEditable ( ) , is ( false ) )
assertThat ( containerWalker . findComboBoxWithValue ( request ) . isEditable ( ) , is ( false ) )
assertThat ( containerWalker . findComboBoxWithValue ( request ) . isEditable ( ) , is ( false ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertTrue ( "incorrect behaviour" , behaviour instanceof TestBehaviourImpl )
assertThat ( EXPECTED_RULES . toString ( ) ) . isEqualToIgnoringWhitespace ( drl )
assertEquals ( "verifierCode" , result )
assertEquals ( "verifierCode" , result )
assertEquals ( "verifierCode" , result )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( "verifierCode" , result )
assertNotNull ( "object created" , descriptor )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertNotNull ( model )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertThat ( future . get ( ) , is ( value ) )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertEquals ( in , out , 0 )
assertEquals ( "" , configuration . getActiveQueryLogName ( ) )
assertThat ( target . getDescription ( ) , is ( "Description" ) )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertEquals ( "test" , charset . name ( ) )
assertNull ( new NodePath ( ".." ) . parent ( ) )
assertTrue ( command . toString ( ) . contains ( CHANNEL ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , null , 0 ) , is ( emptyString ( ) ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( "00000000000" , toStr ( bitSet ) )
assertEquals ( "test-sas-token" , Objects . requireNonNull ( resolver . resolve ( properties ) ) . getSignature ( ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertFalse ( this . marker . remove ( null ) )
assertEquals ( "knows" , e1 . getLabel ( ) )
assertEquals ( header . toString ( ) , channel . toString ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( doubleCounter . addAndGet ( delta ) ) . isCloseTo ( delta , Offset . offset ( .0001 ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( new Point ( 100 , 100 ) , screenResolution )
assertEquals ( new Point ( 100 , 100 ) , screenResolution )
assertEquals ( new Point ( 100 , 100 ) , screenResolution )
assertEquals ( new Point ( 100 , 100 ) , screenResolution )
assertTrue ( indexer . toIndexColorModel ( ) . getTransparentPixel ( ) != - 1 )
assertEquals ( new Point ( 100 , 100 ) , screenResolution )
assertEquals ( new AffineTransform ( ) , g2 . getTransform ( ) )
assertEquals ( "-1.-2.-3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "-1.-2.-3" , new DeweyDecimal ( args ) . toString ( ) )
assertThat ( new Hoge ( ) . getCaller ( ) . getName ( ) , is ( getClass ( ) . getName ( ) ) )
assertThat ( AllTypesUnionStructure . builder ( ) . build ( ) . type ( ) ) . isEqualTo ( Type . UNKNOWN_TO_SDK_VERSION )
assertEquals ( "DejaVuLGCSerif" , font . getFontName ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( dialect . getUsedLibraries ( ) , is ( new String [ ] { SparkSimbaDatabaseMeta . JAR_FILE } ) )
assertThat ( delegate . beginTransactionAsync ( ) , is ( notNullValue ( ) ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertEquals ( copy , parameters )
assertEquals ( copy , parameters )
assertEquals ( copy , parameters )
assertEquals ( copy , parameters )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( record , result )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "[プロパティ名の個数]", 7, propertyNames . i z ()
assertTrue ( ! retrievedIdValues . contains ( application . getId ( ) ) )
assertEquals ( token , target . getToken ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( countryCode . isPresent ( ) , is ( false ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
fail ( "failure expected" )
assertEquals ( e . getMessage ( ) , "no bueno" )
assertEquals ( e . getMessage ( ) , "no bueno" )
assertEquals ( e . getMessage ( ) , "no bueno" )
assertEquals ( e . getMessage ( ) , "no bueno" )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( "" , result )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( null , victim . removeLast ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertNull ( result )
assertEquals ( expResult , result )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
assertEquals ( 22 , ValidationErrorType . values ( ) . length )
assertEquals ( expResult , result )
assertNull ( result )
assertTrue ( "The JSON field ibm_serverName was not set with the value of env var CONTAINER_NAME." , lines . size ( ) > 0 )
assertEquals ( "foo" , refed . get ( ) . getString ( ) )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( commands )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( commands )
assertNotNull ( commands )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
assertEquals ( score , smsd1 . getStereoScore ( 0 ) )
assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 20 , smsd1 . getTarget ( ) . getAtomCount ( ) )
assertFalse ( foundMatches )
assertNotNull ( jobMeta )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
assertEquals ( score , smsd1 . getStereoScore ( 0 ) )
assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 20 , smsd1 . getTarget ( ) . getAtomCount ( ) )
assertThat ( ( Integer ) filter . filter ( map , interpreter ) ) . isBetween ( 3 , 4 )
assertThat ( ( Integer ) filter . filter ( map , interpreter ) ) . isBetween ( 3 , 4 )
assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
assertEquals ( score , smsd1 . getStereoScore ( 0 ) )
assertNotNull ( instance )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "v1" , node . attribute ( "k1" ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( result )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertNotNull ( instance )
assertEquals ( expectedValue , instance . getLabelID ( "R3" ) )
assertEquals ( label , result )
assertEquals ( expectedValue , result )
assertEquals ( date , instance . getDate ( ) )
assertNotNull ( energies )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.006 )
assertEquals ( expResult , result , 0.36 )
assertEquals ( expResult , result , 360 )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertFalse ( AndRetryCondition . create ( conditions ) . shouldRetry ( RetryPolicyContexts . EMPTY ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( fullyQualified , full )
assertEquals ( baseStr + "[{true,false,false}]" , ToStringBuilder . reflectionToString ( array ) )
assertNull ( result )
assertNull ( output )
assertEquals ( fullyQualified , full )
assertNull ( result )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( "#" , exc . getPointerToViolation ( ) )
assertEquals ( integer , NumericFunctions . toInteger ( "23" ) )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( fullyQualified , full )
assertEquals ( name , result )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertNotNull ( loanCyclePeriod )
assertEquals ( "[\"between\",1,2]" , serialized . toString ( ) )
assertEquals ( "getScope returns incorrect value." , ApplicationScoped . class . getName ( ) , ishb . getScope ( ) . getName ( ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertNotNull ( loanCyclePeriod )
assertEquals ( lObject , lPojoSchemaMeta . getInstance ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( lObject , lPojoSchemaMeta . getInstance ( ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "" , s )
assertThat ( entry . getCalendar ( ) , is ( equalTo ( newCalendar ) ) )
assertArrayEquals ( expected , actual , DELTA )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertArrayEquals ( new int [ ] { 1 , 2 } , selectValuesMeta . getSelectLength ( ) )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertEquals ( "POST /operation/call HTTP/1.1" , line )
assertEquals ( "org.apache.tuscany.sca.contribution.java" , javaExport . getPackage ( ) )
assertEquals ( "" , s )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( 2 , intSet2 . size ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertEquals ( DateTimeDuration . MINUTE , period0 . getDefaultSubDuration ( ) )
assertThat ( ( String ) property . getValue ( ) , is ( "Susan Summer" ) )
assertThat ( ( String ) property . getValue ( ) , is ( "Susan Summer" ) )
assertThat ( ( String ) property . getValue ( ) , is ( "Susan Summer" ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertEquals ( "Failed to find: " + url , "ok=true" , read )
assertThat ( node . getText ( ) ) . isEqualTo ( "" )
assertEquals ( "Failed to find: " + url , "ok=true" , read )
assertThat ( batchExecuted ) . as ( "Unexpected execution of batched operations" ) . isFalse ( )
assertEquals ( 185 , res3 . getBody ( ) . getLength ( ) )
assertEquals ( 36 , count )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertEquals ( KerberosAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( ControlType . None , type )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertEquals ( DOM_DATA_TREE_CHANGE_LISTENER , abstractDOMDataTreeChangeListenerRegistration . getInstance ( ) )
assertThat ( EXPECTED_RULES . toString ( ) ) . isEqualToIgnoringWhitespace ( drl )
assertEquals ( expected , returnValue )
assertEquals ( expected , returnValue )
assertEquals ( expected , returnValue )
assertEquals ( "" , s )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( "{\"sampleRootElement\":null}" , writer . toString ( ) )
assertEquals ( sw . toString ( ) , detail )
assertEquals ( "\"cats\"" , writer . toString ( ) )
assertEquals ( "\"cats\"" , writer . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "No NIO read access in this DataAccessObject." , ex . getMessage ( ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( "\"cats\"" , writer . toString ( ) )
assertEquals ( "\"cats\"" , writer . toString ( ) )
assertEquals ( "\"cats\"" , writer . toString ( ) )
assertEquals ( "{\"sampleRootElement\":null}" , writer . toString ( ) )
assertEquals ( "<root><hello name=\"world\"></hello></root>" , out . toString ( ) )
assertEquals ( 36 , count )
assertEquals ( 36 , count )
assertNotNull ( instance )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( clusterTbl . getId ( ) , newCluster . getId ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( "log" , instance . getLog ( ) )
assertEquals ( "test-message" , new String ( qMessage . getMessage ( ) , StringUtils . UTF8 ) )
assertEquals ( "value" , toml . getString ( "key" ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertNotNull ( client )
assertEquals ( "message" , message )
assertEquals ( "message" , message )
assertEquals ( "message" , message )
assertThat ( node . insertNext ( next ) ) . isSameAs ( next )
assertEquals ( 13 , objectType . getType ( ) )
assertEquals ( version . getVersion ( ) . hashCode ( ) , version . hashCode ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( 4 , UUID . fromString ( run . getID ( ) ) . version ( ) )
assertNull ( analyzer . getResourceOutputNodeType ( ) )
assertNotNull ( "pre 1.8 storageInfo should return non null locations list" , locations )
assertEquals ( user . getLastName ( ) , okLastName )
assertThat ( this . singleLineFormat . format ( Collections . < String > emptyList ( ) ) ) . isEqualTo ( "" )
assertThat ( this . singleLineFormat . format ( Collections . < String > emptyList ( ) ) ) . isEqualTo ( "" )
assertEquals ( ChannelFutures . toCompletableFuture ( channelFuture ) . get ( 1 , TimeUnit . SECONDS ) , channel )
assertEquals ( ChannelFutures . toCompletableFuture ( channelFuture ) . get ( 1 , TimeUnit . SECONDS ) , channel )
assertEquals ( ChannelFutures . toCompletableFuture ( channelFuture ) . get ( 1 , TimeUnit . SECONDS ) , channel )
assertEquals ( ChannelFutures . toCompletableFuture ( channelFuture ) . get ( 1 , TimeUnit . SECONDS ) , channel )
assertEquals ( ChannelFutures . toCompletableFuture ( channelFuture ) . get ( 1 , TimeUnit . SECONDS ) , channel )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertThat ( target . getSystemManagerId ( ) , is ( SYSTEM_MANAGER_ID ) )
assertEquals ( "value" , toml . getString ( "key" ) )
assertEquals ( "azure" , TerminalHelpPrinter . getScheme ( profile ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( REQUEST ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( REQUEST ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( REQUEST ) )
assertNotNull ( result )
assertEquals ( "azure" , TerminalHelpPrinter . getScheme ( profile ) )
assertEquals ( "" , s )
assertTrue ( previous < current )
assertEquals ( "Incorrect property value" , value , result )
assertEquals ( 6 , i )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertThat ( bc . cyclic ( ) . cardinality ( ) , is ( 12 ) )
assertThat ( bc . cyclic ( ) . cardinality ( ) , is ( 12 ) )
assertThat ( bc . cyclic ( ) . cardinality ( ) , is ( 12 ) )
assertThat ( bc . cyclic ( ) . cardinality ( ) , is ( 12 ) )
assertThat ( parse ( "[CH4]" ) , is ( atom ( Element . Carbon , 4 ) ) )
assertThat ( parse ( "[CH4]" ) , is ( atom ( Element . Carbon , 4 ) ) )
assertTrue ( 10 != connection . createChannel ( ) . getChannelNumber ( ) )
assertThat ( a . element ( ) , is ( Element . Unknown ) )
assertThat ( a . element ( ) , is ( Element . Unknown ) )
assertThat ( parse ( "[CH4]" ) , is ( atom ( Element . Carbon , 4 ) ) )
assertThat ( parse ( "[CH4]" ) , is ( atom ( Element . Carbon , 4 ) ) )
assertThat ( parse ( "[CH4]" ) , is ( atom ( Element . Carbon , 4 ) ) )
assertArrayEquals ( destArray , retArray )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertThat ( closeableThreadLocal . get ( ) . isClosed ( ) , is ( false ) )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertTrue ( result . get ( TaskAssigningRuntimeClient . class ) instanceof TaskAssigningRuntimeClientImpl )
assertEquals ( "HGNC:27892" , whammp3 . getAltGeneIDs ( ) . get ( "HGNC_ID" ) )
assertEquals ( "HGNC:27892" , whammp3 . getAltGeneIDs ( ) . get ( "HGNC_ID" ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertNotNull ( actual )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( page . sharedBehavior . renderHeadCount , 2 )
assertEquals ( page . sharedBehavior . renderHeadCount , 2 )
assertEquals ( page . sharedBehavior . renderHeadCount , 2 )
assertEquals ( page . sharedBehavior . renderHeadCount , 2 )
assertEquals ( page . sharedBehavior . renderHeadCount , 2 )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertNotNull ( actual )
assertThat ( a . element ( ) , is ( Element . Unknown ) )
assertEquals ( "" , s )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "1970-01-01T00:00Z" , serde . serialize ( new Date ( 0 ) ) )
assertEquals ( "Hello World!5" , StringSample . toStringTest ( 5 ) )
assertEquals ( "Hello World!5" , StringSample . toStringTest ( 5 ) )
assertThat ( request . getUserProperties ( ) . getProperty ( "w" ) , is ( "x=y" ) )
assertThat ( request . getUserProperties ( ) . getProperty ( "w" ) , is ( "x=y" ) )
assertNotNull ( uriRandomGenerator )
assertNotNull ( actual )
assertNotNull ( actual )
assertEquals ( "name" , name )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertThat ( OutputStreamFormater . spaces ( 20 ) . length ( ) , is ( 20 ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertNotNull ( actual )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertEquals ( "1.2.3" , v . toString ( ) )
assertEquals ( Matrix . eye ( 5 ) , Matrix . diag ( new ConstantVector ( 1.0 , 5 ) ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( record , result )
assertEquals ( record , result )
assertEquals ( record , result )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( record , result )
assertEquals ( record , result )
assertFalse ( foundMatches )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( record , result )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( "1/3" , rational . toString ( ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertThat ( source . getPropertyNames ( ) ) . contains ( "camel-case-to-kebab-case" )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertThat ( drawingMotion . getStart ( ) , is ( ( Point ) null ) )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertThat ( loggerAdapter . isDebugEnabled ( ) , is ( true ) )
assertThat ( source . getPropertyNames ( ) ) . contains ( "camel-case-to-kebab-case" )
assertEquals ( COSNull . NULL , victim . getCOSObject ( ) )
assertThatExceptionOfType ( Error . class ) . isThrownBy ( ( ) -> new BasicSlowLoader ( clock , 2 ) . get ( ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( sut . get ( 3 ) , "4" )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( 1 , new EnumeratedDistribution < > ( list ) . createSampler ( rng ) . sample ( 1 ) . length )
assertEquals ( 1 , new EnumeratedDistribution < > ( list ) . createSampler ( rng ) . sample ( 1 ) . length )
assertEquals ( 2 , count )
assertTrue ( configManager . configsCache . isEmpty ( ) )
assertThat ( future . get ( ) , is ( value ) )
assertThat ( AnnotationValues . getString ( value ) ) . isEqualTo ( "hello" )
assertTrue ( new RegexStringMatcher ( new MockServerLogger ( ) , string ( "some_value" ) , true ) . matches ( "some_value" ) )
assertThat ( AnnotationValues . getString ( value ) ) . isEqualTo ( "hello" )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "[[ ],null,null,null,[ ]]" , base . insert ( 1 , 2 ) . toString ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertEquals ( "test" , charset . name ( ) )
assertTrue ( Localise . inSmallRing ( g , g . edge ( 0 , 1 ) ) )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertNull ( foo . _array )
assertTrue ( array == new EuclideanIntegerPoint ( array ) . getPoint ( ) )
assertArrayEquals ( destArray , retArray )
assertArrayEquals ( destArray , retArray )
assertArrayEquals ( destArray , retArray )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( String . class , method . getReturnClass ( ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "test" , charset . name ( ) )
assertEquals ( "mId=\"a%26b\"&oid=\"%26long%26param%26value%26\"" , res )
assertEquals ( "mId=\"a%26b\"&oid=\"%26long%26param%26value%26\"" , res )
assertEquals ( "mId=\"a%26b\"&oid=\"%26long%26param%26value%26\"" , res )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( String . class , method . getReturnClass ( ) )
assertEquals ( String . class , method . getReturnClass ( ) )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertThat ( t1 . atom ( ) , is ( 1 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertThat ( list ( ) , hasSize ( 0 ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( closeableThreadLocal . get ( ) . isClosed ( ) , is ( false ) )
assertArrayEquals ( aCoeff , p . antiDerivative ( ) . getCoefficients ( ) , Double . MIN_VALUE )
assertEquals ( m , m2 )
assertArrayEquals ( aCoeff , p . antiDerivative ( ) . getCoefficients ( ) , Double . MIN_VALUE )
assertEquals ( "AQIDB\nAUGBw\ngJ" , out )
assertEquals ( mockWrapper , testWrapper )
assertEquals ( mockWrapper , testWrapper )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertEquals ( "23:foo" , captureArray ( 23 , "foo" ) )
assertNull ( ReflectionTestUtils . getField ( nationaliteitHisVolledig , STANDAARD ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertNull ( pool . get ( ( String ) null ) )
assertEquals ( "1:3 (2)" , myRange . toString ( ) )
assertEquals ( version . getVersion ( ) . hashCode ( ) , version . hashCode ( ) )
assertNotNull ( option . toString ( ) )
assertEquals ( "Foo:2.0" , nf1 . toString ( ) )
assertEquals ( 0 , list . size ( ) )
assertTrue ( classUnderTest . getColor ( ) . equals ( Color . GREEN ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertEquals ( 3 , clock . getCurrent ( ) )
assertEquals ( 185 , res3 . getBody ( ) . getLength ( ) )
assertEquals ( 185 , res3 . getBody ( ) . getLength ( ) )
assertEquals ( this , CurrentInstance . get ( CurrentInstanceTest . class ) )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
fail ( "Was not able to find reportproductoffering config file" + e )
assertThat ( exc . getMessage ( ) ) . isEqualTo ( "Cannot find preConverter invalid." )
assertNull ( StringUtils . padEnd ( null , 5 , '*' ) )
assertNotNull ( actual )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertNotNull ( actual )
assertTrue ( settingFlag . name ( ) + " is missing from default settings" , settings . getFlags ( ) . containsKey ( settingFlag ) )
assertTrue ( settingFlag . name ( ) + " is missing from default settings" , settings . getFlags ( ) . containsKey ( settingFlag ) )
assertNotNull ( "ClientProtocol is expected" , testCluster . getClient ( ) )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertEquals ( result , DEFAULT_RESULT )
assertEquals ( result , DEFAULT_RESULT )
assertEquals ( "Incorrect type" , GroupExpression . Type . AND , expr . getType ( ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "$first_2,$second_1" , t . generate ( ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertFalse ( TupleDomain . extractFixedValues ( TupleDomain . none ( ) ) . isPresent ( ) )
assertFalse ( TupleDomain . extractFixedValues ( TupleDomain . none ( ) ) . isPresent ( ) )
assertEquals ( "$first_2,$second_1" , t . generate ( ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertNull ( SimonUtils . simonTreeString ( SimonManager . getRootSimon ( ) ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertThat ( typeConverter . convert ( obj , field , null ) ) . isEqualTo ( obj )
assertEquals ( 66 , resultaat . size ( ) )
assertThat ( sed . getC ( ) ) . isEqualTo ( A_VALUE )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( description , actual )
assertEquals ( qm1 , qm2 )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertThat ( cmisConnectorDefinitionConstraint . isAnExpressionWithContent ( ExpressionBuilder . anExpression ( ) . withContent ( "content" ) . build ( ) ) ) . isTrue ( )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( list , collection . getValue ( ) )
assertFalse ( actionEqualsLongType )
assertTrue ( true )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertEquals ( qm1 , qm2 )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "" , result )
assertEquals ( expected , actual )
assertEquals ( "" , result )
assertEquals ( expected , actual )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( expected , actual )
assertFalse ( actionEqualsLongType )
assertEquals ( expected , actual )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , size )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( description , actual )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( description , actual )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertEquals ( NAME , tested . name )
assertEquals ( "" , result )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertEquals ( "" , result )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertFalse ( actionEqualsLongType )
assertEquals ( expected , size )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( expected , actual , true )
assertEquals ( expected , actual , true )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual , true )
assertEquals ( expected , actual , true )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertEquals ( "" , result )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( "" , result )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertFalse ( actionEqualsLongType )
assertFalse ( actionEqualsLongType )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertFalse ( actionEqualsLongType )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( "Yoda" , name )
assertEquals ( expected , actual )
assertEquals ( "Yoda" , name )
assertEquals ( expected , actual )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( expected , actual )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( expected , actual )
assertEquals ( qm1 , qm2 )
assertEquals ( qm1 , qm2 )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( 3 , userRepository . findByAgeIn ( ages ) . size ( ) )
assertTrue ( result == 1 )
assertEquals ( qm1 , qm2 )
assertEquals ( qm1 , qm2 )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertEquals ( expected , size )
assertEquals ( expected , actual )
assertFalse ( actionEqualsLongType )
assertFalse ( actionEqualsLongType )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertNotNull ( connectionLeaseMillisMBean )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertNotNull ( connectionLeaseMillisMBean )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( "" , result )
assertEquals ( NAME , tested . name )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( "" , result )
assertEquals ( NAME , tested . name )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( qm1 , qm2 )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( NAME , tested . name )
assertThat ( givenList ) . hasOnlyOneElementSatisfying ( s -> assertThat ( s ) . isEmpty ( ) )
assertEquals ( actual , expected , "Method with zero parameters does not match expected" )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( converterTo ( validationErrorBuilder , specification , char . class ) . convert ( "cc" ) , equalTo ( null ) )
assertEquals ( expected , built )
assertEquals ( expected , actual )
assertEquals ( "value1" , value . asSingle ( ) )
assertNull ( amqpMessageFacade . getApplicationProperties ( ) )
assertEquals ( expected , built )
assertEquals ( expected , built )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertEquals ( expected , actual )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertThat ( valueResolver . resolve ( NULL_VALUE_RESOLVING_CONTEXT ) , equalTo ( typedValue ) )
assertNotNull ( layout )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertThat ( result ) . onProperty ( "id" ) . containsOnly ( 1L )
assertThat ( initializer . getPropertyName ( ) ) . isEqualTo ( "lastName" )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( data , testData )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertThat ( this . testee . getResource ( "Foo" ) ) . isSameAs ( url )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertEquals ( title , dw . getTitle ( ) )
assertThat ( windowAction . title ( ) ) . isEqualTo ( title )
assertNull ( jsonBinaryType . deepCopy ( null ) )
assertEquals ( "wiki:Space.Page" , this . type . disassemble ( DocumentReferenceTypeTest . docReference ) )
assertEquals ( docReference , result )
assertEquals ( docReference , result )
assertEquals ( docReference , result )
assertEquals ( payload , httpWebService . getPayloadAsString ( request ) )
assertEquals ( payload , httpWebService . getPayloadAsString ( request ) )
assertEquals ( payload , httpWebService . getPayloadAsString ( request ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( e . getMessage ( ) . startsWith ( "Invalid KDC administrator credentials" ) )
assertThat ( RDLBackendHandlerFactory . newInstance ( mock ( DropReadwriteSplittingRuleStatement . class ) , connectionSession ) . execute ( ) , instanceOf ( UpdateResponseHeader . class ) )
assertEquals ( "SNMPWrapper Error: SNMP client is null" , e . getMessage ( ) )
assertEquals ( "testProcess2" , testProcess . getTitle ( ) )
assertThat ( alertList . size ( ) , equalTo ( 0 ) )
this . entityAssert . assertValues ( "fromDbUnit" )
assertEquals ( expected , actual )
assertEquals ( expected , stormAdminService . startParserTopology ( "bro" ) )
assertEquals ( "testProcess2" , testProcess . getTitle ( ) )
assertThat ( alertList . size ( ) , equalTo ( 0 ) )
assertEquals ( "6eab1c2c827387803ce457c76552f0511858fc1f9505c7dc620e198c0d1f4d02" , HashUtils . getMessageHash ( message , fields ) )
assertNull ( completionResult )
assertEquals ( expected , options . getOptions ( ) . url )
assertNull ( completionResult )
assertEquals ( expected , options . getOptions ( ) . url )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "aTestString" , classUnderTest . getUser ( ) )
assertEquals ( expected , actual )
assertNull ( fundingClass )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "$foo" , s )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertThat ( provider . tabId ( null ) ) . isEqualTo ( "tab.actors" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertEquals ( String . valueOf ( Constants . EPSG_GREENWICH ) , StandardDefinitions . GREENWICH )
assertEquals ( parameter . getParameterId ( ) , id )
assertEquals ( UUID . fromString ( test ) , UUIDUtility . parseFromString ( test ) . orElse ( null ) )
assertEquals ( "a" , result )
assertEquals ( result , "defval" )
assertTrue ( testMap . get ( "key" ) instanceof Integer )
assertEquals ( value , JavaTypesManager . BOOLEAN . getId ( ) )
assertThatIOException ( ) . isThrownBy ( ( ) -> result . orElseThrow ( IOException :: new ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( Formatter . testNameFrom ( type , m ) ) . isEqualTo ( concat ( typeName , ".methodWithNoParameters" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( new Integer ( 3 ) , value . get ( ) )
assertEquals ( "x" , ibt . get ( tag2 ( ) ) )
assertEquals ( "x" , ibt . get ( tag2 ( ) ) )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertEquals ( Vector3 . of ( - 1 , 2 , - 1 ) , v )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( new Money ( M1_AMOUNT + M2_AMOUNT ) , m1 . add ( m2 ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( new Money ( RUPEE , "-20.0" ) , money . negate ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( "NOT" , test . build ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertTrue ( test . toString ( ) . startsWith ( "MoneyAmountStyle" ) )
assertEquals ( 5 , supplier . get ( ) , 0.1 )
assertNotNull ( instance )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( money ( "10.00" , USD ) , account . getBalance ( ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertThat ( Formatter . testNameFrom ( type , m ) ) . isEqualTo ( concat ( typeName , ".methodWithNoParameters" ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertEquals ( Index . of ( 30 , 20 , 50 ) , c )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( 0 , array . length )
assertEquals ( result , "" )
assertThat ( aList , is ( List . of ( ) ) )
assertEquals ( result , "" )
assertEquals ( test . getId ( ) , "Europe/Madrid" )
assertEquals ( "foo" , Validate . notNull ( "foo" ) )
assertEquals ( result , "" )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "Attribute does not exist: unknown" , e . getMessage ( ) )
assertEquals ( test . getId ( ) , "Europe/Madrid" )
assertEquals ( GBP_2_33 , test )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertEquals ( test . with ( Month . JUNE ) , test )
assertEquals ( test . with ( Month . JUNE ) , test )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertEquals ( test . atDay ( i ) , expected )
assertEquals ( test . atDay ( i ) , expected )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertTrue ( UserRole . SITECOLLABORATOR . equals ( UserRole . getUserRoleforName ( "Site Collaborator" ) ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNull ( "should return null when experiment not found" , experiments . get ( "foo" ) )
assertEquals ( test . atDay ( i ) , expected )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertTrue ( UserRole . SITECOLLABORATOR . equals ( UserRole . getUserRoleforName ( "Site Collaborator" ) ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( Ansi8BitColor . foreground ( 208 ) ) . hasToString ( "38;5;208" )
assertThat ( SimpleScore . of ( - 147 ) . withInitScore ( - 7 ) ) . isEqualTo ( SimpleScore . ofUninitialized ( - 7 , - 147 ) )
assertEquals ( "123" , parser . parseValueForDatabaseRead ( "123" ) )
assertEquals ( "123" , parser . parseValueForDatabaseRead ( "123" ) )
assertEquals ( "123" , parser . parseValueForDatabaseRead ( "123" ) )
assertEquals ( Matrix . create ( new double [ ] [ ] { { 1 , 7 } , { 3 , 8 } } ) , m )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertThat ( Tools . shellList ( list ) ) . isEqualTo ( shellList )
assertEquals ( LocalDate . of ( 2016 , 1 , 9 ) , yw . adjustInto ( date ) )
assertEquals ( i , ( int ) it . previous ( ) )
assertEquals ( test . getId ( ) , "Europe/Madrid" )
assertEquals ( new Iban ( "GB93SXVN31194773254451" ) , random . next ( ) )
assertEquals ( HijrahChronology . INSTANCE . date ( iso ) , hijrahDate )
assertEquals ( "the" , token . previous ( ) . word ( ) )
assertEquals ( date , instance . getDate ( ) )
assertEquals ( date , instance . getDate ( ) )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertThat ( date . isApproximate ( ) ) . isEqualTo ( true )
assertNull ( "should return null when experiment not found" , experiments . get ( "foo" ) )
assertEquals ( i , ( int ) it . previous ( ) )
assertNull ( map . get ( null ) )
assertEquals ( new Iban ( "GB93SXVN31194773254451" ) , random . next ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertThat ( entry . getStartDate ( ) , is ( equalTo ( date ) ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertEquals ( accounting , INSTANCE . date ( iso ) )
assertThat ( date . isApproximate ( ) ) . isEqualTo ( true )
assertEquals ( "foo" , descriptor . getId ( ) )
assertEquals ( t , expected )
assertEquals ( t , expected )
assertEquals ( t , expected )
assertEquals ( t , expected )
assertEquals ( t , expected )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( StringExtensions . normalized ( input ) , is ( expected ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "GBP" , test . toString ( ) )
assertEquals ( expectedPath , path )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( e1 . name ( ) , e1 . toString ( ) )
assertEquals ( color , readColor ( buf ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( a . equals ( b ) ) . isTrue ( )
assertEquals ( e1 . name ( ) , e1 . toString ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( e1 . name ( ) , e1 . toString ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
ObjectAssert . compareIsWorking ( a1 , a2 , b , c )
assertEquals ( e1 . name ( ) , e1 . toString ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( name . trim ( ) . toUpperCase ( ) , Env . valueOf ( name ) . toString ( ) )
assertTrue ( test . toString ( ) . startsWith ( "MoneyAmountStyle" ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( test . atYear ( 2005 ) , LocalDate . of ( 2005 , 2 , 28 ) )
assertEquals ( test . adjustInto ( date ) , LocalDate . of ( 2007 , 2 , 28 ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( expected , test )
assertEquals ( expected , test )
assertEquals ( LocalDate . of ( 2015 , 12 , 3 ) , LocalDate . MIN . with ( PackedFields . PACKED_DATE , 20151203 ) )
assertEquals ( test . atDay ( i ) , expected )
assertEquals ( test . atDay ( i ) , expected )
assertEquals ( test . atDay ( i ) , expected )
assertEquals ( test . atDay ( i ) , expected )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertTrue ( UserRole . SITECOLLABORATOR . equals ( UserRole . getUserRoleforName ( "Site Collaborator" ) ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertEquals ( first , builder . getValue ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( PathRequest . toStaticResources ( ) ) . isInstanceOf ( StaticResourceRequest . class )
assertThat ( PathRequest . toStaticResources ( ) ) . isInstanceOf ( StaticResourceRequest . class )
assertThat ( PathRequest . toStaticResources ( ) ) . isInstanceOf ( StaticResourceRequest . class )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotNull ( Elements . meta ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . adjustInto ( date ) , LocalDate . of ( 2007 , 6 , 30 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( result )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
isTrue ( true , ( ) -> "Hello" )
assertNotNull ( Elements . meta ( ) )
assertNull ( BasicBuilderParameters . fetchBeanHelper ( params . getParameters ( ) ) )
assertNull ( BasicBuilderParameters . fetchBeanHelper ( params . getParameters ( ) ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertNull ( BasicBuilderParameters . fetchBeanHelper ( params . getParameters ( ) ) )
assertNotNull ( Elements . meta ( ) )
assertTrue ( Vector3 . of ( 10 , 2 , 3 ) . epsilonEquals ( v ) )
assertNotNull ( Elements . meta ( ) )
assertNotNull ( Elements . meta ( ) )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( testParam ) . hasName ( key ) . hasValue ( val )
assertThat ( testParam ) . hasName ( key ) . hasValue ( val )
assertEquals ( Vector3 . of ( - 1 , 2 , - 1 ) , v )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertFalse ( list instanceof ArrayList )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
isTrue ( true , ( ) -> "Hello" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertEquals ( "23" , "123" . substring ( 1 , 3 ) )
assertEquals ( Quarter . of ( expected ) , Quarter . of ( base ) . plus ( amount ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertNotNull ( cs . getEndpoint ( ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertNull ( array )
assertEquals ( expected [ i ] , actual )
assertNull ( array )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertEquals ( 100 , TimeWindow . of ( 10 , 1000 , "foo" ) . getBuckets ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertEquals ( new Integer ( 3 ) , value . get ( ) )
assertEquals ( "baeldung" , name )
assertThat ( response ( handler ) , is ( "{\"string\":\"bar\",\"integer\":123}" ) )
assertEquals ( "baeldung" , name )
assertEquals ( "baeldung" , name )
assertThat ( response ( handler ) , is ( "{\"string\":\"bar\",\"integer\":123}" ) )
assertTrue ( iterator . closed )
assertEquals ( ImmutableList . of ( "a" , "b" , "c" , "d" ) , result )
assertEquals ( streamToList , collectToList )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertEquals ( ImmutableList . of ( "a" , "b" , "c" , "d" ) , result )
assertEquals ( expectedRanksList , convertedRankList )
assertEquals ( streamToList , collectToList )
assertTrue ( iterator . closed )
assertThat ( treeMap . toKeys ( ) ) . containsExactly ( "four" , "one" , "three" , "two" )
assertTrue ( iterator . closed )
assertEquals ( List . of ( "bb" ) , filtered )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertEquals ( names , new HashSet < > ( Collections . list ( propertiesConfigurationProperties . keys ( ) ) ) )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertTrue ( iterator . closed )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertNotNull ( "AdaptiveScalarEncoder class is null" , ase )
assertEquals ( defaultString , ImmutableList . of ( "----" ) )
assertFalse ( list instanceof ArrayList )
assertEquals ( 14L , sum )
assertEquals ( expected , result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( result , "defval" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( resultSet . findColumn ( TestUtil . COLUMN_NAME_PROPERTIES . PROP_A ) , is ( 1 ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( "GBP" , test . toString ( ) )
assertEquals ( "GBP" , test . toString ( ) )
doWithoutCustomerSpec ( ( ) -> assertThat ( repository . count ( ) ) . isEqualTo ( 3 ) )
assertThat ( Defer . defer ( callable ) ) . isNull ( )
assertEquals ( mockCronField , function . apply ( mockCronField ) )
assertEquals ( mockCronField , function . apply ( mockCronField ) )
assertEquals ( mockCronField , function . apply ( mockCronField ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertTrue ( "recovered Try to be 'world' string" , "world" . equals ( foldedValue . getValue ( ) ) )
assertTrue ( "try is now containing 'hello' string" , "hello" . equals ( hello . getValue ( ) ) )
assertTrue ( "recovered Try to be 'world' string" , "world" . equals ( foldedValue . getValue ( ) ) )
assertEquals ( String . class , t . getType ( ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertTrue ( "recovered Try to be 'world' string" , "world" . equals ( foldedValue . getValue ( ) ) )
isTrue ( true , ( ) -> "Hello" )
assertThat ( riskLimits . get ( "BTC-EUR_max_qty_per_trade" ) ) . isGreaterThan ( BigDecimal . ZERO )
assertEquals ( expectedFeatures , effectedFeatures )
assertEquals ( "fantastic" , supplier . get ( ) )
assertEquals ( "fantastic" , supplier . get ( ) )
assertEquals ( "fantastic" , supplier . get ( ) )
assertEquals ( new Money ( RUPEE , "-20.0" ) , money . negate ( ) )
assertEquals ( new Money ( RUPEE , "-20.0" ) , money . negate ( ) )
assertEquals ( new Money ( RUPEE , "-20.0" ) , money . negate ( ) )
assertThat ( qty . toBigDecimal ( ) ) . isEqualByComparingTo ( "0.33333" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertTrue ( Vector3 . of ( 10 , 2 , 3 ) . epsilonEquals ( v ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertEquals ( 0.0 , abT . subtract ( abTRef ) . getNorm1 ( ) , 1.0e-10 )
assertThat ( a . equals ( b ) ) . isTrue ( )
assertEquals ( "{1.1,2.02}" , result )
assertNull ( Linear . solve ( m , Vector . of ( 1 , 3 , 3 ) ) )
assertThat ( a . equals ( b ) ) . isFalse ( )
assertEquals ( 1 , CorrPearson . of ( x , y ) . singleValue ( ) , 1e-30 )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertNull ( Linear . solve ( m , Vector . of ( 1 , 3 , 3 ) ) )
assertThat ( a . equals ( b ) ) . isFalse ( )
assertEquals ( 1 , CorrPearson . of ( x , y ) . singleValue ( ) , 1e-30 )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( "" , s )
assertEquals ( "{1,2}" , result )
assertEquals ( "{1,2}" , result )
assertEquals ( expectedResult , result , "new Base64(65, \\t, false)" )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
run ( context -> assertThat ( context ) . doesNotHaveBean ( AzureKeyVaultSecretAutoConfiguration . class ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertTrue ( ex . getMessage ( ) . startsWith ( "Errors found in file: Issue67.yml" ) )
run ( context -> assertThat ( context ) . doesNotHaveBean ( AzureKeyVaultSecretAutoConfiguration . class ) )
assertEquals ( "GBP" , test . toString ( ) )
assertThat ( description . toString ( ) , is ( "x y was <1>" ) )
assertThat ( joinFrom ( strings , "; " ) . toString ( ) , is ( equalTo ( "a text; another text" ) ) )
assertThat ( joinFrom ( strings , "; " ) . toString ( ) , is ( equalTo ( "a text; another text" ) ) )
assertThat ( description . toString ( ) , is ( "x y was <1>" ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertEquals ( expected , UncheckedFuture . on ( input ) . stream ( ) . map ( UncheckedFuture :: get ) . collect ( Collectors . toList ( ) ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertThat ( description . toString ( ) , is ( "x was \"y\"" ) )
assertThat ( description . toString ( ) , is ( "x y was <1>" ) )
assertFalse ( request . getHeaders ( "name" ) . hasMoreElements ( ) )
assertEquals ( "bla" , builder . toString ( ) )
assertEquals ( "bla" , builder . toString ( ) )
assertEquals ( "bla" , builder . toString ( ) )
assertEquals ( "bla" , builder . toString ( ) )
assertFalse ( StringLookupFactory . INSTANCE_BASE64_DECODER . toString ( ) . isEmpty ( ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertEquals ( 2 , Double . parseDouble ( builder . toString ( ) ) , 0 )
assertFalse ( StringLookupFactory . INSTANCE_BASE64_DECODER . toString ( ) . isEmpty ( ) )
assertFalse ( StringLookupFactory . INSTANCE_BASE64_DECODER . toString ( ) . isEmpty ( ) )
assertEquals ( "GBP hello" , buf . toString ( ) )
assertEquals ( 2 , Double . parseDouble ( builder . toString ( ) ) , 0 )
assertFalse ( StringLookupFactory . INSTANCE_BASE64_DECODER . toString ( ) . isEmpty ( ) )
assertThat ( actual ) . extractingCharSequence ( ) . isEqualTo ( "Test" )
assertEquals ( INDENT , Formatting . tab ( ) )
assertEquals ( "\n" , Formatting . nl ( ) )
assertEquals ( "\n" , Formatting . nl ( ) )
assertEquals ( "\n" , Formatting . nl ( ) )
assertThat ( ConfigurationSnapshot . EMPTY . getOptional ( Collections . singleton ( "foo" ) , TypeLiteral . of ( String . class ) ) ) . isNotNull ( ) . isNotPresent ( )
assertEquals ( INDENT , Formatting . tab ( ) )
assertThat ( STANDARD_REPRESENTATION . toStringOf ( map ) ) . isNull ( )
assertThat ( STANDARD_REPRESENTATION . toStringOf ( map ) ) . isNull ( )
assertThat ( STANDARD_REPRESENTATION . toStringOf ( map ) ) . isNull ( )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertThat ( actual ) . extractingCharSequence ( ) . isEqualTo ( "Test" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( some ( "foo" ) . bare ( ) , equalTo ( "foo" ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertNotSame ( is , bis )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( "\u0041\u2262\u0391\u002E" , TextUtil . urlDecodeUTF8 ( name ) )
assertEquals ( "\u0041\u2262\u0391\u002E" , TextUtil . urlDecodeUTF8 ( name ) )
assertEquals ( "a" , result )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertEquals ( xmlReader . getEncoding ( ) , UTF_8 )
assertEquals ( xmlReader . getEncoding ( ) , UTF_8 )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( 1L , token . position ( ) . getAsLong ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( 1L , token . position ( ) . getAsLong ( ) )
assertEquals ( 1L , token . position ( ) . getAsLong ( ) )
assertTrue ( value )
assertEquals ( test . getId ( ) , "Europe/Madrid" )
assertEquals ( value , JavaTypesManager . BOOLEAN . getId ( ) )
assertNotNull ( multiMatchQuery )
assertNotNull ( multiMatchQuery )
assertEquals ( ImmutableMap . of ( MSQWarnings . CTX_MAX_PARSE_EXCEPTIONS_ALLOWED , 0 ) , originalQueryContext )
assertEquals ( expected , UncheckedFuture . on ( input ) . stream ( ) . map ( UncheckedFuture :: get ) . collect ( Collectors . toList ( ) ) )
assertEquals ( ImmutableMap . of ( MSQWarnings . CTX_MAX_PARSE_EXCEPTIONS_ALLOWED , 0 ) , originalQueryContext )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertThat ( Parameter . withFields ( "id,name" ) ) . hasName ( "fields" ) . hasValue ( "id,name" )
assertThat ( testParam ) . hasName ( key ) . hasValue ( val )
assertThat ( testParam ) . hasName ( key ) . hasValue ( val )
assertThat ( testParam ) . hasName ( key ) . hasValue ( val )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertEquals ( 11 , summed )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertEquals ( returns . toString ( ) , sb . toString ( ) )
assertSame ( IncludeExcludeListPredicate . empty ( ) , includeExcludeList )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( "2020-01-08" , date . getCustomDateOne ( 2020 , 1 , 8 ) . toString ( ) )
assertEquals ( "GBP" , test . toString ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertThat ( this . properties . getTomcat ( ) . getThreads ( ) . getMinSpare ( ) ) . isEqualTo ( 10 )
assertThat ( this . properties . getTomcat ( ) . getThreads ( ) . getMinSpare ( ) ) . isEqualTo ( 10 )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertThat ( builder . initialCapacity ( 100 ) . initialCapacity , is ( equalTo ( 100 ) ) )
assertEquals ( returns . toString ( ) , sb . toString ( ) )
assertSame ( IncludeExcludeListPredicate . empty ( ) , includeExcludeList )
assertEquals ( t , OffsetDate . of ( year , month , day , offset ) . toLocalDate ( ) )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( expected , lhs . equals ( rhs ) )
assertEquals ( expected , lhs . equals ( rhs ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( 11 , summed )
assertEquals ( DoubleHashBag . newBagWith ( 1.0d , 2.0d , 3.0d ) , actual . toBag ( ) )
assertEquals ( money ( "10.00" , USD ) , account . getBalance ( ) )
assertEquals ( 11 , summed )
assertEquals ( 11 , summed )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( result , "defval" )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertThat ( STANDARD_REPRESENTATION . toStringOf ( map ) ) . isNull ( )
assertThatIOException ( ) . isThrownBy ( ( ) -> result . orElseThrow ( IOException :: new ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( new Integer ( 3 ) , value . get ( ) )
assertEquals ( "x" , ibt . get ( tag2 ( ) ) )
assertEquals ( GBP_2_33 , test )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( expectedCounterDateValues , result [ i ] . getDateList ( ) . size ( ) )
assertThat ( removedWeight . get ( ) ) . isEqualTo ( MAXIMUM / 2 )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertEquals ( "1 year 2 months 1 day 10:20:30.400" , datum . asChars ( ) )
assertThat ( instance . getAcceptedIssuers ( ) , notNullValue ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertFalse ( list instanceof ArrayList )
assertEquals ( "" , data . get ( "regexp" ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertThat ( c . getName ( ) ) . isEqualTo ( "org.cache2k.test.util.PerMethodCacheProviderTest.testName" )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertFalse ( list instanceof ArrayList )
assertEquals ( 8 , len )
assertEquals ( endPoints , filter . filter ( endPoints , PartitionContextBuilder . empty ( ) ) )
assertThat ( aList , is ( List . of ( ) ) )
assertNotNull ( result )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "File to string example" , fileContents )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( validator . validate ( "a/namespace/3.0" ) ) . isError ( )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( expectedCounterDateValues , result [ i ] . getDateList ( ) . size ( ) )
assertEquals ( 0.0 , abT . subtract ( abTRef ) . getNorm1 ( ) , 1.0e-10 )
assertEquals ( 0.0 , abT . subtract ( abTRef ) . getNorm1 ( ) , 1.0e-10 )
assertEquals ( "GBP" , test . toString ( ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "GBP" , test . toString ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertSame ( this . family1 , this . manager . get ( this . person1 ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "" , 0d , v . getEntry ( 0 ) , 0 )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertThat ( vc . computeChangeType ( ) . get ( ) , is ( SemanticVersion . ChangeType . MINOR ) )
assertEquals ( "myname" , report . getName ( ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertThat ( writer . get ( ) , is ( "2019-01-01 00:00:00" ) )
assertThat ( cim . getName ( ) ) . isEqualTo ( "main1" )
assertEquals ( test . with ( Month . JUNE ) , test )
assertEquals ( "[1, 2, 3, 4, 5]" , list . toString ( ) )
assertEquals ( "GBP" , test . toString ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertThat ( cim . getName ( ) ) . isEqualTo ( "main1" )
assertEquals ( DayOfWeek . of ( base ) . plus ( amount ) , DayOfWeek . of ( expected ) )
assertNotNull ( bulk )
assertEquals ( test , expected )
assertEquals ( test . adjustInto ( date ) , date )
assertEquals ( "GBP" , test . toString ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertTrue ( mStore . get ( inodeId ) . isPresent ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertEquals ( expected , input )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( CalendarYear . of ( 2011 ) . getValue ( ) , is ( 2011 ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertEquals ( C_150 , targetHours , 0.0 )
assertNotEquals ( position2 . getDate ( ) , result )
assertNotEquals ( position2 . getDate ( ) , result )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( 2.5d , evaluate ( values , 50 ) )
assertEquals ( entry . getKey ( ) , 5.0 )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( fixed ( Example . class ) . matchedType ( ) , equalTo ( Example . class ) )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "foo" , Validate . notNull ( "foo" ) )
assertEquals ( "foo" , Validate . notNull ( "foo" ) )
assertThat ( reason , assumingFields ( "first3Chars" ) . areModifiedAsPartOfAnUnobservableCachingStrategy ( ) )
assertEquals ( new Integer ( 1 ) , dag . getNode ( 1 ) . get ( ) )
assertEquals ( new Integer ( 1 ) , dag . getNode ( 1 ) . get ( ) )
assertFalse ( this . marker . remove ( null ) )
assertThat ( block . toString ( ) ) . isEqualTo ( "taco" )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertThat ( StreamSupport . stream ( supplier . get ( ) , false ) ) . containsExactlyInAnyOrder ( testEntries )
assertThat ( StreamSupport . stream ( supplier . get ( ) , false ) ) . containsExactlyInAnyOrder ( testEntries )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( reason , assumingFields ( "first3Chars" ) . areModifiedAsPartOfAnUnobservableCachingStrategy ( ) )
assertThat ( reason , assumingFields ( "first3Chars" ) . areModifiedAsPartOfAnUnobservableCachingStrategy ( ) )
assertTrue ( zeroDollars . equals ( zeroDollars . negate ( ) ) )
assertTrue ( zeroDollars . equals ( zeroDollars . negate ( ) ) )
assertEquals ( DayOfWeek . of ( base ) . plus ( amount ) , DayOfWeek . of ( expected ) )
assertEquals ( output , ImmutableList . of ( ) )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( "Class name formatting" , "[]" , name )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( reason , assumingFields ( "first3Chars" ) . areModifiedAsPartOfAnUnobservableCachingStrategy ( ) )
assertEquals ( DayOfWeek . of ( base ) . plus ( amount ) , DayOfWeek . of ( expected ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertNotNull ( result )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertNull ( sfcProviderRpc . instantiateServiceFunctionChain ( instantiateServiceFunctionChainInput . build ( ) ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
isTrue ( true , ( ) -> "Hello" )
assertTrue ( test . toString ( ) . startsWith ( "MoneyAmountStyle" ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertThat ( target . getSystemManagerId ( ) , is ( SYSTEM_MANAGER_ID ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "GBP" , test . toString ( ) )
assertSame ( this . family1 , this . manager . get ( this . person1 ) )
assertEquals ( ISOSCELES , res )
assertEquals ( "i: " + i , i % 2 == 0 ? 1 : - 1 , pow )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . doubleValue ( ) , 0 )
assertEquals ( data [ i ] + i , m . getEntry ( i , i ) , 0d )
assertEquals ( every , ( int ) new Every ( new IntegerFieldValue ( every ) ) . getPeriod ( ) . getValue ( ) )
assertEquals ( data [ i ] + i , m . getEntry ( i , i ) , 0d )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( x + 11d , getBorder ( ) . getCenterX ( ) , 0.0000001 )
assertEquals ( new Point2D . Double ( 1.1 , 2.2 ) , GeoJson . p ( 1.1 , 2.2 ) )
assertEquals ( mockCronField , function . apply ( mockCronField ) )
assertEquals ( every , ( int ) new Every ( new IntegerFieldValue ( every ) ) . getPeriod ( ) . getValue ( ) )
assertEquals ( expected , actual )
assertThat ( NaN ( ) ) . isCloseTo ( Double . NaN , within ( 0d ) )
assertEquals ( A_PASCAL_33_CHOL_INV_EXPECTED , A_PASCAL_33_CHOL_MATRIX_ACTUAL )
assertEquals ( correctScaled [ i ] , test [ i ] , 0 )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . doubleValue ( ) , 0 )
assertThat ( NaN ( ) ) . isCloseTo ( Double . NaN , within ( 0d ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( 0 , array . length )
assertArrayEquals ( new int [ ] { 0xffffffff , 0 } , bd . getArray ( ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( "{1.1,2.02}" , result )
assertEquals ( new DenseMatrix ( expected ) , A )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( ( double ) ( i + 1 ) , b [ i ] , 1e-6 )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . doubleValue ( ) , 0 )
assertThat ( f3list . equals ( f4list ) , is ( false ) )
assertNull ( IOBiFunction . noop ( ) . apply ( null , null ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( i , testlib . ret_int32_t ( i ) )
assertEquals ( "i: " + i , 1 , pow )
assertEquals ( expected , y [ i ] , 1e-7d )
assertTrue ( EagleExceptionWrapper . wrap ( exception ) . startsWith ( "java.lang.Exception" ) )
assertEquals ( i , testlib . ret_int32_t ( i ) )
assertEquals ( Ipv4AddressFamily . VALUE , ribSupportTestImp . getAfi ( ) )
assertEquals ( Ipv4AddressFamily . VALUE , ribSupportTestImp . getAfi ( ) )
assertEquals ( Ipv4AddressFamily . VALUE , ribSupportTestImp . getAfi ( ) )
assertEquals ( Ipv4AddressFamily . VALUE , ribSupportTestImp . getAfi ( ) )
isTrue ( true , ( ) -> "Hello" )
assertThat ( actual ) . hasSize ( 1 )
assertEquals ( columns , ImmutableMap . of ( DEFAULT_TEST_ORDERS , getOrdersTable ( ) . getColumns ( ) ) )
assertEquals ( columns , ImmutableMap . of ( DEFAULT_TEST_ORDERS , getOrdersTable ( ) . getColumns ( ) ) )
assertEquals ( columns , ImmutableMap . of ( DEFAULT_TEST_ORDERS , getOrdersTable ( ) . getColumns ( ) ) )
assertEquals ( "a" , result )
assertEquals ( "a" , result )
assertEquals ( columns , ImmutableMap . of ( DEFAULT_TEST_ORDERS , getOrdersTable ( ) . getColumns ( ) ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( expected , actual )
assertEquals ( "beta at (" + alpha + ", " + beta + ") relative error = " + err , 0 , err , 1.0e-10 )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertEquals ( expected , Literal ( expected , Integer ( ) ) . getLiteral ( ) )
assertNotNull ( context . createNonStorableInObjectStreamIndirectReference ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( event1 . getSequenceNumber ( ) , concat . getLastSequenceNumber ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( message , xmiMappingException . getMessage ( ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( t , expected )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( t , expected )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertEquals ( Ipv4Range . from ( FIRST_IPV4_ADDRESS ) . to ( LAST_IPV4_ADDRESS ) , Ipv4Range . parseDecimalNotation ( FIRST_IPV4_ADDRESS . value ( ) + "-" + LAST_IPV4_ADDRESS . value ( ) ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( price ( ) . apply ( item ) , price )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertEquals ( "a" , result )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "a" , result )
assertEquals ( "a" , result )
assertEquals ( BigDecimal . valueOf ( 2 ) , GBP_2_34 . getAmountMajor ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( NumberUtils . stripTrailingDecimalZeros ( null ) ) . isNull ( )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "a" , result )
assertEquals ( "a" , result )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "GBP" , test . getCode ( ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( t , expected )
assertEquals ( t , expected )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( SVGMatrix . createRotate ( Math . toRadians ( 11.2 ) ) . translate ( 10.3 , - 23.5 ) , transfo . matrix )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertThat ( cim . getName ( ) ) . isEqualTo ( "main1" )
assertThat ( cim . getName ( ) ) . isEqualTo ( "main1" )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertNotNull ( this . duration . getComponents ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
isTrue ( true , ( ) -> "Hello" )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
isTrue ( true , ( ) -> "Hello" )
assertTrue ( new SavingsOverDueDepositsTag ( ) . buildAmountUI ( new Money ( getCurrency ( ) , "1000" ) ) . toString ( ) . contains ( "1,000" ) )
assertThat ( functions . resourceLink ( "kenyaemr" , "test.png" ) , is ( "/testing/ms/uiframework/resource/kenyaemr/test.png" ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertTrue ( paymentReceipt . getPayment ( ) instanceof HibernateProxy )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertNotNull ( context . createNonStorableInObjectStreamIndirectReference ( ) )
assertFalse ( provider . getReadEncryptionInformation ( SESSION , TEST_TABLE , Optional . empty ( ) ) . isPresent ( ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
isTrue ( true , ( ) -> "Hello" )
assertFalse ( provider . getReadEncryptionInformation ( SESSION , TEST_TABLE , Optional . empty ( ) ) . isPresent ( ) )
assertEquals ( emptyMap ( ) , TransactionConfig . empty ( ) . metadata ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertThat ( functions . resourceLink ( "kenyaemr" , "test.png" ) , is ( "/testing/ms/uiframework/resource/kenyaemr/test.png" ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
isTrue ( true , ( ) -> "Hello" )
assertFalse ( provider . getReadEncryptionInformation ( SESSION , TEST_TABLE , Optional . empty ( ) ) . isPresent ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( emptyMap ( ) , TransactionConfig . empty ( ) . metadata ( ) )
assertNotNull ( sslChannel . getSslSession ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atDay ( 30 ) , LocalDate . of ( 2008 , 6 , 30 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
isTrue ( true , ( ) -> "Hello" )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertEquals ( InternalBookmark . empty ( ) , bookmark )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( emptyMap ( ) , TransactionConfig . empty ( ) . metadata ( ) )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertThat ( STANDARD_REPRESENTATION . toStringOf ( map ) ) . isNull ( )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( "abbdbbd" , "abcdbcd" . replace ( 'c' , 'b' ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . empty ( ) ) )
assertEquals ( "N" , gender . getGender ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertThat ( forLoop . getDescriptor ( ) ) . isSameAs ( descriptor )
assertThat ( forLoop . getDescriptor ( ) ) . isSameAs ( descriptor )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertThat ( forLoop . getDescriptor ( ) ) . isSameAs ( descriptor )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "min= 0.0, max= 1.0" , range1 . toString ( ) )
assertEquals ( "wildIsTheWind" , that . getName ( ) )
isTrue ( true , ( ) -> "Hello" )
assertThat ( workingSet . containsAll ( mocks ) ) . isTrue ( )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertNotNull ( result )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertNotNull ( result )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( test , ZonedDateTime . of ( testLocal2008x06x30x11x30x59x500 . withHour ( 15 ) , ZONE_0100 ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( attribute . toString ( ) ) . isEqualTo ( "XmlAttribute[name='firstName',value='Anakin']" )
assertEquals ( test , ZonedDateTime . of ( testLocal2008x06x30x11x30x59x500 . withHour ( 15 ) , ZONE_0100 ) )
assertEquals ( Integer . valueOf ( 10 - i ) , m . get ( i ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertEquals ( emptyMap ( ) , TransactionConfig . empty ( ) . metadata ( ) )
assertEquals ( expected , Literal ( expected , Integer ( ) ) . getLiteral ( ) )
assertNotNull ( context . createNonStorableInObjectStreamIndirectReference ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( event1 . getSequenceNumber ( ) , concat . getLastSequenceNumber ( ) )
assertEquals ( TEST_DATE_TIME . toOffsetDateTime ( ) , OffsetDateTime . of ( TEST_DATE_TIME . toLocalDateTime ( ) , TEST_DATE_TIME . getOffset ( ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( load . rate ( ) , is ( 30L ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( load . rate ( ) , is ( 30L ) )
assertThat ( load . rate ( ) , is ( 30L ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertThat ( t . getName ( ) , is ( "maven-surefire-plugin@NotThreadSafe" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertThat ( t . getName ( ) , is ( "maven-surefire-plugin@NotThreadSafe" ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertThat ( t . getName ( ) , is ( "maven-surefire-plugin@NotThreadSafe" ) )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertThat ( repository . getOne ( aliceSmith . getId ( ) ) ) . isSameAs ( aliceSmith )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( snapshot . remainingBytes ( ) ) . isNotPresent ( )
assertThat ( database . getTablesMap ( ) . get ( "playlists" ) . getPrimaryColumns ( ) . size ( ) ) . isGreaterThanOrEqualTo ( 1 )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertEquals ( "Number of port did not match" , 1 , target . ports ( ) . size ( ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( DateTimeFormatter . BASIC_ISO_DATE . format ( test ) , "20080603" )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( dom , DayOfMonth . from ( dom ) )
assertEquals ( dom , DayOfMonth . from ( dom ) )
assertEquals ( "dbms" , dbmsIdentifier . getDbmsId ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertNull ( data . get ( "foo" , String . class ) )
assertEquals ( "A1" , cache . get ( "a" ) )
assertEquals ( expected , input )
assertEquals ( expected , input )
assertNull ( dataLookup . lookup ( mockEvent , "ignored" ) )
assertThatIterator ( iterator ) . isEqualTo ( iterator )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertNull ( test . notAnnotatedInstance )
assertThat ( provider . getValue ( context ) , is ( Locale . getDefault ( ) ) )
assertThatIterator ( iterator ) . isEqualTo ( iterator )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
assertEquals ( DefaultISupportManager . class . getSimpleName ( ) + " ()" , this . getManager ( ) . toString ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( Amounts . zero ( currencyCode ) ) . isEqualToComparingFieldByField ( new Amount ( BigDecimal . ZERO , currencyCode ) )
assertThat ( asList ( getFirst ( ) , getSecond ( ) ) . getStackSize ( ) , is ( 2 ) )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertEquals ( i , e . getSource ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( "not matched" , new Integer ( 4 ) , stringIndex ( input , "A" , 1 ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
assertEquals ( twoDollars , oneDollar . multiply ( 2 ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( amt . abs ( ) ) . isSameAs ( amt )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertNotNull ( gpf )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertNotNull ( gpf )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertThat ( amt . abs ( ) ) . isSameAs ( amt )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertNotNull ( gpf )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertNotNull ( gpf )
assertNotNull ( other )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( NumberUtils . stripTrailingDecimalZeros ( null ) ) . isNull ( )
assertNotNull ( other )
assertEquals ( BigDecimal . valueOf ( 234 ) , GBP_2_34 . getAmountMinor ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( f . toString ( ) , "" )
assertEquals ( f . toString ( ) , "" )
assertEquals ( "GBP" , test . toString ( ) )
assertEquals ( test . toString ( ) , expected )
assertEquals ( 0 , val . count ( ) )
assertEquals ( f . toString ( ) , "" )
assertEquals ( f . toString ( ) , "" )
assertThat ( info . getTemplateTypeNames ( ) ) . isEqualTo ( typeNames )
assertEquals ( "x.y" , resolver . toString ( ) )
GAssert . assertEquals ( expected , actual )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotNull ( dbInfo )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertEquals ( obj , SerializationUtils . clone ( obj ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertNotNull ( dbInfo )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertEquals ( obj , SerializationUtils . clone ( obj ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertNotNull ( bulk )
assertEquals ( "LINUX.26.0" , new PmId ( 0xf006800 ) . toString ( ) )
assertEquals ( "LINUX.26.0" , new PmId ( 0xf006800 ) . toString ( ) )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertEquals ( "LINUX.26.0" , new PmId ( 0xf006800 ) . toString ( ) )
assertEquals ( "LINUX.26.0" , new PmId ( 0xf006800 ) . toString ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( money ( "10.00" , USD ) , account . getBalance ( ) )
assertEquals ( money ( "10.00" , USD ) , account . getBalance ( ) )
assertThat ( tableMetadata . customMetadataObject ( "custom-key" , Integer . class ) , is ( Optional . of ( 123 ) ) )
assertThat ( CodeBlock . of ( "$L" , value ) . toString ( ) ) . isEqualTo ( "foo" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertNull ( new TypeFacility ( ) . convertToRuntimeType ( ( Clob ) null ) )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( "GBP" , test . toString ( ) )
assertThat ( httpResponse . getStatus ( ) ) . isEqualTo ( HTTP_INTERNAL_ERROR )
assertThat ( httpResponse . getStatus ( ) ) . isEqualTo ( HTTP_INTERNAL_ERROR )
assertThat ( buf . toString ( ) , is ( equalTo ( "\t\tfoo;\r\n" ) ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "BRBY0024" , brby0024 . getRegel ( ) . getCode ( ) )
assertEquals ( NodeDAOImpl . N_NAME , result )
assertThat ( buf . toString ( ) , is ( equalTo ( "\t\tfoo;\r\n" ) ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "BRBY0024" , brby0024 . getRegel ( ) . getCode ( ) )
assertEquals ( NodeDAOImpl . N_NAME , result )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( "x.y" , resolver . toString ( ) )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( test . atMonth ( Month . JUNE ) , YearMonth . of ( 2008 , 6 ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertThat ( httpResponse . getStatus ( ) ) . isEqualTo ( HTTP_INTERNAL_ERROR )
assertThat ( httpResponse . getStatus ( ) ) . isEqualTo ( HTTP_INTERNAL_ERROR )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertNotNull ( instance )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( "x.y" , resolver . toString ( ) )
assertThat ( minimal ( ) . toBuilder ( ) . build ( ) ) . isEqualTo ( minimal ( ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertEquals ( annotation , annotationView . getModel ( ) )
assertEquals ( JDK_GBP , test . toCurrency ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( LocalDate . of ( 2016 , 1 , 9 ) , yw . adjustInto ( date ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( LocalDate . of ( 2016 , 1 , 9 ) , yw . adjustInto ( date ) )
assertEquals ( LocalDate . of ( 2016 , 1 , 9 ) , yw . adjustInto ( date ) )
assertEquals ( "" , cut . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , cut . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotNull ( bulk )
assertEquals ( "GBP" , test . getCode ( ) )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertNotNull ( factory )
assertNotNull ( factory )
assertNotNull ( factory )
assertEquals ( 51 , IndexedColors . GOLD . getIndex ( ) )
assertNotNull ( factory )
assertNotNull ( factory )
assertEquals ( 51 , IndexedColors . GOLD . getIndex ( ) )
assertNotNull ( factory )
assertNotNull ( factory )
assertNotNull ( factory )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertNotNull ( bulk )
assertNotNull ( factory )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotNull ( bulk )
assertNotNull ( trie . find ( "apple" ) )
assertNotNull ( trie . find ( "apple" ) )
assertNotNull ( trie . find ( "apple" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertNotNull ( factory )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( test . withDayOfMonth ( 30 ) , test )
assertEquals ( test . withDayOfMonth ( 30 ) , test )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertThat ( toString ( builder ) , containsString ( "NO TESTS RAN" ) )
assertThat ( zeroDecimal , is ( SqlTypes . decimal ( 3 , 2 ) ) )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotNull ( bulk )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNull ( capacity ( ) . apply ( item ) )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertEquals ( expected , actual )
assertEquals ( RevObject . TYPE . FEATURETYPE , featureType . getType ( ) )
assertEquals ( RevObject . TYPE . FEATURETYPE , featureType . getType ( ) )
assertEquals ( RevObject . TYPE . FEATURETYPE , featureType . getType ( ) )
assertEquals ( RevObject . TYPE . FEATURETYPE , featureType . getType ( ) )
assertEquals ( RevObject . TYPE . FEATURETYPE , featureType . getType ( ) )
assertNotNull ( bulk )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP" , test . getCode ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
GAssert . assertEquals ( expected , actual )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertNotNull ( namesrvConfig )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertTrue ( pollingLookupFactory . close ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( 51 , IndexedColors . GOLD . getIndex ( ) )
assertEquals ( 51 , IndexedColors . GOLD . getIndex ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertThat ( new LogstashBasicMarker ( "m1" ) . getName ( ) ) . isEqualTo ( "m1" )
assertEquals ( "" , buf . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . field ( null , "foo" ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertEquals ( domain , ApiSite . valueOf ( apiSite ) . getDomain ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertFalse ( getDatabase ( ) . supportsInitiallyDeferrableColumns ( ) )
assertNotNull ( fooInstance . get ( ) )
assertThat ( settings . getDebugFlags ( ) , equalTo ( ImmutableList . of ( "blah" ) ) )
assertNotNull ( toString )
assertNotNull ( toString )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertThat ( selectedValues ( ) ) . isEqualTo ( array ( "one" , "two" ) )
assertThat ( selectedValues ( ) ) . isEqualTo ( array ( "one" , "two" ) )
assertThat ( selectedValues ( ) ) . isEqualTo ( array ( "one" , "two" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( 7 , Num . create ( 5 ) . add ( Num . create ( 2 ) ) . value ( ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( REQUEST ) )
assertThat ( args . text ( ) ) . isEqualTo ( "" )
assertThat ( args . text ( ) ) . isEqualTo ( "" )
assertEquals ( expectedOptions , actualOptions )
assertNull ( options . getOptions ( ) . get ( "size" ) )
assertNull ( rp )
assertTrue ( event instanceof BeginOutboundMessageEvent )
assertEquals ( "format3Args" , "0B" , sb . toString ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertNotNull ( instance )
assertNull ( community . evaluate ( null ) )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
Truth . assertThat ( pagedCallable . toString ( ) ) . contains ( "paged" )
assertEquals ( "" , result )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( str , testList . getLast ( ) )
assertEquals ( str , testList . getLast ( ) )
assertEquals ( "[1, 2, 4]" , result . toString ( ) )
assertEquals ( "[1, 2, 4]" , result . toString ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertNotNull ( date1 )
assertEquals ( 482196050052L , date . getTime ( ) )
assertNotNull ( instance )
assertEquals ( 482196050052L , date . getTime ( ) )
assertEquals ( "{\"c\":2,\"d\":4}" , result )
assertEquals ( "{\"c\":2,\"d\":4}" , result )
assertEquals ( "Sun, 06 Nov 1994 08:49:37 GMT" , format ( DATE ) )
assertEquals ( "" , user . getFullName ( ) )
assertEquals ( "" , user . getFullName ( ) )
assertThat ( OutputStreamFormater . spaces ( 20 ) . length ( ) , is ( 20 ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
hasText ( "s" , "has text" )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( expected , actual )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
assertEquals ( expected , actual )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
hasText ( "s" , "has text" )
assertThat ( "Returned options are not the expected" , packet . getOptions ( ) , is ( equalTo ( options ) ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertNull ( appEvent . getProperty ( "foo" ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertEquals ( val , instance . getCaption ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
hasText ( "s" , "has text" )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertThat ( systemResourceTable . getResourceId ( new ResName ( "android:id/text1" ) ) ) . isEqualTo ( android . R . id . text1 )
assertThat ( systemResourceTable . getResourceId ( new ResName ( "android:id/text1" ) ) ) . isEqualTo ( android . R . id . text1 )
assertThat ( ConfigurationUtils . tryGetGlobalProperty ( TEST_PROPERTY_NAME ) ) . isNull ( )
assertEquals ( "test" , txt . getData ( ) )
assertEquals ( ByteBuffer . wrap ( text . getBytes ( ) ) , TextUtil . getByteBuffer ( text ) )
assertNull ( w )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertEquals ( "" + input , instance . evaluate ( input ) . getText ( ) )
assertEquals ( SIMPLE_PROPERTY_VALUE , _standardProperties . getProperty ( SIMPLE_PROPERTY_NAME ) )
assertTrue ( String . format ( "geoPos at <%d> is invalid" , i ) , geoPos . isValid ( ) )
assertTrue ( String . format ( "geoPos at <%d> is invalid" , i ) , geoPos . isValid ( ) )
assertNotNull ( classUnderTest . getColumnName ( 0 ) )
assertNotNull ( classUnderTest . getColumnName ( 0 ) )
assertThat ( jsonRepresentation . arrayGet ( 0 ) , is ( not ( nullValue ( ) ) ) )
assertThat ( jsonRepresentation . arrayGet ( 0 ) , is ( not ( nullValue ( ) ) ) )
assertThat ( jsonRepresentation . arrayGet ( 0 ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "000102FE" , ByteBufferDumper . toHex ( bb ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertNull ( AcsURLEncoder . hexEncode ( null ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertNotNull ( path )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( LocalizedOptimFormats . UNABLE_TO_SOLVE_SINGULAR_PROBLEM , e . getSpecifier ( ) )
assertThatPath ( "/test" ) . containsBytes ( bytes )
assertEquals ( "Did not get expected result." , expected , result )
assertEquals ( "Did not get expected result." , expected , result )
assertEquals ( "Did not get expected result." , expected , result )
assertThat ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) ) . isFalse ( )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertEquals ( "" , ClassPathLoader . stripCommentAndWhitespace ( "" ) )
assertEquals ( "get [" + i + ']' , values [ i + OFFSET ] , test . get ( i ) , EPSILON )
assertEquals ( ByteUtils . toHexString ( ByteUtils . cutLeadingNullBytes ( testData ) ) , "0102030405060708090A" )
assertEquals ( ByteUtils . toHexString ( ByteUtils . cutLeadingNullBytes ( testData ) ) , "0102030405060708090A" )
assertEquals ( ByteUtils . toHexString ( ByteUtils . cutLeadingNullBytes ( testData ) ) , "0102030405060708090A" )
assertEquals ( expected , actual )
assertFalse ( isCalled [ 0 ] )
assertNotEquals ( position2 . getDate ( ) , result )
assertEquals ( "a-z" , bitSet . characters ( ) )
assertNull ( impp . getHandle ( ) )
assertNull ( "Null expected." , byteArrayParam . getValue ( ) )
assertEquals ( "a-z" , bitSet . characters ( ) )
assertNull ( impp . getHandle ( ) )
assertEquals ( obj , SerializationUtils . clone ( obj ) )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertNotNull ( HttpClient . stream ( this . url ) )
assertNotNull ( HttpClient . stream ( this . url ) )
assertEquals ( "United States" , CAMEOCode . getActorDescription ( "USA" ) )
assertEquals ( "United States" , CAMEOCode . getActorDescription ( "USA" ) )
assertEquals ( "Testing" , s )
assertEquals ( "Node has not been added to target document." , 1 , doc . getElementsByTagName ( tagName ) . getLength ( ) )
assertEquals ( "Actual and expected values should be the same." , builderExpected , builderExpected . builder ( ) )
assertEquals ( "Actual and expected values should be the same." , builderExpected , builderExpected . builder ( ) )
assertThat ( p . getProperty ( "testSystemProperty" ) ) . isEqualTo ( "true" )
assertTrue ( array == new EuclideanIntegerPoint ( array ) . getPoint ( ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertFalse ( branchReportService . isReportDataPresentForRundate ( DateUtils . getDate ( 2008 , Calendar . JANUARY , 1 ) ) )
assertFalse ( branchReportService . isReportDataPresentForRundate ( DateUtils . getDate ( 2008 , Calendar . JANUARY , 1 ) ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Did not get expected result." , expected , result )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertThat ( "Element has uncorrect value." , index . get ( 1L ) , equalTo ( 1L ) )
assertEquals ( new Integer ( 3 ) , get ( f ) )
assertTrue ( getT ( ) . equals ( c ) )
assertTrue ( Vector3 . of ( 10 , 2 , 3 ) . epsilonEquals ( v ) )
assertArrayEquals ( expectedSorted , data )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertEquals ( 23.05 , result , 0 )
TestCase . assertEquals ( 2.0 / Math . PI , v )
assertEquals ( expected , result )
UnitTestUtils . assertEquals ( "" , expected , actual , 0d )
UnitTestUtils . assertEquals ( "" , expected , actual , 0d )
assertEquals ( expected , y [ i ] , 1e-7d )
assertEquals ( expected , y [ i ] , 1e-7d )
assertEquals ( expected , y [ i ] , 1e-7d )
assertEquals ( expected , y [ i ] , 1e-7d )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertEquals ( expected , y [ i ] , 1e-7d )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertTrue ( expected . equals ( new Matrix2f ( 2 , 3 , 5 , 7 ) . positiveX ( new Vector2f ( ) ) , 0.001f ) )
assertEquals ( shouldBe , rslt )
assertThat ( new HardMediumSoftBigDecimalScoreDefinition ( ) . getLevelsSize ( ) ) . isEqualTo ( 3 )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertTrue ( ssr . getStopwords ( StopwordList . SMART ) . contains ( "the" ) )
assertTrue ( ssr . getStopwords ( StopwordList . SMART ) . contains ( "the" ) )
assertTrue ( ssr . getStopwords ( StopwordList . SMART ) . contains ( "the" ) )
assertTrue ( ssr . getStopwords ( StopwordList . SMART ) . contains ( "the" ) )
assertEquals ( list . get ( i ) , polygon . get ( i ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( shouldBe , rslt )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertEquals ( "nulla" , RomanNumbersUtils . toRoman ( 0 ) )
assertThat ( RomanProvider . toRoman ( 0 ) , equalTo ( "0" ) )
assertThat ( RomanProvider . toRoman ( 0 ) , equalTo ( "0" ) )
assertEquals ( "JOHN DOE" , name . toUpperCase ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "casuser" , result )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( string )
assertNull ( string )
assertEquals ( "jpg" , instance . getPathExtension ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( 0 , rootSerializer . serialize ( scbMap ) . length )
assertEquals ( "Did not get expected result." , expected , result )
assertEquals ( "Did not get expected result." , expected , result )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( options . enabled , "false" )
assertTrue ( si . getExported ( ) instanceof RemoteInputStream )
assertEquals ( ids . getInt ( i ) , myEnumerator . catchCorruption ( new CorruptAndEnumerateAfter ( value ) ) . intValue ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( Json . TRUE , object . get ( "foo" ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertNotNull ( def )
fail ( )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertEquals ( "org.apache.logging.log4j.LogManagerTest$1" , LOGGER . getName ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( url , sds . getUrl ( ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( expected , actual )
assertEquals ( "" + i , map . get ( "" + i ) )
assertNotNull ( streamingSheet . getReader ( ) )
assertArrayEquals ( "Inconsistent writes?" , content , outputStream . getContents ( ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertEquals ( null , ringBuffer . get ( 0 ) )
assertArrayEquals ( "Inconsistent writes?" , content , outputStream . getContents ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( results . get ( i ) , norm . normalise ( "arxiv" , tests . get ( i ) ) )
assertEquals ( key , hc . getKey ( ) )
assertEquals ( Json . TRUE , object . get ( "foo" ) )
assertThat ( IterableUtil . nonNullElementsIn ( c ) ) . isEmpty ( )
fail ( )
assertEquals ( p , is . readIdPath ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertNull ( value )
assertNull ( customer )
assertNull ( customer )
assertNull ( value )
testInitGeneric ( null , dataConfig , status -> assertThat ( status . getStatus ( ) , is ( equalTo ( ThingStatus . ONLINE ) ) ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertNotNull ( result )
assertEquals ( "r_10:$v" , t . generate ( ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertTrue ( configuration != null )
assertThat ( configuration . getUsername ( ) ) . isNull ( )
assertTrue ( result . getBounds ( ) . equals ( nonEmpty . getBounds ( ) ) )
assertEquals ( tree . getRoot ( ) . getChildren ( ) . size ( ) , 3 )
assertEquals ( "alpha.2" , v2 . toString ( ) )
assertEquals ( tree . getRoot ( ) . getChildren ( ) . size ( ) , 3 )
assertEquals ( "alpha.2" , v2 . toString ( ) )
assertThat ( configuration . getUsername ( ) ) . isNull ( )
assertEquals ( expectedPath , res )
assertEquals ( expectedResult , class1 . testCollectionLiteralExp01 ( ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertTrue ( configuration != null )
assertTrue ( array == new EuclideanIntegerPoint ( array ) . getPoint ( ) )
assertTrue ( a . tagName ( ) . equals ( "P" ) )
assertEquals ( divideOne , multiplyOne )
assertThat ( e . getMessage ( ) , new StringContains ( "Unknown component name: 'unavailable'" ) )
assertEquals ( "foo" , Utils . inputStreamToString ( Utils . stringToInputStream ( "foo" ) ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( 0 , rootSerializer . serialize ( scbMap ) . length )
assertEquals ( "Preface" , text )
assertEquals ( "Preface" , text )
assertEquals ( "Hello Anon" , page . getContent ( ) )
assertEquals ( "Hello Anon" , page . getContent ( ) )
assertEquals ( "Hello Anon" , page . getContent ( ) )
assertEquals ( "1234\nt5678" , extractedText )
assertEquals ( "Preface" , text )
assertNull ( output )
assertEquals ( response , "doge" )
assertNull ( output )
assertEquals ( response , "doge" )
assertNull ( output )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertNull ( output )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertNull ( password )
assertEquals ( "Preface" , text )
assertEquals ( "Preface" , text )
assertEquals ( "el_group" , group . getLinkStyle ( ) )
assertEquals ( "el_group" , group . getLinkStyle ( ) )
assertEquals ( "el_group" , group . getLinkStyle ( ) )
assertEquals ( "Pname Dname Email Address" , txt )
assertEquals ( result , origText )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertThat ( name . toSnakeName ( ) , is ( "one_two_three_four" ) )
assertEquals ( reference , test )
assertEquals ( tropo . text ( ) , "{\"tropo\":[]}" )
assertEquals ( JoinType . LEFT , clause . getJoinType ( ) )
assertEquals ( parent , scope . getParent ( ) )
assertEquals ( abstractPipelineExtension , ap . getNext ( ) )
assertEquals ( abstractPipelineExtension , ap . getNext ( ) )
assertEquals ( abstractPipelineExtension , ap . getNext ( ) )
assertEquals ( abstractPipelineExtension , ap . getNext ( ) )
assertEquals ( abstractPipelineExtension , ap . getNext ( ) )
assertEquals ( ( long ) TEST_CASE_1_RESULT , crc . getValue ( ) )
assertNull ( value )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "big integer 1" , value . toString ( ) )
assertEquals ( "big integer 1" , value . toString ( ) )
assertEquals ( "big integer 1" , value . toString ( ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "big integer 1" , value . toString ( ) )
assertNotNull ( field )
assertNotNull ( field )
assertNotNull ( field )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertNull ( client . invokeOperation ( objectName , "returnNull" , new String [ 0 ] ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( 21 , NDMath . sum ( a ) , 0.001 )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( 21 , NDMath . sum ( a ) , 0.001 )
assertArrayEquals ( "the two arrays are not equal" , expected , input )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertEquals ( "Unrecognized alephseqLineType parameter value: 'WITHOUT'" , exception . getMessage ( ) )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "format3Args" , "0B" , sb . toString ( ) )
assertEquals ( "format3Args" , "0B" , sb . toString ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( response , "doge" )
assertEquals ( "XXX-00001" , numerator . format ( BigInteger . ONE ) )
assertEquals ( CompilationResult . SKIPPED , compiler . compile ( sourceRoots , outputClassDirectory ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
hasText ( "s" , "has text" )
assertNull ( document )
assertEquals ( "MBTiles" , mbtiles . name ( ) )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertNotNull ( device )
assertNotNull ( device )
assertNotNull ( device )
assertNotNull ( device )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( joe , deserialized )
assertEquals ( "initial-count=0 (c=10,l=4)(c=1,l=0)(c=2,l=8)" , writer . countsAsText ( ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertFalse ( runOnContextInvoked )
assertEquals ( "\"bob\"" , writer . toString ( ) )
assertEquals ( "\"bob\"" , writer . toString ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertTrue ( true )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertEquals ( response , "doge" )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertThat ( writer . toString ( ) , is ( "nullnull" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( rsmd_Statement . getColumnName ( i ) , jdbcRsmd_PreparedStmt . getColumnName ( i ) )
assertEquals ( "A\nAA\nB\nBB\nC\nCC\nD\nDD" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "A\nB\nX\nC" , text )
assertEquals ( "WA" , text )
assertEquals ( "Hello" , text )
assertEquals ( "Preface" , text )
assertEquals ( "Preface" , text )
assertEquals ( "Preface Preface " , text )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertNull ( locator . getSourceFile ( "org/jacoco" , "example" ) )
assertTrue ( ssr . getStopwords ( StopwordList . SMART ) . contains ( "the" ) )
assertEquals ( 13 , settings . size ( ) )
assertSame ( o , ParamChecker . notNull ( o , "o" ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertSame ( collection , collection . asSynchronized ( ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "Producer" , r . getInfo ( ) . get ( "Producer" ) , Document . getVersion ( ) )
assertEquals ( "initial-count=0 (c=10,l=4)(c=1,l=0)(c=2,l=8)" , writer . countsAsText ( ) )
assertThat ( p . getProperty ( "testSystemProperty" ) ) . isEqualTo ( "true" )
assertThat ( p . getProperty ( "testSystemProperty" ) ) . isEqualTo ( "true" )
assertThat ( p . getProperty ( "testSystemProperty" ) ) . isEqualTo ( "true" )
assertNotNull ( TimeSpan . LAST_7_DAYS . toTimeRange ( 0 ) )
assertFalse ( OrRetryCondition . create ( ) . shouldRetry ( RetryPolicyContexts . EMPTY ) )
assertEquals ( testJson , indexedRecord . get ( 0 ) )
assertEquals ( testJson , indexedRecord . get ( 0 ) )
assertThat ( AwsEndpointProviderUtils . disableHostPrefixInjection ( attrs ) ) . isFalse ( )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertEquals ( "1" , list . get ( 0 ) )
assertThat ( actual ) . isSameAs ( expected )
assertFalse ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertEquals ( property , StaticClass . PROPERTY )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( parent , scope . getParent ( ) )
assertEquals ( parent , scope . getParent ( ) )
assertEquals ( Vector . of ( 4 , 5 ) , Arrayz . parse ( "[[1, 2], [4, 5], [7, 8]]" ) . slice ( 1 ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( expected , target )
assertNotNull ( p . parse ( "//a" ) )
assertNotNull ( p . parse ( "//a" ) )
assertNotNull ( p . parse ( "//a" ) )
assertNotNull ( p . parse ( "//a" ) )
assertNotNull ( rb )
assertNotNull ( rb )
assertEquals ( "NNNNNNNNNNNNN" , S ( b . getSequence ( "test" ) . getBases ( ) ) )
assertNotNull ( rb )
assertEquals ( "asdf   2nnfdf" , normalizer . normalize ( "asdf #hasdk23 2nnfdf" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( field , criterion . getField ( ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertTrue ( tempFile . getName ( ) . endsWith ( ".tmp" ) )
assertThat ( accessor . get ( fooProperty ) ) . isNull ( )
assertThat ( document . getIdentifier ( ) ) . isNotNull ( )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertThat ( document . getIdentifier ( ) ) . isNotNull ( )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertThat ( document . getIdentifier ( ) ) . isNotNull ( )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertNotNull ( PDIImportUtil . loadXMLFrom ( trans ) )
assertEquals ( "test" , charset . name ( ) )
assertNotNull ( rb )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertNull ( "Null expected." , byteArrayParam . getValue ( ) )
assertNotNull ( rb )
assertNotNull ( rb )
assertThat ( query . valueCategory ( ) ) . isEqualTo ( ValueCategory . NO_CATEGORY )
assertThat ( subject . width ( ) , is ( nullValue ( ) ) )
assertThat ( subject . width ( ) , is ( nullValue ( ) ) )
assertThat ( subject . width ( ) , is ( nullValue ( ) ) )
assertEquals ( Long . valueOf ( threshold ) , Long . valueOf ( circuit . getThreshold ( ) ) , "Wrong value of threshold" )
assertThat ( subject . width ( ) , is ( nullValue ( ) ) )
assertNull ( lookup . lookup ( "X" ) )
assertNull ( array )
assertNull ( array )
assertNull ( array )
assertNull ( array )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertThat ( underTest . getConfigPath ( ) ) . isEqualTo ( "ditto" )
assertEquals ( expectedSolution , newSolution )
assertNotNull ( rb )
fail ( )
assertNull ( new App ( ) . parse ( args ) )
assertNull ( new App ( ) . parse ( args ) )
assertNull ( new App ( ) . parse ( args ) )
assertEquals ( "RSA" , clonedCertificate . getPublicKeyAlgorithm ( ) )
assertNull ( obj )
assertNull ( MethodsRateLimits . lookupRateLimitTier ( "foo.bar" ) )
assertNull ( MethodsRateLimits . lookupRateLimitTier ( "foo.bar" ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertEquals ( 0x0102 , fixture . readUnsignedShort ( ) )
assertNull ( Version . lookup ( s ) )
assertTrue ( result )
assertTrue ( ListUtils . defaultIfNull ( null , Collections . emptyList ( ) ) . isEmpty ( ) )
assertEquals ( first . not ( ) , builder . getValue ( ) )
assertThat ( underTest . getLabel ( ) , is ( DOCUMENT_LABEL ) )
assertEquals ( firstId , id2 . getParentId ( ) )
assertThat ( underTest . getLabel ( ) , is ( DOCUMENT_LABEL ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( tester . request . getParameter ( "aaa" ) , is ( "111" ) )
assertThat ( tester . request . getParameter ( "aaa" ) , is ( "111" ) )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertEquals ( params , facet . getParams ( ) )
assertNotNull ( ci )
assertEquals ( A + B + A + B , Formatting . repeat ( A + B , 2 ) )
assertThat ( name . toSnakeName ( ) , is ( "one_two_three_four" ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertNotNull ( path )
assertNull ( AcsURLEncoder . hexEncode ( null ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertArrayEquals ( new byte [ ] { JBBPCompiler . CODE_VAR , 0 } , compiled )
assertArrayEquals ( new byte [ ] { JBBPCompiler . CODE_VAR , 0 } , compiled )
assertArrayEquals ( new String [ ] { } , scriptParams )
assertThatThrownBy ( ( ) -> factory . getMetadataReader ( getClass ( ) . getName ( ) ) ) . isInstanceOf ( FileNotFoundException . class )
assertThat ( addDateField ( new Date ( ) , Calendar . DATE , - 1 ) , DateMatchers . isYesterday ( ) )
assertEquals ( date , StaticFileUtils . getDate ( "2011021513" , StaticFileUtils . filedf ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertThat ( func . getName ( ) , is ( ProximityFunction . FUNCTION_NAME . getName ( ) ) )
assertEquals ( witnessList , partList )
assertThat ( invocations ) . startsWith ( "visitStart" ) . endsWith ( "visitEnd" ) . contains ( "visitFileHeader" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertEquals ( "Did not get expected result." , expected , result )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertThat ( string ( out . toByteArray ( ) ) ) . isEqualTo ( "Prefix: Hello, newline.\n" )
assertEquals ( "" , user . getFullName ( ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertEquals ( "" , user . getFullName ( ) )
assertNull ( jobName )
assertThat ( map . put ( 123 , "abc" ) ) . isNull ( )
assertThat ( integer . get ( ) ) . isEqualTo ( 10 )
assertThat ( integer . get ( ) ) . isEqualTo ( 10 )
hasText ( "s" , "has text" )
assertNotNull ( editCap )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "a" , row . get ( 0 ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertTrue ( StringUtils . join ( testList ) . equals ( "t, a, j, o" ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertThat ( "Invalid results." , currentVal , equalTo ( ImmutableList . of ( "80" ) ) )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertThat ( matcher . matches ( 1.0 ) ) . isFalse ( )
assertTrue ( QueryItemHelper . isItemOptionEqualToRowContent ( "1.0" , Double . parseDouble ( "1.0" ) ) )
assertTrue ( QueryItemHelper . isItemOptionEqualToRowContent ( "1.0" , Double . parseDouble ( "1.0" ) ) )
assertTrue ( QueryItemHelper . isItemOptionEqualToRowContent ( "1.0" , Double . parseDouble ( "1.0" ) ) )
assertTrue ( QueryItemHelper . isItemOptionEqualToRowContent ( "1.0" , Double . parseDouble ( "1.0" ) ) )
assertTrue ( QueryItemHelper . isItemOptionEqualToRowContent ( "1.0" , Double . parseDouble ( "1.0" ) ) )
assertEquals ( expected , result )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "iso-8859-1" , DataUtil . getCharsetFromContentType ( "text/html; charset=charset=iso-8859-1" ) )
assertNull ( DataUtil . getCharsetFromContentType ( "text/html; charset=$HJKDF§$/(") )
assertTrue ( threw )
assertNotNull ( doc )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertEquals ( " One=\"One\" Two=\"Two\"" , a . html ( ) )
assertEquals ( "#comment" , comment . nodeName ( ) )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertNotNull ( xmlDeclaration )
assertEquals ( "Foo" , el . id ( ) )
assertEquals ( "Foo" , el . id ( ) )
assertEquals ( "Hello There. Here is some text." , text )
assertEquals ( "Hello there.   What's \n\n  that?" , doc . text ( ) )
assertEquals ( 8 , form . elements ( ) . size ( ) )
assertEquals ( "test=foo" , form . formData ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( "http://example.com/one/two.html" , a1 . absUrl ( "href" ) )
assertEquals ( "One <em>foo</em> three" , p . html ( ) )
assertEquals ( "<div><p><#text></#text></p></div>" , accum . toString ( ) )
assertEquals ( singletonAttributes ( ) , getAttributesCaseInsensitive ( inputElement ) )
assertEquals ( new String ( Character . toChars ( 135361 ) ) , t . outerHtml ( ) . trim ( ) )
assertEquals ( "&wr_id=123&mid-size=true&ok=&wr" , els . first ( ) . attr ( "href" ) )
assertEquals ( "<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>" , doc . selectFirst ( "p" ) . outerHtml ( ) )
assertEquals ( "" , doc . text ( ) )
assertEquals ( 0 , parser . getErrors ( ) . size ( ) )
assertEquals ( "<div><a name=\"top\"></a><p id=\"1\">Hello</p></div>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "foo bar baz" , doc . text ( ) )
assertEquals ( "<html><head></head><body>pre <script>inner</script> aft</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "Hello<p>There</p><p>now</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "https://example.net/img.jpg" , el . absUrl ( "src" ) )
assertEquals ( cdata , node . text ( ) )
assertEquals ( 1 , doc . body ( ) . childNodeSize ( ) )
assertEquals ( "Hello < There <&>" , doc . select ( "div" ) . first ( ) . text ( ) )
assertEquals ( h , TextUtil . stripNewlines ( out ) )
assertEquals ( "<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "<html><head><title>One</title></head><frameset><frame><frame></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "gb2312" , doc . select ( "meta" ) . attr ( "charset" ) )
assertEquals ( "<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<span>Hello <div>there</div><span>now</span></span>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( html + "</noscript>" , TextUtil . stripNewlines ( doc . head ( ) . html ( ) ) )
assertEquals ( "<a>Hello <div>there</div><span>now</span></a>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<font>Hello <div>there</div><span>now</span></font>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( "<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>" , doc . body ( ) . html ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( "<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "<td>One</td>\n<td id=\"2\"></td>" , doc . select ( "tr" ) . first ( ) . html ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "<!-- one <script>Blah</script> -->" , doc . select ( "script" ) . first ( ) . data ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "<a href=\"one\" id=\"two\"></a>" , doc . body ( ) . html ( ) )
assertEquals ( "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">" , doc . childNode ( 0 ) . outerHtml ( ) )
assertEquals ( "<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>" , TextUtil . stripNewlines ( node . outerHtml ( ) ) )
assertEquals ( "hidden" , normalizedAttribute )
assertEquals ( "item" , normalizedAttributes . asList ( ) . get ( 0 ) . getKey ( ) )
assertEquals ( "One & Two" , s )
assertEquals ( body , Parser . unescapeEntities ( body , false ) )
assertNotEquals ( p1 , p2 )
assertEquals ( p1 , p2 )
assertEquals ( "(short) 5" , new ValueExp ( Integer . valueOf ( 5 ) , short . class ) . getCode ( ) )
assertEquals ( "(short) 5" , new ValueExp ( Integer . valueOf ( 5 ) , short . class ) . getCode ( ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "Three Two" , tq . remainder ( ) )
assertArrayEquals ( expectedSorted , data )
assertEquals ( "You&I" , els . text ( ) )
assertEquals ( "test" , els . text ( ) )
assertEquals ( "data" , els . text ( ) )
assertEquals ( expectedOutput , doc . childNode ( 0 ) . outerHtml ( ) )
assertEquals ( "<p></p><p></p><div id=\"one\"><span>Two</span></div>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( CharacterReader . readAheadLimit - 1 , errorList . get ( 0 ) . getPosition ( ) )
assertEquals ( 6 , errorList . get ( 0 ) . getPosition ( ) )
assertEquals ( 7 , errorList . get ( 0 ) . getPosition ( ) )
assertEquals ( 5 , errorList . get ( 0 ) . getPosition ( ) )
assertEquals ( Syntax . xml , doc . outputSettings ( ) . syntax ( ) )
assertEquals ( "<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />" , xmlDoc . html ( ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<p>Nice</p><blockquote>Hello</blockquote>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<p>Nice</p><blockquote>Hello</blockquote>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<img alt=\"\">" , cleanHtml )
assertEquals ( "<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a><img src=\"http://example.com/bar\">" , clean )
assertEquals ( "<a href=\"/foo\" rel=\"nofollow\">Link</a><img src=\"/bar\"> <img>" , clean )
assertEquals ( "<a rel=\"nofollow\">Link</a>" , clean )
assertEquals ( "<p class=\"foo\"><a class=\"qux\">link</a></p>" , clean )
assertEquals ( "<p class=\"foo\">One</p>" , clean )
assertEquals ( "<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">" , clean )
assertEquals ( "<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\"> \n<img>" , clean )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "foo" , classVal )
assertEquals ( "Hello there world" , doc . select ( "div > *" ) . text ( ) )
assertEquals ( "<p>Hello</p>\n<p>There</p>" , divs . html ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , TextUtil . stripNewlines ( divs . outerHtml ( ) ) )
assertEquals ( "<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>" , doc . body ( ) . html ( ) )
assertEquals ( "<div>One <a href=\"/\">Two</a></div>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "<p>One two three four</p>" , doc . body ( ) . html ( ) )
assertEquals ( "<div><p></p> <p></p></div>" , doc . body ( ) . html ( ) )
assertEquals ( "<div> jsoup </div>" , doc . body ( ) . html ( ) )
assertEquals ( "<p>Hello <em>there</em> <em>now</em></p>" , doc . body ( ) . html ( ) )
assertEquals ( "<div><p><#text></#text></p></div><div><#text></#text></div>" , accum . toString ( ) )
assertEquals ( 0 , doc . select ( "form" ) . textNodes ( ) . size ( ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertEquals ( "Did not get expected result." , expected , result )
assertEquals ( q , parse . toString ( ) )
assertEquals ( "One" , doc . selectFirst ( "p" ) . text ( ) )
assertEquals ( "Two" , doc . selectFirst ( "p.foo" ) . text ( ) )
assertEquals ( "One" , doc . selectFirst ( "p, div" ) . text ( ) )
assertEquals ( 0 , doc . select ( "mixedCase" ) . size ( ) )
assertEquals ( 1 , doc . select ( "*|mixedCase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "lowercase" ) . size ( ) )
assertEquals ( 1 , doc . select ( "*|lowercase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "mixedCase" ) . size ( ) )
assertEquals ( 1 , doc . select ( "*|mixedCase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "lowercase" ) . size ( ) )
assertEquals ( 1 , doc . select ( "*|lowercase" ) . size ( ) )
assertEquals ( "<div><p><#text></#text></p></div><div><#text></#text></div>" , accum . toString ( ) )
assertEquals ( "<div></div>\n<div>\n There be\n</div>" , doc . select ( "body" ) . html ( ) )
assertEquals ( "<div><p><#text></#text></p>" , accum . toString ( ) )
assertArrayEquals ( expectedBytes , os . toByteArray ( ) )
assertArrayEquals ( expectedBytes , os . toByteArray ( ) )
assertEquals ( t , LocalDate . of ( 2006 , 7 , 15 ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( "Failed to read correct data" , new String ( buf1 , 0 , buf1 . length ) , fileString . substring ( 3000 , 3100 ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) ) . isFalse ( )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) ) . isFalse ( )
assertTrue ( error )
assertEquals ( i , ( ( Integer ) array2 . get ( i ) ) . intValue ( ) )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertEquals ( null , mimeType )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( "a" , s . compress ( "a" ) )
assertEquals ( "a" , s . compress ( "a" ) )
assertEquals ( "a" , s . compress ( "a" ) )
assertEquals ( "a" , s . compress ( "a" ) )
assertEquals ( "a" , s . compress ( "a" ) )
assertEquals ( "a" , s . compress ( "a" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( "a" , a . getName ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "a" , a . getName ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , getClass ( ) . getResource ( "PdfStamperTest/cmp_EmptyOCGs.pdf" ) . getPath ( ) , DEST_FOLDER , "diff_" ) )
assertEquals ( "a" , a . getName ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertThat ( StringExtensions . asNaturalized ( "thisIsACamelCasePhrase" ) , is ( "This Is A Camel Case Phrase" ) )
assertEquals ( "4294967295" , UnsignedNumberUtil . unsignedIntToString ( - 1 ) )
assertThat ( StringExtensions . asNaturalized ( "thisIsACamelCasePhrase" ) , is ( "This Is A Camel Case Phrase" ) )
assertEquals ( INDENT , Formatting . tab ( ) )
assertEquals ( INDENT , Formatting . tab ( ) )
assertEquals ( "test msg" , FormValidation . errorWithMarkup ( "test msg" ) . getMessage ( ) )
assertThat ( StringExtensions . asNaturalized ( "thisIsACamelCasePhrase" ) , is ( "This Is A Camel Case Phrase" ) )
assertEquals ( "test msg" , FormValidation . errorWithMarkup ( "test msg" ) . getMessage ( ) )
assertEquals ( INDENT , Formatting . tab ( ) )
assertEquals ( "[\"greater_than\",1]" , serialized . toString ( ) )
assertFalse ( runOnContextInvoked )
assertFalse ( runOnContextInvoked )
assertFalse ( runOnContextInvoked )
assertEquals ( "test/img/t.png" , CssSyntaxUtils . unpackUrl ( "url(test/img/t.png)" ) )
assertNull ( EscapeUtils . escapeJson ( null ) )
assertEquals ( "test/img/t.png" , CssSyntaxUtils . unpackUrl ( "url(test/img/t.png)" ) )
assertNull ( EscapeUtils . escapeJson ( null ) )
assertNull ( EscapeUtils . escapeJson ( null ) )
assertEquals ( JreVersion . Unsupported , version )
assertEquals ( "test/img/t.png" , CssSyntaxUtils . unpackUrl ( "url(test/img/t.png)" ) )
assertNull ( EscapeUtils . escapeJson ( null ) )
assertEquals ( "test/img/t.png" , CssSyntaxUtils . unpackUrl ( "url(test/img/t.png)" ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertEquals ( Collections . < ASTNode . Block < ? > > emptyList ( ) , parse ( "" ) )
assertEquals ( "21396814.97" , formatter . format ( 21396814.969 ) )
assertEquals ( "21396814.97" , formatter . format ( 21396814.969 ) )
assertEquals ( fn . apply ( "foo" ) , md5 ( ) . hashString ( "foo" , UTF_8 ) . asBytes ( ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertEquals ( "21396814.97" , formatter . format ( 21396814.969 ) )
assertEquals ( "21396814.97" , formatter . format ( 21396814.969 ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertNull ( new TypeFacility ( ) . convertToRuntimeType ( ( Clob ) null ) )
assertNull ( new TypeFacility ( ) . convertToRuntimeType ( ( Clob ) null ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertEquals ( "" , data . get ( "regexp" ) )
assertTrue ( unmodifiableBuffer ( buffer ( 1 ) ) instanceof ReadOnlyChannelBuffer )
assertTrue ( unmodifiableBuffer ( buffer ( 1 ) ) instanceof ReadOnlyChannelBuffer )
assertNotNull ( instance )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertNull ( stack . getImmutableStackOrNull ( ) )
assertNull ( stack . getImmutableStackOrNull ( ) )
assertEquals ( a , ImmutableStack . empty ( ) . push ( a ) . iterator ( ) . next ( ) )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertEquals ( a , ImmutableStack . empty ( ) . push ( a ) . iterator ( ) . next ( ) )
assertEquals ( 1.0 , crossover . crossoverProbability ( ) , EPSILON )
assertEquals ( expected , actual )
assertTrue ( "Untested SourceReferenceTagType: " + type . name ( ) , false )
_SerializationTester . assertEqualsOnRoundtrip ( Can . < String > of ( "hi" , "there" ) )
assertEquals ( "format3Args" , "0B" , sb . toString ( ) )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertNotNull ( sslChannel . getSslSession ( ) )
assertNotNull ( namesrvConfig )
assertEquals ( basedir . getRoot ( ) , container . getBaseDir ( ) . getRoot ( ) )
assertEquals ( "WEBVIEW_0" , driver ( ) . getContext ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertNull ( future . get ( ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertEquals ( t10 . get ( ( byte ) 5 ) , "a" + 5 )
assertEquals ( CAUSE_MESSAGE , result . getMessage ( ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertEquals ( conversable , context . getForWhom ( ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertEquals ( "          ^" , lines . get ( 1 ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertEquals ( conversable , context . getForWhom ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( "Expected and actual values should be the same." , defaultValue , Metrics . getAsString ( metrics , null , defaultValue ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" , "test" ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" , "test" ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" , "test" ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" , "test" ) )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( session . context ( ) . isDirty ( d ) ) . isTrue ( )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertThat ( CollectionUtils . firstIfPresent ( singletonList ( "foo" ) ) ) . isEqualTo ( "foo" )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( 3.0 , v . dotProduct ( Vector . of ( 1 , 2 , 3 , 4 ) ) , 0.0 )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertEquals ( 3.0 , v . dotProduct ( Vector . of ( 1 , 2 , 3 , 4 ) ) , 0.0 )
assertEquals ( Vector . of ( 1 , 0 , 0 ) , v )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertEquals ( expected , actual , 0.0 )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( list , out )
assertThat ( actual ) . isSameAs ( expected )
assertEquals ( sut . get ( 3 ) , "4" )
assertEquals ( sut . get ( 3 ) , "4" )
assertEquals ( sut . get ( 3 ) , "4" )
assertThat ( actual ) . isSameAs ( expected )
assertThat ( actual ) . isSameAs ( expected )
assertEquals ( expected , Reference . decode ( uri ) )
assertEquals ( expected , Reference . decode ( uri ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertNull ( wordAfter )
assertEquals ( "   trim" , StringUtils . trimRight ( "   trim   " ) )
assertNull ( wordAfter )
assertNull ( wordAfter )
assertNull ( wordAfter )
assertEquals ( "   trim" , StringUtils . trimRight ( "   trim   " ) )
assertNull ( wordAfter )
assertEquals ( "file/path/" , StringUtil . trimStart ( "/file/path/" , '/' ) )
assertEquals ( "   trim" , StringUtils . trimRight ( "   trim   " ) )
assertEquals ( "   trim" , StringUtils . trimRight ( "   trim   " ) )
assertThat ( map . put ( 123 , "abc" ) ) . isNull ( )
assertThat ( map . put ( 123 , "abc" ) ) . isNull ( )
assertThat ( map . put ( 123 , "abc" ) ) . isNull ( )
assertThat ( map . put ( 123 , "abc" ) ) . isNull ( )
assertEquals ( "" , TextUtils . convertToSingleLine ( "      " ) )
assertThat ( CollectionUtils . firstIfPresent ( list ) ) . isNull ( )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
assertNull ( VingerafdrukGenerator . maakVingerafdruk ( Collections . < VerschilAnalyseRegel > emptyList ( ) ) )
assertEquals ( 10 , resultSetSize ( methodWatcher . executeQuery ( "select * from" + getPaddedTableReference ( "A" ) ) ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertEquals ( "01tracked" , stringValue )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertNull ( CheckSum . parse ( null ) )
assertNull ( CheckSum . parse ( null ) )
assertNull ( CheckSum . parse ( null ) )
assertNull ( CheckSum . parse ( null ) )
assertNull ( CheckSum . parse ( null ) )
assertNotNull ( result )
assertEquals ( "01tracked" , stringValue )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertTrue ( e . getMessage ( ) . contains ( "Type mismatch" ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertNotNull ( classLoader . loadClass ( DelegatingClassLoaderTest . class . getName ( ) ) )
assertNotNull ( result )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( "US-ASCII" , getFileEncoding ( "ascii.txt" ) )
assertEquals ( "US-ASCII" , getFileEncoding ( "ascii.txt" ) )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "01tracked" , stringValue )
assertNotNull ( result )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertEquals ( "Leeted: S3cr3t" , ui . leetMessage ( "Secret" ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( "1:1" , pair1 . toString ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertEquals ( "1:1" , pair1 . toString ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertThat ( confirmation . getData ( ) , equalTo ( aString ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( message , e . getMessage ( ) )
assertEquals ( e . getMessage ( ) , errorMessage )
assertEquals ( expected , MessageFormatter . format ( arrayOfArray ) )
assertEquals ( "liferayforms" , actualString )
assertEquals ( VERSION . get ( ) , cache . cacheVersion ( ) )
assertEquals ( VERSION . get ( ) , cache . cacheVersion ( ) )
assertEquals ( VERSION . get ( ) , cache . cacheVersion ( ) )
assertEquals ( "Oops! (HTTP 584/InternalServerError)" , e . getMessage ( ) )
assertEquals ( Result . OK , props . afterFormFinishWizard ( repo ) . getStatus ( ) )
assertEquals ( Result . OK , props . afterFormFinishWizard ( repo ) . getStatus ( ) )
assertEquals ( Result . OK , props . afterFormFinishWizard ( repo ) . getStatus ( ) )
assertEquals ( null , execJavaCliParser . getMain ( ) )
assertEquals ( null , execJavaCliParser . getMain ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
fail ( e . toString ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( new Integer ( 3000 ) , dae . getAccountId ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "Oops! (HTTP 584/InternalServerError)" , e . getMessage ( ) )
assertThat ( constraintExpressionScriptContainer . getName ( ) ) . isEqualTo ( "c1" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertEquals ( e . getMessage ( ) , "Unable to load truststore " + INVALID_TRUST_NAME )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertEquals ( "Default name" , name )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( ql . getQuery ( N_FOO ) ) . isEqualTo ( Q_COMPLEX )
assertEquals ( expected , TestUtils . FormattedResult . ResultFactory . toStringUnsorted ( rs ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( "{\"t1\":1651053600000,\"t2\":1651053600.000000000}" , json1 )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( ( Long ) 1000L , stmt . getLimit ( ) )
assertEquals ( SolutionContextListener . solutionPath , solutionContextListener . getRootPath ( ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( "nextval('hibernate_sequence')" , autoIncrement )
assertThat ( builder ) . startsWith ( System . lineSeparator ( ) ) . endsWith ( System . lineSeparator ( ) )
assertEquals ( exp , rc . getReplicaSelector ( ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertNull ( JsUtils . escape ( null ) )
assertEquals ( "col1 = col2" , nativeColumnEqExp . toSQL ( ) )
assertEquals ( "a76cdafc5aa49180c0b22c78d4415c505f9997c54847cec6c623f4cacf6a2811" , HashUtils . getMessageHash ( message ) )
assertNull ( JsUtils . escape ( null ) )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( "\"Foo\",,\"Bar\",\"baz\"\n" , result )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( e . getMessage ( ) , errorMessage )
assertEquals ( e . getMessage ( ) , errorMessage )
assertEquals ( prioExp , prioExp . clone ( ) )
assertEquals ( e . getMessage ( ) , errorMessage )
assertEquals ( TEST_MESSAGE , e . getMessage ( ) )
assertEquals ( 352 , count [ 0 ] )
assertTrue ( "did not find null" , foundNull )
assertEquals ( 2 , count )
assertEquals ( 2 , count )
assertEquals ( 352 , count [ 0 ] )
assertTrue ( "did not find null" , foundNull )
assertEquals ( 2 , count )
assertEquals ( 2 , count )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( 1 , query . getResultList ( ) . size ( ) )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertEquals ( "Expecting 6 rows from join." , 6 , nRows )
assertEquals ( "error.changePassword" , e . getMessageKey ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( expected , built )
assertEquals ( expected , built )
assertEquals ( expected , built )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( caught )
assertTrue ( caught )
assertTrue ( e . getMessage ( ) . contains ( DalAnnotationValidator . VALIDATION_MSG ) )
assertTrue ( true )
assertNotNull ( provider . getVersion ( ) )
assertThat ( retrieved . identifier ( ) ) . isEqualTo ( identifier )
assertThat ( retrieved . identifier ( ) ) . isEqualTo ( identifier )
assertNull ( value )
assertNotNull ( "maven.execution.pom-file was propagated" , System . getProperty ( "maven.execution.pom-file" ) )
assertThat ( props . get ( MessageHelper . APP_PROPERTY_ORIG_ADAPTER ) ) . isEqualTo ( ADAPTER_NAME )
assertNull ( value )
assertThat ( underTest . apply ( headerDefinition . getKey ( ) , "" ) ) . isNull ( )
assertTrue ( ! retrievedIdValues . contains ( application . getId ( ) ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertNull ( array )
assertNull ( array )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertEquals ( expected [ i ] , a . at ( i ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertNotNull ( testObj . getFieldDataManager ( ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( null , ex . getMessage ( ) )
assertNotNull ( "Call to ejb should fail, because http-connector is not valid" , ex )
assertNotSame ( b , GryoMapper . build ( ) )
assertThat ( of ( cache ) . getKeyType ( ) . getTypeName ( ) ) . isEqualTo ( "Object" )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertTrue ( getT ( ) . equals ( c ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotSame ( fixture , copy )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertNotNull ( result )
assertThat ( options . getSnippetType ( ) , is ( SnippetType . UNDERSCORE ) )
assertNotNull ( in )
assertNotNull ( in )
assertEquals ( "[1,2,3,4]" , array . toString ( ) )
assertEquals ( new Member ( "a" , Json . TRUE ) , iterator . next ( ) )
assertFalse ( connected )
assertFalse ( connected )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertEquals ( node , instance . getRealNode ( ) )
assertEquals ( 0 , bc . ixor ( bc3 ) . getCardinality ( ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( "" + i , map . get ( "" + i ) )
assertTrue ( Integer . toString ( i ) , actual == expected [ i ] )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertThat ( value . get ( "user" ) , is ( "pepe" ) )
assertTrue ( records . get ( 0 ) . getContig ( ) == records . get ( 1 ) . getContig ( ) )
assertTrue ( records . get ( 0 ) . getContig ( ) == records . get ( 1 ) . getContig ( ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertEquals ( "[foo]" , spy . toString ( ) )
assertEquals ( "AtMost is not implemented to work with InOrder" , e . getMessage ( ) )
assertFalse ( rule . apply ( new SafeMap ( ) . put ( "numberOfCentchromanPillsDelivered" , "0" ) ) )
assertFalse ( rule . apply ( new SafeMap ( ) . put ( "numberOfCentchromanPillsDelivered" , "0" ) ) )
assertNotNull ( build )
assertThat ( returnedRequest , is ( request ) )
assertThat ( returnedRequest , is ( request ) )
assertThat ( returnedRequest , is ( request ) )
assertThat ( future . get ( ) , is ( value ) )
assertThat ( future . get ( ) , is ( value ) )
assertThat ( envelopeInspector . getMetadataFor ( jsonEnvelope ) , is ( metadata ) )
assertThat ( envelopeInspector . getMetadataFor ( jsonEnvelope ) , is ( metadata ) )
org . junit . Assert . assertEquals ( ( String ) response . getEntity ( ) , 200 , response . getStatus ( ) )
org . junit . Assert . assertEquals ( ( String ) response . getEntity ( ) , 200 , response . getStatus ( ) )
assertTrue ( count > 0 )
assertTrue ( count > 0 )
assertTrue ( count > 0 )
assertTrue ( count > 0 )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertNull ( idl )
assertNull ( idl )
assertNull ( idl )
assertNull ( idl )
assertNull ( idl )
assertThat ( getAsExactMatch ( "text" ) , equalTo ( "^text$" ) )
assertThat ( getAsExactMatch ( "text" ) , equalTo ( "^text$" ) )
assertThat ( CodeBlock . of ( "$L" , value ) . toString ( ) ) . isEqualTo ( "foo" )
assertThat ( byPaddingZeros ( value , 3 ) ) . isEqualTo ( "001" )
assertThat ( byPaddingZeros ( value , 3 ) ) . isEqualTo ( "001" )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertEquals ( "http://example.com/{+foo:2}" , template . getTemplate ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertEquals ( "http://example.com/{+foo:2}" , template . getTemplate ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertTrue ( new File ( System . getProperty ( "storage" ) ) . isDirectory ( ) )
assertEquals ( props . remove ( "MyGenerator" ) , "true" )
assertTrue ( "exception should contain garbage: " + e , e . getMessage ( ) . contains ( "garbage" ) )
assertEquals ( ":" , result )
assertThat ( e . getMessage ( ) , equalTo ( "name may not be empty." ) )
assertEquals ( "MyMessage" , e . getMessage ( ) )
assertEquals ( "MyMessage" , e . getMessage ( ) )
assertEquals ( "MyMessage" , e . getMessage ( ) )
assertThat ( future . get ( ) , is ( value ) )
fail ( )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertEquals ( Msg . code ( 848 ) + "Can not create multiple CodeSystem resources with CodeSystem.url \"http://acme.org\", already have one with resource ID: CodeSystem/" + myExtensionalCsId . getIdPart ( ) , e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertNull ( testClass . getString ( ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertThat ( getNode ( "one == another" , "expr" ) . render ( context ) , is ( ( Object ) true ) )
assertEquals ( schema , schema2 )
assertNull ( protobufData . toConnectData ( schema , null ) )
assertEquals ( "No match for C" , avroTypeException . getMessage ( ) )
assertNull ( protobufData . toConnectData ( schema , null ) )
assertNull ( "The validateArgTypes() method is buggy." , sf . validateArgTypes ( argTypes ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertEquals ( "{}" , ason . toString ( 4 ) )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( "dimensions may not be null" , e . getMessage ( ) )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertThat ( builder . toString ( ) ) . isEqualTo ( "http://localhost/admin?limit=1" )
assertThat ( builder . toString ( ) ) . isEqualTo ( "http://localhost/admin?limit=1" )
assertThat ( builder . toString ( ) ) . isEqualTo ( "http://localhost/admin?limit=1" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( e . getMessage ( ) , "Bad origin URI: Missing authority (host)" )
assertEquals ( "\nWanted at most 1 time but was 2" , e . getMessage ( ) )
assertThat ( response . cookie ( "c" ) , isValue ( responseCookie ( "c" , "d" ) . build ( ) ) )
fail ( e . toString ( ) )
assertThat ( e . path ( ) ) . isEqualTo ( "/storage/movies" )
assertThat ( e . path ( ) ) . isEqualTo ( "/storage/movies" )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "updated results do not match" , returnValue , 3 )
assertEquals ( expected , formattedNumber )
assertEquals ( expected , formattedNumber )
assertEquals ( "sqlTrimmed: " + sqlTrimmed + ", expected: " + expected , expected , sqlTrimmed )
assertEquals ( ( int ) sut . get ( i ) , i )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
assertEquals ( ( double ) i + j , M . get ( i , j ) , eps )
assertEquals ( DateTimeFormatter . ISO_ORDINAL_DATE . format ( test ) , "2008-155" )
assertEquals ( DateTimeFormatter . ISO_ORDINAL_DATE . format ( test ) , "2008-155" )
assertThat ( managedClassNames ) . contains ( PlanningTaskImpl . class . getName ( ) )
assertThat ( managedClassNames ) . contains ( PlanningTaskImpl . class . getName ( ) )
assertThat ( managedClassNames ) . contains ( PlanningTaskImpl . class . getName ( ) )
assertEquals ( "Parameter 0 was not found." , e . getMessage ( ) )
assertNull ( completionResult )
assertNull ( completionResult )
assertEquals ( "" , Base32 . decode ( "" ) )
assertNotNull ( NoPackage . getDefaultInstance ( ) )
assertEquals ( "myFileName" , payLoad . getFileName ( ) )
assertNotNull ( mappingDataStore . getSchema ( typeName ) )
assertNull ( rs )
assertNull ( rs )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( getValue ( ) , is ( sameInstance ( ( Object ) value ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getIdentifierQuoteString ( ) , is ( databaseMetaData . getIdentifierQuoteString ( ) ) )
assertNull ( metaData . getProcedures ( "" , "" , "" ) )
assertNull ( metaData . getProcedureColumns ( "" , "" , "" , "" ) )
assertNull ( metaData . getTableTypes ( ) )
assertNull ( metaData . getColumnPrivileges ( "" , "" , "" , "" ) )
assertNull ( metaData . getTablePrivileges ( "" , "" , "" ) )
assertNull ( metaData . getBestRowIdentifier ( "" , "" , "" , 0 , false ) )
assertNull ( metaData . getVersionColumns ( "" , "" , "" ) )
assertNull ( metaData . getPrimaryKeys ( "" , "" , "" ) )
assertNull ( metaData . getImportedKeys ( "" , "" , "" ) )
assertNull ( metaData . getExportedKeys ( "" , "" , "" ) )
assertNull ( metaData . getCrossReference ( "" , "" , "" , "" , "" , "" ) )
assertNull ( metaData . getTypeInfo ( ) )
assertNull ( metaData . getIndexInfo ( "" , "" , "" , false , false ) )
assertNull ( metaData . getUDTs ( "" , "" , "" , null ) )
assertNull ( metaData . getSuperTypes ( "" , "" , "" ) )
assertNull ( metaData . getSuperTables ( "" , "" , "" ) )
assertNull ( metaData . getAttributes ( "" , "" , "" , "" ) )
assertNull ( metaData . getClientInfoProperties ( ) )
assertNull ( metaData . getFunctions ( "" , "" , "" ) )
assertNull ( metaData . getFunctionColumns ( "" , "" , "" , "" ) )
assertNull ( metaData . getPseudoColumns ( "" , "" , "" , "" ) )
assertTrue ( res . next ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertEquals ( tenantId , connection . getClientInfo ( PhoenixRuntime . TENANT_ID_ATTRIB ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( connection . getClientInfo ( "ClientTags" ) , "c2,c3" )
assertEquals ( "Unexpected number of records returned" , 1000 , count )
assertEquals ( "Unexpected number of records returned" , 1000 , count )
assertEquals ( "Unexpected number of records returned" , 1000 , count )
assertEquals ( "binary data got munged" , DATA_STRING , new String ( dataBytes , "UTF8" ) )
assertEquals ( "binary data got munged" , DATA_STRING , new String ( dataBytes , "UTF8" ) )
assertEquals ( connection . getClientInfo ( "ClientTags" ) , "c2,c3" )
assertEquals ( "test" , e . getAccountId ( ) )
assertEquals ( "Unexpected number of records returned" , 1000 , count )
assertEquals ( "Unexpected number of records returned" , 1000 , count )
assertEquals ( msg . getString ( this . name ) , str )
assertEquals ( msg . getString ( this . name ) , str )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertEquals ( msg . getString ( this . name ) , str )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( FloatUtil . toFloat ( value ) , is ( value ) )
assertThat ( FloatUtil . toFloat ( value ) , is ( value ) )
assertEquals ( "19%" , fdf . format ( 0.19408569 ) )
assertEquals ( "19%" , fdf . format ( 0.19408569 ) )
assertThat ( FloatUtil . toFloat ( value ) , is ( value ) )
assertEquals ( "19%" , fdf . format ( 0.19408569 ) )
assertEquals ( "19%" , fdf . format ( 0.19408569 ) )
assertEquals ( "19%" , fdf . format ( 0.19408569 ) )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertEquals ( tuple . getDouble ( 3 ) , 1.23 , 1E-6 )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertThat ( databaseMetaDataResultSet . getBigDecimal ( 8 ) , is ( BIGDECIMAL ) )
assertNotNull ( spds . getLogWriter ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNull ( SOORT_BERICHT . getDatumAanvanGeldigheid ( ) )
assertEquals ( "test test test" , getSpreadsheet ( ) . getSheetCtrl ( ) . getCell ( "C1" ) )
assertEquals ( Quantity . Scale . ABSOLUTE , area . getScale ( ) )
assertEquals ( Quantity . Scale . ABSOLUTE , area . getScale ( ) )
assertEquals ( "test test test" , getSpreadsheet ( ) . getSheetCtrl ( ) . getCell ( "C1" ) )
assertEquals ( 131l , getalLiteral . getWaarde ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertEquals ( "\n" + sqlText + "\n" , 1 , rowCount )
assertEquals ( "\n" + sqlText + "\n" , 1 , rowCount )
assertEquals ( "Incorrect count returned!" , 1 , count )
assertEquals ( "binary data got munged" , DATA_STRING , new String ( dataBytes , "UTF8" ) )
assertEquals ( "binary data got munged" , DATA_STRING , new String ( dataBytes , "UTF8" ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertEquals ( "\n" + sqlText + "\n" , 1 , rowCount )
assertEquals ( "\n" + sqlText + "\n" , 1 , rowCount )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertTrue ( true )
assertEquals ( "Expecting 6 rows from join." , 6 , nRows )
assertThat ( selectQueryAware . getDataSource ( ) , equalTo ( Optional . of ( instancesDataSource ) ) )
assertThat ( selectQueryAware . getDataSource ( ) , equalTo ( Optional . of ( instancesDataSource ) ) )
assertEquals ( "Expecting 6 rows from join." , 6 , nRows )
assertThatRowCount ( is ( Math . min ( EMP_SIZE , DEPT_SIZE ) ) , is ( 0D ) , is ( 40D ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertEquals ( msg . getString ( this . name ) , str )
assertEquals ( msg . getString ( this . name ) , str )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertEquals ( msg . getString ( this . name ) , str )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertTrue ( IOUtils . toString ( libraryEndpoint . openStream ( ) , defaultCharset ( ) ) . contains ( "Asimov" ) )
assertThat ( IntegerUtil . toInteger ( value ) , is ( value ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( getValue ( ) , is ( sameInstance ( ( Object ) value ) ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertNotNull ( spds . getLogWriter ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertEquals ( "CryptoFileSystem(" + pathToVault . toString ( ) + ")" , inTest . toString ( ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( "!any!" , s )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertEquals ( null , TYPE_HANDLER . getResult ( rs , "column" ) )
assertThat ( queryResultMetaData . getColumnName ( 1 ) , is ( "order_id" ) )
assertThat ( shardingSphereDatabaseMetaData . getUserName ( ) , is ( databaseMetaData . getUserName ( ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( "" , buf . toString ( ) )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertThat ( nan . toString ( ) , is ( "namespace1/name1" ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( s , Dates . format ( date , DateFormats . DATE_PATTERN ) )
assertEquals ( s , Dates . format ( date , DateFormats . DATE_PATTERN ) )
assertEquals ( s , Dates . format ( date , DateFormats . DATE_PATTERN ) )
assertThat ( exception . getMessage ( ) ) . startsWith ( "Don't know how to map `void` to the Neo4j Type System." )
assertNotNull ( resultaat )
assertEquals ( "/foo/bar/baz" , output )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertThat ( this . testee . iterator ( ) . next ( ) ) . isEqualTo ( "a" )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( cut . poll ( ) , is ( nullValue ( ) ) )
assertEquals ( "zookeeper://192.168.99.100:32770" , registry . getAddress ( ) )
assertThat ( new Update ( ) . set ( "key" , "value" ) . isolated ( ) . toString ( ) ) . contains ( "\"$isolated\"" )
assertThat ( extract ( headers ) . sampled ( ) ) . isNull ( )
assertThat ( extract ( headers ) . sampled ( ) ) . isNull ( )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertThat ( source . name ( ) ) . isEqualTo ( "elasticSource" )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertNull ( map . get ( null ) )
assertNull ( map . get ( null ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertFalse ( ProductItemPredicates . categoryCode ( "missing" ) . apply ( emptyItem ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( "\n" , toString ( createTupleNoBindingSets ( ) ) . replaceAll ( "\\S+|\t" , "" ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . contains ( "The number of retries cannot be negative" )
assertEquals ( tokenStr , token . toString ( ) )
assertEquals ( authenticator , aURL . getAuthenticator ( ) )
assertEquals ( System . getProperty ( "user.name" ) , authenticator . getUserName ( ) )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertNull ( handler . authenticate ( request , response ) )
assertEquals ( PseudoAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( AuthenticationToken . ANONYMOUS , token )
assertNull ( token )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
assertEquals ( t , e )
assertEquals ( "" , sw . toString ( ) )
assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( expectedOutput , conf . toString ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( null , OpensslCipher . getLoadingFailureReason ( ) )
assertEquals ( null , OpensslCipher . getLoadingFailureReason ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw IOException" )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , paths . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , filteredPaths . length )
fail ( "Should throw IOException" )
assertNotNull ( is )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , paths . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , filteredPaths . length )
assertArrayEquals ( data , bb )
assertFalse ( "Should report exists" , exists )
assertArrayEquals ( data , bb )
assertEquals ( "/foo/bar/baz" , output )
assertArrayEquals ( data , bb )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
fail ( "Excepted exception not thrown" )
assertEquals ( "otherUser" , newFc . getUgi ( ) . getUserName ( ) )
assertEquals ( fc1ModificationTime , fc2ModificationTime )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
assertTrue ( "FileSystem.exists() fails for root" , fs . exists ( path ( "/" ) ) )
assertFalse ( fc . getFileLinkStatus ( new Path ( "/" ) ) . isSymlink ( ) )
assertEquals ( linkToDir . getName ( ) , wrapper . getWorkingDirectory ( ) . getName ( ) )
assertFalse ( wrapper . exists ( new Path ( testBaseDir2 ( ) ) ) )
assertEquals ( "file" , getScheme ( ) )
assertEquals ( new Path ( "../file" ) , fc . getLinkTarget ( link ) )
assertTrue ( localFs . mkdirs ( dstPath ) )
assertThat ( StringUtils . wrap ( "asd" , "wrapper" ) ) . isEqualTo ( "wrapperasdwrapper" )
assertEquals ( header , helpUrlPayload . getHeader ( ) )
assertEquals ( expected , contentSummary . toString ( true ) )
assertEquals ( expected , contentSummary . toString ( true ) )
assertEquals ( expected , contentSummary . toString ( false ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , quotaUsage . toString ( true ) )
assertEquals ( expected , contentSummary . toString ( false ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertThat ( cronExpression . getCronExpression ( ) ) . isEqualTo ( newExpression . getCronExpression ( ) )
assertNotSame ( fs1 , fs2 )
assertNotSame ( fsU1 , fsU2 )
assertNotSame ( fsU1 , fsU2 )
assertNull ( value )
assertEquals ( "application/netcdf" , contentType )
assertTrue ( ExceptionUtil . transform ( new Error ( "Error" ) ) . startsWith ( "java.lang.Error" ) )
assertTrue ( new File ( resolveTestResourcePath ( "google-home.png" ) ) . exists ( ) )
assertEquals ( f . toURL ( ) , toURL ( f ) )
assertTrue ( Paths . get ( p . toUri ( ) ) . equals ( p . toAbsolutePath ( ) ) )
assertNotNull ( pathToTest . getFileSystem ( ) . getSeparator ( ) )
assertEquals ( EXPECTED_DATA_LAYER_STRING , testedObject . getExpected ( VALID_FILE_PATH ) )
assertEquals ( EXPECTED_DATA_LAYER_STRING , testedObject . getExpected ( VALID_FILE_PATH ) )
assertNull ( uri )
assertNull ( uri )
assertNull ( uri )
assertNull ( uri )
assertEquals ( 42 , Files . size ( testFile ) )
assertEquals ( datasetSchema , rt . getSchema ( ) )
assertEquals ( "someInterface" , name )
assertTrue ( errContent . toString ( "UTF-8" ) . startsWith ( "Required option '--sql-file' is missing" ) )
assertTrue ( "Return code should be 0" , run == 0 )
assertEquals ( null , harfs . getFileChecksum ( p ) )
assertEquals ( "application/vnd.iso.19139+xml" , type )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
fail ( "Should throw FileNotFoundException" )
fail ( )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertTrue ( localFs . mkdirs ( new Path ( dir1 ) ) )
assertTrue ( localFs . mkdirs ( new Path ( dir2 ) ) )
assertNotNull ( client )
assertEquals ( home , fsHome )
assertEquals ( fileSys . makeQualified ( path ) , status . getPath ( ) )
assertEquals ( 1 , fileSchemeCount )
assertNotNull ( bis . getFileDescriptor ( ) )
assertTrue ( stats != null && stats . length == 1 && stats [ 0 ] == stat )
assertTrue ( failedAsExpected )
assertThat ( offset , is ( roundtrip ( offset ) ) )
assertEquals ( header , helpUrlPayload . getHeader ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertEquals ( expected , quotaUsage . toString ( true ) )
assertEquals ( expected , quotaUsage . toString ( true ) )
assertEquals ( "-5" , SRun ( "bit_not(4)" , null ) )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertEquals ( accessTime1 , accessTime2 )
assertEquals ( accessTime1 , accessTime2 )
assertEquals ( "root listing" , 0 , rootls . length )
assertTrue ( fs . mkdirs ( path ) )
assertTrue ( "Premature EOF" , instream . read ( ) != - 1 )
assertTrue ( GZipFiles . isGzip ( getFile ( "org/apache/pulsar/io/file/validGzip.gz" ) ) )
assertEquals ( path . makeQualified ( fs ) , status . getPath ( ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertThat ( toCamelCaseBySplitting ( "THIS STRING SHOULD BE IN CAMEL CASE" , " " ) ) . isEqualTo ( "thisStringShouldBeInCamelCase" )
assertEquals ( StringUtils . format ( "\"%s\"" , time ) , mapper . writeValueAsString ( time ) )
assertEquals ( stat , fstat )
assertEquals ( stat , fstat )
assertThat ( commandInfo . getCommandName ( ) ) . isEqualTo ( expected )
assertEquals ( criteria , filter . getCriteria ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Count.getUsage" , expected , actual )
assertEquals ( criteria , filter . getCriteria ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
fail ( "Should throw FileNotFoundException" )
assertEquals ( "file:/tmp" , dir . toString ( ) )
assertEquals ( "" , output )
assertNotNull ( dbVXString )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringNul ( ) , is ( "" ) )
assertNull ( cmd . getWorkingDirectory ( ) )
assertEquals ( 255 , s . available ( ) )
assertEquals ( Collections . < Object > emptyList ( ) , expr . getParameterValue ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( new Vector3i ( 2 , 6 , 14 ) , v )
assertEquals ( new Vector3i ( 2 , 6 , 14 ) , v )
assertEquals ( new Vector3i ( 2 , 6 , 14 ) , v )
assertThat ( function . andThen ( Object :: toString ) . apply ( "x" ) ) . isEqualTo ( "1" )
assertNotNull ( f . cause ( ) )
assertEquals ( this . expectedInputSplit , kafkaInputSplit )
assertEquals ( this . expectedInputSplit , kafkaInputSplit )
assertEquals ( "002@" , new PicaplusTag ( "002@" ) . getTag ( ) )
assertEquals ( this . entryUri , this . entry . getUri ( ) )
assertEquals ( "H$$4}B" , seg . toString ( ) )
assertEquals ( autoirityKeyIdentifier , clonedCertificate . getAuthorityKeyIdentifier ( ) )
assertThat ( translator . getAlias ( ) , is ( ALIAS ) )
assertThat ( interactionEvent . getMemberNaturalName ( ) , equalTo ( "Cancel Order" ) )
assertNull ( serviceName )
assertNull ( serviceName )
assertEquals ( STRING , s )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
fail ( "Should throw FileNotFoundException" )
assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( home , fsHome )
assertEquals ( "Application History" , controller . get ( TITLE , "unknown" ) )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
assertTrue ( ffe . getCause ( ) . getMessage ( ) . contains ( "Access denied" ) )
assertTrue ( ffe . getCause ( ) . getMessage ( ) . contains ( "Access denied" ) )
assertEquals ( hash ( buffer . getLong ( 0 ) ) , hash ( buffer , 0 , SizeOf . SIZE_OF_LONG ) )
assertTrue ( ioe . getCause ( ) instanceof IllegalStateException )
assertNotNull ( in )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertNull ( reader . get ( 0 , new RandomDatum ( ) ) )
assertNotNull ( "testDeleteFile error !!!" , writer )
assertEquals ( "two arrays are not equal" , array [ i ] , claimedArray [ i ] )
assertEquals ( "two arrays are not equal" , array [ i ] , claimedArray [ i ] )
assertEquals ( read , nonEmptyFlag )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( "/tmp/abc.txt" , returnedEx . getPath ( ) . toString ( ) )
assertEquals ( new IntWritable ( ( SIZE - 1 ) / 2 ) , reader . midKey ( ) )
assertEquals ( new IntWritable ( 1 ) , reader . midKey ( ) )
assertEquals ( new IntWritable ( 1 ) , reader . midKey ( ) )
assertEquals ( "{5=value}" , map . toString ( ) )
fail ( "Should throw FileNotFoundException" )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( s , new String ( dob . getData ( ) , 2 , dob . getLength ( ) - 2 , "UTF-8" ) )
assertNotNull ( extractor . getText ( ) )
assertTrue ( "Got mismatched ZlibCompressor" , c2 != CodecPool . getCompressor ( gzc ) )
assertThat ( decompressorStream . read ( ) , is ( ( int ) TEST_STRING . charAt ( i ) ) )
assertEquals ( "foo" , Utils . inputStreamToString ( Utils . stringToInputStream ( "foo" ) ) )
assertNull ( coders )
assertNull ( coders )
assertEquals ( scanner . endLocation , locX )
fail ( "Cannot read before closing the writer." )
fail ( "Cannot create metablocks with the same name." )
fail ( "Cannot add key/value after start adding meta blocks." )
fail ( "Error on handling invalid compression codecs." )
fail ( "Error on handling empty files." )
fail ( "Error on handling random files." )
fail ( "Exception should have been thrown" )
fail ( "Error on handling negative offset." )
fail ( "Error on handling negative offset." )
fail ( "Error on handling negative length." )
fail ( "Error on handling negative length." )
fail ( "Failed to catch file write not at position 0." )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
fail ( "Cannot create metablocks with the same name." )
assertEquals ( Utils . readVLong ( in ) , data [ i ] )
assertTrue ( e . getCause ( ) instanceof PathIOException )
assertEquals ( Errno . EBADF , nioe . getErrno ( ) )
assertEquals ( Errno . EBADF , nioe . getErrno ( ) )
assertEquals ( Errno . EBADF , nioe . getErrno ( ) )
assertEquals ( Errno . EBADF , nioe . getErrno ( ) )
assertNotNull ( SystemUtils . getUserName ( ) )
assertFalse ( NativeIO . POSIX . getGroupName ( 0 ) . isEmpty ( ) )
assertEquals ( 101 , inStream . read ( ) )
assertEquals ( "impl1" , e . getMessage ( ) )
fail ( "Exception should not be thrown: " + e )
fail ( "Exception should not be thrown: " + e )
fail ( "Exception should have been thrown" )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertTrue ( isDuplicate ( singletonList ( mockObject ( "qwerty" ) ) , mockObject ( "qwerty" ) ) )
assertFalse ( bytes . toString ( ) . contains ( "NullPointerException" ) )
assertNull ( service . poll ( ) )
assertThat ( stack . get ( ) , equalTo ( INITIAL_VALUE ) )
assertNull ( preparedStatement )
assertTrue ( e . getMessage ( ) . contains ( "Injected fault" ) )
assertEquals ( username , identity )
assertEquals ( echoResponse . getMessage ( ) , "hello" )
assertThat ( e . getMessage ( ) , is ( "Table 'ZZZ.EMP' not found" ) )
assertEquals ( datum_morgen , morgen )
assertFalse ( conf . getTimestampField ( ) . isPresent ( ) )
assertTrue ( "Zero default blocksize" , 0L != getFs ( ) . getDefaultBlockSize ( ) )
assertEquals ( new String ( content ) , new String ( read ) )
assertEquals ( result [ i ] , testData [ i ] )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( 100 , startLevel )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertThat ( host , is ( DNS . getDefaultHost ( DEFAULT ) ) )
assertThat ( host , is ( DNS . getDefaultHost ( getLoopbackInterface ( ) ) ) )
assertThat ( host , is ( DNS . getDefaultHost ( DEFAULT ) ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( actionInvokeStatus . getThrowable ( ) . getMessage ( ) , "test_message" )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertEquals ( defaultAddr . trim ( ) , NetUtils . getHostPortString ( addr ) )
assertEquals ( value , wrapped . get ( key ) )
assertTrue ( e . getMessage ( ) . contains ( "illegal network location" ) )
assertNull ( result )
assertThat ( typeConverter . convert ( null , domainField , null ) ) . isNull ( )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertTrue ( caughtException )
assertNotNull ( model )
assertTrue ( login1 == login2 )
assertTrue ( user1 == user2 )
assertNotNull ( ugi )
assertEquals ( ugi , UserGroupInformation . getLoginUser ( ) )
assertTrue ( module . logout ( ) )
assertEquals ( "#: expected type: String, found: Boolean" , thrown . getMessage ( ) )
assertEquals ( this . expectedInputSplit , kafkaInputSplit )
assertEquals ( orig , copy )
assertNull ( ugi )
assertEquals ( 0 , data . get ( "tables" ) . size ( ) )
assertTrue ( ex . getMessage ( ) . contains ( BigInteger . valueOf ( 2 ) . pow ( PRODUCT_ELEMENTS ) . toString ( ) ) )
assertTrue ( "JSONObject was not created" , obj == null )
assertFalse ( ex . getMessage ( ) . contains ( "cause" ) )
assertNull ( svc . getCloseable ( ) )
assertThat ( keyManager . getPrimitiveClass ( ) ) . isEqualTo ( Aead . class )
assertNull ( svc . getCloseable ( ) )
fail ( "Should throw FileNotFoundException" )
assertNull ( yamlDataObject )
assertEquals ( expected , DateTypeConverter . fromMillis ( timestamp , dateClass ) )
assertEquals ( - 1 , errorSentinel )
assertEquals ( excepted , testObject . foo )
assertEquals ( i , fromList )
assertNull ( obj )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThatPath ( "/test" ) . containsBytes ( bytes )
assertNotNull ( result )
fail ( "Should throw FileNotFoundException" )
assertTrue ( new File ( jar ) . exists ( ) )
assertTrue ( new File ( jar ) . exists ( ) )
assertEquals ( "{\"foo\":\"foo1\",\"bar\":\"bar1\"}" , json )
assertEquals ( 'a' , is . read ( ) )
assertEquals ( TEST_JSON , output . toJson ( ) )
assertEquals ( source , serDeser . load ( tempFile ) )
assertFalse ( list . iterator ( ) . hasNext ( ) )
assertTrue ( Arrays . equals ( uuid , header . getClientId ( ) . toByteArray ( ) ) )
assertEquals ( NoSuchMethodException . class , rte . getCause ( ) . getClass ( ) )
assertEquals ( "lol" , Fields . getStatic ( TestClass . class , "LOL" ) )
fail ( "Should throw FileNotFoundException" )
assertEquals ( testDate , UTCDateOnlyField . parse ( ( DATE_STR . getBytes ( ) ) ) )
assertEquals ( testDate , UTCDateOnlyField . parse ( ( DATE_STR . getBytes ( ) ) ) )
fail ( "Exception should have been thrown" )
assertEquals ( "Failed to create uri for file://" , iae . getMessage ( ) )
assertNull ( EncryptionUtilities . fastMD5 ( null ) )
assertNull ( EncryptionUtilities . fastMD5 ( null ) )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertNotNull ( "testDynamicBloomFilter error " , filter . toString ( ) )
forEach ( i -> assertFalse ( i . toString ( ) , i . aborted ) )
forEach ( i -> assertFalse ( i . toString ( ) , i . aborted ) )
assertNull ( state )
assertEquals ( "test" , response . getSysUrl ( ) )
assertEquals ( "a" , s )
assertThat ( MQVersion . value2Version ( 0 ) ) . isEqualTo ( MQVersion . Version . V3_0_0_SNAPSHOT )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertEquals ( count , facet . getCount ( ) )
assertEquals ( "" , string0 )
assertNotNull ( "Unset: " + Environment . JAAS_CONF_KEY , confFilename )
assertEquals ( "wrong name" , "26.172.in-addr.arpa." , name . toString ( ) )
assertEquals ( 0 , out . length )
assertNotNull ( JeroMqManager . getContext ( ) )
assertEquals ( 0 , count )
fail ( "Did not renew lease at all!" )
assertEquals ( e , exc )
assertTrue ( siteFile . mkdir ( ) )
assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
assertEquals ( RestConst . REST , instance . getName ( ) )
assertTrue ( siteFile . mkdir ( ) )
assertEquals ( config . getHashAlgorithm ( ) , newVal )
assertEquals ( "foo" , runCallable ( ( ) -> privateClassMethod ( ( ) -> "foo" ) ) )
assertEquals ( Check . notNull ( "value" , "name" ) , "value" )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( 1 , result )
assertThat ( Datastore . delegate ( ) , is ( sameInstance ( Datastore . delegate ( ) ) ) )
assertEquals ( "The number of items must be six." , 6 , numOfItems )
assertThat ( translator . getAlias ( ) , is ( ALIAS ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
assertEquals ( status , Status . ACTIVE )
assertTrue ( errContent . toString ( "UTF-8" ) . startsWith ( "Required option '--sql-file' is missing" ) )
assertTrue ( accessDenied )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertTrue ( allowed )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertTrue ( new File ( uniqueFile ) . exists ( ) )
assertTrue ( fs . mkdirs ( testFolder ) )
assertEquals ( fn . apply ( "foo" ) , md5 ( ) . hashString ( "foo" , UTF_8 ) . asBytes ( ) )
assertNull ( result )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertThat ( invocation . toString ( ) , endsWith ( "oneArray(null);" ) )
assertThat ( methodName . toString ( ) ) . isEqualTo ( "public void org.camunda.bpm.engine.impl.test.TestHelperTest$SomeTestClass.testSomethingWithPublicAccessor()" )
assertThat ( invocation . toString ( ) , endsWith ( "oneArray(null);" ) )
assertEquals ( fileSys . makeQualified ( path ) , status . getPath ( ) )
assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertEquals ( "name" , name )
assertEquals ( "\"Foo\",,\"Bar\",\"baz\"\n" , result )
assertEquals ( message , new String ( buffer ) )
assertEquals ( message , new String ( buffer ) )
assertFalse ( abortResult )
assertThat ( registry . getCluster ( ) , equalTo ( "cluster" ) )
assertThat ( registry . getCluster ( ) , equalTo ( "cluster" ) )
assertTrue ( accessDenied )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertEquals ( statLink . getOwner ( ) , statFile . getOwner ( ) )
assertTrue ( "Expected recoverLease to return true" , closed )
assertTrue ( "Expected recoverLease to return true" , closed )
assertNotNull ( context )
assertThat ( e . getMessage ( ) , is ( "Specified repository is missing" ) )
fail ( "Should throw FileNotFoundException" )
assertEquals ( "length of test files" , 1 , testFiles . length )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertEquals ( "\"gamma\";\"beta\";\"alpha\"\r\n" , writer . getBuffer ( ) . toString ( ) )
assertFalse ( wrapper . exists ( new Path ( testBaseDir2 ( ) ) ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( "expected to fail -1" , res , - 1 )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "Read timed out" , e . getMessage ( ) )
assertEquals ( "\"" + A_STRING + "\"\n" , baos . toString ( ) )
assertEquals ( "\"" + A_STRING + "\"\n" , baos . toString ( ) )
assertEquals ( "Read timed out" , e . getMessage ( ) )
assertNull ( classUnderTest . writeToString ( null ) )
assertEquals ( '7' , in . read ( ) )
assertNull ( array )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( config . getMyCommunityId ( ) , "1.1" )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertTrue ( fs . delete ( new Path ( "/A" ) , true ) )
assertEquals ( result [ i ] , testData [ i ] )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
assertNull ( input . getAnummer ( ) )
assertTrue ( fs . mkdirs ( path ) )
assertTrue ( e . getMessage ( ) . contains ( "] not on impl " ) )
assertEquals ( 0L , currentFileLength )
fail ( "Should throw FileNotFoundException" )
assertEquals ( home , fsHome )
assertNotNull ( pair . getMakerFee ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
fail ( "No exception was thrown" )
assertEquals ( "" , status )
assertEquals ( "TileDecompressor(0,null,0)" , toString )
assertEquals ( "root listing" , 0 , rootls . length )
assertThat ( taskModel ( "" ) . getChildren ( ) , is ( Collections . < Content > emptyList ( ) ) )
assertEquals ( b , b2 )
assertThat ( javauto . toString ( true ) ) . isEqualTo ( "true" )
assertArrayEquals ( new Long [ ] { 1L , 2L , 3L } , ( Long [ ] ) property . getValue ( ) )
assertEquals ( s , PBHelper . convert ( PBHelper . convert ( s ) ) )
assertNull ( pack ( null ) )
assertNull ( pack ( null ) )
assertEquals ( "Hello! World" , appender . getOutput ( ) )
fail ( "Should throw FileNotFoundException" )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , null , 0 ) , is ( emptyString ( ) ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , null , 0 ) , is ( emptyString ( ) ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , null , 0 ) , is ( emptyString ( ) ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , null , 0 ) , is ( emptyString ( ) ) )
assertThat ( pageObject , not ( visible ( ) ) )
assertEquals ( AlosAV2Constants . PROCESSING_1B , metadata . getProcessingLevel ( ) )
assertNotNull ( u )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertEquals ( "2011-11-29T22:05:15.123" , buff . toString ( ) )
assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertEquals ( 0 , array . length )
assertThat ( writer . get ( ) , is ( "2019-01-01 00:00:00" ) )
assertEquals ( expected , actual )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "#: 3 schema violations found" , subject . getMessage ( ) )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertEquals ( DAGStatus . State . SUCCEEDED , finalState )
assertEquals ( "01" , IOUtils . toString ( input , Charset . defaultCharset ( ) ) )
assertEquals ( Long . MIN_VALUE , value )
assertEquals ( Long . MIN_VALUE , value )
assertTrue ( entities . size ( ) == 5 && entities . get ( 0 ) . getId ( ) != 0 )
assertNotEquals ( ref . getVolume ( ) , volumes . get ( 1 ) )
assertEquals ( "The source dataset has 0 partition to snapshot." , thrown . getMessage ( ) )
assertThat ( hostname , not ( DUMMY_HOSTNAME ) )
assertTrue ( text . contains ( Integer . toString ( VALUES ) ) )
assertTrue ( text . contains ( Integer . toString ( VALUES ) ) )
assertEquals ( "Mismatched read configuration value" , expected , actual )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( record , result )
fail ( "Exception should have been thrown" )
assertEquals ( "ok" , IO . slurp ( conn . getInputStream ( ) ) )
assertNull ( manager )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertEquals ( "" , result )
assertNotNull ( result )
assertThat ( response . status ( ) , is ( OK ) )
assertTrue ( uriA == uriB )
assertTrue ( e . getCause ( ) instanceof LogNotFoundException )
assertEquals ( value , wrapped . get ( key ) )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertEquals ( pos . getIndex ( ) , 0 )
assertTrue ( failed )
assertEquals ( 0 , result )
assertEquals ( 1 , visitFileCalled [ 0 ] )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertThat ( get ( "https://google.com" ) . blockingGet ( ) . code ( ) ) . isEqualTo ( 200 )
assertNotNull ( build )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( "error.changePassword" , e . getMessageKey ( ) )
fail ( "testRemoveXAttr - expected exception is not thrown" )
assertTrue ( fs . mkdirs ( path ) )
assertThat ( holder . get ( ) , is ( message ) )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertTrue ( true )
assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( result [ i ] , testData [ i ] )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertTrue ( new File ( uniqueFile ) . exists ( ) )
fail ( "Should throw FileNotFoundException" )
assertThat ( adaptPoi ( getCellForCoordinate ( coordinate ( A , 1 ) , modified . workbook ( ) ) ) , is ( instanceOf ( BlankCell . class ) ) )
assertEquals ( "Read timed out" , e . getMessage ( ) )
fail ( "Should throw FileNotFoundException" )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertTrue ( accessDenied )
assertTrue ( error )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertTrue ( fs . exists ( old ) )
fail ( "No exception was thrown" )
assertThat ( payload ( ) , JsonEnvelopePayloadMatcher . payload ( isJsonValueNull ( ) ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( StaticUtils . bytesToHex ( buffer ) , expected )
assertEquals ( StaticUtils . bytesToHex ( buffer ) , expected )
assertEquals ( StaticUtils . bytesToHex ( buffer ) , expected )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( VarInt . sizeOf ( - 1 ) , new VarInt ( - 1 ) . encode ( ) . length )
assertEquals ( VarInt . sizeOf ( - 1 ) , new VarInt ( - 1 ) . encode ( ) . length )
assertThat ( args . text ( ) ) . isEqualTo ( "" )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( VarInt . sizeOf ( - 1 ) , new VarInt ( - 1 ) . encode ( ) . length )
assertEquals ( VarInt . sizeOf ( - 1 ) , new VarInt ( - 1 ) . encode ( ) . length )
assertNotNull ( "missing handler: " + cmd , handler )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertTrue ( runTool ( conf , args , true ) . contains ( "value" ) )
assertEquals ( "Minhash MR Job failed for " + HashType . LINEAR , 0 , ret )
assertEquals ( "Minhash MR Job failed for " + HashType . LINEAR , 0 , ret )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertEquals ( "Minhash MR Job failed for " + HashType . LINEAR , 0 , ret )
assertArrayEquals ( destArray , origin )
assertEquals ( "" , output )
assertEquals ( "" , output )
assertEquals ( "" , output )
assertNull ( objSet . getElement ( new TestObject ( "not in set" ) ) )
assertEquals ( TEST_MD5 , computedDigest )
assertThat ( supplier . get ( ) , equalTo ( Optional . < AccessToken > absent ( ) ) )
assertArrayEquals ( XAttrCodec . decodeValue ( "0x313131" ) , value )
assertEquals ( query , serdeQuery )
assertNull ( webHdfs . getDelegationToken ( null ) )
assertNull ( webHdfs . getDelegationToken ( null ) )
fail ( "No exception was thrown" )
fail ( "No exception was thrown" )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
fail ( "Exception should have been thrown" )
assertTrue ( exists ( 1 ) )
assertFalse ( sftpFs . delete ( file , false ) )
assertFalse ( abortResult )
assertNotNull ( basic )
assertNotNull ( basic )
assertNotNull ( basic )
assertNotNull ( basic )
assertNotNull ( obj . getValue ( ) )
assertNotNull ( obj . getValue ( ) )
assertNotNull ( obj . getValue ( ) )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
assertEquals ( p . getXAttrName ( ) , "user.a1" )
assertEquals ( "Some text" , new Immutable18NModel ( new NonI18NModel ( "Some text" ) ) . getValue ( null ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertNotEquals ( null , counters )
assertNotEquals ( null , counters )
assertEquals ( System . getProperty ( "user.name" ) , job . getUserName ( ) )
assertEquals ( JobState . RUNNING , job . getState ( ) )
assertEquals ( Apps . toString ( ctx . appID ) , controller . get ( APP_ID , "" ) )
assertEquals ( "job_0_0000" , MRApps . toString ( jid ) )
assertEquals ( "attempt_0_0_0_m_0_0" , MRApps . toString ( taid ) )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertEquals ( "[\n" + "    {\"_id\": 1},\n" + "    {\"_id\": 2}\n" + "]" , array . toString ( 4 ) )
assertEquals ( "root listing" , 0 , rootls . length )
assertNotNull ( params )
assertEquals ( CLUSTER , value )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( "test" , configuration . getProfileParams ( ) )
assertNull ( jobConf . get ( DBConfiguration . PASSWORD_PROPERTY , null ) )
assertEquals ( manager . getRoot ( ) . getChildren ( ) . size ( ) , 2 )
assertNotNull ( "ClientProtocol is expected" , testCluster . getClient ( ) )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'client_id'" )
assertEquals ( "test" , ioe . getMessage ( ) )
assertTrue ( re . getCause ( ) instanceof IOException )
assertNull ( PartitionerCache . getCategory ( conf , new Text ( "table1" ) ) )
assertNull ( PartitionerCache . getCategory ( conf , new Text ( "table1" ) ) )
assertNull ( sc . getOutputPath ( ) )
assertNull ( sc . getOutputPath ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( procStore . getFileSystem ( ) , procStore . getWalArchiveDir ( ) . getFileSystem ( conf ) )
assertEquals ( procStore . getFileSystem ( ) , procStore . getWalArchiveDir ( ) . getFileSystem ( conf ) )
assertNotNull ( lfs )
assertEquals ( "NORMAL" , info . getPriority ( ) )
assertEquals ( "Exit code should be 0 but was: " + exitCode , 0 , exitCode )
assertEquals ( Apps . toString ( ctx . appID ) , controller . get ( APP_ID , "" ) )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( i , ifis . read ( ) )
assertEquals ( "Dummy Exception" , ioe . getMessage ( ) )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
this . assertEquals ( expected , readOutputFile ( conf ) )
this . assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertTrue ( "ShuffleHandler should use a random chosen port" , shuffleHandler . getPort ( ) > 0 )
assertTrue ( job . waitForCompletion ( true ) )
assertNull ( underTest . getCounters ( ) )
assertTrue ( result )
assertEquals ( "Wrong class" , HdfsMrsImageWriter . class , provider . getMrsTileWriter ( context ) . getClass ( ) )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertNotNull ( items )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertTrue ( cluster . getClient ( ) instanceof YARNRunner )
assertEquals ( propertyClass , TSnowflakeOutputProperties . class )
assertEquals ( BigDecimal . ZERO , emptyBigDec )
assertEquals ( "" , emptyStr )
assertEquals ( "A" , out )
assertEquals ( "Z" , out )
assertEquals ( "abc" , out )
assertEquals ( "big str" , out )
assertEquals ( "AVeryLon" , out )
assertArrayEquals ( expected , splits . toArray ( new String [ 0 ] ) )
this . assertEquals ( expected , readOutputFile ( conf ) )
assertNull ( array )
assertArrayEquals ( "the two arrays are not equal" , expected , input )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertNotNull ( result )
assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertEquals ( null , handler . onCall ( CombinerHandler . COMBINE , null ) )
assertEquals ( null , handler . onCall ( new Command ( - 1 ) , null ) )
assertEquals ( null , handler . onCall ( new Command ( - 1 ) , null ) )
assertEquals ( EXPECTED_DOCS_COLLECTION_SIZE , docsCount )
assertEquals ( mean , wr . read ( INPUT ) , 0.0 )
assertEquals ( median , wr . read ( INPUT ) , 0.0 )
assertEquals ( stddev , wr . read ( INPUT ) , 0.0 )
assertEquals ( testString + "\n" , result )
assertNotNull ( disk . getName ( ) )
assertEquals ( path . toString ( ) , newPath . toString ( ) )
assertEquals ( text , result )
assertEquals ( text , result )
assertEquals ( SOME_VALUE , v )
assertTrue ( "not found: " + tmp , tmp . exists ( ) )
assertTrue ( getFileSystem ( ) . mkdirs ( pathABC ) )
assertTrue ( getFileSystem ( ) . mkdirs ( pathABC ) )
assertNull ( "Checksums are being generated" , checksum1 )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertThat ( wizardPageUnderTest . validateFilePath ( System . getProperty ( "java.io.tmpdir" ) ) . isOK ( ) ) . isTrue ( )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( "no" , this . render ( null ) , "Null should be interpreted as FALSE" )
assertEquals ( "no" , this . render ( null ) , "Null should be interpreted as FALSE" )
assertEquals ( "" , getServerSideEncryptionKey ( BUCKET , c ) )
assertEquals ( "" , getServerSideEncryptionKey ( BUCKET , c ) )
assertNotNull ( JBBPCompiler . compile ( "byte [(1+2-3)*4/(5<<6>>7)>>>3%1&89|22^34-~45] a;" ) )
assertThat ( new URL ( user . getServer ( ) ) . getHost ( ) ) . isEqualTo ( SERVER )
assertEquals ( structLikeClass . getFoo ( ) , structLikeClass . getValue ( "get_foo" ) )
assertEquals ( structLikeClass . getFoo ( ) , structLikeClass . getValue ( "get_foo" ) )
MatcherAssert . assertThat ( factory . getByIface ( List . class ) , is ( notNullValue ( ) ) )
MatcherAssert . assertThat ( factory . getByIface ( List . class ) , is ( notNullValue ( ) ) )
assertEquals ( AuthenticationTokenIdentifier . TOKEN_KIND , token . getKind ( ) )
assertEquals ( AuthenticationTokenIdentifier . TOKEN_KIND , token . getKind ( ) )
assertEquals ( "three" , lastElement )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( "Stream statistics were not merged" , 26 , read . value ( ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
assertFalse ( ResourceUtils . isFileReadable ( path . toString ( ) ) )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
assertNotNull ( HFileArchiveUtil . getArchivePath ( conf ) )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertEquals ( "Children of resource property element must be XML elements" , e . getMessage ( ) )
assertThat ( servletContext . getRealPath ( path ) , is ( realPath ) )
assertTrue ( fs . exists ( new Path ( "testFolder3/a/input/file" ) ) )
assertTrue ( fs . exists ( srcFilePath ) )
assertTrue ( fs . exists ( srcFilePath ) )
assertTrue ( fs . exists ( srcFilePath ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
assertEquals ( "test123" , password )
assertEquals ( "root listing" , 0 , rootls . length )
assertEquals ( TEST_BYTE , inputStream . read ( ) )
assertArrayEquals ( readBuffer , writeBuffer )
assertEquals ( "root listing" , 0 , rootls . length )
assertEquals ( TEST_BYTE , inputStream . read ( ) )
assertEquals ( "length of test files" , 1 , testFiles . length )
assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertEquals ( properties , fetchedProperties )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( src , dst )
assertEquals ( value , wrapped . get ( key ) )
assertTrue ( res )
assertTrue ( fs . exists ( target ) )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "distcp failure" )
fail ( "Should throw FileNotFoundException" )
fail ( "Exception should have been thrown" )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
assertThat ( options . getStorageClass ( ) , is ( storageClass . toString ( ) ) )
assertEquals ( list , content )
assertEquals ( list , content )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/xyz/file" )
fail ( "Exception should have been thrown" )
assertEquals ( create ( "abc" , DESC ) , new SortParser ( "-abc" ) . parse ( ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertNotNull ( morphline )
assertEquals ( context , other )
assertEquals ( clusterID , nn . getNamesystem ( ) . getClusterId ( ) )
assertEquals ( style , event . getVisualStyleAdded ( ) )
assertTrue ( SingleTask . first )
assertEquals ( outputExpect , output )
assertEquals ( outputExpect , output )
assertEquals ( expected , emailService . getOrder ( ) )
assertEquals ( expected , emailService . getOrder ( ) )
assertEquals ( outputExpect , output )
assertEquals ( tbw , readTbw )
assertEquals ( "Resource name incorrect" , name , ri . getName ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertEquals ( result , string )
assertEquals ( expectedItem , item )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertTrue ( result )
assertTrue ( result )
assertFalse ( result )
assertTrue ( initSuccess )
assertTrue ( wasCalled . get ( ) )
assertEquals ( "<font size=+3>test</font>" , largeSizeDecorator . toDisplay ( ) )
assertNotNull ( challenge )
assertNull ( part )
fail ( "Exception should have been thrown" )
fail ( "Should throw FileNotFoundException" )
assertEquals ( token , cluster . createFakeToken ( ) )
assertNotNull ( response )
assertEquals ( HttpResponseCodes . SC_SERVICE_UNAVAILABLE , response . getStatus ( ) )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertThat ( lognit . welcome ( ) ) . isEqualTo ( welcome )
assertThat ( mimetype . getMimetype ( mockPath ) ) . isEqualTo ( Mimetype . MIMETYPE_OCTET_STREAM )
assertEquals ( null , harfs . getFileChecksum ( p ) )
assertEquals ( "MAPREDUCE-LENGTH-IS-" , app1 . getApplicationType ( ) )
assertTrue ( "ShuffleHandler should use a random chosen port" , shuffleHandler . getPort ( ) > 0 )
assertEquals ( 0 , rc )
assertEquals ( 0 , rc )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertTrue ( accessDenied )
assertNotSame ( "should return non-zero exit code." , 0 , exitCode )
assertEquals ( 0 , result )
assertEquals ( 0 , exitCode )
assertNotNull ( ctx . getResource ( ) )
assertEquals ( expected , KafkaUtils . INSTANCE . fromEndpoint ( endpoint ) . get ( 0 ) )
assertEquals ( expected , KafkaUtils . INSTANCE . fromEndpoint ( endpoint ) . get ( 0 ) )
assertEquals ( ex . getClass ( ) , pb . deSerialize ( ) . getClass ( ) )
assertEquals ( ex . getClass ( ) , pb . deSerialize ( ) . getClass ( ) )
fail ( "Exception is not expected" )
assertThat ( expected . getCause ( ) , is ( sameInstance ( checkedException ) ) )
assertEquals ( "Returned generic diagnosis has wrong id" , "code1" , genericDiagnosis . getId ( ) )
assertEquals ( "Returned generic diagnosis has wrong id" , "code1" , genericDiagnosis . getId ( ) )
assertEquals ( "Returned generic diagnosis has wrong id" , "code1" , genericDiagnosis . getId ( ) )
assertTrue ( mgr . getNodeLabels ( ) . isEmpty ( ) )
assertEquals ( "Max threads can't be less than 1" , exception . getMessage ( ) )
assertNotNull ( PathUtils . getLastModifiedFileTime ( current ( ) . toUri ( ) . toURL ( ) ) )
assertNotNull ( PathUtils . getLastModifiedFileTime ( current ( ) . toUri ( ) . toURL ( ) ) )
assertEquals ( g . features ( ) . toString ( ) , graph . features ( ) . toString ( ) )
assertEquals ( rfc1123text [ i ] , DateUtil . formatRfc1123Date ( timeStamps [ i ] . getTime ( ) ) )
assertEquals ( bitmap . getCardinality ( ) , shifted . getCardinality ( ) , failureMessage ( bitmap ) )
assertEquals ( bitmap . getCardinality ( ) , shifted . getCardinality ( ) , failureMessage ( bitmap ) )
assertEquals ( actionInvokeStatus . getThrowable ( ) . getMessage ( ) , "test_message" )
assertEquals ( actionInvokeStatus . getThrowable ( ) . getMessage ( ) , "test_message" )
assertEquals ( 32 , ArbitraryId . next ( ) . length ( ) )
assertEquals ( 50000 , port )
assertEquals ( 50000 , port )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 5 , h . indents )
assertEquals ( 0 , h . nestLevel )
assertNotSame ( bar , injector . getInstance ( Bar . class ) )
assertEquals ( entry . getValue ( ) , uri )
assertNull ( manager )
assertEquals ( "JDBC" , result )
assertEquals ( "Application History" , controller . get ( TITLE , "unknown" ) )
assertThat ( Rosetta . getMapper ( ) . valueToTree ( bean ) . get ( "annotatedField" ) ) . isEqualTo ( NullNode . getInstance ( ) )
assertThat ( RuntimeHintsPredicates . resource ( ) . forResource ( "my-resource.txt" ) ) . accepts ( hints )
assertEquals ( CONTENT_TYPE , request . getContentType ( ) )
assertEquals ( "sc05" , chosen . getId ( ) )
assertEquals ( "sc5" , chosen . getId ( ) )
assertNotNull ( channel )
assertNotNull ( channel )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertNotNull ( channel )
fail ( "Should fail because application is already killed" )
assertEquals ( nodeHttpAddress , container . getNodeHttpAddress ( ) )
assertThat ( e . getMessage ( ) , is ( String . format ( EXPECTED_ERROR_MESSAGE , value ) ) )
assertThat ( e . getMessage ( ) , is ( "value must not be null!" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertNotNull ( registerResponse )
fail ( "Should fail because application is already killed" )
assertNotNull ( registerResponse )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertEquals ( "user" , info . getUser ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( jwtSessionManager . getUser ( jwtToken ) , "testUser" )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertTrue ( XsdIDValidator . validate ( "test" ) )
assertEquals ( "ArrayList[{1,2}]" , logAdapter . asString ( collection ) )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
assertNull ( cGroupsCpuResourceHandler . postComplete ( mockContainerId ) )
assertTrue ( XsdIDValidator . validate ( "test" ) )
assertTrue ( XsdIDValidator . validate ( "test" ) )
assertNull ( cGroupsMemoryResourceHandler . postComplete ( mockContainerId ) )
assertTrue ( XsdIDValidator . validate ( "test" ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
fail ( "Should throw FileNotFoundException" )
fail ( "Should throw FileNotFoundException" )
assertTrue ( equal )
assertEquals ( "a" , row . get ( 0 ) )
assertTrue ( exception )
assertThat ( handler . execute ( ) , instanceOf ( UpdateResponseHeader . class ) )
assertThat ( new MapRandomizer ( keyRandomizer , valueRandomizer , 3 ) . getRandomValue ( ) ) . hasSize ( 3 )
assertTrue ( runtime instanceof DockerLinuxContainerRuntime )
assertTrue ( runtime instanceof DockerLinuxContainerRuntime )
assertTrue ( runtime instanceof DockerLinuxContainerRuntime )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a privileged launch container failure." )
fail ( "Expected a privileged launch container failure." )
fail ( "Expected a privileged launch container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Should throw FileNotFoundException" )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a pid host disabled container failure." )
fail ( "Should throw FileNotFoundException" )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertFalse ( spied . call ( ) )
assertEquals ( settings , expected )
assertEquals ( "Expected null result" , null , value )
assertEquals ( "Expected null result" , null , value )
assertEquals ( new File ( "dir" , "file" ) , PropertyConverter . toFile ( p ) )
assertEquals ( new File ( "dir" , "file" ) , PropertyConverter . toFile ( p ) )
assertEquals ( IPV4_ROUTES_IDENTIFIER , ribSupportTestImp . routesContainerIdentifier ( ) )
assertEquals ( "user" , info . getUser ( ) )
assertFalse ( isValid )
assertEquals ( app0 . getState ( ) , RMAppState . RUNNING )
assertEquals ( "Move not supported" , ex . getMessage ( ) )
assertEquals ( "Move not supported" , ex . getMessage ( ) )
assertEquals ( "newqueue" , rmApp . getQueue ( ) )
assertEquals ( NodeState . LOST , node . getState ( ) )
assertEquals ( NodeState . SHUTDOWN , node . getState ( ) )
assertEquals ( NodeState . SHUTDOWN , node . getState ( ) )
fail ( "Exception should have been thrown" )
assertNotNull ( ni . getHealthReport ( ) )
assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
assertThat ( actual . execute ( ) , is ( Collections . emptyList ( ) ) )
assertNotNull ( protoString )
fail ( "Exception should have been thrown" )
fail ( "Should throw FileNotFoundException" )
assertEquals ( app0 . getState ( ) , RMAppState . RUNNING )
assertEquals ( 5 , FilterUtils . getUniqueElementMatchingPredicate_WithReduction ( getIntegers ( ) , IS_STRICTLY_GREATER_THAN4 ) )
assertEquals ( ContainerExitStatus . ABORTED , cd . getExitStatus ( ) )
assertEquals ( ContainerExitStatus . PREEMPTED , cd . getExitStatus ( ) )
assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
fail ( "Exception should have been thrown" )
assertEquals ( RMAppState . FAILED , app . getState ( ) )
fail ( "Exception should have been thrown" )
assertTrue ( "exception not thrown for null collection name" , failedAsExpected )
assertTrue ( found )
assertArrayEquals ( new byte [ 0 ] , out )
assertEquals ( expected [ index ++ ] , iterator . next ( ) . longValue ( ) )
assertEquals ( processInfo . getName ( ) , "aprocname" )
assertEquals ( processInfo . getName ( ) , "aprocname" )
assertEquals ( "" , this . realiser . realise ( emptyClause ) . getRealisation ( ) )
assertNull ( th )
assertThat ( output ) . contains ( "Hello Gordon for 60 seconds" )
assertThat ( output ) . contains ( "Hello Gordon for 60 seconds" )
assertThat ( output ) . contains ( "Hello Gordon for 60 seconds" )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertThat ( singleValuedParameter ( ) . toString ( ) , not ( equalTo ( Utils . defaultToString ( singleValuedParameter ( ) ) ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertTrue ( codes . add ( LongEncoding . encode ( i ) . toLowerCase ( ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertTrue ( codes . add ( LongEncoding . encode ( i ) . toLowerCase ( ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertTrue ( result instanceof TestEnum )
assertTrue ( result instanceof PoolingAsyncResponseConsumer )
assertTrue ( result instanceof PoolingAsyncResponseConsumer )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testLaunchRequest ) ) . getDialogState ( ) , DialogState . COMPLETED )
assertEquals ( "Applications" , c . get ( TITLE , "unknown" ) )
assertEquals ( "<memory:10, vCores:1>" , res . toString ( ) )
assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertEquals ( "" , string0 )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertNull ( response )
assertNotNull ( target . getAllUsers ( req , AUTHENTICATOR_NAME ) )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertThat ( function . apply ( Arrays . asList ( "Hello" , " " , "world!" ) ) , equalTo ( "Hello world!" ) )
assertNotNull ( value . getMuleContext ( ) )
assertThat ( PathUtil . toBucketName ( URI . create ( "s3://bucket/foo/bar" ) ) , is ( "bucket" ) )
assertEquals ( chatTlv , chat . toTlv ( ) )
assertEquals ( "aa" , StringUtils . removeWhitespace ( "\t\r\n    aa" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertFalse ( auxService . hasApplication ( appAttemptId . getApplicationId ( ) ) )
assertEquals ( "MondrianCatalogHelper.ERROR_0019 - Failed to flush schema schemaX" , e . getMessage ( ) )
assertEquals ( URI . create ( uri ) , Tools . uriWithTrailingSlash ( URI . create ( "http://example.com/api" ) ) )
assertEquals ( URI . create ( uri ) , Tools . uriWithTrailingSlash ( URI . create ( "http://example.com/api" ) ) )
assertEquals ( "admittedRelationships" , ProcedureRequestUtils . hasPossibleRequestKey ( "admittedrelationships" , Collections . singletonList ( "admittedRelationships" ) ) )
assertNull ( "result" , result )
assertEquals ( N , holder . allAlerts ( ) . size ( ) )
assertThat ( cache . get ( "test" ) , equalTo ( 1 ) )
assertEquals ( ( Integer ) 7 , Collections . max ( list ) )
assertEquals ( list , content )
fail ( e . getMessage ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertThat ( render ( sql ) ) . isEqualTo ( sql )
assertThat ( numwantProvider . get ( RequestEvent . STARTED ) ) . isEqualTo ( 1 )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( "true false true " , sum [ 0 ] )
assertEquals ( "true false true " , sum [ 0 ] )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertThat ( CollectionUtils . getFirst ( Collections . emptySet ( ) , "ABC" ) ) . isEqualTo ( "ABC" )
fail ( )
assertThat ( CollectionUtils . getFirst ( Collections . emptySet ( ) , "ABC" ) ) . isEqualTo ( "ABC" )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertNotNull ( "Verify that the connection is not null." , conn )
assertNotNull ( "Verify that the connection is not null." , conn )
assertTrue ( "incorrect row count returned!" , count > 0 )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertNull ( v )
assertEquals ( ( sum / 100.0D ) , m . avg ( ) , 0.0D )
assertEquals ( 441 , i )
assertEquals ( "Small long return 1010L" , expected , count )
assertTrue ( p . toString ( ) . matches ( "RuntimeESBProviderCallback.*TalendESBJob" ) )
assertThat ( cache . get ( "key" ) ) . isEqualTo ( "foo" )
assertThat ( cache . get ( "key" ) ) . isEqualTo ( "foo" )
assertEquals ( "name" , name )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertThat ( cache . get ( "key" ) ) . isEqualTo ( "foo" )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertThat ( content ) . startsWith ( "fromchild" )
assertThat ( dialect . getNativeDriver ( ) , is ( SparkSimbaDatabaseMeta . DRIVER_CLASS_NAME ) )
assertEquals ( "get [" + i + ']' , values [ i + OFFSET ] , test . get ( i ) , EPSILON )
assertEquals ( expResult , result )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "Small long return 1010L" , expected , count )
assertEquals ( "Small long return 1010L" , expected , count )
assertEquals ( pos , dw . getXPos ( ) , 0 )
assertEquals ( expResult , result )
assertEquals ( 6 , count )
assertEquals ( 6 , count )
assertEquals ( 0 , conn . getMetaData ( ) . getDriverMajorVersion ( ) )
assertEquals ( 0 , conn . getMetaData ( ) . getDriverMajorVersion ( ) )
assertNotNull ( stmt )
assertFalse ( t . failed )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertNotNull ( con . getMetaData ( ) )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertEquals ( list , connection . get ( key ) )
assertEquals ( null , ServerCallContextStack . get ( ) . currentCallee ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "oid" , rs . getArray ( "proargtypes" ) . getBaseTypeName ( ) )
assertTrue ( "Incorrect number of rows returned!" , rs . next ( ) )
assertTrue ( "Incorrect number of rows returned!" , rs . next ( ) )
assertTrue ( count > 0 )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertNull ( rs )
assertTrue ( e . getMessage ( ) . contains ( "Type mismatch" ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "Parameter 0 was not found." , e . getMessage ( ) )
assertTrue ( false )
assertTrue ( filter . test ( storageDomain ) )
assertEquals ( PropertiesConfiguration . DEFAULT_ENCODING , FileBasedConfigurationBuilder . getDefaultEncoding ( conf . getClass ( ) ) )
assertEquals ( "%%EOF\n" , ( ( ByteArrayOutputStream ) out ) . toString ( "US-ASCII" ) )
assertEquals ( "force-square" , SymbolShapeHint . FORCE_SQUARE . toString ( ) )
assertTrue ( maxSequenceSize > 0 )
assertEquals ( false , cache . update ( e1 ) )
assertTrue ( timeString < timeStringBuilder )
assertEquals ( "20" , result )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertEquals ( expectedXml , getXmlWriterContents ( ) )
assertEquals ( "aList = [ 1, 2 ]\n" , new TomlWriter . Builder ( ) . padArrayDelimitersBy ( 1 ) . build ( ) . write ( o ) )
assertEquals ( "X" , Expressions . constant ( "X" ) . toString ( ) )
assertEquals ( true , execute ( "internal: var cpVar : ComplexType" , "cpVar.x == 0" ) )
assertEquals ( expectedXml , getXmlWriterContents ( ) )
assertEquals ( "X" , Expressions . constant ( "X" ) . toString ( ) )
assertEquals ( CACHEABLE , requestPipeline . execute ( new HttpRequest ( URI ) ) )
fail ( "Should throw an exception here" )
assertFalse ( returnedValue )
assertEquals ( 404 , renameSecret ( oldName , newName ) . code ( ) )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertEquals ( "person-name" , name )
assertTrue ( map . containsKey ( hnv . getName ( ) ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( 0 , msg . getAISVersionIndicator ( ) )
assertEquals ( 0 , msg . getAISVersionIndicator ( ) )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
assertEquals ( "Test\n1" , out )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( state . toString ( ) , expectedCookie )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertFalse ( component . execute ( ) )
assertEquals ( "Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService" , result )
assertEquals ( "status code should be 1:" , 1 , statusCode )
assertEquals ( "Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService" , result )
assertNull ( out )
assertEquals ( "and()" , predicate . toString ( ) )
assertTrue ( Integer . toString ( i ) , Double . isNaN ( Gamma . gamma ( i ) ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertThat ( this . arr . get ( 1 ) , is ( 1 ) )
assertThat ( state . getId ( ) , equalTo ( id ) )
assertEquals ( 12 , result )
assertEquals ( i . toString ( ) , "[1.0, 5.0]" )
assertEquals ( tropo . text ( ) , "{\"tropo\":[]}" )
assertEquals ( new String ( buf ) , "ABCD" )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( ElementType . BOOLEAN . size ( ) , ElementType . BOOLEAN . size ( Boolean . FALSE ) )
assertEquals ( maxSize , cacheSize )
assertEquals ( toWaitFor , cnt . get ( ) )
assertEquals ( "true false true " , sum [ 0 ] )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertEquals ( FrameType . GO_AWAY . getType ( ) , type )
assertTrue ( squaresCache . get ( 6 ) == 36 )
assertEquals ( "Annotation attribute 'name' is not unique." , expected , actual )
assertEquals ( count , 2 )
assertEquals ( value , redis . get ( key ) )
assertNotSame ( recycler . get ( ) , o2 )
assertTrue ( set . add ( val ) )
assertTrue ( size == 2 , "Incorrect number of appenders" )
assertThat ( spans ) . isEmpty ( )
assertThat ( intentServiceController . get ( ) . boundIntent ) . isNotNull ( )
assertEquals ( "person-name" , name )
assertEquals ( "Unexpected output - " + retStr , "HelloWorld" , retStr )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertEquals ( "alpha" , v0 . get ( ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e . getMessage ( ) . contains ( undeclaredErrMsg ) )
assertEquals ( new Integer ( 1 ) , cache2 . get ( "test" ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertTrue ( ListUtil . isEmpty ( filterConstraints ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertNull ( v )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertNotNull ( str )
assertThat ( error . get ( ) , instanceOf ( RejectedExecutionException . class ) )
assertEquals ( 0 , latch . getCount ( ) )
assertNotNull ( cfg )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( TestModel . class , field . getType ( ) )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertNull ( "Null check" , obj )
assertNull ( "Null check" , obj )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( "acd" , stringAppender . toString ( ) )
assertEquals ( 1 , f . getOrder ( ) )
assertThat ( actual ) . contains ( 1.0f , atIndex ( 0 ) , withPrecision ( 0.1f ) )
assertEquals ( 4211203 , val )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( "[1, 2, null, [...], foo]" , Arrays . deepToString ( array ) )
assertEquals ( diff ( left , right ) , "abc\n" )
assertEquals ( diff ( left , right ) , "abc\n" )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertThat ( response . cookie ( "c" ) , isValue ( responseCookie ( "c" , "d" ) . build ( ) ) )
assertNotNull ( LabelContainer . getInstance ( ) )
assertNotNull ( ic . getUnsupportedConfigOverrides ( ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( "List<String>" , Pretty . type ( pti ) )
assertEquals ( "List<String>" , Pretty . type ( pti ) )
assertNotNull ( "Generated full name can not be null" , value )
assertNotNull ( "Generated full name can not be null" , value )
assertNotNull ( "Generated full name can not be null" , value )
assertNotNull ( "Generated full name can not be null" , value )
assertThat ( resource . getBuilder ( ) . build ( ) . getPath ( ) , is ( "foo" ) )
assertEquals ( "a" , Util . getName ( mock ) )
assertNull ( sfcProviderRpc . instantiateServiceFunctionChain ( instantiateServiceFunctionChainInput . build ( ) ) )
assertNotNull ( "Class not null" , was )
assertThat ( new JcrValue ( factories , PropertyType . DATE , date ) . getDouble ( ) , is ( ( double ) date . getTime ( ) ) )
assertNotNull ( result )
assertEquals ( "Hello World!" , response )
assertEquals ( "Hello World!" , response )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( false , builder . build ( ) . useMultiThreadedClientPolicy ( ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( "Hola mundo" , result . asString ( ) )
assertEquals ( i , cache . get ( i ) )
assertThat ( underTest . listIdentifiers ( ListIdentifiersParameters . request ( ) . withMetadataPrefix ( FORMAT ) ) . hasNext ( ) , is ( false ) )
assertThat ( type . getBacklogPhase ( ) , is ( "phase 1" ) )
assertThat ( spans ) . isEmpty ( )
assertThat ( spans ) . isEmpty ( )
assertThat ( method . getName ( ) ) . isEqualTo ( "findByLastname" )
assertTrue ( actualMessage . contains ( "map" ) )
assertNotNull ( parameters )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertTrue ( ex . getMessage ( ) . contains ( BigInteger . valueOf ( 2 ) . pow ( PRODUCT_ELEMENTS ) . toString ( ) ) )
assertEquals ( "{\"a\":\"a_value\",\"b\":2}" , JSON . toString ( new JSON ( ) . set ( "a" , "a_value" ) . set ( "b" , 2 ) , new StringBuilder ( ) ) . toString ( ) )
assertEquals ( "192.168.1.0/24" , configuration . getNetworkMask ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( ArrayProducer . INTEGER_BAR , integerBar )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( 0 , proposals . length )
assertEquals ( list . get ( i ++ ) , x )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertThat ( nonAdults ) . size ( ) . isEqualTo ( 2 )
assertEquals ( expected , classMapper . applyOrNull ( Integer . class ) )
assertEquals ( "" , new String ( result ) )
assertNull ( obj )
assertNull ( object )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertNotNull ( oAuth2AccessToken )
assertEquals ( n . getName ( ) , noteObj . getName ( ) )
assertArrayEquals ( new String [ 0 ] , args )
assertEquals ( expectedFields , actual )
assertEquals ( "entry?servicehandler=handler" , CameraImpl . stripContextPath ( serviceHandlerUrl ) )
assertEquals ( name + '.' , record . name ( ) )
assertNull ( a . get ( 6 ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( v , i )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertEquals ( offHeapMutableBytesStore . add ( _values [ i ] ) , i )
assertEquals ( 131l , getalLiteral . getWaarde ( ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertEquals ( "A1" , ref . get ( ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertTrue ( closeable . wasClosed )
assertTrue ( closeable . wasClosed )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertTrue ( value instanceof String )
assertTrue ( "exception not thrown for null collection name" , failedAsExpected )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertFalse ( fail . get ( ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertNull ( getSingleEntity ( service , key ) )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertTrue ( multimap . put ( 4 , "4" ) )
assertEquals ( 10000 + k , ia . get ( k ) )
assertNull ( "DNS data returend" , result )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( message )
assertEquals ( i , cache . get ( i ) )
assertEquals ( null , test . get ( i ) )
assertEquals ( integerSet . size ( ) , 3 )
assertEquals ( ( int ) sut . get ( i ) , i )
assertNull ( cache . get ( 4 ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( i , cache . get ( i ) )
assertNull ( cache . get ( 4 ) )
assertEquals ( i , cache . get ( i ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( "01:23:12.010" , tested . toString ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( counter . get ( ) , NUM_TIMES )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( error , resultRef . get ( ) )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertThat ( faker . bool ( ) . bool ( ) , isOneOf ( true , false ) )
assertEquals ( offHeapMutableBytesStore . add ( _values [ i ] ) , i )
assertArrayEquals ( destArray , retArray )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertTrue ( 10 != connection . createChannel ( ) . getChannelNumber ( ) )
assertEquals ( numTasks , completed . get ( ) )
assertEquals ( e . getValue ( ) , ( Double ) mis . getMedian ( ) )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( 10000 + k , ia . get ( k ) )
assertTrue ( value instanceof String )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( 15 , result )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
assertEquals ( CacheManager . getInstance ( ) , cachingProvider . getCacheManager ( ) )
assertTrue ( value instanceof String )
assertEquals ( list . size ( ) - j , ( ( ( RunCounter ) ( list . get ( j ) ) ) . count ) )
assertEquals ( 0 , source . getEstimatedSizeBytes ( null ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertTrue ( b )
assertThat ( removed . get ( ) ) . isEqualTo ( MAXIMUM )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( false , result )
assertThat ( w . count . get ( 1 ) ) . isNull ( )
assertThat ( setOps . randomMember ( key ) , isEqual ( v1 ) )
assertThat ( setOps . randomMember ( key ) , isEqual ( v1 ) )
assertEquals ( result , BuildWorkspaceStatus . CANCELLED )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertThat ( cacheManager . getCache ( "cache" ) , sameInstance ( cache ) )
assertNull ( v )
assertFalse ( freeCalled . get ( ) )
assertNull ( v )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( "http://baeldung.com/a-guide-to-java-sockets" , relativeUrl . toString ( ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( list , content )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertThat ( cc . get ( ) ) . isEqualTo ( 1 )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "@" + i , raw [ i ] , array . get ( i ) . booleanValue ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertTrue ( roleNames . toString ( ) , roleNames . isEmpty ( ) )
assertEquals ( "\\u0000\\u0001\\u0002\\u0003\\u0004" , output . toString ( ) )
assertThat ( counter . get ( ) ) . isEqualTo ( 1 )
assertEquals ( two , one )
assertTrue ( e instanceof IllegalStateException )
assertEquals ( numTasks , completed . get ( ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertArrayEquals ( result , heapsort . sort ( input ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertEquals ( list , content )
assertEquals ( ShapeElementType . POLYGON , reader . getShapeElementType ( ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( expected , actual )
assertEquals ( null , test . get ( i ) )
assertEquals ( results . get ( i ) , norm . normalise ( "arxiv" , tests . get ( i ) ) )
assertEquals ( "Hello, World!" , client . hello ( "World" ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( ( Integer ) 1 , service . getFromCache ( CACHE_NAME , "test" ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertEquals ( - 1 , cache . get ( 1 ) . intValue ( ) )
assertEquals ( - 1 , cache . get ( 1 ) . intValue ( ) )
assertEquals ( "name" , name )
assertEquals ( i , cache . get ( i ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertThat ( c . peek ( 1 ) ) . isEqualTo ( ( Integer ) 1 )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertTrue ( multiMap . remove ( key , value ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertThat ( loader . reload ( Int . valueOf ( 1 ) , Int . valueOf ( 1 ) ) ) . isEqualTo ( 1 )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThat ( ( String ) queue . poll ( NUMBER_OF_ITEMS ) , is ( String . valueOf ( i ) ) )
assertEquals ( expResult , result )
assertThat ( spans ) . isEmpty ( )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( false , cache . update ( e1 ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "Sheet name cannot contain '.'" , e . getMessage ( ) )
assertEquals ( "Sheet name cannot contain '.'" , e . getMessage ( ) )
assertEquals ( value , redis . get ( key ) )
assertEquals ( out . get ( Integer . toString ( i ) ) , Integer . toString ( i ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( true , builder . metadata ( ) . id ( "1234" ) . draft ( true ) . build ( ) . isDraft ( ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i , cache . get ( i ) )
assertEquals ( buf , bufClone )
assertThat ( failed . get ( ) ) . withFailMessage ( "counter already modified" ) . isFalse ( )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
fail ( e . getMessage ( ) )
assertArrayEquals ( message , decrypted )
assertTrue ( bean . isImportDisabled ( ) )
assertTrue ( bean . isImportDisabled ( ) )
assertThatEventIsAccessible ( )
assertThatEventIsAccessible ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertNull ( exceptions [ i ] )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThat ( spans ) . isEmpty ( )
assertTrue ( result )
assertEquals ( null , test . get ( i ) )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertEquals ( "ProtocolId" , consumer . getConsumerKey ( ) )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( expected ++ , n )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( "@Mock.value() and @Mock.type() are aliases, you can't specify both at the same time" , e . getMessage ( ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertFalse ( called . get ( ) , "Callback should not be run" )
assertNull ( documentation )
assertNull ( set . get ( ) )
assertTrue ( promise . cancel ( false ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertEquals ( strings . get ( i ) , writer . get ( i ) )
assertThat ( future . get ( ) ) . isEqualToIgnoringCase ( "hello" )
assertEquals ( 0.0 , cvec . get ( i ) , 0.0 )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertFalse ( fail . get ( ) )
assertTrue ( resultMap != null && resultMap . size ( ) == 0 )
assertFalse ( isTimeoutSet )
assertEquals ( 2 , autorisaties . size ( ) )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertEquals ( "Retrieved value should match entered value" , value , retrievedValue )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertTrue ( output . get ( ) . get ( 0 ) instanceof RedisException )
assertEquals ( value , redis . get ( key ) )
assertEquals ( target . size ( ) , 4 )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertTrue ( cache instanceof AsyncUfsAbsentPathCache )
assertTrue ( instantiator . newInstance ( SerializableWithUIDClass . class ) instanceof SerializableWithUIDClass )
assertEquals ( target . size ( ) , 4 )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertNull ( map . get ( null ) )
assertEquals ( 10000 + k , ia . get ( k ) )
assertEquals ( Integer . valueOf ( 10 - i ) , m . get ( i ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertFalse ( failed )
assertArrayEquals ( new String [ ] { "2" , "3" } , testBean . varArgs )
assertTrue ( isExpected )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( 0 , msg . getAISVersionIndicator ( ) )
assertThat ( get ( 1 , "clients" , "client1" ) , equalTo ( "Mathieu" ) )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertEquals ( "/plugin/build-failure-analyzer/images" , PluginImpl . getStaticImagesBase ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( Version . str ( ) )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertThat ( e . getMessage ( ) , is ( "value must not be null!" ) )
assertTrue ( ctx . getAmountType ( ) == DummyAmount . class )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertTrue ( latch . await ( LISTENER_TIMEOUT , TimeUnit . MILLISECONDS ) )
assertEquals ( "" , result )
assertEquals ( "value" , processor . getValue ( request ) )
assertNull ( t . getFormat ( null ) )
assertEquals ( n , set . size ( ) )
assertThat ( person . getIdProperty ( ) ) . satisfies ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String . class ) )
assertThat ( person . getIdProperty ( ) ) . satisfies ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String . class ) )
assertEquals ( " AB | CD |" , iv . getValues ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "foobar" , result )
assertEquals ( "foobar" , result )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "Hello, World!" , client . hello ( "World" ) )
assertTrue ( output . get ( ) . get ( 0 ) instanceof RedisException )
assertEquals ( position2 . anyOther ( ) , result )
assertTrue ( ClassSize . REFERENCE == 4 || ClassSize . REFERENCE == 8 )
assertThat ( state . getId ( ) , notNullValue ( ) )
assertEquals ( "red" , tuple . getRed ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertNull ( "stress test failed" , failure . get ( ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( hash1 , hash2 )
assertNull ( page )
assertThat ( objectValidator . validate ( validObjectWithFilter ) , is ( empty ( ) ) )
assertEquals ( BundleType . TEXTMATE , BundleType . fromDirectory ( getBundleDirectory ( TestUtil . MARKDOWN_TEXTMATE ) ) )
assertFalse ( readable )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertEquals ( y , res )
assertTrue ( Double . isNaN ( map . remove ( 50 ) ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i + 1 , t1 . get ( i ) . asInt4 ( ) )
assertEquals ( "alpha" , v0 . get ( ) )
assertEquals ( "Result did not match expected value." , key , result )
assertEquals ( delimitWithOriginal ( ) , delimitWithMina ( ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertNull ( StringUtils . padEnd ( null , 5 , '*' ) )
assertEquals ( i . toString ( ) , "[1.0, 5.0]" )
assertThat ( this . modelBuilder . getModel ( ) , is ( equalTo ( map ) ) )
assertThat ( this . modelBuilder . getModel ( ) , is ( equalTo ( map ) ) )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertTrue ( set . add ( val ) )
fail ( e . getMessage ( ) )
assertTrue ( "By default should return true" , getTransactionAdapter ( ) . run ( null ) )
assertNull ( v )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertThat ( store . getTileSetById ( testTileSet . getId ( ) ) , equalTo ( testTileSet ) )
assertNotNull ( FieldName . unmarshal ( "x" ) )
assertNotNull ( FieldName . unmarshal ( "x" ) )
assertEquals ( expected , actual )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertThat ( nAdapter . adaptedValue ( ) , equalTo ( "1" ) )
assertThat ( discoverer . getMapping ( ChildWithTypeMapping . class , method ) ) . isEqualTo ( "/child/parent" )
assertNotNull ( this . registry . getService ( new BasicServiceConfiguration < > ( FakeInterface . class ) ) )
assertFalse ( noStatusCodes . shouldRetry ( RetryPolicyContexts . withStatusCode ( 404 ) ) )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertEquals ( "There must not be claims for an opaque access token." , expectedValue , opaqueAccessToken . getClaims ( ) )
assertEquals ( 0 , matches )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , equalTo ( node ) )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , equalTo ( node ) )
assertEquals ( new Integer ( 1 ) , cache2 . get ( "test" ) )
assertThat ( removed . get ( ) ) . isEqualTo ( MAXIMUM )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertEquals ( numTasks , completed . get ( ) )
assertEquals ( "entry?servicehandler=handler" , CameraImpl . stripContextPath ( serviceHandlerUrl ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertEquals ( "Client reply should have matched request" , message , receivedReply . get ( ) )
assertEquals ( 10 , docs . size ( ) )
assertThat ( spans ) . isEmpty ( )
assertThat ( spans ) . isEmpty ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( expResult , result )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( fn . apply ( node ) . getPublicAddresses ( ) , ImmutableSet . of ( "174.129.173.155" ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertFalse ( isTimeoutSet )
assertEquals ( 1d , evaluate ( "SelfRef" , arguments ) )
assertTrue ( bool . allFalse ( ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertEquals ( expectedCounterDateValues , result [ i ] . getDateList ( ) . size ( ) )
assertTrue ( e . getMessage ( ) . toLowerCase ( ) . contains ( "too many open files" ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( items )
assertTrue ( list . contains ( "foo" ) )
assertNull ( result )
assertEquals ( "abc~" , KeywordsUtil . toFuzzy ( "abc~" ) )
assertEquals ( 0 , size )
assertEquals ( 0 , size )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertEquals ( left , right )
assertEquals ( Long . toString ( event . getServerAdapter ( ) . getContentLength ( ) ) , result )
assertNotEquals ( ap1 , ap2 )
assertEquals ( "Hola mundo" , result . asString ( ) )
assertThat ( getInst ( ) . findProject ( id ) , nullValue ( ) )
assertThat ( getInst ( ) . findProject ( id ) , nullValue ( ) )
assertEquals ( "test" , value )
assertEquals ( 2 , count )
assertTrue ( myHashMap . get ( 2 ) . equals ( 3 ) )
assertArrayEquals ( new Object [ ] { 9 , 8 , 9 , 10 , null , null , null , null , null , null , 1 , 2 , 5 , 6 , 7 , 8 } , a . array )
assertEquals ( actual , expected )
assertEquals ( expectedQueueCount , metricsRegistry . getSnapshotLists ( ) . size ( ) )
assertEquals ( expectedQueueCount , metricsRegistry . getSnapshotLists ( ) . size ( ) )
assertEquals ( 2 , map . size ( ) )
assertEquals ( new Integer ( EXPECTED ) , value )
assertEquals ( 10 , s . size ( ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( entry . getValue ( ) , ( Integer ) RawConverter . fromMarketOrderIsBuyOrder ( entry . getKey ( ) ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertNotEquals ( ap1 , ap2 )
assertEquals ( "SELECT * FROM KARAF_LOCK FOR UPDATE" , statements . getLockCreateStatement ( ) )
assertEquals ( 10 , query . execute ( ) . list ( ) . size ( ) )
TestCase . assertEquals ( 9 , n )
assertEquals ( "[formContent.commonProp, formContent.prop1][formContent.commonProp, formContent.prop2]" , desktop . query ( "#result" ) . as ( Label . class ) . getValue ( ) )
assertTrue ( closed . get ( i ) , "Iterator #" + i + " is not closed" )
assertThat ( actual . mkString ( "" ) , is ( equalTo ( "" ) ) )
assertThat ( actual . mkString ( "" ) , is ( equalTo ( "" ) ) )
assertEquals ( Integer . valueOf ( 0 ) , entry . getKey ( ) )
assertEquals ( "1: a, 2: b, 3: c," , html )
assertEquals ( null , test . get ( i ) )
assertThat ( map . assoc ( 1 , 1 ) , sameInstance ( map ) )
assertThat ( spans ) . isEmpty ( )
assertThat ( iMap . get ( "theFoo" ) , _isA ( Foo . class ) )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( entry . getValue ( ) , ( Integer ) RawConverter . fromMarketOrderIsBuyOrder ( entry . getKey ( ) ) )
( ) -> assertEquals ( "Properties were not counted correctly!" , Long . valueOf ( 8 ) , propertyService . countDatabaseRows ( ) ) )
assertEquals ( 100 , bigQueue . size ( ) )
assertTrue ( underTest . completable ( ) instanceof ConcurrentCompletable )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertArrayEquals ( "results == fooBar" , results , values )
assertEquals ( false , result )
assertEquals ( CALLABLE_RETURNED_VALUE_OK , runningResult )
assertEquals ( word , word2 )
assertTrue ( majorVersion >= 1 )
assertThat ( json , RegexMatcher . matches ( ISO_8601_DATE_FORMAT_REGEX ) )
assertEquals ( 10 , query . execute ( ) . list ( ) . size ( ) )
assertEquals ( n , set . size ( ) )
assertTrue ( "The date and time was not formatted in ISO-8601 format in messages.log." , lines . size ( ) > 0 )
assertEquals ( list . get ( i ++ ) , x )
assertEquals ( expResult , result )
assertEquals ( Arrays . asList ( proxy1 . lastLocalAddress ( ) , proxy2 . lastLocalAddress ( ) ) , res )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3,)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3,)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertTrue ( e . getMessage ( ) . contains ( "Type mismatch" ) )
assertEquals ( "SELECT *\nFROM tbl_name\nORDER BY RAND();" , text )
assertEquals ( "SELECT *\nFROM tbl_name\nORDER BY RAND();" , text )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3,)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3,)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( value2 , cache . get ( key2 ) )
assertEquals ( i , to . get ( ) )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertTrue ( value instanceof String )
assertTrue ( result )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThatThrownBy ( ( ) -> b . invalidInsertInt ( 1 ) ) . isInstanceOf ( UnableToCreateStatementException . class )
assertThatThrownBy ( ( ) -> b . invalidInsertInt ( 1 ) ) . isInstanceOf ( UnableToCreateStatementException . class )
assertEquals ( 1 , list . size ( ) )
assertFalse ( workWasDone [ 0 ] )
assertEquals ( "" + i , map . get ( "" + i ) )
assertEquals ( "SELECT 1 + 1\nFROM DUAL;" , text )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertFalse ( subMgmt . hasCurrentUserSubscriptions ( ) )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( ElementType . BOOLEAN . size ( ) , ElementType . BOOLEAN . size ( Boolean . FALSE ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( 10 , s . size ( ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThat ( c . toString ( ) ) . isNotNull ( )
assertEquals ( "" + i , map . get ( "" + i ) )
assertTrue ( hostsSet . contains ( httpHosts . nextHost ( ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 15 , result )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertEquals ( "EJBServlet OK" , res )
assertTrue ( ListUtil . isEmpty ( filterConstraints ) )
assertEquals ( "the decorator" , service . name ( ) )
assertEquals ( 9L , value . get ( ) )
assertTrue ( value instanceof String )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertTrue ( value instanceof String )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( syncMap . size ( ) ) . isEqualTo ( 3 )
assertEquals ( null , test . get ( i ) )
assertEquals ( 0 , commonsHashMap . size ( ) )
assertEquals ( null , test . get ( i ) )
assertEquals ( value , executeSelectSql ( conn , "select * from PERSON" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( value2 , cache . get ( key2 ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertNotNull ( connection . getMetaData ( ) . getDatabaseProductVersion ( ) )
assertThat ( new Parent ( ) . get ( ) ) . isEqualTo ( "from parent" )
assertFalse ( isEventSteppedPrice )
assertEquals ( i + 1 , logs . get ( i ) . getEnd ( ) )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
fail ( )
fail ( "Should fail" )
fail ( )
assertThat ( user . getKeySet ( ) . getUserID ( ) ) . isEqualTo ( "Sample Key <sample@wesabe.com>" )
assertEquals ( oneRecord , copiedRecord )
assertEquals ( "Expecting number of duplicates for package " + packageName , expectedNum , pVer . getBundles ( ) . size ( ) )
assertNotNull ( namesrvConfig )
assertEquals ( null , ServerCallContextStack . get ( ) . currentCallee ( ) )
assertFalse ( this . core . cancelRequest ( 1L ) )
assertFalse ( this . core . cancelRequest ( 1L ) )
assertNotNull ( str )
assertNotNull ( str )
assertEquals ( shrankWhitespacesInSql , actual )
assertEquals ( p , is . readIdPath ( ) )
assertEquals ( p , is . readIdPath ( ) )
assertEquals ( p , is . readIdPath ( ) )
assertEquals ( weekDaysFromFiscalCalendarRules . get ( i ) . toString ( ) , weekDays [ i ] . name ( ) )
assertEquals ( "ok" , get ( "/rest/health" ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( value2 , cache . get ( key2 ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . contains ( "continuous chain" ) , "Wrong message: " + e . getMessage ( ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertThat ( set ) . isEmpty ( )
assertEquals ( "liferayforms" , actualString )
assertThat ( mockSlice . getNumber ( ) ) . isEqualTo ( 1 )
assertEquals ( CONNECTION_URL , connectionURL )
assertEquals ( loader , instance )
assertThat ( foo . get ( ) , is ( nullValue ( ) ) )
assertEquals ( 1 , intStack . size ( ) )
assertThat ( metadata . getColumnLabel ( i + 1 ) , is ( columnNames [ i ] ) )
assertThat ( metadata . getColumnLabel ( i + 1 ) , is ( columnNames [ i ] ) )
assertEquals ( future , future . interruptible ( ) )
assertThat ( metadata . getColumnLabel ( i + 1 ) , is ( columnNames [ i ] ) )
assertEquals ( "bulk" , messages [ 0 ] )
assertEquals ( hashCodeBeforeActivation , hashCodeAfterActivation )
assertEquals ( hashCodeBeforeActivation , hashCodeAfterActivation )
assertEquals ( hashCodeBeforeActivation , hashCodeAfterActivation )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertTrue ( a instanceof AMatrix )
assertEquals ( new Point2D . Double ( 1.1 , 2.2 ) , GeoJson . p ( 1.1 , 2.2 ) )
assertEquals ( expected , input )
assertEquals ( v [ i ] + inc , x . getEntry ( i ) , 0 )
assertArrayEquals ( array [ i ] , toArray [ i ] , 1e-5 )
assertArrayEquals ( new double [ ] { 2.0003046560878155 , 2.0012190885976433 , 2.002744691995842 } , rayleighAux . getAirMass ( ) , 1e-8 )
assertArrayEquals ( arrExp , vec1 . add ( vec2 ) . toArray ( ) , 0.000001 )
assertArrayEquals ( doubles , decoded , 0.0000001 )
assertEquals ( Matrix . create ( new double [ ] [ ] { { 1 , 1 } , { 3 , 2 } } ) , m )
assertEquals ( ids . getInt ( i ) , myEnumerator . catchCorruption ( new CorruptAndEnumerateAfter ( value ) ) . intValue ( ) )
assertNull ( JsUtils . escapeStrArray ( null ) )
assertNull ( JsUtils . escapeStrArray ( null ) )
assertTrue ( selectie . isUitvoerbaar ( ) )
assertTrue ( selectie . isUitvoerbaar ( ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertTrue ( images [ i ] == theSet . get ( NAMES [ i ] ) )
assertTrue ( images [ i ] == theSet . get ( NAMES [ i ] ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertTrue ( sorted [ 0 ] )
assertEquals ( "someobjectvalue" , forTestSetObjectVariable )
assertEquals ( ImmutableList . of ( ) , Iterators . divideIterable ( ImmutableList . of ( ) , 2 ) )
assertEquals ( 0 , arr1 . length )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "{foo,bar}" , result )
assertEquals ( 0 , array . length )
assertEquals ( Math . sqrt ( vec1 . get ( i ) ) , vec3 . get ( i ) , 0.000001 )
assertEquals ( "Expected and actual values should be the same." , defaultValue , Metrics . getAsString ( metrics , null , defaultValue ) )
assertEquals ( 0.210 , ira , 0.01 )
assertEquals ( srcValue , resultValue )
assertArrayEquals ( "Arrays differ." , expected , matrix [ 0 ] , TOLERANCE )
assertArrayEquals ( "Arrays differ." , expected , matrix [ 0 ] , TOLERANCE )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertArrayEquals ( new Integer [ ] { 4 , 3 , 2 , 1 , 0 } , array )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertArrayEquals ( array , new EuclideanDoublePoint ( array ) . getPoint ( ) , 1.0e-15 )
assertEquals ( false , msg . getDTEFlag ( ) )
assertEquals ( false , msg . getDTEFlag ( ) )
assertThat ( isEmpty ( aFile ) ) . isFalse ( )
assertEquals ( 10 , s . size ( ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( 5 , supplier . get ( ) , 0.1 )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "text/css" , ContentTypeResolver . get ( "somefile.css" ) )
assertEquals ( 10 , s . size ( ) )
assertThat ( HardSoftScore . of ( - 147 , - 258 ) . withInitScore ( - 7 ) ) . isEqualTo ( HardSoftScore . ofUninitialized ( - 7 , - 147 , - 258 ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertEquals ( a , a . copy ( ) )
assertThat ( NaN ( ) ) . isCloseTo ( Double . NaN , within ( 0d ) )
assertEquals ( 45 , accumulator . sum )
assertThat ( support . lastMessage ( ) , is ( loggingEvent ( ERROR , "Bad!" , RuntimeException . class , "Error details" ) ) )
assertEquals ( 2 , count )
assertNull ( props . get ( "testKey" ) )
assertEquals ( 5L , value . get ( ) )
assertEquals ( testSize , set . size ( ) )
assertEquals ( 3 , IteratorUtils . count ( iterable . iterator ( ) ) )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertEquals ( RewriteUtils . exhaustiveRewrite ( "a" , ( x ) -> reductions . get ( x ) . stream ( ) ) . collect ( Collectors . toSet ( ) ) , new HashSet < > ( Arrays . asList ( "d" , "z" ) ) )
assertEquals ( 0 , tombstonePartitionedChunk . getChunkNumber ( ) )
assertEquals ( 1 , retryQueue . size ( ) )
assertEquals ( 0 , constraints . length )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( globalCountries . size ( ) , 3 )
assertTrue ( "The date and time was not formatted in ISO-8601 format in messages.log." , lines . size ( ) > 0 )
assertThat ( filteredList . size ( ) , Matchers . is ( nameFilterSet . size ( ) ) )
assertTrue ( personListFiltered . size ( ) == 4 )
assertEquals ( 5 , filteredList . size ( ) )
assertTrue ( personListFiltered . size ( ) == 4 )
assertTrue ( personListFiltered . size ( ) == 4 )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertFalse ( getInstance ( ) . isDue ( ) )
assertNull ( v )
assertFalse ( getInstance ( ) . isDue ( ) )
assertFalse ( getInstance ( ) . isDue ( ) )
assertNull ( result )
assertNull ( result )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 4 - 3 )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( list . size ( ) - j , ( ( ( RunCounter ) ( list . get ( j ) ) ) . count ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertTrue ( CustomAsyncObserverExtension . NOTIFIED )
assertEquals ( 0 , latch . getCount ( ) )
assertTrue ( exceptionCaught . get ( ) )
assertEquals ( integerList . size ( ) , 4 )
fail ( )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "myvalue2" , configuration . getProperties ( ) . get ( "mykey" ) )
assertEquals ( "myvalue2" , configuration . getProperties ( ) . get ( "mykey" ) )
assertEquals ( arrExpected . get ( i ) , email . getFromAddress ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertTrue ( condition [ 0 ] )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertTrue ( "Resultaatmap moet leeg zijn" , result . isEmpty ( ) )
assertTrue ( "Resultaatmap moet leeg zijn" , result . isEmpty ( ) )
assertEquals ( "The input stream to read bytes from cannot be null!" , expected . getMessage ( ) )
assertEquals ( 123456783L , lmsc1 . forwardTransmittedFrames ( ) . longValue ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "/content/dam/foo/bar" , definition . getId ( ) )
assertNotNull ( processInstance )
assertFalse ( groupService . isGroupMemberOfGroup ( "g1" , group . getId ( ) ) )
assertEquals ( toString ( dest ) , "!!" + data . substring ( 0 , halfDataLength ) )
assertEquals ( result , new Integer ( 3 ) )
assertThat ( transactionManagerFactory . get ( ) instanceof JtaTransactionManagerFactory ) . isTrue ( )
assertTrue ( "thread should have been waiting for at least 500ms (1s delay)" , timeTook > 500 )
assertThat ( transactionManagerFactory . get ( ) instanceof JtaTransactionManagerFactory ) . isTrue ( )
assertThat ( transactionManagerFactory . get ( ) instanceof JtaTransactionManagerFactory ) . isTrue ( )
assertThat ( list . get ( 0 ) ) . isEqualTo ( "stilton" )
assertThat ( list . get ( 0 ) ) . isEqualTo ( "stilton" )
assertThat ( wizardPageUnderTest . validateFilePath ( System . getProperty ( "java.io.tmpdir" ) ) . isOK ( ) ) . isTrue ( )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( getCollection ( ) . isRemoteCollection ( ) )
assertTrue ( getCollection ( ) . isRemoteCollection ( ) )
assertTrue ( singleton . ejb ( ) )
assertEquals ( defaultFileSystemURL , configurationProxy . get ( "fs.default.name" , "" ) )
assertNotNull ( "Method returned null result." , result )
assertNotNull ( JAXBSupport . createUnmarshaller ( ) )
assertNotNull ( "Method returned null result." , result )
assertNotNull ( JAXBSupport . createUnmarshaller ( ) )
assertTrue ( date != null )
assertEquals ( "/content/dam/foo/bar" , definition . getId ( ) )
assertThat ( change . isBreakingChange ( aConnector ( ) . build ( ) ) ) . isFalse ( )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertEquals ( System . getProperty ( "user.dir" ) , value )
assertThat ( doc . getName ( ) ) . isEqualTo ( name )
assertThat ( doc . getName ( ) ) . isEqualTo ( name )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( "Knowing the key strength is required to generate a key." , exception . getMessage ( ) )
assertThat ( result . getContent ( ) ) . containsExactly ( dave , oliver )
assertEquals ( null , result )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> interceptor . afterPropertiesSet ( ) )
assertNotNull ( limitedValueWidget )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertNotNull ( result )
assertEquals ( 12 , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( s , result )
assertEquals ( 2 , result . getValue ( ) . intValue ( ) )
assertEquals ( 42 , calc . getResult ( ) )
assertEquals ( 0 , injector . injectables ( ) . count ( ) )
assertThat ( this . h . getId ( ) , is ( equalTo ( componentId ) ) )
assertEquals ( "ThreadId should be the same" , Thread . currentThread ( ) . getId ( ) , methodThreadId )
assertEquals ( "ThreadId should be the same" , Thread . currentThread ( ) . getId ( ) , methodThreadId )
assertNull ( value , "value was saved" )
assertNotNull ( classLoader )
assertNotNull ( classLoader )
assertNotNull ( classLoader )
assertThat ( ClassUtils . getCallerClassLoader ( ClassUtilsTest . class ) , sameInstance ( ClassUtilsTest . class . getClassLoader ( ) ) )
assertNotNull ( classLoader )
assertNotNull ( classLoader )
assertNotNull ( classLoader )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertEquals ( "foo" , evaluate ( "message.payload" , event ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertEquals ( 1 , this . instance . execute ( "test()" ) )
assertEquals ( "Iteration #" + i , "jdbc:hsqldb:mem:fo" + i , url ( failover . getConnection ( ) ) )
assertEquals ( 0 , estimatedSizeBytes )
assertThat ( userInfo . getUser ( ) , is ( nullValue ( ) ) )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( 0 , estimatedSizeBytes )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 . FILTER(?user = ?_c4 || ?user = ?_c5 || ?user = ?_c6) }" )
assertNotNull ( JsonbSupplier . getInstance ( ) )
assertEquals ( "name" , name )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> interceptor . afterPropertiesSet ( ) )
assertThat ( span , span ( ) . withTag ( TestResource . TEST_ATTRIBUTE_KEY . getKey ( ) , TestResource . TEST_ATTRIBUTE_VALUE ) )
assertEquals ( ForgotPasswordState . CONFIRMATION_CODE , forgotPasswordResult . getState ( ) )
assertTrue ( regionManager . getId ( ) != 0 )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNotSame ( NULL , deserialized . get ( 0 ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertNotNull ( build )
assertThat ( udf . nullIf ( null , null ) , is ( nullValue ( ) ) )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertThat ( attributeList ) . containsExactly ( name ( "firstName" ) . value ( "Leia" ) , name ( "lastName" ) . value ( "Organa" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertNotNull ( workspace )
assertTrue ( saved > 0 )
assertNotNull ( workspace )
assertEquals ( "name" , name )
assertNotNull ( workspace )
assertEquals ( Constants . FOLLOW_PARAM + "=111111111" + UrlCodec . encode ( "," ) + "222222222" , endpoint . getQueryParamString ( ) )
assertEquals ( "(1=100,2=200,3=300)" , map . toString ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNotNull ( layout )
assertEquals ( Constants . FOLLOW_PARAM + "=111111111" + UrlCodec . encode ( "," ) + "222222222" , endpoint . getQueryParamString ( ) )
assertEquals ( expected , actual )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( udf . bigIntFromBytes ( toByteBuffer ( 5000000000L ) ) , is ( 5000000000L ) )
assertEquals ( 0L , result )
assertThat ( builtObject . transactGetItems ( ) , is ( nullValue ( ) ) )
assertEquals ( "PUT" , restMethodName )
assertNotNull ( layout )
assertEquals ( "[1, 1, 1]" , result . toString ( ) )
assertEquals ( "[1, 1, 1]" , result . toString ( ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertTrue ( driver ( ) . getTitle ( ) . contains ( "Dashboard" ) , "The 'test' user is logged in and redirected." )
assertEquals ( 2000 , builder . build ( ) . getSession ( ) )
assertTrue ( driver ( ) . getTitle ( ) . contains ( "Dashboard" ) , "The 'test' user is logged in and redirected." )
assertNotNull ( JsonbSupplier . getInstance ( ) )
assertEquals ( "error message wrong" , sb . toString ( ) , _exception . toString ( ) )
assertEquals ( "error message wrong" , sb . toString ( ) , _exception . toString ( ) )
assertNotNull ( aaaFilterChain )
assertNull ( "No arg constructor" , group . getName ( ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "FileUtils" , fileUtils . toString ( ) )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringFix ( 0 ) , is ( "" ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertNotNull ( aaaFilterChain )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
ContractInputAssert . assertThat ( input ) . hasName ( "firstName" ) . hasType ( ContractInputType . TEXT ) . hasNoInputs ( )
ContractInputAssert . assertThat ( input ) . hasName ( "firstName" ) . hasType ( ContractInputType . TEXT ) . hasNoInputs ( )
ContractInputAssert . assertThat ( input ) . hasName ( "firstName" ) . hasType ( ContractInputType . TEXT ) . hasNoInputs ( )
ContractInputAssert . assertThat ( input ) . hasName ( "firstName" ) . hasType ( ContractInputType . TEXT ) . hasNoInputs ( )
assertThat ( Instructions . load ( file ) ) . isEmpty ( )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertThat ( e . getCause ( ) ) . isNotNull ( )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertNull ( result )
assertEquals ( 1000 , properties . pageSize . getValue ( ) . longValue ( ) )
assertEquals ( ChargingStation . UNKNOWN_OPERATOR , cs . getOperator ( ) )
assertEquals ( ChargingStation . UNKNOWN_OPERATOR , cs . getOperator ( ) )
assertNotNull ( arrayPath . get ( ConstantImpl . create ( 0 ) ) )
assertArrayEquals ( ints , actuals )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertTrue ( result )
assertEquals ( 0 , size )
assertTrue ( result )
assertEquals ( true , driver . isStorageOfferAvailable ( offer . getId ( ) ) )
assertEquals ( "A plan, a plan, a canal, Panama." , IO . collect ( stream ) )
assertEquals ( "A plan, a plan, a canal, Panama." , IO . collect ( stream ) )
assertEquals ( expectedPropertyClass , definition . getPropertyClass ( ) )
assertEquals ( CollectionUtils . EMPTY_COLLECTION , coll )
assertEquals ( 0 , size )
assertEquals ( textRange , defaultEditorAdapter . getSelectedTextRange ( ) )
assertEquals ( serializer . deserialize ( is , RequestEnvelope . class ) , requestEnvelope )
assertEquals ( serializer . deserialize ( is , RequestEnvelope . class ) , requestEnvelope )
assertThat ( factory . computedQuery ( QUERY , parameters ) , is ( equalTo ( QUERY ) ) )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertEquals ( "value" , value )
assertEquals ( ERROR_NULL_HTTPCLIENT , e . getMessage ( ) )
assertNull ( bean . getStringValue ( ) )
assertNull ( bean . getStringValue ( ) )
assertNull ( bean . getStringValue ( ) )
assertNull ( bean . getStringValue ( ) )
assertNull ( bean . getStringValue ( ) )
assertTrue ( e . getMessage ( ) . contains ( "IllegalArgumentException" ) )
assertTrue ( e . getMessage ( ) . contains ( "IllegalArgumentException" ) )
assertEquals ( "Received a Null response" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertNotNull ( dataSource . getConnection ( "" , "" ) )
assertTrue ( result )
assertTrue ( result )
assertTrue ( cs . communicationAllowed ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" , "test" ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( 1 , watcher . getLocks ( ) . size ( ) )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertEquals ( serializer . deserialize ( is , RequestEnvelope . class ) , requestEnvelope )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertThat ( fossologyHandler . setFingerPrints ( newFingerPrints ) , sameInstance ( requestStatus ) )
assertEquals ( 0 , response . getResultList ( POServicePricing . class ) . size ( ) )
assertThat ( metaStoreMapping . getLatency ( ) , is ( LATENCY ) )
assertThat ( metaStoreMapping . getLatency ( ) , is ( LATENCY ) )
assertEquals ( serializer . serialize ( responseEnvelope ) , "foo" )
assertThat ( metaStoreMapping . getLatency ( ) , is ( LATENCY ) )
assertThat ( provider . viewId ( ) ) . isEqualTo ( "org.bonitasoft.studio.views.properties.process.general" )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertNull ( namedConfig . get ( "non.existent.key" ) )
assertNull ( namedConfig . get ( "non.existent.key" ) )
assertNull ( namedConfig . get ( "non.existent.key" ) )
assertEquals ( "simply the best" , journey . category ( ) )
assertEquals ( "simply the best" , journey . category ( ) )
assertEquals ( "simply the best" , journey . category ( ) )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertThat ( info . getFor ( ) , is ( "id1" ) )
assertEquals ( bean . getId ( ) , ( Long ) 1L )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertEquals ( "" , buf . toString ( ) )
assertThat ( gen ( "View * TouchUp -12 34" ) , is ( "app.view().touchUp(-12, 34);" ) )
assertEquals ( "" , result )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
assertThat ( valueElement . getConstraints ( ) , is ( NO_COLUMN_CONSTRAINTS ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertNotNull ( val . isValid ( new Address ( ) , FhirContext . forR4 ( ) ) )
assertThat ( e . getMessage ( ) , containsString ( "Expected exception: " + AssumptionViolatedException . class . getName ( ) ) )
assertEquals ( "null" , mock . oneArray ( nullArray ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNull ( result )
assertNotNull ( result )
assertEquals ( message , e . getMessage ( ) )
assertNotNull ( result )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertEquals ( "" , result )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "" , result )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertTrue ( customer )
assertTrue ( future . cancel ( true ) )
assertTrue ( customer )
assertTrue ( future . cancel ( true ) )
assertTrue ( future . cancel ( true ) )
assertTrue ( future . cancel ( true ) )
assertTrue ( future . cancel ( true ) )
assertTrue ( future . cancel ( true ) )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
assertEquals ( "Invocation cannot be null!" , e . getMessage ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( parser . parseAxisStep ( tokenize ( "*" ) ) , is ( axisStep ( wildcard ( ) ) ) )
assertThat ( table . getContainer ( ) ) . isEqualToIgnoringCase ( "DBNAME" )
assertThat ( grouper . getName ( ) , equalTo ( "tag" ) )
assertTrue ( offending . matches ( createTestRule ( null , "" ) ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertEquals ( "{\"person\":{\"props\":[1,6,3,4,5]}}" , ason . toString ( ) )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertEquals ( 10 , theAngle . get ( ) . intValue ( ) )
assertEquals ( "BASIC_AUTH" , containerRequest . getAuthenticationScheme ( ) )
assertEquals ( "BASIC_AUTH" , containerRequest . getAuthenticationScheme ( ) )
assertTrue ( singleton . ejb ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertEquals ( "BASIC_AUTH" , containerRequest . getAuthenticationScheme ( ) )
assertEquals ( "BASIC_AUTH" , containerRequest . getAuthenticationScheme ( ) )
assertTrue ( singleton . ejb ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertEquals ( "C3S FRP Level 3 products" , plugIn . getDescription ( null ) )
assertThat ( RepositoryManager . isGitRepository ( localGitPath ) ) . isTrue ( )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertThat ( RepositoryManager . isGitRepository ( localGitPath ) ) . isTrue ( )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( RepositoryManager . isGitRepository ( localGitPath ) ) . isTrue ( )
assertNotNull ( this . mimeTypes . forName ( "application/msword" ) . getDescription ( ) )
assertEquals ( 0 , checker . computeDefaultAuthorizers ( MockWebContext . create ( ) , new ArrayList < > ( ) , clients , new HashMap < > ( ) ) . size ( ) )
assertEquals ( "consumer" , principal . getType ( ) )
assertThat ( captor . getValue ( ) . getValidationQuery ( ) ) . isEqualTo ( validationQueryPrimary )
assertThat ( instance . load ( mockLoaderHelper ) , is ( equalTo ( "test" ) ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertThat ( result ) . isEmpty ( )
assertThat ( Encryption . md5 ( "test" ) , Is . is ( "98f6bcd4621d373cade4e832627b4f6" ) )
assertEquals ( mockJaxbList , response )
assertEquals ( mockJaxbList , response )
assertNotNull ( ds )
assertFalse ( picker . makeTypeSelector ( itemDefinition ) . isPresent ( ) )
assertTrue ( "audit should contain change of tcsMails" , msgs . get ( 0 ) . getMessage ( ) . contains ( expectedTestOfMessage ) )
assertTrue ( "audit should contain change of tcsMails" , msgs . get ( 0 ) . getMessage ( ) . contains ( expectedTestOfMessage ) )
assertTrue ( "audit should contain change of tcsMails" , msgs . get ( 0 ) . getMessage ( ) . contains ( expectedTestOfMessage ) )
assertEquals ( 0 , data . get ( "tables" ) . size ( ) )
assertEquals ( 0 , data . get ( "tables" ) . size ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertNull ( s )
assertThat ( underTest . getName ( ) ) . isEqualTo ( mqtt3SubAckReturnCode . name ( ) )
assertNull ( s )
assertEquals ( textRange , defaultEditorAdapter . getSelectedTextRange ( ) )
assertEquals ( textRange , defaultEditorAdapter . getSelectedTextRange ( ) )
assertEquals ( typeName , presenter . getTypeName ( ) )
assertThat ( testDocument . unwrap ( ) ) . isEqualTo ( true )
assertNotNull ( document . getRoot ( ) )
assertEquals ( "test" , property )
assertEquals ( newValue , bean . get ( "stringProperty" ) )
assertEquals ( "test" , property )
assertFalse ( boot . startup ( session ) )
assertEquals ( 255 , s . available ( ) )
assertEquals ( singletonList ( 100 ) , await ( some ( Promise . of ( result ) , 1 ) ) )
assertEquals ( 100 , result )
assertThat ( request . getUserProperties ( ) . getProperty ( "w" ) , is ( "x=y" ) )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertEquals ( "--> docker.maven.plugin <--" , formatter . format ( "--> %a <--" ) )
assertEquals ( message , exception . getMessage ( ) )
assertEquals ( message , exception . getMessage ( ) )
assertEquals ( message , exception . getMessage ( ) )
assertThat ( resolver . resolvePlaceholders ( 123 ) ) . isEqualTo ( 123 )
assertThat ( grouper . getName ( ) , equalTo ( "tag" ) )
assertEquals ( message , exception . getMessage ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "resolved" ) ) )
assertTrue ( "Resultaatmap moet leeg zijn" , result . isEmpty ( ) )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertEquals ( advancedData , result )
assertNotNull ( coreEvent . getDate ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertThat ( processEngineRule . getFilterService ( ) . createFilterQuery ( ) . filterName ( "All" ) . singleResult ( ) ) . isNotNull ( )
assertThat ( thing ) . hasAttributes ( ThingsModelFactory . nullAttributes ( ) )
assertThat ( thing ) . hasAttributes ( ThingsModelFactory . nullAttributes ( ) )
assertThat ( thing ) . hasAttributes ( ThingsModelFactory . nullAttributes ( ) )
assertThat ( thing ) . hasAttributes ( ThingsModelFactory . nullAttributes ( ) )
assertThat ( thing ) . hasAttributes ( ThingsModelFactory . nullAttributes ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertEquals ( "geen_exacte_waarde" , criterium ( "geen_exacte_waarde" ) . getWaarde ( ) )
assertEquals ( "geen_exacte_waarde" , criterium ( "geen_exacte_waarde" ) . getWaarde ( ) )
assertThat ( operation . getStatus ( ) ) . isNotOK ( )
assertThat ( operation . getStatus ( ) ) . isNotOK ( )
assertThat ( operation . getStatus ( ) ) . isNotOK ( )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( "Failed to convert to a Calendar and back" , date1 , DateUtils . toCalendar ( date1 ) . getTime ( ) )
assertTrue ( parameters . getParameters ( ) . isEmpty ( ) )
assertNotNull ( basic )
assertThat ( operation . getStatus ( ) ) . isNotOK ( )
assertThat ( operation . getStatus ( ) ) . isNotOK ( )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
ContractInputAssert . assertThat ( input ) . hasName ( "messages" ) . hasType ( ContractInputType . TEXT ) . hasNoInputs ( ) . isMultiple ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( index . allIndicesOf ( CqlIdentifier . fromInternal ( "FOO" ) ) ) . isEmpty ( )
assertThat ( index . allIndicesOf ( CqlIdentifier . fromInternal ( "FOO" ) ) ) . isEmpty ( )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( underTest . getName ( ) ) . isEqualTo ( "TestTimer" )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( index . allIndicesOf ( CqlIdentifier . fromInternal ( "FOO" ) ) ) . isEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertTrue ( "Failed to get mapping" , tm . get ( "Hello" ) == o )
assertEquals ( firstId , secondId )
assertNotNull ( result )
assertTrue ( "Failed to get mapping" , tm . get ( "Hello" ) == o )
assertEquals ( Result . ERROR , sos . validate ( null ) . getStatus ( ) )
assertThat ( status . getSeverity ( ) , is ( IStatus . ERROR ) )
assertNull ( query . getDatabase ( ) )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( null , execJavaCliParser . getMain ( ) )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
assertThat ( index . allIndicesOf ( CqlIdentifier . fromInternal ( "FOO" ) ) ) . isEmpty ( )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertThat ( Native . getCpu ( ) ) . isNotEmpty ( )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( processInfo . getCurrentWorkingDirectory ( ) , "adir" )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( props . get ( "nonexistingkey" ) ) . isNull ( )
assertTrue ( before . get ( ) )
assertTrue ( before . get ( ) )
assertEquals ( "value" , value )
assertFalse ( result )
assertEquals ( FILE_CONTENTS , fileUploadPopupPresenter . getFileContents ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertEquals ( expectedIdentifierAsUrl , datasetAuthor . getIdentifierAsUrl ( ) )
assertEquals ( expectedIdentifierAsUrl , datasetAuthor . getIdentifierAsUrl ( ) )
assertEquals ( expectedIdentifierAsUrl , datasetAuthor . getIdentifierAsUrl ( ) )
assertEquals ( url , sds . getUrl ( ) )
assertEquals ( new Integer ( 1 ) , pb . getId ( ) )
assertEquals ( 'a' , is . read ( ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertNotNull ( "AppProperty " + appProperty + " does not have a value" , value )
assertThat ( HttpResponses . asResponseString ( downloadResponse1 ) ) . isNull ( )
assertNotNull ( uriRandomGenerator )
assertThat ( infoHash . value ( ) ) . isEqualTo ( "abcd" )
assertNotNull ( uriRandomGenerator )
assertNotNull ( uriRandomGenerator )
assertNotNull ( uriRandomGenerator )
assertEquals ( "This is a string" , value )
assertEquals ( "This is a string" , value )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( MarketoComponentDefinition . RUNTIME_DATASET , definition . getRuntimeInfo ( properties ) . getRuntimeClassName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( FIRST + '\n' + LAST + '\n' , this . wrapped . toString ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( LOCK_MESSAGE , uiJob . getLockMessage ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( MarketoComponentDefinition . RUNTIME_DATASET , definition . getRuntimeInfo ( properties ) . getRuntimeClassName ( ) )
assertEquals ( FIRST + '\n' + LAST + '\n' , this . wrapped . toString ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "For source[op_without_namespace.sl] namespace cannot be empty." , exception . getMessage ( ) )
assertNotNull ( ds )
assertEquals ( ret , "Directory, 'src' is not a file." )
assertEquals ( ret , "Directory, 'src' is not a file." )
assertThat ( cacheManager . getCache ( "cache" ) , sameInstance ( cache ) )
assertNull ( serviceComponentConfiguration . getName ( ) )
assertEquals ( "[A, B, E, C, F, D]" , list . toString ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertThat ( target . getConnectionTypes ( ) , is ( "aggregated:1,original:1" ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertTrue ( e . getMessage ( ) . contains ( "SNMPWrapper Error" ) )
assertTrue ( MyException . class . isInstance ( e . getCause ( ) ) )
assertEquals ( new Long ( 1L ) , num )
assertThat ( taskLaunchScheduledService . serviceName ( ) , is ( "task-launch-processor" ) )
assertTrue ( e . getMessage ( ) . equals ( "The name argument may not be null" ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "resolved" ) ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertEquals ( value , person . getFinalClass ( ) )
assertEquals ( "" , result )
assertEquals ( ownerId , context . getApplication ( ) )
assertNull ( result )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "image/tiff" , response . getContentType ( ) )
assertEquals ( OK_200 , response . getStatus ( ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . BAD_REQUEST ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertThat ( underTest . getName ( ) ) . isEqualTo ( mqtt3SubAckReturnCode . name ( ) )
assertNull ( presenter . organizationalUnit )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( pkg , packageListBox . getSelectedPackage ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . OK ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . OK ) )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . OK ) )
assertThat ( response . getStatus ( ) ) . isEqualTo ( UNAUTHORIZED )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( response . getStatus ( ) ) . isEqualTo ( UNAUTHORIZED )
assertEquals ( response . getStatus ( ) , 404 )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertThat ( processor . getContextTypeId ( ) ) . isEqualTo ( RedTemplateContextType . KEYWORD_CALL_CONTEXT_TYPE )
assertThat ( processor . getContextTypeId ( ) ) . isEqualTo ( RedTemplateContextType . KEYWORD_CALL_CONTEXT_TYPE )
assertThat ( processor . getContextTypeId ( ) ) . isEqualTo ( RedTemplateContextType . KEYWORD_CALL_CONTEXT_TYPE )
assertEquals ( value , taskCompletionEvent . getTaskAttemptId ( ) )
assertThat ( Selector . forName ( null ) , is ( Selector . EQUAL ) )
assertThat ( builderCaptor . getValue ( ) . toString ( ) ) . isEmpty ( )
assertEquals ( "val" , attr . getValue ( ) )
assertEquals ( someDateValue , view . getTimeDateTimePickerValue ( ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertNotNull ( application )
assertNotNull ( application )
assertEquals ( actualResult , new Integer ( 0 ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertNotNull ( application )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( oozieJobInfoDelegate . getId ( ) , is ( id ) )
assertEquals ( 0 , presenter . getValue ( ) . size ( ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertNull ( QueryResultsProcessor . create ( new QueryTask ( ) ) . document ( "id" , ServiceDocument . class ) )
assertNotNull ( b . verwijderOnderzoek ( ) )
assertNull ( result )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( p . toString ( ) , is ( equalTo ( "OidcSubjectPrincipal[sub-claim@OP]" ) ) )
assertEquals ( "" , result )
assertThat ( TestHelper . getLastRecordedStateForField ( "this.f" ) , equalTo ( Float . toString ( f ) ) )
assertEquals ( "value" , value )
assertNull ( "The appender should be null." , appender )
assertEquals ( value , convert ( value ) )
assertEquals ( Role . getValue ( "ROUTER" ) , Role . ROUTER )
assertNull ( converter . convert ( "" ) )
assertEquals ( null , result )
assertThat ( r . getStatus ( ) ) . isEqualTo ( 200 )
assertEquals ( null , result )
assertEquals ( firstId , secondId )
assertEquals ( firstId , secondId )
assertThat ( tc . getName ( ) ) . isEqualTo ( "automaticSet" )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertTrue ( false )
assertEquals ( "Children of resource property element must be XML elements" , e . getMessage ( ) )
assertArrayEquals ( serialize ( key , value ) , argumentCaptor . getValue ( ) )
assertArrayEquals ( serialize ( key , value ) , argumentCaptor . getValue ( ) )
assertEquals ( getDefaultCollection ( ) . hashCode ( ) , getCollection ( ) . hashCode ( ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertThat ( e . getMessage ( ) , is ( "Interledger UInt8 values may only contain up to 8 bits!" ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( args . option ( Integer . class , "-e" ) ) . isEqualTo ( null )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertThat ( udf . nullIf ( null , null ) , is ( nullValue ( ) ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( id , project . getId ( ) )
assertEquals ( "{\"maxerr\": 100}" , optionsBuilder . build ( "maxerr=" ) )
assertThat ( udf . nullIf ( null , null ) , is ( nullValue ( ) ) )
assertEquals ( 0 , presenter . getValue ( ) . size ( ) )
assertEquals ( "Foo:2.0" , nf1 . toString ( ) )
assertEquals ( "Foo:2.0" , nf1 . toString ( ) )
assertEquals ( "" , toString )
assertEquals ( "foo" , r . getName ( ) )
assertNull ( value )
assertEquals ( "\"\"" , builder . toString ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( BASE_URL , url )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( BASE_URL , url )
assertEquals ( date , config . getProperty ( "date" ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( BASE_URL , url )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( BASE_URL , url )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( BASE_URL , url )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertNotNull ( GeoPackage . open ( newFile ( "foo.gpkg" ) ) )
assertEquals ( DictionaryElementType . INDEX_WORD , iw . getType ( ) )
assertEquals ( "This is a string" , value )
assertEquals ( "This is a string" , value )
assertEquals ( "This is a string" , value )
assertEquals ( "This is a string" , value )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNull ( configurator . getPort ( ) )
assertNull ( configurator . getPort ( ) )
assertEquals ( "Foo" , Utils . capitalize ( "foo" ) )
assertEquals ( "Foo" , Utils . capitalize ( "foo" ) )
assertEquals ( "Foo" , Utils . capitalize ( "foo" ) )
assertEquals ( "Foo" , Utils . capitalize ( "foo" ) )
assertEquals ( "method()" , resolver . getId ( method ) )
assertEquals ( Optional . of ( employee ) , employeeRepository . findById ( employee . getId ( ) ) )
assertThat ( Instructions . load ( file ) ) . isEmpty ( )
assertThat ( Parameter . withFields ( "id,name" ) ) . hasName ( "fields" ) . hasValue ( "id,name" )
assertTrue ( job . isClosed ( ) , "Expected all jobs to be closed" )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( Instructions . load ( file ) ) . isEmpty ( )
assertTrue ( job . isClosed ( ) , "Expected all jobs to be closed" )
assertEquals ( "method()" , resolver . getId ( method ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertEquals ( "CATEGORY" , field . getName ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertNotNull ( aaaFilterChain )
assertEquals ( "Spaces should be trimmed" , "role" , info . getName ( ) )
assertEquals ( TestClass . class , ConfigurationStrategyName . resolveToConfigurationStrategy ( TestClass . class . getName ( ) ) )
assertThat ( fixture ( "fixtures/fixture.txt" ) ) . isEqualTo ( "YAY FOR ME" )
assertEquals ( output , expectedOutput )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertThat ( holder . get ( ) , is ( message ) )
assertThat ( intentServiceController . get ( ) . boundIntent ) . isNotNull ( )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertFalse ( boot . startup ( session ) )
assertEquals ( 120 , Duration . hours ( 2 ) . toMinutes ( ) )
assertNotNull ( aaaFilterChain )
assertThat ( systemCommandStateBean . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertEquals ( serializer . deserialize ( is , RequestEnvelope . class ) , requestEnvelope )
assertEquals ( serializer . deserialize ( is , RequestEnvelope . class ) , requestEnvelope )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertThat ( ( int ) ReflectionHelpers . getStaticField ( ExampleBase . class , "BASE" ) ) . isEqualTo ( 8 )
assertThat ( ( int ) ReflectionHelpers . getStaticField ( ExampleBase . class , "BASE" ) ) . isEqualTo ( 8 )
assertEquals ( date . getTime ( ) , entity . getActionTime ( ) . getTime ( ) )
assertNotNull ( method )
assertEquals ( date . getTime ( ) , entity . getActionTime ( ) . getTime ( ) )
assertEquals ( date . getTime ( ) , entity . getActionTime ( ) . getTime ( ) )
assertEquals ( testObject , result )
assertEquals ( date . getTime ( ) , entity . getActionTime ( ) . getTime ( ) )
assertThat ( subject . getField ( ) ) . isEqualTo ( "value" )
assertThat ( keyVaultOperation . getProperty ( TEST_PROPERTY_NAME_1 ) ) . isEqualToIgnoringCase ( null )
assertThat ( optionalBytes . isPresent ( ) , is ( true ) )
assertEquals ( content , "\u015fey" )
assertThat ( calvalusProcessor . getDefaultCalvalusBundle ( ) , equalTo ( "calvalus-2.7-SNAPSHOT" ) )
assertNotNull ( transport . getExecutorService ( ) )
assertThat ( sequencingService . getExecutorService ( ) , is ( nullValue ( ) ) )
assertThat ( geoResult , is ( nullValue ( ) ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertEquals ( "0" , subject . getOutput ( ) . get ( 0 ) )
assertEquals ( "0" , subject . getOutput ( ) . get ( 0 ) )
assertEquals ( 0 , meldingen . size ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertEquals ( 1 , INT_FLAG . ON . getValue ( ) )
assertTrue ( singleton . ejb ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "me" , role . getName ( ) )
assertNull ( emptyTocd . getDescription ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( CLASS_NAME , tested . getClassName ( ) )
assertNotNull ( basic )
assertNull ( config . getProject ( ) )
assertEquals ( np . getCurrentDate ( ) , d )
assertNotNull ( basic )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertNotNull ( workspace )
assertNull ( result )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ProjectNotFoundResult . MESSAGE , PROJECT_NAME ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ProjectNotFoundResult . MESSAGE , PROJECT_NAME ) )
assertNull ( result )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ProjectNotFoundResult . MESSAGE , PROJECT_NAME ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( String . format ( ProjectNotFoundResult . MESSAGE , PROJECT_NAME ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertThat ( e . getMessage ( ) ) . contains ( "externalTaskIds is empty" )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'client_id'" )
assertEquals ( "File 'fileDoesNotExist.json' does not exist." , e . getMessage ( ) )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertThat ( ( ( SpringRenderKit ) renderKitCaptor . getValue ( ) ) . getWrapped ( ) , is ( sameInstance ( this . renderKit ) ) )
assertThat ( systemCommander . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( systemCommander . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( systemCommanderClient . getRemote ( contextName ) , is ( systemCommanderMBean ) )
assertThat ( systemCommander . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( systemCommander . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( systemCommander . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertEquals ( expected , emailService . getOrder ( ) )
assertNull ( baseClient . getAccessToken ( ) )
assertThat ( grid . findParentGrid ( ) . get ( ) ) . isEqualTo ( parentGrid )
assertThat ( grid . findParentGrid ( ) . get ( ) ) . isEqualTo ( parentGrid )
assertEquals ( 0.5d , cacheManager . getMaximumSizePercent ( ) , 1e-9 )
assertEquals ( 0.5d , cacheManager . getMaximumSizePercent ( ) , 1e-9 )
assertEquals ( 4 , victim . getItems ( ) . size ( ) )
assertEquals ( 4 , victim . getItems ( ) . size ( ) )
assertThat ( systemCommandStateBean . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( systemCommandStateBean . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( instance . getMostRecentResult ( ) . get ( ) , is ( "yeey!" ) )
assertThat ( instance . getMostRecentResult ( ) . get ( ) , is ( "yeey!" ) )
assertThat ( instance . getMostRecentResult ( ) . get ( ) , is ( "yeey!" ) )
assertEquals ( CollectionUtils . EMPTY_COLLECTION , coll )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( expected , emailService . getOrder ( ) )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertEquals ( "java:comp/env/ejb/APPTimerService" , argument . getValue ( ) )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertThat ( dao . getNamedQuery ( "query-name" ) , is ( query ) )
assertNull ( conf . getString ( "test.imaginarykey" ) )
assertNull ( conf . getString ( "test.imaginarykey" ) )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
StatusAssert . assertThat ( status ) . hasSeverity ( IStatus . WARNING )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "type:value" , ns . toString ( ) )
assertThat ( ( ( SpringRenderKit ) renderKitCaptor . getValue ( ) ) . getWrapped ( ) , is ( sameInstance ( this . renderKit ) ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertEquals ( 5 , level . toText ( ) . length ( ) )
assertTrue ( list . isEmpty ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNotNull ( createSimpleMap ( ) . toString ( ) )
assertNull ( basicAccessAuthenticator . authenticate ( request ) . get ( ) )
assertEquals ( "file1" , pathsHelper . getRelativeURI ( null , includedModelPath ) )
assertTrue ( builder . getParameters ( ) . isEmpty ( ) )
assertThat ( attributesStore . getCurrentDataUsageByUser ( USER ) , is ( 0L ) )
assertTrue ( result )
assertEquals ( 255 , s . available ( ) )
assertTrue ( result )
assertTrue ( new FolderPath ( ) . isRoot ( ) )
assertThat ( instance . getMostRecentResult ( ) . get ( ) , is ( "yeey!" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( stringValue , jobScheduleParam . getStringValue ( ) )
assertEquals ( stringValue , jobScheduleParam . getStringValue ( ) )
assertThat ( bean . getMostRecentException ( ) ) . isEqualTo ( "com.jamonapi.Exceptions" )
assertThat ( result . isPresent ( ) , is ( true ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertEquals ( 2L , result )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertThat ( shardingSphereResultSet . getCharacterStream ( 1 ) , is ( reader ) )
assertEquals ( mockCoreJarPackaging , packagingProvider )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertEquals ( lastModified , new ForwardingTemplateSource ( source ) . lastModified ( ) )
assertEquals ( result , string )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( content , contentSupplier . get ( ) )
assertEquals ( "dsOrgId" , orgId . getValue ( ) )
assertFalse ( success )
assertFalse ( updateEngineWithChanges )
assertEquals ( message , e . getMessage ( ) )
assertThat ( getCounter ( id ( 987654 ) ) ) . isEqualTo ( 0 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertTrue ( singleton . ejb ( ) )
assertEquals ( executionSet , tested . executionSet )
assertTrue ( result )
assertNull ( txManager . getTransaction ( ) )
assertThat ( e . getStatus ( ) , equalTo ( Status . BAD_REQUEST ) )
assertThat ( systemCommandStateBean . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertThat ( systemCommandStateBean . getCommandStatus ( commandId ) , is ( systemCommandStatus ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertTrue ( e . getMessage ( ) . contains ( "] not on impl " ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "admin" , cmd . getUsername ( ) )
assertEquals ( true , ( 2000L <= timeElapsed ) && ( timeElapsed <= 3000L ) )
assertThat ( request ( "/foo" ) . parameter ( "missing" ) , is ( Optional . empty ( ) ) )
assertThat ( disque . clientPause ( 1000 ) ) . isEqualTo ( "OK" )
assertThat ( request ( "/foo" ) . parameter ( "missing" ) , is ( Optional . empty ( ) ) )
assertEquals ( "10 hours ago" , result )
assertEquals ( 0 , apdexScore . getApdexScore ( ) , 0.001 )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "foo" , r . getName ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 } , result )
assertEquals ( 1 , value )
assertEquals ( expected , multimap . toMap ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( 10_000 , map . keySet ( ) . size ( ) )
assertEquals ( 10_000 , map . values ( ) . size ( ) )
assertEquals ( expected , multimap . toMap ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( "One" , map . getOnly ( ) )
assertEquals ( 1 , value )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( Interval . fromToBy ( i , 999_999 , 100 ) , integers )
assertEquals ( Interval . fromToBy ( i , 999_999 , 10_000 ) , integers )
assertNotSame ( iterable , deserialized )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 3 , 3 , 3 , 2 , 2 , 1 ) . getFirst ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertNull ( this . newWith ( ) . getFirst ( ) )
assertNull ( this . newWith ( ) . getLast ( ) )
assertEquals ( Integer . valueOf ( 1 ) , stack . getLast ( ) )
assertThatCode ( ( ) -> assumeThat ( listObject ) . isNotNull ( ) . asList ( ) . hasSize ( 3 ) ) . doesNotThrowAnyException ( )
assertNotSame ( iterable , deserialized )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 3 , 3 , 3 , 2 , 2 , 1 ) . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertNull ( iterable . comparator ( ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( 1 , this . getCollection ( ) . sizeDistinct ( ) )
assertEquals ( 1 , this . getCollection ( ) . sizeDistinct ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
IterableTestCase . assertEquals ( Integer . valueOf ( 81 ) , collection . injectIntoWith ( 1 , ( a , b , c ) -> a + b + c , 5 ) )
IterableTestCase . assertEquals ( Integer . valueOf ( 81 ) , collection . injectIntoWith ( 1 , ( a , b , c ) -> a + b + c , 5 ) )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertNotSame ( iterable , deserialized )
Arrays . stream ( RadiusProtocol . values ( ) ) . forEach ( protocol -> assertNotNull ( protocol . getName ( ) ) )
Arrays . stream ( RadiusProtocol . values ( ) ) . forEach ( protocol -> assertNotNull ( protocol . getName ( ) ) )
assertEquals ( AccessMode . rw . toString ( ) , "rw" )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( Bags . immutable . of ( VAL , NOT_VAL ) , this . newBag ( ) . newWith ( NOT_VAL ) )
assertEquals ( SortedSets . immutable . with ( Comparators . reverseNaturalOrder ( ) , 5 , 4 , 3 , 2 , 1 ) , union )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
IterableTestCase . assertEquals ( Integer . valueOf ( 81 ) , collection . injectIntoWith ( 1 , ( a , b , c ) -> a + b + c , 5 ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertNotNull ( plainProvider . get ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . maxBy ( String :: valueOf ) )
assertEquals ( 2 , countStream )
assertEquals ( 3 , this . newWith ( 1 , 2 , 3 ) . countWith ( Predicates2 . instanceOf ( ) , Integer . class ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( 10L , actual )
assertEquals ( 10 , actual )
assertEquals ( FastList . newListWith ( 3 , 3 , 2 , 1 ) , bag . toList ( ) )
assertEquals ( FastList . newListWith ( 3 , 3 , 2 , 1 ) , bag . toList ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( "[1, 2, 3]" , collection . toString ( ) )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , builder . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( this . newBag ( ) , this . newBag ( ) . chunk ( 2 ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( Bags . mutable . of ( 2 , 2 , 2 , 1 ) , sizes . toBag ( ) )
assertEquals ( collection , collection . chunk ( 10 ) . getFirst ( ) )
assertFalse ( createInodeDirectory ( ) . isFile ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( - 1 , NullColumn . INSTANCE . getFd ( ) )
PrimitiveTypeUsage . ALL . forEach ( ( ptu ) -> assertTrue ( ptu == ptu . asPrimitiveTypeUsage ( ) ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( 0 , l . listIterator ( ) . nextIndex ( ) )
assertEquals ( 2 , countStream )
assertEquals ( 2 , countStream )
assertEquals ( 2 , countStream )
assertEquals ( 2 , countStream )
assertEquals ( 9 , numberOfPetsStream )
assertFalse ( collection . notEmpty ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
coverThePrivateConstructor ( Assert . class )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertTrue ( child1NoChildren . hasParent ( ) )
assertThat ( this . mockTagAttributes . get ( "foo" ) ) . isNull ( )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( this . mutableMap . keySet ( ) , this . unmodifiableMap . keySet ( ) )
assertEquals ( this . mutableMap . entrySet ( ) , this . unmodifiableMap . entrySet ( ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( this . mutableMap . entrySet ( ) , this . unmodifiableMap . entrySet ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( Maps . immutable . of ( 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 ) , immutableBag . groupByUniqueKey ( id -> id , UnifiedMap . newWithKeysValues ( 0 , 0 ) ) )
assertSame ( bag , bag . toImmutable ( ) )
assertTrue ( bag . contains ( bag . getFirst ( ) ) )
assertTrue ( map . contains ( "Two" ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( collection , result )
assertEquals ( bag , result )
assertEquals ( strings , result )
assertEquals ( strings , strings . selectWith ( Predicates2 . < String > greaterThan ( ) , "0" ) )
assertEquals ( strings , strings . select ( Predicates . greaterThan ( "0" ) , FastList . < String > newList ( ) ) . toBag ( ) )
assertEquals ( strings , strings . reject ( Predicates . lessThan ( "0" ) ) )
assertEquals ( strings , strings . rejectWith ( Predicates2 . < String > lessThan ( ) , "0" ) )
assertEquals ( strings , strings . reject ( Predicates . lessThan ( "0" ) ) )
assertEquals ( strings , strings . reject ( Predicates . lessThan ( "0" ) , FastList . < String > newList ( ) ) . toBag ( ) )
assertEquals ( "hello" , function . valueOf ( "hello" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( this . newBag ( ) , this . newBag ( ) . chunk ( 10 ) . getFirst ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( "1" , this . newBag ( ) . minBy ( String :: valueOf ) )
assertEquals ( String . valueOf ( this . numKeys ( ) ) , this . newBag ( ) . maxBy ( String :: valueOf ) )
assertTrue ( bag . contains ( bag . getFirst ( ) ) )
assertTrue ( bag . contains ( bag . getLast ( ) ) )
assertEquals ( 15 , sum )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( expected , result , 0.001 )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( i , StringIterate . occurrencesOf ( string , String . valueOf ( i ) ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( expected , actual )
assertFalse ( new CompositeFastList < String > ( ) . iterator ( ) . hasNext ( ) )
assertSame ( bag , bag . toImmutable ( ) )
assertEquals ( expectedSet , this . newBag ( ) . toSet ( ) )
assertEquals ( immutableBag , mutableBag )
assertEquals ( bag , lazyIterable . toBag ( ) )
assertEquals ( bag . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( bag . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( bag . toString ( ) , builder . toString ( ) )
assertEquals ( this . bag , immutableIntBag )
assertTrue ( bag . contains ( bag . getFirst ( ) ) )
assertEquals ( "FhirContext[DSTU3]" , FhirContext . forDstu3 ( ) . toString ( ) )
assertSame ( this . newBag ( ) , this . newBag ( ) . newWithout ( "1" ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertNull ( this . newBag ( ) . detectWith ( Predicates2 . < String > greaterThan ( ) , "3" ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertTrue ( strings . allSatisfy ( ERROR_THROWING_PREDICATE ) )
assertFalse ( strings . anySatisfy ( ERROR_THROWING_PREDICATE ) )
assertEquals ( Iterables . iBag ( 1 , 1 , 1 , 1 , 3 , 3 ) , integers . selectByOccurrences ( IntPredicates . isEven ( ) ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( this . newBag ( ) , this . newBag ( ) . chunk ( 2 ) )
assertEquals ( this . newBag ( ) , this . newBag ( ) . chunk ( 10 ) )
assertEquals ( Comparators . < String > reverseNaturalOrder ( ) , map . comparator ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertSame ( bag , bag . toImmutable ( ) )
assertEquals ( FastList . newListWith ( 1 , 2 , 3 , 4 ) , immutableHashBag . toSortedList ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( Maps . immutable . of ( 0 , 0 , 1 , 1 , 2 , 2 , 3 , 3 ) , immutableBag . groupByUniqueKey ( id -> id , UnifiedMap . newWithKeysValues ( 0 , 0 ) ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( FastList . newListWith ( VAL ) , this . newBag ( ) . toSortedList ( ) )
assertEquals ( FastList . newListWith ( VAL ) , this . newBag ( ) . toSortedList ( null ) )
assertEquals ( BooleanHashSet . newSetWith ( false , true ) , this . booleanIterable . toSet ( ) )
assertEquals ( Bags . mutable . of ( VAL ) , this . newBag ( ) . toBag ( ) )
assertEquals ( Bags . immutable . of ( VAL , NOT_VAL ) , this . newBag ( ) . newWith ( NOT_VAL ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertTrue ( this . newBag ( ) . notEmpty ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( Bags . immutable . of ( VAL ) , this . newBag ( ) . collect ( String :: valueOf ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( VAL , result . get ( String . class ) . getFirst ( ) )
assertEquals ( VAL , target . get ( String . class ) . getFirst ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertSame ( immutableBag , immutableBag . toImmutable ( ) )
assertEquals ( Bags . mutable . of ( 1 , 2 , 3 , 4 , 5 ) , HashBag . newBag ( results ) )
assertEquals ( 1 , this . getCollection ( ) . sizeDistinct ( ) )
assertSame ( bag , bag . toImmutable ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( "[true, true, true]" , BooleanHashBag . newBagWith ( true , true , true ) . toString ( ) )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( "|a0|b1|c2" , sb . toString ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( "|a0|b1|c2" , sb . toString ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 } , array )
assertEquals ( expected , set )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( expected , set )
assertEquals ( AccessMode . rw . toString ( ) , "rw" )
assertEquals ( "1, 1, 2, 3" , builder . toString ( ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertEquals ( expected , set )
assertTrue ( bag . contains ( bag . getFirst ( ) ) )
assertEquals ( 1 , this . getCollection ( ) . sizeDistinct ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( FastList . newListWith ( 1 , 1 , 1 ) , bag . toList ( ) )
assertEquals ( Integer . valueOf ( 6 ) , bag . injectInto ( 1 , AddFunction . INTEGER ) )
assertEquals ( collection , deserializedCollection )
assertNotNull ( result [ 0 ] )
coverThePrivateConstructor ( Assert . class )
assertEquals ( numbers , interval . collect ( String :: valueOf ) . toBag ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( expected , actual )
assertFalse ( this . newWith ( ) . toImmutable ( ) instanceof MutableBagIterable )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( FastList . newListWith ( 1 , 1 , 1 ) , bag . toList ( ) )
assertEquals ( Iterables . iBag ( 1 , 1 , 1 , 1 , 3 , 3 ) , integers . selectByOccurrences ( IntPredicates . isEven ( ) ) )
assertEquals ( Iterables . iBag ( 1 , 1 , 1 , 1 , 3 , 3 ) , integers . selectByOccurrences ( IntPredicates . isEven ( ) ) )
assertEquals ( expected , set )
assertEquals ( this . newBag ( ) , this . newBag ( ) . chunk ( 10 ) )
assertEquals ( iBag ( 1 , 1 , 1 , 1 , 3 , 3 ) , integers . selectByOccurrences ( IntPredicates . isEven ( ) ) )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( expected , actual )
assertEquals ( expected , set )
Verify . assertEqualsAndHashCode ( this . getCollection ( ) , Bags . mutable . of ( "" ) )
assertEquals ( FastList . newListWith ( Tuples . pair ( "1" , "a" ) , Tuples . pair ( "2" , "b" ) ) , list )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( iBag ( 1 , 1 , 1 , 1 , 3 , 3 ) , integers . selectByOccurrences ( IntPredicates . isEven ( ) ) )
assertEquals ( expected , set )
assertEquals ( HashBag . newBagWith ( "Two" ) , actual . toBag ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( appendable2 . toString ( ) , "false, false, true" , appendable2 . toString ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expected , actual )
assertTrue ( map . contains ( "Two" ) )
assertEquals ( this . getExpected ( ) . toBag ( ) , actual )
assertEquals ( expected , actual )
assertEquals ( HashBag . newBag ( integers ) , integers . collect ( Functions . getIntegerPassThru ( ) , HashBag . < Integer > newBag ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected . toBag ( ) , actual )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( integers . toBag ( ) , actual )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . getCollection ( ) . toString ( ) , '[' + builder . toString ( ) + ']' )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( copy . sortThis ( Collections . < Integer > reverseOrder ( ) ) , list )
assertEquals ( integers . toList ( ) , list )
assertEquals ( expected , actual )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertNull ( set . toSortedSet ( ) . comparator ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( Comparators . < String > reverseNaturalOrder ( ) , map . comparator ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertSame ( expectedMap . comparator ( ) , actualMap . comparator ( ) )
ListIterate . reverseForEachWithIndex ( Lists . mutable . empty ( ) , ( ignored1 , index ) -> Assert . fail ( ) )
assertEquals ( integers , results )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , take . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , drop . comparator ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( 0 , tombstonePartitionedChunk . getChunkNumber ( ) )
assertEquals ( integers . toBag ( ) , integers . collectIf ( Integer . class :: isInstance , Functions . getIntegerPassThru ( ) , HashBag . < Integer > newBag ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
ListIterate . reverseForEachWithIndex ( Lists . mutable . empty ( ) , ( ignored1 , index ) -> Assert . fail ( ) )
assertEquals ( integers , results )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( new SingletonHList < > ( 1 ) , tuple2 . init ( ) )
assertNull ( set . toSortedSet ( ) . comparator ( ) )
assertEquals ( FastList . newListWith ( 3 , 3 , 2 , 1 ) , bag . toList ( ) )
assertEquals ( "3, 3, 2" , this . newWith ( Comparators . reverseNaturalOrder ( ) , 3 , 2 , 3 ) . makeString ( ) )
assertEquals ( FastList . newListWith ( 3 , 3 , 2 , 1 ) , bag . toList ( ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertNotNull ( bag . comparator ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( "4030202010" , builder . toString ( ) )
assertEquals ( "4031222314" , builder . toString ( ) )
assertEquals ( Integer . valueOf ( 8 ) , result )
assertEquals ( 16.0f , bag . sumOfFloat ( Integer :: floatValue ) , 0.001 )
assertEquals ( 16.0d , bag . sumOfDouble ( Integer :: doubleValue ) , 0.001 )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertEquals ( set , set . chunk ( 10 ) . getFirst ( ) )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( TreeBag . newBagWith ( 1 , 2 , 2 ) , SortedBags . mutable . ofAll ( list ) )
assertEquals ( TreeBag . newBagWith ( 1 , 2 , 2 ) , SortedBags . mutable . withAll ( list ) )
assertEquals ( TreeBag . newBagWith ( Comparators . reverseNaturalOrder ( ) , 1 , 2 , 2 ) , SortedBags . mutable . ofAll ( Comparators . reverseNaturalOrder ( ) , list ) )
assertEquals ( TreeBag . newBagWith ( Comparators . reverseNaturalOrder ( ) , 1 , 2 , 2 ) , SortedBags . mutable . withAll ( Comparators . reverseNaturalOrder ( ) , list ) )
assertTrue ( sortedBagA . getFirst ( ) . equals ( sortedBagB . getFirst ( ) ) && sortedBagB . getFirst ( ) == 6 )
coverThePrivateConstructor ( Assert . class )
assertSame ( bag , bag . asUnmodifiable ( ) )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertSame ( INTEGER_HASHING_STRATEGY , map . hashingStrategy ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertNull ( classUnderTest . ifPresentApply ( absentKey , Functions . < String > getPassThru ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertNull ( map . ifPresentApply ( 4 , Functions . < String > getPassThru ( ) ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "1=a" , entry . toString ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( CONSTANT , instance . value ( ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . mutableMap . keySet ( ) , this . unmodifiableMap . keySet ( ) )
assertEquals ( STRING_VALUE , document1 . get ( STRING_KEY ) )
assertEquals ( STRING_VALUE , document1 . get ( STRING_KEY ) )
assertEquals ( this . mutableMap . keySet ( ) , this . unmodifiableMap . keySet ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
assertEquals ( "text/css" , ContentTypeResolver . get ( "somefile.css" ) )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( expected . entrySet ( ) , map . entrySet ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertEquals ( this . mutableMap . keySet ( ) , this . unmodifiableMap . keySet ( ) )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertEquals ( this . mutableMap . keySet ( ) , this . unmodifiableMap . keySet ( ) )
assertNull ( "Should be null" , inspector . getMapValueElement ( null , new ShortWritable ( ( short ) 0 ) ) )
assertEquals ( FastList . newListWith ( false , false ) , map . collect ( f ) )
assertEquals ( "[\"greater_than\",1]" , serialized . toString ( ) )
assertSame ( object , Functions . getPassThru ( ) . valueOf ( object ) )
assertEquals ( Integer . valueOf ( 5 ) , Functions . getFixedValue ( 5 ) . valueOf ( null ) )
assertSame ( Integer . class , Functions . getToClass ( ) . valueOf ( 0 ) )
assertEquals ( Math . sin ( 1.0 ) , function . valueOf ( 1 ) , 0.0 )
assertEquals ( 1 , function . valueOf ( 1 ) )
assertEquals ( "hello" , function . valueOf ( "hello" ) )
assertEquals ( "hello" , Functions . getStringTrim ( ) . valueOf ( " hello  " ) )
assertEquals ( Integer . valueOf ( 1 ) , function . valueOf ( "1" ) )
assertEquals ( Integer . valueOf ( 5 ) , chain . valueOf ( Boolean . FALSE ) )
assertEquals ( "true" , chain . valueOf ( "foo" ) )
assertEquals ( Boolean . TRUE , chain . valueOf ( Integer . valueOf ( 4 ) ) )
assertEquals ( Interval . oneTo ( 10 ) , newCollection )
assertEquals ( "object.getClass()" , Functions . getToClass ( ) . toString ( ) )
assertEquals ( "Math.sin()" , Functions . getMathSinFunction ( ) . toString ( ) )
assertEquals ( "stringToInteger" , Functions . getStringToInteger ( ) . toString ( ) )
assertEquals ( UnifiedSet . newSetWith ( "One" ) , keys )
assertEquals ( UnifiedSet . newSetWith ( 1 ) , values )
assertTrue ( Functions . getTrue ( ) . valueOf ( false ) )
assertFalse ( Functions . getFalse ( ) . valueOf ( true ) )
assertTrue ( Functions . getTrue ( ) . valueOf ( false ) )
assertTrue ( predicate . toString ( ) . contains ( set . toString ( ) ) )
assertTrue ( predicate . toString ( ) . contains ( set . toString ( ) ) )
assertEquals ( FastList . newListWith ( "a" ) , ListIterate . select ( Lists . fixedSize . of ( "a" , "c" ) , in ) )
assertEquals ( FastList . newListWith ( "A" ) , ListIterate . reject ( Lists . fixedSize . of ( "A" , "C" ) , out ) )
assertEquals ( Long . valueOf ( 3L ) , longFunction . value ( 1L , 2L ) )
assertNull ( function . valueOf ( 42 ) )
assertEquals ( fortyTwo , function . valueOf ( fortyTwo ) )
assertTrue ( Functions . getTrue ( ) . valueOf ( false ) )
assertFalse ( Functions . getFalse ( ) . valueOf ( true ) )
assertTrue ( Functions . getTrue ( ) . valueOf ( false ) )
assertEquals ( Lists . mutable . of ( ) , Functions0 . newFastList ( ) . value ( ) )
assertEquals ( Lists . mutable . of ( ) , Functions0 . newFastList ( ) . value ( ) )
assertEquals ( Bags . mutable . of ( ) , Functions0 . newHashBag ( ) . value ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( 0 , Functions0 . zeroAtomicInteger ( ) . value ( ) . get ( ) )
assertEquals ( 0 , Functions0 . zeroAtomicLong ( ) . value ( ) . get ( ) )
assertTrue ( strings . allSatisfy ( ERROR_THROWING_PREDICATE ) )
assertEquals ( Integer . valueOf ( 5 ) , plusInteger . value ( 2 , 3 ) )
assertEquals ( Integer . valueOf ( 5 ) , plusInteger . value ( 2 , 3 ) )
assertTrue ( function . valueOf ( 10 ) )
assertFalse ( function . valueOf ( 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( "{\"a\":23}" , object . toString ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( - 42L , StringFunctions . toInteger ( ) . valueOf ( "-42" ) . longValue ( ) )
assertEquals ( ( byte ) 16 , StringFunctions . toPrimitiveByte ( ) . byteValueOf ( "16" ) )
assertEquals ( 'X' , StringFunctions . toFirstChar ( ) . charValueOf ( "X-ray" ) )
assertEquals ( 'A' , StringFunctions . toPrimitiveChar ( ) . charValueOf ( "65" ) )
assertEquals ( 3.14159265359d , StringFunctions . toPrimitiveDouble ( ) . doubleValueOf ( "3.14159265359" ) , 0.0 )
assertEquals ( 3.1415d , StringFunctions . toPrimitiveFloat ( ) . floatValueOf ( "3.1415" ) , 0.00001 )
assertEquals ( 256 , StringFunctions . toPrimitiveInt ( ) . intValueOf ( "256" ) )
assertEquals ( 0x7fffffffffffffffL , StringFunctions . toPrimitiveLong ( ) . longValueOf ( "9223372036854775807" ) )
assertEquals ( - 32768 , StringFunctions . toPrimitiveShort ( ) . shortValueOf ( "-32768" ) )
assertNull ( function . valueOf ( 42 ) )
assertEquals ( fortyTwo , function . valueOf ( fortyTwo ) )
assertEquals ( Integer . valueOf ( 1 ) , integer )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( "[]" , CollectionUtils . trim ( list , 2 ) . toString ( ) )
assertEquals ( expectedResult , class1 . testCollectionLiteralExp01 ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( FastList . newListWith ( 1 ) , procedure . getResult ( ) )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( expectedResults , actualResults )
assertFalse ( i . hasNext ( ) )
assertEquals ( result , integers )
assertNotNull ( date . toString ( ) )
fail ( e . getMessage ( ) )
assertEquals ( Integer . valueOf ( 1 ) , integer )
assertNotNull ( timestamp . toString ( ) )
assertEquals ( "[true]" , array . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( integers , integers . select ( Predicates . lessThan ( integers . size ( ) + 1 ) ) )
assertEquals ( Integer . valueOf ( integers . size ( ) ) , integers . getLast ( ) )
assertEquals ( integers , integers . reject ( Predicates . greaterThan ( integers . size ( ) ) ) )
assertEquals ( integers , integers . collect ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( ByteArrayList . newListWith ( ) , integers . collectByte ( PrimitiveFunctions . unboxIntegerToByte ( ) ) )
assertEquals ( integers , integers . collect ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( integers , immutableCollection . collect ( doubleParameter -> Integer . valueOf ( ( int ) doubleParameter ) ) )
assertEquals ( integers , immutableCollection . collect ( floatParameter -> Integer . valueOf ( ( int ) floatParameter ) ) )
assertEquals ( IntArrayList . newListWith ( ) , integers . collectInt ( PrimitiveFunctions . unboxIntegerToInt ( ) ) )
assertEquals ( integers , immutableCollection . collect ( longParameter -> Integer . valueOf ( ( int ) longParameter ) ) )
assertEquals ( ShortArrayList . newListWith ( ) , integers . collectShort ( PrimitiveFunctions . unboxIntegerToShort ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( integers , integers . collectIf ( Integer . class :: isInstance , Functions . getIntegerPassThru ( ) ) )
assertEquals ( Integer . valueOf ( 1 ) , integers . getFirst ( ) )
assertEquals ( Integer . valueOf ( integers . size ( ) ) , integers . getLast ( ) )
assertEquals ( Integer . valueOf ( integers . size ( ) ) , integers . getLast ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertFalse ( collection . notEmpty ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertSame ( collection , collection . asSynchronized ( ) )
assertEquals ( HashBag . newBagWith ( 1 , 3 , 5 ) , integers . toBag ( ) )
assertEquals ( collection , deserializedCollection )
assertEquals ( expected , multimap . toMap ( ) )
assertEquals ( collection . toList ( ) , collection . chunk ( 10 ) . getFirst ( ) )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
assertEquals ( true , mandatorySubject . isEmpty ( ) )
assertNull ( "Should be null" , inspector . getMapValueElement ( null , new ShortWritable ( ( short ) 0 ) ) )
assertEquals ( true , mandatorySubject . isEmpty ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( 3 , this . newWith ( 1 , 2 , 3 ) . countWith ( Predicates2 . instanceOf ( ) , Integer . class ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( "GreatBand<Metallica>GreatBand<Bon Jovi>GreatBand<Europe>GreatBand<Scorpions>" , buf . toString ( ) )
assertEquals ( testInstance . getAllIds ( ) , expected )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( mutableCollection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( new MutableInteger ( 2 ) , result )
assertEquals ( iterable . toBag ( ) , iterable . asLazy ( ) . toBag ( ) )
assertTrue ( iterator . next ( ) )
assertEquals ( ( i & 1 ) == 0 , list . get ( i ) )
assertEquals ( n , res )
assertEquals ( ( i & 1 ) == 0 , list . get ( i ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertTrue ( this . bag . anySatisfy ( each -> false ) )
assertTrue ( this . bag . anySatisfy ( each -> false ) )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertEquals ( integerListSum . ecPrimitive ( ) , integerListSum . ecPrimitiveParallel ( ) )
assertEquals ( integerListSum . ecPrimitive ( ) , integerListSum . ecPrimitiveParallel ( ) )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertEquals ( 0 , InjectBundle . empty ( ) . injectables ( ) . count ( ) )
assertEquals ( 0 , InjectBundle . empty ( ) . injectables ( ) . count ( ) )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertTrue ( function . valueOf ( 10 ) )
assertTrue ( function . valueOf ( 10 ) )
assertTrue ( function . valueOf ( 10 ) )
assertTrue ( function . valueOf ( 10 ) )
assertEquals ( streamGroupingBy , collectGroupingBy )
assertEquals ( streamGroupingBy , collectGroupingBy )
assertEquals ( streamGroupingBy , collectGroupingBy )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( IntInterval . evensFromTo ( 2 , 4 ) , select . toList ( ) )
assertEquals ( IntInterval . evensFromTo ( 2 , 4 ) , select . toList ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( interval ) , Lists . immutable . ofAll ( interval ) )
assertSame ( Sets . immutable . ofAll ( immutableSet . castToSet ( ) ) , immutableSet )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertEquals ( expectedPowerSet , Sets . powerSet ( set ) )
assertEquals ( expectedCartesianProduct , Sets . cartesianProduct ( set1 , set2 ) . toBag ( ) )
assertSame ( Sets . immutable . ofAll ( immutableSet . castToSet ( ) ) , immutableSet )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSet ( interval ) , Sets . immutable . ofAll ( interval ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertSame ( Integer . class , Functions . getToClass ( ) . valueOf ( 0 ) )
assertEquals ( 2 , countStream )
assertSame ( Integer . class , Functions . getToClass ( ) . valueOf ( 0 ) )
assertEquals ( 2 , countStream )
assertSame ( BooleanBags . immutable . of ( ) , BooleanBags . immutable . of ( ) )
assertSame ( BooleanLists . immutable . of ( ) , BooleanLists . immutable . of ( ) )
assertSame ( BooleanBags . immutable . of ( ) , BooleanBags . immutable . of ( ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( FastList . newListWith ( 3 , 4 , 5 , 6 , 7 ) , this . lazyIterable . reject ( Predicates . lessThan ( 3 ) ) . toList ( ) )
assertEquals ( ByteArrayList . newListWith ( ( byte ) 1 , ( byte ) 2 , ( byte ) 3 , ( byte ) 4 , ( byte ) 5 , ( byte ) 6 , ( byte ) 7 ) , this . lazyIterable . collectByte ( PrimitiveFunctions . unboxIntegerToByte ( ) ) . toList ( ) )
assertEquals ( DoubleArrayList . newListWith ( 1.0d , 2.0d , 3.0d , 4.0d , 5.0d , 6.0d , 7.0d ) , this . lazyIterable . collectDouble ( PrimitiveFunctions . unboxIntegerToDouble ( ) ) . toList ( ) )
assertEquals ( IntArrayList . newListWith ( 1 , 2 , 3 , 4 , 5 , 6 , 7 ) , this . lazyIterable . collectInt ( PrimitiveFunctions . unboxIntegerToInt ( ) ) . toList ( ) )
assertEquals ( 2 , countStream )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertEquals ( "WeldJndiLookupTestCase" , ejb . getName ( ) )
assertEquals ( "1, 2, 3" , builder . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( Bags . mutable . of ( 2 , 2 , 2 , 1 ) , sizes . toBag ( ) )
assertEquals ( collection , collection . chunk ( 10 ) . getFirst ( ) )
assertEquals ( "1234567" , tapStringBuilder . toString ( ) )
assertSame ( this . lazyIterable , this . lazyIterable . asLazy ( ) )
assertEquals ( "[1, 2][3, 4][5]" , this . buffer . toString ( ) )
assertEquals ( "|[1, 2]0|[3, 4]1|[5]2" , this . buffer . toString ( ) )
assertEquals ( "|[1, 2]A|[3, 4]A|[5]A" , this . buffer . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "1021324354" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( 15 , sum )
assertEquals ( 15L , sum )
assertEquals ( 7.2 , sum , 0.1 )
assertEquals ( 7.2 , sum , 0.1 )
assertNull ( collect . getFirst ( ) )
assertNull ( collect . getFirst ( ) )
assertEquals ( Lists . immutable . of ( "0" , "1" , "2" , "3" ) , Lists . immutable . ofAll ( stringNums ) )
assertEquals ( "12345" , builder . toString ( ) )
assertFalse ( i . hasNext ( ) )
assertEquals ( "3124" , builder . toString ( ) )
assertEquals ( "102132435465768798" , builder . toString ( ) )
assertEquals ( "31245" , builder . toString ( ) )
assertEquals ( "13254" , builder . toString ( ) )
assertEquals ( "112123123412345" , builder . toString ( ) )
assertEquals ( "10112213243516273849110211312413514" , builder . toString ( ) )
assertEquals ( "112123123412345" , builder . toString ( ) )
assertEquals ( "112123123412345" , builder . toString ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 15 , sum )
assertEquals ( 13 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 6 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 12 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 10 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 13 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 10 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 10 , sum . getValue ( ) . intValue ( ) )
assertEquals ( "12243648510" , builder . toString ( ) )
assertEquals ( "1202413624835104" , builder . toString ( ) )
assertEquals ( "1223344556" , builder . toString ( ) )
assertEquals ( "1021324354" , builder . toString ( ) )
assertEquals ( "|a00|b11|c22" , sb . toString ( ) )
assertEquals ( "|a0|b1|c2" , sb . toString ( ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertSame ( expected , flattenIterator . next ( ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertSame ( expected , iterator . next ( ) )
assertEquals ( this . getExpected ( ) . toBag ( ) , actual )
assertEquals ( this . getExpected ( ) . toBag ( ) , actual )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . getExpected ( ) . toBag ( ) , actual )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertTrue ( this . booleanIterable . anySatisfy ( BooleanPredicates . equal ( true ) ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertFalse ( this . booleanIterable . allSatisfy ( BooleanPredicates . equal ( false ) ) )
assertEquals ( ImmutableList . of ( ) , Iterators . divideIterable ( ImmutableList . of ( ) , 2 ) )
assertEquals ( FastList . newListWith ( "false" , "true" , "true" ) , this . booleanIterable . collect ( String :: valueOf ) . toList ( ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertEquals ( BooleanArrayList . newListWith ( false , true , true ) , this . booleanIterable . toList ( ) )
assertEquals ( BooleanHashSet . newSetWith ( false , true ) , this . booleanIterable . toSet ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertEquals ( this . booleanIterable . toSet ( ) , this . booleanIterable . asLazy ( ) . toSet ( ) )
assertEquals ( "truefalsetruefalsetrue" , builder . toString ( ) )
assertEquals ( "true0false1true2false3true4" , builder . toString ( ) )
assertEquals ( "truefalsetruefalsetrue" , builder . toString ( ) )
assertEquals ( "truefalsetruefalsetrue" , builder . toString ( ) )
assertTrue ( this . newPrimitiveWith ( true , false ) . notEmpty ( ) )
assertEquals ( 2 , sum )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( "truefalsetrue" , collect . makeString ( "" ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertEquals ( BooleanArrayList . newListWith ( false , true , true ) , this . booleanIterable . toList ( ) )
assertEquals ( BooleanHashSet . newSetWith ( false , true ) , this . booleanIterable . toSet ( ) )
assertEquals ( BooleanHashBag . newBagWith ( false , true , true ) , this . booleanIterable . toBag ( ) )
assertFalse ( result [ 0 ] )
assertTrue ( iterable . notEmpty ( ) )
assertEquals ( 2L , BooleanArrayList . newListWith ( false , false , true ) . asReversed ( ) . count ( BooleanPredicates . equal ( false ) ) )
assertEquals ( BooleanArrayList . newListWith ( false , true ) , BooleanArrayList . newListWith ( true , false ) . asReversed ( ) . toList ( ) )
assertEquals ( BooleanHashSet . newSetWith ( true , false ) , BooleanArrayList . newListWith ( true , false ) . asReversed ( ) . toSet ( ) )
assertEquals ( BooleanHashBag . newBagWith ( true , false ) , BooleanArrayList . newListWith ( true , false ) . asReversed ( ) . toBag ( ) )
assertEquals ( BooleanArrayList . newListWith ( false , true ) , BooleanArrayList . newListWith ( true , false ) . asReversed ( ) . asLazy ( ) . toList ( ) )
assertEquals ( "truetrue" , concat . toString ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( new MutableInteger ( 2 ) , result )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertEquals ( "truetrue" , concat . toString ( ) )
assertEquals ( "1a2b3c" , builder . toString ( ) )
assertEquals ( 10 , sum )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( "Interval from: 0 to: 10 step: 2 size: 6" , interval . toString ( ) )
assertEquals ( expected , interval . reject ( IntegerPredicates . isEven ( ) , FastList . < Integer > newList ( ) ) )
assertEquals ( "foo" , AbstractImmutableEntry . < String > getKeyFunction ( ) . valueOf ( entry ) )
assertEquals ( FastList . newListWith ( 2 , 3 ) , interval . subList ( 1 , 3 ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( 5 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( 2 , countStream )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertEquals ( 3 , this . newWith ( 1 , 2 , 3 ) . countWith ( Predicates2 . instanceOf ( ) , Integer . class ) )
assertEquals ( STRING_VALUE , document1 . get ( STRING_KEY ) )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
Verify . assertEqualsAndHashCode ( map1 , map2 )
coverThePrivateConstructor ( Assert . class )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> converter . convert ( new Document ( "type" , "YouDontKonwMe" ) ) )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertSame ( list , list . without ( 9 ) )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
assertEquals ( Integer . valueOf ( 2 ) , objects . set ( 1 , 4 ) )
coverThePrivateConstructor ( Assert . class )

assertEquals ( Integer . valueOf ( 1 ) , this . newList ( ) . max ( Comparators . reverse ( Integer :: compareTo ) ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newList ( ) . max ( Comparators . reverse ( Integer :: compareTo ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . maxBy ( String :: valueOf ) )
assertEquals ( collection , collection . chunk ( 10 ) . getFirst ( ) )
assertSame ( list , list . without ( 2 ) )
assertEquals ( "Initial" , victim . getValue ( ) )
assertEquals ( "Mismatched authenticator invocation count" , 1 , invocationCount . get ( ) )
assertEquals ( parent , handle . parent ( ) )
assertSame ( Lists . fixedSize . of ( ) , Lists . fixedSize . of ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
coverThePrivateConstructor ( Assert . class )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> converter . convert ( new Document ( "type" , "YouDontKonwMe" ) ) )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertSame ( list , list . without ( 9 ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
coverThePrivateConstructor ( Assert . class )
assertSame ( list , list . without ( 9 ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
coverThePrivateConstructor ( Assert . class )
assertSame ( list , list . without ( 9 ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( Integer . valueOf ( 1 ) , SingletonListTest . newWith ( 1 ) . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , SingletonListTest . newWith ( 1 ) . getLast ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertTrue ( SingletonListTest . newWith ( 1 ) . notEmpty ( ) )
assertEquals ( Integer . valueOf ( 2 ) , result )
assertEquals ( Integer . valueOf ( 2 ) , result )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertEquals ( "[(this SingletonList)]" , list . toString ( ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( Integer . valueOf ( 1 ) , this . newList ( ) . max ( Comparators . reverse ( Integer :: compareTo ) ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . maxBy ( String :: valueOf ) )
assertSame ( list , list . without ( 9 ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
coverThePrivateConstructor ( Assert . class )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertSame ( list , list . without ( 9 ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
coverThePrivateConstructor ( Assert . class )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertTrue ( map . contains ( "Two" ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( expected , actual )
assertEquals ( integers , integers . select ( Predicates . lessThan ( integers . size ( ) + 1 ) , FastList . < Integer > newList ( ) ) )
assertEquals ( integers , integers . reject ( Predicates . greaterThan ( integers . size ( ) ) , FastList . < Integer > newList ( ) ) )
assertEquals ( expected , actual )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( integers , integers . collectIf ( Integer . class :: isInstance , Functions . getIntegerPassThru ( ) , FastList . < Integer > newList ( ) ) )
assertEquals ( expected , actual )
assertNotNull ( stats )
assertNotNull ( stats )
assertNotNull ( stats )
assertEquals ( stack . toSortedList ( ) . toReversed ( ) , stack . toList ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertNull ( integers . getFirst ( ) )
assertEquals ( list , result )
assertNull ( integers . getFirst ( ) )
assertNull ( integers . getFirst ( ) )
assertTrue ( integers . allSatisfy ( ERROR_THROWING_PREDICATE ) )
assertFalse ( integers . anySatisfy ( ERROR_THROWING_PREDICATE ) )
assertNull ( integers . getFirst ( ) )
assertEquals ( Integer . valueOf ( integers . size ( ) ) , integers . getLast ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( 5 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertNull ( integers . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 + 1 + 2 + 3 ) , list . injectInto ( 1 , AddFunction . INTEGER ) )
assertEquals ( ( i & 1 ) == 0 , list . get ( i ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( new MutableInteger ( 14 ) , result )
assertEquals ( list , this . classUnderTest ( ) . toList ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertNotEquals ( this . newWith ( true ) , this . newWith ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertSame ( this . newWith ( ) . toImmutable ( ) , this . newWith ( ) . toImmutable ( ) )
assertEquals ( collection , deserializedCollection )
assertEquals ( integers , results )
assertEquals ( Integer . valueOf ( 1 + 1 + 2 + 3 ) , list . injectInto ( 1 , AddFunction . INTEGER ) )
assertEquals ( "[1, 2, 3]" , list . toString ( ) )
assertEquals ( "1/2/3" , list . makeString ( "/" ) )
assertEquals ( "1/2/3" , list . makeString ( "/" ) )
assertEquals ( "[1/2/3]" , list . makeString ( "[" , "/" , "]" ) )
assertEquals ( "1/2/3" , builder . toString ( ) )
assertEquals ( "1/2/3" , builder . toString ( ) )
assertEquals ( "[1/2/3]" , builder . toString ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( 20 , sum )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> EndpointId . of ( "" ) ) . withMessage ( "Value must not be empty" )

coverThePrivateConstructor ( Assert . class )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertTrue ( iterator . hasNext ( ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertFalse ( this . newWith ( ) instanceof RandomAccess )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( Integer . valueOf ( 1 + 1 + 2 + 3 ) , list . injectInto ( 1 , AddFunction . INTEGER ) )
assertEquals ( Integer . valueOf ( 3 ) , list . injectInto ( Integer . MIN_VALUE , MaxSizeFunction . STRING ) )
assertEquals ( Integer . valueOf ( 1 ) , list . injectInto ( Integer . MAX_VALUE , MinSizeFunction . STRING ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertTrue ( FastList . newListWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertNull ( ref . get ( ) )
assertEquals ( "X" , sublist2 . remove ( 2 ) )
assertEquals ( Integer . valueOf ( 5 ) , integers . set ( 3 , 4 ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( "[1, 2, 3, (this FastList)]" , list . toString ( ) )
assertEquals ( "1, 2, 3, (this FastList)" , list . makeString ( ) )
assertEquals ( "[1, 2, 3, 4]" , integers . toString ( ) )
assertFalse ( integers . remove ( Integer . valueOf ( 5 ) ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( collection , deserializedCollection )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( 0 , this . newWith ( ) . size ( ) )
assertEquals ( "WeldJndiLookupTestCase" , ejb . getName ( ) )
assertEquals ( Integer . valueOf ( 7 ) , list . injectInto ( 1 , AddFunction . INTEGER ) )
assertEquals ( Integer . valueOf ( 3 ) , list . injectInto ( Integer . MIN_VALUE , function ) )
assertEquals ( Integer . valueOf ( 1 ) , list . injectInto ( Integer . MAX_VALUE , function ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( FastList . newListWith ( Tuples . pair ( "1" , "a" ) , Tuples . pair ( "2" , "b" ) ) , list )
assertTrue ( MultiReaderFastList . newListWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertTrue ( objects . removeIf ( Predicates . cast ( each -> each == null ) ) )
assertNull ( ref . get ( ) )
assertEquals ( collection , deserializedCollection )
assertEquals ( collection . subList ( 0 , 2 ) , deserializedCollection )
assertEquals ( FastList . newList ( list ) , Interval . from ( 2 ) . to ( 17 ) )
assertEquals ( "X" , sublist2 . remove ( 2 ) )
assertEquals ( Integer . valueOf ( 5 ) , integers . set ( 3 , 4 ) )
coverThePrivateConstructor ( Assert . class )
assertFalse ( integers . remove ( doesNotExist ) )
assertFalse ( integers . remove ( doesNotExist ) )
coverThePrivateConstructor ( Assert . class )
assertNotNull ( result [ 0 ] )
assertEquals ( collection , deserializedCollection )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertTrue ( objects . removeIfWith ( Predicates2 . isNull ( ) , null ) )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertEquals ( Integer . valueOf ( 2 ) , objects . set ( 1 , 4 ) )
assertEquals ( "[1, 2, 3]" , list . toString ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( copy . sortThis ( Collections . < Integer > reverseOrder ( ) ) , list )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( 0 , tombstonePartitionedChunk . getChunkNumber ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( Integer . valueOf ( 2 ) , objects . set ( 1 , 4 ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> converter . convert ( new Document ( "type" , "YouDontKonwMe" ) ) )
coverThePrivateConstructor ( Assert . class )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertEquals ( Integer . valueOf ( 1 ) , this . newList ( ) . max ( Comparators . reverse ( Integer :: compareTo ) ) )
assertEquals ( this . unmodifiableList , this . unmodifiableList . toImmutable ( ) )
assertSame ( this . unmodifiableList , this . unmodifiableList . asUnmodifiable ( ) )
assertEquals ( Lists . mutable . ofAll ( this . unmodifiableList ) . toReversed ( ) , this . unmodifiableList . toReversed ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( 0 , tombstonePartitionedChunk . getChunkNumber ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( 500 , this . component . getPriority ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( new MutableInteger ( 14 ) , result )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( 128L , ( ( BitSet ) items . get ( listWithCapacity ) ) . size ( ) )
assertEquals ( 15 , ( int ) IntInterval . oneTo ( 5 ) . sum ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( FastList . newListWith ( 2 , 3 ) , interval . subList ( 1 , 3 ) )
assertEquals ( 14 , list1 . dotProduct ( list2 ) )
assertTrue ( this . intInterval . notEmpty ( ) )
assertEquals ( FastList . newListWith ( "false" , "true" , "true" ) , this . booleanIterable . collect ( String :: valueOf ) . toList ( ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( IntArrayList . newListWith ( 1 , 2 , 3 , 4 ) , IntInterval . oneTo ( 4 ) . toReversed ( ) . toSortedList ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 2 , 3 , 3 , 3 } , sortedInts )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertEquals ( ( byte ) 16 , StringFunctions . toPrimitiveByte ( ) . byteValueOf ( "16" ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertEquals ( ObjectBooleanHashMap . newWithKeysValues ( "1" , true ) . toImmutable ( ) , ObjectBooleanMaps . immutable . with ( "1" , true ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( expectedString . toString ( ) , sum [ 0 ] )
assertEquals ( 14 , list1 . dotProduct ( list2 ) )
assertEquals ( FastList . newListWith ( "false" , "true" , "true" ) , this . booleanIterable . collect ( String :: valueOf ) . toList ( ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertEquals ( 10L , IntInterval . oneTo ( 4 ) . sum ( ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" , "4" , "3" , "B" , "3" , "B" } , list . toArray ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( IntArrayList . newListWith ( 1 , 2 , 3 , 4 ) , IntInterval . oneTo ( 4 ) . toReversed ( ) . toSortedList ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 2 , 3 , 3 , 3 } , sortedInts )
assertEquals ( 9 , IntInterval . oneTo ( 9 ) . max ( ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertTrue ( getT ( ) . equals ( c ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertEquals ( ObjectBooleanHashMap . newWithKeysValues ( "1" , true ) . toImmutable ( ) , ObjectBooleanMaps . immutable . with ( "1" , true ) )
assertEquals ( Integer . valueOf ( 1 ) , map . minBy ( String :: valueOf ) )
assertEquals ( BooleanHashBag . newBagWith ( true , false , true ) , actual . toBag ( ) )
assertEquals ( ByteHashBag . newBagWith ( ( byte ) 1 , ( byte ) 2 , ( byte ) 3 ) , actual . toBag ( ) )
assertEquals ( CharHashBag . newBagWith ( 'A' , 'B' , 'C' ) , actual . toBag ( ) )
assertEquals ( DoubleHashBag . newBagWith ( 1.0d , 2.0d , 3.0d ) , actual . toBag ( ) )
assertEquals ( FloatHashBag . newBagWith ( 1.0f , 2.0f , 3.0f ) , actual . toBag ( ) )
assertEquals ( IntHashBag . newBagWith ( 1 , 2 , 3 ) , actual . toBag ( ) )
assertEquals ( LongHashBag . newBagWith ( 1L , 2L , 3L ) , actual . toBag ( ) )
assertEquals ( ShortHashBag . newBagWith ( ( short ) 1 , ( short ) 2 , ( short ) 3 ) , actual . toBag ( ) )
assertEquals ( HashBag . newBagWith ( "Two" ) , actual . toBag ( ) )
assertEquals ( HashBag . newBagWith ( "Two" ) , actual . toBag ( ) )
assertEquals ( HashBag . newBagWith ( "One" , "Three" ) , actual . toBag ( ) )
assertEquals ( HashBag . newBagWith ( "One" , "Three" ) , actual . toBag ( ) )
assertEquals ( HashBag . newBagWith ( "one" , "two" , "three" ) , actual . toBag ( ) )
assertFalse ( map . anySatisfy ( "Monkey" :: equals ) )
assertFalse ( map . allSatisfy ( "Monkey" :: equals ) )
assertTrue ( map . contains ( "Two" ) )
assertEquals ( "One" , map . getOnly ( ) )
assertEquals ( HashBag . newBagWith ( "Two" ) , actual . toBag ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( 10L , actual )
assertEquals ( 10 , actual )
assertEquals ( 10.0d , actual , 0.01 )
assertEquals ( 10.0d , actual , 0.01 )
assertEquals ( Integer . valueOf ( 1 ) , map . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( 4 ) , map . maxBy ( String :: valueOf ) )
assertEquals ( iBag ( 1 , 3 ) , map . selectInstancesOf ( Integer . class ) . toBag ( ) )
Verify . assertEqualsAndHashCode ( map , map . toImmutable ( ) )
assertEquals ( Integer . valueOf ( 1 ) , map . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( map . size ( ) ) , map . maxBy ( String :: valueOf ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )

assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertTrue ( map . allSatisfy ( ignored -> true ) )
assertFalse ( map . anySatisfy ( ignored -> true ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( "1" , map . getIfAbsentPut ( 1 , new PassThruFunction0 < > ( "1" ) ) )
assertNull ( map . ifPresentApply ( 4 , Functions . < String > getPassThru ( ) ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
coverThePrivateConstructor ( Assert . class )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , procedure . getResult ( ) )
assertEquals ( FastList . newListWith ( 1 ) , procedure . getResult ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , procedure . getResult ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
Verify . assertEqualsAndHashCode ( map , map . toImmutable ( ) )
Verify . assertEqualsAndHashCode ( map , map . toImmutable ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( "{1=One, 2=Two, 3=Three}" , map . toString ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( "{}" , map . toString ( ) )
assertNull ( classUnderTest . ifPresentApply ( absentKey , Functions . < String > getPassThru ( ) ) )
assertSame ( key , map4 . keysView ( ) . detect ( key :: equals ) )
assertEquals ( expected , actual )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertNull ( classUnderTest . ifPresentApply ( absentKey , Functions . < String > getPassThru ( ) ) )
assertNull ( classUnderTest . ifPresentApply ( absentKey , Functions . < String > getPassThru ( ) ) )
assertEquals ( Integer . valueOf ( 1 ) , map . minBy ( String :: valueOf ) )
assertEquals ( Integer . valueOf ( map . size ( ) ) , map . maxBy ( String :: valueOf ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( "{1=One, 2=Two, 3=Three, 4=Four}" , map . toString ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( "{1=One}" , map . toString ( ) )
assertSame ( o , ParamChecker . notNull ( o , "o" ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( "{1=One, 2=Two, 3=Three}" , map . toString ( ) )
assertEquals ( 2 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertSame ( map , map . toImmutable ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( "{}" , empty . toString ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( "{}" , empty . toString ( ) )
assertSame ( map , map . asUnmodifiable ( ) )
assertSame ( map , map . asUnmodifiable ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . keySet ( ) )
assertSame ( this . unmodifiableList , this . unmodifiableList . asUnmodifiable ( ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertArrayEquals ( new String [ ] { "One" , "Two" , null } , values )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 } , result )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 , 42 , null } , result )
assertEquals ( 3 , map . size ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 , 4 , 5 ) , map . keySet ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
Verify . assertArrayEquals ( expected , map . keysView ( ) . toArray ( ) )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
assertTrue ( this . classUnderTest ( ) . getOrThrow ( "1" ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
assertTrue ( objects . removeIf ( Predicates . cast ( each -> each == null ) ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
assertNotEquals ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" , null ) , map . values ( ) )
assertTrue ( objects . removeIf ( Predicates . cast ( each -> each == null ) ) )
assertSame ( map , map . asUnmodifiable ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertSame ( map , map . asUnmodifiable ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( new UnmodifiableObjectBooleanMap < > ( this . map ) , this . map . asUnmodifiable ( ) )
assertEquals ( new SynchronizedObjectBooleanMap < > ( this . map ) , this . map . asSynchronized ( ) )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( HashBag . newBagWith ( 2 , 3 , 4 ) , result1 . toBag ( ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( new Pair ( "foo" , "bar" ) , StringUtils . pair ( "foo" , "bar" ) )
assertEquals ( PrimitiveTuples . pair ( Integer . valueOf ( 2 ) , true ) , this . newWith ( 2 , true , 3 , false , 4 , true ) . minBy ( function ) )
assertEquals ( PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , false ) , this . newWith ( 2 , true , 3 , false , 4 , true ) . maxBy ( function ) )
assertTrue ( this . newWith ( 1 , true ) . notEmpty ( ) )
assertEquals ( Long . valueOf ( 19 ) , result )
assertEquals ( 19 , result )
assertEquals ( 19 , result )
assertEquals ( 19.0 , result , 0.0 )
assertEquals ( 19.0 , result , 0.0 )
assertEquals ( 18.0 , actual , 0.0 )
assertEquals ( 18.0 , actual , 0.0 )
assertEquals ( Long . valueOf ( 19 ) , result )
assertEquals ( Long . valueOf ( 19 ) , result )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( TreeSortedMap . newMapWith ( Comparators . reverseNaturalOrder ( ) , "1:true" , "1:true" , "2:false" , "2:false" , "3:true" , "3:true" ) , map )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertEquals ( collection . toString ( ) , builder . toString ( ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( Integer . valueOf ( 4 ) , total )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertTrue ( this . newBag ( ) . containsAllIterable ( this . newBag ( ) ) )
assertEquals ( FastList . newListWith ( false , false ) , map . collect ( f ) )
assertEquals ( FastList . newListWith ( false , false ) , map . collect ( f ) )
assertEquals ( FastList . newListWith ( false , false ) , map . collect ( f ) )
assertSame ( this . map , this . map . asSynchronized ( ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertSame ( this . map , this . map . asUnmodifiable ( ) )
assertEquals ( "{}" , map . toString ( ) )
assertNull ( classUnderTest . ifPresentApply ( absentKey , Functions . < String > getPassThru ( ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertSame ( immutableSortedMap , immutableSortedMap . toImmutable ( ) )
assertEquals ( Integer . valueOf ( 1 ) , new ImmutableTreeMap < Integer , String > ( SortedMaps . mutable . of ( 1 , "1" , 2 , "2" , 3 , "3" , 4 , "4" ) ) . firstKey ( ) )
assertEquals ( Integer . valueOf ( 4 ) , new ImmutableTreeMap < Integer , String > ( SortedMaps . mutable . of ( 1 , "1" , 2 , "2" , 3 , "3" , 4 , "4" ) ) . lastKey ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , map . keySet ( ) )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 , 42 , null } , result )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 , 42 , null } , result )
assertSame ( immutableMap , SortedMaps . immutable . ofSortedMap ( immutableMap ) )
assertEquals ( Comparators . < Integer > reverseNaturalOrder ( ) , revMap . newEmpty ( ) . comparator ( ) )
assertEquals ( "One" , result . get ( 1 ) )
assertEquals ( sortedEntries , entries )
Verify . assertEqualsAndHashCode ( TreeSortedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( new UnmodifiableObjectBooleanMap < > ( this . map ) , this . map . asUnmodifiable ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( "{1=One, 2=Two}" , map . toString ( ) )
assertEquals ( Comparators . < Integer > reverseNaturalOrder ( ) , this . revMap . comparator ( ) )
coverThePrivateConstructor ( Assert . class )
assertSame ( map , map . asUnmodifiable ( ) )
assertEquals ( 10.0d , actual , 0.01 )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertEquals ( UnifiedSet . newSetWith ( 1 , 2 , 3 ) , bag . toSet ( ) )
assertTrue ( set . isEmpty ( ) )
assertEquals ( "1=1" , element . toString ( ) )
Verify . assertEqualsAndHashCode ( adapter1 , adapter2 )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertSame ( INTEGER_HASHING_STRATEGY , map . hashingStrategy ( ) )
assertSame ( INTEGER_HASHING_STRATEGY , map . hashingStrategy ( ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSetWith ( "One" , "Two" , "Three" ) , map . keySet ( ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertSame ( empty , empty . toImmutable ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( this . classUnderTest ( ) . newWith ( "Two" , "2" ) , selectedMultimap )
assertEquals ( this . classUnderTest ( ) . newWith ( "One" , "1" ) , rejectedMultimap )
assertEquals ( this . classUnderTest ( ) . newWith ( "Two" , "2" ) , selectedMultimap )
assertEquals ( this . classUnderTest ( ) . newWith ( "Two" , "2" ) , selectedMultimap )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertTrue ( this . newMultimapWithKeyValue ( 1 , 1 ) . notEmpty ( ) )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( Integer . valueOf ( 1 ) , map . minBy ( String :: valueOf ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( adapter1 , adapter2 )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
assertEquals ( 1 , this . getCollection ( ) . sizeDistinct ( ) )
assertEquals ( Bags . immutable . of ( PrimitiveTuples . pair ( Integer . valueOf ( 1 ) , true ) , PrimitiveTuples . pair ( Integer . valueOf ( 3 ) , true ) ) , result )
assertEquals ( 10L , actual )
assertFalse ( multimap . containsKey ( 1 ) )
assertTrue ( multimap . put ( 4 , "4" ) )
assertEquals ( FastList . newListWith ( Tuples . pair ( "1" , "a" ) , Tuples . pair ( "2" , "b" ) ) , list )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( Integer . valueOf ( 0 ) , bagMultimap . get ( 1 ) . getLast ( ) )
assertFalse ( this . newMultimap ( ) . toImmutable ( ) instanceof MutableSortedBagMultimap )
assertEquals ( FastList . newListWith ( Tuples . pair ( "1" , "a" ) , Tuples . pair ( "2" , "b" ) ) , list )
assertEquals ( "{One=[1, 2]}" , multimap . toString ( ) )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( UnifiedSet . newSetWith ( Tuples . pair ( 1 , "A" ) , Tuples . pair ( 2 , "B" ) , Tuples . pair ( 3 , "C" ) , Tuples . pair ( 4 , "D" ) ) , keyValues )
assertEquals ( Collections . < Integer > reverseOrder ( ) , map . newEmpty ( ) . comparator ( ) )
assertEquals ( Integer . valueOf ( 0 ) , setMultimap . get ( 1 ) . getLast ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( 0 , array . length )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( hashBag , sizes . toBag ( ) )
assertEquals ( set , set . chunk ( 10 ) . getFirst ( ) )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getLast ( ) )
coverThePrivateConstructor ( Assert . class )

assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . min ( Integer :: compareTo ) )
this . emptySet . forEachWithIndex ( ( each , index ) -> Assert . fail ( ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
coverThePrivateConstructor ( Assert . class )
assertSame ( Sets . fixedSize . of ( ) , Sets . fixedSize . of ( ) )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
coverThePrivateConstructor ( Assert . class )
Verify . assertEqualsAndHashCode ( map1 , map2 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertSame ( set . getFirst ( ) , twin1 )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( iSet ( 1 ) , numbers . selectInstancesOf ( Integer . class ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getLast ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertTrue ( this . intSet . notEmpty ( ) )
assertEquals ( true , mandatorySubject . isEmpty ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( Integer . valueOf ( 2 ) , result )
assertEquals ( Integer . valueOf ( 2 ) , result )
assertEquals ( 3 , this . newWith ( 1 , 2 , 3 ) . countWith ( Predicates2 . instanceOf ( ) , Integer . class ) )
assertEquals ( IntArrayList . newListWith ( 1 , 2 , 3 , 4 ) , IntInterval . oneTo ( 4 ) . toReversed ( ) . toSortedList ( ) )
assertEquals ( FastList . newListWith ( 1 ) , this . intSet . toSortedListBy ( Functions . getIntegerPassThru ( ) ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getLast ( ) )
assertNull ( integers . getFirst ( ) )
assertNull ( integers . getFirst ( ) )
assertFalse ( integers . anySatisfy ( ERROR_THROWING_PREDICATE ) )
assertTrue ( integers . allSatisfy ( ERROR_THROWING_PREDICATE ) )
assertNull ( integers . getFirst ( ) )
assertEquals ( Integer . valueOf ( integers . size ( ) ) , integers . getLast ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertSame ( immutable , immutable . newWith ( immutable . size ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( integers , integers . select ( Predicates . lessThan ( integers . size ( ) + 1 ) , FastList . < Integer > newList ( ) ) )
assertEquals ( integers , integers . reject ( Predicates . greaterThan ( integers . size ( ) ) , FastList . < Integer > newList ( ) ) )
assertEquals ( expected , actual )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( integers , integers . collectIf ( Integer . class :: isInstance , Functions . getIntegerPassThru ( ) , FastList . < Integer > newList ( ) ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( integers . toList ( ) , list )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertEquals ( FastList . newListWith ( 3 , 4 , 5 , 6 , 7 ) , this . lazyIterable . reject ( Predicates . lessThan ( 3 ) ) . toList ( ) )
assertEquals ( 2 , countStream )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getLast ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( Integer . valueOf ( 7 ) , result )
assertEquals ( 6.0f , actual , 0.001 )
assertEquals ( 6.0d , actual , 0.001 )
assertEquals ( 10L , actual )
assertEquals ( 10 , actual )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( Integer . valueOf ( 1 ) , integers . getFirst ( ) )
assertTrue ( set . isEmpty ( ) )
assertEquals ( 2 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( 9 , sum . getValue ( ) . intValue ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertArrayEquals ( new Integer [ ] { 1 , 2 , 3 , 4 } , result )
Verify . assertArrayEquals ( expected , set1 . toArray ( ) )
Verify . assertArrayEquals ( expected , set1 . toArray ( ) )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertFalse ( new CompositeFastList < String > ( ) . iterator ( ) . hasNext ( ) )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertEquals ( UnifiedSet . newSetWith ( "1" ) , intersect )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertTrue ( difference . containsAllIterable ( Interval . fromTo ( set . size ( ) + 1 , 5 ) . collect ( String :: valueOf ) ) )
assertNotNull ( result [ 0 ] )
assertEquals ( collection , deserializedCollection )
assertEquals ( UnifiedSet . newSetWith ( 3 , 4 ) , this . setA . select ( Predicates . in ( this . setB ) ) )
assertEquals ( "[1]" , integer . toString ( ) )
assertEquals ( "{1}" , stringBuilder . toString ( ) )
assertEquals ( "{1}" , stringBuilder . toString ( ) )
assertTrue ( objects . removeIf ( Predicates . equal ( 2 ) ) )
assertTrue ( objects . removeIf ( Predicates . equal ( 2 ) ) )
assertThat ( this . mockTagAttribute . getValue ( ) ) . isEqualTo ( FOO )
assertSame ( firstPooledObject , this . staticPool . get ( firstPooledObject ) )
assertSame ( firstObject , pool . get ( equalObject ) )
Verify . assertEqualsAndHashCode ( UnifiedSet . newSet ( interval ) , Sets . immutable . ofAll ( interval ) )
assertEquals ( set , set . unionInto ( UnifiedSet . newSetWith ( "1" ) , UnifiedSet . < String > newSet ( ) ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( Byte . valueOf ( ( byte ) - 99 ) , sum )
assertEquals ( set . toSet ( ) , set . asLazy ( ) . toSet ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 } , sortedInts )
assertEquals ( set . toSet ( ) , set . asLazy ( ) . toSet ( ) )
assertEquals ( new SynchronizedByteSet ( set ) , set . asSynchronized ( ) )
assertEquals ( new UnmodifiableByteSet ( set ) , set . asUnmodifiable ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( set . toSet ( ) , set . asLazy ( ) . toSet ( ) )
assertEquals ( set . toSet ( ) , set . asLazy ( ) . toSet ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 } , sortedInts )
assertEquals ( set . toSet ( ) , set . asLazy ( ) . toSet ( ) )
assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertEquals ( Byte . valueOf ( ( byte ) - 99 ) , sum )
assertEquals ( "contentsstart-128,-64,-2,-1,0,1,31,64end" , sb . toString ( ) )
assertEquals ( FastList . newListWith ( false , false ) , map . collect ( f ) )
assertEquals ( 128L , ( ( BitSet ) items . get ( listWithCapacity ) ) . size ( ) )
assertTrue ( Vector1 . of ( 1.0 ) . epsilonEquals ( Vector1 . of ( 0.0 ) , 1.1 ) )
assertEquals ( UnifiedSet . < Integer > newSetWith ( ) , set )
assertSame ( immutable , immutable . newWith ( immutable . size ( ) ) )
assertNotEquals ( set , withAll )
assertEquals ( expected , actual )
assertEquals ( integers , integers . collect ( Functions . getIntegerPassThru ( ) , UnifiedSet . < Integer > newSet ( ) ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertEquals ( copy . sortThis ( Collections . < Integer > reverseOrder ( ) ) , list )
assertEquals ( integers . toList ( ) , list )
assertEquals ( expected , actual )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( set , intersect )
assertEquals ( set , set . difference ( UnifiedSet . newSetWith ( "not present" ) ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , integers . collectBoolean ( PrimitiveFunctions . integerIsPositive ( ) ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , set . select ( Predicates . lessThan ( 3 ) ) . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , integers . selectWith ( Predicates2 . < Integer > lessThan ( ) , 3 ) . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , set . reject ( Predicates . lessThan ( 3 ) ) . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , integers . rejectWith ( Predicates2 . < Integer > greaterThanOrEqualTo ( ) , 4 ) . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , collect . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , take . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , drop . comparator ( ) )
assertEquals ( Collections . < Double > reverseOrder ( ) , set . selectInstancesOf ( Double . class ) . comparator ( ) )
assertNull ( set . toSortedSet ( ) . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , set . toSortedSet ( Collections . < Integer > reverseOrder ( ) ) . comparator ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertEquals ( Comparators . < String > reverseNaturalOrder ( ) , map . comparator ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , integers . collectBoolean ( PrimitiveFunctions . integerIsPositive ( ) ) )
assertEquals ( ByteArrayList . newListWith ( ) , integers . collectByte ( PrimitiveFunctions . unboxIntegerToByte ( ) ) )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( DoubleArrayList . newListWith ( ) , integers . collectDouble ( PrimitiveFunctions . unboxIntegerToDouble ( ) ) )
assertEquals ( FloatArrayList . newListWith ( ) , integers . collectFloat ( PrimitiveFunctions . unboxIntegerToFloat ( ) ) )
assertEquals ( IntArrayList . newListWith ( ) , integers . collectInt ( PrimitiveFunctions . unboxIntegerToInt ( ) ) )
assertEquals ( LongArrayList . newListWith ( ) , integers . collectLong ( PrimitiveFunctions . unboxIntegerToLong ( ) ) )
assertEquals ( ShortArrayList . newListWith ( ) , integers . collectShort ( PrimitiveFunctions . unboxIntegerToShort ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( UnifiedMap . newMap ( ) , this . newBag ( ) . groupByUniqueKey ( id -> id , UnifiedMap . < String , String > newMap ( ) ) )
assertEquals ( BooleanArrayList . newListWith ( ) , integers . collectBoolean ( PrimitiveFunctions . integerIsPositive ( ) ) )
assertEquals ( ByteArrayList . newListWith ( ) , integers . collectByte ( PrimitiveFunctions . unboxIntegerToByte ( ) ) )
assertEquals ( CharArrayList . newListWith ( 'D' , 'C' , 'B' , 'A' ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( DoubleArrayList . newListWith ( ) , integers . collectDouble ( PrimitiveFunctions . unboxIntegerToDouble ( ) ) )
assertEquals ( FloatArrayList . newListWith ( ) , integers . collectFloat ( PrimitiveFunctions . unboxIntegerToFloat ( ) ) )
assertEquals ( IntArrayList . newListWith ( ) , integers . collectInt ( PrimitiveFunctions . unboxIntegerToInt ( ) ) )
assertEquals ( LongArrayList . newListWith ( ) , integers . collectLong ( PrimitiveFunctions . unboxIntegerToLong ( ) ) )
assertEquals ( ShortArrayList . newListWith ( ) , integers . collectShort ( PrimitiveFunctions . unboxIntegerToShort ( ) ) )
assertEquals ( "toString() failed." , "=$A+$B" , eqn . toString ( ) )
assertEquals ( AccessMode . rw . toString ( ) , "rw" )
assertEquals ( mutableCollection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertTrue ( objects . removeIf ( Predicates . equal ( 2 ) ) )
Verify . assertEqualsAndHashCode ( adapter1 , adapter2 )
assertEquals ( Comparators . < Integer > reverseNaturalOrder ( ) , take . comparator ( ) )
assertEquals ( Comparators . < Integer > reverseNaturalOrder ( ) , drop . comparator ( ) )
assertEquals ( Tuples . pair ( i , 5 - i ) , zip . next ( ) )
assertEquals ( set , set . unionInto ( UnifiedSet . newSetWith ( "1" ) , UnifiedSet . < String > newSet ( ) ) )
assertEquals ( set , set . difference ( UnifiedSet . newSetWith ( "not present" ) ) )

assertEquals ( integers , results )
assertEquals ( Integer . valueOf ( 1 + 1 + 2 + 3 ) , list . injectInto ( 1 , AddFunction . INTEGER ) )
Verify . assertEqualsAndHashCode ( adapter1 , adapter2 )
assertEquals ( integers , results )
assertEquals ( integers , results )
assertTrue ( objects . removeIf ( Predicates . equal ( 2 ) ) )
assertTrue ( sortedSetA . first ( ) . equals ( sortedSetB . first ( ) ) && sortedSetB . first ( ) == 6 )
assertSame ( set , set . asUnmodifiable ( ) )
Verify . assertEqualsAndHashCode ( map1 , map2 )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . min ( Integer :: compareTo ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . max ( Integer :: compareTo ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 3 , 1 , 2 ) . min ( ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . max ( ) )
assertEquals ( "1" , this . newWith ( "1" , "3" , "2" ) . minBy ( Functions . getStringToInteger ( ) ) )
assertEquals ( "3" , this . newWith ( "1" , "3" , "2" ) . maxBy ( Functions . getStringToInteger ( ) ) )
assertEquals ( collection . toString ( ) , '[' + collection . makeString ( ) + ']' )
assertEquals ( collection . toString ( ) , '[' + builder . toString ( ) + ']' )
assertTrue ( set . isEmpty ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( expected , set )
assertEquals ( "12345" , string )
assertEquals ( "12345" , string )
assertEquals ( ByteArrayStack . newStackFromTopToBottom ( ( byte ) 1 , ( byte ) 2 , ( byte ) 3 ) , stack . collectByte ( PrimitiveFunctions . unboxIntegerToByte ( ) ) )
assertEquals ( CharArrayStack . newStackFromTopToBottom ( ( char ) 1 , ( char ) 2 , ( char ) 3 ) , stack . collectChar ( PrimitiveFunctions . unboxIntegerToChar ( ) ) )
assertEquals ( DoubleArrayStack . newStackFromTopToBottom ( 1 , 2 , 3 ) , stack . collectDouble ( PrimitiveFunctions . unboxIntegerToDouble ( ) ) )
assertEquals ( FloatArrayStack . newStackFromTopToBottom ( 1 , 2 , 3 ) , stack . collectFloat ( PrimitiveFunctions . unboxIntegerToFloat ( ) ) )
assertEquals ( IntArrayStack . newStackFromTopToBottom ( 1 , 2 , 3 ) , stack . collectInt ( PrimitiveFunctions . unboxIntegerToInt ( ) ) )
assertEquals ( LongArrayStack . newStackFromTopToBottom ( 1 , 2 , 3 ) , stack . collectLong ( PrimitiveFunctions . unboxIntegerToLong ( ) ) )
assertEquals ( ShortArrayStack . newStackFromTopToBottom ( ( short ) 1 , ( short ) 2 , ( short ) 3 ) , stack . collectShort ( PrimitiveFunctions . unboxIntegerToShort ( ) ) )
assertEquals ( "[4, 3, 2, 1]" , stack . toString ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , bag1 . groupByUniqueKey ( id -> id ) )
assertEquals ( "54321" , builder . toString ( ) )
assertEquals ( "40302010" , builder . toString ( ) )
assertEquals ( "5041322314" , builder . toString ( ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( "54321" , builder . toString ( ) )
assertEquals ( Integer . valueOf ( 1 ) , stack . getLast ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertSame ( expected , expected . toImmutable ( ) )
assertTrue ( iterator . hasNext ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , take . comparator ( ) )
assertEquals ( Collections . < Integer > reverseOrder ( ) , drop . comparator ( ) )
coverThePrivateConstructor ( Assert . class )
assertEquals ( 1 , objects . indexOf ( 2 ) )
assertFalse ( arrayType . canCreateSubtypes ( ) )
this . iterables . forEach ( Procedures . cast ( each -> Assert . assertEquals ( Integer . valueOf ( 15 ) , Iterate . injectInto ( 0 , each , AddFunction . INTEGER ) ) ) )
this . emptySet . forEachWithIndex ( ( each , index ) -> Assert . fail ( ) )
assertEquals ( - 1 , this . classUnderTest ( ) . detectIndex ( Predicates . alwaysTrue ( ) ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertFalse ( new CompositeFastList < String > ( ) . iterator ( ) . hasNext ( ) )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertNotNull ( client . rbac ( ) . clusterRoles ( ) . load ( getClass ( ) . getResourceAsStream ( "/test-clusterrole.yml" ) ) . item ( ) )
assertEquals ( ArrayStack . newStackFromTopToBottom ( 2 , 3 ) , this . unmodifiableStack . select ( Predicates . greaterThan ( 1 ) ) )
assertNull ( this . list . comparator ( ) )
assertEquals ( 10_000 , map . entrySet ( ) . size ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( this . mutableStack . getFirst ( ) , this . unmodifiableStack . getFirst ( ) )
assertSame ( stack1 , stack1 . asUnmodifiable ( ) )
assertEquals ( list , this . classUnderTest ( ) . toList ( ) )
assertEquals ( this . classUnderTest ( ) , this . newWithMap ( ) )
assertEquals ( list , this . classUnderTest ( ) . toList ( ) )
assertEquals ( BooleanArrayList . newListWith ( ) , this . classUnderTest ( ) . peek ( 0 ) )
assertNotNull ( rb )
assertNotNull ( rb )
assertNotNull ( rb )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . ofAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( UNICODE_STRING , new StringBuilder ( adapt ) . toString ( ) )
assertEquals ( UNICODE_STRING . subSequence ( 1 , 3 ) , sequence )
assertEquals ( list , this . classUnderTest ( ) . toList ( ) )
assertEquals ( 2L , BooleanArrayList . newListWith ( false , false , true ) . asReversed ( ) . count ( BooleanPredicates . equal ( false ) ) )
assertEquals ( UNICODE_STRING , new StringBuilder ( adapt ) . toString ( ) )
assertEquals ( UNICODE_STRING . subSequence ( 1 , 3 ) , sequence )
assertEquals ( list , this . classUnderTest ( ) . toList ( ) )
assertEquals ( UNICODE_STRING , builder . toString ( ) )
assertEquals ( UNICODE_STRING , builder . toString ( ) )
assertEquals ( 2L , BooleanArrayList . newListWith ( false , false , true ) . asReversed ( ) . count ( BooleanPredicates . equal ( false ) ) )
assertEquals ( UNICODE_STRING . subSequence ( 1 , 3 ) , sequence )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 } , Interval . fromTo ( 1 , 5 ) . toIntArray ( ) )
assertEquals ( UNICODE_STRING , builder . toString ( ) )
assertEquals ( 2L , BooleanArrayList . newListWith ( false , false , true ) . asReversed ( ) . count ( BooleanPredicates . equal ( false ) ) )
assertEquals ( 14 , list1 . dotProduct ( list2 ) )
assertEquals ( 5 , integerBatchIterable . getBatchCount ( 3 ) )
assertEquals ( "foo" , AbstractImmutableEntry . < String > getKeyFunction ( ) . valueOf ( entry ) )
assertEquals ( Integer . valueOf ( 2 ) , AbstractImmutableEntry . < Integer > getValueFunction ( ) . valueOf ( entry ) )
assertEquals ( "One" , map . getOnly ( ) )
assertSame ( list , list . without ( 2 ) )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( Stacks . immutable . with ( ) , emptyStack )
assertEquals ( ArrayIterate . distinct ( objectArray , HashingStrategies . fromFunction ( String :: toLowerCase ) ) , objectArrayExpected )
assertEquals ( 3 , ArrayIterate . count ( INTEGER_ARRAY , Predicates . lessThan ( 4 ) ) )
assertTrue ( ArrayIterate . anySatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , Integer . class ) )
assertTrue ( ArrayIterate . allSatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , Integer . class ) )
assertTrue ( ArrayIterate . noneSatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , String . class ) )
assertThat ( cache . get ( "key" ) ) . isNull ( )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertEquals ( expected , multimap . toMap ( ) )
assertArrayEquals ( expected , actual )
assertEquals ( "1, 2, 3, 4, 5" , ArrayIterate . makeString ( array ) )
assertEquals ( "1, 2, 3, 4, 5" , ArrayIterate . makeString ( array ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( new BigInteger ( "15" ) , ArrayIterate . sumOfBigInteger ( objects , integer -> new BigInteger ( integer . toString ( ) ) ) )
assertEquals ( expected , cutTheSticks . cutTheSticks ( array ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertEquals ( ListIterate . reverseThis ( integers ) , reverseResults )
assertEquals ( integers , results )
assertEquals ( Integer . valueOf ( 102 ) , ArrayListIterate . injectInto ( 1 , list , AddFunction . INTEGER ) )
assertEquals ( 102.0 , ArrayListIterate . injectInto ( 1.0d , list , AddFunction . INTEGER_TO_DOUBLE ) , 0.0001 )
assertEquals ( 102 , ArrayListIterate . injectInto ( 1 , list , AddFunction . INTEGER_TO_INT ) )
assertEquals ( 102 , ArrayListIterate . injectInto ( 1L , list , AddFunction . INTEGER_TO_LONG ) )
assertEquals ( "0123" , ArrayListIterate . injectInto ( "0" , list , AddFunction . STRING ) )
assertEquals ( Integer . valueOf ( 3 ) , ArrayListIterate . injectInto ( Integer . MIN_VALUE , list , MaxSizeFunction . STRING ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . injectInto ( Integer . MAX_VALUE , list , MinSizeFunction . STRING ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
ArrayListIterate . forEachWithIndex ( list , ( object , index ) -> Assert . assertEquals ( index , object - 1 ) )
ArrayListIterate . forEachWithIndex ( list , ( object , index ) -> Assert . assertEquals ( index , object - 1 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( 100 , Iterate . count ( result , Predicates . isNull ( ) ) )
assertEquals ( 30 , result . getValue ( ) . intValue ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( 105 , result . get ( 0 ) . intValue ( ) )
assertEquals ( this . getCollection ( ) . size ( ) , this . getCollection ( ) . groupBy ( Functions . getPassThru ( ) ) . size ( ) )
assertEquals ( this . getCollection ( ) . size ( ) , this . getCollection ( ) . groupBy ( Functions . getPassThru ( ) ) . size ( ) )
assertEquals ( this . getCollection ( ) . size ( ) , this . getCollection ( ) . groupBy ( Functions . getPassThru ( ) ) . size ( ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( IterableIterate . detect ( null , null ) ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( this . getIntegerSet ( ) , Object :: equals , 1 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . injectInto ( null , null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ListIterate . injectInto ( null , null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( IterableIterate . injectInto ( null , null , null ) ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
assertSame ( list , list . without ( 9 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . injectInto ( null , null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertEqualsAndHashCode ( FastList . newList ( integers ) , list )
assertTrue ( UnifiedSet . newSet ( each ) . contains ( result ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
assertTrue ( ArrayIterate . anySatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , Integer . class ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
assertTrue ( ArrayIterate . allSatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , Integer . class ) )
forEach ( type -> assertThat ( type . getAnnotation ( InfrastructureTypeAnnotation . class ) . isPresent ( ) , is ( false ) ) )
assertTrue ( ArrayIterate . noneSatisfyWith ( INTEGER_ARRAY , Predicates2 . instanceOf ( ) , String . class ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , Iterate . detectWith ( list , Object :: equals , 1 ) )
assertTrue ( Iterate . removeIf ( integers , IntegerPredicates . isEven ( ) ) )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( 30 , result . getValue ( ) . intValue ( ) )
assertEquals ( 30 , result . getValue ( ) . intValue ( ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( new ObjectBooleanHashMap ( ) . toImmutable ( ) , ObjectBooleanMaps . immutable . withAll ( ObjectBooleanMaps . immutable . of ( ) ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 1 , 2 , 2 , 3 , 3 ) , Iterate . groupByUniqueKey ( FastList . newListWith ( 1 , 2 , 3 ) , id -> id ) )
assertEquals ( 10 , sum )
assertEquals ( 6 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum )
assertEquals ( 6 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "1021324354" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( "12345" , builder . toString ( ) )
assertEquals ( ListIterate . reverseThis ( integers ) , reverseResults )
assertEquals ( integers , results )
assertEquals ( Integer . valueOf ( 1 + 2 + 3 + 4 + 5 ) , MapIterate . injectInto ( 0 , map , AddFunction . INTEGER ) )
assertEquals ( expected , list )
assertEquals ( Bags . mutable . of ( 1 , 2 , 3 , 4 , 5 ) , HashBag . newBag ( results ) )
assertEquals ( map . getKey ( "value1" ) , "key1" )
assertEquals ( CharArrayList . newListWith ( ) , integers . collectChar ( integer -> ( char ) ( integer . intValue ( ) + 64 ) ) )
assertEquals ( FastList . newListWith ( 1 ) , result )
assertEquals ( FastList . newListWith ( 'a' , 'b' ) . toBag ( ) , target . toBag ( ) )
assertEquals ( FastList . newListWith ( 1 , 2 ) . toBag ( ) , target . toBag ( ) )
assertEquals ( FastList . newListWith ( "1" , "2" ) . toBag ( ) , result . toBag ( ) )
assertEquals ( BooleanHashBag . newBagWith ( true , true ) , result . toBag ( ) )
assertEquals ( ByteHashBag . newBagWith ( ( byte ) 1 , ( byte ) 2 ) , result . toBag ( ) )
assertEquals ( CharHashBag . newBagWith ( ( char ) 1 , ( char ) 2 ) , result . toBag ( ) )
assertEquals ( DoubleHashBag . newBagWith ( 1 , 2 ) , result . toBag ( ) )
assertEquals ( FloatHashBag . newBagWith ( 1 , 2 ) , result . toBag ( ) )
assertEquals ( IntHashBag . newBagWith ( 1 , 2 ) , result . toBag ( ) )
assertEquals ( LongHashBag . newBagWith ( 1L , 2L ) , result . toBag ( ) )
assertEquals ( ShortHashBag . newBagWith ( ( short ) 1 , ( short ) 2 ) , result . toBag ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 'a' , "1" , 'b' , "2" ) . toBag ( ) , result . toBag ( ) )
assertEquals ( "<![CDATA[qwerty]]>" , XMLHandler . buildCDATA ( "qwerty" ) )
assertEquals ( "123" , string )
assertNull ( integers . detect ( Integer . valueOf ( 1 ) :: equals ) )
assertNull ( integers . detect ( Integer . valueOf ( 1 ) :: equals ) )
assertEquals ( 'a' , character )
assertEquals ( 'b' , character )
assertEquals ( 'b' , character )
assertEquals ( "abc" , string )
assertNull ( integers . detect ( Integer . valueOf ( 1 ) :: equals ) )
assertEquals ( 3 , count )
assertEquals ( 0 , count )
assertEquals ( "1a2b3c" , builder . toString ( ) )
assertEquals ( "1a2b3c" , builder . toString ( ) )
assertEquals ( "\u3042\uD840\uDC00\u3044\uD840\uDC03\u3046\uD83D\uDE09" , builder . toString ( ) )
assertEquals ( expectedString , StringUtil . substringIncludingLast ( str , separator ) )
assertEquals ( BooleanArrayList . newListWith ( false , true , true ) , this . booleanIterable . toList ( ) )
assertEquals ( 32 , Iterate . injectInto ( 1 , iterable , AddFunction . INTEGER ) . intValue ( ) )
assertEquals ( "0123" , Iterate . injectInto ( "0" , iterable , AddFunction . STRING ) )
assertEquals ( 3 , Iterate . injectInto ( Integer . MIN_VALUE , iterable , MaxSizeFunction . STRING ) . intValue ( ) )
assertEquals ( 1 , Iterate . injectInto ( Integer . MAX_VALUE , iterable , MinSizeFunction . STRING ) . intValue ( ) )
Iterate . forEachWithIndex ( iterable , ( object , index ) -> Assert . assertEquals ( index , object - 1 ) )
Iterate . forEachWithIndex ( iterable , ( object , index ) -> Assert . assertEquals ( index , object - 1 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
Verify . assertThrows ( NullPointerException . class , ( ) -> Assert . assertNull ( ArrayListIterate . detect ( null , null ) ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( Integer . valueOf ( 1 ) , ArrayListIterate . detectWith ( list , Object :: equals , 1 ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( 5 , sum . getValue ( ) . intValue ( ) )
assertEquals ( Interval . oneTo ( 10 ) , newCollection )
assertEquals ( 30 , result . getValue ( ) . intValue ( ) )
assertEquals ( Integer . valueOf ( 3 ) , this . newWith ( 1 , 3 , 2 ) . max ( Integer :: compareTo ) )
assertEquals ( Integer . valueOf ( 1 ) , this . newWith ( 1 , 3 , 2 ) . min ( Integer :: compareTo ) )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( Integer . valueOf ( 7 ) , RandomAccessListIterate . injectInto ( 1 , list , AddFunction . INTEGER ) )
assertEquals ( 7 , RandomAccessListIterate . injectInto ( 1 , list , AddFunction . INTEGER_TO_INT ) )
assertEquals ( 7 , RandomAccessListIterate . injectInto ( 1 , list , AddFunction . INTEGER_TO_LONG ) )
assertEquals ( 7.0d , RandomAccessListIterate . injectInto ( 1.0 , list , AddFunction . DOUBLE ) , 0.001 )
assertEquals ( "0123" , RandomAccessListIterate . injectInto ( "0" , list , AddFunction . STRING ) )
assertEquals ( Integer . valueOf ( 3 ) , RandomAccessListIterate . injectInto ( Integer . MIN_VALUE , list , function ) )
assertEquals ( Integer . valueOf ( 1 ) , RandomAccessListIterate . injectInto ( Integer . MAX_VALUE , list , function ) )
assertEquals ( "[(this SingletonList)]" , list . toString ( ) )
assertNull ( sumReducer . reduce ( numbers ) )
RandomAccessListIterate . forEachWithIndex ( list , ( object , index ) -> Assert . assertEquals ( index , object - 1 ) )
assertEquals ( 3 , this . newWith ( 1 , 2 , 3 ) . countWith ( Predicates2 . instanceOf ( ) , Integer . class ) )
assertEquals ( "true false true " , sum [ 0 ] )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertTrue ( new DoubletonMap < > ( 1 , "1" , 2 , "2" ) . notEmpty ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> EndpointId . of ( "" ) ) . withMessage ( "Value must not be empty" )
assertEquals ( BooleanArrayList . newListWith ( false , true , true ) , this . booleanIterable . toList ( ) )
assertTrue ( this . newWith ( 1 , 2 ) . notEmpty ( ) )
assertEquals ( "ml.abracadabra.com" , cfgDao . get ( CONFIG_SMTP_SERVER ) . getValue ( ) , "SMTP server should be updated" )
assertEquals ( "ml.abracadabra.com" , cfgDao . get ( CONFIG_SMTP_SERVER ) . getValue ( ) , "SMTP server should be updated" )
assertEquals ( ConfigurationKey . CASSANDRA_KEYSPACE . defaultValue ( ) , value )
assertEquals ( true , f . getDefaultValue ( ) )
fail ( )
assertNull ( holder [ 0 ] )
assertThat ( e . getMessage ( ) ) . isEqualTo ( "Halt! Who goes there?" )
assertEquals ( "Hello" , f . get ( ) )
assertFalse ( timer . stop ( ) . isEmpty ( ) )
assertEquals ( "Hello" , f . get ( ) )
assertFalse ( timer . stop ( ) . isEmpty ( ) )
fail ( )
assertArrayEquals ( TEST_BYTES1 , copyArray )
assertEquals ( packet , p )
assertEquals ( buffer . capacity ( ) , writable . limit ( ) )
assertArrayEquals ( data , check )
assertEquals ( i , hash . add ( ref ) )
assertEquals ( i , hash . add ( ref ) )
assertArrayEquals ( data , check )
assertEquals ( it2 . next ( ) , it3 . next ( ) )
assertFalse ( resources . contains ( "/login" ) )
assertNotNull ( result )
assertFalse ( component . execute ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertThat ( ex . get ( ) ) . isInstanceOf ( IllegalStateException . class )
assertTrue ( raisedAnError )
assertNull ( "Consultant was not deleted" , consultant )
assertThat ( provider ) . isEqualTo ( provider . init ( ConfigurationContext . EMPTY ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertThat ( ServiceCoordinate . parse ( "foo bar baz" ) , is ( nullValue ( ) ) )
assertFalse ( "unexpected ddl failure" , failed . get ( ) )
assertEquals ( "A1" , cache . get ( "a" ) )
assertEquals ( this . queue . extractMin ( ) , Character . valueOf ( ( char ) ( 'j' - i ) ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertNull ( "Null expected" , CacheManager . getInstance ( ) . unwrap ( clazz [ i ] ) )
assertNull ( JBBPFieldString . reverseBits ( null ) )
assertEquals ( word , word2 )
assertThat ( Sort . by ( "foo" ) . iterator ( ) . next ( ) . getDirection ( ) ) . isEqualTo ( Sort . DEFAULT_DIRECTION )
assertNotNull ( panel . add ( testPanel ) )
assertNotNull ( panel . add ( testPanel ) )
assertNotNull ( panel . add ( testPanel ) )
assertEquals ( 1 , count )
assertNotNull ( type . toString ( ) )
assertNotNull ( managerFactory )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertNull ( array )
assertThat ( FileUtil . changeFileExtension ( "test.json" , null ) ) . isEqualTo ( "test" )
assertEquals ( "109 121 32 97 100 100 114 101 115 115 33" , WordUtil . toDecimal ( "my address!" ) )
assertThat ( ( String ) ScenarioBeanUtil . fillBean ( of ( null ) , String . class . getCanonicalName ( ) , paramsToSet , classLoader ) ) . isNull ( )
assertThat ( filter ( ITEMS ) . with ( "name" ) . equalsTo ( "n1" ) . get ( ) ) . containsExactly ( ITEMS [ 0 ] )
assertThat ( filter ( ITEMS ) . with ( "name" ) . equalsTo ( "n1" ) . get ( ) ) . containsExactly ( ITEMS [ 0 ] )
assertNull ( PropertyUtil . stripPrefix ( ( String ) null , "prefixed." ) )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertNotNull ( instance )
fail ( "expected exception" )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertNull ( StringUtils . padEnd ( null , 5 , '*' ) )
assertNull ( StringUtils . padEnd ( null , 5 , '*' ) )
fail ( )
fail ( )
assertEquals ( "text/xml" , ContentTypes . extractMimePart ( "Text/Xml ; charset = ISO-8859-1;x=y" ) )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertNotNull ( new ProxySocketFactory ( new Host ( new TestProtocol ( ) , "localhost" ) ) . createSocket ( "localhost" , 22 ) )
assertEquals ( "We were expecting another cause" , "Expected" , e . getCause ( ) . getMessage ( ) )
assertThat ( reflector . invoke ( object , "hashCode" , null ) , is ( ( Object ) object . hashCode ( ) ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( CACHE_NAME , this . cache . getName ( ) )
assertEquals ( InjectionScope . values ( ) . length , InjectionScope . size ( ) )
assertEquals ( 1 , result )
assertEquals ( 0 , arr1 . length )
assertEquals ( 0 , arr1 . length )
assertEquals ( 1 , result )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( 1 , result )
assertEquals ( LazyList . get ( input , 0 ) , "a" )
assertNull ( consumer . receive ( 1000 ) )
assertNotNull ( student )
assertEquals ( "^27[78]{1}[0-9]{8}$" , bound . regexAsString ( ) )
assertEquals ( uuid , converter . convertFrom ( uuid . toString ( ) ) )
assertEquals ( "force-square" , SymbolShapeHint . FORCE_SQUARE . toString ( ) )
assertTrue ( theContact instanceof CircleContact )
assertNotNull ( Static . getLogger ( ) )
assertEquals ( "{}" , optionsBuilder . build ( options ) )
assertNull ( service . getAWSRegion ( ) )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertEquals ( TransportUtils . USER_AGENT_STRING , actualUserAgentString )
assertEquals ( PojoConst . POJO , lPojoInstanceFactory . getImplName ( ) )
assertEquals ( date , instance . getDate ( ) )
assertEquals ( true , model . clientCertEnabled ( ) )
assertEquals ( "zookeeper://192.168.99.100:32770" , registry . getAddress ( ) )
assertEquals ( - 1 , metadata . getChannelColor ( 0 , 0 ) . getValue ( ) . intValue ( ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( builder . getPath ( ) )
assertEquals ( subscription . getSubscriptionProperties ( ) , setProperties )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertEquals ( PojoConst . POJO , lPojoInstanceFactory . getImplName ( ) )
assertEquals ( subscription . getSubscriptionProperties ( ) , setProperties )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertEquals ( "No Filter" , Util . getString ( "no-filter" ) )
assertThat ( factory . create ( value ) , is ( BigDecimal . valueOf ( value . getTime ( ) ) ) )
assertThat ( factory . create ( value ) , is ( BigDecimal . valueOf ( value . getTime ( ) ) ) )
assertThat ( factory . create ( value ) , is ( BigDecimal . valueOf ( value . getTime ( ) ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertNotNull ( message )
assertEquals ( "This {0} message {1} has {2} 3 params" , message )
assertNull ( snrNoService . shortNameService ( false ) )
assertThat ( tableProperties . getProperties ( ) . containsKey ( "key" ) , is ( true ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( 36 , new LazyUuid ( ) . getValue ( ) . length ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertNull ( testMonitor . noComponentFound ( tpc , key ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( 0x01 , result [ 0 ] )
assertNull ( "expected null string" , amqpTextMessageFacade . getText ( ) )
assertNull ( "null string should have been returned" , AmqpMessageIdHelper . toMessageIdString ( null ) )
assertNull ( "null string should have been returned" , AmqpMessageIdHelper . toCorrelationIdString ( null ) )
assertNotNull ( AmqpMessageSupport . getSymbol ( "x-opt-something-or-other" ) )
assertNotNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( "x-opt-test" , null ) )
assertEquals ( t2 , UUIDUtils . max ( t1 , t2 ) )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertEquals ( jmsTextMessage . getBody ( String . class ) , text )
assertEquals ( jmsTextMessage . getBody ( String . class ) , text )
assertEquals ( buffer . capacity ( ) , writable . limit ( ) )
assertEquals ( buffer . capacity ( ) , writable . limit ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
GAssert . assertNotEndsWith ( expected , actual )
assertEquals ( "OK" , result )
assertEquals ( "OK" , result )
assertEquals ( ClusterType . ONE_WAY , interceptor . tryParseClusterType ( "cluster1" ) )
assertEquals ( vals , Sequences . simple ( vals ) . toList ( ) )
assertThat ( nonAdults ) . size ( ) . isEqualTo ( 2 )
assertTrue ( countDownLatch . await ( 1 , TimeUnit . MINUTES ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertArrayEquals ( new String [ 0 ] , args )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertEquals ( "forbidden" , e . getMessage ( ) )
assertEquals ( null , result )
assertThat ( cfg ) . isEqualTo ( cfg . toBuilder ( ) . build ( ) )
assertEquals ( "Testing" , s )
assertEquals ( 10 , b . getNumRows ( ) )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertEquals ( le . getCause ( ) . getMessage ( ) , "Empty password is not allowed" )
assertEquals ( le . getCause ( ) . getMessage ( ) , "Empty password is not allowed" )
assertTrue ( "exception should contain null: " + e , e . getMessage ( ) . contains ( "null" ) )
assertTrue ( "exception should contain null: " + e , e . getMessage ( ) . contains ( "null" ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotNull ( ds )
assertEquals ( LazyList . get ( input , 0 ) , "a" )
assertArrayEquals ( _expectedValueBytes , valueBytes )
assertEquals ( ( int ) sut . get ( i ) , i )
assertNotNull ( model )
assertEquals ( expectedJson , run ( new DataFileReadTool ( ) , "--head" , "5" , sampleFile . getPath ( ) ) )
assertNull ( JsUtils . escape ( null ) )
assertThat ( provider . getRegistry ( ) ) . isEqualTo ( registry )
assertArrayEquals ( new String [ ] { "a2" } , bd . accessibleProperties . get ( 0 ) . getAnnotation ( JsonProperty . class ) . aliases ( ) )
assertEquals ( le . getCause ( ) . getMessage ( ) , "Empty password is not allowed" )
assertEquals ( le . getCause ( ) . getMessage ( ) , "Empty password is not allowed" )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertThat ( entries . get ( 0 ) . getUrl ( ) , endsWith ( "?ref=main" ) )
assertThat ( entries . get ( 0 ) . getUrl ( ) , endsWith ( "?ref=main" ) )
JsonAssert . assertObjectEquals ( "{result: 'Name'}" , result )
assertTrue ( en . getConfiguration ( ) . isSecure ( ) )
assertNull ( consumer . receive ( 1000 ) )
assertNotNull ( consumer . receive ( 1000 ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertEquals ( "Failover timeout of " + timeout + " ms reached." , jmse . getMessage ( ) )
assertNull ( consumer . receive ( 2000 ) )
assertNull ( consumer . receive ( 2000 ) )
assertThat ( nullSafeOnSourceGroupAndPojoFlow . getLifecycleState ( ) . isStarted ( ) , is ( true ) )
assertThat ( nullSafeOnSourceGroupAndPojoFlow . getLifecycleState ( ) . isStarted ( ) , is ( true ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertNotNull ( "Session should not be null" , session )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertEquals ( "mqttv3.1" , wsMQTTConnection . getConnection ( ) . getUpgradeResponse ( ) . getAcceptedSubProtocol ( ) )
assertNotNull ( "Session should not be null" , session )
assertNotNull ( "Session should not be null" , session )
assertTrue ( PlaceholdedMdb . called )
assertNotNull ( message )
assertTrue ( expected . getMessage ( ) . contains ( loginConfigScope ) )
assertNotNull ( message )
assertNotNull ( message )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( connection )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertNotNull ( msg )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertThat ( del . getDeadline ( ) , is ( deadline ) )
assertThat ( del . getDeadline ( ) , is ( deadline ) )
assertNotNull ( "unable to create Service" , service )
assertNotNull ( "unable to create Service" , service )
assertNotNull ( baos )
assertNotNull ( managedConnection )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( msg )
assertNotNull ( ds )
assertNotNull ( message )
assertNotNull ( message )
assertNotNull ( message )
fail ( e . getMessage ( ) )
assertTrue ( flag . get ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertNotNull ( result )
assertEquals ( src , translate ( src ) )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertThat ( session . getNamespaceURI ( "mode" ) , is ( "http://www.modeshape.org/1.0" ) )
assertNotNull ( "Session should not be null" , session )
fail ( "Dry run shouldn't create actual metastore" )
assertThat ( provider . getDefaultAuditService ( ) . getRegisteredHandler ( "Mock Handler" ) ) . isNull ( )
fail ( )
assertEquals ( entry . getNewRDN ( ) , newRDN )
fail ( "Cook should have thrown an exception" )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertEquals ( 0 , test . shutdownCalls )
fail ( )
assertTrue ( error )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertEquals ( Boolean . FALSE , toml . getBoolean ( "b" , Boolean . FALSE ) )
assertTrue ( result instanceof GenericEnumSymbol )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEquals ( new String ( Files . readAllBytes ( tempFile . toPath ( ) ) , StandardCharsets . UTF_8 ) , status . getNodeId ( ) . toString ( ) )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( message )
assertNotNull ( message )
fail ( "should failed parse the config from bytes" )
assertTrue ( e . getMessage ( ) . contains ( "Null KeyInfo object!" ) )
assertEquals ( "name" , name )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
fail ( "Expected ConfigurationException" )
fail ( )
assertEquals ( LazyList . get ( input , 0 ) , "a" )
assertTrue ( error )
assertEquals ( "Failover timeout of " + timeout + " ms reached." , jmse . getMessage ( ) )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertNull ( "DNS data returend" , result )
assertNull ( x )
assertEquals ( "bla" , ic . lookup ( "test" ) )
assertEquals ( "bla" , ic . lookup ( "test" ) )
assertEquals ( ProtocolSampleInterceptor . PREFIX + SampleBean . class . getSimpleName ( ) , bean1 . getSimpleName ( ) )
fail ( "failure expected" )
fail ( "failure expected" )
fail ( "failure expected" )
assertNull ( consumer . receive ( 2000 ) )
assertEquals ( "jmsHello Petra" , response )
assertNull ( receiver . getMessageSelector ( ) )
assertFalse ( "unexpected ddl failure" , failed . get ( ) )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( message )
assertNotNull ( message )
assertNotNull ( msg )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
fail ( "expected exception" )
fail ( )
fail ( )
assertThat ( context . getBean ( ZipkinUiProperties . class ) . getLogsUrl ( ) ) . isNull ( )
assertThat ( context . getBean ( ZipkinUiProperties . class ) . getLogsUrl ( ) ) . isNull ( )
assertNotNull ( test . getConnection ( ) )
assertThat ( "handler.get" , handler . getLogger ( ) . getName ( ) , is ( ContextHandler . class . getName ( ) + ".ROOT" ) )
assertNotNull ( cluster )
assertNull ( command . get ( 2 , TimeUnit . MICROSECONDS ) )
assertTrue ( 10 != connection . createChannel ( ) . getChannelNumber ( ) )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertEquals ( "someInterface" , name )
assertTrue ( e . getMessage ( ) . contains ( "Null KeyInfo object!" ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertFalse ( returnedValue )
assertEquals ( token . getIssuedAt ( ) , now )
assertThat ( typeConverter . convert ( obj , field , null ) ) . isEqualTo ( obj )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertNotNull ( ds )
assertEquals ( "clientId-1" , kapuaAppsChannel . getClientId ( ) )
assertEquals ( queue , receiver . getQueue ( ) )
assertTrue ( hasCertificate )
assertTrue ( hasCertificate )
assertTrue ( hasCertificate )
assertTrue ( hasCertificate )
assertTrue ( fs . exists ( old ) )
assertEquals ( ">S0>W0<W0<S0" , history )
assertNotNull ( test . getConnection ( ) )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertTrue ( "commit should throw an exception and not get to here" , false )
assertEquals ( xid , resource . getXid ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertThat ( e . getError ( ) . equals ( "bad_request" ) )
assertNull ( consumer . receive ( 2000 ) )
assertNotNull ( msg )
assertEquals ( 10 , receiveMessages ( ) )
assertTrue ( PlaceholdedMdb . called )
assertThat ( latch . await ( 1 , TimeUnit . MINUTES ) ) . as ( "Call ended in time" ) . isTrue ( )
assertThat ( delegate . beginTransaction ( ) , is ( notNullValue ( ) ) )
assertFalse ( delayHealth . get ( ) )
assertArrayEquals ( destArray , origin )
assertArrayEquals ( destArray , origin )
assertArrayEquals ( destArray , origin )
assertNotNull ( clientSession )
assertThat ( getExecutionFolder ( ) . exists ( ) , is ( true ) )
assertNotNull ( msg )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
fail ( "expected exception" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
assertEquals ( "Not Found. Please contact your web hosting service provider for assistance." , e . getDetail ( ) )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
fail ( "Dry run shouldn't create actual metastore" )
assertTrue ( exceptionCaught . get ( ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
fail ( "delete a non-existing bucket should fail" )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( latch . await ( 1 , TimeUnit . MINUTES ) ) . as ( "Call ended in time" ) . isTrue ( )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
fail ( )
fail ( )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( newSize , counter . get ( ) )
assertFalse ( fail . get ( ) )
assertEquals ( 1 , subscription . unsubscribe ( "grand/foo/bar" ) )
assertNull ( data . get ( "foo" , String . class ) )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( "anonymous" , echoValue )
assertEquals ( "anonymous" , echoValue )
assertEquals ( "Unexpected number of locks created" , _lockIDs . size ( ) , _locks . size ( ) )
assertNull ( ksm )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( command , service . getCommand ( ) )
assertEquals ( "bar" , data . get ( "foo" , String . class ) )
assertEquals ( newSize , counter . get ( ) )
assertNotNull ( ds )
assertEquals ( 1 , subscription . unsubscribe ( "grand/foo/bar" ) )
assertEquals ( msg , listener . getMsg ( ) )
assertEquals ( ElementType . BOOLEAN . size ( ) , ElementType . BOOLEAN . size ( Boolean . FALSE ) )
assertEquals ( "anonymous" , echoValue )
assertTrue ( result )
assertNotNull ( ds )
fail ( e . getMessage ( ) )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertEquals ( 1 , mockPeer . getContextStats ( ) . getSendCalls ( ) )
assertNull ( conn . getClientID ( ) )
assertNull ( "stateful postConstruct operation should success: " + stateful . getPostConstructErrorMessage ( ) , stateful . getPostConstructErrorMessage ( ) )
assertNull ( "stateful postConstruct operation should success: " + stateful . getPostConstructErrorMessage ( ) , stateful . getPostConstructErrorMessage ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( msg )
assertNull ( receiver . getMessageSelector ( ) )
assertNotNull ( test . getConnection ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( queue , receiver . getQueue ( ) )
assertNotNull ( test . getConnection ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( test . getConnection ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertEquals ( "Apache Derby" , con . getMetaData ( ) . getDatabaseProductName ( ) )
assertTrue ( PlaceholdedMdb . called )
assertTrue ( PlaceholdedMdb . called )
assertEqualsSerialisedForm ( Instant . ofEpochMilli ( 1347830279338l ) )
assertEquals ( "Hello World!" , o . toString ( ) )
assertThat ( undertTest . isEnabled ( ) , is ( equalTo ( true ) ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertEquals ( TEST_CLIENT_ID , conn . getClientID ( ) )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( msg )
assertNotNull ( msg )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertTrue ( error )
assertNotNull ( message )
assertTrue ( error )
assertNotNull ( "should have received message[" + i + "]" , consumedMessage )
assertNotNull ( msg )
assertNotNull ( msg )
assertNull ( inputItem . getMediaType ( ) )
assertNotNull ( channel )
assertNull ( "DNS data returend" , result )
assertNotNull ( message )
assertNotNull ( message )
assertThat ( latch . await ( 750 , TimeUnit . MILLISECONDS ) , is ( false ) )
assertNull ( "DNS data returend" , result )
assertNotNull ( message )
assertEquals ( "rocksdb[path: path, readonly: true]" , o1 . toString ( ) )
assertEquals ( 1 , target . methodReturningObject ( ) . publicField )
assertThat ( injector . getInstance ( Thing . class ) ) . isSameInstanceAs ( thing )
assertEquals ( 1 , target . methodReturningObject ( ) . publicField )
assertTrue ( msg . getJMSType ( ) . equals ( this . jmsType ) )
assertEquals ( timezone , "Asia/Seoul" )
assertEquals ( 60 * 1000 , Integer . parseInt ( untilSuccessful . getMillisBetweenRetries ( ) ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
assertTrue ( keywordFactorySpyBasedLibrary . keywordFactoryWasCreated )
fail ( )
fail ( "This should have failed with IllegalStateException" )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertNotNull ( message )
assertNotNull ( message )
assertNotNull ( message )
fail ( "This should have failed due to an invalid range spec" )
assertNotNull ( message )
assertEquals ( aggregateIdentifier , e . getAggregateIdentifier ( ) )
fail ( "This should have failed with IllegalStateException" )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
assertEquals ( "Message" , e . getMessage ( ) )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( "This should have failed with IllegalStateException" )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( "This should have failed with IllegalStateException" )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
fail ( )
fail ( )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( )
fail ( )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "Message" , e . getMessage ( ) )
fail ( )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
assertEquals ( "string5" , message . getString ( 5 ) )
assertEquals ( "string5" , message . getString ( 5 ) )
fail ( "This should have failed due to an invalid range spec" )
assertEquals ( message , e . getMessage ( ) )
fail ( "Should have gotten an NPE" )
fail ( "Should have gotten an NPE" )
fail ( )
fail ( )
fail ( )
fail ( )
assertNull ( new HiveDriver ( null , null , true , jdbcUrlParser ) . getParentLogger ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
fail ( "This should have failed with IllegalStateException" )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
assertNull ( nullMessage . getText ( ) )
assertNull ( nullMessage . getText ( ) )
assertNull ( nullMessage . getText ( ) )
assertNull ( nullMessage . getText ( ) )
fail ( )
assertNotNull ( message )
assertNotNull ( message )
assertEquals ( "Failover timeout of " + timeout + " ms reached." , jmse . getMessage ( ) )
assertThat ( page . getStateValue ( ) , is ( "NSW" ) )
assertNull ( consumer . receive ( 2000 ) )
assertTrue ( ( end - start ) < 150 )
fail ( )
assertEquals ( bytes [ j ] , readBytes [ j ] )
assertTrue ( condition [ 0 ] )
assertEquals ( src , translate ( src ) )
assertThat ( typeConverter . convert ( obj , field , null ) ) . isEqualTo ( obj )
assertEquals ( semanticParts , getSemanticParts )
fail ( )
assertEquals ( "2015-01-01 01:01:01" , DateUtil . formatUTC ( c . getTime ( ) ) )
fail ( "NoSuchObjectException should be thrown." )
fail ( )
fail ( )
fail ( )
assertThat ( out . toString ( ) , containsString ( "bad ping" ) )
assertEquals ( "bar" , map . get ( "foo" ) . value )
assertNull ( BrpAdellijkeTitelCode . wrap ( null , null ) )
assertNull ( BrpAdellijkeTitelCode . wrap ( null , null ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertEquals ( 5 , target . get ( ) )
assertEquals ( 5 , target . get ( ) )
assertEquals ( 5 , target . get ( ) )
assertNull ( checkTimeoutException [ 0 ] )
assertNull ( checkTimeoutException [ 0 ] )
assertThat ( ofDateTime ( ) . apply ( dateTime ( "2001-09-11T22:05:09.203+02:00" ) ) ) . isEqualTo ( "\"2001-09-11T20:05:09.203Z\"" )
assertThat ( ofDateTime ( ) . apply ( dateTime ( "2001-09-11T22:05:09.203+02:00" ) ) ) . isEqualTo ( "\"2001-09-11T20:05:09.203Z\"" )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertEquals ( TagSupport . EVAL_BODY_INCLUDE , getTag ( ) . doStartTag ( ) )
assertFalse ( workItemSet )
assertThat ( policyPlugin . getCreatePermissionMap ( ) . size ( ) , equalTo ( 0 ) )
assertEquals ( "42" , IOUtils . toString ( serializer . count ( 42 ) ) )
assertEquals ( "42" , IOUtils . toString ( serializer . count ( 42 ) ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( typeConverter . convert ( obj , field , null ) ) . isEqualTo ( obj )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
assertEquals ( "null" , new UnicodeString ( null ) . toString ( ) )
assertEquals ( "null" , new UnicodeString ( null ) . toString ( ) )
assertNull ( "No arg constructor" , group . getName ( ) )
assertEquals ( COUNT , bag . size ( ) )
assertEquals ( list , content )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "name" , name )
assertNotNull ( "mContextManager should have been injected, but it is still null." , mContextManager )
assertNotNull ( "mContextManager should have been injected, but it is still null." , mContextManager )
assertThat ( argument . getType ( ) , equalTo ( "int" ) )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( )
fail ( "Should have gotten an NPE" )
fail ( )
fail ( )
fail ( )
fail ( "Should have gotten an NPE" )
fail ( )
assertNull ( array )
fail ( "Should have gotten an NPE" )
fail ( )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
MatcherAssert . assertThat ( componentInst . getLocalId ( ) , is ( - 1 ) )
assertEquals ( "C" , xPathHelper . getString ( "/xml/secondTag/valueTag" , xmlDoc ) )
assertEquals ( expected , Utils . byte2Hex ( b ) )
fail ( )
assertThat ( ( ( HasString ) test ) . getString ( ) ) . isEqualTo ( "a string" )
assertThat ( argument . getType ( ) , equalTo ( "int" ) )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertNull ( array )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( "Given type \"false\" value is not a long type" , e . getMessage ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertThat ( ( Long ) converter . getAsObject ( "100" ) , is ( 100L ) )
assertEquals ( expected , actual )
fail ( "Expected an UnknownDBException or TProtocolException to be thrown" )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( 19 , agent . getProperties ( ) . get ( SoarProperties . E_CYCLE_COUNT ) . intValue ( ) )
assertEquals ( 19 , agent . getProperties ( ) . get ( SoarProperties . E_CYCLE_COUNT ) . intValue ( ) )
assertEquals ( 19 , agent . getProperties ( ) . get ( SoarProperties . E_CYCLE_COUNT ) . intValue ( ) )
assertEquals ( "Resolved Resource name is wrong!" , all_ones , provider . getResourcePath ( true ) . toUri ( ) . toString ( ) )
assertEquals ( semanticParts , getSemanticParts )
fail ( )
assertTrue ( Arrays . asList ( 1 , 2 , 3 ) . contains ( a . one ( ) ) )
assertEquals ( 5 , list . size ( ) )
assertEquals ( 5 , list . size ( ) )
assertEquals ( TestUtil . getTestFile ( productsFolder + "metadata.dim" ) . getAbsolutePath ( ) , metadata . getPath ( ) . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( NetInterfaceType . ETHERNET , config . getType ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "VARCHAR [] FOR BIT DATA" , sb . toString ( ) )
assertThat ( databaseBackedConfig . getEmailLogLevel ( ) ) . isEqualTo ( "INFO" )
assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "name" , name )
assertEquals ( "stack_versions" , resourceDefinition . getPluralName ( ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( "name" , name )
assertEquals ( "\"\"" , builder . toString ( ) )
assertEquals ( session , mojo . getSession ( ) )
assertEquals ( session , mojo . getSession ( ) )
assertThat ( this . bean . getDateProperty ( ) , is ( d ) )
assertThat ( this . bean . getDateProperty ( ) , is ( d ) )
assertEquals ( "" , instance . getValue ( ) )
assertEquals ( "foo=bar&bar=foo" , payload . getValue ( ) )
assertNotNull ( obj . getValue ( ) )
assertTrue ( set . add ( val ) )
assertEquals ( "foo" , r . getName ( ) )
assertThat ( tc . getName ( ) ) . isEqualTo ( "automaticSet" )
assertEquals ( expected , textControl . getForegroundColor ( ) )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( "C3S FRP Level 3 products" , plugIn . getDescription ( null ) )
assertEquals ( "C3S FRP Level 3 products" , plugIn . getDescription ( null ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertEquals ( "me" , role . getName ( ) )
assertEquals ( args [ 1 ] , delegate . getKeystore ( ) , "Keystore parameter gets not parsed correctly" )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertNull ( victim . get ( 1 ) )
assertNull ( victim . get ( 1 ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertTrue ( array == new EuclideanIntegerPoint ( array ) . getPoint ( ) )
assertTrue ( array == new EuclideanIntegerPoint ( array ) . getPoint ( ) )
assertThat ( faker . options ( ) . option ( 1 , 3 , 4 , 5 ) , isOneOf ( integerOptions ) )
assertEquals ( locale , acceptLanguage . getLocale ( ) )
assertEquals ( locale , acceptLanguage . getLocale ( ) )
assertEquals ( value , property . getValue ( ) )
assertEquals ( value , property . getValue ( ) )
assertEquals ( locale , acceptLanguage . getLocale ( ) )
assertEquals ( locale , acceptLanguage . getLocale ( ) )
assertThat ( sut . toHeader ( ) , equalTo ( "type/subtype" ) )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( a , a . not ( ) . not ( ) )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( "*" , NamespaceScope . ALL . getCode ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertTrue ( configuration != null )
assertEquals ( "incorrect value" , 123 , ( int ) id . id ( ) )
assertTrue ( configuration != null )
assertEquals ( BigDecimal . ONE , total )
assertEquals ( "Incorrect condition returned" , cond , not . getCondition ( ) )
assertEquals ( "Expected null result" , null , value )
assertEquals ( NONSTATIC_FIELD_CONTAINER_FIELDS , actual )
assertTrue ( jsonNames . add ( name . jsonName ( ) ) , "Attribute: " + name )
assertEquals ( "incorrect value" , 123 , ( int ) id . id ( ) )
assertEquals ( "incorrect value" , 123 , ( int ) id . id ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( b . verwijderOnderzoek ( ) )
assertNotNull ( b . verwijderOnderzoek ( ) )
assertNotNull ( b . verwijderOnderzoek ( ) )
assertNotNull ( selectieJobRunStatusService . getStatus ( ) )
assertNotNull ( type . getDeclaredMethod ( method . getName ( ) , method . getParameterTypes ( ) ) )
assertNotNull ( type . getDeclaredMethod ( method . getName ( ) , method . getParameterTypes ( ) ) )
assertNotNull ( type . getDeclaredMethod ( method . getName ( ) , method . getParameterTypes ( ) ) )
assertEquals ( "foo" , id )
assertTrue ( configuration != null )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( syntheticWorkItem . getProgressBeginTime ( ) . getClass ( ) , Date . class )
assertEquals ( syntheticWorkItem . getProgressBeginTime ( ) . getClass ( ) , Date . class )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( "aList = []\nanArray = []\n" , new TomlWriter ( ) . write ( new TestClass ( ) ) )
assertEquals ( LOCAL_DATE_TIME , value . getValue ( ) )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertEquals ( position2 . getTime ( ) , result )
assertEquals ( position2 . getTime ( ) , result )
assertThat ( key . getCreationDate ( ) ) . isEqualTo ( testDate )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( "null (null): null on null at null" , e . toString ( ) )
assertEquals ( count , facet . getCount ( ) )
assertFalse ( mep2 . cciEnabled ( ) )
assertEquals ( gloss , testObj . getGloss ( ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( gloss , testObj . getGloss ( ) )
assertEquals ( gloss , testObj . getGloss ( ) )
assertEquals ( "2.3" , prefix . getPrefix ( ) )
assertNull ( generator . generateLabel ( osm ) )
assertNull ( generator . generateLabel ( osm ) )
assertNull ( generator . generateLabel ( osm ) )
assertNull ( generator . generateLabel ( osm ) )
assertEquals ( calendar . getTime ( ) , picker . getMonthView ( ) . getFirstDisplayedDay ( ) )
assertEquals ( date1 , employee1 . getEntryDate ( ) )
assertEquals ( calendar . getTime ( ) , picker . getMonthView ( ) . getFirstDisplayedDay ( ) )
assertEquals ( calendar . getTime ( ) , picker . getMonthView ( ) . getFirstDisplayedDay ( ) )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertTrue ( validator . validate ( EntityNames . TEACHER , teachers ) . equals ( new HashSet < String > ( Arrays . asList ( teacher1 . getEntityId ( ) ) ) ) )
assertNotNull ( factory . getNativeClientClient ( ) )
assertNotNull ( factory . getNativeClientClient ( ) )
assertThat ( dayOfMonthOf ( date ) ) . isEqualTo ( 26 )
assertEquals ( null , DateUtil . parse ( dateString , formatString ) )
assertEquals ( null , DateUtil . parse ( dateString , formatString ) )
assertEquals ( "1.2.3.four" , version . getVersion ( ) )
assertNotEquals ( headers1 , headers2 )
assertNull ( fha . getPlaceRecord ( gedcomWithCustomTags , "@NOTTHERE@" ) )
assertEquals ( "1.2.3.four" , version . getVersion ( ) )
assertNotEquals ( headers1 , headers2 )
assertNotNull ( date1 )
assertEquals ( expectedIdentifierAsUrl , datasetAuthor . getIdentifierAsUrl ( ) )
assertEquals ( "Larry" , person . getName ( ) )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( storage . getUriTemplate ( LocationType . DATA ) , "jail://global:00/foo/bar" )
assertEquals ( BASE_URL , baseUrl )
assertThat ( e . getMessage ( ) , containsString ( "loop" ) )
assertThat ( e . getMessage ( ) , containsString ( "loop" ) )
assertEquals ( "myname" , report . getName ( ) )
assertNull ( test . toString ( ) )
assertThat ( c . body ( ) , is ( equalTo ( "justone" ) ) )
assertEquals ( "false" , property )
assertThat ( id . getProjectSlug ( ) ) . isEqualTo ( PROJECT_SLUG )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertEquals ( "name" , ELTProperties . NAME_PROPERTY . propertyName ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "<qwerty>" , XMLHandler . openTag ( "qwerty" ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Invalid globbing pattern 'invalid[globbing*pattern'" )
assertThat ( o ) . isEqualTo ( null )
assertEquals ( "1" , editor . getAsText ( ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( testTemplate1 . getDescription ( ) , description )
assertNotEquals ( new FiltersBuilder ( ) . withContainers ( "foo" ) , new FiltersBuilder ( ) . withContainers ( "bar" ) )
assertThat ( assertThat ( names ) . actual ) . isSameAs ( names )
assertTrue ( Arrays . equals ( new int [ ] { 1 , 2 , 3 , 1 , 2 , 3 } , a . outerProduct ( a ) . getShape ( ) ) )
assertTrue ( e . getCause ( ) . getMessage ( ) . startsWith ( "Message = java.lang.RuntimeException: bla" ) )
assertEquals ( ReasonEnum . REQUIRED , e . getReason ( ) )
assertTrue ( session . getHtmlToDisplay ( ) . indexOf ( "checkbox" ) == - 1 )
assertEquals ( picker . getMonthView ( ) . getToday ( ) , picker . getLinkDay ( ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertTrue ( ConfigurationTestProductDerivation . closed )
assertNull ( result )
assertEquals ( "me" , role . getName ( ) )
assertThat ( theDayBefore , is ( minusOneDay ( aDay ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( Stats . getState ( ) ) . isEqualTo ( StatsCollectionState . DISABLED )
assertEquals ( "false" , result )
assertEquals ( existingCodes . size ( ) , hits . size ( ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( cd4 , element . getTestFieldConcept ( "lab-test-5497" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertFalse ( streamURL . isPresent ( ) )
assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertEquals ( Locale . getDefault ( ) , LocaleHelper . getDefaultLocale ( ) )
assertEquals ( Locale . getDefault ( ) , LocaleHelper . getDefaultLocale ( ) )
assertNotEquals ( new FiltersBuilder ( ) . withContainers ( "foo" ) , new FiltersBuilder ( ) . withContainers ( "bar" ) )
assertEquals ( "name" , name )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertThat ( ex . getMessage ( ) , is ( "messages must not be null" ) )
assertThat ( ex . getMessage ( ) , is ( "messages must not be null" ) )
assertEquals ( "The validated array index is invalid: 1" , ex . getMessage ( ) )
assertThat ( a ) . isEqualTo ( b )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertTrue ( new JUnitCore ( ) . run ( ExpectSuperclass . class ) . wasSuccessful ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( e . getMessage ( ) , is ( "The homepage method must be specified with @Homepage" ) )
assertEquals ( "04/12/15" , value )
assertEquals ( AbstractCellProcessor . processCell ( "val" , false , null ) , "val" )
assertEquals ( o . getOpt ( ) , insertedOrder . get ( i ) )
fail ( "Must fail." )
assertEquals ( "2" , result . get ( 0 ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( i + 1 , logs . get ( i ) . getEnd ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( sw . toString ( ) , is ( equalTo ( "    or" ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertFalse ( query . hasFilters ( ) )
assertFalse ( query . hasFilters ( ) )
assertNotEquals ( temporalReferenceSystem1 . getName ( ) , result )
assertThat ( map . containsKey ( Guid . newGuid ( ) ) , is ( false ) )
assertEquals ( TOTAL_COUNT , result . size ( ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Invalid globbing pattern 'invalid[globbing*pattern'" )
assertEquals ( "id" , tag . getId ( ) )
assertEquals ( TOTAL_COUNT , result . size ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertEquals ( expectedStatusCode , tableClient . deleteTableWithResponse ( null , null ) . getStatusCode ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "TestList1" , result )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( "name" , name )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( 1 , p . getId ( ) . intValue ( ) )
assertEquals ( 1 , p . getId ( ) . intValue ( ) )
assertNotNull ( date1 )
assertNotNull ( date1 )
assertNull ( uuid )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "TestList1" , result )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNotNull ( instance )
assertTrue ( found )
assertTrue ( found )
assertTrue ( found )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( expected . getMessage ( ) , notNullValue ( ) )
assertEquals ( EXPECTED , output )
assertThat ( expected . getMessage ( ) , notNullValue ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( Family . familyOf ( 200 ) , status . getFamily ( ) )
assertEquals ( Limit . of ( 1 ) , limit )
assertEquals ( count , facet . getCount ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( DataObjectTypeFieldDefinition . FIELD_TYPE , dataObjectTypeFieldDefinition . getFieldType ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNull ( field . getAutocomplete ( ) )
assertNotNull ( instance )
assertNotNull ( targetContext )
assertThat ( "number" , orderNumber . getNumber ( ) , equalTo ( "00000001" ) )
assertNotNull ( date1 )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( "e2E Test" , new Hello ( ) . getHelloString ( ) )
assertEquals ( DEFAULT_LOCATION_STRING , ValidationResults . defaultLocation ( ) . toString ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNotNull ( instance )
assertNotNull ( date1 )
assertEquals ( "<qwerty>" , XMLHandler . openTag ( "qwerty" ) )
assertEquals ( "$classpath" , location )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNotNull ( date1 )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "TestList1" , result )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( "The validated character sequence is blank" , ex . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertNotNull ( date1 )
assertNotNull ( gpf )
assertFalse ( defValue )
assertNotNull ( targetContext )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( 4416 , a . getCount ( ) . intValue ( ) )
assertFalse ( defValue )
assertFalse ( defValue )
assertEquals ( location , emp1 . getLocation ( ) )
assertTrue ( delegate . getSignatureAndHashAlgorithms ( ) . contains ( SignatureAndHashAlgorithm . ANONYMOUS_SHA1 ) )
assertEquals ( "some_string" , getParamInfo ( ) . getPythonName ( ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "foo" , id )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 4 , beanMap . size ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( "limit must be between 1 and 50" , ex . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "negative index" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertTrue ( ConfigurationTestProductDerivation . closed )
assertEquals ( "$first_2,$second_1" , t . generate ( ) )
assertThat ( workItem . getPhaseOnDate ( formatter . parse ( "14/02/2011" ) ) , nullValue ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "Buy" , orderType . getStringValue ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertNull ( image . getUuid ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertNotNull ( result )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( Order . ASCENDING , aggregator . getOrder ( ) )
assertEquals ( Order . ASCENDING , aggregator . getOrder ( ) )
assertEquals ( "XXX-00001" , numerator . format ( BigInteger . ONE ) )
assertThat ( new TestWithToString ( ) , JavaMatchers . hasToString ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertNull ( image . getUuid ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertEquals ( "TestList1" , result )
assertEquals ( "TestList1" , result )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertEquals ( "name" , name )
assertEquals ( new Fetch ( ) . field ( LABEL_ATTR_NAME ) , convert ( attrFilter , entityType , "en" ) )
assertNull ( ds . get ( Hotel . class , - 1 ) )
assertTrue ( wb1 . equals ( wb1 ) )
assertTrue ( wb1 . equals ( wb1 ) )
assertEquals ( CMS , service . getName ( ) )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertEquals ( "type" , exception . getType ( ) )
assertNotNull ( result )
assertThat ( injector . getInstance ( Thing . class ) ) . isSameInstanceAs ( thing )
assertEquals ( 6 , msg . getUtcMonth ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNull ( poUserGroup )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( result , BuildWorkspaceStatus . CANCELLED )
assertEquals ( result , BuildWorkspaceStatus . CANCELLED )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertNotNull ( result )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( datum_gisteren , gisteren )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "No NIO write access in this DataAccessObject." , ex . getMessage ( ) )
assertNotNull ( address )
assertNotNull ( entity . getCreated ( ) )
assertNull ( DiskCachedTile . getCacheFolder ( ) )
assertNotNull ( result )
assertEquals ( datum_gisteren , gisteren )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertEquals ( datum_morgen , morgen )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( 102l , person . getId ( ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertEquals ( "Country" , signatureProductionPlace . getCountry ( ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "State" , myTask . getState ( ) )
assertNotEquals ( "" , session . getState ( ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNull ( DomainUtils . getAdmin ( ) )
assertThat ( new SVNWeb . DescriptorImpl ( ) . getDisplayName ( ) , is ( "SVN::Web" ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( entry . getDescription ( ) , is ( description ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( listTypeConverter . getName ( ) ) . isEqualTo ( NAME )
assertNull ( result )
assertNotSame ( copy , original )
assertNotNull ( "AppProperty " + appProperty + " does not have a key" , key )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( options . buildQueryParameters ( ) . get ( "marker" ) , ImmutableList . of ( ) )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertNull ( victim . get ( 1 ) )
assertEquals ( name , result )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( new GlobalCommentBuilder ( config , null , QualityGate . newBuilder ( ) . status ( QualityGate . Status . OK ) . conditions ( Collections . emptyList ( ) ) . build ( ) , new Reporter ( config ) , new MarkDownUtils ( ) , analysisMode ) . buildForMarkdown ( ) ) . isEqualTo ( "SonarQube analysis indicates that quality gate is passed.\n" + "\n" + "SonarQube analysis reported no issues.\n" )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) ) . contains ( format ( "The testType %s is not unique" , token ) )
assertThat ( exception . getMessage ( ) ) . contains ( format ( "The testType %s is not unique" , token ) )
assertThat ( exception . getMessage ( ) ) . contains ( format ( "The testType %s is not unique" , token ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( "shall have a provider" , sut . getProvider ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( "shall have a provider" , sut . getProvider ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( "shall have a provider" , sut . getProvider ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "0" , result . get ( 0 ) )
assertEquals ( lazyEntity . getInt ( ID_ATTR_NAME ) , id )
assertFalse ( query . hasFilters ( ) )
assertEquals ( "myId" , provider . getId ( ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( username , u . getUsername ( ) , "Username is wrong." )
assertEquals ( "User wasnt found" , userExist . getUsername ( ) , service . getUserByUsername ( userExist . getUsername ( ) ) . getUsername ( ) )
assertEquals ( "john" , currentUserName )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertThat ( this . leader . getRole ( ) ) . isEqualTo ( ROLE )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( user . getId ( ) , 1 )
assertEquals ( "john" , currentUserName )
assertThat ( this . leader . getRole ( ) ) . isEqualTo ( ROLE )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertThat ( databaseBackedConfig . getEmailLogLevel ( ) ) . isEqualTo ( "INFO" )
assertThat ( this . leader . getRole ( ) ) . isEqualTo ( ROLE )
assertEquals ( user . getId ( ) , 1 )
assertEquals ( 1 , user . getUserId ( ) . intValue ( ) )
assertEquals ( new LowerCaseProcessor ( ) . process ( "A" ) , "a" )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( new LowerCaseProcessor ( ) . process ( "A" ) , "a" )
assertEquals ( this . dataverseRole , this . roleAssignment . getRole ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "Unable to parse filter `name:ilike:someName:bla:bla`" ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "pathVersion \"\" is invalid, format must be v+number or V+number." , exception . getMessage ( ) )
assertEquals ( username , u . getUsername ( ) , "Username is wrong." )
assertTrue ( ConfigurationTestProductDerivation . closed )
assertEquals ( "pathVersion \"\" is invalid, format must be v+number or V+number." , exception . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( new MySQLTimestamp2BinlogProtocolValue ( ) . read ( columnDef , payload ) , is ( MySQLTimeValueUtil . getSimpleDateFormat ( ) . format ( new Timestamp ( currentSeconds * 1000L ) ) ) )
assertThat ( new MySQLTimestamp2BinlogProtocolValue ( ) . read ( columnDef , payload ) , is ( MySQLTimeValueUtil . getSimpleDateFormat ( ) . format ( new Timestamp ( currentSeconds * 1000L ) ) ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "The number of days must be equal or greater than zero." , errorMessage )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertThat ( repository . procedureWithNoInputAnd1OutputParameter ( ) ) . isEqualTo ( 42 )
assertThat ( repository . procedureWithNoInputAnd1OutputParameter ( ) ) . isEqualTo ( 42 )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( "true, true, true" , BooleanHashBag . newBagWith ( true , true , true ) . makeString ( ) )
assertEquals ( "category cannot be null." , e . getMessage ( ) )
assertEquals ( GBP_50 , MoneyUtils . add ( GBP_20 , GBP_30 ) )
assertEquals ( 0 , array . length )
assertNull ( new Shippable ( env ) . getPullRequest ( ) )
assertNull ( o )
assertEquals ( c , c )
assertEquals ( e . getMessage ( ) , "no bueno" )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertTrue ( true )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertNotNull ( namesrvConfig )
assertEquals ( "egovernments" , usr . getUsername ( ) )
assertEquals ( "uri" , URI_USER1 , u . getUri ( ) )
assertEquals ( "uri" , URI_USER1 , u . getUri ( ) )
assertEquals ( "value2" , item . getProperty ( "key" ) )
assertTrue ( v . toString ( ) . isEmpty ( ) )
assertEquals ( null , actual )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertTrue ( v . toString ( ) . isEmpty ( ) )
assertEquals ( null , actual )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( "TestList1" , name )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( new GlobalCommentBuilder ( config , null , null , new Reporter ( config ) , new MarkDownUtils ( ) , analysisMode ) . buildForMarkdown ( ) ) . isEqualTo ( "SonarQube analysis reported no issues.\n" )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( user . getId ( ) , 1 )
assertEquals ( cal . getTime ( ) , d . getEnd ( ) )
assertNotNull ( date1 )
assertThat ( sut . convertToEntityAttribute ( null ) , nullValue ( ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertSame ( "Entity reset" , person , contact . getPerson ( ) )
assertEquals ( "Description" , job . getDescription ( ) )
assertEquals ( this . dataverseRole , this . roleAssignment . getRole ( ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertNull ( image . getUuid ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertFalse ( converterDelegate . convertEdges ( parentNode , elements , nodes ) . value ( ) )
assertFalse ( converterDelegate . convertEdges ( parentNode , elements , nodes ) . value ( ) )
assertFalse ( list instanceof ArrayList )
assertThat ( ints . get ( ) , is ( nullValue ( ) ) )
assertEquals ( day , new Integer ( 8 ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertThat ( wrapper . getPerson ( ) . getTarget ( ) , is ( ( OpenmrsObject ) patient ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertNull ( "Should be null" , URLMatchingUtils . getLongestUrlPattern ( null , null ) )
assertNull ( "Should be null" , URLMatchingUtils . getLongestUrlPattern ( null , null ) )
assertThat ( entityStore . getFullGraph ( randomId ( ) ) . isEmpty ( ) ) . isTrue ( )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertThat ( wrapper . getPerson ( ) . getTarget ( ) , is ( ( OpenmrsObject ) patient ) )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertNull ( result )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertEquals ( "format3Args" , "0B" , sb . toString ( ) )
assertTrue ( context . getRealPath ( name ) . endsWith ( name ) )
assertEquals ( "me" , role . getName ( ) )
assertEquals ( "Expected and actual values should be the same!" , description , namedEntityCreator . getDescription ( ) )
assertEquals ( "" , serviceDetails . getName ( ) )
assertEquals ( "Expected and actual values should be the same!" , description , namedEntityCreator . getDescription ( ) )
assertEquals ( VALUE_URI , employee1 . getImageUri ( ) )
assertEquals ( "me" , role . getName ( ) )
assertTrue ( team1 . isScrumTeam ( ) )
assertTrue ( team1 . isScrumTeam ( ) )
assertNull ( result )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertTrue ( team1 . isScrumTeam ( ) )
assertNull ( result )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertThat ( person . getGravatarURL ( ) ) . isSameAs ( "" )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertNotNull ( consumable )
assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
assertEquals ( BASE_URL , baseUrl )
assertNotNull ( consumable )
assertEquals ( defValue , "" )
assertEquals ( defValue , "" )
assertThat ( workItemType . getName ( ) , is ( "name" ) )
assertEquals ( "Error" , I18NUtil . get ( locale , "error" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertTrue ( pageSize > 5000 )
assertNotEquals ( new FiltersBuilder ( ) . withContainers ( "foo" ) , new FiltersBuilder ( ) . withContainers ( "bar" ) )
assertNotEquals ( new FiltersBuilder ( ) . withContainers ( "foo" ) , new FiltersBuilder ( ) . withContainers ( "bar" ) )
assertTrue ( pageSize > 5000 )
assertNotNull ( multiMatchQuery )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( - 1 , ( int ) timing . getBlocked ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( Set1Answers . EXERCISE_8 , set1 . detectEcb ( EX_8_CIPHERS , 16 ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( 42 , tag ( 42 ) . index ( ) )
assertEquals ( secondUuid , firstUuid )
assertEquals ( "patient/@23" , path )
assertNull ( image . getUuid ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertNull ( image . getUuid ( ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "" , result )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( releaseDate , s . getPDBHeader ( ) . getRelDate ( ) )
assertThat ( dayOfMonthOf ( date ) ) . isEqualTo ( 26 )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertEquals ( "HTML" , HtmlFormEntryUtil . translate ( "htmlformentry.HtmlForm.html" ) )
assertEquals ( "mock_policy" , PolicyIdConversions . parsePolicyId ( "test" , "mock_policy_test" ) )
assertNotNull ( request )
assertNotNull ( request )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( 8090 , result )
assertEquals ( 8090 , result )
assertNull ( request . getParameter ( "name" ) )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertThat ( user . getId ( ) ) . isEqualTo ( 1 )
assertNull ( request . getParameter ( "name" ) )
assertEquals ( "abc" , format . parseName ( "\"abc\"" ) )
assertEquals ( "abc" , format . parseName ( "\"abc\"" ) )
assertEquals ( "then1" , collector . getFirstRecord ( ) . getFirstValue ( "state" ) )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertEquals ( account , settings . getAccount ( ) )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertNull ( victim . get ( 1 ) )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertNull ( SubmissionManagerImpl . getLatestExpirationDate ( Arrays . asList ( approval ) ) )
assertNull ( SubmissionManagerImpl . getLatestExpirationDate ( new LinkedList < AccessApproval > ( ) ) )
assertNotNull ( response . firstResult ( ) , "It should return the respective gene" )
assertNull ( message )
assertNull ( toption . getValue ( ) )
assertThat ( cf . getClientProperties ( ) . entrySet ( ) ) . hasSize ( defaultClientProperties ( ) . size ( ) )
assertEquals ( register , newRegister )
assertEquals ( "ml.abracadabra.com" , cfgDao . get ( CONFIG_SMTP_SERVER ) . getValue ( ) , "SMTP server should be updated" )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertNull ( result )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertTrue ( ! groupingKey . get ( "instance" ) . equals ( "" ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertEquals ( expectedId , loadSpec . getClass ( ) . getAnnotation ( JsonTypeName . class ) . value ( ) )
assertTrue ( ! groupingKey . get ( "instance" ) . equals ( "" ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertTrue ( ! groupingKey . get ( "instance" ) . equals ( "" ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertTrue ( ! groupingKey . get ( "instance" ) . equals ( "" ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertTrue ( ! groupingKey . get ( "instance" ) . equals ( "" ) )
assertEquals ( "[3.141592653589]" , defHandler . getValue ( ) . toString ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertThrows ( IllegalArgumentException . class , ( ) -> assertNull ( recordWithHeader . get ( "fourth" ) ) )
assertEquals ( value , url . toURL ( ) )
assertEquals ( value , url . toURL ( ) )
assertEquals ( value , url . toURL ( ) )
assertEquals ( "a/b/c" , TreeUtils . normalizeNodePath ( origin ) )
assertEquals ( "/example/document/beanName" , fileName )
assertThat ( url ( ) ) . contains ( parameter )
assertEquals ( "a/b/c" , TreeUtils . normalizeNodePath ( origin ) )
assertEquals ( "/example/document/beanName" , fileName )
assertEquals ( f . toURL ( ) , toURL ( f ) )
assertThat ( saved . getText ( ) ) . isEqualTo ( "converted" )
assertNull ( exception . getMessage ( ) )
assertEquals ( "hello" , ( new Hello ( ) ) . getMessage ( ) )
assertEquals ( "hello" , ( new Hello ( ) ) . getMessage ( ) )
assertThat ( driver . switchTo ( ) . alert ( ) . getText ( ) , is ( equalTo ( "driver.switchTo().alert().getText()" ) ) )
assertNotEquals ( new FiltersBuilder ( ) . withContainers ( "foo" ) , new FiltersBuilder ( ) . withContainers ( "bar" ) )
assertThat ( editor . getValue ( ) ) . isNull ( )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( vocabulary ( ) . getId ( ) , notNullValue ( ) )
assertThat ( vocabulary ( ) . getId ( ) , notNullValue ( ) )
assertThat ( sut . getAsText ( ) ) . isEmpty ( )
assertThat ( vocabulary ( ) . getId ( ) , notNullValue ( ) )
assertThat ( sut . getAsText ( ) ) . isEmpty ( )
assertThat ( sut . getAsText ( ) ) . isEmpty ( )
assertEquals ( "F == 'S' && filter:isNotNull(FOO)" , parser . parse ( "F:S #ISNOTNULL(FOO)" ) . getOriginalQuery ( ) )
assertEquals ( "F == 'S' && filter:isNotNull(FOO)" , parser . parse ( "F:S #ISNOTNULL(FOO)" ) . getOriginalQuery ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertSame ( "Cheking value." , value , new RowField ( value , DATA_TEXT ) . getValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( editor . getValue ( ) , nullValue ( ) )
assertThat ( BigDecimalUtil . toBigDecimal ( null ) , is ( nullValue ( ) ) )
assertThat ( testee . convertToDatabaseColumn ( category ) , is ( "name" ) )
assertEquals ( "e2E Test" , new Hello ( ) . getHelloString ( ) )
assertEquals ( "e2E Test" , new Hello ( ) . getHelloString ( ) )
assertFalse ( equalsResult )
assertThat ( description . toString ( ) , containsString ( "content with \"name=james\"" ) )
assertThat ( description . toString ( ) , containsString ( "content with \"name=james\"" ) )
assertThat ( description . toString ( ) , containsString ( "header \"Accept\" with value of \"json\"" ) )
assertThat ( description . toString ( ) , containsString ( "content with \"name=james\"" ) )
assertThat ( description . toString ( ) , containsString ( "content with \"name=james\"" ) )
assertEquals ( 0 , point . getSize ( ) . getWidth ( ) , 0.01 )
assertEquals ( 0 , point . getSize ( ) . getWidth ( ) , 0.01 )
assertEquals ( high , instance . getHigh ( ) )
assertEquals ( high , instance . getHigh ( ) )
assertEquals ( 0 , point . getSize ( ) . getWidth ( ) , 0.01 )
assertEquals ( 0 , point . getSize ( ) . getWidth ( ) , 0.01 )
assertEquals ( low , instance . getLow ( ) )
assertEquals ( low , instance . getLow ( ) )
assertThat ( window ( ) . title ( ) ) . contains ( "Selenium" )
assertThat ( window ( ) . title ( ) ) . contains ( "Selenium" )
assertThat ( window ( ) . title ( ) ) . contains ( "Selenium" )
assertThat ( window ( ) . title ( ) ) . contains ( "Selenium" )
assertThat ( window ( ) . title ( ) ) . contains ( "Selenium" )
assertEquals ( "null (null): null on null at null" , e . toString ( ) )
assertEquals ( "-infinity" , inf . toString ( ) )
assertEquals ( "+infinity" , inf . toString ( ) )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( NAME , tested . name )
assertEquals ( NAME , tested . name )
assertEquals ( NAME , tested . name )
assertEquals ( NAME , tested . name )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertEquals ( "" , DatumEnTijdUtil . zetDateOmNaarDatumEnTijd ( null ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( null , DateUtils . toString ( null ) )
assertEquals ( null , DateUtils . toString ( null ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertEquals ( Locale . ENGLISH , Utils . localeFor ( "en" ) )
assertNull ( filter ( null ) )
assertEquals ( clazz , converter . convertFrom ( clazz . getCanonicalName ( ) ) )
assertNull ( "Non null result" , ConcurrentUtils . extractCause ( null ) )
assertEquals ( "" , Utils . join ( ( Collection < ? > ) null , "V9ewe2K" ) )
assertEquals ( new LowerCaseProcessor ( ) . process ( "A" ) , "a" )
assertEquals ( new LowerCaseProcessor ( ) . process ( "A" ) , "a" )
assertEquals ( new LowerCaseProcessor ( ) . process ( "A" ) , "a" )
assertEquals ( Utils . joinScope ( null ) , "" )
assertEquals ( Utils . joinScope ( null ) , "" )
assertEquals ( Utils . joinScope ( null ) , "" )
assertEquals ( Utils . joinScope ( null ) , "" )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertThat ( underTest . supports ( FailureBatch . indexingFailureBatch ( new ArrayList < > ( ) ) ) ) . isTrue ( )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertTrue ( transcriptSeq . equals ( transcriptSeq ) )
assertEquals ( Status . OK , validator . getStatus ( ) )
assertTrue ( transcriptSeq . equals ( transcriptSeq ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( "2015-01-01 00:00:00" , DateHelper . format ( simpleDateFormat . parse ( "2015-01-01 00:00:00" ) ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertTrue ( AuthorisationDecision . from ( rbac , c -> Optional . of ( RWX ) ) . isAllowed ( Constraints . single ( foo ) ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertThat ( simpleFact ( "foo" ) . toString ( ) ) . isEqualTo ( "foo" )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertNull ( Session . openActiveSessionFromCache ( getActivity ( ) ) )
assertThat ( exception . getMessage ( ) ) . isEqualTo ( "Invalid globbing pattern 'invalid[globbing*pattern'" )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertNotNull ( RuntimeUtils . which ( "ls" ) , "Unable to locate ls" )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertFalse ( allow )
assertFalse ( allow )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertNotNull ( consumable )
assertEquals ( Vector3 . of ( - 1 , 2 , - 1 ) , v )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertNotNull ( GlyphCorrector . singleton ( ) . get ( "Arial" ) )
assertNotNull ( consumable )
assertNotNull ( consumable )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( "Student" , cInfo . getName ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( "1.2.3.four" , version . getVersion ( ) )
assertEquals ( "*" , NamespaceScope . ALL . getCode ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertEquals ( CalendarUtils . startOfDay ( calendar , date ) , picker . getDate ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( field . getLabel ( ) , "name" )
assertEquals ( field . getLabel ( ) , "name" )
assertEquals ( field . getLabel ( ) , "name" )
assertEquals ( "interface" , MessageFieldUtil . getJsonFieldName ( field ) )
assertEquals ( "interface" , MessageFieldUtil . getJsonFieldName ( field ) )
assertFalse ( succeeded )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( "key must not be null" , e . getMessage ( ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertFalse ( builder . build ( ) . isDefault ( ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertNotNull ( date1 )
assertEquals ( startPosition , result )
assertEquals ( startPosition , result )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertFalse ( allow )
assertFalse ( allow )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertEquals ( "interface" , MessageFieldUtil . getJsonFieldName ( field ) )
assertThat ( e . getMessage ( ) , containsString ( "bucketTree" ) )
assertEquals ( Vector3 . of ( - 1 , 2 , - 1 ) , v )
assertEquals ( new Point ( 3 , 1 ) , result )
assertEquals ( BigDecimal . ONE , total )
assertEquals ( BigDecimal . ONE , total )
assertEquals ( BigDecimal . ONE , total )
assertEquals ( startPosition , result )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertThat ( DateUtil . clearDatePart ( cal2 ) , is ( cal ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertNotNull ( result )
assertThat ( underTest . next ( ) , is ( result ) )
assertEquals ( EXPECTED_DATE , incrementedDate )
assertEquals ( ReasonEnum . INVALID_DATE_RANGE , e . getReason ( ) )
assertEquals ( ReasonEnum . INVALID_DATE_RANGE , e . getReason ( ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertEquals ( copy , anHourFromNow )
assertEquals ( SpliceDateFunctions . LAST_DAY ( t ) , s )
assertNotNull ( instance )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertNotNull ( instance )
assertNotNull ( instance )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( validator . networkIsSet ( Guid . newGuid ( ) ) , failsWith ( EngineMessage . NETWORK_HAVING_ID_NOT_EXISTS ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertNull ( getByCode ( "undefined" ) )
assertNull ( getByCode ( "undefined" ) )
assertNull ( getByCode ( "undefined" ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( "scratch" , ImageReference . scratch ( ) . toString ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( getByCode ( "undefined" ) )
assertEquals ( 0 , VirtualFileSystem . getInstance ( ) . getAccessedFiles ( ) . size ( ) )
assertNull ( Session . openActiveSessionFromCache ( getActivity ( ) ) )
assertNull ( Session . openActiveSessionFromCache ( getActivity ( ) ) )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( map , Loop . run ( "test/loop/confidence/regex_pattern_matching_guarded_2.loop" ) )
assertNotNull ( "Should not be null" , response . getEntity ( ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertEquals ( "a\t\n\n%6" , FunctionMethods . unescape ( "a\\t\\n\\012\\456" ) )
assertThat ( addDateField ( new Date ( ) , Calendar . DATE , - 1 ) , DateMatchers . isYesterday ( ) )
assertThat ( addDateField ( new Date ( ) , Calendar . DATE , - 1 ) , DateMatchers . isYesterday ( ) )
assertThat ( addDateField ( new Date ( ) , Calendar . DATE , - 1 ) , DateMatchers . isYesterday ( ) )
assertFalse ( succeeded )
assertNull ( Session . openActiveSessionFromCache ( getActivity ( ) ) )
assertEquals ( "Description" , job . getDescription ( ) )
assertThat ( addDateField ( new Date ( ) , Calendar . DATE , - 1 ) , DateMatchers . isYesterday ( ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertNotNull ( Threads . namedThread ( "test" , null ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( Vector3 . of ( - 1 , 2 , - 1 ) , v )
assertThat ( verification . getHttpRequests ( ) , is ( Arrays . asList ( request ( "one" ) , request ( "two" ) , request ( "three" ) ) ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertThat ( underTest . next ( ) , is ( result ) )
assertEquals ( Limit . of ( 1 ) , limit )
assertEquals ( Limit . of ( 1 ) , limit )
assertThat ( userInfo . getUser ( ) , is ( user ) )
assertThat ( userInfo . getUser ( ) , is ( user ) )
assertFalse ( arrayType . canCreateSubtypes ( ) )
assertThat ( user . getEmail ( ) ) . isEqualTo ( "john@domain.com" )
assertThat ( user . getEmail ( ) ) . isEqualTo ( "john@domain.com" )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertTrue ( team1 . isScrumTeam ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "notExist" ) )
assertNotNull ( date1 )
assertEquals ( startPosition , result )
assertNotNull ( date1 )
assertEquals ( SpliceDateFunctions . LAST_DAY ( t ) , s )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertNotNull ( date1 )
assertEquals ( CalendarUtils . startOfDay ( calendar , date ) , picker . getDate ( ) )
assertThat ( new DateTime ( newTime ( 23 , 45 , 10 ) ) . plusSeconds ( 30 ) , timeIsAt ( 23 , 45 , 40 ) )
assertThat ( new DateTime ( newTime ( 23 , 45 , 10 ) ) . plusSeconds ( 30 ) , timeIsAt ( 23 , 45 , 40 ) )
assertThat ( new DateTime ( newTime ( 23 , 45 , 10 ) ) . plusSeconds ( 30 ) , timeIsAt ( 23 , 45 , 40 ) )
assertFalse ( allow )
assertThat ( seconds ( 10 ) , is ( equalTo ( seconds ( 10 ) ) ) )
assertEquals ( "patient/@23" , path )
assertFalse ( succeeded )
assertFalse ( succeeded )
assertFalse ( succeeded )
assertEquals ( Msg . code ( 1321 ) + "Patient resource IDs must be client-assigned in patient compartment mode" , e . getMessage ( ) )
assertFalse ( succeeded )
assertEquals ( Msg . code ( 1321 ) + "Patient resource IDs must be client-assigned in patient compartment mode" , e . getMessage ( ) )
assertTrue ( LZWDecoder . isOldBitReversedStream ( getClass ( ) . getResourceAsStream ( "/lzw/lzw-short.bin" ) ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "a\r\nd\r\ne\r\nf\r\ng\r\nh\r\ni\r\n" , c . getContent ( ) )
assertEquals ( "v1" , objRef . getApiVersion ( ) )
assertThat ( StringExtensions . stripLeadingSlash ( "/foobar" ) , is ( "foobar" ) )
assertEquals ( "str" , resolve ( "string1" ) . as ( String . class ) . get ( ) )
assertEquals ( "" , convertToCamelCase ( "!\"£$%|^&*():;[]{}'@#~/?\\|") )
assertEquals ( "" , convertToCamelCase ( "!\"£$%|^&*():;[]{}'@#~/?\\|") )
assertEquals ( "" , convertToCamelCase ( "!\"£$%|^&*():;[]{}'@#~/?\\|") )
assertEquals ( "" , convertToCamelCase ( "!\"£$%|^&*():;[]{}'@#~/?\\|") )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertEquals ( "" , convertToCamelCase ( "!\"£$%|^&*():;[]{}'@#~/?\\|") )
assertThat ( MDC . get ( HttpHeaders . CORRELATION_ID . getField ( ) ) , is ( nullValue ( ) ) )
assertNotNull ( Config . get ( request . getSession ( ) , Config . FMT_LOCALE ) )
assertThat ( JDBC . createConnection ( "jdbc:anotherpopulardatabaseprotocol:" , null ) ) . isNull ( )
assertThat ( JDBC . createConnection ( "jdbc:anotherpopulardatabaseprotocol:" , null ) ) . isNull ( )
assertEquals ( 17 , pageSize )
assertEquals ( 1 , result )
assertEquals ( 0 , result )
assertEquals ( "test" , result )
assertFalse ( result )
assertNotNull ( result )
assertThat ( contractInputExpressionProvider . getProposalLabel ( expression ) ) . isEqualTo ( expression . getName ( ) )
assertNotNull ( ds )
assertThat ( underTest . parse ( null ) ) . isNull ( )
assertThat ( remove ( "dc=non,dc=existing" ) ) . isFalse ( )
assertThat ( underTest . parse ( null ) ) . isNull ( )
assertThat ( underTest . parse ( null ) ) . isNull ( )
assertEquals ( "an empty uri should mean a broadcasttype of undecided" , BroadcastDomainType . UnDecided , type )
assertEquals ( "text" , HttpMessageUtils . bodyAsText ( message ) )
assertEquals ( "text" , HttpMessageUtils . bodyAsText ( message ) )
assertEquals ( "text" , HttpMessageUtils . bodyAsText ( message ) )
assertThat ( Quality . Type . valueOf ( type . name ( ) ) , equalTo ( type ) )
assertEquals ( String . class , stringPath . getParameter ( 0 ) )
assertEquals ( def , StringUtilities . parseLong ( "" , def ) )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertEquals ( "01:23:12.010" , tested . toString ( ) )
assertEquals ( FIRST + NEWLINE , this . wrapped . toString ( ) )
assertTrue ( "Received exception as the mock accountService createUserAccount returns null user" , true )
assertNull ( cmd . getDetails ( ) )
assertNull ( cmd . getDetails ( ) )
assertNull ( retrieved )
assertTrue ( "Received exception as the mock accountService createUser returns null user" , true )
assertEquals ( "foo" , message )
assertEquals ( "Failed to update ip address on vm NIC. Refer to server logs for details." , exception . getDescription ( ) )
assertEquals ( "Failed to add cluster" , exception . getDescription ( ) )
assertEquals ( "Failed to add cluster" , exception . getDescription ( ) )
assertEquals ( "Failed to add host" , exception . getDescription ( ) )
assertEquals ( "Failed to add host" , exception . getDescription ( ) )
assertNull ( exception . getDescription ( ) )
assertEquals ( "Failed to add service provider entity to physical network" , exception . getDescription ( ) )
assertEquals ( "Failed to add secondary storage" , exception . getDescription ( ) )
assertEquals ( "Failed to add vpn user" , exception . getDescription ( ) )
assertTrue ( ex . getMessage ( ) . startsWith ( "Errors found in file: Issue67.yml" ) )
assertEquals ( "value" , transformer . transform ( context ) )
assertEquals ( "Failed to add Region" , exception . getDescription ( ) )
assertEquals ( expResult , result )
assertTrue ( e . getMessage ( ) . startsWith ( "Too many" ) )
assertEquals ( "Failed to update config" , exception . getDescription ( ) )
assertEquals ( "Failed to update config" , exception . getDescription ( ) )
assertEquals ( "Failed to update config" , exception . getDescription ( ) )
assertEquals ( "Failed to update config" , exception . getDescription ( ) )
assertEquals ( "Failed to update ip address on vm NIC. Refer to server logs for details." , exception . getDescription ( ) )
assertEquals ( "value" , transformer . transform ( context ) )
assertEquals ( 0 , v . get ( ) . length )
assertEquals ( 0 , v . get ( ) . length )
fail ( e . toString ( ) )
assertNull ( e . getResponse ( ) )
assertTrue ( list . get ( 0 ) . equals ( rf ) )
assertEquals ( Response . Status . FORBIDDEN . getStatusCode ( ) , e . getResponse ( ) . getStatus ( ) )
assertEquals ( null , hostResponse . getDetails ( ) )
assertThat ( simplePushServerConfig . userAgentReaperTimeout ( ) , is ( 16000L ) )
assertThat ( simplePushServerConfig . userAgentReaperTimeout ( ) , is ( 16000L ) )
assertThat ( simplePushServerConfig . userAgentReaperTimeout ( ) , is ( 16000L ) )
assertEquals ( ValidationErrorCode . ADDRESS_CANNOT_BE_BLANK , ValidationErrorCode . findByCode ( "81801" ) )
assertEquals ( Double . valueOf ( 3 ) , result )
assertEquals ( 2.0 , r . get ( 5000 ) , 0.15 )
assertEquals ( enumDef1 , enumDef2 , "Incorrect serialization/deserialization of AtlasEnumDef" )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertNull ( url )
assertTrue ( ruleRouterFactory . getRouter ( Object . class , URL . valueOf ( "" ) ) instanceof StandardMeshRuleRouter )
assertNull ( url )
assertTrue ( ruleRouterFactory . getRouter ( Object . class , URL . valueOf ( "" ) ) instanceof StandardMeshRuleRouter )
assertThat ( properties . getUrl ( ) ) . isNull ( )
assertThat ( properties . getUrl ( ) ) . isNull ( )
assertNotNull ( ds )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( 1 , watcher . getLocks ( ) . size ( ) )
assertEquals ( mockWrapper , testWrapper )
assertEquals ( "template.hbs" , templateSource . content ( StandardCharsets . UTF_8 ) )
assertEquals ( "template.hbs" , templateSource . content ( StandardCharsets . UTF_8 ) )
assertEquals ( "template.hbs" , templateSource . content ( StandardCharsets . UTF_8 ) )
assertEquals ( "template.hbs" , templateSource . content ( StandardCharsets . UTF_8 ) )
assertEquals ( true , ctx . autoBookmark ( ) )
assertNotNull ( controlLoopState )
assertNull ( result )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertTrue ( configuration != null )
assertEquals ( Joinable . CARDINALITY_UNKNOWN , cardinality )
assertNull ( result )
assertNotNull ( identityEventMessageContext . getEvent ( ) )
assertNull ( result )
assertNull ( result )
assertEquals ( "example.org" , instance . getHost ( ) )
assertThat ( shadowMediaPlayer . getState ( ) ) . isEqualTo ( IDLE )
assertEquals ( "builtin" , sut . getId ( ) )
assertTrue ( type instanceof BooleanType )
assertThat ( s . getStatus ( ) , is ( equalTo ( PASSED ) ) )
assertThat ( simplePushServerConfig . host ( ) , equalTo ( "localhost" ) )
assertThat ( simplePushServerConfig . host ( ) , equalTo ( "localhost" ) )
assertTrue ( pageSize > 5000 )
assertEquals ( 5.5 , mwv . getSpeed ( ) , 0.1 )
assertThat ( this . properties . getPort ( ) ) . isNull ( )
assertThat ( simplePushServerConfig . host ( ) , equalTo ( "localhost" ) )
assertTrue ( sleepMS > 500 )
assertThat ( simplePushServerConfig . host ( ) , equalTo ( "localhost" ) )
assertThat ( suggestionEngine . suggest ( new DataSet ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( capacity ( ) . apply ( item ) , 2.0f )
assertThat ( simplePushServerConfig . host ( ) , equalTo ( "localhost" ) )
assertEquals ( clusterId , monitor . getClusterId ( ) )
assertNull ( r )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( expected , dao . get ( expected . getId ( ) ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertEquals ( Permission . Type . MENU , entity . getType ( ) )
assertTrue ( actual )
assertFalse ( actual )
assertFalse ( actual )
assertEquals ( temporalReferenceSystem2 . getScope ( ) , result )
assertEquals ( temporalReferenceSystem2 . getScope ( ) , result )
assertEquals ( temporalReferenceSystem2 . getScope ( ) , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertArrayEquals ( new Object [ ] { } , params )
assertFalse ( result )
assertTrue ( result )
assertTrue ( result )
assertEquals ( mockClient , result )
assertTrue ( result )
assertThat ( shadowMediaPlayer . getState ( ) ) . isEqualTo ( PREPARED )
assertThat ( shadowMediaPlayer . getState ( ) ) . isEqualTo ( PREPARED )
assertNull ( modelPermissions )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertTrue ( result >= startTime )
assertTrue ( result >= startTime )
assertTrue ( result >= startTime )
assertEquals ( false , result )
assertEquals ( false , result )
assertNull ( DMNImportTypes . determineImportType ( "cheese" ) )
assertNull ( DMNImportTypes . determineImportType ( "cheese" ) )
assertNull ( DMNImportTypes . determineImportType ( "cheese" ) )
assertNull ( DMNImportTypes . determineImportType ( "cheese" ) )
assertNull ( DMNImportTypes . determineImportType ( "cheese" ) )
assertTrue ( PredicateUtilities . all ( ele , x -> ( Integer . parseInt ( x . toString ( ) ) % 2 ) == 0 ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( ValidationResult . Result . ERROR , sink . validate ( null ) . getStatus ( ) )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertTrue ( isDuplicate ( singletonList ( mockObject ( "qwerty" ) ) , mockObject ( "qwerty" ) ) )
assertEquals ( "" , result )
assertEquals ( roleKey . longValue ( ) , user . getRoleKey ( ) )
assertEquals ( name , part . getName ( ) )
assertNotNull ( commands )
assertThat ( operation . isExecutable ( gridWidget ) ) . isTrue ( )
assertEquals ( "1.2.3" , formatter . format ( "%t" ) )
assertThat ( result . toString ( ) , is ( equalTo ( "?" ) ) )
assertEquals ( folder . getPath ( ) , "path2" )
assertEquals ( expected , result )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertEquals ( closestMatch ( versions , version ( 1 , 2 , 3 ) ) , version ( 1 , 2 , 3 ) )
assertEquals ( new Integer ( 2 ) , class1 . testAnyIteratorExp01 ( ) )
assertEquals ( 1 , result . get ( ) )
assertFalse ( result )
assertFalse ( result )
assertTrue ( res == true )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "Panic!" , e . getMessage ( ) )
assertEquals ( result , vol )
assertEquals ( test , context . getResult ( ) )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertThat ( Strings . unquoteIdentifierPart ( "table" ) ) . isEqualTo ( "table" )
assertTrue ( accountManager . disableAccount ( 42 ) )
assertNull ( result )
assertEquals ( model . getData ( ) , data )
assertThat ( actual . hashCode ( ) , is ( not ( expected . hashCode ( ) ) ) )
assertNull ( parsed )
assertNull ( parsed )
assertNull ( parsed )
assertEquals ( "showServiceList" , result )
assertEquals ( "showServiceList" , result )
assertTrue ( succeeded )
assertFalse ( succeeded )
assertEquals ( localTypes . size ( ) , 0 )
assertEquals ( "[]" , toString )
assertThat ( result . toString ( ) ) . isEqualTo ( String . format ( ComponentNotFoundResult . MESSAGE , COMPONENT_NAME , TYPE , MODULE_NAME ) )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "ALTER TABLE table ADD CONSTRAINT name UNIQUE (column1, column2)" , result )
assertEquals ( "" , result )
assertEquals ( "ALTER TABLE table ADD CONSTRAINT name UNIQUE (column1, column2)" , result )
assertEquals ( "" , result )
assertThat ( grouper . getName ( ) , equalTo ( "tag" ) )
assertEquals ( "[1, 2, 4]" , result . toString ( ) )
assertThat ( grouper . getName ( ) , equalTo ( "tag" ) )
assertNull ( amqpMessageFacade . getMessageAnnotations ( ) )
assertNull ( amqpMessageFacade . getMessageAnnotations ( ) )
assertNull ( john )
assertNull ( john )
assertNull ( john )
assertFalse ( calendarDate2 . toString ( ) . equals ( result ) )
assertEquals ( "[]" , toString )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertTrue ( team1 . isScrumTeam ( ) )
assertNotNull ( set . getApplicationContext ( "base" ) )
assertTrue ( e . getMessage ( ) . contains ( "Missing name property" ) )
assertTrue ( e . getMessage ( ) . contains ( "Missing name property" ) )
assertTrue ( e . getMessage ( ) . contains ( "is expected to exist at" ) )
assertTrue ( e . getMessage ( ) . contains ( "do not appear to be the same resource" ) )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertTrue ( offending . matches ( createTestRule ( value , "another test" ) ) )
assertTrue ( httpResult . getStatus ( ) == HttpSearchExecutionStatus . REQUEST_TIMEOUT )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertThat ( DateUtils . localDateToDate ( localDate ) , not ( equalTo ( nullValue ( ) ) ) )
assertEquals ( localTime , CONVERTER . convert ( datetime ) )
assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( result , expected )
assertFalse ( result )
assertNull ( userId )
assertNotNull ( "BrpPersoonslijst mag niet null zijn" , brpPersoonslijst )
assertEquals ( windowHandle , NATIVE_APP )
assertEquals ( windowHandle , NATIVE_APP )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( "1.2.3" , new DeweyDecimal ( args ) . toString ( ) )
assertEquals ( expected , lcr . diskUuidToSerial ( uuid ) )
assertNull ( result )
assertNull ( transformed )
assertNotNull ( result )
assertEquals ( "getScope returns incorrect value." , ApplicationScoped . class . getName ( ) , mppb . getScope ( ) . getName ( ) )
assertArrayEquals ( destArray , retArray )
assertEquals ( new Fetch ( ) . field ( field ) , new Fetch ( ) . field ( field ) )
assertEquals ( new Fetch ( ) . field ( field ) , new Fetch ( ) . field ( field ) )
assertEquals ( new Fetch ( ) . field ( field ) , new Fetch ( ) . field ( field ) )
assertEquals ( cookie , cookies [ 0 ] )
assertEquals ( cookie , cookies [ 0 ] )
assertEquals ( "1:28:47.328" , duration )
assertEquals ( "1:28:47.328" , duration )
assertEquals ( "1:28:47.328" , duration )
assertFalse ( result )
assertFalse ( result )
assertEquals ( "Event [ source=" + this + " eventType=" + Event . ANY + " ]" , s )
assertNull ( test . toString ( ) )
assertEquals ( "Event [ source=" + this + " eventType=" + Event . ANY + " ]" , s )
assertNull ( test . toString ( ) )
assertTrue ( idx . toString ( ) . contains ( "2" ) )
assertEquals ( trigger . toString ( ) , "repeatCount=0, repeatInterval=0, startTime=null, endTime=null" )
assertEquals ( trigger . toString ( ) , "repeatCount=0, repeatInterval=0, startTime=null, endTime=null" )
assertTrue ( idx . toString ( ) . contains ( "2" ) )
assertThat ( builder . toString ( ) ) . isEqualTo ( "http://localhost/admin?limit=1" )
assertEquals ( expected , res )
assertEquals ( expected , res )
assertEquals ( expected , actual )
assertThat ( Static . staticMethod ( ) ) . isEqualTo ( "hello mock" )
assertThat ( Static . staticMethod ( ) ) . isEqualTo ( "hello mock" )
assertNull ( output )
assertThat ( Static . staticMethod ( ) ) . isEqualTo ( "hello mock" )
assertEquals ( "" , ( String ) obj )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( file . getFileName ( ) , filename )
assertEquals ( pageId , "foo" )
assertNotNull ( statement )
assertEquals ( Result . OK , r . getStatus ( ) )
assertTrue ( verifyUtil . isPassed ( ) , verifyUtil . getFailureMessage ( ) )
assertTrue ( metrics instanceof MicrometerMetrics )
assertThat ( joinIntArrayWithStringBuilder ( intArray , separator ) ) . isEqualTo ( expectedIntString )
assertThat ( "constraint violations" , validationOf ( anItem ( ) . with ( AN_INVALID_NUMBER ) ) , violates ( on ( "number.number" ) , withError ( SHOULD_NOT_BE_NULL ) ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( headersAsOutputString , result )
assertEquals ( headersAsOutputString , result )
assertEquals ( headersAsOutputString , result )
assertEquals ( BASE_URL , baseUrl )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( expectedGridWidgets , actualGridWidgets )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
assertEquals ( "CLUSTER" , MetricsUtil . getContextName ( Master . Cluster . class ) )
assertNotNull ( PacketPlayOutEntityTeleportHandle . createNew ( ) )
assertTrue ( answer . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( BODY_RESPONSE , result )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( false , result )
assertNotNull ( body )
assertThat ( count . getCount ( ) ) . isEqualTo ( 3 )
assertEquals ( availabilityZone , result )
assertEquals ( BODY_RESPONSE , result )
assertEquals ( availabilityZone , result )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( "Wrong list item output" , "<li>Text</li>" , printer . item ( DUMMY_TEXT ) )
assertEquals ( 1 , spanEvent . getDepth ( ) )
assertThat ( pingResult ) . isNotNull ( )
assertThat ( pingResult ) . isNotNull ( )
assertThat ( pingResult ) . isNotNull ( )
assertTrue ( ping == null )
assertTrue ( ping == null )
assertTrue ( clsa . getResult ( ) )
assertTrue ( clsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertEquals ( "TestCreate 0" , tracker , openURLTrackerLoggerService . create ( context ) )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( result )
assertFalse ( dlsa . getResult ( ) )
assertEquals ( "TestCreate 0" , tracker , openURLTrackerLoggerService . create ( context ) )
assertTrue ( accountManager . disableAccount ( 42 ) )
assertTrue ( ping == null )
assertTrue ( ping == null )
assertFalse ( answer . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertNull ( result )
assertFalse ( actual )
assertTrue ( isSuccessful )
assertTrue ( isSuccessful )
assertThat ( target . getConvNetworkId ( nwId ) , is ( nullValue ( ) ) )
assertThat ( target . getConvNetworkId ( nwId ) , is ( nullValue ( ) ) )
assertThat ( answer . getResult ( ) , equalTo ( false ) )
assertNull ( "Consultant was not deleted" , consultant )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( Unsafe . instance , Unsafe . getDeclaredStaticField ( sun . misc . Unsafe . class , "theUnsafe" ) )
assertEquals ( Unsafe . instance , Unsafe . getDeclaredStaticField ( sun . misc . Unsafe . class , "theUnsafe" ) )
assertEquals ( Unsafe . instance , Unsafe . getDeclaredStaticField ( sun . misc . Unsafe . class , "theUnsafe" ) )
assertEquals ( Unsafe . instance , Unsafe . getDeclaredStaticField ( sun . misc . Unsafe . class , "theUnsafe" ) )
assertTrue ( path . isEmpty ( ) )
assertTrue ( result )
assertEquals ( expected_preserveTrailing , result )
assertEquals ( expected_preserveTrailing , result )
assertEquals ( expected_preserveTrailing , result )
assertThat ( truncated . get ( 0 ) ) . isEqualTo ( "/\u2026" )
assertThat ( truncated . get ( 0 ) ) . isEqualTo ( "/\u2026" )
assertNull ( "Consultant was not deleted" , consultant )
assertTrue ( "GraphSPARQLExample failed" , succeeded )
assertThat ( new MethodInvoker ( "staticMethod" , methodOf ( WithMethod . class , "staticMethod" , int . class ) ) . getResultType ( ) , equalTo ( String . class ) )
assertThat ( new MethodInvoker ( "staticMethod" , methodOf ( WithMethod . class , "staticMethod" , int . class ) ) . getResultType ( ) , equalTo ( String . class ) )
assertThat ( new MethodInvoker ( "staticMethod" , methodOf ( WithMethod . class , "staticMethod" , int . class ) ) . getResultType ( ) , equalTo ( String . class ) )
assertThat ( executionCounter . getValue ( ) , equalTo ( 2 ) )
assertTrue ( "Not recognizable cluster status" , correctStatus )
assertTrue ( ping == null )
assertTrue ( ping == null )
assertTrue ( clsa . getResult ( ) )
assertFalse ( clsa . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( dlsa . getResult ( ) )
assertFalse ( clspa . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertTrue ( flspa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertFalse ( clra . getResult ( ) )
assertFalse ( clra . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertThat ( answer . getResult ( ) , equalTo ( false ) )
assertThat ( answer . getResult ( ) , equalTo ( false ) )
assertThat ( answer . getResult ( ) , equalTo ( true ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertNull ( bean )
assertTrue ( clazz . getName ( ) . equals ( ( ( ClassAsset ) asset ) . getSource ( ) . getName ( ) ) )
assertTrue ( clazz . getName ( ) . equals ( ( ( ClassAsset ) asset ) . getSource ( ) . getName ( ) ) )
assertTrue ( clazz . getName ( ) . equals ( ( ( ClassAsset ) asset ) . getSource ( ) . getName ( ) ) )
assertTrue ( clazz . getName ( ) . equals ( ( ( ClassAsset ) asset ) . getSource ( ) . getName ( ) ) )
assertEquals ( JWBF . DEVEL_VERSION , version )
assertEquals ( "foo" , entity )
assertNull ( inStream . nextEntry ( ) )
assertEquals ( ( Integer ) 45000 , this . configCaptor . getValue ( ) . getTimeoutMs ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertTrue ( result )
assertNull ( instanceManager . getCopyIdForInstance ( "the_id" ) )
assertEquals ( "value1" , css2 . get ( "key1" ) )
assertThat ( Lists . newArrayList ( ( Term [ ] ) Deencapsulation . invoke ( vocabulary . getClass ( ) , "values" ) ) , contains ( ( Term [ ] ) vocabulary . terms ( ) ) )
assertEquals ( 123 , ( ( Foo ) instance . c ) . getValue ( ) )
assertEquals ( "value1" , css2 . get ( "key1" ) )
assertFalse ( returnedValue )
assertThat ( ql . getQuery ( N_FOO ) ) . isEqualTo ( Q_COMPLEX )
assertEquals ( expResult , result )
assertEquals ( "fileName-" + TIMESTAMP + ".js" , result )
assertNotNull ( result )
assertEquals ( expResult , result )
assertEquals ( "CLUSTER" , MetricsUtil . getContextName ( Master . Cluster . class ) )
assertEquals ( "CLUSTER" , MetricsUtil . getContextName ( Master . Cluster . class ) )
assertEquals ( "hello world" , r . getValue ( ) )
assertEquals ( "hello world" , r . getValue ( ) )
assertEquals ( "hello world" , r . getValue ( ) )
assertEquals ( someObject . someField , "test" )
assertEquals ( someObject . someField , "test" )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertEquals ( name , part . getName ( ) )
assertThat ( orcid . getValue ( ) , is ( this . value ) )
assertEquals ( "VwServiceName" , classModel . getSimpleName ( ) )
assertNotNull ( new Log4jLogEvent ( ) . toString ( ) )
assertTrue ( randomNumber ( 10L , context ) . length ( ) > 9 )
assertEquals ( rsmd_ResultSet . getColumnName ( i ) , jdbcRsmd_ResultSet . getColumnName ( i ) )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
MatcherAssert . assertThat ( target . getName ( ) , Matchers . is ( NAME ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertFalse ( this . testClass . logicallyClosed . get ( ) )
assertFalse ( this . testClass . logicallyClosed . get ( ) )
assertFalse ( this . testClass . logicallyClosed . get ( ) )
assertEquals ( expected [ i ] , s . getStringValue ( i ) )
assertEquals ( expected [ i ] , s . getStringValue ( i ) )
assertTrue ( adb == null )
assertTrue ( adb == null )
assertTrue ( adb == null )
assertTrue ( adb == null )
assertNull ( PropertyUtil . stripPrefix ( ( String ) null , "prefixed." ) )
assertNull ( MessageHandler . stripJSONWrapping ( payload ) )
assertNull ( PropertyUtil . stripPrefix ( ( String ) null , "prefixed." ) )
assertNull ( MessageHandler . stripJSONWrapping ( payload ) )
assertNull ( MessageHandler . stripJSONWrapping ( payload ) )
assertNull ( PropertyUtil . stripPrefix ( ( String ) null , "prefixed." ) )
assertNull ( uri )
assertNull ( uri )
assertTrue ( sameSubnet . first ( ) )
assertTrue ( ! sameSubnet . first ( ) )
junit . framework . Assert . assertTrue ( e . getMessage ( ) . contains ( "superset" ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNull ( victim . getValue ( KEY ) )
assertNull ( victim . getValue ( KEY ) )
assertThat ( dest . get ( "aaa" ) , is ( nullValue ( ) ) )
assertThat ( dest . get ( "aaa" ) , is ( nullValue ( ) ) )
assertThat ( dest . get ( "aaa" ) , is ( nullValue ( ) ) )
assertThat ( result ) . isEqualTo ( map . toString ( ) )
assertTrue ( getValidator ( ) . forExecutables ( ) . validateParameters ( target , m , new Object [ ] { } ) . isEmpty ( ) )
assertTrue ( highAvailabilityManager . investigate ( 1l ) == HostStatus . Down )
assertNull ( highAvailabilityManager . investigate ( 1l ) )
assertFalse ( fencer . fenceOff ( virtualMachine , host ) )
assertFalse ( fencer . fenceOff ( virtualMachine , host ) )
assertNull ( fencer . fenceOff ( virtualMachine , host ) )
assertEquals ( ids , _service . getAllUserIds ( ) )
assertEquals ( 1 , result )
assertEquals ( 1 , result )
assertEquals ( group , model . getSelectedGroup ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "Main" , pathConnector . getDisplayName ( ) )
assertEquals ( name , part . getName ( ) )
assertEquals ( name , facet . getDisplayName ( ) )
assertThat ( this . leaderController . getInfo ( ) ) . isEqualTo ( message )
assertEquals ( "text" , HttpMessageUtils . bodyAsText ( message ) )
assertEquals ( "text" , HttpMessageUtils . bodyAsText ( message ) )
assertThat ( evaluate ( ATTRIBUTES , event ) , sameInstance ( attributes ) )
assertEquals ( "file1" , pathsHelper . getRelativeURI ( null , includedModelPath ) )
assertNotNull ( new PentahoMapReduceJobBuilderImpl . TransFactory ( ) . create ( transMeta ) )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertNotNull ( new PentahoMapReduceJobBuilderImpl . TransFactory ( ) . create ( transMeta ) )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertEquals ( "524-530" , argumentCaptor . getValue ( ) )
assertEquals ( "not.used" , uses )
assertThat ( handler . get_role_names ( ) , is ( roleNames ) )
assertTrue ( actual )
assertThat ( loader . reload ( Int . valueOf ( 1 ) , Int . valueOf ( 1 ) ) ) . isEqualTo ( 1 )
assertTrue ( actual )
assertTrue ( result )
assertFalse ( returnValueToCheck )
assertEquals ( DeviceState . ONLINE , androidImpl . getState ( device ) )
assertEquals ( DeviceState . ONLINE , androidImpl . getState ( device ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( container , result )
assertEquals ( container , result )
assertEquals ( container , result )
assertEquals ( container , result )
assertTrue ( result )
assertEquals ( "toor" , _svc . _volsDao . findById ( 2L ) . getName ( ) )
assertTrue ( handle . markForTermination ( Status . Transaction . Terminated ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( 24000L , ( long ) timeEffortDAO . findEffortsSumForTiTATasks ( 1L , 1L , 3L ) )
elementAssert . isNotEnabled ( )
assertThat ( StringUtil . join ( new String [ ] { "ab" , "c" } ) , is ( "abc" ) )
assertNull ( "result" , result )
assertNull ( highAvailabilityManager . investigate ( 1l ) )
assertNull ( "result" , result )
assertThat ( repository . getOne ( aliceSmith . getId ( ) ) ) . isSameAs ( aliceSmith )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertEquals ( BijhoudingResultaat . DEELS_UITGESTELD , BijhoudingResultaat . parseNaam ( "(Deels) uitgesteld" ) )
assertThat ( service . getRepo ( ANY_REPONAME , STATIC ) , is ( entry ) )
assertThat ( service . getRepo ( ANY_REPONAME , STATIC ) , is ( entry ) )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertEquals ( "available zone : " + azName + " already exists" , e . getMessage ( ) )
assertThat ( verification . getHttpRequests ( ) , is ( Arrays . asList ( request ( "one" ) , request ( "two" ) , request ( "three" ) ) ) )
assertFalse ( change )
assertNull ( result )
assertEquals ( model . getData ( ) , data )
MatcherAssert . assertThat ( result . getStatus ( ) , Matchers . is ( 400 ) )
assertNull ( result )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertEquals ( "http://foo.com/svn" , SvnTagBranchUtils . appendPath ( "http://foo.com/svn" , null ) )
assertTrue ( "Use user access token should be true" , result )
assertTrue ( perms . getCreationDate ( ) < TimeUnit . MILLISECONDS . toSeconds ( System . currentTimeMillis ( ) ) )
assertEquals ( BASE_URL , baseUrl )
assertEquals ( 5000L , result )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "spanname" , new Span ( ) . setName ( "SpanName" ) . getName ( ) )
assertEquals ( "spanname" , new Span ( ) . setName ( "SpanName" ) . getName ( ) )
assertEquals ( "%2e%2d%2a%5f" , encodeIncludingSpecialCharacters ( ".-*_" ) )
assertNotNull ( _svc . getVolumeNameFromCommand ( createVol ) )
assertNotNull ( _svc . getVolumeNameFromCommand ( createVol ) )
assertNotNull ( _svc . getVolumeNameFromCommand ( createVol ) )
assertSame ( _svc . getVolumeNameFromCommand ( createVol ) , "abc" )
assertThat ( managedClassNames ) . contains ( PlanningTaskImpl . class . getName ( ) )
assertThat ( managedClassNames ) . contains ( PlanningTaskImpl . class . getName ( ) )
assertEquals ( "B" , result )
assertNull ( result )
assertNull ( result )
assertEquals ( "B" , result )
assertNull ( result )
assertNull ( result )
assertEquals ( "B" , result )
assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
assertNull ( snapshot )
assertNotNull ( snapshot )
assertNull ( snapshot )
assertFalse ( result )
assertFalse ( result )
assertNull ( "the value is not null as expected" , PrimaryIndexBucketLocatorImpl . convertDateToBucketingLong ( null ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertTrue ( accountManager . disableAccount ( 42 ) )
assertTrue ( accountManager . disableAccount ( 42 ) )
assertTrue ( accountManager . disableAccount ( 42 ) )
assertThat ( repository . getOne ( aliceSmith . getId ( ) ) ) . isSameAs ( aliceSmith )
assertNotNull ( result )
assertEquals ( secondUuid , firstUuid )
assertEquals ( User . Type . USER , user . getType ( ) , "Type should match" )
assertEquals ( secondUuid , firstUuid )
assertTrue ( "Operation should be successfull!" , result )
assertEquals ( "2" , result )
assertEquals ( "The GemFireException cannot be null!" , expected . getMessage ( ) )
assertEquals ( "The GemFireException cannot be null!" , expected . getMessage ( ) )
assertEquals ( "The GemFireException cannot be null!" , expected . getMessage ( ) )
assertEquals ( "The GemFireException cannot be null!" , expected . getMessage ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNull ( m )
assertNull ( retVxGroup )
assertThat ( mockSlice . getNumber ( ) ) . isEqualTo ( 1 )
assertEquals ( 1 , customer . getId ( ) )
assertEquals ( 1 , customer . getId ( ) )
assertEquals ( FILE_CONTENTS , fileUploadPopupPresenter . getFileContents ( ) )
assertNotNull ( "Affinity group 'group1' of type 'mock' failed to create " , group )
assertNotNull ( "Affinity group 'group1' of type 'mock' failed to create " , group )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertFalse ( "Zero length files should not be cached" , putResult )
assertEquals ( "localhost" , getAccessibleField ( "hostname" ) . get ( source ) )
assertEquals ( Optional . ofNullable ( proxy1 . getId ( ) ) , Optional . ofNullable ( proxyUriIdMap . get ( proxy1 . getUri ( ) ) ) )
assertEquals ( "localhost" , getAccessibleField ( "hostname" ) . get ( source ) )
assertEquals ( service . getName ( ) , MetadataMappingService . SERVICE_NAME )
assertEquals ( service . getName ( ) , MetadataMappingService . SERVICE_NAME )
assertEquals ( service . getName ( ) , MetadataMappingService . SERVICE_NAME )
assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
assertNull ( victim . getValue ( KEY ) )
assertNull ( refreshToken )
assertEquals ( 0 , victim . getData ( "chuck" ) . size ( ) )
assertEquals ( "New account owner not properly set" , newAccountOwner , deployment . owner )
assertEquals ( "New account owner not properly set" , newAccountOwner , deployment . owner )
assertEquals ( "New account shouldn't have been updated" , mockOwner , deployment . owner )
assertNull ( deployment . tableLockId )
assertEquals ( "SourceNatIp returned by the VpcManager was not correctly set" , null , deployment . sourceNatIp )
assertNotNull ( "Isolated network offering with specifyIpRanges=false failed to create " , off )
assertNotNull ( "Isolated network offering with specifyVlan=true wasn't created" , off )
assertEquals ( "Failed to update ip address on vm NIC. Refer to server logs for details." , exception . getDescription ( ) )
assertEquals ( "Region with name: APAC already exists" , e . getMessage ( ) )
assertTrue ( regionManager . getId ( ) != 0 )
assertTrue ( child1NoChildren . hasParent ( ) )
assertTrue ( child1NoChildren . hasParent ( ) )
assertTrue ( XmiReader . getIdRef ( mockReader ) . toString ( ) . equals ( id ) )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
assertEquals ( expResult , captureOutput . getValue ( ) )
assertEquals ( "2011-05-12T17:45:27Z" , DateUtils . toString ( input ) )
assertEquals ( "2011-05-12T17:45:27Z" , DateUtils . toString ( input ) )
assertEquals ( BigInteger . TEN , EwsUtilities . parse ( BigInteger . class , BigInteger . TEN . toString ( ) ) )
assertEquals ( BigInteger . TEN , EwsUtilities . parse ( BigInteger . class , BigInteger . TEN . toString ( ) ) )
assertEquals ( "2017-09-20" , dateStr )
assertEquals ( "1970-01-01" , temporals . format ( time , "yyyy-MM-dd" , Locale . US ) )
assertEquals ( "2017-09-20" , dateStr )
assertEquals ( "parameter 1 is not optional but null was provided" , e . getMessage ( ) )
assertThat ( Strings . reverse ( "live" ) ) . isEqualTo ( "evil" )
assertThat ( Strings . reverse ( "live" ) ) . isEqualTo ( "evil" )
assertEquals ( "bar" , new Substitutor ( singletonMap ( "foo" , "bar" ) ) . replace ( "${foo}" ) )
assertEquals ( "b" , properties . get ( "a" ) )
assertEquals ( "b" , properties . get ( "a" ) )
assertEquals ( "/bin/echo foo " , script . toString ( ) )
assertNotNull ( value )
assertNull ( output )
assertEquals ( "104152c5bfdca07bc633eebd46199f0255c9f49d" , swiftAccess . calculateRFC2104HMAC ( "data" , "key" ) )
assertEquals ( "" , output . toString ( ) )
assertThat ( new AssistProposalAdapter ( null , proposal1 ) . getDescription ( ) ) . isEqualTo ( "desc" )
assertEquals ( "simpleName" , buildFullName ( null , "simpleName" ) )
assertThat ( request . getDuration ( ) , equalTo ( zeroValue ) )
assertThat ( myEqler . queryThree ( ) , is ( 3 ) )
assertTrue ( backoff . wakeup ( thread . getName ( ) ) )
assertNull ( Version . lookup ( s ) )
assertEquals ( "Maximal address not created" , "255.255.255.255" , max . addr ( ) )
assertEquals ( "Minimal address not created" , "0.0.0.0" , min . addr ( ) )
assertEquals ( new BigInteger ( "2" ) , NetUtils . countIp6InRange ( "1234:5678::1-1234:5678::2" ) )
assertEquals ( null , NetUtils . countIp6InRange ( "1234:5678::2-1234:5678::0" ) )
assertEquals ( null , NetUtils . countIp6InRange ( "-1234:5678::0" ) )
assertEquals ( new BigInteger ( "1" ) , NetUtils . countIp6InRange ( "1234:5678::2" ) )
assertEquals ( "pvlan://123-i456" , NetUtils . generateUriForPvlan ( "123" , "456" ) . toString ( ) )
assertEquals ( "pvlan://123-i456" , NetUtils . generateUriForPvlan ( "123" , "456" ) . toString ( ) )
assertEquals ( "pvlan://123-i456" , NetUtils . generateUriForPvlan ( "123" , "456" ) . toString ( ) )
assertEquals ( Architecture . X86_64 , Architecture . get ( ) )
assertEquals ( "JSONObject 'key' should return <null> as it's not an object" , JSONHelper . getJSONObject ( obj , "key" ) , null )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertThat ( "Alias incorrectly decoded" , deviceState . getSysinfo ( ) . getAlias ( ) , is ( "MyßmärtPlug"))
assertTrue ( e . getMessage ( ) . contains ( "Missing name property" ) )
assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
assertEquals ( "" , result )
assertEquals ( expected , result )
GAssert . assertEquals ( expected , actual )
assertThat ( metaTableSchema . tableMetadata ( ) ) . isSameAs ( mockTableMetadata )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertThat ( xpath ( "some_body" , ImmutableMap . of ( "foo" , "http://foo" ) ) , is ( new XPathBody ( "some_body" , ImmutableMap . of ( "foo" , "http://foo" ) ) ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertThat ( xpath ( "some_body" , ImmutableMap . of ( "foo" , "http://foo" ) ) , is ( new XPathBody ( "some_body" , ImmutableMap . of ( "foo" , "http://foo" ) ) ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( 0 , res . size ( ) )
assertEquals ( "{}" , MapUtils . toString ( map ) )
assertTrue ( "Claims set should have been empty but was: " + claims . toJsonString ( ) , claims . isEmpty ( ) )
assertEquals ( "dubbo.version=2.0.0&group=test&version=1.0.0" , newSubscribe . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertEquals ( "dubbo.version=2.0.0&group=test&version=1.0.0" , newSubscribe . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertEquals ( "dubbo.version=2.0.0&group=test&version=1.0.0" , newSubscribe . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertEquals ( "dubbo.version=2.0.0&group=test&version=1.0.0" , newSubscribe . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertEquals ( expResult , captureOutput . getValue ( ) )
assertEquals ( expResult , captureOutput . getValue ( ) )
assertEquals ( "Default name" , name )
assertNull ( term . validateTurnoverRentRule ( "7.00" ) )
assertNull ( term . validateTurnoverRentRule ( "7.00" ) )
assertNull ( term . validateTurnoverRentRule ( "7.00" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( expected , result )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( expected , result )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( expected , result )
assertNull ( retrievedToken )
assertEquals ( baseStr + "[value=5]" , ToStringBuilder . reflectionToString ( base ) )
assertNull ( result )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( md5 , "36970fd5940ee207b2f5a575a108948f" )
assertEquals ( md5 , "36970fd5940ee207b2f5a575a108948f" )
assertEquals ( md5 , "36970fd5940ee207b2f5a575a108948f" )
assertEquals ( md5 , "36970fd5940ee207b2f5a575a108948f" )
assertEquals ( md5 , "36970fd5940ee207b2f5a575a108948f" )
assertEquals ( "" , ctx . getParentXPath ( ) )
assertEquals ( "" , ctx . getParentXPath ( ) )
assertThat ( CollectionId . parse ( "rs0" , ".a.b" ) ) . isNull ( )
assertEquals ( "/" , result )
assertEquals ( timezone , "Asia/Seoul" )
assertEquals ( timezone , "Asia/Seoul" )
assertThat ( systemDataSourceNameProvider . getDataSourceName ( ) , is ( "java:/app/framework/DS.system" ) )
assertThat ( systemDataSourceNameProvider . getDataSourceName ( ) , is ( "java:/app/framework/DS.system" ) )
assertEquals ( "/" , result )
assertThat ( byPaddingZeros ( value , 3 ) ) . isEqualTo ( "001" )
assertThat ( byPaddingZeros ( value , 3 ) ) . isEqualTo ( "001" )
assertNotNull ( JBBPCompiler . compile ( "byte [(1+2-3)*4/(5<<6>>7)>>>3%1&89|22^34-~45] a;" ) )
assertEquals ( "monitor-addr" , builder . build ( ) . getMonitor ( ) . getAddress ( ) )
assertEquals ( "" , uniqueFields . toString ( ) )
assertNotNull ( builder )
assertThat ( count . getInput ( ) ) . isNotNull ( )
assertEquals ( p , p )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( 11 , summed )
PAssert . that ( result ) . containsInAnyOrder ( KV . of ( sub1 , sub2 ) )
assertEquals ( output , ImmutableList . of ( ) )
assertThat ( parse , equalTo ( ( Map < String , String > ) of ( "key" , "value" ) ) )
assertEquals ( 1 , dao . list ( 0 , 0 , false , "id" , PaginationFilter . query ( "LDI3" ) ) . size ( ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertNull ( CTRetornoStatus . valueOfCodigo ( 900 ) )
assertEquals ( 0 , size )
assertEquals ( name , part . getName ( ) )
assertThat ( result , is ( empty ( ) ) )
assertThat ( "<foo/>" , not ( hasXPath ( "//bar" , equalTo ( "a" ) ) . withXPathFactory ( xFac ) ) )
assertFalse ( list instanceof ArrayList )
assertEquals ( "abc" , deser . getPropertyWithGenericBound ( ) . property )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertEquals ( funResultToken , TypeToken . of ( String . class ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertThat ( json , RegexMatcher . matches ( ISO_8601_DATE_FORMAT_REGEX ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertThat ( json , RegexMatcher . matches ( ISO_8601_DATE_FORMAT_REGEX ) )
assertEquals ( JWBF . DEVEL_VERSION , version )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( output , ImmutableList . of ( ) )
assertThat ( properties . getQueryId ( ) , is ( Optional . of ( "MY_INSERT_QUERY_ID" ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( input , output )
assertThat ( c , hasInterface ( "GigabitEthernet0/0" , hasAddress ( "10.0.0.1/24" ) ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertNotNull ( result )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertThat ( ChangeableUrls . fromUrls ( url ) ) . isEmpty ( )
assertThat ( node . insertNext ( next ) ) . isSameAs ( next )
assertEquals ( 180 , Duration . minutes ( 3 ) . toSeconds ( ) )
assertNotNull ( result )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertEquals ( "13 minuuttia sitten" , t . format ( new Date ( 0 ) ) )
assertNull ( Metamodel . getInstance ( ) . getConcept ( CtClass . class ) . getProperty ( CtRole . NAME ) . getMethodBySignature ( "xyz()" ) )
assertEquals ( "" , TemplateTraceability . class . getSimpleName ( ) , capability . getName ( ) )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertThatExceptionOfType ( InvalidDataAccessApiUsageException . class ) . isThrownBy ( ( ) -> connection . scriptKill ( ) )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertEquals ( Status . AWAITING , status )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotNull ( plugin )
assertFalse ( list instanceof HashSet )
assertFalse ( list instanceof HashSet )
assertNotNull ( plugin )
assertNotNull ( plugin )
assertThat ( result , is ( empty ( ) ) )
assertThat ( result ) . isEqualTo ( EntityModel . of ( new SimplePojo ( "test1" , 1 ) , Link . of ( "localhost" ) ) )
assertThat ( result , is ( empty ( ) ) )
assertFalse ( list instanceof ArrayList )
assertFalse ( accessor . consistencyCheck ( ReporterFactories . noopReporterFactory ( ) , NULL_CONTEXT_FACTORY , 1 ) )
assertFalse ( accessor . consistencyCheck ( ReporterFactories . noopReporterFactory ( ) , NULL_CONTEXT_FACTORY , 1 ) )
assertFalse ( accessor . consistencyCheck ( ReporterFactories . noopReporterFactory ( ) , NULL_CONTEXT_FACTORY , 1 ) )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertNotNull ( element )
assertNotNull ( result )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertThat ( list , empty ( ) )
assertEquals ( "adhoc --operation passthrough" , Unix4j . builder ( ) . apply ( op ) . build ( ) . toString ( ) )
assertEquals ( "adhoc --operation passthrough" , Unix4j . builder ( ) . apply ( op ) . build ( ) . toString ( ) )
assertEquals ( "adhoc --operation passthrough" , Unix4j . builder ( ) . apply ( op ) . build ( ) . toString ( ) )
assertEquals ( "adhoc --operation passthrough" , Unix4j . builder ( ) . apply ( op ) . build ( ) . toString ( ) )
assertThat ( fAndThenG . apply ( "foo" ) , is ( equalTo ( 3 ) ) )
assertEquals ( "adhoc --operation passthrough" , Unix4j . builder ( ) . apply ( op ) . build ( ) . toString ( ) )
assertTrue ( Complex . NaN . pow ( x ) . isNaN ( ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertEquals ( "Did not return correct root" , root . toString ( ) , "/" )
assertEquals ( "Did not return correct root" , root . toString ( ) , "/" )
assertEquals ( NetInterfaceType . ETHERNET , config . getType ( ) )
assertNull ( result )
assertNull ( result )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertEquals ( String . format ( "(%f, %s)" , sv1 . score , sv1 . value ) , sv1 . toString ( ) )
assertEquals ( expectedValue , JsonSerializer . writeJsonTextAsString ( array ) )
assertEquals ( expectedValue , JsonSerializer . writeJsonTextAsString ( array ) )
assertNull ( "The underlying array should not be null" , bytes . getBytes ( ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( map1 , map2 )
assertNotNull ( params )
assertThat ( "user" , is ( args . getUser ( ) ) )
assertThat ( requestField ) . isEqualTo ( RequestField . of ( "foo" ) )
assertEquals ( StatusEnum . COMPLETED , statusCaptor . getValue ( ) )
assertTrue ( called . get ( ) )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertEquals ( "Hello Kermit" , bean . doAnything ( "Kermit" ) )
assertFalse ( Origin . isValid ( origin ) )
assertThat ( recurring . toFormalString ( ) ) . isEqualTo ( test )
assertEquals ( "str: 42" , instance . string )
assertEquals ( options . buildFormParameters ( ) . get ( "Monitoring.Enabled" ) , ImmutableList . of ( "true" ) )
assertEquals ( "Java is great!" , result )
assertEquals ( p , is . readIdPath ( ) )
assertThat ( mc . getSingleOption ( ) , is ( "the-single-value" ) )
assertEquals ( BuildState . UNKNOWN , States . asVisuwallState ( "not_a_state" ) )
assertEquals ( BuildState . UNKNOWN , States . asVisuwallState ( "not_a_state" ) )
assertThatExceptionOfType ( Error . class ) . isThrownBy ( ( ) -> new BasicSlowLoader ( clock , 2 ) . get ( ) )
assertThat ( called . get ( ) ) . isTrue ( )
assertThat ( integer . get ( ) ) . isEqualTo ( 10 )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertThat ( dao . jobExists ( generateJobId ( ) ) ) . isFalse ( )
assertNotNull ( sslChannel . getSslSession ( ) )
assertNotNull ( writerAppenderManager . getFile ( ) )
assertEquals ( DEFAULT_VALUE , kieAssetsDropdownView . getValue ( ) )
assertTrue ( buildContext . getExecutorService ( ) . isShutdown ( ) )
assertEquals ( JWBF . DEVEL_VERSION , version )
assertThat ( ex . getMessage ( ) , is ( "Bad input script." ) )
assertThat ( requestField ) . isEqualTo ( RequestField . of ( "foo" ) )
assertFalse ( "Switch should not have a connection with auxId 5" , sw . getConnections ( ) . contains ( OFAuxId . of ( 5 ) ) )
assertFalse ( "Switch should not have a connection with auxId 5" , sw . getConnections ( ) . contains ( OFAuxId . of ( 5 ) ) )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertEquals ( Sparrow . class . getName ( ) , sparrow . getLogger ( ) . getName ( ) )
assertThat ( options . size ( ) , is ( 0 ) )
assertEquals ( "" , joined )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( true , FutureUtils . result ( adminClient . deleteNamespace ( colName ) ) )
assertEquals ( true , FutureUtils . result ( adminClient . deleteNamespace ( colName ) ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( true , FutureUtils . result ( adminClient . deleteNamespace ( colName ) ) )
assertEquals ( true , FutureUtils . result ( adminClient . deleteNamespace ( colName ) ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertThat ( future . get ( ) , is ( value ) )
assertEquals ( String . format ( "(%s, %s)" , kv . key , kv . value ) , kv . toString ( ) )
assertThat ( ddl , equalTo ( Ddl . builder ( ) . build ( ) ) )
assertThat ( ddl , equalTo ( Ddl . builder ( ) . build ( ) ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNotNull ( EmbeddedDatabaseRule . Builder . h2 ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( emptyMap ( ) , TransactionConfig . empty ( ) . metadata ( ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertTrue ( 0 < serverTime )
assertNotNull ( result )
assertEquals ( expected , actual )
assertTrue ( "RuntimeException is expected." , e . getCause ( ) instanceof RuntimeException )
assertEquals ( rsmd_ResultSet . isNullable ( i ) , jdbcRsmd_ResultSet . isNullable ( i ) )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertThat ( Zipper . fromList ( list ) . toPosition ( i ) . readNext ( ) ) . isEqualTo ( list . get ( i ) )
assertArrayEquals ( persons , realize )
assertThat ( "<foo/>" , not ( hasXPath ( "//bar" , equalTo ( "a" ) ) . withXPathFactory ( xFac ) ) )
assertThat ( contextPayload . getParameter ( "test" ) , is ( Optional . of ( parameter ) ) )
assertEquals ( d_locations , iss )
assertEquals ( d_locations , iss )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertThat ( String . format ( "Collison [%s] = [%s]" , labelA , labelB ) , hashA , not ( equalTo ( hashB ) ) )
assertTrue ( e . getMessage ( ) . contains ( "] not on impl " ) )
assertEquals ( 1 , source . getSourceCounter ( ) . getChannelWriteFail ( ) )
assertEquals ( "foobar" , result )
assertThat ( f . get ( ) , is ( sameInstance ( httpResponse ) ) )
assertEquals ( "some.package.Class" , location . typeName ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertNull ( obj )
assertEquals ( "NORMAL" , info . getPriority ( ) )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertEquals ( "NORMAL" , info . getPriority ( ) )
assertEquals ( "04/12/15" , value )
assertEquals ( "04/12/15" , value )
assertEquals ( user . getLastName ( ) , okLastName )
assertFalse ( list instanceof ArrayList )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertTrue ( subscribed . get ( ) )
assertNotNull ( Elements . p ( ) )
assertNotNull ( Elements . p ( ) )
assertEquals ( 29 , iri ( "http://owlapi.sourceforge.net" , "" ) . length ( ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( id , eventoRetorno . getId ( ) )
assertEquals ( in , out )
assertThat ( ( Integer ) sum ( list ) , equalTo ( new Integer ( "6" ) ) )
assertEquals ( "102132435465768798" , builder . toString ( ) )
assertThat ( fixed ( Example . class ) . matchedType ( ) , equalTo ( Example . class ) )
assertThat ( ( Integer ) sum ( list ) , equalTo ( new Integer ( "6" ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "" , joined )
assertThat ( aList , is ( List . of ( ) ) )
assertEquals ( 3 , intNumbers . sum ( ) )
assertNotNull ( result )
assertTrue ( called )
assertTrue ( called )
assertEquals ( 6 , new IntRect ( 2 , 3 , 4 , 5 ) . right ( ) )
assertEquals ( 11 , summed )
assertNotEquals ( "" , result )
assertThat ( actual . toInt ( ) , is ( equalTo ( 5 ) ) )
assertThat ( parameters . getParameter ( 0 ) . getType ( ) ) . isEqualTo ( String . class )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertThat ( TypeInformation . of ( PropertyGetter . class ) ) . isSameAs ( info )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertFalse ( wasCalled . get ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertEquals ( "LinkedHashMap[{s1=1,s2=2}]" , logAdapter . asString ( map ) )
assertThat ( options . size ( ) , is ( 0 ) )
assertThat ( options . size ( ) , is ( 0 ) )
assertThat ( resolver . createGetterInvocator ( "convertible" , converted ( ConvertibleObject . class , ConvertibleInterface . class ) ) , notNullValue ( ) )
assertThat ( resolver . createGetterInvocator ( "convertible" , converted ( ConvertibleObject . class , ConvertibleInterface . class ) ) , notNullValue ( ) )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertNotNull ( settings )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertEquals ( 0 , out . b )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( "" , a . encode ( num_to_hash ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertEquals ( "David W T. Brown" , ACTION . test_transformByLine ( "DAVID W.T. BROWN" ) )
assertThat ( rest . getForObject ( "/proxy/0" , Foo . class ) . getName ( ) ) . isEqualTo ( "bye" )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertNotNull ( tree )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( clazz , converter . convertFrom ( clazz . getCanonicalName ( ) ) )
assertEquals ( clazz , converter . convertFrom ( clazz . getCanonicalName ( ) ) )
assertEquals ( expected , options . getOptions ( ) . url )
assertFalse ( list instanceof ArrayList )
assertEquals ( item , config . getItemStack ( "item" ) )
assertFalse ( "uuidSet already contains entry" + Arrays . toString ( uuid ) , Arrays . equals ( bytes , uuid ) )
assertFalse ( "uuidSet already contains entry" + Arrays . toString ( uuid ) , Arrays . equals ( bytes , uuid ) )
assertFalse ( "uuidSet already contains entry" + Arrays . toString ( uuid ) , Arrays . equals ( bytes , uuid ) )
assertFalse ( "uuidSet already contains entry" + Arrays . toString ( uuid ) , Arrays . equals ( bytes , uuid ) )
assertEquals ( - 1 , IntegerBinaryLogarithm . calc ( 0 ) )
assertEquals ( expected , value )
assertFalse ( String . format ( "Log contains ActiveMQ audit log messages: %n%s" , line ) , line . contains ( "org.apache.activemq.audit" ) )
assertEquals ( - 1 , IntegerBinaryLogarithm . calc ( 0 ) )
assertEquals ( - 1 , IntegerBinaryLogarithm . calc ( 0 ) )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( hashFile ( f ) ) . isEqualTo ( "d85e336d61f5344395c42126fac239bc" )
assertNotNull ( build )
assertEquals ( GOOD_API_KEY , response )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( value != null )
assertEquals ( data , TestFileUtils . readString ( target ) )
assertEquals ( test . expected ( ) , test . actual ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 } , Interval . fromTo ( 1 , 5 ) . toIntArray ( ) )
assertTrue ( isValidJSON ( writer . toString ( ) ) )
assertEquals ( "{\"maxerr\": 100}" , optionsBuilder . build ( "maxerr=" ) )
assertEquals ( "Vm %d" . formatted ( vm . getId ( ) ) , vm . toString ( ) )
assertNotEquals ( "" , result )
assertThatThrownBy ( ( ) -> new LockConfiguration ( now ( ) , "name" , ofSeconds ( - 1 ) , ZERO ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( SerializationUtils . clone ( macAddress ) , equalTo ( macAddress ) )
assertNotSame ( counter , registry . counter ( nextName ( ) ) )
assertTrue ( pti . toString ( ) . contains ( "Base<String>" ) )
assertThat ( new InstrumentedType . Frozen ( TypeDescription . ForLoadedType . of ( String . class ) , loadedTypeInitializer ) . getLoadedTypeInitializer ( ) , is ( loadedTypeInitializer ) )
assertTrue ( pti . toString ( ) . contains ( "Base<String>" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertThat ( state . la ( ) ) . isNull ( )
assertThatExceptionOfType ( Error . class ) . isThrownBy ( ( ) -> new BasicSlowLoader ( clock , 2 ) . get ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertThat ( new InstrumentedType . Frozen ( TypeDescription . ForLoadedType . of ( String . class ) , loadedTypeInitializer ) . getLoadedTypeInitializer ( ) , is ( loadedTypeInitializer ) )
assertThat ( asButton . getLabel ( ) , is ( "Button" ) )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( "#: expected type: String, found: Boolean" , thrown . getMessage ( ) )
assertEquals ( "#: expected type: String, found: Boolean" , thrown . getMessage ( ) )
assertTrue ( base == cast )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( null ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( null ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( null ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( null ) )
assertEquals ( PseudoAuthenticationHandler . TYPE , handler . getType ( ) )
assertNotNull ( simple . getId ( ) )
assertThat ( collector . extension ( ) ) . isEqualToIgnoringCase ( "thl.html" )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertEquals ( ClassB . class , theCls )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertTrue ( getValidator ( ) . forExecutables ( ) . validateParameters ( target , m , new Object [ ] { } ) . isEmpty ( ) )
assertEquals ( "bar" , built . getString ( ) )
assertEquals ( License . CC0_1_0 , rebuiltLicense . getLicense ( ) )
assertNotNull ( result )
assertEquals ( "2" , Request . Get ( "http://localhost:8080/engine" ) . execute ( ) . returnContent ( ) . asString ( ) )
assertThat ( testConverter . convert ( "fooBars" , ctx ) ) . isNull ( )
assertEquals ( "verifierCode" , result )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThatThrownBy ( ( ) -> operations . get ( null , SampleEntity . class ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( KafkaHeaders . lastStringHeader ( record . headers ( ) , "b3" ) ) . isNull ( )
assertFalse ( list instanceof HashSet )
assertThat ( result ) . isEqualTo ( Optional . of ( Month . JANUARY ) )
assertThat ( KafkaHeaders . lastStringHeader ( record . headers ( ) , "b3" ) ) . isNull ( )
assertFalse ( list instanceof HashSet )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertThat ( jsonObject , JsonValueNullMatcher . isJsonValueNull ( ) )
assertThat ( jsonObject , JsonValueNullMatcher . isJsonValueNull ( ) )
assertEquals ( diff ( left , right ) , "| a[b|d]c\n" )
assertNull ( "Null expected." , byteArrayParam . getValue ( ) )
assertNull ( "result is not null" , result )
assertThat ( endSpanOptions . getStatus ( ) ) . isEqualTo ( Status . OK )
assertThat ( endSpanOptions . getStatus ( ) ) . isEqualTo ( Status . OK )
assertTrue ( FilterContainer . getInstance ( ) . getFilters ( ) . get ( 0 ) instanceof PackageFilter )
assertTrue ( FilterContainer . getInstance ( ) . getFilters ( ) . get ( 0 ) instanceof PackageFilter )
assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertNotNull ( result )
assertEquals ( "application/vnd.iso.19139+xml" , type )
assertNull ( "The underlying array should not be null" , bytes . getBytes ( ) )
assertEquals ( "Must pass single list of hllp sets to merge" , e . getMessage ( ) )
assertEquals ( "Must pass single list of hllp sets to merge" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( "{1:1,2:\"2\",3:\"3\"}" , encodeNonKeyQuoted ( map ) )
assertArrayEquals ( destArray , retArray )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> maps . assertContainsOnly ( info , actual , expected ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
assertThatExceptionOfType ( Error . class ) . isThrownBy ( ( ) -> new BasicSlowLoader ( clock , 2 ) . get ( ) )
assertThat ( avroData . toConnectSchema ( NAMED_AVRO_MAP_SCHEMA ) , equalTo ( NAMED_MAP_SCHEMA ) )
assertEquals ( schema . toString ( ) , SCHEMA )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( field )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertThat ( millis ( 1500 ) , is ( not ( equalTo ( seconds ( 2 ) ) ) ) )
assertTrue ( calledForThree . get ( ) )
assertEquals ( list , list2 )
assertNotNull ( reduce . getInput ( ) )
assertTrue ( calledForThree . get ( ) )
assertNotNull ( result )
assertFalse ( workWasDone [ 0 ] )
PAssert . thatSingleton ( pc ) . isEqualTo ( Long . valueOf ( allTestMessages . size ( ) ) )
assertEquals ( output , ImmutableList . of ( ) )
assertNull ( myHashMap . get ( 1 ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertNull ( myHashMap . get ( 1 ) )
assertEquals ( "{i32 3, i32 4, i32 0, i32 3, i32 3, i32 3, i32 3, i32 0, i32 4, i32 8}" , result . toString ( ) )
assertEquals ( "{i32 3, i32 4, i32 0, i32 3, i32 3, i32 3, i32 3, i32 0, i32 4, i32 8}" , result . toString ( ) )
assertNull ( myHashMap . get ( 1 ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( SIMPLE_VALUE , new ConfigurationValue ( new CPrimitive ( SIMPLE_VALUE ) ) . value ( ) . toString ( ) )
assertThat ( sut . currentTask ( ) , is ( Optional . of ( task ) ) )
assertTrue ( "Thread.sleep did not wait enough" , duration >= 100 )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertTrue ( JUnitCore . runClasses ( CallMethodOnlyOnceRule . class ) . wasSuccessful ( ) )
assertThat ( result ) . isEqualTo ( Optional . of ( Month . JANUARY ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( FOUR_ELEMENTS ) , codec . serialize ( FOUR_ELEMENTS ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertEquals ( p , p )
assertEquals ( p , p )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertEquals ( intSet . size ( ) , intArray . length )
assertEquals ( output , ImmutableList . of ( ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( 11 , summed )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( output , ImmutableList . of ( ) )
assertEquals ( 123456783L , lmsc1 . forwardTransmittedFrames ( ) . longValue ( ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( ( ( InformationItemCell . HasNameCell ) column . makeDefaultCellValue ( ) . getValue ( ) ) . getName ( ) . getValue ( ) ) . isEmpty ( )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( 6 , lmc1 . availabilityNumberConsecutiveFlrMeasurements ( ) . intValue ( ) )
assertEquals ( ArrayProducer . INTEGER_BAR , integerBar )
assertEquals ( expected , returned )
assertEquals ( filteredBacktrace . toString ( ) , backtrace . toString ( ) )
assertThat ( list ) . isEmpty ( )
assertEquals ( i , result )
assertEquals ( 4 , social . persons ( ) . count ( ) . next ( ) . intValue ( ) )
assertEquals ( 4 , social . persons ( ) . count ( ) . next ( ) . intValue ( ) )
assertNull ( convert )
assertFalse ( list instanceof HashSet )
assertTrue ( map . toIdentityString ( ) . contains ( "foo" ) )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertThat ( actual . mkString ( "" ) , is ( equalTo ( "" ) ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> from ( null , Foo . class ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertThat ( T0 . of ( ) ) . isSameAs ( T0 . unit )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( "baeldung" , name )
assertEquals ( matrix . getName ( ) , "IDENTITY_5_1" )
assertEquals ( "baeldung" , name )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertThat ( trace , empty ( ) )
assertThat ( trace , empty ( ) )
assertFalse ( list instanceof HashSet )
assertEquals ( map1 , map2 )
assertFalse ( list instanceof HashSet )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertThat ( trace , empty ( ) )
assertThat ( trace , empty ( ) )
assertFalse ( list instanceof HashSet )
assertEquals ( map1 , map2 )
assertFalse ( list instanceof HashSet )
assertThat ( OptionalDouble . empty ( ) ) . isEmpty ( )
assertEquals ( 9 , StreamEx . of ( input ) . parallel ( ) . indexOf ( 9 ) . getAsLong ( ) )
assertEquals ( SimpleUserSystemService . NAME , userSystem . getName ( ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertEquals ( 123456783L , lmsc1 . forwardTransmittedFrames ( ) . longValue ( ) )
assertNull ( obj )
assertThat ( T0 . of ( ) ) . isSameAs ( T0 . unit )
assertThat ( concat , is ( equalTo ( Restrictions . none ( ) ) ) )
assertTrue ( data [ 0 ] )
assertThat ( sut . validateWorkflow ( Workflow . create ( "test" , FULL_WORKFLOW_CONFIGURATION ) ) , is ( empty ( ) ) )
assertThat ( xml . find ( "a" ) . find ( "b" , "c" ) . getPath ( ) ) . containsExactly ( "<root>...</root>" , "a" , "b" , "c" )
assertThat ( CodeBlock . of ( "$L" , value ) . toString ( ) ) . isEqualTo ( "foo" )
assertEquals ( "bar" , data . get ( "foo" , String . class ) )
assertEquals ( "Wrong list item output" , "<li>Text</li>" , printer . item ( DUMMY_TEXT ) )
assertEquals ( "acceptablelanguages:de:" , actual )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertEquals ( "acceptablelanguages:de:" , actual )
assertThat ( "<foo/>" , not ( hasXPath ( "//bar" , equalTo ( "a" ) ) . withXPathFactory ( xFac ) ) )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertEquals ( "DATA:client interceptor data(client data):bean context data" , result )
assertEquals ( "1 = 1" , Expressions . asComparable ( 1L ) . eq ( 1L ) . toString ( ) )
assertEquals ( getHello ( ) , found )
assertEquals ( "scope=a%20b%20c%20d" , s )
assertEquals ( ImmutableList . of ( "INPUT" ) , emitter . getOutput ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringStringDictionary ) )
assertThat ( GlobalTransaction . getCurrentTransaction ( ) , is ( gtx ) )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertNotNull ( channel )
assertNotNull ( message )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertEquals ( "12345" , operator . trace )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertEquals ( 14 , createRDFParser ( ) . getSupportedSettings ( ) . size ( ) )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertEquals ( 14 , createRDFParser ( ) . getSupportedSettings ( ) . size ( ) )
assertThat ( result ) . isEqualTo ( Optional . of ( Month . JANUARY ) )
assertEquals ( 14 , createRDFParser ( ) . getSupportedSettings ( ) . size ( ) )
assertNotEquals ( "" , result )
assertNotEquals ( "" , result )
assertEquals ( "" , uniqueFields . toString ( ) )
assertThat ( mode , is ( equalTo ( ShellMode . interactive ( ) ) ) )
assertTrue ( called . get ( ) )
assertThat ( actual ) . isEqualTo ( expectedMap )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertEquals ( p , p )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertThat ( randomService . nextInt ( - 5 , 5 ) , both ( lessThanOrEqualTo ( 5 ) ) . and ( greaterThanOrEqualTo ( - 5 ) ) )
assertEquals ( actual , expected )
assertThat ( toMinReduction . getResult ( ) . get ( ) , is ( 1 ) )
assertThat ( file , exists ( ) )
assertEquals ( DateUtils . getDate ( milliseconds ) , DateUtils . getDate ( "2020/01/01" , "yyyy/MM/dd" ) )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertNotNull ( date1 )
assertEquals ( "getQuux2(S)" , resolver . getId ( method ) )
assertEquals ( "getQuux2(S)" , resolver . getId ( method ) )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertNotNull ( result )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertEquals ( classUnderTest . getAllButFirst ( ) , token2 )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertEquals ( "string1" , ObjectUtils . getValue ( object , "string1" ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertEquals ( "baeldung" , name )
assertThat ( file , exists ( ) )
assertEquals ( Color . ALICEBLUE , user . getFavoriteColor ( ) )
assertEquals ( metaBack , rawMeta )
assertEquals ( metaBack , rawMeta )
assertEquals ( metaBack , rawMeta )
assertEquals ( metaBack , rawMeta )
assertEquals ( options . buildFormParameters ( ) . get ( "MaxNumberOfDomains" ) , ImmutableList . of ( "1" ) )
assertThat ( BinaryToHexConverter . toHexString ( TEST_VECTOR ) ) . isEqualTo ( EXPECTED_STRING )
assertTrue ( imposter instanceof ExceptionImposter )
assertEquals ( cause , exception . getCause ( ) )
assertFalse ( list instanceof ArrayList )
assertThat ( Mustaches . execute ( mustache , ImmutableMap . of ( "name" , "world" ) ) ) . isEqualTo ( "Hello world" )
assertThat ( Mustaches . execute ( mustache , ImmutableMap . of ( "name" , "world" ) ) ) . isEqualTo ( "Hello world" )
assertThat ( Mustaches . execute ( mustache , ImmutableMap . of ( "name" , "world" ) ) ) . isEqualTo ( "Hello world" )
assertNull ( array )
assertNotNull ( date1 )
assertEquals ( response . getStatus ( ) , Status . BAD_REQUEST . getStatusCode ( ) )
assertFalse ( list instanceof HashSet )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertFalse ( list instanceof HashSet )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertThat ( flattened . collect ( toList ( ) ) ) . containsExactly ( 1 , 2 , 3 , 4 ) . inOrder ( )
assertEquals ( map , Loop . run ( "test/loop/confidence/cflow/if-then-else_2.loop" ) )
assertThat ( BiStream . empty ( ) . collect ( toLinkedHashMap ( ) ) ) . isEmpty ( )
assertThat ( BiStream . empty ( ) . collect ( toLinkedHashMap ( ) ) ) . isEmpty ( )
assertEquals ( map , Loop . run ( "test/loop/confidence/cflow/if-then-else_2.loop" ) )
assertThat ( BiStream . empty ( ) . collect ( toLinkedHashMap ( ) ) ) . isEmpty ( )
assertEquals ( expected , next )
assertEquals ( expected , next )
assertArrayEquals ( exp , out )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertEquals ( "value" , property . getValue ( ) )
assertEquals ( Color . class , blort . getType ( ) )
assertEquals ( "{1=One}" , map . toString ( ) )
assertEquals ( "{1=One}" , map . toString ( ) )
assertEquals ( expected , Types . buildMessage ( ) . addField ( Types . optional ( INT64 ) . as ( TIMESTAMP_MILLIS ) . named ( "a" ) ) . named ( "root" ) )
assertEquals ( "Improper exception message" , "Infinite or NaN" , e . getMessage ( ) )
assertEquals ( expected , options . getOptions ( ) . url )
assertEquals ( "CountByKey" , count . getName ( ) )
assertEquals ( "Distinct" , distinct . getName ( ) )
assertEquals ( "Filter" , filter . getName ( ) )
assertEquals ( "FlatMap" , map . getName ( ) )
assertEquals ( "FlatMap" , map . getName ( ) )
assertEquals ( "FlatMap" , map . getName ( ) )
assertEquals ( "Join" , join . getName ( ) )
assertEquals ( Join . Type . LEFT , join . getType ( ) )
assertEquals ( Join . Type . RIGHT , join . getType ( ) )
assertEquals ( Join . Type . FULL , join . getType ( ) )
assertEquals ( "MapElements" , map . getName ( ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( FOUR_ELEMENTS ) , codec . serialize ( FOUR_ELEMENTS ) )
assertEquals ( "ReduceByKey" , reduce . getName ( ) )
assertEquals ( "ReduceByKey" , reduce . getName ( ) )
assertEquals ( "SumByKey" , sum . getName ( ) )
assertEquals ( "TopPerKey" , tpk . getName ( ) )
assertEquals ( "Union" , union . getName ( ) )
assertEquals ( 1 , instance . flatMapToInt ( s -> IntStream . range ( 0 , s . length ( ) ) ) . count ( ) )
assertEquals ( 1 , instance . flatMapToInt ( s -> IntStream . range ( 0 , s . length ( ) ) ) . count ( ) )
assertEquals ( 1 , instance . flatMapToInt ( s -> IntStream . range ( 0 , s . length ( ) ) ) . count ( ) )
assertEquals ( 1 , instance . flatMapToInt ( s -> IntStream . range ( 0 , s . length ( ) ) ) . count ( ) )
assertEquals ( "102132435465768798" , builder . toString ( ) )
assertEquals ( instantiated , StringFactory . class . getName ( ) )
assertThat ( endpoints ) . containsOnlyKeys ( EndpointId . of ( "test" ) , EndpointId . of ( "jmx" ) )
assertNotNull ( s . spliterator ( ) )
assertNotNull ( instance )
assertThat ( calvalusProcessor . getTitle ( ) , equalTo ( "dummyProcessorName" ) )
assertThat ( method . getFacetPrefix ( ) ) . isNull ( )
assertThatThrownBy ( ( ) -> unit ( response ) . getStatus ( ) ) . hasMessageContaining ( "io exception" )
assertThatThrownBy ( ( ) -> unit ( response ) . getStatus ( ) ) . hasMessageContaining ( "io exception" )
assertThatThrownBy ( ( ) -> unit ( response ) . getStatus ( ) ) . hasMessageContaining ( "io exception" )
assertEquals ( ACL . SYSTEM , SecurityContextHolder . getContext ( ) . getAuthentication ( ) )
assertThat ( ps . onProcessor ( processor ) , is ( not ( sameInstance ( processor ) ) ) )
assertNull ( request . getHttpTimeout ( ) )
assertNull ( request . getHttpTimeout ( ) )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
GAssert . assertEquals ( ImmutableList . of ( "a title" ) , result )
assertThat ( dao . getInstance ( 200 ) , is ( "woo!" ) )
assertEquals ( createdSession . getId ( ) , "d8ebd56d32444161852eeb33a6112df6" )
assertEquals ( g . features ( ) . toString ( ) , graph . features ( ) . toString ( ) )
assertNotEquals ( "" , result )
assertThat ( unit . filter ( "/a/b/c" ) ) . isEqualTo ( "a" )
assertThat ( a1 . value ( ) , is ( "test" ) )
assertThat ( a1 . value ( ) , is ( "test" ) )
assertNull ( result . getPayload ( ) )
assertThat ( exception . getMessage ( ) ) . containsPattern ( DELETE_USER_MSG )
PAssert . that ( result ) . containsInAnyOrder ( KV . of ( sub1 , sub2 ) )
assertThat ( a1 . value ( ) , is ( "test" ) )
assertThat ( exception . getMessage ( ) ) . containsPattern ( DELETE_USER_MSG )
assertThat ( OptionalBoolean . empty ( ) , hasValue ( true ) )
assertEquals ( options . getOptions ( ) . get ( "size" ) , "1024" )
assertNotNull ( result )
assertNotNull ( result )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertThat ( custom ) . isEqualTo ( Custom . newBuilder ( ) . setValue ( 123 ) . build ( ) )
assertNotNull ( message )
assertThat ( custom ) . isEqualTo ( Custom . newBuilder ( ) . setValue ( 123 ) . build ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertThat ( custom ) . isEqualTo ( Custom . newBuilder ( ) . setValue ( 123 ) . build ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertNotNull ( message )
assertEquals ( "" , value . get ( "content" ) . toString ( ) )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertEquals ( i , e . getSource ( ) )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertThat ( lengthComparisonStrategy ) . hasToString ( "'anonymous comparator class'" )
assertNotNull ( stringClassBytes )
assertNotNull ( stringClassBytes )
assertTrue ( person instanceof Person )
assertEquals ( DateTimes . of ( "2000" ) , resultValue . getMaxIngestedEventTime ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertNotNull ( date1 )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertNotNull ( c )
assertEquals ( bean . nestedBean . hello , helloField . getValue ( ) . toString ( ) )
assertNotNull ( c )
assertEquals ( bean . nestedBean . hello , helloField . getValue ( ) . toString ( ) )
assertNull ( to )
GAssert . assertEquals ( expected , actual )
assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
assertThat ( between ( dateTime , dateTime ) . instant ( ) , equalTo ( dateTime . toInstant ( ) ) )
assertEquals ( "Default instance" , DefaultRaftPolicy . INSTANCE , params . getRaftPolicy ( ) )
assertEquals ( "Default instance" , DefaultRaftPolicy . INSTANCE , params . getRaftPolicy ( ) )
assertEquals ( "Default instance" , DefaultRaftPolicy . INSTANCE , params . getRaftPolicy ( ) )
assertEquals ( localDate , dateValue . asLocalDate ( ) )
assertEquals ( localDate , dateValue . asLocalDate ( ) )
assertEquals ( provider . getProperties ( ) , provider2 . getProperties ( ) )
assertNotNull ( embeddedDataSource )
assertEquals ( expected , result )
assertThat ( beforeNow ( ) . localDateTime ( ) , lessThanOrEqualTo ( LocalDateTime . now ( ) ) )
assertEquals ( "[John Coltrane, John Lennon, The Beatles]" , result )
assertEquals ( "[John Coltrane, John Lennon, The Beatles]" , result )
assertEquals ( "[John Coltrane, John Lennon, The Beatles]" , result )
assertEquals ( defaultString , ImmutableList . of ( "----" ) )
assertEquals ( "[John Coltrane, John Lennon, The Beatles]" , result )
assertEquals ( defaultString , ImmutableList . of ( "----" ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertEquals ( "aStringWithWords" , StringUtils . toCamelCase ( "a string with words" ) )
assertEquals ( "aStringWithWords" , StringUtils . toCamelCase ( "a string with words" ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertThat ( mergeInto ( OUT_COLLECTION ) . toDocument ( DEFAULT_CONTEXT ) ) . isEqualTo ( new Document ( "$merge" , OUT_COLLECTION ) )
assertEquals ( "<p>2</p><p>3</p><p>4</p>" , result . toHtml ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertTrue ( tree . search ( r ( 1 ) ) . isEmpty ( ) . toBlocking ( ) . single ( ) )
assertEquals ( result , task . get ( ) )
assertEquals ( 1 , moment )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertThat ( authenticate , is ( not ( present ( ) ) ) )
assertTrue ( connection . createStatement ( ) . executeQuery ( "SELECT * from CUSTOMER" ) . isBeforeFirst ( ) )
assertThat ( query ( allEntries ( ) ) ) . isEqualTo ( ids )
assertEquals ( 1 , CollectionUtilities . sumInts ( element ) . longValue ( ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( "Hello, " + name , greeter . greet ( name ) )
assertEquals ( "<p>2</p><p>3</p><p>4</p>" , result . toHtml ( ) )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertNull ( result )
assertEquals ( "The validateArgTypes() method is buggy." , sf . getReturnType ( ) , sf . validateArgTypes ( argTypes ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( 4 , social . persons ( ) . count ( ) . next ( ) . intValue ( ) )
assertEquals ( decimal ( "2.00" ) , two . getValue ( ) )
assertEquals ( result , prod )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertNotNull ( loanCyclePeriod )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( 4 , social . persons ( ) . count ( ) . next ( ) . intValue ( ) )
assertEquals ( Bags . mutable . of ( "One" , "Two" , "Three" , "Four" ) , result )
assertThat ( sort ( table . get ( key ( 100 ) ) ) , is ( values ( ) ) )
assertThat ( sort ( table . get ( key ( 100 ) ) ) , is ( values ( ) ) )
assertThat ( sort ( table . get ( key ( 100 ) ) ) , is ( values ( ) ) )
assertThat ( sort ( table . get ( key ( 100 ) ) ) , is ( values ( ) ) )
assertThat ( sort ( table . get ( key ( 100 ) ) ) , is ( values ( ) ) )
assertThat ( dialect . getNativeDriver ( ) , is ( SparkSimbaDatabaseMeta . DRIVER_CLASS_NAME ) )
assertEquals ( expected , actual )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( "wrong text" , "STRING: StringEntry" , entry . toString ( ) )
assertEquals ( 1 , result )
assertThat ( randomService . nextInt ( - 5 , 5 ) , both ( lessThanOrEqualTo ( 5 ) ) . and ( greaterThanOrEqualTo ( - 5 ) ) )
assertThat ( ( double ) stopwatch . getMinimumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 50 , 20 ) ) )
assertThat ( faker . bool ( ) . bool ( ) , isOneOf ( true , false ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertThat ( undo , hasItem ( build ( 1 , 1 ) ) )
assertEquals ( "default string value" , toml . getString ( "s" , "default string value" ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
PAssert . that ( result ) . containsInAnyOrder ( KV . of ( sub1 , sub2 ) )
assertEquals ( "HMAC-SHA1" , signer . getSignerName ( ) )
assertNull ( output )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( new String [ ] { "dev" } , propertyValue )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( headers , ( ( DefaultMessageBuilder ) builder . build ( ) . getMessageBuilder ( ) ) . buildMessageHeaders ( context ) )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( configuration . headers ( ) . get ( "value" ) ) . containsExactly ( "blah" )
assertNotNull ( factory )
assertNotNull ( factory )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertSame ( IncludeExcludeListPredicate . empty ( ) , includeExcludeList )
assertSame ( Sets . fixedSize . of ( ) , Sets . fixedSize . of ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( result . getSchema ( ) , is ( RESULT_SCHEMA ) )
assertThat ( result . getSchema ( ) , is ( RESULT_SCHEMA ) )
assertThat ( processor . statement ( "SELECT * FROM x" ) , is ( expected ) )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertNotNull ( builder )
assertNotNull ( builder )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertNotNull ( builder )
assertNotNull ( builder )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertEquals ( result , expectedQuery )
assertEquals ( TEST_INDEX_NAME , formattedIndexName )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertFalse ( list instanceof HashSet )
assertFalse ( list instanceof HashSet )
assertEquals ( getLabels ( clusters . get ( 0 ) ) , ImmutableList . of ( "online" ) )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( firstNestedProperty , secondNestedProperty )
assertNotSame ( b , GryoMapper . build ( ) )
assertTrue ( called . get ( ) )
assertTrue ( called . get ( ) )
assertThat ( cache . get ( "key" , String . class ) ) . isEqualTo ( "value" )
assertTrue ( ListUtil . isEmpty ( filterConstraints ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertEquals ( "{\"t1\":1651053600000,\"t2\":1651053600.000000000}" , json1 )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( t , exception . getCause ( ) )
assertNotNull ( result )
assertArrayEquals ( SECONDARY_DEX01_CANARY , generatedBytes )
assertArrayEquals ( SECONDARY_DEX01_CANARY , generatedBytes )
assertThat ( new SQLTranslatorRule ( expected ) . getConfiguration ( ) , is ( expected ) )
assertEquals ( "Testing" , s )
assertArrayEquals ( SECONDARY_DEX01_CANARY , generatedBytes )
assertArrayEquals ( SECONDARY_DEX01_CANARY , generatedBytes )
assertEquals ( "Testing" , s )
assertThat ( IterableUtil . nonNullElementsIn ( c ) ) . isEmpty ( )
assertEquals ( "FAIL: conversion of the single element map failed" , map , pojo )
assertArrayEquals ( SECONDARY_DEX01_CANARY , generatedBytes )
assertEquals ( "gluster" , p . getScheme ( ) )
assertEquals ( "" , uniqueFields . toString ( ) )
assertEquals ( "" , uniqueFields . toString ( ) )
assertThat ( T0 . of ( ) ) . isSameAs ( T0 . unit )
assertNotNull ( result )
assertTrue ( segmentManager . loadSegment ( eachSegment , false , SegmentLazyLoadFailCallback . NOOP ) )
assertNotNull ( build )
assertNotNull ( build )
assertNotNull ( build )
assertEquals ( "Testing" , s )
assertNotNull ( build )
assertNotNull ( build )
assertEquals ( "Testing" , s )
assertThat ( IterableUtil . nonNullElementsIn ( c ) ) . isEmpty ( )
assertEquals ( "Testing" , s )
assertNotNull ( build )
assertNotNull ( error )
assertEquals ( "baeldung" , name )
assertNotNull ( getBuilder ( ) . build ( ) )
assertNotNull ( getBuilder ( ) . build ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertThat ( actual . mkString ( "" ) , is ( equalTo ( "234" ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( array . equalsSecretBytes ( SecretBytes . randomBytes ( 16 ) ) ) . isFalse ( )
assertThat ( args . text ( ) ) . isEqualTo ( "" )
assertEquals ( "wildIsTheWind" , that . getName ( ) )
assertEquals ( "Message" , e . getMessage ( ) )
assertEquals ( "The source string can not be null" , e . getMessage ( ) )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertEquals ( Times . now ( ) . getTime ( ) / 1000 , Times . D ( Times . sDT ( d ) ) . getTime ( ) / 1000 )
assertEquals ( "foo=bar" , dir . toString ( ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertNotNull ( "Unable to create input stream for file" , FileUtils . getInputStream ( file ) )
assertThat ( sut . validateWorkflow ( Workflow . create ( "test" , FULL_WORKFLOW_CONFIGURATION ) ) , is ( empty ( ) ) )
assertTrue ( MaxNumberOfRetriesCondition . create ( 3 ) . shouldRetry ( RetryPolicyContexts . withRetriesAttempted ( 2 ) ) )
assertEquals ( String . valueOf ( _obfuscator . toJson ( null ) ) , "null" )
assertEquals ( String . valueOf ( _obfuscator . toJson ( null ) ) , "null" )
AssertJUnit . assertArrayEquals ( expected , found )
assertThat ( gApi . accounts ( ) . query ( "sandboxuser" ) . get ( ) ) . isEmpty ( )
assertEquals ( "Marker class must not be null" , throwable . getMessage ( ) )
assertThat ( ex . getMessage ( ) , is ( "date must not be null" ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( new TableDataSource ( "somedatasource" ) , dataSource )
assertThat ( ETag . from ( "1" ) . toString ( ) ) . isEqualTo ( "\"1\"" )
assertNotNull ( message )
assertNotNull ( message )
assertNotNull ( message )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertNotNull ( message )
assertEquals ( "andy" , p . getName ( ) )
assertThat ( exists ( getKeyForLabel ( Label . create ( "@//foo" , "foo" ) ) , walkableGraph ) ) . isFalse ( )
assertEquals ( job , result )
assertThat ( response . getStatusCode ( ) , equalTo ( HttpStatus . OK ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertNull ( MainRib . instance ( ) . accept ( RIB_EXPR_VERIFIER , ctx ) )
assertEquals ( "getDefault()" , plugin , fPlugin )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( SIMPLE_ICEBERG_SCHEMA . asStruct ( ) , HiveSchemaUtil . convert ( names , types , comments ) . asStruct ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( 45 , sum )
assertThat ( Endpoint . newBuilder ( ) . port ( 65536 ) . build ( ) . port ( ) ) . isNull ( )
Throwable thrown = catchThrowable ( ( ) -> assertThat ( actual ) . containsAllEntriesOf ( other ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( "Expected and actual values should be the same." , "OutboundJaxrsResponse{status=200, reason=OK, hasEntity=false, closed=false, buffered=false}" , abstractKapuaResource . returnOk ( ) . toString ( ) )
assertEquals ( a , a . not ( ) . not ( ) )
assertEquals ( a , a . not ( ) . not ( ) )
assertThat ( ispNameConflicts ( configurations , ispInfoMap ) , empty ( ) )
assertEquals ( Integer . valueOf ( 3 ) , t . getTotal ( ) )
assertEquals ( BigInteger . ZERO , value . asBigInteger ( ) )
assertEquals ( "{1,2}" , result )
assertThat ( tableViewer . getTable ( ) . getItemCount ( ) ) . isEqualTo ( 1 )
assertThat ( printer . value ( ) ) . isEqualTo ( "[2, 3, 42]" )
assertEquals ( "šɢ",  n w S ring(v a lue))
assertEquals ( "šɢ",  n w S ring(v a lue))
assertEquals ( "šɢ",  n w S ring(v a lue))
assertEquals ( BigInteger . ZERO , value . asBigInteger ( ) )
assertThat ( tableViewer . getTable ( ) . getItemCount ( ) ) . isEqualTo ( 1 )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( expected , actual )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "MockEntity" , entity . getModelName ( ) )
assertEquals ( "Key" , entity . getKey ( ) )
assertEquals ( TestEnum . valueOf ( input ) , DEFAULT_TO . apply ( input ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( "The validated character sequence is blank" , e . getMessage ( ) )
assertEquals ( expected , actual )
assertEquals ( fromString ( "::" ) , fromString ( "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" ) . add ( 1 ) )
assertEquals ( "The validated character sequence is blank" , ex . getMessage ( ) )
assertThat ( options . getUserNameAndPassword ( ) , is ( Optional . empty ( ) ) )
assertFalse ( hidden )
assertEquals ( expected , frame . toString ( ) )
assertEquals ( expected , frame . toString ( ) )
assertEquals ( expected , frame . toString ( ) )
assertEquals ( ServiceType . UNKNOWN , ServiceType . forName ( type ) )
assertEquals ( new Volume ( "/path" ) . getPath ( ) , "/path" )
assertEquals ( dn , DN . rootDN ( ) )
assertEquals ( "Cannot set RepeatedScalarFieldTestMsg#int32 to null" , exception . getMessage ( ) )
assertEquals ( "AAAAT" , S ( big ( ) . getAnchorSequence ( ) ) )
TestUtils . assertEquals ( expected , actual , ACCURACY )
assertTrue ( configuration != null )
TestUtils . assertEquals ( expected , actual , ACCURACY )
TestUtils . assertEquals ( expected , actual , ACCURACY )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( "truetruetrueget" , bean . get ( ) )
assertEquals ( "truetruetrueget" , bean . get ( ) )
assertEquals ( expected , actual )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "au" , Section . string ( Section . AUTHORITY ) )
assertThat ( THE_OBJECT , should ( matcher ) . after ( pageRefresh ( driver ) ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertEquals ( 0 , msg . getNavigationalStatus ( ) )
assertEquals ( 5 , channelExecSecureCommand . execute ( ) )
assertEquals ( 3 , msg . getETAMonth ( ) )
assertEquals ( source , result )
assertEquals ( output , "{\"name\":\"Steve\",\"list\":[{\"name\":\"Josh\",\"creditCardNumber\":\"****************\"}],\"password\":\"secret\"}" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertEquals ( "name" , font . getBitmaps ( ) . get ( 0 ) )
assertEquals ( "name" , font . getBitmaps ( ) . get ( 0 ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertThat ( props . get ( "nonexistingkey" ) ) . isNull ( )
assertArrayEquals ( new String [ ] { "--context=" + CONTEXT_VALLUE } , args )
assertThat ( stream ) . isSameInstanceAs ( stream )
assertEquals ( "three" , lastElement )
assertEquals ( NONE , image )
assertEquals ( FileType . FOLDER , s3FileObjectFileSpy . getType ( ) )
assertEquals ( FileType . FOLDER , s3FileObjectFileSpy . getType ( ) )
assertThat ( new ParseASTNode ( parseTree , mock ( CommonTokenStream . class ) ) . getRootNode ( ) , is ( parseTree ) )
assertThat ( new ParseASTNode ( parseTree , mock ( CommonTokenStream . class ) ) . getRootNode ( ) , is ( parseTree ) )
assertEquals ( instanceIdentifier , deserialized )
assertEquals ( 1000L , builder . build ( ) . getReceiveTimeout ( ) )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertTrue ( result )
assertTrue ( result )
assertTrue ( result )
assertTrue ( result )
assertTrue ( result )
assertThat ( jksOptions , is ( Optional . empty ( ) ) )
assertThat ( IterableUtil . nonNullElementsIn ( c ) ) . isEmpty ( )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertEquals ( namedClusterName , namedClusterBridge . getName ( ) )
assertNotNull ( DateTimeUtilities . nowUtcTimestamp ( ) )
assertNotNull ( Utils . generateTimestamp ( ) )
assertThat ( response . result ( ) ) . isSameAs ( result )
assertThat ( audioManager . getVolume ( null ) , is ( PercentType . ZERO ) )
assertNull ( ret )
assertThat ( GetProcessApplicationNameFromAnnotation . getAnnotatedBean . apply ( applicationContext ) . get ( ) ) . isEqualTo ( AnnotatedBean . of ( "withName" , w ) )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( "foo" , config . get ( "section" , "option" ) . get ( ) )
assertEquals ( value , taskCompletionEvent . getTaskAttemptId ( ) )
assertNotNull ( roundtrippedResponse )
assertEquals ( "test" , param . getValue ( ) )
assertNotNull ( roundtrippedResponse )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertTrue ( ListUtil . isEmpty ( filterConstraints ) )
assertThat ( token , is ( Optional . empty ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( token , is ( Optional . empty ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( token , is ( Optional . empty ( ) ) )
assertThat ( token , is ( Optional . empty ( ) ) )
assertThat ( exception . getMessage ( ) ) . containsPattern ( DELETE_USER_MSG )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertEquals ( testIid , result )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertFalse ( new File ( "target/excludedClasses/com/querydsl/apt/domain/QArrayTest_ArrayTestEntity.java" ) . exists ( ) )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertEquals ( "[\"greater_than\",1]" , serialized . toString ( ) )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertEquals ( BaseBean . OUTCOME_ERROR , result )
assertEquals ( BaseBean . OUTCOME_ERROR , result )
assertEquals ( BaseBean . OUTCOME_ERROR , result )
assertEquals ( BaseBean . OUTCOME_ERROR , result )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertTrue ( ! similarity . toString ( ) . isEmpty ( ) )
assertEquals ( data , TestFileUtils . readString ( target ) )
assertThat ( retrieved , is ( Optional . empty ( ) ) )
assertThat ( retrieved , is ( Optional . empty ( ) ) )
assertThat ( retrieved , is ( Optional . empty ( ) ) )
assertThat ( retrieved , is ( Optional . empty ( ) ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( result . getStatus ( ) , is ( Status . NO_ACTION ) )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertNotNull ( image )
assertNotNull ( e )
assertEquals ( name , result )
assertEquals ( name , result )
assertEquals ( FOO_SIMPLE_NAME + ".java" , Formatting . classToJavaFileName ( FOO_SIMPLE_NAME ) )
assertEquals ( FOO_SIMPLE_NAME + ".java" , Formatting . classToJavaFileName ( FOO_SIMPLE_NAME ) )
assertThatExceptionOfType ( JsonPatternException . class ) . isThrownBy ( ( ) -> parser . parse ( toJson ( "{'msg':'#unknown{foo}" ) ) )
assertThatExceptionOfType ( JsonPatternException . class ) . isThrownBy ( ( ) -> parser . parse ( toJson ( "{'msg':'#unknown{foo}" ) ) )
assertNull ( data . get ( "foo" , String . class ) )
assertThat ( subject . getReferencedType ( AttributeType . AUTH , CIString . ciString ( "MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/" ) ) , is ( nullValue ( ) ) )
assertThat ( subject . getReferencedType ( AttributeType . AUTH , CIString . ciString ( "MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/" ) ) , is ( nullValue ( ) ) )
assertEquals ( "" , tool . toString ( ) )
assertEquals ( "" , tool . toString ( ) )
assertEquals ( "foo" , this . testClass . getUrl ( ) )
assertEquals ( "003508" , rfAddress )
assertEquals ( "embedded-session\t" , connectionDetails )
assertEquals ( "003508" , rfAddress )
assertThatExceptionOfType ( NoSuchSessionException . class ) . isThrownBy ( ( ) -> remote . get ( id ) )
assertThat ( this . leader . getRole ( ) ) . isEqualTo ( ROLE )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( ex . getMessage ( ) , is ( "date must not be null" ) )
assertThat ( e . getMessage ( ) , matchesPattern ( "Unable to load YAML from.*" ) )
assertThat ( e . getMessage ( ) , matchesPattern ( "Unable to load YAML from.*" ) )
assertThat ( ex . getMessage ( ) , is ( "date must not be null" ) )
assertThat ( e . getMessage ( ) , matchesPattern ( "Invalid YAML from classpath:conf/origins/origins-with-syntax-error-for-configtest.yml: Cannot deserialize value of type `java.util.ArrayList<com.hotels.styx.api.extension.service.BackendService>` from String value \\(token `JsonToken.VALUE_STRING`\\)\n at \\[Source: .*]" ) )
assertEquals ( "The validated character sequence is blank" , ex . getMessage ( ) )
assertEquals ( "The validated character sequence is blank" , ex . getMessage ( ) )
assertEquals ( "The validated character sequence is blank" , ex . getMessage ( ) )
assertThat ( transformer . getName ( ) , is ( name ) )
assertThat ( association . getId ( ) , is ( equalTo ( COLLECTION_ID ) ) )
assertThat ( transformer . getName ( ) , is ( name ) )
assertEquals ( "Union" , schema . getName ( ) )
assertEquals ( "Union" , schema . getName ( ) )
assertThat ( retrieved , is ( Optional . empty ( ) ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertNotNull ( TemporalAdjusters . next ( MONDAY ) )
assertEquals ( "#: required key [aaa] not found" , thrown . getMessage ( ) )
assertEquals ( "pointer cannot be null" , thrown . getMessage ( ) )
assertEquals ( "pointer cannot be null" , thrown . getMessage ( ) )
directoryStream . forEach ( e -> assertEquals ( TARGET_PATH , e . getParent ( ) ) )
directoryStream . forEach ( e -> assertEquals ( TARGET_PATH , e . getParent ( ) ) )
assertEquals ( "[1]" , list . toString ( ) )
assertNull ( object )
assertEquals ( notifications , fetchedNotifications )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( bytes [ j ] , readBytes [ j ] )
assertEquals ( bytes [ j ] , readBytes [ j ] )
assertEquals ( "X" , StringUtils . replacePattern ( "<A>\nxy\n</A>" , "<A>.*</A>" , "X" ) )
assertEquals ( "rO0ABXQADEhlbGxvIFdvcmxkIQ==" , serialized )
assertEquals ( "application/vnd.iso.19139+xml" , type )
assertEquals ( 0 , out . b )
assertEquals ( 0 , out . b )
assertEquals ( 0 , out . b )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertEquals ( "United States" , CAMEOCode . getActorDescription ( "USA" ) )
assertEquals ( "United States" , CAMEOCode . getActorDescription ( "USA" ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertEquals ( "some.package.Class" , location . typeName ( ) )
assertThat ( actual . mkString ( "" ) , is ( equalTo ( "" ) ) )
assertEquals ( 1 , CollectionUtilities . sumInts ( element ) . longValue ( ) )
assertFalse ( filter . accept ( getByteCodeInputStream ( ClassWithoutAnnotations . class ) ) )
assertFalse ( filter . accept ( getByteCodeInputStream ( ClassWithoutAnnotations . class ) ) )
assertFalse ( filter . accept ( getByteCodeInputStream ( ClassWithoutAnnotations . class ) ) )
assertFalse ( filter . accept ( getByteCodeInputStream ( ClassWithoutAnnotations . class ) ) )
assertEquals ( version , ConfigurationInfo . getVersion ( ) )
assertEquals ( version , ConfigurationInfo . getVersion ( ) )
GAssert . assertEquals ( expected , actual )
assertEquals ( "{}" , result )
assertEquals ( "\n" + sqlText + "\n" , expected , TestUtils . FormattedResult . ResultFactory . toStringUnsorted ( rs ) )
assertTrue ( new File ( uniqueFile ) . exists ( ) )
assertTrue ( queueCount >= 1 )
assertNull ( new ReusableObjectMessage ( ) . getThrowable ( ) )
assertEquals ( toSign , expects )
assertEquals ( toSign , expects )
assertEquals ( request . getFirstHeaderOrNull ( AtmosHeaders . SIGNATURE ) , EXPECTED_SIGNATURE )
assertEquals ( request . getFirstHeaderOrNull ( AtmosHeaders . SIGNATURE ) , EXPECTED_SIGNATURE )
assertEquals ( fn . apply ( blob ) , "foo" )
assertEquals ( fn . apply ( blob ) , "foo" )
assertFalse ( retry . shouldRetryRequest ( command , HttpResponse . builder ( ) . statusCode ( INTERNAL_SERVER_ERROR . getStatusCode ( ) ) . build ( ) ) )
assertEquals ( parser . apply ( is ) . asMap ( ) , ImmutableMap . of ( TEST1 . getId ( ) , TEST1 ) )
assertEquals ( parser . apply ( is ) . asMap ( ) , ImmutableMap . of ( TEST2 . getId ( ) , TEST2 , TEST3 . getId ( ) , TEST3 ) )
assertEquals ( parser . apply ( is ) . asMap ( ) , ImmutableMap . of ( TEST1 . getId ( ) , TEST1 ) )
assertNotNull ( response )
assertNull ( natRule )
assertEquals ( "a/b/c" , TreeUtils . normalizeNodePath ( origin ) )
assertEquals ( "a/b/c" , TreeUtils . normalizeNodePath ( origin ) )
assertEquals ( builder . toString ( ) , "/?comp=list" )
assertEquals ( response . size ( ) , 6 )
assertThat ( AwsEndpointProviderUtils . addHostPrefix ( e , null ) . url ( ) ) . isEqualTo ( url )
assertThat ( suggestionEngine . suggest ( new DataSet ( ) ) . size ( ) , is ( 0 ) )
assertThatAuthenticatedUserIsSet ( taskId -> taskService . setPriority ( taskId , Integer . MAX_VALUE ) )
assertThatAuthenticatedUserIsSet ( taskId -> taskService . setPriority ( taskId , Integer . MAX_VALUE ) )
assertThat ( suggestionEngine . suggest ( new DataSet ( ) ) . size ( ) , is ( 0 ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotNull ( new ReceiveMessageAction . Builder ( ) . build ( ) )
assertNotSame ( bar , injector . getInstance ( Bar . class ) )
assertEquals ( profiles . toString ( ) , expected . toString ( ) )
assertEquals ( profiles . toString ( ) , expected . toString ( ) )
assertEquals ( profiles . toString ( ) , expected . toString ( ) )
assertEquals ( locations . toString ( ) , expected . toString ( ) )
assertEquals ( 1 , notificationCount . get ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertTrue ( exceptionThrown , "IllegalArgumentException should have been thrown" )
assertEquals ( optionsActual , optionsExpected )
assertEquals ( optionsActual , optionsExpected )
assertTrue ( exceptionThrown , "IllegalArgumentException should have been thrown" )
assertTrue ( exceptionThrown )
assertTrue ( response . size ( ) >= 0 )
assertNull ( client . updateConfigurationEntry ( "expunge.delay" , "11" ) )
assertEquals ( newDelay , expungeDelay + 1 )
assertNull ( client . updateConfigurationEntry ( "expunge.delay" , "11" ) )
assertNull ( client . updateConfigurationEntry ( "expunge.delay" , "11" ) )
assertNull ( client . updateConfigurationEntry ( "expunge.delay" , "11" ) )
assertEquals ( "in correct id for : " + prefix + ", zoff: " + zoff , zoneId . getId ( ) , prefix + zoff . getId ( ) )
assertThat ( map , hasToString ( ImmutableMap . of ( ) . toString ( ) ) )
assertTrue ( e . toString ( ) . contains ( "Dummy test error" ) )
assertTrue ( e . toString ( ) . contains ( "Dummy test error" ) )
assertTrue ( new VirtualMachineDestroyed ( client ) . apply ( virtualMachine ) )
assertFalse ( new VirtualMachineDestroyed ( client ) . apply ( virtualMachine ) )
assertTrue ( new VirtualMachineExpunged ( client ) . apply ( virtualMachine ) )
assertFalse ( new VirtualMachineExpunged ( client ) . apply ( virtualMachine ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertThat ( a1 . value ( ) , is ( "test" ) )
assertNotNull ( currentImage )
assertEquals ( EXPECTED_RESOURCE_VALUE , ResourceReader . asString ( resource ) )
assertNotNull ( status )
assertNotNull ( status )
assertNotNull ( status )
assertNotNull ( status )
assertEquals ( price ( ) . apply ( item ) , price )
assertNotNull ( status )
assertEquals ( api . listContainers ( ListContainerOptions . Builder . all ( true ) ) , new ContainersParseTest ( ) . expected ( ) )
assertEquals ( "100" , result )
assertEquals ( cdrom . id ( ) , attachedCdrom . id ( ) )
assertEquals ( statelessBean . sayHello ( "MyMessage" ) , "fallback stateless" )
assertNotNull ( status )
assertTrue ( notificationPage . isCancelButtonDisplayed ( ) )
assertTrue ( notificationPage . isCancelButtonDisplayed ( ) )
assertNotNull ( roles )
assertNotNull ( status )
assertEquals ( m2_xlarge ( ) . build ( ) . getId ( ) , template . getHardware ( ) . getId ( ) )
assertEquals ( template . getHardware ( ) . getId ( ) , "cc1.4xlarge" )
assertEquals ( fn . apply ( node ) . getPublicAddresses ( ) , ImmutableSet . of ( "1.1.1.1" ) )
assertEquals ( fn . apply ( node ) . getPublicAddresses ( ) , ImmutableSet . of ( "174.129.173.155" ) )
assertEquals ( options . getSshKeyFingerprint ( ) , "mykeypair" )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , "mykeypair" )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . getPublicKey ( ) , null )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( result . getProgress ( ) , 100 )
assertEquals ( dataABC , filter ( dataABC ) )
assertNotNull ( groupDetail . getServiceName ( ) . get ( ) , "ServiceName cannot be null " + groupDetail )
assertEquals ( options . buildFormParameters ( ) . get ( "Storage.S3.AWSAccessKeyId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Storage.S3.AWSAccessKeyId" ) , ImmutableList . of ( "foo" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Storage.S3.AWSAccessKeyId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Storage.S3.AWSAccessKeyId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "NoReboot" ) , ImmutableList . of ( "true" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "NoReboot" ) , ImmutableList . of ( "true" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ExecutableBy" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ImageId.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RestorableBy.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SnapshotId.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Device" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Device" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Device" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Architecture" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Architecture" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "AdditionalInfo" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( "dGVzdA==" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( "dGVzdA==" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( "c1.xlarge" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( "c1.xlarge" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "BlockDeviceMapping.VirtualName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "BlockDeviceMapping" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertTrue ( volumeDetached . apply ( attachment ) )
assertTrue ( volumeDetached . apply ( attachment ) )
assertFalse ( volumeDetached . apply ( attachment ) )
assertNotNull ( client . getServerInfo ( serverUUID ) )
assertNotNull ( server . getUuid ( ) )
assertNotNull ( api . getDriveInfo ( driveInfo . getUuid ( ) ) )
assertEquals ( metadata . getUserMetadata ( ) . size ( ) , 0 )
assertEquals ( MACRO , result )
assertFalse ( Files . isRegularFile ( fs . getPath ( path ) ) )
assertEquals ( "MyFallbackClass" , client . useDefaultFallbackClass ( ) )
assertFalse ( cloudTaskOrReviewPage . isSelectAssigneeButtonEnabled ( ) , "Verifying the Select Assignee button is disabled when the destination is not chosen" )
assertNull ( natRule )
assertEquals ( DefaultRecentWorkspacesService . MAX_CAPACITY , victim . getRecentlyUsedWorkspaces ( ) . size ( ) )
assertEquals ( JWBF . DEVEL_VERSION , version )
assertTrue ( start . compareTo ( redis . lastsave ( ) ) <= 0 )
assertTrue ( awaitAvailable ( api . getLoadBalancerApiForZone ( zone ) ) . apply ( lb ) )
assertTrue ( awaitAvailable ( api . getLoadBalancerApiForZone ( zone ) ) . apply ( lb ) )
assertTrue ( api . list ( ) . isEmpty ( ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( description ( ) . apply ( item ) , "an item" )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertTrue ( Booleans . of ( "bla" ) )
assertTrue ( Booleans . of ( "bla" ) )
assertNotNull ( status )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( description ( ) . apply ( item ) , "an item" )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( "the-person-i-am" , person . getAccounts ( ) . iterator ( ) . next ( ) . getUserId ( ) )
assertTrue ( e . getMessage ( ) . contains ( "IllegalArgumentException" ) )
assertEquals ( FormatStyle . valueOf ( style . name ( ) ) , style )
assertEquals ( parser . load ( input ) , securityGroupInZone )
assertFalse ( parser . load ( ZoneAndId . fromZoneAndId ( "Zone" , "i-blah" ) ) . iterator ( ) . hasNext ( ) )
assertFalse ( parser . load ( ZoneAndId . fromZoneAndId ( "Zone" , "i-blah" ) ) . iterator ( ) . hasNext ( ) )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . getPublicKey ( ) , null )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( "dGVzdA==" ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( e . getResponse ( ) . getStatusCode ( ) , 400 )
assertTrue ( api . reboot ( host . getName ( ) ) )
assertNotNull ( result )
assertNotNull ( customerImage )
assertEquals ( e . getResponse ( ) . getStatusCode ( ) , 400 )
assertEquals ( e . getResponse ( ) . getStatusCode ( ) , 400 )
assertEquals ( e . getResponse ( ) . getStatusCode ( ) , 400 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertThat ( c . getName ( ) ) . startsWith ( "_" + CLASSNAME + "$BuildCacheInClassConstructor0.CLINIT" )
assertEquals ( fn . apply ( "foo" ) , md5 ( ) . hashString ( "foo" , UTF_8 ) . asBytes ( ) )
assertEquals ( FIRST + "\r\n" + LAST , this . read . toString ( ) )
assertTrue ( api . getContainerApi ( "DFW" ) . create ( "myContainer" , anybodyRead ( ) . metadata ( metadata ) ) )
assertTrue ( vmPresent )
assertEquals ( Suppliers2 . ofInstanceFunction ( ) . apply ( "foo" ) . get ( ) , "foo" )
assertEquals ( Suppliers2 . ofInstanceFunction ( ) . apply ( "foo" ) . get ( ) , "foo" )
assertThat ( names ) . hasSize ( 12 ) . contains ( "1.dat" )
assertEquals ( Suppliers2 . ofInstanceFunction ( ) . apply ( "foo" ) . get ( ) , "foo" )
assertEquals ( domains . size ( ) , 5 )
assertEquals ( domains . size ( ) , 1 )
assertEquals ( subdomains . size ( ) , 2 )
assertTrue ( domainExport . get ( 0 ) . contains ( JCLOUDS_EXAMPLE ) )
assertNull ( api . getRecordApiForDomain ( domainId ) . get ( aRecordId ) )
assertEquals ( records . size ( ) , 2 )
assertNull ( api . getRecordApiForDomain ( domainId ) . get ( aRecordId ) )
assertNull ( api . getRecordApiForDomain ( domainId ) . get ( aRecordId ) )
assertTrue ( awaitAvailable ( api . getLoadBalancerApiForZone ( zone ) ) . apply ( lb ) )
assertNull ( publicIpBlock )
assertEquals ( list , results . getResults ( ) )
assertNotNull ( groupDetail . getServiceName ( ) . get ( ) , "ServiceName cannot be null " + groupDetail )
assertNull ( tcpClientConnection . createLogin ( ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( String . class , stringPath . getElementType ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertEquals ( result . getPayload ( ) , payload )
assertEquals ( builder . toString ( ) , "/bucket" )
assertEquals ( builder . toString ( ) , "/?acl" )
assertEquals ( builder . toString ( ) , "" )
assertEquals ( builder . toString ( ) , S3Headers . USER_METADATA_PREFIX + "adrian:foo\n" )
assertEquals ( parser . apply ( response ) , "\"3858f62230ac3c915f300c664312c11f-9\"" )
assertEquals ( fn . apply ( "bucket" ) , Optional . of ( "us-east-1" ) )
assertEquals ( parser . apply ( response ) , "VXBsb2FkIElEIGZvciA2aWWpbmcncyBteS1tb3ZpZS5tMnRzIHVwbG9hZA" )
assertEquals ( partitionId , options . getPartitionId ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertNull ( options . getOptions ( ) . get ( "size" ) )
assertEquals ( options . getIpAddressAllocationMode ( ) , IpAddressAllocationMode . NONE )
assertEquals ( null , stringSubString ( input , 13 , 30 ) )
assertEquals ( options . buildQueryParameters ( ) . size ( ) , 0 )
assertEquals ( options . buildQueryParameters ( ) . get ( S3Constants . PREFIX ) , ImmutableList . of ( ) )
assertEquals ( options . buildQueryParameters ( ) . get ( S3Constants . MARKER ) , ImmutableList . of ( ) )
assertEquals ( options . buildQueryParameters ( ) . get ( S3Constants . MAX_KEYS ) , ImmutableList . of ( ) )
assertNull ( options . getOptions ( ) . get ( "size" ) )
assertEquals ( options . getIpAddressAllocationMode ( ) , IpAddressAllocationMode . NONE )
assertNull ( options . getOptions ( ) . get ( "size" ) )
assertEquals ( options . getIpAddressAllocationMode ( ) , IpAddressAllocationMode . NONE )
assertEquals ( result . toString ( ) , expected . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( "Hello" , IOUtils . toString ( toInputStream ( "Hello" ) ) )
assertEquals ( "Hello" , IOUtils . toString ( toInputStream ( "Hello" ) ) )
assertEquals ( acks . size ( ) , Iterables . size ( receiptHandles ) , "error deleting messages " + acks )
assertEquals ( api ( queue ) . receive ( attribute ( "All" ) . visibilityTimeout ( 0 ) ) . getMD5 ( ) , md5 )
assertNotNull ( presenter . display ( ) )
assertEquals ( api . getQueueApi ( ) . getInAccount ( prefix , getOwner ( queue ) ) , queue )
assertEquals ( api . getQueueApi ( ) . getInAccount ( prefix , getOwner ( queue ) ) , queue )
assertEquals ( api . getQueueApi ( ) . getInAccount ( prefix , getOwner ( queue ) ) , queue )
assertEquals ( api . getQueueApi ( ) . getAttributes ( queue ) . getMaximumMessageSize ( ) , 1024 )
assertEquals ( api . getQueueApi ( ) . getAttributes ( queue ) . getMaximumMessageSize ( ) , 1024 )
assertEquals ( options . buildFormParameters ( ) . get ( "QueueNamePrefix" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "QueueNamePrefix" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "QueueNamePrefix" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "DelaySeconds" ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "DelaySeconds" ) , ImmutableSet . of ( "3" ) )
assertFalse ( retry . shouldRetryRequest ( command , HttpResponse . builder ( ) . statusCode ( INTERNAL_SERVER_ERROR . getStatusCode ( ) ) . build ( ) ) )
assertFalse ( retry . shouldRetryRequest ( command , HttpResponse . builder ( ) . statusCode ( INTERNAL_SERVER_ERROR . getStatusCode ( ) ) . build ( ) ) )
assertNotNull ( instance )
assertEquals ( 40 , builder . build ( ) . getPayload ( ) )
assertFalse ( retry . shouldRetryRequest ( command , HttpResponse . builder ( ) . statusCode ( INTERNAL_SERVER_ERROR . getStatusCode ( ) ) . build ( ) ) )
assertEquals ( fn . apply ( blob ) , "foo" )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( fn . apply ( in ) , expected )
assertEquals ( metadata . getName ( ) , "key" )
assertEquals ( metadata . getETag ( ) , "0xfeb" )
assertEquals ( metadata . getUserMetadata ( ) . get ( "key" ) , "value" )
assertEquals ( fn . apply ( "foo" ) , expected )
assertEquals ( metadata . getUserMetadata ( ) . size ( ) , 0 )
assertEquals ( ex . getResponse ( ) . getStatusCode ( ) , 304 )
assertEquals ( ex . getResponse ( ) . getStatusCode ( ) , 412 )
assertEquals ( ex . getResponse ( ) . getStatusCode ( ) , 412 )
assertEquals ( ex . getResponse ( ) . getStatusCode ( ) , 304 )
assertThat ( e . getResponse ( ) . getStatusCode ( ) ) . isEqualTo ( 416 )
assertThat ( e . getResponse ( ) . getStatusCode ( ) ) . isEqualTo ( 416 )
assertEquals ( request . getFilters ( ) . size ( ) , 0 )
assertEquals ( request . getFilters ( ) . size ( ) , 0 )
assertEquals ( request . getFilters ( ) . size ( ) , 0 )
assertEquals ( view . getBlobStore ( ) . countBlobs ( containerName ) , 1 )
assertEquals ( container . size ( ) , 16 )
assertEquals ( container . size ( ) , 10 )
assertEquals ( container . size ( ) , 15 )
assertEquals ( container . size ( ) , 15 )
assertEquals ( getBlob . getContext ( ) . getSigner ( ) . signGetBlob ( container , name ) , getBlob ( ) )
assertEquals ( signPutBlob . getContext ( ) . getSigner ( ) . signPutBlob ( container , blob ) , compare )
assertEquals ( partitionId , options . getPartitionId ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( options . getRanges ( ) . size ( ) , 0 )
assertEquals ( partitionId , options . getPartitionId ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( partitionId , options . getPartitionId ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertSame ( "Incorrect content returned" , content , collapsible . getContent ( ) )
assertTrue ( ProductPackagePredicates . named ( "foo" ) . apply ( productPackage ) )
assertEquals ( options . buildQueryParameters ( ) . get ( SwiftConstants . PATH ) , ImmutableList . of ( "test" ) )
assertEquals ( options . getMarker ( ) , null )
assertEquals ( options . buildQueryParameters ( ) . get ( SwiftConstants . PATH ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildQueryParameters ( ) . get ( SwiftConstants . PATH ) , ImmutableList . of ( ) )
assertEquals ( options . getMarker ( ) , "test" )
assertEquals ( options . getMarker ( ) , null )
assertEquals ( options . getMarker ( ) , "test" )
assertThat ( converter . convert ( null ) ) . isNull ( )
assertThat ( converter . convert ( null ) ) . isNull ( )
assertEquals ( options . buildQueryParameters ( ) . get ( SwiftConstants . LIMIT ) , ImmutableList . of ( "1000" ) )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertTrue ( predicate . apply ( md ) )
assertFalse ( predicate . apply ( md ) )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertEquals ( toMatch . getImage ( ) , template . getImage ( ) )
assertTrue ( response . size ( ) >= 0 )
assertEquals ( toDestroy , destroyed . size ( ) )
assertEquals ( toMatch . getImage ( ) , template . getImage ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPublicKey ( ) , null )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( reference . get ( ) , node )
assertEquals ( reference . get ( ) , node )
assertEquals ( is , adapter . getAttributeNames ( ) )
assertEquals ( is , adapter . getAttributeNames ( ) )
assertEquals ( fingerPrint , expectedFingerprint )
assertEquals ( fingerPrint , expectedFingerprint )
assertEquals ( encoded , Strings2 . toStringAndClose ( getClass ( ) . getResourceAsStream ( "/test.pub" ) ) . trim ( ) )
assertEquals ( creds , new Credentials ( "foo" , "BAR" ) )
assertEquals ( context . getName ( ) , "mytest" )
assertEquals ( endpoint , "http://foo.service.com" )
assertEquals ( creds , new Credentials ( "foo" , "BAR" ) )
assertEquals ( creds , new Credentials ( "foo" , "BAR" ) )
assertEquals ( version , "1.1" )
assertEquals ( modules . size ( ) , 2 )
assertEquals ( modules . size ( ) , 2 )
assertEquals ( "1.23.0.4" , version . toString ( ) )
assertEquals ( testBlobstoreApi , apiMetadata )
assertEquals ( testBlobstoreApi , apiMetadata )
assertEquals ( fn . apply ( "bucket" ) , Optional . of ( "us-east-1" ) )
assertEquals ( "foobar" , Fn2 . curry ( uncurried ) . apply ( "foo" , "bar" ) )
assertNotNull ( result )
assertNull ( oRegisterInstanceRequest . getInstance ( ) )
assertEquals ( dateService . iso8601DateParse ( "2011-05-25 16:12:21.656+0000" ) . getTime ( ) , 1306339941656l )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( null , reader . getCreationDate ( ) )
assertEquals ( null , reader . getCreationDate ( ) )
assertEquals ( null , reader . getCreationDate ( ) )
assertEquals ( Suppliers2 . ofInstanceFunction ( ) . apply ( "foo" ) . get ( ) , "foo" )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( dateService . iso8601SecondsDateParse ( "2011-05-26T02:14:13-04:00" ) . getTime ( ) , 1306390453000l )
assertEquals ( dateService . iso8601DateParse ( "2011-05-25 16:12:21.656+0000" ) . getTime ( ) , 1306339941656l )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( TARGETED_VOCABS , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( "Mon Nov 07 11:19:13 GMT 2011" , date . toString ( ) )
assertEquals ( "Tue Feb 03 05:26:32 GMT 2009" , date . toString ( ) )
assertEquals ( client . download ( "" ) , XML )
assertEquals ( Strings2 . toStringAndClose ( getStringResponse . getPayload ( ) . openStream ( ) ) . trim ( ) , XML )
assertEquals ( e , input )
assertEquals ( function . apply ( response ) , "hello" )
assertEquals ( function . apply ( response ) , "hello" )
assertEquals ( function . apply ( response ) , "hello" )
assertEquals ( partitionId , options . getPartitionId ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertThat ( recurring . getRange ( ) . toFormalString ( ) ) . isEqualTo ( "+1000/P1Y" )
assertEquals ( nil ( ) , singletonHList . tail ( ) )
assertThat ( recurring . getRange ( ) . toFormalString ( ) ) . isEqualTo ( "+1000/P1Y" )
assertThat ( recurring . getRange ( ) . toFormalString ( ) ) . isEqualTo ( "+1000/P1Y" )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertThat ( recurring . getRange ( ) . toFormalString ( ) ) . isEqualTo ( "+1000/P1Y" )
assertTrue ( "{\"Test\":\"test\"}" . equals ( parameters . toJson ( ) ) )
assertEquals ( type . name ( ) + ":test" , instrumentation . getId ( ) )
assertThat ( riskLimits . get ( "BTC-EUR_max_qty_per_trade" ) ) . isGreaterThan ( BigDecimal . ZERO )
assertEquals ( Optional . empty ( ) , built . getStrings ( ) )
assertEquals ( Optional . empty ( ) , built . getStrings ( ) )
assertEquals ( fn . get ( ) , provider )
assertEquals ( fn . get ( ) , provider )
assertEquals ( "A" , bindInjector . getInstance ( StringRemoteProvider . class ) . get ( ) )
assertEquals ( ">>Hello, world<<" , setter . text )
assertEquals ( "A" , bindInjector . getInstance ( StringRemoteProvider . class ) . get ( ) )
assertEquals ( ">>Hello, world<<" , setter . text )
assertEquals ( fn . get ( ) , provider )
assertEquals ( fn . get ( ) , provider )
assertEquals ( fn . get ( ) , network )
assertEquals ( fn . get ( ) , network )
assertEquals ( fn . get ( ) , region )
assertEquals ( fn . get ( ) , region )
assertEquals ( fn . get ( ) , zone )
assertEquals ( fn . get ( ) , zone )
assertEquals ( fn . get ( ) , provider )
assertEquals ( fn . get ( ) , region )
assertEquals ( fn . get ( ) , region2 )
assertEquals ( fn . get ( ) , zone )
assertEquals ( fn . get ( ) , provider )
assertEquals ( fn . get ( ) , zone )
assertEquals ( fields . size ( ) , 0 )
assertEquals ( fields . size ( ) , 1 )
assertEquals ( fields . size ( ) , 2 )
assertEquals ( bindings . buildVersion , null )
assertEquals ( bindings . buildVersion , null )
assertEquals ( testBlobstoreApi , apiMetadata )
assertEquals ( proxy . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( proxy . apply ( uri ) , new Proxy ( Proxy . Type . HTTP , new InetSocketAddress ( "proxy.example.com" , 8080 ) ) )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertEquals ( new ProxyForURI ( config ) . apply ( uri ) , Proxy . NO_PROXY )
assertNull ( api . get ( "xm3276891" ) )
assertNull ( api . get ( "xm3276891" ) )
assertNull ( api . get ( "xm3276891" ) )
assertEquals ( response , expects )
assertEquals ( client . foo ( ) , ImmutableSet . of ( "bar" ) )
assertEquals ( client . foo ( ) , ImmutableSet . of ( "bar" ) )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertNull ( "stateful postConstruct operation should success: " + stateful . getPostConstructErrorMessage ( ) , stateful . getPostConstructErrorMessage ( ) )
assertEquals ( request . getFirstHeaderOrNull ( AtmosHeaders . SIGNATURE ) , EXPECTED_SIGNATURE )
assertEquals ( authException . get ( ) . getClass ( ) , AuthorizationException . class )
assertEquals ( authException . get ( ) . getClass ( ) , AuthorizationException . class )
assertEquals ( authException . get ( ) . getClass ( ) , AuthorizationException . class )
assertEquals ( authException . get ( ) . getClass ( ) , RuntimeException . class )
assertEquals ( authException . get ( ) . getClass ( ) , AuthorizationException . class )
assertEquals ( authException . get ( ) . getClass ( ) , AuthorizationException . class )
assertEquals ( authException . get ( ) . getClass ( ) , RuntimeException . class )
assertEquals ( url , "http://res.cloudinary.com/test123/image/upload/test" )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertNull ( PageFilter . create ( 2 ) . filter ( null ) )
assertNull ( PageFilter . create ( 2 ) . filter ( null ) )
assertNull ( PageFilter . create ( 2 ) . filter ( null ) )
assertNull ( PageFilter . create ( 2 ) . filter ( null ) )
assertEquals ( actual . size ( ) , expected . length )
assertEquals ( Suppliers2 . ofInstanceFunction ( ) . apply ( "foo" ) . get ( ) , "foo" )
assertEquals ( Suppliers2 . or ( Suppliers . < String > ofInstance ( null ) , Suppliers . ofInstance ( "foo" ) ) . get ( ) , "foo" )
assertEquals ( Suppliers2 . or ( Suppliers . < String > ofInstance ( "foo" ) , Suppliers . ofInstance ( "bar" ) ) . get ( ) , "foo" )
assertEquals ( combined . get ( ) , "foo" )
assertThat ( this . javaSourceUrl , is ( notNullValue ( ) ) )
assertNotNull ( installation . getVCSRevision ( ) )
assertEquals ( contents , "rabbit" )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( defaultTemplate . getImage ( ) . getId ( ) , imageId )
assertEquals ( options . getSshKeyFingerprint ( ) , "mykeypair" )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , "mykeypair" )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getSshKeyFingerprint ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , "-----BEGIN RSA PRIVATE KEY-----" )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . getPublicKey ( ) , null )
assertEquals ( options . getPublicKey ( ) , "ssh-rsa" )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . buildFormParameters ( ) . get ( "PrivateIpAddress" ) , ImmutableList . of ( "10.0.0.1" ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( roles )
assertNotNull ( roles )

assertThat ( map . get ( KeyDefinition . newKeyDefinition ( ) . withId ( "age" ) . build ( ) ) ) . isNotNull ( )
assertEquals ( monitoringState . get ( DEFAULT_INSTANCE ) , MonitoringState . PENDING )
assertEquals ( monitoringState . get ( DEFAULT_INSTANCE ) , MonitoringState . PENDING )
assertNotNull ( allResults )
assertNotNull ( allResults )
assertTrue ( awaitAvailable ( api . getLoadBalancerApiForZone ( zone ) ) . apply ( lb ) )
assertEquals ( 1 , users . size ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ExecutableBy" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ExecutableBy" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ExecutableBy" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Owner.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ImageId.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ImageId.1" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ImageId.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroup.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroupId.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroupId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SecurityGroupId.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "AdditionalInfo" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( "dGVzdA==" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "UserData" ) , ImmutableList . of ( "dGVzdA==" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( "c1.xlarge" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType" ) , ImmutableList . of ( "c1.xlarge" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KernelId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Monitoring.Enabled" ) , ImmutableList . of ( "true" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Monitoring.Enabled" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Monitoring.Enabled" ) , ImmutableList . of ( "true" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SubnetId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SubnetId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "SubnetId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "IamInstanceProfile.Arn" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "IamInstanceProfile.Name" ) , ImmutableList . of ( "Webserver" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "IamInstanceProfile.Name" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "IamInstanceProfile.Name" ) , ImmutableList . of ( "Webserver" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "RamdiskId" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "BlockDeviceMapping.VirtualName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "BlockDeviceMapping" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "PrivateIpAddress" ) , ImmutableList . of ( "10.0.0.1" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "KeyName" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ProductDescription" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "ProductDescription" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "InstanceType.1" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "StartTime" ) , ImmutableList . of ( "1970-05-23T21:21:18.910Z" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "StartTime" ) , ImmutableList . of ( "1970-05-23T21:21:18.910Z" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "EndTime" ) , ImmutableList . of ( "1970-05-23T21:21:18.910Z" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "EndTime" ) , ImmutableList . of ( "1970-05-23T21:21:18.910Z" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "AvailabilityZoneGroup" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "AvailabilityZoneGroup" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "LaunchGroup" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "LaunchGroup" ) , ImmutableList . of ( "test" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Type" ) , ImmutableList . of ( "persistent" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Type" ) , ImmutableList . of ( "persistent" ) )
assertEquals ( signPutBlob . getContext ( ) . getSigner ( ) . signPutBlob ( container , blob ) , compare )
assertEquals ( signPutBlob . getContext ( ) . getSigner ( ) . signPutBlob ( container , blob ) , compare )
assertEquals ( Strings2 . toString ( getStringResponse . getPayload ( ) ) . trim ( ) , XML )
assertEquals ( builder . toString ( ) , "/?comp=list" )
assertEquals ( builder . toString ( ) , "/mycontainer" )
assertEquals ( builder . toString ( ) , "/mycontainer?comp=list" )
assertEquals ( builder . toString ( ) , "/mycontainer?comp=list" )
assertEquals ( configTree . relocateToRoot ( path ) , expected )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Storage.S3.AWSAccessKeyId" ) , ImmutableList . of ( "foo" ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildFormParameters ( ) . get ( "Description" ) , ImmutableList . of ( ) )
assertTrue ( initialContainerCount >= 0 )
assertTrue ( queueCount >= 1 )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( get , method )
assertTrue ( vmPresent )
assertNotNull ( status )
assertNotNull ( status )
assertNotNull ( status )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertTrue ( "response body should have name " + name , response . getResponseBody ( ) . contains ( "name=" + name ) )
assertThat ( listUriSettings . size ( ) , is ( 16 ) )
assertEquals ( 0 , result . size ( ) )
assertNull ( tagKey )
assertNull ( tagKey )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( "http://10.0.2.2:5000/foo/bar" , r . getURI ( ) . toASCIIString ( ) )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertThat ( attachmentValue . getValue ( ) ) . isEqualTo ( "value" )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertThat ( dim , equalTo ( NodeRoleDimension . builder ( ) . setName ( "name" ) . build ( ) ) )
assertThat ( comboBox . getValue ( ) , equalTo ( "New York" ) )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertThat ( comboBox . getValue ( ) , equalTo ( "New York" ) )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( get , method )
assertTrue ( vmPresent )
assertTrue ( vmPresent )
assertNotNull ( roles )
assertThat ( new Input ( "" . toCharArray ( ) , uri ) . uri ( ) ) . isSameAs ( uri )
assertThat ( new Input ( "" . toCharArray ( ) , uri ) . uri ( ) ) . isSameAs ( uri )
assertThat ( sdkHttpFullRequest . getUri ( ) . getQuery ( ) ) . isNullOrEmpty ( )
assertEquals ( 1 , users . size ( ) )
assertEquals ( delimitWithOriginal ( ) , delimitWithMina ( ) )
assertTrue ( result )
assertEquals ( 1 , users . size ( ) )
assertEquals ( 1 , users . size ( ) )
assertEquals ( status , true , "Group has not been deleted" )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( publicIpv4BlockId )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( 1 , users . size ( ) )
assertTrue ( postStatus . contains ( UPDATED . getPostStatus ( ) ) , "The post status is incorrect" )
assertNull ( publicIpBlock )
assertEquals ( api ( queue ) . receive ( attribute ( "All" ) . visibilityTimeout ( 0 ) ) . getMD5 ( ) , md5 )
assertNotNull ( response )
assertNull ( natRule )
assertEquals ( api ( queue ) . receive ( attribute ( "All" ) . visibilityTimeout ( 0 ) ) . getMD5 ( ) , md5 )
assertEquals ( tokenList . size ( ) , 0 )
assertEquals ( liveSearchSiteResult . getSiteName ( ) . getDescription ( ) , siteName )
assertNull ( natRule )
assertNull ( natRule )
assertEquals ( 0 , overtreders . size ( ) )
assertTrue ( discussionsPage . isNoTopicsDisplayed ( ) )
assertTrue ( notificationPage . isCancelButtonDisplayed ( ) )
assertTrue ( servers . size ( ) > 0 )
assertNull ( natRule )
assertEquals ( liveSearchSiteResult . getSiteName ( ) . getDescription ( ) , siteName )
assertNull ( natRule )
assertTrue ( discussionsPage . isNoTopicsDisplayed ( ) )
assertTrue ( notificationPage . isCancelButtonDisplayed ( ) )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertNull ( natRule )
assertNull ( natRule )
assertNull ( natRule )
assertNull ( natRule )
assertEquals ( testInstance . getAllIds ( ) , expected )
assertEquals ( testInstance . getAllIds ( ) , expected )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertNull ( natRule )
assertTrue ( discussionsPage . isNoTopicsDisplayed ( ) )
assertTrue ( notificationPage . isCancelButtonDisplayed ( ) )
assertNull ( natRule )
assertEquals ( "TestGetFields 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( get , method )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertTrue ( vmPresent )
assertTrue ( vmPresent )
assertEquals ( "TestGetFields 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertTrue ( vmPresent )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( new ClientCacheFactoryBean ( ) . getEnableAutoReconnect ( ) , is ( false ) )
assertTrue ( postStatus . contains ( UPDATED . getPostStatus ( ) ) , "The post status is incorrect" )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertEquals ( builder . toString ( ) , "/?comp=list" )
assertEquals ( "foo" , ise . getMessage ( ) )
assertThat ( builder . key ( ) ) . isEqualTo ( expected )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . shouldCustomizeOnInstantiate ( ) , Boolean . TRUE )
assertEquals ( options . shouldCustomizeOnInstantiate ( ) , Boolean . TRUE )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertArrayEquals ( BinaryUtil . fromBase64String ( BinaryUtil . toBase64String ( binaryData ) ) , binaryData )
assertNull ( rule )
assertTrue ( vmPresent )
assertNotNull ( currentImage )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( roles )
assertTrue ( Booleans . of ( "bla" ) )
assertEquals ( fingerPrint , expectedFingerprint )
assertEquals ( encoded , Strings2 . toStringAndClose ( getClass ( ) . getResourceAsStream ( "/test.pub" ) ) . trim ( ) )
assertEquals ( fingerPrint , expectedFingerprint )
assertEquals ( encoded , Strings2 . toStringAndClose ( getClass ( ) . getResourceAsStream ( "/test.pub" ) ) . trim ( ) )
assertNotNull ( groupDetail . getServiceName ( ) . get ( ) , "ServiceName cannot be null " + groupDetail )
assertNull ( tcpClientConnection . createLogin ( ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( Iterables . size ( adapter . listImages ( ) ) , 34 )
assertEquals ( parser . apply ( input ) , expected )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getSecurityGroupIds ( ) , ImmutableSet . of ( "3" ) )
assertTrue ( archiveCounter . apply ( before + 1 ) )
assertEquals ( controller . getTranslation ( ) , "hei" )
assertThat ( method . getFacetPrefix ( ) ) . isNull ( )
assertTrue ( recordCounter . apply ( before - 1 ) )
assertTrue ( accounts . size ( ) >= 1 )
assertNull ( api . get ( "xm3276891" ) )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertEquals ( request . getRequestLine ( ) , "GET http://momma/?metadata=imagename:foo&metadata=serverid:2 HTTP/1.1" )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( response . size ( ) , 6 )
assertEquals ( options . buildQueryParameters ( ) . get ( "description" ) , ImmutableList . of ( ) )
assertEquals ( options . buildQueryParameters ( ) . get ( "description" ) , ImmutableList . of ( ) )
assertTrue ( vmPresent )
assertNotNull ( publicIpv4BlockId )
assertNotNull ( publicIpv4BlockId )
assertTrue ( vmPresent )
assertEquals ( "John" , result )
assertEquals ( null , hrun )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertTrue ( vmPresent )
assertNotNull ( database . getName ( ) )
assertEquals ( null , hrun )
assertEquals ( 1 , users . size ( ) )
assertTrue ( vmPresent )
assertEquals ( 1 , users . size ( ) )
assertEquals ( 1 , users . size ( ) )
assertThat ( imagesNow . size ( ) , is ( lessThan ( images . size ( ) ) ) )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertNotNull ( instance . id ( ) , "Instance must not be null" )
assertThat ( range ) . isEqualTo ( feedRangeEPK . getRange ( ) )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( status )
assertTrue ( vmPresent )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertEquals ( 1 , users . size ( ) )
assertTrue ( vmPresent )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertEquals ( 0 , list . size ( ) )
assertEquals ( get , method )
assertEquals ( 1 , users . size ( ) )
assertEquals ( ( Integer ) 1 , $ ( $ ( fn2 ( Integer :: sum ) , 0 ) , 1 ) )
assertEquals ( actualTitle , IMG_PREVIEW_TITLE )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertNotNull ( instance . id ( ) , "Instance must not be null" )
assertNotNull ( instance . id ( ) , "Instance must not be null" )
assertEquals ( 1 , users . size ( ) )
assertNotNull ( Grid . getTestSession ( ) , "verify that the test session returned is not null" )
assertNotNull ( instance . id ( ) , "Instance must not be null" )
assertTrue ( Booleans . of ( "bla" ) )
assertTrue ( vmPresent )
assertNotNull ( currentImage )
assertThat ( configuration . getMetricNamePrefix ( ) ) . isNull ( )
assertEquals ( completedJobs . get ( ) , 15 )
assertEquals ( completedJobs . get ( ) , 1 )
assertEquals ( actual , expected )
assertTrue ( ex instanceof IllegalArgumentException , "Exception should be an IllegalArgumentException" )
assertThat ( result , equalTo ( AuthMe . getPluginVersion ( ) ) )
assertTrue ( result )
assertTrue ( discussionsPage . isNoTopicsDisplayed ( ) )
assertNull ( dataCenter )
assertTrue ( result )
assertFalse ( result )
assertThat ( reg . id ( ) , is ( notNullValue ( ) ) )
assertEquals ( result . id ( ) , currentServer . id ( ) )
assertNotNull ( requestId )
assertTrue ( result )
assertNull ( firewall )
assertTrue ( result )
assertFalse ( result )
assertTrue ( result )
assertFalse ( result )
assertTrue ( result )
assertFalse ( result )
assertTrue ( result )
assertFalse ( result )
assertThat ( shadowAppWidgetHost . getContext ( ) ) . isSameInstanceAs ( context )
assertNull ( image )
assertNotNull ( customerImage )
assertEquals ( result . id ( ) , currentAppliance . id ( ) )
assertNull ( ipBlock )
assertNotNull ( ipBlocks )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertNotNull ( requestId )
assertEquals ( volume . properties ( ) . name ( ) , "apache-volume" )
assertTrue ( result )
assertNull ( loadBalancer )
assertEquals ( nic . properties ( ) . name ( ) , "apache-nic" )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertTrue ( result )
assertNull ( nic )
assertNotNull ( nics )
assertTrue ( result )
assertFalse ( result )
assertEquals ( server . properties ( ) . name ( ) , "apache-node" )
assertTrue ( result )
assertNull ( srvr )
assertEquals ( requestId , "123456" )
assertEquals ( requestId , "123456" )
assertEquals ( requestId , "123456" )
assertTrue ( result )
assertFalse ( result )
assertEquals ( snapshot . properties ( ) . name ( ) , "test-snapshot new name" )
assertEquals ( snapshot . properties ( ) . name ( ) , "test-snapshot new name" )
assertNotNull ( response )
assertNull ( snapshot )
assertTrue ( result )
assertFalse ( result )
assertEquals ( new Storage ( request . getName ( ) , request . getStoragePlatformName ( ) , request . getAttributes ( ) ) , result )
assertTrue ( result )
assertNull ( storage )
assertTrue ( result )
assertFalse ( result )
assertTrue ( ex instanceof ResourceNotFoundException , "Exception should be an ResourceNotFoundException" )
assertTrue ( ex instanceof IllegalArgumentException , "Exception should be an IllegalArgumentException" )
assertTrue ( ex instanceof AuthorizationException , "Exception should be an AuthorizationException" )
assertTrue ( ex instanceof InsufficientResourcesException , "Exception should be InsufficientResourcesException" )
assertTrue ( ex instanceof HttpResponseException , "Exception should be HttpResponseException" )
assertEquals ( requestId , "123456" )
assertEquals ( requestId , "123456" )
assertEquals ( requestId , "123456" )
assertEquals ( requestId , "102458" )
assertEquals ( requestId , "102459" )
assertEquals ( "1234-1234-1234-1234" , loadBalancerId )
assertEquals ( "nic-id" , nicId )
assertEquals ( "qwertyui-qwer-qwer-qwer-qwertyyuiiop" , serverId )
assertEquals ( "qswdefrg-qaws-qaws-defe-rgrgdsvcxbrh" , storageId )
assertEquals ( gaeRequest . getURL ( ) . getPath ( ) , "/foo" )
assertEquals ( "{\"server\":{\"name\":\"foo\",\"imageId\":1,\"flavorId\":2}}" , request . getPayload ( ) . getRawContent ( ) )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertEquals ( CHANGED_TEXT_1 , converter . TChangeFile ( TEXT_1 , methodNames ) )
assertEquals ( CHANGED_TEXT_1 , converter . TChangeFile ( TEXT_1 , methodNames ) )
assertEquals ( CHANGED_TEXT_1 , converter . TChangeFile ( TEXT_1 , methodNames ) )
assertEquals ( options . as ( CloudStackTemplateOptions . class ) . getNetworkIds ( ) , ImmutableSet . of ( ) )
assertEquals ( options . getPrivateKey ( ) , null )
assertEquals ( options . getPrivateKey ( ) , null )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( e . getMessage ( ) , "securityGroupIds was null" )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertThat ( id . toString ( ) , not ( equalTo ( HandlerId . class . getName ( ) + "@" + System . identityHashCode ( id ) ) ) )
assertEquals ( controller . getTranslation ( ) , "hei" )
assertEquals ( result , expectedQuery )
assertNull ( api . getReverseDNSApiForService ( CLOUD_SERVERS_OPEN_STACK ) . get ( serverURI , ptrRecordIPv6Id ) )
assertNull ( publicIpBlock )
assertEquals ( Integer . valueOf ( 1 ) , client . getServer ( serverId ) . getFlavorId ( ) )
assertEquals ( Integer . valueOf ( 1 ) , client . getServer ( serverId ) . getFlavorId ( ) )
assertEquals ( "Incorrect default value" , ActiveMQActivationSpec . NON_DURABLE_SUBSCRIPTION , activationSpec . getSubscriptionDurability ( ) )
assertTrue ( group != null )
assertNull ( uuid )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( o1 , listBox . getSelection ( ) . get ( 0 ) )
assertEquals ( o1 , listBox . getSelection ( ) . get ( 0 ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertNull ( tcpClientConnection . createLogin ( ) )
assertEquals ( result . toList ( ) . toString ( ) , expected . toList ( ) . toString ( ) )
assertEquals ( result . toList ( ) . toString ( ) , expected . toList ( ) . toString ( ) )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertTrue ( entry . getValue ( ) . compareTo ( prev_val ) >= 0 )
assertEquals ( builder . variables . size ( ) , 0 )
assertEquals ( builder . statements . size ( ) , 0 )
assertEquals ( builder . variableScopes . size ( ) , 0 )
assertNotNull ( "can provide ServletContext" , context )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( item . getSymbolicName ( ) , symbolicName )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertThat ( entity . getKey ( ) . getId ( ) , is ( not ( 0L ) ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertThat ( entity . getKey ( ) . getId ( ) , is ( not ( 0L ) ) )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "hello world" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "hello world" )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( e2 , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( app . getDisplayName ( ) , "test-propagating-enricher" )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( app . getDisplayName ( ) , "test-propagating-enricher" )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( object , ArbitraryClassWithSensor . MY_SENSOR )
assertEquals ( child . getConfig ( TestEntity . CONF_NAME ) , "inchildspec" )
assertEquals ( child . getConfig ( TestEntity . CONF_NAME ) , "inchildspec" )
assertEquals ( child . getConfig ( TestEntity . CONF_NAME ) , "inchildspec" )
assertEquals ( child . getConfig ( TestEntity . CONF_NAME ) , "inchildspec" )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertEquals ( saying . get ( Duration . TEN_SECONDS ) , "Hello Bob" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( "name" , name )
assertTrue ( result . get ( TaskAssigningRuntimeClient . class ) instanceof TaskAssigningRuntimeClientImpl )
assertEquals ( app . getConfig ( MY_CONFIG_KEY ) , "myval" )
assertEquals ( Iterables . getOnlyElement ( app . getLocations ( ) ) . config ( ) . get ( MY_CONFIG_KEY ) , "myval" )
assertEquals ( app . getConfig ( MY_CONFIG_KEY ) , "myHardcodedVal" )
assertEquals ( Iterables . getOnlyElement ( entity . getLocations ( ) ) . config ( ) . get ( CloudLocationConfig . ACCESS_CREDENTIAL ) , "myval" )
assertNotNull ( loc )
assertEquals ( loc . getDisplayName ( ) , "myname" )
assertNotNull ( loc )
assertEquals ( loc . getDisplayName ( ) , "loc1" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertEquals ( Files . readLines ( file , Charsets . UTF_8 ) , ImmutableList . of ( "abc" ) )
assertEquals ( app . getConfig ( MY_CONFIG_KEY ) , "myval" )
assertEquals ( app . getConfig ( MY_CONFIG_KEY ) , "myval" )
assertEquals ( spec . getChildren ( ) . get ( 0 ) . getFlags ( ) . get ( "resolver" ) , TestServiceTypeResolver . class )
assertEquals ( "long" , provider . getCanonicalDataTypeName ( getColumn ( "REFERENCEDENTITY1" , "EMBEDDEDLONGATTRIBUTE" ) ) )
assertEquals ( "" , result )
assertNull ( one )
assertTrue ( res )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertNotNull ( state )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( item . getSymbolicName ( ) , symbolicName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertTrue ( e . toString ( ) . contains ( "recursive" ) , "Unexpected error message: " + e )
assertTrue ( e . toString ( ) . contains ( "recursive" ) , "Unexpected error message: " + e )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertTrue ( e . toString ( ) . contains ( "recursive" ) , "Unexpected error message: " + e )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( Iterables . getOnlyElement ( silly1 ) . getDescription ( ) , "Some silly app test" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( item . getSymbolicName ( ) , symbolicName )
assertEquals ( item . getSymbolicName ( ) , symbolicName )
assertEquals ( catalogItem . getVersion ( ) , TEST_VERSION )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( item . getVersion ( ) , v2 )
assertEquals ( item . getVersion ( ) , v2 )
assertEquals ( item . getVersion ( ) , v1 )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertEquals ( testEntity . getEntityType ( ) . getName ( ) , "CustomTestEntityImpl" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( ImmutableSet . copyOf ( spec . getParameters ( ) ) , ImmutableList . of ( SIMPLE_PARAM ) )
assertEquals ( ImmutableSet . copyOf ( spec . getParameters ( ) ) , ImmutableSet . copyOf ( BasicSpecParameter . fromClass ( mgmt ( ) , testClass ) ) )
assertEquals ( MyTestAction . class , aClass )
assertThat ( underTest . readFile ( ) , is ( "testpass" ) )
assertThat ( underTest . readFile ( ) , is ( "testpass" ) )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( doubler . invoke ( DoublingEntity . DOUBLE , MutableMap . of ( "numberToDouble" , 3 , "numberToStartWith" , 3 ) ) . get ( ) , ( Integer ) 7 )
assertEquals ( doubler . invoke ( DoublingEntity . DOUBLE , MutableMap . of ( "numberToDouble" , 3 , "numberToStartWith" , 3 ) ) . get ( ) , ( Integer ) 7 )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( e2 , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( e2 , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( getConfigInTask ( testEntity , TestEntity . CONF_NAME ) , "bar" )
assertEquals ( spec . getChildren ( ) . get ( 0 ) . getFlags ( ) . get ( "resolver" ) , TestServiceTypeResolver . class )
assertEquals ( spec . getChildren ( ) . get ( 0 ) . getFlags ( ) . get ( "resolver" ) , TestServiceTypeResolver . class )
assertEquals ( spec . getChildren ( ) . get ( 0 ) . getFlags ( ) . get ( "resolver" ) , TestServiceTypeResolver . class )
assertEquals ( spec . getChildren ( ) . get ( 0 ) . getFlags ( ) . get ( "resolver" ) , TestServiceTypeResolver . class )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertEquals ( "No system property STYX_HOME has been defined." , e . getMessage ( ) )
assertThat ( SystemProperties . get ( "ro.product.device" ) ) . isEqualTo ( "robolectric" )
assertTrue ( v == null || BrooklynVersion . get ( ) . equals ( v ) , v )
assertTrue ( v == null || BrooklynVersion . get ( ) . equals ( v ) , v )
assertTrue ( CatalogPredicates . < Entity , EntitySpec < ? > > entitledToSee ( mgmt ) . apply ( item ) )
assertTrue ( catalogItem != null )
assertTrue ( catalogItem != null )
assertTrue ( catalogItem != null )
assertTrue ( catalogItem != null )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertEquals ( firstInput . getLabel ( ) , "simple" )
assertEquals ( 0 , victim . getData ( "chuck" ) . size ( ) )
assertEquals ( result , RESULT )
assertEquals ( everything , subject . findExactAndAllMoreSpecific ( Ipv4Resource . MAX_RANGE ) , "failed with seed: " + seed )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertEquals ( everything , subject . findExactAndAllMoreSpecific ( Ipv4Resource . MAX_RANGE ) , "failed with seed: " + seed )
assertThat ( result . getSchema ( ) , is ( SCHEMA ) )
assertEquals ( props . get ( "brooklyn.mykey" ) , "myval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertEquals ( policy . getConfig ( MyPolicy . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( enricher . getConfig ( MyEnricher . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( entity . getConfig ( strKey ) , "aval" )
assertNotNull ( message )
assertEquals ( "aval" , entity . getConfig ( strKey ) )
assertEquals ( "aval" , entity . getConfig ( strKey ) )
assertEquals ( "aval" , entity . getConfig ( strKey ) )
assertEquals ( "aval" , entity . getConfig ( strKey ) )
assertNull ( new Toml ( ) . getTable ( "a" ) )
assertEquals ( ecs . get ( propertyName ) , propertyExpectedValue )
assertEquals ( ecs . get ( propertyName ) , propertyExpectedValue )
assertEquals ( ecs . get ( propertyName ) , propertyExpectedValue )
assertEquals ( ecs . get ( propertyName ) , propertyExpectedValue )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
assertEquals ( child . getCallHistory ( ) , ImmutableList . of ( ) )
assertEquals ( ImmutableList . of ( "locations" ) , getParameterNames ( Startable . START ) )
if ( ! failed ) Assert . fail ( "doubling should have failed because it had no body" )
assertEquals ( result , "myval" )
assertEquals ( Strings . replaceAllRegex ( output , "\\s+" , " " ) . trim ( ) , "3 4 25" )
assertEquals ( true , e . toString ( ) . contains ( "Invalid request" ) )
assertEquals ( enricher . getConfig ( MyEnricher . INT_KEY_WITH_DEFAULT ) , ( Integer ) 0 )
assertEquals ( enricher . getConfig ( MyEnricher . STR_KEY ) , "origval" )
assertEquals ( enricher . getConfig ( MyEnricher . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( child . getCallHistory ( ) , ImmutableList . of ( ) )
assertEquals ( entity . sensors ( ) . get ( nextSensor ) , ( Integer ) i , "i=" + i )
assertEquals ( entity . sensors ( ) . get ( nextSensor ) , ( Integer ) i , "i=" + i )
assertEquals ( e . getAttribute ( COLOR ) , "red" )
assertEquals ( e . getAttribute ( COLOR ) , null )
assertEquals ( t . get ( ) , "myentity" )
assertEquals ( t . get ( ) , "myentity" )
assertEquals ( regexReplacer . apply ( "somefootext" ) , "somebartext" )
assertEquals ( regexReplacer . apply ( "somefootext" ) , "somebartext" )
assertNotNull ( details )
assertEquals ( t . get ( ) , "myentity" )
assertFalse ( entity . getMutableEntityType ( ) . getEffectors ( ) . containsKey ( TestEntity . IDENTITY_EFFECTOR . getName ( ) ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( Entities . attributeSupplier ( entity , TestEntity . NAME ) . get ( ) , "myname" )
assertEquals ( entity . sensors ( ) . get ( nextSensor ) , ( Integer ) i , "i=" + i )
assertEquals ( entity . config ( ) . get ( nextKey ) , ( Integer ) i , "i=" + i )
assertEquals ( entity . feeds ( ) . getFeeds ( ) . size ( ) , NUM_TASKS )
assertEquals ( entity . feeds ( ) . getFeeds ( ) . size ( ) , NUM_TASKS )
assertEquals ( entity . feeds ( ) . getFeeds ( ) . size ( ) , NUM_TASKS )
assertEquals ( entity . getConfig ( strKey ) , "aval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertThat ( signature . getHashAlgorithm ( ) ) . isEqualTo ( HashAlgorithm . SHA_1 )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity . getConfig ( strKey ) , "aval" )
assertEquals ( entity . getConfig ( TestEntity . CONF_NAME ) , "defaultval" )
assertEquals ( entity2 . getConfig ( TestEntity . CONF_NAME ) , "aval" )
assertEquals ( entity2 . getConfig ( TestEntity . CONF_NAME ) , "aval" )
assertEquals ( entity2 . getConfig ( TestEntity . CONF_NAME ) , "avalmysuffix" )
assertEquals ( entity . getConfig ( strKey ) , null )
assertEquals ( Entities . attributeSupplier ( entity , TestEntity . NAME ) . get ( ) , "myname" )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertEquals ( "id1" , target . getId ( ) )
assertEquals ( EntityFunctions . locationMatching ( Predicates . alwaysTrue ( ) ) . apply ( entity ) , loc )
assertNull ( "DNS data returend" , result )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertEquals ( Machines . findSubnetIp ( entity ) . get ( ) , privateAddr )
assertEquals ( app2 . getDisplayName ( ) , "myDefaultName" )
assertEquals ( app2 . getDisplayName ( ) , "myName" )
assertEquals ( entity . getIconUrl ( ) , "/img/myicon.gif" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertEquals ( entity . getDisplayName ( ) , "entityname" )
assertEquals ( entity . getDisplayName ( ) , "myOverriddenDefaultName" )
assertEquals ( entity . getDisplayName ( ) , "myEntityName" )
assertEquals ( listener . getEvents ( ) , ImmutableList . of ( ) )
assertEquals ( listener . getEvents ( ) , ImmutableList . of ( ) )
assertEquals ( EntitySuppliers . uniqueSshMachineLocation ( entity ) . get ( ) , machine )
assertEquals ( entity . getDisplayName ( ) , "entityname" )
assertEquals ( entity . getDisplayName ( ) , "entityname" )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertThat ( SOME_SCHEMA . findValueColumn ( K0 ) , is ( Optional . empty ( ) ) )
assertThat ( SOME_SCHEMA . findValueColumn ( K0 ) , is ( Optional . empty ( ) ) )
assertEquals ( entity . portRange1 , PortRanges . fromInteger ( 1234 ) )
assertEquals ( ImmutableList . copyOf ( entity . policies ( ) ) , ImmutableList . of ( ) )
assertEquals ( ImmutableList . copyOf ( entity . policies ( ) ) , ImmutableList . of ( ) )
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . myfield , "myval" )
assertEquals ( entity . portRange1 , PortRanges . fromInteger ( 1234 ) )
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . myfield , "myval" )
assertTrue ( manager . build ( entity , sshLocation ) instanceof MyOtherSshDriver )
assertTrue ( manager . build ( entity , sshLocation ) instanceof MySshDriver )
assertTrue ( driver instanceof MyOtherSshDriver )
assertTrue ( driver instanceof MyOtherSshDriver )
assertEquals ( actual . getFilename ( ) , "myfile-myversion.tar.gz" )
assertEquals ( actual . getFilename ( ) , "myfile-myaddonversion.tar.gz" )
assertEquals ( actual . getFilename ( ) , "overridden.filename.tar.gz" )
assertEquals ( result , String . format ( "id=%s" , entityid ) )
assertEquals ( result , String . format ( "id=%s" , entityid ) )
assertEquals ( result , String . format ( "id=%s" , entityid ) )
assertEquals ( result , "mykey1=myval1,mykey2=myval2" )
assertTrue ( cluster . getAttribute ( Attributes . SERVICE_UP ) )
assertEquals ( son . getConfig ( HelloEntity . MY_NAME ) , "Danny" )
assertEquals ( son . getConfig ( HelloEntity . MY_NAME ) , "Danny" )
assertEquals ( result . getDisplayName ( ) , "Boo" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( entity2 . getConfig ( TestEntity . CONF_NAME ) , "aval" )
assertEquals ( entity2 . getConfig ( TestEntity . CONF_NAME ) , "aval" )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertEquals ( val , "myglobalval" )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( location . getDisplayName ( ) , name ) ;
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . myfield , "myval" )
assertEquals ( loc . tags ( ) . getTags ( ) , MutableSet . of ( "x" ) )
assertEquals ( location . getDisplayName ( ) , name ) ;
assertEquals ( loc . getAddress ( ) . getHostAddress ( ) , "1.2.3.4" )
assertEquals ( l . getDisplayName ( ) , "My Foo" )
assertNotNull ( mgmt . getLocationRegistry ( ) . getDefinedLocationByName ( "localhost" ) )
assertEquals ( listener . getEvents ( ) , ImmutableList . of ( ) )
assertEquals ( Machines . findSubnetIp ( entity ) . get ( ) , "myaddr" )
assertEquals ( Machines . findSubnetIp ( entity ) . get ( ) , privateAddr )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertEquals ( Machines . findSubnetHostname ( entity ) . get ( ) , "myval" )
assertEquals ( Machines . findSubnetHostname ( entity ) . get ( ) , publicAddr )
assertTrue ( entity . getDisplayName ( ) . startsWith ( "TestEntity:" + entity . getId ( ) . substring ( 0 , 4 ) ) , "displayName=" + entity . getDisplayName ( ) )
assertEquals ( Machines . findSubnetOrPrivateIp ( entity ) . get ( ) , privateAddr )
assertEquals ( Machines . findSubnetOrPrivateIp ( entity ) . get ( ) , "myval" )
assertEquals ( Machines . findSubnetOrPrivateIp ( entity ) . get ( ) , privateAddr )
assertEquals ( Machines . findSubnetOrPrivateIp ( entity ) . get ( ) , publicAddr )
assertEquals ( r . toString ( ) , "80,8080,8000,8080-8099" )
assertEquals ( Lists . newArrayList ( range ) , ImmutableList . of ( 80 ) )
assertEquals ( e . getAttribute ( COLOR ) , null )
assertEquals ( ( int ) p , 1240 )
assertEquals ( result , "myval" )
assertEquals ( entity . getDisplayName ( ) , "myOverriddenDefaultName" )
assertEquals ( Machines . findSubnetIp ( entity ) . get ( ) , "myaddr" )
assertEquals ( newE . getConfig ( TestEntity . CONF_MAP_THING ) , ImmutableMap . of ( "akey" , "aval" , "bkey" , "bval" ) )
assertEquals ( port , 1234 )
assertEquals ( new CustomMachineNamer ( ) . generateNewMachineUniqueName ( config ) , "TestEnt" )
assertEquals ( new CustomMachineNamer ( ) . generateNewMachineUniqueName ( config ) , "number999" )
assertEquals ( new CustomMachineNamer ( ) . generateNewMachineUniqueName ( config ) , "foo-foo-bar-bar-baz-baz" )
assertEquals ( provider . getName ( ) , Constants . AMBARI_PLUGIN_NAME )
fail ( "something should have been disallowed" )
assertNotNull ( state )
assertFalse ( workItemSet )
assertEquals ( EnumCaseForgivingConverter . resolve ( MyEnum . class , "DoesNotExist" ) , MyEnum . BaR )
assertEquals ( toWaitFor , cnt . get ( ) )
assertEquals ( toWaitFor , cnt . get ( ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
assertThat ( sut ( ) . isOffline ( ) , equalTo ( true ) )
assertEquals ( Files . readLines ( file , Charsets . UTF_8 ) , ImmutableList . of ( "abc" ) )
assertEquals ( Files . readLines ( nonExistantFile , Charsets . UTF_8 ) , ImmutableList . of ( "abc" ) )
assertEquals ( Files . readLines ( nonExistantFile , Charsets . UTF_8 ) , ImmutableList . of ( "abc" ) )
assertEquals ( accessor . get ( ) , "abc" )
assertEquals ( accessor . get ( ) , "abc\ndef\n" )
assertEquals ( null , fileExtension )
assertThat ( BigDecimalUtil . toBigDecimal ( null ) , is ( nullValue ( ) ) )
assertEquals ( reffer2 . entity , app )
assertEquals ( reffer2 . obj , app )
assertTrue ( folderDetails . isCommentsPanelPresent ( ) )
assertEquals ( "p.N334K" , AminoAcids . forceSingleLetterProteinAnnotation ( "p.Asn334Lys" ) )
assertEquals ( newE . getConfig ( MyEntity . MY_CONFIG ) , "myval" )
assertEquals ( newE . getConfig ( MyEntity . MY_CONFIG ) , "myval" )
assertEquals ( newE . getConfig ( MyEntity . MY_CONFIG ) , "myval" )
assertEquals ( newE . getConfig ( MyEntity . MY_CONFIG ) , "myval" )
assertEquals ( entity2 . getConfig ( MySubEntity . SUPER_KEY_1 ) , "changed" )
assertNotNull ( layout )
assertEquals ( item . getSymbolicName ( ) , symbolicName )
assertEquals ( newLoc . myfield , "myval" )
assertEquals ( newLoc . myTransientFieldNotSetFromFlag , null )
assertEquals ( newLoc . myTransientFieldSetFromFlag , null )
assertEquals ( newLoc . myfield , "myval" )
assertEquals ( newE . getConfig ( TestEntity . CONF_MAP_THING ) , ImmutableMap . of ( "akey" , "aval" , "bkey" , "bval" ) )
assertEquals ( newE . getConfig ( MyEntity . MY_CONFIG ) , "myval" )
assertEquals ( ( ( RenamedType ) newConfVal ) . myfield , "myfieldval" )
assertTrue ( newPredicate . apply ( newApp ) )
assertNotNull ( "Helper from AdWordsServices is null" , helper )
assertEquals ( entry . getValue ( ) , ( Integer ) RawConverter . fromMarketOrderIsBuyOrder ( entry . getKey ( ) ) )
assertEquals ( input . getConfigKey ( ) . getTypeToken ( ) , TypeToken . of ( BasicSpecParameterFromListTest . class ) )
assertNull ( path . getName ( ) )
assertEquals ( policy . getConfig ( MyPolicy . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( policy . getConfig ( MyPolicy . INT_KEY_WITH_DEFAULT ) , ( Integer ) 0 )
assertEquals ( policy . getConfig ( MyPolicy . STR_KEY ) , "origval" )
assertEquals ( policy . getConfig ( MyPolicy . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( policy . getConfig ( MyPolicy . STR_KEY_WITH_DEFAULT ) , "str key default" )
assertEquals ( policy . getConfig ( TestEntity . CONF_NAME ) , "aval" )
assertEquals ( "Did not get expected result." , expected , result )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertEquals ( 180 , Duration . minutes ( 3 ) . toSeconds ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( 1 , v . getDefault ( ) )
assertNullOrEmpty ( MultiTainter . getMergedTaint ( output ) )
assertNullOrEmpty ( MultiTainter . getMergedTaint ( output ) )
assertEquals ( 180 , Duration . minutes ( 3 ) . toSeconds ( ) )
assertThat ( new Child ( ) . get ( ) ) . isEqualTo ( "get from Shadow2OfChild" )
assertThat ( fromJson ( asJson ( cursor ) , SecretRetrievalCursor . class ) ) . isEqualTo ( cursor )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
assertTrue ( data [ 0 ] )
assertFalse ( executed . get ( ) )
assertEquals ( score , 0.1 , 0.00001 )
assertEquals ( score , 0 , 0.00001 )
assertTrue ( RegisteredTypePredicates . entitledToSee ( mgmt ) . apply ( item ) )
assertEquals ( 0 , date . getTime ( ) )
assertEquals ( future . get ( ) , item )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertEquals ( future . get ( ) , item )
assertEquals ( future . get ( ) , item )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertFalse ( "Directory shouold not exist" , HadoopFileUtils . exists ( provider . getResourcePath ( ) ) )
assertEquals ( Machines . findSubnetIp ( entity ) . get ( ) , "myaddr" )
assertFalse ( "Directory shouold not exist" , HadoopFileUtils . exists ( provider . getResourcePath ( ) ) )
assertFalse ( "Directory shouold not exist" , HadoopFileUtils . exists ( provider . getResourcePath ( ) ) )
assertFalse ( "Directory shouold not exist" , HadoopFileUtils . exists ( provider . getResourcePath ( ) ) )
assertFalse ( "Directory shouold not exist" , HadoopFileUtils . exists ( provider . getResourcePath ( ) ) )
assertThatCertificateVerificationFails ( )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertThat ( supplier . andThen ( Object :: toString ) . get ( ) ) . isEqualTo ( "1" )
assertEquals ( EntityAdjuncts . getNonSystemEnrichers ( entity ) , ImmutableList . of ( enr ) )
assertEquals ( EntityAdjuncts . getNonSystemEnrichers ( entity ) , ImmutableList . of ( enr ) )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertEquals ( Lists . newArrayList ( range ) , ImmutableList . of ( 80 ) )
assertNotNull ( "The new instance was null" , proxy )
assertEquals ( "test" , IO . slurp ( new URL ( url , "async" ) ) . trim ( ) )
assertEquals ( "dubbo.version=2.0.0&group=test&version=1.0.0" , newSubscribe . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertTrue ( cluster . getAttribute ( Attributes . SERVICE_UP ) )
assertTrue ( cluster . getAttribute ( Attributes . SERVICE_UP ) )
assertTrue ( cluster . getAttribute ( Attributes . SERVICE_UP ) )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
assertEqualsIgnoringOrder ( group . getMembers ( ) , ImmutableSet . of ( e3 ) )
assertNull ( list )
assertEqualsIgnoringOrder ( group . getMembers ( ) , ImmutableSet . of ( e3 ) )
assertEqualsIgnoringOrder ( group . getMembers ( ) , ImmutableSet . of ( e3 ) )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
assertNotEquals ( e2 . getAttribute ( Attributes . SERVICE_STATE_ACTUAL ) , Lifecycle . ON_FIRE )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
assertTrue ( val != null && val > 2 , "val=" + val )
assertThat ( AgentBuilder . Default . InitializationStrategy . NoOp . INSTANCE . apply ( builder ) , is ( ( DynamicType . Builder ) builder ) )
assertThat ( AgentBuilder . Default . InitializationStrategy . NoOp . INSTANCE . apply ( builder ) , is ( ( DynamicType . Builder ) builder ) )
assertThat ( AgentBuilder . Default . InitializationStrategy . NoOp . INSTANCE . apply ( builder ) , is ( ( DynamicType . Builder ) builder ) )
assertThat ( AgentBuilder . Default . InitializationStrategy . NoOp . INSTANCE . apply ( builder ) , is ( ( DynamicType . Builder ) builder ) )
assertTrue ( tradeService . cancelOrder ( new DefaultCancelOrderParamId ( ) ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertEquals ( "{\"innerText\":\"innerValue\"}" , stringify ( new Outer ( "outerValue" , "innerValue" ) ) )
assertEquals ( ( int ) JsonFunctions . cast ( Integer . class ) . apply ( pop ) , 80 * 1000 * 1000 )
assertEquals ( obj , "dark" )
assertEquals ( ( int ) JsonFunctions . castM ( Integer . class ) . apply ( pop ) , 80 * 1000 * 1000 )
assertEquals ( ( int ) JsonFunctions . cast ( Integer . class ) . apply ( pop ) , 80 * 1000 * 1000 )
assertEquals ( ( int ) obj , 500 * 1000 )
assertEquals ( "child" , child . getPath ( ) )
assertEquals ( new Volume ( "/path" ) . getPath ( ) , "/path" )
assertEquals ( "null" , result )
assertEquals ( "{\"foo\":\"foo1\",\"bar\":\"bar1\"}" , json )
assertEquals ( "{\"foo\":\"foo1\",\"bar\":\"bar1\"}" , json )
assertTrue ( singleton . ejb ( ) )
assertTrue ( val != null && val >= 0 , "val=" + val )
assertThat ( AgentBuilder . Default . InitializationStrategy . NoOp . INSTANCE . apply ( builder ) , is ( ( DynamicType . Builder ) builder ) )
assertThat ( AgentBuilder . Listener . StreamWriting . toSystemOut ( ) , hasPrototype ( ( AgentBuilder . Listener ) new AgentBuilder . Listener . StreamWriting ( System . out ) ) )
assertThat ( AgentBuilder . Listener . StreamWriting . toSystemError ( ) , hasPrototype ( ( AgentBuilder . Listener ) new AgentBuilder . Listener . StreamWriting ( System . err ) ) )
assertEquals ( "name" , name )
assertEquals ( machine . getConfig ( ConfigKeys . newConfigKey ( String . class , "mykey" ) ) , "myval" )
assertEquals ( "bob" , l . getUser ( ) )
assertNotNull ( m1 )
assertEquals ( obtained . getAddress ( ) . getHostAddress ( ) , expected )
assertEquals ( Optional . empty ( ) , built . getStrings ( ) )
assertEquals ( machine . getConfig ( ConfigKeys . newConfigKey ( String . class , "mykey" ) ) , "myval" )
assertNotNull ( "pre 1.8 storageInfo should return non null locations list" , locations )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertNotNull ( m1 )
assertNotNull ( m1 )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertThat ( instance . getStateVariable ( "key" , "defaultValue" ) , is ( "defaultValue" ) )
assertThat ( instance . getStateVariable ( "key" , "defaultValue" ) , is ( "defaultValue" ) )
assertNotNull ( m1 )
assertNotNull ( m1 )
assertNotNull ( m1 )
assertEquals ( "name" , name )
assertTrue ( resolve ( "localhost" ) instanceof LocalhostMachineProvisioningLocation )
assertThat ( getArray ( createObj ( ) . put ( "b" , "text" ) . get ( ) , "b" ) ) . isNull ( )
assertEquals ( host2 . getPrivateAddresses ( ) , ImmutableSet . of ( "1.2.3.4" ) )
assertEquals ( multiLoc . getDisplayName ( ) , "myname" )
assertNotNull ( m1 )
assertNotNull ( message )
assertNull ( list )
assertThat ( translator . getAlias ( ) , is ( ALIAS ) )
assertNotNull ( details )
assertEquals ( rc , 0 )
assertEquals ( RecordingSshjTool . connectionCount . get ( ) , 1 , "Expected one SSH connection to have been recorded" )
assertEquals ( RecordingSshjTool . connectionCount . get ( ) , 1 , "Expected one SSH connection to have been recorded" )
assertEquals ( RecordingSshjTool . connectionCount . get ( ) , 2 , "Expected two SSH connections to have been recorded" )
assertEquals ( RecordingSshjTool . connectionCount . get ( ) , 1 , "Expected one SSH connection to have been recorded even though out script header differed." )
assertEquals ( RecordingSshjTool . disconnectionCount . get ( ) , 1 )
assertEquals ( "ityouknow" , redisService . get ( "neo" ) )
assertEquals ( "ityouknow" , redisService . get ( "neo" ) )
assertFalse ( ResourceUtils . create ( this ) . doesUrlExist ( url ) , "should not exist: " + url )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( lines , ImmutableList . of ( "mycontents" ) )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , "OK" )
assertEquals ( Streams . readFullyString ( stream ) , tempFileContents )
assertEquals ( Streams . readFullyString ( stream ) , tempFileContents )
assertEquals ( null , fileExtension )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertEquals ( Streams . readFullyString ( stream ) , tempFileContents )
assertEquals ( Streams . readFullyString ( stream ) , tempFileContents )
assertEquals ( bag . get ( K1 ) , "v1" )
assertEquals ( bag . get ( K1 ) , "v1" )
assertEquals ( bag . get ( K1 ) , "v1" )
assertTrue ( "Always passing test case" , true )
assertEquals ( response . getContentAsString ( ) , "\"12345 frogs\"" )
assertEquals ( getServerUser ( server ) , TestSecurityProvider . USER )
assertEquals ( response . getContentAsString ( ) , "\"12345 frogs\"" )
assertEquals ( response . getContentAsString ( ) , "\"12345 frogs\"" )
assertEquals ( response . getContentAsString ( ) , "\"12345 frogs\"" )
assertEquals ( s . set , ImmutableSet . of ( 1 ) )
assertEquals ( s . inet . getHostAddress ( ) , "127.0.0.1" )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertThat ( cache . get ( "test" ) , equalTo ( 1 ) )
assertEquals ( rc , 0 )
assertEquals ( rc , 0 )
assertTrue ( watch . elapsed ( TimeUnit . MILLISECONDS ) > 900 , "only slept " + Time . makeTimeStringRounded ( watch ) )
assertEquals ( rc , 0 )
assertEquals ( rc , 0 )
assertEquals ( rc , 0 )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertEquals ( actual , ImmutableList . of ( contentsWithoutLineBreak ) )
assertEquals ( rc , 0 )
assertEquals ( Strings . replaceAllRegex ( output , "\\s+" , " " ) . trim ( ) , "3 4 25" )
assertEquals ( rc , 0 )
assertEquals ( callCount . get ( ) , 3 )
assertEquals ( callCount . get ( ) , successOnAttempt )
assertEquals ( callCount . get ( ) , 2 )
assertEquals ( exitCode , 123 )
assertEquals ( "[\"set_member\",1,2,3]" , serialized . toString ( ) )
assertEquals ( "[\"set_member\",1,2,3]" , serialized . toString ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertTrue ( query . context ( ) . isSecondaryPartitionPruningEnabled ( ) )
assertNotNull ( result )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertNull ( list )
assertThat ( TypeFunction . type ( " foo  " ) ) . isEqualTo ( "str" )
assertTrue ( result . trim ( ) . equals ( "yoursource1" ) , "Wrong contents of stdout download: " + result )
assertEquals ( returnCode , ( Integer ) 88 )
assertEquals ( Strings . replaceAllRegex ( output , "\\s+" , " " ) . trim ( ) , "3 4 25" )
assertNull ( toobig , "warmup=" + tWarmup + "; times=" + times )
assertEquals ( em . getTasksWithAllTags ( ImmutableList . of ( "not_there" , "A" ) ) , ImmutableSet . of ( ) )
assertEquals ( em . getTasksWithAllTags ( ImmutableList . of ( "not_there" , "A" ) ) , ImmutableSet . of ( ) )
assertEquals ( em . getTasksWithTag ( "A" ) , ImmutableList . of ( t ) )
assertEquals ( calls . get ( ) , 5 , "Expected task to be resubmitted despite throwing an exception" )
assertEquals ( counter . get ( ) , NUM_TIMES )
assertEquals ( future . get ( ) , ( Integer ) 123 )
assertEquals ( future . get ( ) , ( Integer ) 123 )
assertFalse ( executed . get ( ) )
assertEquals ( future . get ( ) , ( Integer ) 123 )
assertEquals ( v . clone ( ) . get ( ) , "foo" )
assertTrue ( result . trim ( ) . equals ( "yoursource1" ) , "Wrong contents of stdout download: " + result )
assertTrue ( result . trim ( ) . equals ( "yoursource1" ) , "Wrong contents of stdout download: " + result )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "123,456" )
assertEquals ( result , "123456" )
assertEquals ( result , "123,456" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "defval" )
assertEquals ( result , "defval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "myval" )
assertEquals ( result , "defval" )
assertEquals ( result , "myval" )
assertEquals ( EnumCaseForgivingConverter . resolve ( MyEnum . class , "DoesNotExist" ) , MyEnum . BaR )
assertTrue ( x instanceof ImmutableList )
assertEquals ( "hello,world" , result . getName ( ) )
assertEquals ( "hello,world" , result . getName ( ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( XmlUtil . xpath ( xml , "/a/b[text()]" ) , "myb" )
assertEquals ( XmlUtil . xpath ( xml , "/a/b[text()]" ) , "myb" )
assertEquals ( expectedPaddedStringSpaces , StringPaddingUtil . padLeft ( inputString , minPaddedStringLength ) )
assertEquals ( expectedPaddedStringSpaces , StringPaddingUtil . padLeft ( inputString , minPaddedStringLength ) )
assertThat ( OutputStreamFormater . spaces ( 20 ) . length ( ) , is ( 20 ) )
assertEquals ( app . getEntityType ( ) . getName ( ) , TestApplication . class . getName ( ) )
assertEquals ( testEntity . config ( ) . get ( TestEntity . CONF_NAME ) , testName )
assertThat ( CustomEventNativeFactory . create ( null ) . getClass ( ) . getName ( ) ) . isEqualTo ( "com.mopub.nativeads.MoPubCustomEventNative" )
assertNotNull ( resolver )
assertEquals ( launcher . getServerDetails ( ) . getManagementContext ( ) . getConfig ( ) . getFirst ( "mykey" ) , "myval" )
assertEquals ( launcher . getServerDetails ( ) . getManagementContext ( ) . getConfig ( ) . getFirst ( "mykey" ) , "myval" )
assertEquals ( getFile ( new URL ( url ) ) , new File ( file ) . getAbsolutePath ( ) )
assertEquals ( message . getId ( ) , messageSummary . getId ( ) )
assertEquals ( RecordingSshjTool . connectionCount . get ( ) , 1 , "Expected one SSH connection to have been recorded even though out script header differed." )
assertEquals ( loc . getConfig ( LocationConfigKeys . LATITUDE ) , 41.2d )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertTrue ( Modifier . isFinal ( modifiersByMethod . get ( "finalMethod/0" ) ) )
assertThat ( Files . size ( logPath . get ( ) ) ) . isGreaterThan ( 0L )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( loc . getConfig ( LocationConfigKeys . LATITUDE ) , 41.2d )
assertEquals ( entity . getConfig ( MyBaseEntity . SUPER_KEY_1 ) , "overridden superKey1 default" )
assertEquals ( loc . getConfig ( LocationConfigKeys . LATITUDE ) , 41.2d )
assertEquals ( toMatch . getImage ( ) , template . getImage ( ) )
assertNotNull ( m1 )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertEquals ( taskDetailsPage . getComment ( ) , "(None)" )
assertThat ( image . getOs ( ) ) . isEqualTo ( "linux" )
assertThat ( jobBuilder . getImage ( ) , is ( "foobar:from.dockerfile" ) )
assertEquals ( loc . getConfig ( LocationConfigKeys . LATITUDE ) , 41.2d )
assertEquals ( throwable , e . getCause ( ) )
assertEquals ( file , "myfile" )
assertTrue ( resolve ( "jclouds:aws-ec2" ) instanceof JcloudsLocation )
assertTrue ( resolve ( "aws-ec2" ) instanceof JcloudsLocation )
assertTrue ( resolve ( "aws-ec2:eu-west-1" ) instanceof JcloudsLocation )
assertTrue ( resolve ( "eu-west-1" ) instanceof JcloudsLocation )
assertThat ( faker . resolve ( "address.city_prefix" ) , not ( isEmptyString ( ) ) )
assertThat ( faker . resolve ( "address.city_prefix" ) , not ( isEmptyString ( ) ) )
assertThat ( propertyOptions . getUnique ( EmbedExampleOption . class ) ) . isEqualTo ( "Test" )
assertEquals ( count . get ( ) , 3 )
assertEquals ( input . get ( LocationConfigKeys . CLOUD_MACHINE_NAMER_CLASS ) , machineNamerClass )
assertEquals ( input . get ( LocationConfigKeys . CLOUD_MACHINE_NAMER_CLASS ) , machineNamerClass )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertArrayEquals ( new int [ 0 ] , selectValuesMeta . getSelectLength ( ) )
assertEquals ( machine . getUser ( ) , "myname" )
assertEquals ( Lists . newArrayList ( range ) , ImmutableList . of ( 80 ) )
assertFalse ( exitCode == 0 , "exit code for sudo command should not have been 0" )
assertNotNull ( m1 )
assertNotNull ( exception )
assertThat ( parameters . get ( From ) , is ( nullValue ( String . class ) ) )
assertThat ( jobTaskRequest . getId ( ) , StringStartsWith . startsWith ( "test_job@-@0@-@READY@-@unassigned-slave" ) )
assertThat ( pathCaptor . getValue ( ) , is ( "/path" ) )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertEquals ( newLoc . myfield , "myval" )
assertTrue ( policy . getId ( ) != null )
assertEquals ( resizable . getCurrentSize ( ) , ( Integer ) 2 )
assertEquals ( resizable . getCurrentSize ( ) , ( Integer ) 2 )
assertTrue ( counter . get ( ) >= 1 , "cccounter=" + counter )
assertNotNull ( newApp . getAttribute ( DOUBLE_METRIC ) )
assertNotNull ( newApp . getAttribute ( DOUBLE_METRIC ) )
assertEquals ( averager . getAverage ( ) , 10d )
assertEquals ( averager . getAverage ( ) , null )
assertEquals ( averager . getAverage ( ) , 10d )
assertEquals ( averager . getAverage ( ) , ( 10 + 20 + 30 + 40 ) / 4d )
assertEquals ( averager . getAverage ( ) , ( 30 + 40 + 50 + 60 ) / 4d )
assertEquals ( average . confidence , 0d )
assertEquals ( producer . getAttribute ( fractionSensor ) , 1d )
assertEquals ( producer . getAttribute ( fractionSensor ) , 1d )
assertEquals ( e1 . getAttribute ( TestEntity . SERVICE_STATE_ACTUAL ) , Lifecycle . RUNNING )
assertEquals ( e1 . getAttribute ( TestEntity . SERVICE_STATE_ACTUAL ) , Lifecycle . RUNNING )
assertEquals ( e1 . getCallHistory ( ) , ImmutableList . of ( "restart" ) )
assertEquals ( e1 . getCallHistory ( ) , ImmutableList . of ( ) )
assertEquals ( resizable . getCurrentSize ( ) , ( Integer ) 123 )
assertEquals ( resizable . getCurrentSize ( ) , ( Integer ) 123 )
assertEquals ( asJson ( applicationSpec ) , jsonFixture ( "fixtures/application-spec.json" ) )
assertEquals ( fromJson ( jsonFixture ( "fixtures/application-spec.json" ) , ApplicationSpec . class ) , applicationSpec )
assertEquals ( asJson ( error ) , jsonFixture ( "fixtures/api-error-no-details.json" ) )
assertEquals ( asJson ( applicationSpec ) , jsonFixture ( "fixtures/application-spec.json" ) )
assertEquals ( fromJson ( jsonFixture ( "fixtures/application-spec.json" ) , ApplicationSpec . class ) , applicationSpec )
assertEquals ( asJson ( applicationSpec ) , jsonFixture ( "fixtures/application-spec.json" ) )
assertThat ( s . getStatus ( ) , is ( equalTo ( PASSED ) ) )
Asserts . assertEqualsIgnoringOrder ( locs , app . getLocations ( ) )
assertEquals ( asJson ( applicationSpec ) , jsonFixture ( "fixtures/application-spec.json" ) )
assertEquals ( fromJson ( jsonFixture ( "fixtures/application-spec.json" ) , ApplicationSpec . class ) , applicationSpec )
assertEquals ( selfUri , URI . create ( expectedUri ) )
assertEquals ( summary . getLinks ( ) . get ( "action:open" ) , URI . create ( "http://myval" ) )
assertThat ( response . getStatus ( ) , is ( STATUS_OK ) )
assertTrue ( TEXT . equals ( groupList . asText ( ) ) )
assertTrue ( resp , resp . equals ( "Hello world!" ) || resp . equals ( MyRegularResource . class . getName ( ) ) )
assertEquals ( configVal , expectedVal )
assertEquals ( response . getStatus ( ) , Response . Status . OK . getStatusCode ( ) )
assertEquals ( e . getResponse ( ) . getStatus ( ) , 404 )
assertTrue ( e . getMessage ( ) . contains ( "could not resolve nested property [" + np + "]" ) )
assertTrue ( e . getMessage ( ) . contains ( "could not resolve nested property [" + np + "]" ) )
assertThat ( response . getStatus ( ) ) . isEqualTo ( 201 )
assertEquals ( HttpResponseCodes . SC_OK , response . getStatus ( ) )
assertEquals ( readings . get ( RestMockSimpleEntity . SAMPLE_SENSOR . getName ( ) ) , "foo4" )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( RESPONSE_ERROR_MSG , "z" , entity )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( response . getStatus ( ) , 200 )
assertEquals ( RESPONSE_ERROR_MSG , "z" , entity )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( "johnzon" , johnzon . getName ( ) )
assertEquals ( configValue , "\"1.0.0\"" )
assertEquals ( configValue , "1.0.0" )
assertTrue ( entity . getDisplayName ( ) . equals ( "New Name" ) )
assertEquals ( location . getSpec ( ) , "brooklyn.catalog:" + locationName + ":" + locationVersion )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( response . getContentAsString ( ) , "\"12345 frogs\"" )
assertEquals ( bytes . length , 13 )
assertThat ( new Parent ( ) . get ( ) ) . isEqualTo ( "from parent" )
assertEquals ( DefaultVariantProvider . INSTANCE , variantProvider . get ( toTest ) )
assertEquals ( "Name is inconsistent!" , name , record . getName ( ) )
assertEquals ( reloadCount . get ( ) , 1 )
assertEquals ( client ( ) . resource ( "/v1/server/config/foo.bar.baz" ) . get ( String . class ) , "quux" )
assertEquals ( e . getResponse ( ) . getStatus ( ) , 204 )
assertEquals ( response . getStatus ( ) , Response . Status . NOT_FOUND . getStatusCode ( ) )
assertEquals ( response . getStatus ( ) , Response . Status . NOT_FOUND . getStatusCode ( ) )
assertThat ( resourceDescription ( input ) , is ( "project, task, task2, note" ) )
assertThat ( resourceDescription ( input ) , is ( "project, task, task2, note" ) )
assertThat ( resourceDescription ( input ) , is ( "project, task, task2, note" ) )
assertEquals ( ( ( Map < ? , ? > ) result . get ( "x" ) ) . get ( "errorType" ) , NotSerializableException . class . getName ( ) )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertFalse ( result . toString ( ) . contains ( "error" ) , "Shouldn't have had an error, instead got: " + result )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertThat ( riskLimits . get ( "BTC-EUR_max_qty_per_trade" ) ) . isGreaterThan ( BigDecimal . ZERO )
assertEquals ( getServerUser ( server ) , TestSecurityProvider . USER )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertTrue ( GROOVY_INVOKED . get ( ) )
fail ( "Should have thrown exception; instead got " + command )
assertEquals ( "5" , result . get ( "result" ) )
assertEquals ( "5" , result . get ( "result" ) )
assertEquals ( Files . readLines ( pseudoBrooklynPropertiesFile , Charsets . UTF_8 ) , ImmutableList . of ( "abc=def" ) )
assertEquals ( Files . readLines ( pseudoBrooklynPropertiesFile , Charsets . UTF_8 ) , ImmutableList . of ( "abc=def" ) )
assertTrue ( e . toString ( ) . contains ( "1234 is not an ID of brooklyn node in this cluster" ) )
assertEquals ( javaProcess . getAttribute ( UsesJmx . JMX_PORT ) , ( Integer ) port )
assertEquals ( javaProcess . getAttribute ( UsesJmx . JMX_PORT ) , ( Integer ) port )
assertEquals ( customizer . generateHostname ( machine ) , "ip-1-2-3-4-" + machine . getId ( ) )
assertEquals ( customizer . generateHostname ( machine ) , "ip-4-3-2-1-" + machine . getId ( ) )
assertEquals ( customizer . generateHostname ( machine ) , "ip-4-3-2-1-" + machine . getId ( ) )
assertEquals ( customizer . generateHostname ( machine ) , "ip-none-" + machine . getId ( ) )
assertFalse ( app . getAttribute ( Attributes . SERVICE_UP ) )
assertFalse ( app . getAttribute ( Attributes . SERVICE_UP ) )
assertFalse ( replicaSet . getAttribute ( Startable . SERVICE_UP ) )
assertFalse ( replicaSet . getAttribute ( Startable . SERVICE_UP ) )
assertFalse ( entity . getAttribute ( Startable . SERVICE_UP ) )
assertFalse ( entity . getAttribute ( Startable . SERVICE_UP ) )
assertEquals ( 1 , result )
assertEquals ( usage , ImmutableSet . of ( ) )
assertEquals ( usage , ImmutableSet . of ( ) )
assertEquals ( jmxHelper . getAttribute ( jmxObjectName , "myattr" ) , "myval" )
assertEquals ( jmxHelper . getAttribute ( jmxObjectNameWithWildcard , "myattr" ) , "myval" )
assertEquals ( val , result )
assertEquals ( val , result )
assertEquals ( result , null )
assertSame ( o , ParamChecker . notNull ( o , "o" ) )
assertEquals ( result , null )
assertSame ( o , ParamChecker . notNull ( o , "o" ) )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( host . getPrivateAddresses ( ) , ImmutableSet . of ( "1.2.3.4" ) )
assertEquals ( fluff , result )
assertEquals ( fluff , result )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "*" ) )
assertEquals ( entity . getConfig ( strKey ) , "diffval" )
assertEquals ( "specified opstion not detected" , "foo" , args . getOption ( "opt" , "bar" ) )
assertEquals ( result , "myval" )
assertNotNull ( PatientCorrelationServiceSecuredFactory . getInstance ( ) )
assertEquals ( 0 , FilterContainer . getInstance ( ) . getFilters ( ) . size ( ) )
assertEquals ( i . size ( ) , i . negate ( ) . size ( ) )
assertEquals ( new JsonArray ( ) , JsonArray . of ( ) )
assertThat ( millis ( 1500 ) , is ( not ( equalTo ( seconds ( 2 ) ) ) ) )
assertEquals ( "Hello" , f . get ( ) )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( s . set , ImmutableSet . of ( 1 ) )
assertEquals ( ( ( Map ) l . get ( 0 ) ) . get ( "europe" ) , "uk" )
assertEquals ( ( ( Map ) l . get ( 0 ) ) . get ( "europe" ) , "uk" )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertEquals ( "a" , arr . get ( 0 ) )
assertEquals ( e , tothrow )
assertEquals ( e . getCause ( ) , tothrow )
assertEquals ( e , tothrow )
assertEquals ( e , tothrow )
assertEquals ( t . getMessage ( ) , detail )
assertEquals ( " " , BTools . getMtLvISS ( ) )
assertEquals ( t . getMessage ( ) , detail )
assertEquals ( t . getMessage ( ) , detail )
fail ( "should fail with invalid url: without protocol" )
fail ( "should fail with invalid url: without protocol" )
fail ( "should fail with invalid url: without protocol" )
fail ( "should fail with invalid url: without protocol" )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertEquals ( "(a=b)" , fb . toString ( ) )
assertEquals ( "(a=b)" , fb . toString ( ) )
assertEquals ( "(a=b)" , fb . toString ( ) )
assertEquals ( f2 . apply ( false ) , "false" )
assertNull ( locator . getService ( SuperSecretService . class ) )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertEquals ( s . set , ImmutableSet . of ( 1 ) )
assertEquals ( "o.e.p.MyClass" , LoggerFactory . createTag ( "org.example.project.MyClass" ) )
assertNull ( Architecture . getFromCpuInfo ( new File ( "no_such_file" ) ) )
assertNull ( Architecture . getFromCpuInfo ( new File ( "no_such_file" ) ) )
assertNull ( Architecture . getFromCpuInfo ( new File ( "no_such_file" ) ) )
assertThat ( SystemProperties . get ( "ro.product.device" ) ) . isEqualTo ( "robolectric" )
assertThat ( SystemProperties . get ( "ro.product.device" ) ) . isEqualTo ( "robolectric" )
assertNull ( JsonObject . mapFrom ( null ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableList . of ( 1 ) )
assertNull ( context . get ( "foo" , String . class ) )
assertNull ( context . get ( "foo" , String . class ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( TEST_SYMBOL , new MessageAnnotations ( messageAnnotationsMap ) ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( TEST_SYMBOL , new MessageAnnotations ( messageAnnotationsMap ) ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( TEST_SYMBOL , new MessageAnnotations ( messageAnnotationsMap ) ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( TEST_SYMBOL , new MessageAnnotations ( messageAnnotationsMap ) ) )
assertNull ( AmqpMessageSupport . getMessageAnnotation ( TEST_SYMBOL , new MessageAnnotations ( messageAnnotationsMap ) ) )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertNull ( o )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
fail ( "Could not load " + localPath + " when testing MavenRetriever: do a maven build with no integration tests first to ensure this is installed, then rerun" )
assertEquals ( 1 / FastMath . sqrt ( 2 * Math . PI ) , f . value ( 0 ) , EPS )
assertEquals ( 1 / FastMath . sqrt ( 2 * Math . PI ) , f . value ( 0 ) , EPS )
fail ( "Was not able to find reportproductoffering config file" + e )
assertEquals ( provider . getName ( ) , Constants . AMBARI_PLUGIN_NAME )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( s , ImmutableSet . of ( 1 ) )
assertThat ( Logging . sanitise ( "first line\nsecond line" ) , is ( "first line\\nsecond line" ) )
assertEquals ( "foo" , parameter . get ( getRequestKey ( EXCEPTION_DESCRIPTION ) ) )
assertEquals ( DOM_DATA_TREE_CHANGE_LISTENER , abstractDOMDataTreeChangeListenerRegistration . getInstance ( ) )
assertFalse ( result )
assertEquals ( IptablesCommands . firewalldServiceRestart ( ) , firewalldServiceRestart )
assertEquals ( IptablesCommands . firewalldServiceRestart ( ) , firewalldServiceRestart )
assertEquals ( IptablesCommands . firewalldServiceStart ( ) , firewalldServiceStart )
assertEquals ( IptablesCommands . firewalldServiceStatus ( ) , firewalldServiceStatus )
assertEquals ( IptablesCommands . firewalldServiceStop ( ) , firewalldServiceStop )
assertEquals ( IptablesCommands . firewalldServiceIsActive ( ) , firewalldServiceIsActive )
assertEquals ( IptablesCommands . cleanUpIptablesRules ( ) , cleanUptptablesRules )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertEquals ( MaybeFunctions . < String > get ( ) . apply ( Maybe . of ( "myval" ) ) , "myval" )
assertEquals ( testSize , set . size ( ) )
assertNull ( "escapeSql should handle null" , StringUtils . escapeSql ( null ) )
assertEquals ( LIB_MARKUP , lib . serialize ( ) )
TestUtils . assertEquals ( "xyz" + separator + "123" , path . of ( "xyz" ) . concat ( "123" ) . $ ( ) )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( StringFunctions . joiner ( "," ) . apply ( ImmutableList . of ( "a" , "b" , "c" ) ) , "a,b,c" )
assertEquals ( StringFunctions . joinerForArray ( "," ) . apply ( new Object [ ] { "a" , "b" , "c" } ) , "a,b,c" )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertEquals ( "string" , Strings . trim ( " string\t" ) )
assertEquals ( ZoneRulesProvider . refresh ( ) , false )
assertNull ( FileTimes . toFileTime ( null ) )
assertEquals ( "5" , result . get ( "result" ) )
assertEquals ( actual , "yy-mm-dd" )
fail ( )
assertThat ( thrown . getCause ( ) , is ( exception ) )
assertEquals ( style , FillingStyle . getStyleFromLatex ( style . getLatexToken ( ) ) )
assertThat ( apiPrivileges . size ( ) , is ( 0 ) )
assertTrue ( set instanceof HashSet , " set should be HashSet" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertNull ( url )
assertEquals ( values , map )
assertEquals ( expected , result )
assertThat ( driver . settings ( ) ) . isSameAs ( settings )
assertNull ( result )
assertEquals ( 1 , dtoSchemaFunction . apply ( dto ) . getValidationIssues ( ) . size ( ) )
assertEquals ( "TEST" , response . body ( ) . string ( ) )
assertEquals ( "TEST" , response . body ( ) . string ( ) )
assertEquals ( VARIABLE_TYPE , tested . getVariableType ( ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( Vector . fromMatrixMarket ( is ) , Vector . zero ( 0 ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( inputData , actualData )
assertEquals ( "KO" , reseponseLogin )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( "" , properties . getProperty ( "nifi.sensitive.props.key" ) )
assertThat ( con . getURL ( ) . toString ( ) ) . isEqualTo ( "http://localhost:" + port + "/app/tasklist/default/" )
assertEquals ( fn . apply ( "foo" ) , md5 ( ) . hashString ( "foo" , UTF_8 ) . asBytes ( ) )
assertThat ( restService . getResourceByName ( "v1/animal" ) , instanceOf ( AnimalResource_1_9 . class ) )
assertEquals ( new ArrayList < > ( ) , validationIssues )
assertEquals ( new ArrayList < > ( ) , validationIssues )
assertTrue ( config . isValid ( ) )
assertEquals ( "YAML configuration version 9999999 not supported.  Supported versions: 1, 2, 3" , e . getMessage ( ) )
assertEquals ( new ArrayList < > ( ) , validationIssues )
assertNull ( createSchema ( map , 1 ) . getName ( ) )
assertNull ( storeFileListFile . load ( false ) )
assertEquals ( metaBack , rawMeta )
assertThat ( modelId ) . isEqualTo ( ModelId . of ( "foobar" ) )
assertThat ( newArrayList ( emptyIntermediate . materialize ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , status )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertNotNull ( parameters )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertThat ( source . getSeekableSource ( ) . id ( ) , endsWith ( "test_file.pdf" ) )
assertEquals ( "pluck" , transformer . name ( ) )
assertEquals ( "Unable to ping to host" , exception . getMessage ( ) )
assertThat ( this . gradleBuild . build ( "kotlinVersion" ) . getOutput ( ) ) . contains ( "Kotlin version: none" )
assertFalse ( Files . isSymbolicLink ( fs . getPath ( path ) ) )
assertThat ( tdpException . getMessage ( ) , startsWith ( "An unexpected error occurred and we could" ) )
assertNotNull ( logger )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertNull ( result )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertEquals ( out . get ( Integer . toString ( i ) ) , Integer . toString ( i ) )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertEquals ( A , Formatting . unQuote ( "\"" + A + "\"" ) )
assertEquals ( value , builder . getBindVariableMap ( ) . get ( key ) )
assertEquals ( "value" , value )
assertEquals ( "value" , transformer . transform ( context ) )
assertFalse ( test . getPattern ( ) . matcher ( email ) . matches ( ) , email + " should not be valid" )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertFalse ( test . getPattern ( ) . matcher ( email ) . matches ( ) , email + " should not be valid" )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( expectedIndex , index )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( result , StatusConverter . convertToStringList ( Arrays . asList ( Status . values ( ) ) ) )
assertEquals ( this . provider , provider )
assertArrayEquals ( new byte [ 0 ] , bytes )
assertNotNull ( options )
assertNotNull ( options )
assertEquals ( this . provider , provider )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertThat ( transformer . getName ( ) , is ( name ) )
assertNotNull ( options )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringEOF ( ) , is ( "" ) )
assertNotNull ( resultaat )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( this . provider , provider )
assertEquals ( this . provider , provider )
assertEquals ( "XXX-00001" , numerator . format ( BigInteger . ONE ) )
assertThat ( exception . getMessage ( ) ) . startsWith ( "Don't know how to map `void` to the Neo4j Type System." )
assertThat ( metaData . asDMNModelInstrumentedBase ( ) ) . isEqualTo ( decision )
assertThat ( metaData . asDMNModelInstrumentedBase ( ) ) . isEqualTo ( decision )
assertEquals ( "biezhi" , request . attribute ( "name" ) )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertEquals ( "no-cache, no-store" , res . header ( "Cache-Control" ) )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertEquals ( "Shape[k=3 m=5]" , Shape . fromKM ( 3 , 5 ) . toString ( ) )
assertEquals ( "Shape[k=3 m=5]" , Shape . fromKM ( 3 , 5 ) . toString ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertNull ( path . getName ( ) )
assertThatExceptionOfType ( AccumuloElementConversionException . class ) . isThrownBy ( ( ) -> converter . getPropertiesFromTimestamp ( group , timestamp ) ) . extracting ( "message" ) . isNotNull ( )
assertNull ( path . getName ( ) )
assertThat ( exception . getMessage ( ) ) . startsWith ( "Don't know how to map `void` to the Neo4j Type System." )
assertNull ( path . getName ( ) )
assertNull ( path . getName ( ) )
assertThat ( exception . getMessage ( ) ) . startsWith ( "Don't know how to map `void` to the Neo4j Type System." )
assertTrue ( "Default data type should be auto: infer type from aggregated sources" , r . getDataType ( ) < 0 )
assertTrue ( "Default data type should be auto: infer type from aggregated sources" , r . getDataType ( ) < 0 )
assertTrue ( "Default data type should be auto: infer type from aggregated sources" , r . getDataType ( ) < 0 )
assertTrue ( "Default data type should be auto: infer type from aggregated sources" , r . getDataType ( ) < 0 )
assertEquals ( "The value is required." , message )
assertEquals ( "The validated map is empty" , ex . getMessage ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( pv . getKey ( ) ) . isEqualTo ( "k" )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertThat ( pv . getKey ( ) ) . isEqualTo ( "k" )
assertThat ( bean . getProperty ( ) ) . isEqualTo ( value )
assertEquals ( "Wrong file extension" , "File" , name )
assertNotNull ( resultaat )
assertThat ( "Instance of Builder expected." , builder . accountName ( accountName ) , IsInstanceOf . instanceOf ( Builder . class ) )
assertNotNull ( build )
assertEquals ( 1000L , builder . build ( ) . getReceiveTimeout ( ) )
assertThat ( precorrelation . getId ( ) ) . isEqualTo ( "id" )
assertThat ( configuration . showHelp ( ) , is ( true ) )
assertEquals ( "example.com" , uri . getHost ( ) )
assertEquals ( "example.com" , uri . getHost ( ) )
assertFalse ( resources . contains ( "/login" ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( CRS . decode ( "EPSG:4326" ) , parsePointSrsname ( "EPSG:4326" ) )
assertTrue ( i + 20 == next )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( "{}" , optionsBuilder . build ( options ) )
assertTrue ( INVALID_DOCUMENT_NPE_MESSAGE . equals ( exception . getMessage ( ) ) )
assertEquals ( "The value is required." , message )
assertEquals ( "The value is required." , message )
assertEquals ( INPUT_BYTES , b )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertThat ( skip , is ( 0L ) )
assertThat ( skip , is ( 0L ) )
assertEquals ( "\n    error(), actual: 3" , sb . toString ( ) )
assertEquals ( Thread . currentThread ( ) . getContextClassLoader ( ) , library . getClassLoader ( ) )
assertEquals ( "dubbo://127.0.0.1:" + availablePort + "" , result )
assertTrue ( keys . add ( encodeBytesToBase64String ( generateKey ( ) ) ) )
assertEquals ( ( int ) sut . get ( i ) , i )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertNull ( builder . getScheme ( ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertThat ( context . getExecutionData ( ExecutionStatusStore . class ) . get ( ) ) . isSameAs ( existingStore )
assertEquals ( list , content )
assertEquals ( list , content )
assertNotNull ( document . getRoot ( ) )
assertEquals ( "Crypting should result in same string" , TEST_STRING , CryptUtil . decryptWithLength ( is ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertThat ( provider . getImage ( suiteElement ) ) . isEqualTo ( ImagesManager . getImage ( RedImages . getFolderImage ( ) ) )
assertNull ( deletedPolicy )
assertThat ( URL . parse ( "http://example.com\\foo\\bar" ) . toString ( ) ) . isEqualTo ( "http://example.com/foo/bar" )
assertThat ( simplePushServerConfig . endpointPort ( ) , is ( 8889 ) )
assertThat ( token . getImage ( ) ) . isNull ( )
assertTrue ( q . toString ( ) . equals ( "[1.0 2.0 3.0 4.0]" ) )
assertNotNull ( encryptTable . getLogicColumnByCipherColumn ( "cipherColumn" ) )
assertEquals ( "echo" , result )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 0 , blockingChannel . write ( buffer , 0 , 1 ) )
assertNull ( request . getParameter ( "name" ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( str . property , sc2 . property )
assertEquals ( str . property , sc2 . property )
assertEquals ( str . property , sc2 . property )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertThat ( GemfireCache . wrap ( mockRegion ) . getName ( ) ) . isEqualTo ( "Example" )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( id , e . getId ( ) )
assertEquals ( 0 , l . size ( ) )
assertEquals ( expectedFeatures , effectedFeatures )
assertEquals ( expectedFeatures , effectedFeatures )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertTrue ( domain . check ( ) )
assertThat ( ObjectMapperFactory . createObjectMapper ( ) . readValue ( "{ }" , OpenAPIExpectationDTO . class ) , is ( new OpenAPIExpectationDTO ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( "84d89877f0d4041efb6bf91a16f0248f2fd573e6af05c19f96bedb9f882f7882" , HashUtils . sha256Hex ( "0123456789" ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertNull ( holder [ 0 ] )
assertNull ( holder [ 0 ] )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( false ) )
assertNotNull ( logger )
assertNotNull ( logger )
assertEquals ( notification . getTtd ( ) , Integer . valueOf ( - 1 ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertNull ( request . getEndpointRequest ( ) . getUser ( ) )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertEquals ( result . getStatus ( ) , ValidationResult . OK . getStatus ( ) )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertFalse ( visitorForAllTags ( ) . revisit ( gadget ( ) , null ) )
assertEquals ( "number of results" , 1 , preparedQuery . countEntities ( withDefaults ( ) ) )
assertEquals ( "120" , service . getConfigurationValueAsString ( "display.staleTimeout" , "190" ) )
assertNull ( testMock )
assertEquals ( "Value" , configuration . subset ( "subset" ) . getString ( "A" ) )
assertEquals ( 0 , changes . size ( ) , "Should be no changes" )
assertEquals ( 0 , changes . size ( ) , "Should be no changes" )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertThat ( getMuleHome ( ) . isPresent ( ) , is ( false ) )
assertThat ( getMuleHome ( ) . isPresent ( ) , is ( false ) )
assertEquals ( SIMPLE_PROPERTY_VALUE , _standardProperties . getProperty ( SIMPLE_PROPERTY_NAME ) )
assertEquals ( json . toString ( ) , fromJson . toString ( ) )
assertNull ( BesDAO . getEnglishOrFirst ( null ) )
assertThat ( registry . getCluster ( ) , equalTo ( "cluster" ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( expected , actual )
assertEquals ( 2.5d , evaluate ( values , 50 ) )
assertEquals ( 2.5d , evaluate ( values , 50 ) )
assertNotNull ( queryFactory . query ( ) )
assertEquals ( "generic-url" , configuration . evaluateToString ( "url" ) )
assertNotNull ( queryFactory . query ( ) )
assertEquals ( "generic-url" , configuration . evaluateToString ( "url" ) )
assertEquals ( TOTAL_COUNT , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( TOTAL_COUNT , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertNull ( customer )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( "Unable to find entry for 1234:1-1999" , exception . getMessage ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( AutodiscoverDnsClient . extractHostnameFromDnsSrv ( null ) , null )
assertEquals ( AutodiscoverDnsClient . extractHostnameFromDnsSrv ( null ) , null )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertSame ( "Cheking value." , value , new RowField ( value , DATA_TEXT ) . getValue ( ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertEquals ( "JavaSE-1.8" , manifest . getValue ( "Bundle-RequiredExecutionEnvironment" ) )
assertThat ( s . getValue ( ) , is ( minValue ) )
assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , fromString )
assertArrayEquals ( data , echoed )
assertEquals ( value , storedValue )
assertEquals ( 23 , new IntReply ( ":23" ) . getValue ( ) )
assertNotSame ( bs . getValue ( ) , b )
assertEquals ( 23 , new IntReply ( ":23" ) . getValue ( ) )
assertThat ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) ) . isFalse ( )
assertEquals ( "JavaSE-1.8" , manifest . getValue ( "Bundle-RequiredExecutionEnvironment" ) )
assertEquals ( "abc" , buffer )
assertEquals ( ".0x3412,0xFFFF" , writer . Close ( ) . toString ( ) )
assertNotNull ( this . bytes )
assertNotNull ( path )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertTrue ( C3p0DataSource . getConnection ( ) . isValid ( 1 ) )
assertEquals ( Order . ASCENDING , type . getOrder ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 0 , properties . size ( ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertThat ( getConfiguredTarget ( "//test:r" ) ) . isNotNull ( )
assertTrue ( server . findStringsInLogs ( "CFReference successfully bound resource factory" ) . size ( ) > 0 )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse OBJECT_GET('/some/path'): Unable to parse: OBJECT_GET('/some/path') due to: Path '/some/path' could not be found in HDFS" ) )
assertEquals ( null , actual )
assertEquals ( string , frame . getString ( ) )
assertThat ( webPushServerConfig . subscriptionMaxAge ( ) , is ( 4000L ) )
assertThat ( webPushServerConfig . subscriptionMaxAge ( ) , is ( 4000L ) )
assertThat ( webPushServerConfig . subscriptionMaxAge ( ) , is ( 4000L ) )
assertNotNull ( message )
assertThat ( diagramForElementRunnable . getResult ( ) ) . isEqualTo ( diagram )
assertThat ( diagramForElementRunnable . getResult ( ) ) . isEqualTo ( diagram )
assertThat ( diagramForElementRunnable . getResult ( ) ) . isEqualTo ( diagram )
assertNotNull ( message )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertNull ( result )
assertTrue ( result )
assertTrue ( result )
assertTrue ( result )
assertNull ( result )
assertTrue ( result )
assertTrue ( result )
assertFalse ( timeout . exit ( ) )
assertEquals ( params , new EncryptionParameters ( is ) )
assertEquals ( params , new EncryptionParameters ( is ) )
assertEquals ( VAN , BrpString . unwrap ( testInhoud . getVoorvoegsel ( ) ) )
assertEquals ( capacity ( ) . apply ( item ) , 2.0f )
assertEquals ( "bamboo" , create ( env ) . getProperty ( "CI_NAME" ) )
assertEquals ( this . displayName , displayName )
assertEquals ( "{foo,bar}" , result )
assertNull ( exception . getMessage ( ) )
assertEquals ( "{\"label\": \"label\", \"value\": \"value\"}" , serialize ( create ( val ) ) , true )
assertTrue ( name . contains ( Integer . toString ( year ) ) , "Date was not substituted: " + name )
assertThat ( Qualifier . forClassName ( null ) , is ( Qualifier . KEY_VALUE ) )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertNotNull ( result )
assertThat ( callback . getErrorMessage ( ) ) . isEqualTo ( errorMessage )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertEquals ( expectedPayload , actualPayload )
assertEquals ( i + 1 , t1 . get ( i ) . asInt4 ( ) )
assertNotSame ( tx1 , tx2 . get ( ) )
assertNotSame ( tx1 , tx2 . get ( ) )
assertNotSame ( tx1 , tx2 . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertArrayEquals ( exp , act )
assertEquals ( "read back string" , MESSAGE , message )
assertEquals ( Options . DEFAULT_PORT , nc . getServerInfo ( ) . getPort ( ) )
assertEquals ( 0 , FilesUncheck . copy ( FILE_PATH_EMPTY , NullOutputStream . INSTANCE ) )
assertEquals ( "The quick brown fox jumps over the lazy dog" , data . toString ( ) )
assertEquals ( "value" , toTest . getStatusMessage ( ) )
assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertEquals ( 0 , rootSerializer . serialize ( scbMap ) . length )
assertFalse ( this . marker . remove ( null ) )
assertEquals ( NO_PROGRESS_ON_SIMPLE_INTERACT_SERIALIZED , data . toString ( ) , "Data should serialize from default data." )
assertEquals ( baseStr + "[{true,false,false}]" , ToStringBuilder . reflectionToString ( array ) )
assertFalse ( ba . get ( 63 ) , "Bit 63 is 1" )
assertEquals ( "<p>2</p><p>3</p><p>4</p>" , result . toHtml ( ) )
assertEquals ( i , list . head ( ) . get ( ) )
assertArrayEquals ( new byte [ ] { JBBPCompiler . CODE_VAR , 0 } , compiled )
assertArrayEquals ( new byte [ ] { JBBPCompiler . CODE_VAR , 0 } , compiled )
assertThat ( commonSupertypes , hasItems ( Object . class . getName ( ) , Serializable . class . getName ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNotNull ( instance )
assertNull ( _Bytes . decompress ( _Bytes . compress ( null ) ) )
assertNull ( _Bytes . decompress ( _Bytes . compress ( null ) ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( e , ex . getCause ( ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( "Filter should have executed" , 1 , filter . filterCount )
assertEquals ( this . provider , provider )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( "value" , properties . getProperty ( "prop" ) )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertEquals ( serviceConfigImpl . getConfigurations ( ) , properties )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertEquals ( 0 , OclSets . excluding ( col1 , null ) . size ( ) )
assertEquals ( 13 , quotaList . size ( ) )
MatcherAssert . assertThat ( user . emails ( ) , Matchers . notNullValue ( ) )
MatcherAssert . assertThat ( user . emails ( ) , Matchers . notNullValue ( ) )
MatcherAssert . assertThat ( user . emails ( ) , Matchers . notNullValue ( ) )
assertThat ( tokenCookie . getPath ( ) ) . isEqualTo ( this . repository . getCookiePath ( ) )
assertEquals ( "[]" , personenInSteekproef . toString ( ) )
assertEquals ( "[]" , personenInSteekproef . toString ( ) )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
page . isComplete ( Assert :: assertTrue )
page . isComplete ( Assert :: assertTrue )
assertEquals ( "[]" , personenInSteekproef . toString ( ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertArrayEquals ( expResult , result )
assertArrayEquals ( expResult , result )
assertThat ( filteredRequest . getValue ( ) ) . isSameAs ( request )
assertEquals ( "Source" , victim . id ( ) . ownerIdentifier )
assertThat ( thrown . getMessage ( ) ) . startsWith ( "Unable to instanciate the rule 'rootRule': " )
assertTrue ( w . toString ( ) . contains ( "@Target({FIELD, METHOD})" ) )
assertTrue ( w . toString ( ) . contains ( "@Target({FIELD, METHOD})" ) )
assertThat ( "Instance of ConnectorDescriptor expected." , ProtocolDescriptorProviders . getDescriptor ( null ) , IsInstanceOf . instanceOf ( ProtocolDescriptor . class ) )
assertTrue ( w . toString ( ) . contains ( "@Target({FIELD, METHOD})" ) )
assertTrue ( w . toString ( ) . contains ( "@Target({FIELD, METHOD})" ) )
assertArrayEquals ( new String [ 0 ] , args )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( 1 , cts . size ( ) )
assertThat ( confCaptor . getValue ( ) , is ( CreatedExpiryPolicy . factoryOf ( new Duration ( TimeUnit . MINUTES , 2L ) ) ) )
assertNull ( CheckSum . parse ( null ) )
assertNotNull ( managerFactory )
assertNotNull ( managerFactory )
assertEquals ( "" , baos . toString ( ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( socketAddress , argumentCaptor . getValue ( ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( metacardOptional . isPresent ( ) , equalTo ( false ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( "Rule 'ruleName' should not match:\nfoo" , thrown . getMessage ( ) )
assertThat ( LambdaFactory . release ( classFileTransformer ) , is ( false ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( IDENT ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( IDENT ) )
assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringNul ( ) , is ( "" ) )
assertEquals ( written , key . length + value . length + Constants . SIZEOF_KV_LENGTH )
assertEquals ( PING , result )
assertTrue ( result )
assertNotNull ( victim . create ( ) )
assertEquals ( businessObjectDefinitionKeys , result )
assertEquals ( two , one )
assertFalse ( wasException )
assertEquals ( 1 , toTest . size ( ) )
assertEquals ( "{\"r\":\"x\",\"t\":\"hello\"}" , os . toString ( ) )
assertEquals ( "{\"r\":\"x\",\"t\":\"hello\"}" , os . toString ( ) )
assertEquals ( bigInteger , decoded )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( column . toString ( ) , "[loginname, nickname]" )
assertEquals ( 1 , map . size ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( ioException , new TemplatesIteratorException ( ioException ) . getCause ( ) )
assertEquals ( ioException , new TemplatesIteratorException ( ioException ) . getCause ( ) )
assertEquals ( converted , "e1" )
assertEquals ( converted , "e1" )
assertEquals ( ioException , new TemplatesIteratorException ( ioException ) . getCause ( ) )
assertEquals ( 4 , n )
assertFalse ( wasCalled . get ( ) )
assertFalse ( wasCalled . get ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertEquals ( converted , "e1" )
assertEquals ( converted , "e1" )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( "java.io.IOException: " + SERIALIZE_IO_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( e , ex . getCause ( ) )
assertNotNull ( user )
assertNotNull ( user )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( "8=FIX.4.49=8335=A49=021.01GW56=HNX34=052=xx:yy:zz369=098=0108=30553=021.01GW554=27216810=138" , messages . get ( 0 ) )
assertEquals ( FILTERED_COUNT , result . size ( ) )
assertEquals ( "8=FIX.4.49=8335=A49=021.01GW56=HNX34=052=xx:yy:zz369=098=0108=30553=021.01GW554=27216810=138" , messages . get ( 0 ) )
assertThat ( result , is ( SerdeFeatures . of ( UNWRAP_SINGLES ) ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( monitorCalled . getValue ( ) ) . isTrue ( )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( monitorCalled . getValue ( ) ) . isTrue ( )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( updateResponse ) . isNotNull ( )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertNull ( s . getStringLookup ( ) . lookup ( "X" ) )
assertThat ( listMetaData . getApprovedVersion ( ) ) . isEqualTo ( EXEMPLARY_CHANGE . getToVersion ( ) )
assertThat ( environmentVariables . getProperty ( "a.property" ) , is ( "value" ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( FILENAME , FilenameUtils . getName ( FILENAME_FULL_PATH ) )
assertTrue ( isExpected )
assertEquals ( "Expected and actual values should be the same." , defaultValue , Metrics . getAsString ( metrics , null , defaultValue ) )
assertEquals ( Collections . < ASTNode . Block < ? > > emptyList ( ) , parse ( "" ) )
assertEquals ( Collections . < ASTNode . Block < ? > > emptyList ( ) , parse ( "" ) )
assertEquals ( DataModifiedTimeGenerator . generateModifiedTime ( date ) , new SimpleDateFormat ( "yyyyMMddHHmmssSSS" ) . format ( date ) )
assertThat ( URIs . parse ( "https://example.com/test 123.png" ) . toString ( ) ) . isEqualTo ( "https://example.com/test%20123.png" )
assertNull ( new FileHandler ( ) . getFileName ( ) )
assertThat ( cc . get ( ) ) . isEqualTo ( 1 )
assertThat ( cc . get ( ) ) . isEqualTo ( 1 )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( bigInteger , decoded )
assertEquals ( 10 , users . size ( ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertThat ( props . get ( "nonexistingkey" ) ) . isEqualTo ( "existingvalue" )
assertEquals ( map , Loop . run ( "test/loop/confidence/modules/require_class.loop" ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertEquals ( "Bearer " + BEARER_TOKEN , headers . get ( AuthorizationConstants . SYNAPSE_AUTHORIZATION_HEADER_NAME ) [ 0 ] )
assertEquals ( map , Loop . run ( "test/loop/confidence/modules/require_class.loop" ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( 200 , response . code ( ) )
assertThat ( response . code ( ) , equalTo ( 200 ) )
assertTrue ( exception . getMessage ( ) . startsWith ( "Stream cannot be null" ) )
assertEquals ( "true" , result )
assertThat ( simplePushServerConfig . endpointPort ( ) , is ( 8889 ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( "3 toban sanooyin kadib" , t . format ( threeDecadesAgo ) )
assertNull ( graphIds )
assertNull ( variant . getLanguageString ( ) )
assertEquals ( "FATAL" , level . toString ( ) )
assertNull ( variant . getLanguageString ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertNull ( array )
assertEquals ( "Hello!" , expected [ 0 ] )
assertThat ( expected . getMessage ( ) , is ( "{\"ExceptionMessage\":null}" ) )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertTrue ( "The listener should not return false to let the system continue working" , listener . startup ( null ) )
assertEquals ( HttpStatus . OK , courseResponse . getStatusCode ( ) )
assertEquals ( "dsOrgId" , orgId . getValue ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( "\"binary\"" , result )
assertTrue ( e . getMessage ( ) . startsWith ( "invalid status: HTTP/1.1 404 Not Found;" ) )
assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( orignalName , victim . rename ( orignalName , null ) )
assertEquals ( response . readEntity ( String . class ) , OK_200 , response . getStatus ( ) )
assertThat ( bean . getProperty ( ) ) . isEqualTo ( value )
assertEquals ( Collections . emptyList ( ) , parameter . getValue ( ) )
assertEquals ( firefoxUA , request . userAgent ( ) )
assertEquals ( "" , result )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertEquals ( expectedResult , result , "Verifying avatar name" )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( ODataServiceVersion . V40 . toString ( ) , response . getHeader ( HttpHeader . ODATA_VERSION ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertThat ( span , span ( ) . withTag ( TestResource . TEST_ATTRIBUTE_KEY . getKey ( ) , TestResource . TEST_ATTRIBUTE_VALUE ) )
assertEquals ( newValue , presenter . getValue ( ) )
assertThat ( computerWithDetailsAfterStarting . getOffline ( ) ) . isFalse ( )
assertEquals ( bs1 , bs2 )
assertEquals ( data . getTick ( i ) . getClosePrice ( ) , quoteSMA . getValue ( i ) )
assertEquals ( i + 1 , counter . count )
assertEquals ( i + 1 , counter . count )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( "range" , e . getMessage ( ) )
assertEquals ( i + 1 , ( int ) it . previous ( ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( "range" , e . getMessage ( ) )
assertArrayEquals ( data , dest )
assertNull ( holder [ 0 ] )
assertEquals ( 1 , typedProperties . get ( "testKey" ) )
assertNull ( holder [ 0 ] )
assertTrue ( "Not null" , clone == null )
assertArrayEquals ( new String [ 0 ] , selectValuesMeta . getSelectName ( ) )
assertThat ( kyotoDb . get ( key ) , is ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 23 , 72 , 118 , - 25 , - 1 } ) )
assertEquals ( 0 , classMetadata . getInterfaceInternalNames ( ) . size ( ) )
assertEquals ( PROP_VAL , _context . getProperty ( PROP_NAME ) . getValue ( ) )
assertEquals ( PROP_VAL , _context . getProperty ( PROP_NAME ) . getValue ( ) )
assertEquals ( ip . getMultipleOf ( ) , new BigDecimal ( "3.0" ) )
assertEquals ( ip . getMultipleOf ( ) , new BigDecimal ( "3.0" ) )
assertEquals ( ip . getMultipleOf ( ) , new BigDecimal ( "3.0" ) )
assertEquals ( udids [ 0 ] , device . getUdid ( ) )
assertNull ( BranchUtils . getLastLog ( "test_branch" , repo ) )
assertEquals ( i + 1 , counter . count )
assertEquals ( 2 , ping . get ( ) )
assertEquals ( 2 , ping . get ( ) )
assertEquals ( i + 1 , counter . count )
assertEquals ( i + 1 , counter . count )
assertEquals ( 1 , typedProperties . get ( "testKey" ) )
assertEquals ( 1 , typedProperties . get ( "testKey" ) )
assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( e . getCause ( ) , ( hasMessage ( endsWith ( ", path: $.ORDERTIME" ) ) ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( Sampler . DEFAULT_SIZE , s . getSize ( ) )
assertEquals ( expectedString , UrlStringLookup . INSTANCE . lookup ( "UTF-8:" + uri . toString ( ) ) )
assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertEquals ( String . format ( "Max threads can't exceed %d" , MAX_THREADS ) , exception . getMessage ( ) )
assertFalse ( t . failed )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertTrue ( map . get ( null ) . equals ( 1 ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertThat ( getInfo ( ) . getMaximumWeight ( ) ) . isEqualTo ( MAX_VALUE )
assertFalse ( recorder . wasClosedInBackgroundResourceReleaserThread ( ) )
assertFalse ( recorder . wasClosedInBackgroundResourceReleaserThread ( ) )
assertEquals ( "png" , BasicAttachmentProvider . getFileExtension ( s ) )
assertEquals ( "png" , BasicAttachmentProvider . getFileExtension ( s ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertTrue ( startup )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertTrue ( startup )
assertTrue ( startup )
assertThat ( buildRule . getLog ( ) , containsString ( filename + " does not exist" ) )
assertThat ( buildRule . getLog ( ) , containsString ( filename + " does not exist" ) )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( 2 , listJobsResult . size ( ) )
assertEquals ( HASH_ERR , Blake2_DIGEST_NULL , HEX . encode ( result ) )
assertEquals ( "" , result . data ( ) )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertEquals ( "There was a problem reading the file: file_name.sl" , exception . getMessage ( ) )
assertEquals ( "Invalid signature marker: 1" , ex . getMessage ( ) )
assertThat ( getContextClassLoader ( ) , equalTo ( classLoader ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertFalse ( iterator :: hasNext )
assertEquals ( JSON_CONTENT_RGB , stringWriter . toString ( ) )
assertNotNull ( httpRequest )
assertThat ( e . getMessage ( ) , containsString ( "Unsupported browser type: netscape" ) )
assertTrue ( verifyUtil . isPassed ( ) , verifyUtil . getFailureMessage ( ) )
assertThat ( response . code ( ) , equalTo ( 200 ) )
assertThat ( filteredRequest . getValue ( ) . getRemoteAddr ( ) ) . isEqualTo ( "1.2.3.4" )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertEquals ( container , result )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertEquals ( container , result )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertNotNull ( validator )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertEquals ( container , result )
assertEquals ( in , out )
assertEquals ( dir . name ( ) , dir == UP || dir == DOWN , AxisDirections . isVertical ( dir ) )
assertEquals ( dir . name ( ) , dir == UP || dir == DOWN , AxisDirections . isVertical ( dir ) )
assertEquals ( o . getOpt ( ) , sortOrder . get ( i ) )
assertThat ( "Match on [" + inputPath + "]" , mappings . getMatched ( inputPath ) . getResource ( ) , is ( expectedResource ) )
assertEquals ( output , KubeUtil . sanitizeUserName ( input ) )
assertThat ( a . toString ( ) ) . isEqualTo ( "delicious taco" )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( createString ( BUFFER_SIZE - 3 ) + "oob" , wrapped . toString ( ) )
assertEquals ( createString ( BUFFER_SIZE - 3 ) + "oob" , wrapped . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( "https" , protocol )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( this . provider , provider )
assertNull ( mountStrategy . getDirectoryMapping ( ) . get ( workspaceId ) )
assertEquals ( "{\"\":\"test\"}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( actualResult , value )
assertEquals ( 3 , list . size ( ) )
assertEquals ( 0 , messageOutputs . size ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( servers . size ( ) , is ( vals . size ( ) ) )
assertThat ( updateResponse ) . isNotNull ( )
assertEquals ( field . getGenericType ( ) , target . getGenericType ( ) , field . toString ( ) )
assertEquals ( field . getGenericType ( ) , target . getGenericType ( ) , field . toString ( ) )
assertEquals ( "[[]]" , array . toString ( ) )
assertEquals ( input , expected , con . nativeSQL ( input ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 3 , class1 . testBagAsBag ( bag01 ) . size ( ) )
assertEquals ( 3 , class1 . testBagAsBag ( bag01 ) . size ( ) )
assertEquals ( userName , details . getUsername ( ) )
assertThat ( ChannelDraftBuilder . of ( "key" ) . build ( ) . getKey ( ) ) . isEqualTo ( "key" )
assertNull ( entity )
assertEquals ( "PROD_TYPE" , ModisFileReader . getTypeString ( null , product ) )
assertThat ( config . getSentinels ( ) . size ( ) , is ( 0 ) )
assertEquals ( "1" , OclOrderedSets . first ( col1 ) )
assertEquals ( 0 , OclSets . excluding ( col1 , null ) . size ( ) )
assertEquals ( "" , event . getField ( EventFieldName . COMMENT ) . getValue ( ) )
assertEquals ( "closeable.close(); was not stubbed" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Interledger UInt8 values may only contain up to 8 bits!" ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , "get" , matchers , new ArrayList < > ( ) ) )
assertEquals ( "Chuck" , victim . getText ( ) )
assertEquals ( "Page size must be greater than 0." , e . getMessage ( ) )
assertEquals ( "Still initializing" , e . getMessage ( ) )
assertNull ( retrievedPolicy )
assertNull ( retrievedPolicy )
assertNull ( retrievedUser1 )
assertNull ( retrievedUser1 )
assertNull ( group1 )
assertNull ( group1 )
assertFalse ( isWorkItemSet )
assertFalse ( isWorkItemSet )
assertEquals ( message , e . getMessage ( ) )
assertEquals ( message , e . getMessage ( ) )
assertNull ( entity )
assertNull ( keyStoreProvider )
assertEquals ( BouncyCastleProvider . PROVIDER_NAME , keyStoreProvider )
assertEquals ( HttpResponseCodes . SC_SERVICE_UNAVAILABLE , response . getStatus ( ) )
assertEquals ( 200 , resp . getStatus ( ) )
assertNotNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertNotNull ( request )
assertNotNull ( request )
assertEquals ( domain , cmd . electNewMaster ( ) )
assertTrue ( application . getVitamServer ( ) . isStarted ( ) )
assertEquals ( expectedId , loadSpec . getClass ( ) . getAnnotation ( JsonTypeName . class ) . value ( ) )
assertEquals ( expectedId , loadSpec . getClass ( ) . getAnnotation ( JsonTypeName . class ) . value ( ) )
assertNull ( networkDeviceHelper . getNicByPciDevice ( pciDevice , devices ) )
assertNull ( networkDeviceHelper . getNicByPciDevice ( pciDevice , devices ) )
assertThat ( request . getGoals ( ) ) . isEqualTo ( customGoals )
assertThat ( request . getGoals ( ) ) . isEqualTo ( customGoals )
assertEquals ( "ArrayList[{1,2}]" , logAdapter . asString ( collection ) )
assertEquals ( "" , s )
assertEquals ( "abc" , writer . toString ( ) )
assertEquals ( expected , getString ( writer ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( read )
assertEquals ( "C3S FRP Level 3 products" , plugIn . getDescription ( null ) )
assertNotNull ( method )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertEquals ( DOMAIN , bareJID )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertThat ( e . getMessage ( ) , containsString ( "FileHandler" ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( "foo" , featureId . getID ( ) )
assertEquals ( System . getProperty ( "user.home" ) + File . separator , cache1 . getPath ( ) )
assertNotNull ( store . get ( ) )
assertNotNull ( store . get ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertEquals ( "/p1/p2.jpg" , instance . getPath ( ) )
assertThat ( TEST_APR . getPath ( null ) , equalTo ( DEFAULT_ABSOLUTE_PATH ) )
assertEquals ( "MyEvent" , event . getId ( ) )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( expResult , result )
assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "____Content__Conclusion__" , laundry )
assertEquals ( "____Content__Conclusion__" , laundry )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( toString ( dest ) , data . substring ( 0 , halfDataLength ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "" , s )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertEquals ( "a" , stringAppender . toString ( ) )
assertTrue ( retCode == 0 )
assertEquals ( john , entity )
assertThat ( manager . getTransformerSchemaLocationForId ( "abc123" ) , is ( "" ) )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertNotNull ( tempMeta )
assertNotNull ( build )
assertThat ( properties . toJsonString ( ) ) . isEqualTo ( "{}" )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertFalse ( "Cought exception." , true )
assertThat ( AnnotationValue . ForConstant . of ( value ) . resolve ( ) , is ( value ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( i , e . getSource ( ) )
assertEquals ( i , e . getSource ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( 1 , res . join ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( ":str 0" , res . join ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertThat ( new Update ( ) . set ( "key" , "value" ) . isolated ( ) . toString ( ) ) . contains ( "\"$isolated\"" )
assertEquals ( ":x" , res . join ( ) )
assertThat ( new Update ( ) . set ( "key" , "value" ) . isolated ( ) . toString ( ) ) . contains ( "\"$isolated\"" )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( ":x" , res . join ( ) )
assertNotNull ( result )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertThat ( result . toCompletableFuture ( ) . join ( ) ) . isEqualTo ( 5 )
assertThat ( extractHandler ( ) instanceof EternalImmediate ) . isTrue ( )
assertThat ( from . toString ( ) ) . isEqualTo ( ( Object ) "\"0\"" )
assertEquals ( roleNames . toString ( ) , 0 , roleNames . size ( ) )
assertEquals ( roleNames . toString ( ) , 0 , roleNames . size ( ) )
assertEquals ( "length of test files" , 1 , testFiles . length )
assertEquals ( "length of test files" , 1 , testFiles . length )
assertNull ( object )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertThat ( called . get ( ) ) . isTrue ( )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( getData ( ) . length , array . length )
assertThat ( called . get ( ) ) . isTrue ( )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertThat ( called . get ( ) ) . isTrue ( )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertEquals ( "[]" , CollectionUtils . trim ( list , 2 ) . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "[]" , CollectionUtils . trim ( list , 2 ) . toString ( ) )
assertEquals ( "[STATEFP, COUNTYFP, COUNTYNS, AFFGEOID, GEOID, NAME, LSAD, ALAND, AWATER]" , fieldName . toString ( ) )
assertEquals ( data . get ( data . size ( ) - 1 ) . getField ( 0 ) . toString ( ) , result . getField ( 0 ) . toString ( ) )
assertEquals ( "foo://bar" , l . getValue ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( toString ( dest ) , "!!" + data . substring ( 0 , halfDataLength ) )
assertEquals ( "[[a, b, c]]" , successCollections . toString ( ) )
assertArrayEquals ( new Boolean [ ] { null , true , false , false , true } , ( Boolean [ ] ) property . getValue ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertArrayEquals ( destArray , origin )
assertEquals ( "Products are not the same" , Arrays . toString ( Product . get ( ) ) , Arrays . toString ( products ) )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertEquals ( "" , result . data ( ) )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertThat ( row ) . withColumn ( "myarray" ) . hasValueInstanceOf ( Integer [ ] [ ] . class )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertTrue ( cache . getSize ( ) < N )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertTrue ( ( end - start ) > 150 )
assertThat ( v2 . getErrors ( ) , is ( notNullValue ( ) ) )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertEquals ( 1 , result )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertNull ( myBean )
assertEquals ( CliConstants . DEFAULT_SERVLET_ZONE . value ( ) , config . getServletZone ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertTrue ( AuthorisationDecision . from ( rbac , c -> Optional . of ( RWX ) ) . isAllowed ( Constraints . single ( foo ) ) )
assertTrue ( AuthorisationDecision . from ( rbac , c -> Optional . of ( RWX ) ) . isAllowed ( Constraints . single ( foo ) ) )
assertTrue ( config . getSyncStateStorage ( ) instanceof InMemoryUserFolderSyncStateStorage )
assertEquals ( 2 , score )
assertNotNull ( createInitializer ( ) . get ( ) , "No managed object" )
assertFalse ( field . getBit ( i ) )
assertThat ( HugePageUtils . getHugePages ( base ) . size ( ) , is ( 0 ) )
assertNotNull ( createInitializer ( ) . get ( ) , "No managed object" )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertEquals ( BigDecimal . ONE , value )
assertEquals ( LocalDateTime . MIN , clock . min ( ) )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertEquals ( BigDecimal . ONE , value )
assertNotNull ( createInitializer ( ) . get ( ) , "No managed object" )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertTrue ( target . initContractCalled )
assertEquals ( LocalDateTime . MIN , clock . min ( ) )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertTrue ( target . initContractCalled )
assertNotNull ( createInitializer ( ) . get ( ) , "No managed object" )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertEquals ( LocalDateTime . MIN , clock . min ( ) )
assertEquals ( 4 , calculator . add ( 2 , 2 ) )
assertEquals ( 0L , new SignedInt128 ( ) . longValue ( ) )
assertThat ( testedOptional ) . isPresent ( )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( "incorrect valueOf" , id , ID_A )
assertThat ( watermark . getDefaultStyleSheet ( ) , is ( notNullValue ( ) ) )
assertThat ( watermark . getDefaultStyleSheet ( ) , is ( notNullValue ( ) ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertNotSame ( b , GryoMapper . build ( ) )
assertThat ( e . getMessage ( ) , Matchers . containsString ( "Insufficient configured threads" ) )
assertEquals ( "Wrong list item output" , "<li>Text</li>" , printer . item ( DUMMY_TEXT ) )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertEquals ( "Message content" , s )
assertEquals ( version . getVersion ( ) . hashCode ( ) , version . hashCode ( ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertThat ( interactionEvent . getIdentifier ( ) , is ( identifier ) )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertEquals ( i1 , i2 )
assertNotNull ( build )
assertNotNull ( build )
assertThat ( ofy ( ) . load ( ) . key ( k ) . now ( ) ) . isNull ( )
assertNotNull ( plugin )
assertNotNull ( plugin )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertEquals ( integer , NumericFunctions . toInteger ( "23" ) )
assertEquals ( Double . MAX_VALUE , v . getValue ( ) , 0.00000001 )
assertEquals ( expected , actual )
assertNotNull ( ep2 )
assertThat ( context . getPersistentEntity ( String . class ) ) . isNull ( )
assertNotNull ( ep2 )
assertThat ( result . endsWith ( target . getType ( ) ) , is ( true ) )
assertEquals ( "property" , theProperty . getName ( ) )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( e . getMessage ( ) , containsString ( "externalTaskId is null" ) )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertEquals ( "Wrong number of elements deserialized." , testData . length , num )
assertEquals ( "Wrong number of elements deserialized." , testData . length , num )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( 1 , result )
coverThePrivateConstructor ( Assert . class )
coverThePrivateConstructor ( Assert . class )
assertEquals ( future , future . map ( i -> i + 1 ) )
assertEquals ( future , future . map ( i -> i + 1 ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertEquals ( 1L , ReflectionUtil . getFieldValue ( address , Address . class , "notexisting" ) )
assertEquals ( 1L , ReflectionUtil . getFieldValue ( address , Address . class , "notexisting" ) )
assertNull ( map . get ( null ) )
assertTrue ( testee . test ( null ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( VERSION . get ( ) , cache . cacheVersion ( ) )
fail ( "Should throw an exception here" )
fail ( "Should throw an exception here" )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( dummyConfigurationConfigLoader . getTestConfig ( ) . getSomeDummyAttribute ( ) , CoreMatchers . is ( "someValue" ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertEquals ( "!ys123\n" , sWriter . toString ( ) )
assertEquals ( new StringValue ( "test" ) , testString )
assertEquals ( e . getMessage ( ) , expectedMessage , format ( "Expected exception message '%s' to match '%s'" , e . getMessage ( ) , expectedMessage ) )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertThat ( supplier . get ( ) , equalTo ( Optional . < AccessToken > absent ( ) ) )
assertNotNull ( queryFactory . replace ( QSurvey . survey ) )
assertNotNull ( queryFactory . replace ( QSurvey . survey ) )
assertNotNull ( queryFactory . replace ( QSurvey . survey ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNull ( request . getContentType ( ) )
assertEquals ( "Exception message" , exception . getMessage ( ) )
assertEquals ( import1 , import2 )
assertEquals ( import1 , import2 )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertEquals ( expected , actual )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertEquals ( downloadFolder , cut . getDownloadFolder ( ) , "Incorrect location" )
assertEquals ( HttpStatus . OK , responseEntity . getStatusCode ( ) )
assertThat ( objectFactory . commandMBeanNameProvider ( ) , is ( notNullValue ( ) ) )
assertTrue ( count <= 2 , "Some temp files from old tests are found" )
assertEquals ( string , encoding . decode ( encoded ) )
assertEquals ( "get [" + i + ']' , values [ i + OFFSET ] , test . get ( i ) , EPSILON )
assertNotNull ( retrieved )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertNull ( expectedEof )
assertNull ( expectedEof )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertTrue ( configuration != null )
assertTrue ( e instanceof KarateException )
assertTrue ( e instanceof KarateException )
assertTrue ( configuration != null )
assertTrue ( configuration != null )
assertNotNull ( actual )
assertThat ( klassTypeElement . findDirectSuperclassOf ( ParentClass . class ) , notNullValue ( ) )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertEquals ( integerList . size ( ) , 4 )
assertTrue ( v instanceof StringValue )
assertEquals ( new StringValue ( "test" ) , testString )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( ersGeneral . recognize ( new FooException ( ) ) . get ( ) . getReason ( ) , is ( "pre: foo" ) )
assertThat ( proxy . getMessage ( ) , equalTo ( "java.lang.Exception: null" ) )
assertThat ( getExecutionFolder ( ) . exists ( ) , is ( true ) )
assertNotNull ( tree )
assertEquals ( Integer . valueOf ( 23 ) , Integer . class . cast ( obj ) )
assertEquals ( Integer . valueOf ( 23 ) , Integer . class . cast ( obj ) )
assertEquals ( 0 , results . size ( ) )
assertNull ( idl )
assertNull ( idl )
assertNull ( idl )
assertEquals ( Test . class . getName ( ) , slurp )
assertEquals ( "baeldung.com" , url . getHost ( ) )
assertThat ( expected . getName ( ) ) . isEqualTo ( "group" )
assertEquals ( "expected" , expected . getMessage ( ) )
assertEquals ( "expected" , expected . getMessage ( ) )
assertEquals ( "invalid netid" , "tcp" , InetSocketAddresses . tcpNetidOf ( address ) )
assertEquals ( "invalid netid" , "tcp" , InetSocketAddresses . tcpNetidOf ( address ) )
assertNotNull ( instance )
assertEquals ( "" , string0 )
assertEquals ( "" , string0 )
assertEquals ( "\\b \\t \\n \\f \\r default" , controlString )
assertEquals ( "A" , colName ( stream . toByteArray ( ) ) )
assertEquals ( new StringValue ( "test" ) , testString )
assertEquals ( new StringValue ( "TEST123_!" ) , testString )
assertFalse ( tokenizer . next ( testString ) )
assertTrue ( tokenizer . next ( testString ) )
assertFalse ( tokenizer . next ( testString ) )
assertTrue ( e . getMessage ( ) . contains ( "empty" ) )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( "ab" , getCompleted ( future ) )
assertThat ( future . join ( ) ) . isEqualTo ( "hello" )
assertThat ( "Instance of IMqttActionListener expected" , Listeners . toListener ( null ) , IsInstanceOf . instanceOf ( IMqttActionListener . class ) )
assertEquals ( "Not supported" , exception . getMessage ( ) )
assertEquals ( "Not supported" , exception . getMessage ( ) )
assertThat ( AsyncUtils . toSync ( future ) ) . isEqualTo ( "value" )
assertThat ( AsyncUtils . toSync ( future ) ) . isEqualTo ( "value" )
assertThat ( AsyncUtils . toSync ( future ) ) . isEqualTo ( "value" )
assertThat ( combined . size ( ) , is ( 2 ) )
assertEquals ( Thread . State . WAITING , inc . getState ( ) )
assertNotNull ( GeoPackage . open ( newFile ( "foo.gpkg" ) ) )
assertEquals ( 1 , beans . size ( ) )
assertEquals ( options . getOptions ( ) . get ( "tags" ) , "foo bar baz" )
assertEquals ( options . getOptions ( ) . get ( "tags" ) , "foo bar baz" )
assertEquals ( Integer . valueOf ( 0 ) , ecommerceAction . getParameter ( ) . get ( getRequestKey ( ACTION_GOAL_ID ) ) )
assertEquals ( UUID . fromString ( test ) , UUIDUtility . parseFromString ( test ) . orElse ( null ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertNotNull ( cfg )
assertNotNull ( image )
assertNotNull ( image )
assertEquals ( "test" , ioe . getMessage ( ) )
assertEquals ( "FileSystem not obtained correctly via Path" , fileSystem , path . getFileSystem ( ) )
assertEquals ( location , GcsDataflowProjectClient . toGcsLocationUri ( location ) )
assertFalse ( succeeded )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertEquals ( mockedAuthenticationMethod , result )
assertTrue ( succeeded )
assertEquals ( mockedAuthenticationMethod , result )
assertEquals ( mockedAuthenticationMethod , result )
assertThat ( ClassFileLocator . NoOp . INSTANCE . locate ( FOO ) . isResolved ( ) , is ( false ) )
assertEquals ( string , encoding . decode ( encoded ) )
assertEquals ( FIRST + "\r\n" + LAST , this . read . toString ( ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertEquals ( "VerhuizingVerzoek" , format . getBerichtType ( ) )
assertThat ( projector . project ( object ) ) . isEqualTo ( object )
assertNull ( conf . get ( TokenCache . MAPREDUCE_JOB_CREDENTIALS_BINARY ) )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertEquals ( "lorem_ipsum_dolor_sit" , action . test_transformByLine ( "lorem.ipsum_dolor.sit" ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "lorem_ipsum_dolor_sit" , action . test_transformByLine ( "lorem.ipsum_dolor.sit" ) )
assertEquals ( "lorem_ipsum_dolor_sit" , action . test_transformByLine ( "lorem.ipsum_dolor.sit" ) )
assertThat ( new StringLengthComparator ( ) . compare ( "Long" , "Long" ) ) . isEqualTo ( 0 )
assertThat ( new StringLengthComparator ( ) . compare ( "Long" , "Long" ) ) . isEqualTo ( 0 )
assertThat ( repository ) . isNotNull ( )
assertThat ( node . getValue ( ) , is ( 17 ) )
assertNull ( owner . borrow ( ) )
assertTrue ( error )
assertThat ( dataType . getMediaType ( ) , equalTo ( JSON ) )
assertThat ( underTest . getPort ( ) ) . isEqualTo ( 9999 )
assertNotNull ( ep2 )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( string , serializeAndDeserialize ( string ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( dummyConfigurationConfigLoader . getTestConfig ( ) . getSomeDummyAttribute ( ) , CoreMatchers . is ( "someValue" ) )
assertEquals ( "some street" , mp . getValue ( ) )
assertEquals ( expectedRestriction , restriction )
assertEquals ( expectedRestriction , restriction )
assertThat ( builtObjectTwo . attributesToProject ( ) , is ( Arrays . asList ( overwrite ) ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Fields . fields ( ( String [ ] ) null ) )
assertThat ( result ) . isEqualTo ( testValue )
assertThat ( result ) . isEqualTo ( testValue )
assertThat ( serialization . deserializeRecords ( serialized ) ) . isEqualTo ( users )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 3 , tryCount [ 0 ] )
assertNull ( plan . getLimit ( ) )
assertThat ( actual ) . hasSize ( 9 )
assertEquals ( QueryRewriter . TRUE_CRITERIA , actual )
assertThat ( underTest . getPort ( ) ) . isEqualTo ( 9999 )
assertNull ( plan . getLimit ( ) )
assertThat ( actual ) . hasSize ( 9 )
assertEquals ( QueryRewriter . TRUE_CRITERIA , actual )
assertThat ( underTest . getPort ( ) ) . isEqualTo ( 9999 )
assertEquals ( expected , IO . readIntoString ( new StringReader ( expected ) ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( 0 , ( int ) d . removeFirst ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( 0 , bytes . length )
assertNull ( object )
assertThatRowCount ( is ( Math . min ( EMP_SIZE , DEPT_SIZE ) ) , is ( 0D ) , is ( 40D ) )
assertThatRowCount ( is ( Math . min ( EMP_SIZE , DEPT_SIZE ) ) , is ( 0D ) , is ( 40D ) )
assertNotNull ( collected )
assertNotNull ( collected )
assertEquals ( ctx . getInt ( "myKey" ) . intValue ( ) , 11 )
assertEquals ( "test" , param . getValue ( ) )
assertTrue ( "There should be wsdls to compare" , files != null && files . length > 0 )
assertTrue ( reader . skipFirstLineAsHeader )
assertTrue ( items . getType ( ) . getTypeClass ( ) == Item . class )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertEquals ( "{}" , map . toString ( ) )
assertEquals ( "{}" , map . toString ( ) )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertNotNull ( moreLikeThisQuery )
assertNotNull ( this . model . findNodesByID ( ctxVars . get ( "node" ) ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertNotNull ( cs . getEndpoint ( ) )
assertEquals ( executorService , executor . getExecutorService ( ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( path . getName ( ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( path . getName ( ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( set . dcs ( ) ) . isEmpty ( )
assertThat ( sut . get ( ) ) . isEqualTo ( 9L )
assertThat ( sut . get ( ) ) . isEqualTo ( 9L )
assertThat ( sut . get ( ) ) . isEqualTo ( 9L )
assertThat ( sut . get ( ) ) . isEqualTo ( 9L )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertThat ( sut . get ( ) ) . isEqualTo ( 9L )
assertNull ( PropertyFactory . createProperty ( null ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( 5 , ( ( Entity ) beanMap . getBean ( ) ) . getId ( ) )
assertThat ( faker . food ( ) . measurement ( ) , matchesRegularExpression ( "[A-Za-z1-9/ ]+{2}" ) )
assertEquals ( node , instance . getRealNode ( ) )
assertTrue ( called . get ( ) )
assertThat ( allProperties . size ( ) , is ( 2 ) )
assertThat ( results . size ( ) , is ( 0 ) )
assertThat ( results . size ( ) , is ( 0 ) )
assertNotNull ( queryFactory . replace ( QSurvey . survey ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( "The validateArgTypes() method is buggy." , sf . getReturnType ( ) , sf . validateArgTypes ( argTypes ) )
assertEquals ( "test" , PacketUtils . readNullTerminatedString ( buf ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThatPlaceholderCanBeReplaced ( "logFilename" )
assertThat ( mappings . add ( "foo" , "bar" ) ) . isNull ( )
assertNull ( test . merge ( ) )
assertThatPlaceholderCanBeReplaced ( "logFilename" )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertArrayEquals ( new String [ 0 ] , selectValuesMeta . getSelectName ( ) )
assertArrayEquals ( new String [ 0 ] , selectValuesMeta . getSelectName ( ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( null , new SplitAndCountConverter ( config ( "" ) ) . convert ( "foo" ) )
assertEquals ( null , new SplitAndCountConverter ( config ( "" ) ) . convert ( "foo" ) )
assertNull ( response )
assertNull ( response )
assertTrue ( converter . convertFrom ( null ) )
assertTrue ( converter . convertFrom ( null ) )
assertEquals ( 1 , res )
assertThat ( isoDep . transceive ( new byte [ 0 ] ) ) . isEqualTo ( new byte [ ] { 1 , 2 , 3 } )
assertThat ( isoDep . transceive ( new byte [ 0 ] ) ) . isEqualTo ( new byte [ ] { 1 , 2 , 3 } )
assertThat ( environment . jersey ( ) . getResourceConfig ( ) . getClasses ( ) ) . contains ( MultiPartFeature . class )
assertEquals ( Locale . getDefault ( ) . getLanguage ( ) , prefs . getLang ( ) . getLanguage ( ) )
assertTrue ( base . toString ( ) . startsWith ( "FileInfo[" ) , "toString didn't start with class name + [" )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( NoEntity . class . getSimpleName ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( givenLocalTime ) . isAfter ( LocalTime . of ( 1 , 0 ) ) . hasSameHourAs ( LocalTime . of ( 12 , 0 ) )
assertNotNull ( getWithTimeout ( preCommit ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( "" , result )
assertEquals ( 1 , result . get ( ) )
assertEquals ( 1 , result . get ( ) )
assertNull ( lf . get ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( givenLocalTime ) . isAfter ( LocalTime . of ( 1 , 0 ) ) . hasSameHourAs ( LocalTime . of ( 12 , 0 ) )
assertThat ( response . getBody ( ) ) . isEqualTo ( "Jim Lahey" )
assertTrue ( en . getConfiguration ( ) . isSecure ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expected , actual )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( of ( 1 , 2 , 3 , 4 ) . count ( ) ) . isEqualTo ( 2 )
assertEquals ( "The roles must be empty when access is precluded." , t . getLocalizedMessage ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( "name" , name )
assertThat ( expected . getMessage ( ) , containsString ( "Serialized class com.alibaba.dubbo.common.model.Person must implement java.io.Serializable" ) )
assertThat ( expected . getMessage ( ) , containsString ( "Serialized class com.alibaba.dubbo.common.model.Person must implement java.io.Serializable" ) )
assertEquals ( 0.625 , Mean . of ( b ) . value ( ) , 10e-10 )
assertEquals ( "[query_flow_weight.index_name] must not be null" , e . getMessage ( ) )
assertEquals ( subject , copy )
assertArrayEquals ( expectedSorted , data )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertNotNull ( response )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertEquals ( point , FX2Geometry . toPoint ( Geometry2FX . toFXPoint ( point ) ) )
assertTrue ( flushCalled [ 0 ] )
assertTrue ( path . isEmpty ( ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertTrue ( configuration != null )
assertEquals ( 2 , map . size ( ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertNotNull ( array . decodeJsonArray ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( "?" , new TypeExtends ( Types . OBJECT ) . getGenericName ( false ) )
assertEquals ( expectedResult , class1 . testRejectIteratorExp01 ( ) )
assertEquals ( expected , i3 )
assertEquals ( new Money ( M2_AMOUNT * multiplier ) , m2 . multiply ( multiplier ) )
assertThat ( Util . subtract ( m , n ) ) . isNull ( )
assertNotNull ( toString )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertNotNull ( plugin )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNotNull ( plugin )
assertThat ( handle . getResult ( ) ) . isEqualTo ( "result" )
assertFalse ( buildFactory ( ) . validateStrictly ( ) )
assertTrue ( action . get ( ) )
assertEquals ( 11 , lambda . get ( ) )
assertEquals ( "acceptablelanguages:*:" , response )
assertEquals ( "name" , name )
assertEquals ( 2 , resultHandler . count )
assertEquals ( "item0" , described . get ( "someList" ) )
assertNull ( v )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( "message" , message )
assertFalse ( "Directory created" , dir . exists ( ) )
assertThat ( getEmptyVulnerabilityUpdateStatus ( RequestStatus . FAILURE ) . requestStatus , is ( RequestStatus . FAILURE ) )
assertThat ( getEmptyVulnerabilityUpdateStatus ( RequestStatus . FAILURE ) . requestStatus , is ( RequestStatus . FAILURE ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertThat ( getEmptyVulnerabilityUpdateStatus ( RequestStatus . FAILURE ) . requestStatus , is ( RequestStatus . FAILURE ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertThat ( ddl , equalTo ( Ddl . builder ( ) . build ( ) ) )
assertEquals ( "This should be a [hyperlink]" , translate ( src ) )
assertEquals ( "i: " + i , 1 , pow )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertTrue ( evaluator . pow ( new Interval ( ) , 4 ) . isUndefined ( ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertNull ( idl )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertNull ( ConfigUtils . getOrNull ( config , "hello" ) )
assertNotNull ( params )
assertEquals ( target . size ( ) , 4 )
assertThat ( ex . get ( ) ) . isInstanceOf ( IllegalStateException . class )
assertFalse ( called . get ( ) , "Callback should not be run" )
assertEquals ( mode , DefaultBucketSettings . builder ( ) . compressionMode ( mode ) . build ( ) . compressionMode ( ) )
assertEquals ( mode , DefaultBucketSettings . builder ( ) . compressionMode ( mode ) . build ( ) . compressionMode ( ) )
assertEquals ( mode , DefaultBucketSettings . builder ( ) . compressionMode ( mode ) . build ( ) . compressionMode ( ) )
fail ( "Expected write to throw an exception." )
assertTrue ( underTest . completable ( ) instanceof ConcurrentCompletable )
assertEquals ( value , buffer . getByte ( i ) )
assertEquals ( 0 , buffer . getByte ( i ) )
assertEquals ( expectedValue . getByte ( j ) , value [ j ] )
assertEquals ( expectedValue . getByte ( j ) , value [ j ] )
assertEquals ( expectedValue . getByte ( j ) , value [ j ] )
assertEquals ( "Hello, World!" , buffer . toString ( CharsetUtil . ISO_8859_1 ) )
assertEquals ( buffer . order ( ) , buffer . nioBuffer ( ) . order ( ) )
assertEquals ( 42 , featureCollection . size ( ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertNotNull ( boot . getServiceDiscovery ( ) )
assertEquals ( d_words1 . get ( i ) , d_dict . sequence ( i + 1 ) )
assertTrue ( createDiffSet ( ) . isEmpty ( ) )
assertTrue ( createDiffSet ( ) . isEmpty ( ) )
assertThat ( itemStatus . getGlobalStatus ( ) ) . isEqualTo ( StatusCode . FATAL )
fail ( "Should not be able to rename to an existing file" )
assertThat ( buf ) . isNotNull ( ) . hasReadableBytes ( 4 ) . containsInt ( 0x00000304 ) . hasNoRemainingReadableBytes ( )
assertThat ( buf ) . isNotNull ( ) . hasReadableBytes ( 4 ) . containsInt ( 0x00000304 ) . hasNoRemainingReadableBytes ( )
assertThat ( buf ) . isNotNull ( ) . hasReadableBytes ( 4 ) . containsInt ( 0x00000304 ) . hasNoRemainingReadableBytes ( )
assertEquals ( new Integer ( 2 ) , class1 . testAnyIteratorExp01 ( ) )
assertEquals ( new Integer ( 2 ) , class1 . testAnyIteratorExp01 ( ) )
assertNotNull ( aaaFilterChain )
assertEquals ( 5 , target . get ( ) )
assertEquals ( credentials , actualCredentials )
assertThat ( result . getTime ( ) , is ( 65000L ) )
assertEquals ( "" , OperationItem . paddedValueOfLength ( 0 ) )
assertTrue ( tradeService . cancelOrder ( new DefaultCancelOrderParamId ( ) ) )
assertArrayEquals ( new int [ ] { 0 , 1 } , IntStreams . range ( 2 ) . toArray ( ) )
assertEquals ( SimpleGroupPath . valueOf ( "foo" ) , resolver . apply ( ctx ) . map ( p -> SimpleGroupPath . valueOf ( p . getPath ( ) ) ) . get ( ) )
assertArrayEquals ( new int [ ] { 0 , 1 } , IntStreams . range ( 2 ) . toArray ( ) )
assertArrayEquals ( new int [ ] { 0 , 1 } , IntStreams . range ( 2 ) . toArray ( ) )
assertEquals ( 2 , intSet2 . size ( ) )
assertThat ( expected . getMessage ( ) , is ( "Failed to extract Name from media type 'application/json'" ) )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertThat ( expected . getMessage ( ) , is ( "Failed to extract Name from media type 'application/json'" ) )
assertEquals ( "RectangularROI cannot have negative width" , ex . getMessage ( ) )
assertEquals ( "Hello" , Futures . getNow ( future ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( repository ) . isNotNull ( )
assertFalse ( isTimeoutSet )
assertFalse ( "Unexpected exception was thrown." , gotException )
assertFalse ( "Unexpected exception was thrown." , gotException )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertEquals ( 1 , repository . count ( ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
order -> assertThat ( order . getCustomerGroup ( ) ) . isEqualTo ( customerGroup . toReference ( ) ) )
order -> assertThat ( order . getCustomerGroup ( ) ) . isEqualTo ( customerGroup . toReference ( ) ) )
order -> assertThat ( order . getCustomerGroup ( ) ) . isEqualTo ( customerGroup . toReference ( ) ) )
order -> assertThat ( order . getCustomerGroup ( ) ) . isEqualTo ( customerGroup . toReference ( ) ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( "#" , SchemaLocation . empty ( ) . toString ( ) )
assertEquals ( "#" , SchemaLocation . empty ( ) . toString ( ) )
assertEquals ( "some street" , mp . getValue ( ) )
assertEquals ( ":10:9:5" , res . join ( ) )
assertEquals ( ":10:9:5" , res . join ( ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( simplePushServerConfig . endpointPort ( ) , is ( 8889 ) )
assertThat ( underTest . getGenericMqttPublish ( ) ) . isEqualTo ( GENERIC_MQTT_PUBLISH )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( exception , e . getCause ( ) )
assertNotNull ( build )
assertNotNull ( build )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertEquals ( new SelectorDimFilter ( "dim" , "v1" , null ) , filter . optimize ( ) )
assertEquals ( new SelectorDimFilter ( "dim" , "v1" , null ) , filter . optimize ( ) )
assertEquals ( "#" , SchemaLocation . empty ( ) . toString ( ) )
assertNull ( result . get ( ) )
assertNull ( map . ifPresentApply ( 4 , Functions . < String > getPassThru ( ) ) )
assertThatThrownBy ( ( ) -> future . join ( ) )
assertThatThrownBy ( ( ) -> future . join ( ) )
assertThatThrownBy ( ( ) -> future . join ( ) )
assertNull ( Vertx . currentContext ( ) )
assertEquals ( alertMessage . getError ( ) , "error" )
assertEquals ( 5 , resultHandler . count )
assertEquals ( alertMessage . getError ( ) , "error" )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertFalse ( resources . contains ( "/login" ) )
assertEquals ( src , translate ( src ) )
assertFalse ( resources . contains ( "/login" ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
assertEquals ( DOM_DATA_TREE_CHANGE_LISTENER , abstractDOMDataTreeChangeListenerRegistration . getInstance ( ) )
fail ( e . getMessage ( ) )
assertTrue ( iterator . closed )
assertEquals ( "" , result )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertThat ( actual ) . isEmpty ( )
assertThat ( actual ) . isEmpty ( )
assertThat ( keyManager . getPrimitiveClass ( ) ) . isEqualTo ( Aead . class )
assertThat ( properties . getProperty ( AutomonPropertiesLoader . CONFIGURED_OPEN_MON ) ) . isEqualTo ( "org.mypackage.MyOpenMon" )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertThat ( CapabilitiesRegistry . INSTANCE . get ( "PredefinedDesiredCapabilities.firefox" ) ) . isNotNull ( )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertThat ( ex . getMessage ( ) , is ( "verify" ) )
assertEquals ( tag , new ConfigurationValue ( new CPrimitive ( SIMPLE_VALUE ) , tag ) . tag ( ) )
assertEquals ( tag , new ConfigurationValue ( new CPrimitive ( SIMPLE_VALUE ) , tag ) . tag ( ) )
assertThat ( expected . getMessage ( ) , is ( "Failed to extract Name from media type 'application/json'" ) )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( expectedRestriction , restriction )
assertEquals ( expectedRestriction , restriction )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNotNull ( handlebars )
assertNotNull ( handlebars )
assertNotNull ( handlebars )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
org . junit . Assert . fail ( "junit 4: single method failed" )
org . junit . Assert . fail ( "junit 4: single method failed" )
assertEquals ( "foobar" , result )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertThat ( allGames ) . hasSize ( 3 )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( "Response code should be: " , 200 , response . code ( ) )
assertEquals ( "Response code should be: " , 200 , response . code ( ) )
assertEquals ( expectedList , store . getNames ( ) )
assertNotNull ( randomUUID ( context ) )
fail ( "Should throw an exception here" )
assertEquals ( 200 , response . status )
assertEquals ( 200 , response . code ( ) )
assertNotNull ( GeoPackage . open ( newFile ( "foo.gpkg" ) ) )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertThat ( buffer . size ( ) ) . isEqualTo ( helloBytes . length )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertFalse ( new ChecksumProfileMatcher ( Stream . < ProfileDescription > empty ( ) . collect ( Collectors . toSet ( ) ) ) . compare ( local ) . isPresent ( ) )
assertNull ( "Expected null value." , builder . clientId ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertNotNull ( build )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( typeName , files . getTypeName ( ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertThat ( allGames ) . hasSize ( 3 )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( e . getMessage ( ) ) . isNull ( )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( Request . HttpMethod . POST , openChannelUninstallRequest . getHttpMethod ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( JpaSort . of ( User_ . firstname , User_ . lastname ) ) . contains ( Order . asc ( "firstname" ) , Order . asc ( "lastname" ) )
assertThat ( JpaSort . of ( User_ . firstname , User_ . lastname ) ) . contains ( Order . asc ( "firstname" ) , Order . asc ( "lastname" ) )
assertThat ( JpaSort . of ( User_ . firstname , User_ . lastname ) ) . contains ( Order . asc ( "firstname" ) , Order . asc ( "lastname" ) )
assertThat ( e . getMessage ( ) ) . isNull ( )
assertEquals ( job , RandomUtils . nextJob ( jobs , RandomNumberGeneration . getRandom ( ) ) )
assertEquals ( ( ( Map < ? , ? > ) result . get ( "x" ) ) . get ( "errorType" ) , NotSerializableException . class . getName ( ) )
assertTrue ( Thread . currentThread ( ) != bean . simpleInvokeAsync ( ) . get ( ) )
assertEquals ( 1 , result . get ( ) )
assertEquals ( 1 , result . get ( ) )
assertThat ( underTest . getTagSet ( ) ) . hasSize ( 1 )
assertEquals ( 0 , remf . getManagedClasses ( ) . size ( ) )
assertEquals ( 0L , da . cursor ( ) )
assertThat ( underTest . getTagSet ( ) ) . hasSize ( 1 )
assertThat ( nodeAccess . getId ( ) , is ( "foo" ) )
assertTrue ( schemaProvider instanceof InputBatch . NullSchemaProvider )
assertEquals ( ServiceBusMessageState . ACTIVE , message . getState ( ) )
assertEquals ( ServiceBusMessageState . ACTIVE , message . getState ( ) )
assertThat ( sut . isRealProviderConfigured ( ) ) . isTrue ( )
assertEquals ( Duration . ofSeconds ( 777 ) , config . get ( GraphDatabaseSettings . transaction_timeout ) )
assertEquals ( expectedCounterDateValues , result . getDateList ( ) . size ( ) )
assertNull ( v )
assertEquals ( User . UNKNOWN_USER_ID , context . getUser ( ) . getUserId ( ) )
assertNotNull ( plugin )
assertEquals ( 10 , users . size ( ) )
assertNotNull ( clazz )
assertNotNull ( clazz )
assertEquals ( "Invalid fragment index or sequence order" , iae . getMessage ( ) )
assertNotNull ( build )
assertTrue ( action . get ( ) )
assertTrue ( action . get ( ) )
assertNotNull ( build )
assertNotNull ( build )
assertNotNull ( build )
assertNotNull ( build )
assertNotNull ( build )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertEquals ( State . COMPLETED , run . getState ( ) )
assertEquals ( Project . State . created , project . getState ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "This should be a [hyperlink]" , translate ( src ) )
assertTrue ( start . compareTo ( redis . lastsave ( ) ) <= 0 )
assertNotNull ( build )
assertEquals ( "" , result )
assertEquals ( "This should be a [hyperlink]" , translate ( src ) )
assertEquals ( 1 , this . instance . execute ( "test()" ) )
assertEquals ( State . COMPLETED , run . getState ( ) )
assertNotNull ( result )
assertEquals ( Project . State . created , project . getState ( ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( "Context exists" , ctx )
assertThat ( createMaskAlgorithm ( "" ) . mask ( "abc123456" ) , is ( "0659c7992e268962384eb17fafe88364" ) )
assertEquals ( State . COMPLETED , run . getState ( ) )
assertEquals ( ForgotPasswordState . CONFIRMATION_CODE , forgotPasswordResult . getState ( ) )
assertThat ( type . matching ( Other . class ) , equalTo ( converted ( Other . class , Example . class ) ) )
assertEquals ( "hello" , str )
assertTrue ( action . get ( ) )
assertThat ( authenticate , is ( not ( present ( ) ) ) )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( ForgotPasswordState . CONFIRMATION_CODE , forgotPasswordResult . getState ( ) )
assertNotEquals ( start , dur . getStart ( ) )
assertTrue ( action . get ( ) )
assertNotNull ( h2Config )
assertNotNull ( h2Config )
assertTrue ( action . get ( ) )
assertThat ( result . getResource ( ) , equalTo ( VALID_RESOURCE ) )
assertEquals ( src , translate ( src ) )
assertEquals ( 0 , result . size ( ) )
assertThat ( underTest . getTagSet ( ) ) . hasSize ( 1 )
assertEquals ( 10 , users . size ( ) )
assertThat ( 2 , is ( simple . get ( 0 ) ) )
assertNotNull ( instance )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertEquals ( "foo" , weld . select ( String . class , Any . Literal . INSTANCE ) . get ( ) )
assertTrue ( en . getConfiguration ( ) . isSecure ( ) )
assertTrue ( en . getConfiguration ( ) . isSecure ( ) )
assertEquals ( Binding . parse ( "" ) , Binding . empty ( ) )
assertEquals ( 1 , result . get ( ) )
assertTrue ( SimpleTimerServiceBean . awaitTimerCall ( ) )
assertEquals ( functionA , evaluator . getContext ( ) . resolveFunction ( "a" , "a" ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertNull ( "Should be null" , inspector . getMapValueElement ( map , new ShortWritable ( ( short ) 0 ) ) )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertSame ( result . getResponse ( ) , responseMock )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertFalse ( "Port and context base parsing created an invlid url" , targetProvider . provideTarget ( ) . contains ( "null" ) )
assertThat ( ( Map ) converter . convert ( null ) ) . isNull ( )
assertNotNull ( factory )
assertEquals ( "Hello, World!" , client . hello ( "World" ) )
assertEquals ( defaultFileSystemURL , configurationProxy . get ( "fs.default.name" , "" ) )
assertTrue ( mCluster . getClient ( ) . exists ( testFile ) )
assertEquals ( "01" , IOUtils . toString ( input , Charset . defaultCharset ( ) ) )
assertEquals ( expectedHome , config . getDroidWorkDir ( ) )
assertEquals ( expectedHome , config . getDroidWorkDir ( ) )
assertNotNull ( result )
assertThat ( getLogs ( err ) ) . contains ( "Error creating matcher for sources with pattern: \\" )
assertEquals ( "eClass" , fragment . toVarName ( EcorePackage . eINSTANCE . getEClass ( ) ) )
assertEquals ( "1234" , result )
assertEquals ( job , context . getJob ( ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( localExecutableRegistry . getTask ( "fooBar" ) ) . isEqualTo ( givenExecutable )
assertThat ( localExecutableRegistry . getTask ( "fooBar" ) ) . isEqualTo ( givenExecutable )
assertThat ( "Instance of IMqttActionListener expected" , Listeners . toListener ( future ) , IsInstanceOf . instanceOf ( IMqttActionListener . class ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( BizException . class , e . getCause ( ) . getClass ( ) )
assertThat ( exception . getMessage ( ) , is ( "Test message" ) )
assertThat ( get ( "https://google.com" ) . blockingGet ( ) . code ( ) ) . isEqualTo ( 200 )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( attrs . get ( ) . isEmpty ( ) , is ( true ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertEquals ( ClassB . class , theCls )
assertEquals ( ClassB . class , theCls )
assertEquals ( ClassB . class , theCls )
assertEquals ( ClassB . class , theCls )
assertThat ( type . matching ( Example . class ) , sameInstance ( type ) )
assertNotNull ( workspace )
assertSame ( UNSUPPORTED_EXCEPTION , session . createNewModel ( "test" ) )
assertEquals ( testSize , set . size ( ) )
assertEquals ( testSize , set . size ( ) )
assertNotNull ( plugin )
assertNull ( pid )
assertNull ( pid )
assertTrue ( action . get ( ) )
assertThat ( e . getMessage ( ) , matchesPattern ( "Invalid YAML from classpath:conf/origins/origins-with-syntax-error-for-configtest.yml: Cannot deserialize value of type `java.util.ArrayList<com.hotels.styx.api.extension.service.BackendService>` from String value \\(token `JsonToken.VALUE_STRING`\\)\n at \\[Source: .*]" ) )
assertEquals ( "01" , IOUtils . toString ( input , Charset . defaultCharset ( ) ) )
assertThat ( "Solo" ) . is ( not ( JEDI ) )
assertThat ( jksOptions , is ( Optional . empty ( ) ) )
assertEquals ( Optional . of ( encodingClasses ) , c . encodingClasses ( encodingClasses ) . encodingClasses ( ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( "LINESTRING (0 0, 1 3)" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
assertEquals ( ArrayProducer . STRING_BAR , stringBar )
assertEquals ( "cognition" , word . get ( ) )
assertEquals ( "Planned exception" , e . getCause ( ) . getMessage ( ) )
assertEquals ( "(Key,Value)" , String . format ( "%1$s" , pair ) )
hasText ( "s" , "has text" )
assertThat ( actual . getOrNull ( ) , is ( equalTo ( "z" ) ) )
assertEquals ( false , result )
assertEquals ( 0 , source . getEstimatedSizeBytes ( null ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertEquals ( new JsonObject ( ) . put ( "nested" , new JsonArray ( ) . add ( "foo" ) ) , o )
assertTrue ( setUpErrorConfig ( ) . isEmpty ( ) )
assertNotNull ( result )
assertThat ( Util . subtract ( m , n ) ) . isNull ( )
assertEquals ( name , definition . getName ( ) )
assertEquals ( it . next ( ) , q . take ( ) )
assertEquals ( it . next ( ) , q . take ( ) )
assertEquals ( it . next ( ) , q . take ( ) )
assertNotNull ( mandrillApi . messages ( ) . search ( null ) )
assertNotNull ( mandrillApi . messages ( ) . search ( null ) )
assertEquals ( "00000000003v" , encodeBase32 ( 123 ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertEquals ( 2 , pt . saveCount )
assertEquals ( 2 , pt . saveCount )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( value , supplier . get ( seed ) )
assertEquals ( "[\"between\",1,2]" , serialized . toString ( ) )
assertThat ( result . getValue ( ) , is ( 3 ) )
assertEquals ( "class java.lang.String" , typedef . getType ( ) . toString ( ) )
assertNull ( path . getName ( ) )
assertEquals ( "Parameter 0 was not found." , e . getMessage ( ) )
assertEquals ( test , expected )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( Msg . code ( 2007 ) + "The search chain subject.organization.partof.partof.name is too long. Only chains up to three references are supported." , e . getMessage ( ) )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertArrayEquals ( "results == fooBar" , results , values )
assertThat ( of ( 1 , 2 , 3 , 4 ) . count ( ) ) . isEqualTo ( 2 )
assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
MatcherAssert . assertThat ( target . getName ( ) , Matchers . is ( NAME ) )
assertNull ( killRing . yank ( ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( context . getConfigFile ( ) , is ( nullValue ( ) ) )
assertThat ( context . getConfigFile ( ) , is ( nullValue ( ) ) )
assertNotNull ( channel )
assertNotNull ( channel )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( 6 , sum . get ( ) )
assertTrue ( repeatableTask . execute ( ) )
assertTrue ( jsonNames . add ( name . jsonName ( ) ) , "Attribute: " + name )
assertArrayEquals ( expected , actual )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertTrue ( item . toString ( ) . startsWith ( dirString ) )
assertArrayEquals ( expected , ints )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertThat ( array . toByteArray ( InsecureSecretKeyAccess . get ( ) ) ) . isEqualTo ( plainArray )
assertArrayEquals ( expected , ints )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertEquals ( in , out )
assertEquals ( "[\"between\",1,2]" , serialized . toString ( ) )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertEquals ( 100 , counter . get ( ) )
assertThat ( actionProvider . canHandle ( getMetacard ( ) ) , is ( false ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertThat ( cfg ) . isEqualTo ( cfg . toBuilder ( ) . build ( ) )
assertThat ( cfg ) . isEqualTo ( cfg . toBuilder ( ) . build ( ) )
assertEquals ( "{}" , optionsBuilder . build ( "" ) )
assertTrue ( action . get ( ) )
assertTrue ( "expected " + expCount + " but got " + newCount + " transactions" , newCount == expCount )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertEquals ( 0 , count . get ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( expected , UncheckedFuture . on ( input ) . stream ( ) . map ( UncheckedFuture :: get ) . collect ( Collectors . toList ( ) ) )
assertThat ( TEST_APR . getPath ( null ) , equalTo ( DEFAULT_ABSOLUTE_PATH ) )
assertThat ( TEST_APR . getPath ( null ) , equalTo ( DEFAULT_ABSOLUTE_PATH ) )
assertEquals ( "value" , transformer . transform ( context ) )
assertEquals ( numberOfEvents , asList . size ( ) )
assertEquals ( "<p>2</p><p>3</p><p>4</p>" , result . toHtml ( ) )
assertThat ( connectorSettings . getSpecification ( ) ) . isNotPresent ( )
assertThat ( builder . key ( ) ) . isEqualTo ( expected )
assertNull ( cache . get ( 4 ) )
assertNull ( cache . get ( 4 ) )
assertTrue ( configuration != null )
assertEquals ( 0 , parser . getValidationErrors ( ) . size ( ) )
assertNotNull ( retrieved )
assertEquals ( expected , actual )
assertEquals ( "Every second" , p . print ( new CronExpression ( "* * * ? * *" ) , Locale . US ) )
assertEquals ( eq . condition ( ) , affirm . condition ( ) )
assertEquals ( String . format ( "[%s]" , address ) , FiltersHelper . getRedirectUriServerName ( address ) )
assertThatCode ( ( ) -> assumeThat ( listObject ) . isNotNull ( ) . asList ( ) . hasSize ( 3 ) ) . doesNotThrowAnyException ( )
assertTrue ( FS . canReadDirectory ( targetDir . toPath ( ) ) , "Can read dir: " + targetDir )
assertNull ( outerInMemFSPath . getFileSystem ( conf ) . getWorkingDirectory ( ) )
assertTrue ( Stream . of ( stutter ) . allMatch ( el -> "once" . equals ( el ) ) )
assertTrue ( Stream . of ( stutter ) . allMatch ( el -> "once" . equals ( el ) ) )
assertThat ( tested . getJedis ( ) , is ( not ( nullValue ( ) ) ) )
assertFalse ( repo . getObjectDatabase ( ) . getPreservedDirectory ( ) . exists ( ) )
assertNotNull ( runtimeMetadata . getTable ( "pm1.g1" ) )
assertEquals ( sharedTestEnv . getDefaultTableName ( ) , table . getName ( ) )
assertFalse ( repo . getObjectDatabase ( ) . getPreservedDirectory ( ) . exists ( ) )
assertNotNull ( oAuth2AccessToken )
assertNotNull ( oAuth2AccessToken )
assertFalse ( repo . getObjectDatabase ( ) . getPreservedDirectory ( ) . exists ( ) )
assertThat ( "[" + input + "] .query" , httpURI . getQuery ( ) , is ( expectedQuery ) )
assertThat ( parser . parse ( KEYSPACE_ID ) ) . isEmpty ( )
assertNull ( PropertyFactory . createProperty ( null ) )
assertNull ( PropertyFactory . createProperty ( null ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertThatCode ( ( ) -> type . toString ( ) ) . doesNotThrowAnyException ( )
assertNotNull ( LoggerFactory . getLogger ( getClass ( ) ) )
assertNotNull ( LoggerFactory . getLogger ( getClass ( ) ) )
assertThat ( SystemProperties . get ( "ro.product.device" ) ) . isEqualTo ( "robolectric" )
assertEquals ( EMAIL_PORT . getDefaultValue ( ) , systemSettingManager . getIntegerSetting ( EMAIL_PORT ) )
assertNull ( dataType . getDataPersister ( ) )
assertEquals ( response . cookie ( "x" ) , Optional . of ( responseCookie ( "x" , "y" ) . build ( ) ) )
assertThat ( DataType . STRING , equalTo ( compositeConverter . getReturnDataType ( ) ) )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertNull ( dataType . getDataPersister ( ) )
assertNull ( dataType . getDataPersister ( ) )
assertNull ( dataType . getDataPersister ( ) )
assertNotNull ( deserialisedOp )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertNotNull ( GeoPackage . open ( newFile ( "foo.gpkg" ) ) )
assertEquals ( "" , Utils . join ( ( Object [ ] ) null , ( - 3563 ) , 1051 , "" ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( URL . parse ( "http://example.com\\foo\\bar" ) . toString ( ) ) . isEqualTo ( "http://example.com/foo/bar" )
assertThat ( subject . test ( candidatePackageName ) , is ( false ) )
assertThat ( subject . test ( candidatePackageName ) , is ( false ) )
assertThat ( subject . test ( candidatePackageName ) , is ( false ) )
assertThat ( subject . test ( candidatePackageName ) , is ( false ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( builtKstream . getSchema ( ) , is ( SCHEMA_WITH_V1_PSEUDOCOLUMNS ) )
assertThat ( builtKstream . getSchema ( ) , is ( SCHEMA_WITH_V1_PSEUDOCOLUMNS ) )
assertThat ( actual ) . isEqualTo ( FILTERED_ACKNOWLEDGEMENT_REQUEST_JSON )
assertNull ( AuthorityURLInfoInfoListConverter . toString ( list ) )
assertEquals ( expected , actual )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( 10 , afterCount - beforeCount )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( 1 , results . size ( ) )
assertThat ( g . topologicalSort ( ) ) . isEmpty ( )
assertEquals ( interval ( 0.049787068367863944 , 20.085536923187668 ) , interval )
assertEquals ( interval ( 0.049787068367863944 , 20.085536923187668 ) , interval )
assertEquals ( "History not being cleared" , 0 , this . memstore . getSnapshot ( ) . getCellsCount ( ) )
assertThat ( model . getSize ( ) , is ( 0 ) )
assertThat ( Link . of ( "foo" ) . hasRel ( IanaLinkRelations . SELF ) ) . isTrue ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( Collections . emptyList ( ) , mapper . map ( Collections . emptySet ( ) ) )
assertEquals ( 1 , called [ 0 ] )
assertEquals ( 1 , ( int ) IteratorUtils . first ( iterator ) )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertEquals ( StringFunctions . formatterForArray ( "1 %s 2 %s" ) . apply ( new Object [ ] { "val1" , "val2" } ) , "1 val1 2 val2" )
assertThat ( repository ) . isNotNull ( )
assertNull ( "Expected null" , CacheManager . getInstance ( ) . getURI ( ) )
assertEquals ( "value1,value2" , getConfiguration ( ) . getString ( "listesc" ) )
assertEquals ( 14L , sum )
assertEquals ( 14L , sum )
assertEquals ( 10 , dataset . size ( ) )
MatcherAssert . assertThat ( result . getClass ( ) . getName ( ) , Matchers . is ( DataFileDataProvider . class . getName ( ) ) )
assertEquals ( "a" , Util . getName ( mock ) )
fail ( "Should throw an exception here" )
fail ( "Cannot create ReplicateConfig with negative replicateNumber" )
assertTrue ( thread . getState ( ) != State . WAITING )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertThat ( throwable . get ( ) , is ( not ( instanceOf ( NegativeArraySizeException . class ) ) ) )
assertNotNull ( auth . hostedUI )
assertThat ( udaf . map ( agg ) , is ( 4L ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( 1 , CollectionUtilities . sumInts ( element ) . longValue ( ) )
assertEquals ( 3 , posts . size ( ) )
assertEquals ( tag , new ConfigurationValue ( new CPrimitive ( SIMPLE_VALUE ) , tag ) . tag ( ) )
assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertNotNull ( result )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertThatNullPointerException ( ) . isThrownBy ( ( ) -> original . map ( null ) )
assertTrue ( iFile . getFullPath ( ) . toString ( ) + " doesn't exist." , iFile . exists ( ) )
assertThat ( keyManager . firstSupportedPrimitiveClass ( ) ) . isEqualTo ( Void . class )
assertTrue ( new AccessControlListHandler ( requestHeader ( USER_AGENT ) ) . setDefaultAllow ( true ) . isAllowed ( "some useragent" ) )
assertEquals ( "-something" , commandLine . getOptionValue ( 't' ) )
assertEquals ( 81 , options . getOptions ( ) . port )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertThat ( normalSheep . getName ( ) ) . isEqualTo ( "Fluffy" )
assertNotSame ( NULL , deserialized . get ( 0 ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( expected , one . comparePreciselyTo ( two ) )
assertNull ( checkException )
assertThat ( Rosetta . getMapper ( ) . valueToTree ( bean ) . get ( "optionalField" ) ) . isEqualTo ( expected )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertThat ( CheckedDatastoreReaderWriter . call ( supplier ) , is ( "foobar" ) )
assertThat ( CheckedDatastoreReaderWriter . call ( supplier ) , is ( "foobar" ) )
assertThat ( CheckedDatastoreReaderWriter . call ( supplier ) , is ( "foobar" ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertNull ( TriState . UNSET . asBooleanObject ( ) )
assertNull ( TriState . UNSET . asBooleanObject ( ) )
assertNull ( TriState . UNSET . asBooleanObject ( ) )
assertThat ( PortablePath . of ( "src" + fileSeparator + "test" + fileSeparator + "folder" , isWindowsSeparator ) . getFileName ( ) ) . isEqualTo ( "folder" )
assertTrue ( response . body ( ) . equals ( unprotectedResponse . body ( ) ) )
assertThat ( response . result ( ) ) . isSameAs ( result )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( Long . MAX_VALUE , converter . convertToLong ( converter . convertLong ( Long . MAX_VALUE ) ) )
assertEquals ( Long . MAX_VALUE , converter . convertToLong ( converter . convertLong ( Long . MAX_VALUE ) ) )
assertEquals ( Long . MAX_VALUE , converter . convertToLong ( converter . convertLong ( Long . MAX_VALUE ) ) )
assertEquals ( Long . MAX_VALUE , converter . convertToLong ( converter . convertLong ( Long . MAX_VALUE ) ) )
assertEquals ( Long . MAX_VALUE , converter . convertToLong ( converter . convertLong ( Long . MAX_VALUE ) ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( Parameter . withFields ( "id,name" ) ) . hasName ( "fields" ) . hasValue ( "id,name" )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertNull ( character )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertEquals ( listener , authorizationStateListener ( channel ) )
assertEquals ( listener , authorizationStateListener ( channel ) )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertEqualsWithoutWhiteSpaces ( "" , Hull )
assertEquals ( gauge . getValue ( ) , 100D )
assertThat ( actual ) . isEmpty ( )
assertEquals ( expected , actual )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertThat ( managedConnection . getConnection ( ) , is ( sameInstance ( connection ) ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertNull ( character )
assertNull ( character )
assertEquals ( defaultFileSystemURL , configurationProxy . get ( "fs.default.name" , "" ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertEquals ( expected , channels )
assertNull ( character )
assertNull ( character )
assertEquals ( "" , result )
assertNull ( character )
assertThat ( TestServiceComponent . class , method ( "testA" ) . thatHandles ( "testA" ) . withSenderPassThrough ( ) )
assertNull ( character )
assertNull ( character )
assertNotNull ( session )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertTrue ( StringUtils . isNotEmpty ( this . mocker . getComponentUnderTest ( ) . getName ( ) ) )
assertTrue ( StringUtils . isNotEmpty ( this . mocker . getComponentUnderTest ( ) . getName ( ) ) )
assertTrue ( StringUtils . isNotEmpty ( this . mocker . getComponentUnderTest ( ) . getName ( ) ) )
assertTrue ( StringUtils . isNotEmpty ( this . mocker . getComponentUnderTest ( ) . getName ( ) ) )
assertTrue ( StringUtils . isNotEmpty ( this . mocker . getComponentUnderTest ( ) . getName ( ) ) )
assertThat ( state . getId ( ) , equalTo ( id ) )
assertEquals ( StandardCharsets . UTF_8 , new Hex ( StandardCharsets . UTF_8 ) . getCharset ( ) )
assertEquals ( 987654326L , lbResult . nextLbmIdentifier ( ) )
assertEquals ( "04/12/15" , value )
assertFalse ( builder . build ( ) . isZipSafe ( ) . get ( ) )
assertTrue ( ctx . isFixedScale ( ) )
assertThat ( dataType . getMediaType ( ) . getCharset ( ) . get ( ) , equalTo ( UTF_8 ) )
assertTrue ( ctx . isFixedScale ( ) )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertThat ( result , is ( Optional . of ( Arrays . asList ( 1.0D , 2.0D , 3.0D ) ) ) )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertEquals ( LocalDate . of ( 2018 , 3 , 12 ) , LocalDate . from ( DateTimeFormatter . ISO_LOCAL_DATE . parse ( "2018-03-09" ) ) . plusDays ( 3 ) )
assertFalse ( new SpectraReadFeature ( session ) . offset ( null ) )
assertFalse ( new SpectraReadFeature ( session ) . offset ( null ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertNull ( results )
assertThat ( new AtomicMarkableReference < > ( expectedValue , true ) ) . hasReference ( expectedValue ) . isMarked ( )
assertThat ( slider . getValue ( ) , is ( 1.2 ) )
assertThat ( slider . getValue ( ) , is ( 1.2 ) )
assertThat ( slider . getValue ( ) , is ( 1.2 ) )
assertThat ( slider . getValue ( ) , is ( 1.2 ) )
assertThat ( state . getId ( ) , equalTo ( id ) )
assertEquals ( "Buffer[size=0]" , buffer . toString ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertThat ( subject . getSupportedType ( ) , is ( ObjectType . INETNUM ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertNull ( character )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertNotNull ( bericht . toString ( ) )
assertNotNull ( bericht . toString ( ) )
assertTrue ( regionManager . getId ( ) != 0 )
assertTrue ( regionManager . getId ( ) != 0 )
assertTrue ( regionManager . getId ( ) != 0 )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( configuration . getUseStrictQuerying ( ) ) . isTrue ( )
assertThat ( fromJson ( asJson ( cursor ) , SecretRetrievalCursor . class ) ) . isEqualTo ( cursor )
assertEquals ( false , builder . build ( ) . useMultiThreadedClientPolicy ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertNotNull ( customer . getId ( ) )
assertEquals ( "" , s )
assertNotNull ( result )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( actual ) . hasSize ( 1 )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( "{\"type\":\"meta_tags_filter\",\"meta_tags\":[\"test1\",\"test2\"]}" , serializedFilter )
assertEquals ( "{\"type\":\"meta_tags_filter\",\"meta_tags\":[\"test1\",\"test2\"]}" , serializedFilter )
assertNotNull ( iterator )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( response . status ( ) , is ( NOT_FOUND ) )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
isTrue ( true , ( ) -> "Hello" )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertNotNull ( bulk )
assertThat ( col . toString ( ) , containsString ( "SingleColumn{, alias=Optional[`WINDOWSTART`], expression='foo'}" ) )
assertNotNull ( namesrvConfig )
assertNotNull ( namesrvConfig )
assertNotNull ( sessionRepository . findById ( session . getId ( ) ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertNotNull ( sessionRepository . findById ( session . getId ( ) ) )
assertNotNull ( sessionRepository . findById ( session . getId ( ) ) )
assertEquals ( "Testing" , s )
assertEquals ( "Testing" , s )
assertEquals ( defaultString , ImmutableList . of ( "----" ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( CheckedDatastoreReaderWriter . call ( supplier ) , is ( "foobar" ) )
assertThat ( CheckedDatastoreReaderWriter . call ( supplier ) , is ( "foobar" ) )
assertThat ( interval . isEmpty ( ) ) . isTrue ( )
assertThat ( interval . isEmpty ( ) ) . isTrue ( )
assertThat ( underTest . next ( ) , is ( result ) )
assertEquals ( "{\"wildcard\":{\"propName\":\"FOO*\"}}" , actual )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( 255 , s . available ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertNotNull ( builder ( ) )
assertNotNull ( filter )
assertNotNull ( filter )
assertEquals ( "person-name" , name )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNull ( character )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( NaN ( ) ) . isCloseTo ( Double . NaN , within ( 0d ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertNotNull ( items )
assertThat ( hashes . size ( ) , is ( 0 ) )
assertEquals ( "OK" , redis . save ( ) )
assertEquals ( "OK" , redis . save ( ) )
assertEquals ( "OK" , redis . save ( ) )
assertEquals ( "abc" , message . getPayloadString ( ) )
assertEquals ( "abc" , message . getPayloadString ( ) )
assertEquals ( "abc" , message . getPayloadString ( ) )
assertEquals ( "abc" , message . getPayloadString ( ) )
assertEquals ( reader . length ( ) , fat . getSize ( ) )
assertEquals ( reader . length ( ) , fat . getSize ( ) )
assertTrue ( regionManager . getId ( ) != 0 )
assertEquals ( "abc" , message . getPayloadString ( ) )
assertEquals ( reader . length ( ) , fat . getSize ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( 1 , stat . getUid ( ) )
assertEquals ( testInstance . getAllIds ( ) , expected )
assertNotNull ( "created node" , node )
assertNotNull ( "created node" , node )
assertNull ( "getGroupNames when userName == null" , ss . getAuthenticator ( ) . getGroupNames ( ) )
assertEquals ( TupleDomain . extractFixedValues ( TupleDomain . all ( ) ) . get ( ) , ImmutableMap . of ( ) )
assertTrue ( packDir . delete ( ) )
assertEquals ( TupleDomain . extractFixedValues ( TupleDomain . all ( ) ) . get ( ) , ImmutableMap . of ( ) )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertEquals ( instance ( ) , copy )
assertThat ( time . get ( ) ) . isEqualTo ( next )
assertEquals ( 1 , stat . getUid ( ) )
assertEquals ( repeat ( "\n" , 512 ) , make512Safe ( repeat ( "\n" , 512 ) ) )
assertEquals ( repeat ( "\n" , 512 ) , make512Safe ( repeat ( "\n" , 512 ) ) )
assertThat ( populated ( ) . isEmpty ( ) , equalTo ( false ) )
assertEquals ( 2 , intSet2 . size ( ) )
assertEquals ( "Invalid toString() returned" , "text/plain;q=0.7" , result )
assertNotNull ( bericht . toString ( ) )
assertEquals ( repeat ( "\n" , 512 ) , make512Safe ( repeat ( "\n" , 512 ) ) )
assertThat ( writer . toString ( ) , is ( emptyString ( ) ) )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( "1" , JavaScriptUtils . jsToString ( getIntValue ( ) , JAVA_OBJECT ) . trim ( ) )
assertThat ( attributeList ) . containsExactly ( name ( "firstName" ) . value ( "Leia" ) , name ( "lastName" ) . value ( "Organa" ) )
assertThat ( attributeList ) . containsExactly ( name ( "firstName" ) . value ( "Leia" ) , name ( "lastName" ) . value ( "Organa" ) )
assertThat ( attributeList ) . containsExactly ( name ( "firstName" ) . value ( "Leia" ) , name ( "lastName" ) . value ( "Organa" ) )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertThat ( builder . build ( ) ) . containsExactly ( "a" , "b" ) . inOrder ( )
assertThat ( result , equalTo ( ImmutableList . of ( new SetWeight ( new LiteralInt ( 10 ) ) ) ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertEquals ( 120 , Duration . hours ( 2 ) . toMinutes ( ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertEquals ( 120 , Duration . hours ( 2 ) . toMinutes ( ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertEquals ( 120 , Duration . hours ( 2 ) . toMinutes ( ) )
assertThat ( HeaderUtil . convertIntToString ( 0 ) , is ( "0" ) )
assertThat ( hashes . size ( ) , is ( 0 ) )
assertThat ( actual ) . containsAtLeastEntriesIn ( expected )
assertThat ( hashes . size ( ) , is ( 0 ) )
assertThat ( hashes . size ( ) , is ( 0 ) )
assertThat ( actual ) . hasSize ( 1 )
assertThat ( hashes . size ( ) , is ( 0 ) )
assertNotNull ( build )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( 3 , list . size ( ) )
assertNotNull ( session )
assertEquals ( 3 , list . size ( ) )
assertEquals ( false , builder . build ( ) . useMultiThreadedClientPolicy ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( State . STARTED , this . simpleStateProvider . get ( ) )
assertTrue ( list . containsKey ( "a" ) )
assertEquals ( State . STARTED , this . simpleStateProvider . get ( ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertEquals ( "pluck" , transformer . name ( ) )
assertEquals ( State . STARTED , this . simpleStateProvider . get ( ) )
assertTrue ( ( new CipherSpec ( ) ) . getCipherTransformation ( ) . equals ( "AES/CBC/PKCS5Padding" ) )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( response . request ( ) ) . isSameAs ( request )
assertThat ( response . request ( ) ) . isSameAs ( request )
assertEquals ( "key1[arg1, arg2]" , tested . getValue ( "key1" , "arg1" , "arg2" ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( request . getAttribute ( name ) , is ( sameInstance ( value ) ) )
assertThat ( message . getPayload ( ) . getDataType ( ) . getMediaType ( ) . getCharset ( ) . get ( ) , equalTo ( CUSTOM_ENCODING ) )
assertEquals ( "bar" , ( ( PrivilegedEvent ) event ) . getSession ( ) . getProperty ( "foo" ) )
assertThat ( sut . toHeader ( ) , equalTo ( "type/subtype;charset=utf-8;param=value" ) )
assertThat ( result . getValue ( ) , is ( false ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( proxyUserService . getName ( ) , ProxyUserService . SERVICE_NAME )
assertEquals ( proxyUserService . getName ( ) , ProxyUserService . SERVICE_NAME )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "" , result )
assertThat ( dialect . getNativeDriver ( ) , is ( SparkSimbaDatabaseMeta . DRIVER_CLASS_NAME ) )
assertEquals ( "" , s )
assertThat ( locationManager . getPartitionLocations ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
GAssert . assertEquals ( expected , actual )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertTrue ( arrayComparer ( new String [ ] { "Thomas" } , fetchedNames . toArray ( ) ) , assertFailedMsg )
assertTrue ( arrayComparer ( new String [ ] { "Thomas" } , fetchedNames . toArray ( ) ) , assertFailedMsg )
assertTrue ( arrayComparer ( new String [ ] { "Thomas" } , fetchedNames . toArray ( ) ) , assertFailedMsg )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertThat ( service . getAvailableDatabaseMappings ( ) , is ( databaseMappings ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( callback . getErrorMessage ( ) ) . isEqualTo ( errorMessage )
assertEquals ( d_locations , iss )
assertThat ( underTest . getValueOrNull ( ) ) . isEqualTo ( value )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertEquals ( event . getSession ( ) . getProperty ( "foo" ) , evaluate ( "sessionVars['foo']" , event ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertThat ( callback . getErrorMessage ( ) ) . isEqualTo ( errorMessage )
assertThat ( callback . getErrorMessage ( ) ) . isEqualTo ( errorMessage )
assertThat ( helper . getPackage ( ) . getRepositoryMapping ( RepositoryName . create ( "foo" ) ) ) . isEmpty ( )
assertThat ( cfg ) . isEqualTo ( cfg . toBuilder ( ) . build ( ) )
assertThat ( cfg ) . isEqualTo ( cfg . toBuilder ( ) . build ( ) )
assertThat ( symbols ) . noneMatch ( s -> s . is ( Kind . AMBIGUOUS ) && ( ( AmbiguousSymbol ) s ) . alternatives ( ) . stream ( ) . allMatch ( a -> a . is ( Kind . CLASS ) ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertEquals ( response . getContentType ( ) , "application/json" )
assertEquals ( new URI ( "/1.0/images/load" ) , new URI ( builder . loadImage ( ) ) )
assertEquals ( new URI ( "/1.0/images/load" ) , new URI ( builder . loadImage ( ) ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertNotNull ( result )
assertNull ( b . getDatabase ( ) )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( 11 , featureSource . getCount ( Query . ALL ) )
assertThat ( entryNames ) . contains ( this . libPath + JarModeLibrary . LAYER_TOOLS . getName ( ) )
assertEquals ( expectedObject , actualResult )
assertEquals ( "SimpleMessage{string=test}" , message . toString ( ) )
assertEquals ( "SimpleMessage{string=test}" , message . toString ( ) )
assertEquals ( "SimpleMessage{string=test}" , message . toString ( ) )
assertEquals ( processInfo . getName ( ) , "onearg" )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( "SimpleMessage{string=test}" , message . toString ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( 10 , toTest . deserialize ( ) )
assertNotNull ( build )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( "" , toString )
assertEquals ( expected , channels )
assertEquals ( expected , read )
assertFalse ( containment . matches ( Arrays . asList ( 1 , 2 ) ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( allGames ) . hasSize ( 3 )
assertEquals ( expectedStrings . length , result . size ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertNull ( text )
assertNotNull ( descResult )
assertNotNull ( descResult )
assertNotNull ( descResult )
assertNotNull ( descResult )
assertNotNull ( descResult )
assertNull ( testMock )
assertEquals ( "RC3" , result )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( option . argument ( ) , is ( "out.txt" ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( NOW1 + "/" + NOW2 , test . toString ( ) )
assertEquals ( TestEnum . valueOf ( input ) , DEFAULT_TO . apply ( input ) )
assertNotNull ( instance )
assertNotNull ( instance )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( LocalDate . of ( 2018 , 3 , 12 ) , LocalDate . from ( DateTimeFormatter . ISO_LOCAL_DATE . parse ( "2018-03-09" ) ) . plusDays ( 3 ) )
assertEquals ( LocalDate . of ( 2018 , 3 , 12 ) , LocalDate . from ( DateTimeFormatter . ISO_LOCAL_DATE . parse ( "2018-03-09" ) ) . plusDays ( 3 ) )
assertEquals ( LocalDate . of ( 2018 , 3 , 12 ) , LocalDate . from ( DateTimeFormatter . ISO_LOCAL_DATE . parse ( "2018-03-09" ) ) . plusDays ( 3 ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( "GET" , HttpMethod . GET . toString ( ) )
assertEquals ( "GET" , HttpMethod . GET . toString ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( "null" , new ReusableObjectMessage ( ) . getFormattedMessage ( ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertThat ( retainedIndexName . getAllValues ( ) . get ( 0 ) ) . containsExactly ( "index1" , "index2" )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertThat ( retainedIndexName . getValue ( ) ) . containsExactly ( "index1" )
assertTrue ( files . isEmpty ( ) )
assertThat ( actual ) . isEmpty ( )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertThat ( givenLocalTime ) . isAfter ( LocalTime . of ( 1 , 0 ) ) . hasSameHourAs ( LocalTime . of ( 12 , 0 ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertEquals ( ref . get ( ) . get ( 0 ) , "bar" )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertEquals ( "noQuotes" , StringSplitter . removeQuotes ( "noQuotes" ) )
assertNotNull ( cm . createDirContext ( USER_DN , "password" . getBytes ( ) ) )
assertNotNull ( cm . createDirContext ( USER_DN , "password" . getBytes ( ) ) )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertNotNull ( result )
assertNotNull ( handler )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertThat ( rep . getPassword ( ) ) . isEqualTo ( "hoohah" . toCharArray ( ) )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertEquals ( "" , result )
assertThat ( dialect . getUsedLibraries ( ) , is ( new String [ ] { SparkSimbaDatabaseMeta . JAR_FILE } ) )
assertNull ( testAuthenticationMethodRetriever . getContent ( ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertThat ( EventType . byType ( "DISPUTE_CREATED" ) , is ( DISPUTE_CREATED ) )
assertEquals ( "test" , sb . toString ( ) )
assertThat ( splashScreen . toString ( ) , getSimpleLogMatcher ( ) )
assertThat ( splashScreen . toString ( ) , getSimpleLogMatcher ( ) )
assertEquals ( "50175457" , internal . getSerialNumber ( ) )
assertTrue ( builder . build ( ) . isCheck ( ) )
assertTrue ( builder . build ( ) . isCheck ( ) )
assertTrue ( builder . build ( ) . isCheck ( ) )
assertEquals ( CONTENT , readStoredContent ( ) )
assertEquals ( ClassB . class , theCls )
assertEquals ( ClassB . class , theCls )
assertEquals ( "default index xpto" , products . get ( 0 ) . getName ( ) )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertThat ( full . body ( ) , is ( new byte [ 0 ] ) )
assertThat ( full . body ( ) , is ( new byte [ 0 ] ) )
assertThat ( response . status ( ) , is ( FORBIDDEN ) )
assertEquals ( "" , s )
assertThat ( m ) . contains ( MavenVersion . parseMavenString ( "1.2.7" ) )
assertThat ( m ) . contains ( MavenVersion . parseMavenString ( "1.2.7" ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( forJson ( SOURCE ) ) . isEqualTo ( createInputStream ( LENIENT_SAME ) )
assertThat ( m ) . contains ( MavenVersion . parseMavenString ( "1.2.7" ) )
assertThat ( m ) . contains ( MavenVersion . parseMavenString ( "1.2.7" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( message . getPayload ( ) . getDataType ( ) . getMediaType ( ) . getCharset ( ) . get ( ) , equalTo ( CUSTOM_ENCODING ) )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( "percentile_agg(50.0, 0, 1, 2)" , create ( 50 , 3 ) . configString ( ) . toString ( ) )
assertEquals ( "percentile_agg(50.0, 0, 1, 2)" , create ( 50 , 3 ) . configString ( ) . toString ( ) )
assertEquals ( "percentile_agg(50.0, 0, 1, 2)" , create ( 50 , 3 ) . configString ( ) . toString ( ) )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( "" , s )
assertEquals ( WHITE_LABEL_URL , brandBean . getWhiteLabelBrandingUrl ( ) )
assertEquals ( "no" , this . render ( null ) , "Null should be interpreted as FALSE" )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , provider . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , provider . get ( ) )
assertEquals ( fsInput . length ( ) , FILE_CONTENTS . length ( ) )
assertEquals ( MediaType . TEXT_PLAIN . toString ( ) , DETECTOR . mimeTypeOf ( null , binaryFromFile ( TXT_FILE ) ) )
assertThat ( splashScreen . toString ( ) , getSimpleLogMatcher ( ) )
assertThat ( splashScreen . toString ( ) , getSimpleLogMatcher ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , - 1 ) , is ( emptyString ( ) ) )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertThat ( Instructions . load ( file ) ) . isEmpty ( )
assertThat ( TestServiceComponent . class , method ( "missingMethodName" ) )
assertThat ( TestServiceComponent . class , method ( "missingMethodName" ) )
assertTrue ( "Unable to create temp file" , tempFile . createNewFile ( ) )
assertTrue ( "Unable to create temp file" , tempFile . createNewFile ( ) )
assertNotNull ( name , expression . getResultType ( ) )
assertNotNull ( name , expression . getResultType ( ) )
assertNotNull ( name , expression . getResultType ( ) )
assertNotNull ( name , expression . getResultType ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( Duration . ZERO , config . timeout ( ) )
assertThat ( observers . iterator ( ) ) . hasSize ( 2 )
assertEquals ( "foo" , weld . select ( String . class , Any . Literal . INSTANCE ) . get ( ) )
assertNull ( microserviceVersionRule . getLatestMicroserviceVersion ( ) )
assertEquals ( "003508" , rfAddress )
assertThat ( body . getGroup ( ) , is ( equalTo ( group ) ) )
assertThat ( registry . getGroup ( ) , equalTo ( "group" ) )
assertNotNull ( build )
assertThat ( writer . get ( ) , is ( false ) )
assertTrue ( action . get ( ) )
assertTrue ( writer2Completed . get ( ) )
assertThat ( isSourcePolicyDisposed . get ( ) , is ( false ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertThat ( session . getNamespaceURI ( "mode" ) , is ( "http://www.modeshape.org/1.0" ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "" , result )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertThat ( session . getNamespaceURI ( "mode" ) , is ( "http://www.modeshape.org/1.0" ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "" , s )
assertEquals ( "AdFormatt" , ret . get ( "trigger" ) )
assertThat ( result . array ( ) ) . isEqualTo ( bytes )
assertThat ( result . array ( ) ) . isEqualTo ( bytes )
assertEquals ( "" , s )
assertEquals ( "AdFormatt" , ret . get ( "trigger" ) )
assertThat ( result . array ( ) ) . isEqualTo ( bytes )
assertThat ( result . array ( ) ) . isEqualTo ( bytes )
assertEquals ( Boolean . FALSE , blade . staticOptions ( ) . isShowList ( ) )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( "Target: Hello Target: Hello Fred1!!" , targetClient . hello ( "Fred" ) )
assertEquals ( "Target: Hello Target: Hello Fred1!!" , targetClient . hello ( "Fred" ) )
assertEquals ( ArrayProducer . INTEGER_BAR , integerBar )
assertTrue ( value )
assertTrue ( value )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( actual ) . hasSize ( 1 )
assertEquals ( "(true,true,false)" , a . toString ( ) )
assertEquals ( "(true,true,false)" , a . toString ( ) )
assertEquals ( "(true,true,false)" , a . toString ( ) )
assertTrue ( error )
assertEquals ( ai . get ( ) , 20 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertNotNull ( intArrayInstance . get ( ) )
assertFalse ( this . marker . remove ( null ) )
assertFalse ( this . marker . remove ( null ) )
assertFalse ( this . marker . remove ( null ) )
assertFalse ( this . marker . remove ( null ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertEquals ( OTHER_NAME , instance ( ) . getName ( ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( PostgreSQLByteConverter . numeric ( input ) , is ( expected ) )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertArrayEquals ( new int [ ] { 0 , 1 } , IntStreams . range ( 2 ) . toArray ( ) )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertEquals ( 1 , in . getByteCount ( ) , 0L )
assertNull ( "expected null string" , amqpTextMessageFacade . getText ( ) )
assertNull ( "expected null string" , amqpTextMessageFacade . getText ( ) )
assertNull ( "expected null string" , amqpTextMessageFacade . getText ( ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
GAssert . assertEquals ( expected , actual )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
GAssert . assertEquals ( expected , actual )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertNotNull ( instance )
assertNull ( description ( ) . apply ( item ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( configurationInstance . getStatistics ( ) , is ( notNullValue ( ) ) )
assertThat ( configurationInstance . getStatistics ( ) , is ( notNullValue ( ) ) )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertNotNull ( channel )
assertEquals ( BASE_URL , baseUrl )
assertEquals ( BASE_URL , baseUrl )
assertEquals ( BASE_URL , baseUrl )
assertEquals ( "[]" , list . toString ( ) )
assertEquals ( "http://localhost:9000/api/properties/sonar.core.version" , sonarDetector . buildPropertiesUrl ( url ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertEquals ( new JsonArray ( ) , Json . array ( ) )
assertThat ( factory . get ( ) , is ( sameInstance ( sandboxedServiceContext . getSchemaRegistryClient ( ) ) ) )
assertThat ( factory . get ( ) , is ( sameInstance ( sandboxedServiceContext . getSchemaRegistryClient ( ) ) ) )
assertThat ( factory . get ( ) , is ( sameInstance ( sandboxedServiceContext . getSchemaRegistryClient ( ) ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( ImmutableList . of ( "a" , "b" ) , RichStream . of ( "a" , "b" ) . toImmutableList ( ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertNotNull ( InterfaceField . of ( Field . of ( "x" , int . class ) ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( ImmutableList . of ( "a" , "b" ) , RichStream . of ( "a" , "b" ) . toImmutableList ( ) )
assertThat ( Parameter . withFields ( "id,name" ) ) . hasName ( "fields" ) . hasValue ( "id,name" )
assertEquals ( "GeoServer Catalog Configuration" , config . getIdentifier ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( metaData . toModelValue ( NAME . getValue ( ) ) ) . isEqualTo ( NAME )
assertNull ( pentahoSessionHolderRepositoryProvider . getRepository ( ) )
assertNull ( pentahoSessionHolderRepositoryProvider . getRepository ( ) )
assertNull ( pentahoSessionHolderRepositoryProvider . getRepository ( ) )
assertNull ( pentahoSessionHolderRepositoryProvider . getRepository ( ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( cal . getTime ( ) , parser . parse ( "01.01.1000" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( joiner . join ( ImmutableList . of ( ) ) , is ( "" ) )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertNull ( character )
assertNull ( character )
assertNull ( character )
assertEquals ( "" , toString )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( test , maxDate )
assertEquals ( test , maxDate )
assertEquals ( test , maxDate )
assertEquals ( test , maxDate )
assertEquals ( test , maxDate )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( new Page ( 10 ) . getRegion ( 5 , 5 ) . getPositionCount ( ) , 5 )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( NAME , action . getName ( ) )
assertEquals ( NAME , action . getName ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertNull ( MavenServerCMDState . getMaxXmxStringValue ( null , null ) )
assertThat ( sut . name ( ) , equalTo ( NAME ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( context . get ( "non-existing" ) , nullValue ( ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( context . get ( "non-existing" ) , nullValue ( ) )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertThat ( getResourceRoots ( ) ) . isEmpty ( )
assertEquals ( 3 , count )
assertEquals ( 3 , count )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( SolutionContextListener . solutionPath , solutionContextListener . getRootPath ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( formater . getEnvelopeAddress ( address , DisplayMode . COMMA ) , actual )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertEquals ( actual , "yy-mm-dd" )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( actual , "yy-mm-dd" )
assertEquals ( actual , "yy-mm-dd" )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertNotNull ( builder )
assertNull ( b . getDatabase ( ) )
assertEquals ( expected , actual )
assertThat ( builtObject . transactGetItems ( ) , is ( nullValue ( ) ) )
assertThat ( faker . address ( ) . zipCodeByState ( faker . address ( ) . stateAbbr ( ) ) , matchesRegularExpression ( "[0-9]{5}" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( "test" , mapping . getTableName ( ) )
assertNull ( store . getApplicationForAddress ( "+348005551212" ) )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertEquals ( "name" , name )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "test" , mapping . getTableName ( ) )
assertEquals ( "name" , name )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "name" , name )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( 2 , intSet . size ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( Parameter . with ( "key" , EnumTestEnum . FOO ) ) . hasValue ( "FOO" )
assertThat ( client . apiServices ( ) . withName ( "v1beta1.delete.fabric8.io" ) . delete ( ) . size ( ) == 1 ) . isTrue ( )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertEquals ( "value" , processor . getValue ( request ) )
assertTrue ( chmItsfHeader . toString ( ) . contains ( TestParameters . VP_ISTF_SIGNATURE ) )
assertTrue ( chmItsfHeader . toString ( ) . contains ( TestParameters . VP_ISTF_SIGNATURE ) )
assertEquals ( Classes . simpleName ( ) , "IOException" )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertEquals ( "value" , processor . getValue ( request ) )
assertNull ( processor . getValue ( request ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( configurationInstance . getStatistics ( ) , is ( notNullValue ( ) ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertThat ( "Instance of FuseChannel expected." , builder . build ( ) , IsInstanceOf . instanceOf ( FuseChannel . class ) )
assertThat ( "Instance of FuseChannel expected." , builder . build ( ) , IsInstanceOf . instanceOf ( FuseChannel . class ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertThat ( configurationInstance . getStatistics ( ) , is ( notNullValue ( ) ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertEquals ( UserBean . OUTCOME_ADD_USER , userBean . addUser ( ) )
assertThat ( configurationInstance . getStatistics ( ) , is ( notNullValue ( ) ) )
assertEquals ( transitEncapsulationId , flow . getTransitEncapsulationId ( ) . intValue ( ) )
assertEquals ( "str is null" , ExpressionUtils . isNull ( str ) . toString ( ) )
assertEquals ( "Spaces should be trimmed" , "role" , info . getName ( ) )
assertEquals ( "the-key" , listCaptor . getValue ( ) . getPrefix ( ) )
assertEquals ( "Spaces should be trimmed" , "role" , info . getName ( ) )
assertEquals ( "the-key" , listCaptor . getValue ( ) . getPrefix ( ) )
assertThat ( argument . getValue ( ) . getPayload ( ) . getValue ( ) , equalTo ( "foo" ) )
assertThat ( argument . getValue ( ) . getPayload ( ) . getValue ( ) , equalTo ( "foo" ) )
assertEquals ( "the-key" , listCaptor . getValue ( ) . getPrefix ( ) )
assertEquals ( "the-key" , listCaptor . getValue ( ) . getPrefix ( ) )
assertThat ( getResourceRoots ( ) ) . isEmpty ( )
assertThat ( getResourceRoots ( ) ) . isEmpty ( )
assertThat ( getResourceRoots ( ) ) . isEmpty ( )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertThat ( getProperty ( "hibernate.generate_statistics" ) , is ( "true" ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( writer . get ( ) , is ( "2019-01-01" ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( writer . get ( ) , is ( "2019-01-01" ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertEquals ( "sender" , item . getSender ( ) )
assertNull ( b . getDatabase ( ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertNull ( b . getDatabase ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( expected , channels )
assertEquals ( expected , channels )
assertEquals ( expected , channels )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertNull ( b . getDatabase ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( expected , channels )
assertEquals ( expected , channels )
assertEquals ( expected , channels )
assertEquals ( expected , channels )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( expected , read )
assertEquals ( expected , read )
assertEquals ( expected , read )
assertNull ( b . getDatabase ( ) )
assertThat ( writer . get ( ) , is ( false ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertEquals ( order . getName ( ) , name )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertNull ( b . getDatabase ( ) )
assertNull ( b . getDatabase ( ) )
assertEquals ( expected , channels )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertThat ( writer . get ( ) , is ( "2019-01-01 00:00:00" ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertEquals ( "com.myproject.domain.VwServiceName" , classModel . getFullName ( ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertThat ( writer . get ( ) , is ( "2019-01-01 00:00:00" ) )
assertEquals ( "" , s )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( "test" , pluginForEdFi . nameAssociation ( associationEnd , associationEnd , plugin ) )
assertEquals ( "test" , pluginForEdFi . nameAssociation ( associationEnd , associationEnd , plugin ) )
assertEquals ( "test" , pluginForEdFi . nameAssociation ( associationEnd , associationEnd , plugin ) )
assertThat ( capture . toString ( ) , containsString ( "Ignore mail notice. Because no mail-to setting." ) )
assertEquals ( "\"\\t\\r value \\\\\\foo\\b\uFFFF\uBCAD\\n\\u0083\"" , builder . toString ( ) )
assertThat ( configHolder . getState ( ) . isShowError ( ) ) . isTrue ( )
assertThat ( writer . get ( ) , is ( false ) )
assertFalse ( result )
assertThat ( calvalusProcessor . getName ( ) , equalTo ( "Idepix.Water" ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertEquals ( "01tracked" , stringValue )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertThat ( session . getAttribute ( null ) , nullValue ( ) )
assertEquals ( "" , result )
assertEquals ( name , jobScheduleParam . getName ( ) )
assertEquals ( name , jobScheduleParam . getName ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( name , jobScheduleParam . getName ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( AlosAV2Constants . PROCESSING_1B , metadata . getProcessingLevel ( ) )
assertThat ( HttpResponses . asResponseString ( downloadResponse1 ) ) . isNull ( )
assertEquals ( AlosAV2Constants . PROCESSING_1B , metadata . getProcessingLevel ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertNotNull ( build )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( writer . get ( ) , is ( false ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertThat ( writer . get ( ) , is ( false ) )
assertThat ( restoredRunStateData , is ( Optional . empty ( ) ) )
assertThat ( restoredRunStateData , is ( Optional . empty ( ) ) )
assertThat ( restoredRunStateData , is ( Optional . empty ( ) ) )
assertThat ( restoredRunStateData , is ( Optional . empty ( ) ) )
assertNotNull ( instance )
assertThat ( deserialize ( "null" ) ) . isNull ( )
assertNotNull ( instance )
assertThat ( block . toString ( ) ) . isEqualTo ( "taco" )
assertThat ( deserialize ( "null" ) ) . isNull ( )
assertEquals ( new URI ( "/1.0/images/load" ) , new URI ( builder . loadImage ( ) ) )
assertThat ( deserialize ( "null" ) ) . isNull ( )
assertEquals ( new URI ( "/1.0/images/load" ) , new URI ( builder . loadImage ( ) ) )
assertThat ( deserialize ( "null" ) ) . isNull ( )
assertNotNull ( instance )
assertThat ( block . toString ( ) ) . isEqualTo ( "taco" )
assertThat ( deserialize ( "null" ) ) . isNull ( )
assertEquals ( new URI ( "/1.0/images/load" ) , new URI ( builder . loadImage ( ) ) )
assertThat ( dataType . getMediaType ( ) . getCharset ( ) . get ( ) , equalTo ( UTF_8 ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( "Access Control List Interceptor" , interceptors . get ( 0 ) . getDisplayName ( ) )
assertEquals ( 0 , meldingen . size ( ) )
assertEquals ( expected , o )
assertTrue ( list . isEmpty ( ) )
assertEquals ( expected , read )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( actual , is ( tupleEntryList ( expected ) ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertTrue ( list . isEmpty ( ) )
assertEquals ( dataABC , filter ( dataABC ) )
assertEquals ( expected , read )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "" , result )
assertTrue ( list . isEmpty ( ) )
assertEquals ( gaeMessage . getSubject ( ) , convertedMessage . getSubject ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
assertNotNull ( JvmVersion . getSpecificationTitle ( ) )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
GAssert . assertEquals ( expected , actual )
assertTrue ( Localise . inSmallRing ( g , g . edge ( 0 , 1 ) ) )
assertThat ( MethodGraph . Empty . INSTANCE . getSuperClassGraph ( ) , is ( ( MethodGraph ) MethodGraph . Empty . INSTANCE ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertFalse ( fieldBindingWarning . hidden )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertFalse ( fieldBindingWarning . hidden )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertEquals ( "did foo" , new NonApiSubclass ( ) . doSomething ( "foo" ) )
assertEquals ( value , Value . One )
assertTrue ( url . toString ( ) . endsWith ( "jpetstore/jpetstore-hsqldb.properties" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertThat ( emoji ( Collections . singletonList ( new SimpleScalar ( Severity . BLOCKER . name ( ) ) ) ) ) . isEqualTo ( ":no_entry:" )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertThat ( cryptoConverter . convertToDatabaseColumn ( notCryptedText ) ) . isEqualTo ( cryptedText )
assertThat ( cryptoConverter . convertToDatabaseColumn ( notCryptedText ) ) . isEqualTo ( cryptedText )
assertNull ( new JsonObjectDeserializer ( ) . deserialize ( null , JsonSerializablePojo . class ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertNotNull ( channel )
assertEquals ( "" , result )
assertEquals ( Optional . of ( "nail" ) , item )
assertEquals ( localDate , CONVERTER . convert ( date ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertThat ( makeWsRequest ( Optional . empty ( ) ) , is ( UNAUTHORIZED . code ( ) ) )
assertThat ( makeWsRequest ( Optional . empty ( ) ) , is ( UNAUTHORIZED . code ( ) ) )
assertThat ( makeWsRequest ( Optional . empty ( ) ) , is ( UNAUTHORIZED . code ( ) ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( fromJson ( asJson ( cursor ) , SecretRetrievalCursor . class ) ) . isEqualTo ( cursor )
assertTrue ( ctx . isFixedScale ( ) )
assertNotNull ( build )
assertTrue ( ctx . isFixedScale ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertFalse ( new URIV4FormatValidator ( ) . validate ( "abc" ) . isPresent ( ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertThat ( email , not ( is ( nullValue ( ) ) ) )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertEquals ( "{\"const\":true}" , actual )
assertEquals ( "{\"const\":true}" , actual )
assertEquals ( "https://{serviceEndpointPrefix}.{region}.{secondLevelDomain}" , endpoint )
assertThat ( block . toString ( ) ) . isEqualTo ( "taco" )
assertThat ( block . toString ( ) ) . isEqualTo ( "taco" )
assertFalse ( provider . getReadEncryptionInformation ( SESSION , TEST_TABLE , Optional . empty ( ) ) . isPresent ( ) )
assertNotNull ( testee )
assertFalse ( provider . getReadEncryptionInformation ( SESSION , TEST_TABLE , Optional . empty ( ) ) . isPresent ( ) )
assertNotNull ( testee )
assertEquals ( "Source" , victim . id ( ) . ownerIdentifier )
assertEquals ( "Source" , victim . id ( ) . ownerIdentifier )
assertEquals ( Size . kilobytes ( 64 ) , Size . parse ( "64   kilobytes" ) )
assertNotNull ( builder ( ) )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( "[]" , list . toString ( ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertTrue ( DefaultBucketSettings . builder ( ) . enableFlush ( true ) . build ( ) . enableFlush ( ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( INSTANCE . toString ( ) ) . isEqualTo ( "[]" )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThat ( lower ( "A bCd Iijk" ) , is ( "a bcd iijk" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertEquals ( "service" , s1 . getType ( ) )
assertThat ( ValidCommandApi . class , isHandlerClass ( COMMAND_API ) . with ( method ( "testA" ) . thatHandles ( "context.commandA" ) ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( cal . getTime ( ) , parser . parse ( "01.01.1000" ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertEquals ( SimpleUserSystemService . NAME , userSystem . getName ( ) )
assertThat ( params . regionWithDefault ( ) ) . isEqualTo ( Region . of ( "us-east-1" ) )
assertNull ( capacity ( ) . apply ( item ) )
assertNull ( capacity ( ) . apply ( item ) )
assertNull ( capacity ( ) . apply ( item ) )
assertNull ( capacity ( ) . apply ( item ) )
assertNull ( capacity ( ) . apply ( item ) )
assertNull ( capacity ( ) . apply ( item ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( dataType . getMediaType ( ) . getCharset ( ) . get ( ) , equalTo ( UTF_8 ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
GAssert . assertEquals ( expected , actual )
assertThat ( checkNotEmpty ( " " ) , is ( " " ) )
assertThat ( result ) . isEqualTo ( CodeBlock . builder ( ) . build ( ) )
assertThat ( result ) . isEqualTo ( CodeBlock . builder ( ) . build ( ) )
assertThat ( result ) . isEqualTo ( CodeBlock . builder ( ) . build ( ) )
assertThat ( result ) . isEqualTo ( CodeBlock . builder ( ) . build ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "This is a comment\nwith a  newline" , c . getBody ( ) )
assertEquals ( "This is a comment\nwith a  newline" , c . getBody ( ) )
assertThat ( headerMetaData . normaliseValue ( value ) ) . isEqualTo ( value )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( html , AllowAllSanitizer . sanitize ( html ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertThat ( headerMetaData . normaliseValue ( value ) ) . isEqualTo ( value )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "!visibleDiv!" , $ ( ".visibleDiv" ) . waitUntil ( ) . html ( ) . matches ( Matchers . containsString ( "isibleDi" ) ) . then ( ) . html ( ) )
assertEquals ( "locale" , command . getLocaleKey ( ) )
assertEquals ( expected , read )
assertThat ( dialect . getNativeDriver ( ) , is ( SparkSimbaDatabaseMeta . DRIVER_CLASS_NAME ) )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertEquals ( order . getName ( ) , name )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertThat ( launcher . getVersion ( ) ) . isEqualTo ( VERSION )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertThat ( new BasicAggregationOperation ( source ) . toDocument ( ctx ) ) . isSameAs ( source )
assertEquals ( matcher . getPathOrGlob ( ) , "path" )
assertTrue ( action . get ( ) )
assertThat ( operationPerformed . get ( ) ) . isTrue ( )
assertTrue ( action . get ( ) )
assertTrue ( action . get ( ) )
assertThat ( operationPerformed . get ( ) ) . isTrue ( )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( entry . getDN ( ) , DN . rootDN ( ) )
assertThat ( response . getStatusCode ( ) , equalTo ( HttpStatus . OK ) )
assertThat ( response . getStatusCode ( ) , equalTo ( HttpStatus . OK ) )
assertTrue ( StringUtils . join ( testList ) . equals ( "t, a, j, o" ) )
assertNotNull ( gpf )
assertNotNull ( gpf )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "03declined" , stringValue )
assertEquals ( "03declined" , stringValue )
assertNotNull ( handler )
assertNotNull ( handler )
assertNotNull ( handler )
assertNotNull ( handler )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.util.Map<java.lang.String, java.lang.Long>" )
assertThat ( reflectionHelper . newInstance ( ReflectionHelper . class ) ) . isInstanceOf ( ReflectionHelper . class )
assertThat ( reflectionHelper . newInstance ( ReflectionHelper . class ) ) . isInstanceOf ( ReflectionHelper . class )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertFalse ( list instanceof ArrayList )
assertFalse ( list instanceof ArrayList )
assertThat ( response . request ( ) ) . isSameAs ( request )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertEquals ( 30000 , builder . metadata ( ) . id ( "1234" ) . size ( 30000 ) . build ( ) . getContent ( ) . getNbRecords ( ) )
assertEquals ( "allTopics" , topicNames . get ( 0 ) )
assertThat ( handler . get_role_names ( ) , is ( roleNames ) )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( parse , equalTo ( ( Map < String , String > ) of ( "key" , "value" ) ) )
assertThat ( parse , equalTo ( ( Map < String , String > ) of ( "key" , "value" ) ) )
assertEquals ( "allTopics" , topicNames . get ( 0 ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( parse , equalTo ( ( Map < String , String > ) of ( "key" , "value" ) ) )
assertThat ( parse , equalTo ( ( Map < String , String > ) of ( "key" , "value" ) ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertNotNull ( Elements . body ( ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( availableWorkflowServiceList ( ) ) . hasSize ( AMOUNT_OF_AUTOSTARTED_SERVICES + 1 )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertThat ( dataSetMetadataRepository . get ( "3d72677c-e2c9-4a34-8c58-959a56ec8643" ) , nullValue ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( 4 , supplier . getBaseIntBuffers ( ) . size ( ) )
assertTrue ( stdoutWithNewlines ( ) . contains ( StellarShell . WELCOME ) )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
assertThat ( config . getStage ( ) , is ( Stage . PRODUCTION ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertThat ( config . getStage ( ) , is ( Stage . PRODUCTION ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertEquals ( Integer . valueOf ( 1 ) , this . intSet . getFirst ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertEquals ( "person-name" , name )
assertEquals ( 2000 , Duration . seconds ( 2 ) . toMilliseconds ( ) )
assertThat ( actual ) . hasSize ( 1 )
assertEquals ( order . getName ( ) , name )
assertEquals ( new Integer ( EXPECTED ) , reader . decode ( ) )
assertEquals ( new Integer ( EXPECTED ) , reader . decode ( ) )
assertEquals ( new Integer ( EXPECTED ) , reader . decode ( ) )
assertEquals ( new Integer ( EXPECTED ) , reader . decode ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( request . invocation ( ) ) . isSameAs ( invocation )
assertThat ( CompressionAlgorithm . NONE . toString ( ) ) . isEqualTo ( "None" )
assertEquals ( CMS , service . getName ( ) )
assertEquals ( sink , wop . getSink ( ) )
assertThat ( validator . toString ( ) ) . isEqualTo ( "JwtValidator{}" )
assertNotNull ( subject . getFrom ( ) )
assertThat ( validator . toString ( ) ) . isEqualTo ( "JwtValidator{}" )
assertThat ( validator . toString ( ) ) . isEqualTo ( "JwtValidator{}" )
assertThat ( validator . toString ( ) ) . isEqualTo ( "JwtValidator{}" )
assertThat ( new Parent ( ) . get ( ) ) . isEqualTo ( "from parent" )
assertThat ( validator . toString ( ) ) . isEqualTo ( "JwtValidator{}" )
assertThat ( optionalPackage . get ( ) , is ( "org.mule.test.heisenberg.extension.model.hidingPlaces" ) )
assertThat ( writer . get ( ) , is ( "2019-01-01" ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> EndpointId . of ( "" ) ) . withMessage ( "Value must not be empty" )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> EndpointId . of ( "" ) ) . withMessage ( "Value must not be empty" )
assertThat ( fromJson ( asJson ( client ) , Client . class ) ) . isEqualTo ( client )
assertThat ( actual ) . hasSize ( 1 )
assertNotNull ( psConf . getConfiguration ( ) )
assertEquals ( "SNMPWrapper Error: SNMP client is null" , e . getMessage ( ) )
assertEquals ( "SNMPWrapper Error: SNMP client is null" , e . getMessage ( ) )
assertNotNull ( "TaskManager exists" , adapter . getTaskManager ( ) )
assertNotNull ( "TaskManager exists" , adapter . getTaskManager ( ) )
assertNotNull ( "TaskManager exists" , adapter . getTaskManager ( ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertTrue ( passedResult . getStatus ( ) . isOk ( ) )
assertThat ( actual ) . hasSize ( 1 )
assertEquals ( 0 , AttributesMap . empty ( ) . size ( ) )
assertEquals ( 3.0 , prediction . getPrediction ( ) )
assertThat ( MultiSet . empty ( ) ) . isEmpty ( )
assertEquals ( Limit . of ( 1 ) , limit )
assertEquals ( Limit . of ( 1 ) , limit )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
assertEquals ( "TOKFIELD == 'BIRD'" , parseQuery ( "TOKFIELD:BIRD" ) )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
areEquals ( checkListSupplier . get ( ) . getOptionsAsText ( ) , allValues )
assertTrue ( SamlRegisteredServiceServiceProviderMetadataFacade . get ( resolver , service , authnRequest ) . isEmpty ( ) )
assertThat ( new ClassInjector . UsingReflection . Dispatcher . Unavailable ( null ) . getClassLoadingLock ( classLoader , FOO ) , is ( ( Object ) classLoader ) )
assertThat ( service . getServiceName ( ) , is ( "test" ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( from ( result ) . getList ( "items" ) ) . isNotNull ( )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
assertThat ( ConfigurationUtils . tryGetGlobalProperty ( TEST_PROPERTY_NAME ) ) . isEqualTo ( "MyNiceValue" )
assertNull ( operationResult . getEntity ( ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( method . getName ( ) , method . invoke ( session ) == null , method . invoke ( newSession ) == null )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "" , umpleClass . getPackageName ( ) )
assertEquals ( "" , Helper . getPackageName ( "SomeClass" ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertThat ( ProviderAnnotations . getInterfaceName ( fixture ) , equalTo ( "tests/test" ) )
assertNotNull ( ds )
assertEquals ( "" , s )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( expected , Reference . decode ( uri ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertEquals ( "bar" , project . getProperty ( "bar" ) )
assertEquals ( "Axxxx" , result )
assertEquals ( "Axxxx" , result )
assertEquals ( "Axxxx" , result )
assertEquals ( null , actual )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertEquals ( WKT , out . toString ( ) )
assertEquals ( "Hello" , internalPlanetService . sayHello ( getServiceContext ( ) ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertNull ( endpoint . getBinding ( ) )
assertNotNull ( reader )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "Body" , reader . getLocalName ( ) )
assertNotNull ( reader )
assertEquals ( "Body" , reader . getLocalName ( ) )
assertNotNull ( reader )
assertThat ( writer . toString ( ) , is ( emptyString ( ) ) )
assertEquals ( "helloworld/HelloWorldService.componentType" , resourceExport . getURI ( ) )
assertEquals ( "Result should have been an empty string since the cookie name is null." , "" , result )
assertEquals ( tasks , counter . get ( ) )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertArrayEquals ( te . array , te2 . array )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertNotNull ( annotation )
assertNotNull ( annotation )
assertNotNull ( "ClassSpec not null" , result )
assertEquals ( TabletState . ASSIGNED , tls . getState ( liveServers ) )
assertNotNull ( multiMatchQueryImpl )
assertEquals ( 100 , counter . get ( ) )
assertEquals ( 100 , counter . get ( ) )
assertThat ( UserIdHelper . get ( subject ( "test" ) ) , is ( "test" ) )
assertNotNull ( jobMeta )
assertNotNull ( configuration . getParameters ( ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( error , Futures . completionExceptionCause ( error ) )
assertNotNull ( result )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( options . size ( ) , is ( 0 ) )
assertNull ( arrayType . getParentClass ( ) )
assertNotNull ( operation )
assertEquals ( "invoke" , BeanHelper . invoke ( this , getName ) )
assertEquals ( "dbName" , HBaseVariantTableNameGenerator . getDBNameFromVariantsTableName ( "dbName_variants" ) )
assertThat ( actual , empty ( ) )
assertThat ( actual , empty ( ) )
assertThat ( actual , empty ( ) )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertThat ( DOT . token ( ) , is ( "." ) )
assertNotNull ( actual )
assertNotNull ( "Response is null." , response )
assertNotNull ( actual )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( false , result )
fail ( ex . toString ( ) )
fail ( ex . toString ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "bar" , ctx . getNamespaceURI ( "foo" ) )
assertThat ( PortablePath . of ( "src" + fileSeparator + "test" + fileSeparator + "folder" , isWindowsSeparator ) . getFileName ( ) ) . isEqualTo ( "folder" )
assertEquals ( "\\u0000\\u0001\\u0002\\u0003\\u0004" , output . toString ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( new ByteWritable ( ( byte ) 12 ) , inspector . set ( obj , ( byte ) 12 ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertTrue ( true )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertEquals ( "property" , theProperty . getName ( ) )

assertEquals ( "http://example.test/" , uri . resolve ( "http://example.test/" ) )
assertThat ( e . getOError ( ) . getCode ( ) , is ( "ServiceUnavailableException" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertNull ( qualifiedName )
assertEquals ( VerwerkingsResultaat . GESLAAGD , VerwerkingsResultaat . parseNaam ( "Geslaagd" ) )
assertNotNull ( ds )
assertThat ( array . toString ( ) , equalTo ( "[\"1\",\"2\",\"3\"]" ) )
assertTrue ( new TerminalOptionsInputValidator ( new ProtocolFactory ( list ) ) . validate ( uri ) )
assertThat ( controller . paramValues ( "aaa" ) , is ( array ) )
assertNull ( results )
fail ( "Expected RuntimeException." )
assertNotSame ( m1 , m2 )
assertEquals ( annotationAttributes , result )
assertEquals ( "text" , converter . convert ( array , String . class ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertEquals ( HttpURLConnection . HTTP_OK , login ( webConversation , getOrionTestName ( ) , getOrionTestName ( ) ) )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( annotationAttributes , result )
assertThat ( ( String ) processBag . getProperty ( "test" ) , is ( String . valueOf ( id ) ) )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( MessageType . C , messageType )
assertNull ( message )
assertEquals ( REPLY_TO_ANONYMOUS , properties . getReplyTo ( ) . getAddress ( ) . getValue ( ) )
assertEquals ( event . getEventProperties ( ) , map )
assertNull ( message )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( ( Integer ) 123 , config )
assertThat ( connected , is ( true ) )
assertEquals ( property . getType ( ) , String . class )

assertThat ( actual , empty ( ) )
assertEquals ( RepositoryTest . class . getName ( ) . replace ( "." , "/" ) , actual )
assertEquals ( 0 , array . length )
assertEquals ( INSTANCE . getString1Arg ( "A" ) , func . apply ( INSTANCE , "A" ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertNotNull ( ci )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( is , adapter . getAttributeNames ( ) )
assertNull ( getContext ( ) )
assertThat ( driver . toString ( ) , is ( notNullValue ( ) ) )
assertNull ( new NotificationMessage ( ) . getPayloadString ( ENTRY_NAME ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertEquals ( annotationAttributes , result )
assertEquals ( cc . toString ( ) , "no-cache,no-transform" )
assertEquals ( cc . toString ( ) , "no-transform" )
assertTrue ( cc . toString ( ) . contains ( "private=\"a,b\"" ) )
assertTrue ( cc . toString ( ) . contains ( "no-cache=\"c,d\"" ) )
assertEquals ( DataModifiedTimeGenerator . generateModifiedTime ( date ) , new SimpleDateFormat ( "yyyyMMddHHmmssSSS" ) . format ( date ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertThat ( request . getHeader ( "aaa" ) , is ( "111" ) )
assertEquals ( VerwerkingsResultaat . GESLAAGD , VerwerkingsResultaat . parseNaam ( "Geslaagd" ) )
assertEquals ( null , SearchUtil . getFirstListValueFromMap ( Collections . singletonMap ( "someKey" , Collections . emptyList ( ) ) , "someKey" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( Locale . ENGLISH , reduced . locale ( ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertEquals ( "MediaProcessors" , MediaProcessor . list ( ) . getUri ( ) )
assertEquals ( "MediaProcessors" , MediaProcessor . list ( ) . getUri ( ) )
assertEquals ( annotationAttributes , result )
assertNotNull ( output )
assertNotNull ( output )
assertEquals ( null , JsonUtils . parseDateRfc822 ( null ) )
assertEquals ( exp , parse )
assertEquals ( dateFormat . format ( date ) , dateFormat . format ( response . getLastModified ( ) ) )
assertEquals ( dateFormat . format ( date ) , dateFormat . format ( response . getLastModified ( ) ) )
assertEquals ( 405 , launcher . service ( "GET" , "/a" , "" , null , null , null ) . getStatus ( ) )
assertEquals ( 405 , launcher . service ( "GET" , "/a" , "" , null , null , null ) . getStatus ( ) )
assertEquals ( xStringList , list )
assertThat ( metadata . getClusterName ( ) ) . hasValue ( CcmBridge . CLUSTER_NAME )
assertThat ( metadata . getClusterName ( ) ) . hasValue ( CcmBridge . CLUSTER_NAME )
assertEquals ( "/cntrl" , r . toString ( ) )
assertEquals ( newArrayList ( tag ) , response . getHeaders ( ) . get ( "ETag" ) )
assertEquals ( "String returned from ClientRequest filter doesn't contain the expected value" , "42" , str )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertNotNull ( "Should not be null" , response . getEntity ( ) )
assertEquals ( HttpResponseCodes . SC_OK , response . getStatus ( ) )
assertEquals ( annotationAttributes , result )
assertEquals ( 1 , value )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertNotNull ( build )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( "Hello world!" , messageComponent . getMessage ( ) )
assertEquals ( "h1v1" , headers . getFirst ( "h1" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertTrue ( ContextDataFactory . createContextData ( ) instanceof SortedArrayStringMap )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , template )
assertNull ( EventType . fromName ( "hmpf" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( event , listener . event )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertNull ( this . producer . produce ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , instance . getURI ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertNotNull ( managerFactory )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( purRepository , diConfig . getRepository ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( expected , updated )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertNotNull ( uri )
assertEquals ( name , testName )
assertEquals ( event , listener . event )
assertEquals ( name , testName )
assertNotNull ( uri )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertNotNull ( actual )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertNotNull ( uri )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertEquals ( name , testName )
assertEquals ( event , listener . event )
assertEquals ( name , testName )
assertNotNull ( uri )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertArrayEquals ( msg , EXPECTED_EMPTY , result )
assertNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertEquals ( "{scheme}://{host}/a/b%2Fc?{q}={v}#{fragment}" , builder . toTemplate ( ) )
assertEquals ( "https://localhost/a/b/c?test=hello#hello_fragment" , builder . toTemplate ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , result )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "No Filter" , Util . getMessage ( "no-filter" , "test" ) )
assertNotNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNotSame ( testPath , path )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , Util . encodeUrl ( text ) )
assertEquals ( expected , Util . encodeUrl ( text ) )
assertEquals ( expected , Util . encodeUrl ( text ) )
assertEquals ( expected , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "first" , mockedList . get ( 0 ) )
assertThat ( queryParser . getQueryString ( query , ProductBean . class ) ) . isEqualTo ( "popularity:[* TO *]" )
assertThat ( queryParser . getQueryString ( query , ProductBean . class ) ) . isEqualTo ( "popularity:[* TO *]" )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "" , expressionLanguage . getValue ( ) )
assertEquals ( "" , expressionLanguage . getValue ( ) )
assertEquals ( "00" , StringUtils . padEnd ( null , 2 , '0' ) )
assertEquals ( "00" , StringUtils . padEnd ( null , 2 , '0' ) )
assertEquals ( null , result )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "SKIP_LINE" , converter . toString ( ParseState . SKIP_LINE ) )
assertNull ( map . get ( null ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertThat ( BackendExecutorContext . getInstance ( ) . getExecutorEngine ( ) , is ( BackendExecutorContext . getInstance ( ) . getExecutorEngine ( ) ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertNotNull ( "Helper from AdWordsServices is null" , helper )
assertNotNull ( "Helper from AdWordsServices is null" , helper )
assertEquals ( 81 , options . getOptions ( ) . port )
assertArrayEquals ( actual , new Object [ ] { "a" , "b" , 5 } )
assertArrayEquals ( actual , new Object [ ] { "a" , "b" , 5 } )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( witnessList , partList )
assertNotNull ( ec )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertEquals ( expected , read )
assertThat ( iterator . next ( ) . getMessage ( ) ) . isEqualTo ( "abc" )
assertEquals ( "John Smith" , widget . name . getText ( ) )
assertEquals ( false , result )
assertThat ( findTargetTypeName ( new Annotation [ 0 ] , String . class ) , nullValue ( ) )
assertEquals ( "" , res )
assertEquals ( "" , res )
assertEquals ( "" , res )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( quote ( "2013-04-09T09:06:17+02:00" ) , mapper . writeValueAsString ( dt ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "hello world" , Escaper . escapeWithQuotesAsMakefileValueString ( "hello world" ) )
assertEquals ( "hello world" , Escaper . escapeWithQuotesAsMakefileValueString ( "hello world" ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "http://example.com/my/path?one=two&three=four" , builder . toString ( ) )
assertThat ( event . getMessage ( ) , Matchers . stringContainsInOrder ( "%s %d" , "a" ) )
assertThat ( visibilityCache . isVisible ( repo , walk , access , commitB . getId ( ) , known ) ) . isTrue ( )
assertEquals ( "result" , testBean . getResult ( ) )
assertEquals ( annotationAttributes , result )
assertArrayEquals ( te . array , te2 . array )
assertThat ( ReflectUtils . getName ( c ) , equalTo ( "(java.util.List,int[])" ) )
assertEquals ( a , address . getAddress ( ) )
assertEquals ( a , address . getAddress ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( event , listener . event )
assertEquals ( c , c )
assertTrue ( true )
assertEquals ( false , result )
assertEquals ( false , result )
assertThat ( provider . getServer ( ) , equalTo ( "demo-server" ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertEquals ( 99 , rangeSequence . itemAt ( 98 ) . toJavaObject ( Integer . class ) . intValue ( ) )
assertEquals ( "John" , name )
assertEquals ( true , result )
assertEquals ( true , result )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertEquals ( true , result )
assertTrue ( expressions . evaluateValueExpression ( "#{foo}" ) . equals ( "baz" ) )
assertEquals ( REPLY_TO_ANONYMOUS , properties . getReplyTo ( ) . getAddress ( ) . getValue ( ) )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertNotNull ( result )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "dir/file" , file . getPath ( ) )
assertTrue ( clientBundle . icon ( ) . transform ( ) instanceof DataResource )
assertEquals ( lastNum ( getSysOut ( ) ) , 24 )
assertEquals ( authenticator , aURL . getAuthenticator ( ) )
assertEquals ( val , result )
assertEquals ( annotationAttributes , result )
assertThat ( e . getSource ( ) , is ( application ) )
assertThat ( e . getSource ( ) , is ( application ) )
assertThat ( change . isBreakingChange ( aConnector ( ) . build ( ) ) ) . isFalse ( )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertThat ( Window . Location . getProtocol ( ) ) . isEqualTo ( "http:" )
assertEquals ( "" , path . toString ( ) )
assertNotEquals ( "" , result )
assertEquals ( "" , path . toString ( ) )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertNull ( requestConfig )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertThat ( lotsOfSpans ( ) . filter ( s -> sampler . isSampled ( s . traceId ( ) , false ) ) ) . isEmpty ( )
assertNotNull ( cseclientrequest . getHeaders ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( "2" , result . get ( 0 ) )
assertTrue ( true )
assertEquals ( "String returned from ClientRequest filter doesn't contain the expected value" , "42" , str )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertNull ( impl . handleRequest ( req , resp ) )
assertThat ( griffinResponse . getStatus ( ) ) . isEqualTo ( 201 )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertThat ( evaluateExpression ( "ambiguous()" ) ) . isEqualTo ( "from-root" )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( false , result )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertEquals ( false , result )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( "$foo" , s )
assertEquals ( s , s2 )
assertEquals ( s , s2 )
assertEquals ( "c" , evalExpression ( "[a b]" , ev ) )
assertEquals ( witness , t )
assertEquals ( expected , options . getOptions ( ) . url )
assertEquals ( 2 , listJobsResult . size ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertThat ( m . getData ( ) ) . isEqualTo ( b )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( ArrayList . class , ReflectionUtil . newInstance ( ArrayList . class ) . getClass ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "false" , property )
assertEquals ( "false" , property )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertNull ( ret )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertNull ( ret )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( 0 , query . getRadius ( ) , 0.0000001 )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertNull ( ret )
assertNull ( ret )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertThat ( bindings . getCondition ( ) ) . hasToString ( "person.name = ?[$1] OR person.bar = ?[$2]" )
assertThat ( bindings . getCondition ( ) ) . hasToString ( "person.name = ?[$1] OR person.bar = ?[$2]" )
assertThat ( query . toDocument ( ) . get ( "num" ) ) . isNull ( )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertNull ( operationResult . getEntity ( ) )
assertNull ( operationResult . getEntity ( ) )
assertNull ( filter ( null ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertFalse ( filter . accept ( "the" ) )
assertThat ( invocations ) . startsWith ( "visitStart" ) . endsWith ( "visitEnd" ) . contains ( "visitFileHeader" )
assertThat ( invocations ) . startsWith ( "visitStart" ) . endsWith ( "visitEnd" ) . contains ( "visitFileHeader" )
assertFalse ( filter . accept ( "the" ) )
assertThat ( NestBean . class . getName ( ) , equalTo ( c . getName ( ) ) )
assertFalse ( filter . accept ( "the" ) )
assertEquals ( "localhost" , map . get ( "mail.server.host" ) )
assertThat ( map . get ( "different name" ) , nullValue ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertThat ( x . getCause ( ) , instanceOf ( ConnectException . class ) )
assertEquals ( baseUri , m . getBaseURI ( ) . toString ( ) )
assertNotNull ( "unable to create service in DB" , service )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertTrue ( response . getBodyAsString ( ) . contains ( "\"infoCache\":" ) )
assertTrue ( npe . getMessage ( ) . contains ( "Cannot create a literal from a null" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( 185 , res3 . getBody ( ) . getLength ( ) )
assertEquals ( "ja" , new Configuration ( new File ( "" ) , symbolTable , emptyList ( ) , "ja" , false ) . getKey ( ) )
assertEquals ( src , translate ( src ) )
assertEquals ( "ja" , new Configuration ( new File ( "" ) , symbolTable , emptyList ( ) , "ja" , false ) . getKey ( ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( null , articleId )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( 0.1 , crossover . crossoverProbability ( ) , EPSILON )
assertThat ( ex . getResponse ( ) . getStatus ( ) ) . isEqualTo ( Status . NOT_FOUND . getStatusCode ( ) )
assertEquals ( "abc" , html )
assertTrue ( "The client must be valid." , oauthClientStore . validateClient ( op2Client . getClientId ( ) , op2Client . getClientSecret ( ) ) )
assertEquals ( 1 , wizard . getPages ( ) . size ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertNotNull ( bulk )
assertEquals ( "image/png" , FileUtil . determineFileType ( file , "cc0.png" ) )
assertEquals ( "image/png" , FileUtil . determineFileType ( file , "cc0.png" ) )
assertEquals ( e , input )
assertEquals ( "Should have returned the matched route" , THE_MATCHED_ROUTE , request . matchedPath ( ) )
assertEquals ( "" , result )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertNull ( reader , "Expect null for the reader when no change set exists for the drift definition." )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "" , result )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "{}" , writer . toString ( ) )
assertEquals ( "{\"name\": \"name_Value\"}" , writer . toString ( ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( IDENT ) )
assertEquals ( version . getVersion ( ) . hashCode ( ) , version . hashCode ( ) )
assertThat ( config . getPlatformAuthUrl ( ) , equalTo ( PLATFORM_AUTH_URL + OCS_PLATFORM_AUTH_DEFAULT_PATH ) )
assertTrue ( notified )
assertEquals ( false , msg . getDTEFlag ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertEquals ( false , msg . getDTEFlag ( ) )
assertEquals ( CAUSE_MESSAGE , result . getMessage ( ) )
assertNull ( exchange . getPhase ( ) )
assertNotNull ( mpd )
assertNull ( issueType . getObject ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertNotNull ( limit . getEndpoint ( ) )
assertEquals ( src , translate ( src ) )
assertEquals ( "01" , IOUtils . toString ( input , Charset . defaultCharset ( ) ) )
assertEquals ( "Could not find CloudSdkPreferenceResolver" , 1 , found )
assertEquals ( "Could not find CloudSdkPreferenceResolver" , 1 , found )
assertEquals ( strip ( collectionText ( true , false ) ) , fjson . toString ( collection ( ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertNull ( CompressionPolicyBuilder . getAssertion ( m ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( "Use Fallback Repositories" , true , config . useFallbackRepositories ( ) )
fail ( "should failed parse the config from bytes" )
assertEquals ( "HandlerManager" , name )
assertNull ( TStr . join ( collection ) )
assertFalse ( result )
assertNotNull ( Elements . a ( ) )
assertNotEquals ( UniqueIdGenerator . newUniqueId ( ) , UniqueIdGenerator . newUniqueId ( ) )
assertNull ( format )
assertEquals ( c , c )
assertEquals ( control , swipeLayout . getOnTopControl ( ) )
assertTrue ( detector . isClassLoaded ( JBossDetectorTest . class . getName ( ) , inst ) )
assertEquals ( true , result )
assertFalse ( "Cought exception." , true )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "info" , adapter . getServerInfo ( ) )

assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertTrue ( list . isEmpty ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( "Default VM URL in incorrect" , "failover:(vm://embedded-broker?create=false)" , instance . getVmURL ( ) )
assertEquals ( "create returns incorrect object." , "com.ibm.ws.security.javaeesec.identitystore.IdentityStoreHandlerImpl" , ishb . create ( cc ) . getClass ( ) . getName ( ) )
assertTrue ( _persistableSpi . canDecode ( document . getRootElement ( ) ) )
assertTrue ( _persistableSpi . canDecode ( document . getRootElement ( ) ) )
assertEquals ( "bye" , lwt . getMessage ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertTrue ( "Server 1 should be fenced and standby" , server1Fenced )
assertTrue ( "Server 1 should be fenced and standby" , server1Fenced )
assertEquals ( "" , result )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( FORBIDDEN_403 , response . getStatus ( ) )
assertThat ( response . getStatus ( ) ) . isEqualTo ( Http . OK )
assertNull ( test . toString ( ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )


JSONAssert . assertEquals ( "{}" , node . toString ( ) , false )
assertEquals ( result [ i ] , testData [ i ] )
assertEquals ( result [ i ] , testData [ i ] )
assertThat ( association . getId ( ) , is ( equalTo ( COLLECTION_ID ) ) )
assertNotNull ( "Entity must not be null" , entityPrivacyPreferences )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( expected , ServiceAccountCredentials . getUriForSelfSignedJWT ( uri ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( expected , ServiceAccountCredentials . getUriForSelfSignedJWT ( uri ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
Assert2 . assertEquals ( response . getStatus ( ) , HttpURLConnection . HTTP_UNAUTHORIZED )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( HELLO_WORLD , entity )
assertEquals ( HELLO_WORLD , entity )
assertThat ( value . get ( ) , is ( "configuredAsyncValue" ) )
assertEquals ( "hi rest!" , message )
assertEquals ( "hi rest!" , message )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertNotNull ( post )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "a" , s )
assertEquals ( "a" , s )
assertEquals ( "a" , s )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertEquals ( ERROR_MSG , "/test" , response . readEntity ( String . class ) )
assertEquals ( ERROR_MSG , "/test" , response . readEntity ( String . class ) )
assertEquals ( 307 , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertThat ( r . getStatus ( ) ) . isEqualTo ( 200 )
assertEquals ( valuableData , result )
assertEquals ( "/one" , result . getResult ( ) )
assertEquals ( "ok" , stream )
assertEquals ( 307 , response . getStatus ( ) )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertEquals ( response , "OK" )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertNotNull ( ds )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "HELLO WORLD" , response . readEntity ( String . class ) )
assertEquals ( "a" , response . readEntity ( String . class ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 403 , response . getStatus ( ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( new JSON ( ) , new JSON ( ) . set ( "foo" , new JSON ( ) ) . getJSON ( "foo" ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertEquals ( 500 , r . getStatus ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertThat ( BigDecimalUtil . toBigDecimal ( null ) , is ( nullValue ( ) ) )
assertEquals ( "http://localhost:9000/api/properties/sonar.core.version" , sonarDetector . buildPropertiesUrl ( url ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( APPLICATION_XML , result )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( john , entity )
assertEquals ( a , address . getAddress ( ) )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( APPLICATION_JSON , result )
assertEquals ( "provider" , response )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( mojo . getArtifactFile ( ) . getName ( ) , is ( "foo-1.0-SNAPSHOT.woapplication" ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "provider" , response )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( expected , TransformationErrorCode . AliasForMetamodelAlreadyExists . getFullyQualifiedCode ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "parameter 1 is not optional but null was provided" , e . getMessage ( ) )
assertEquals ( "parameter 1 is not optional but null was provided" , e . getMessage ( ) )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertNotNull ( in )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( "" , result )
assertEquals ( "1,2,3" , testPm . listOfLongsWithoutHelperImpl . getValueAsString ( ) )
assertThat ( entity . getKey ( ) . getId ( ) , is ( not ( 0L ) ) )
assertEquals ( 200 , res . getStatus ( ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThat ( contentMimeType , equalTo ( ContentType . TEXT_HTML . getMimeType ( ) ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Hi REST!" , message )
assertEquals ( "Hello World!:EJB3Bean" , proxy . echo ( "Hello World!" ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "HELLO WORLD" , response . readEntity ( String . class ) )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( 503 , r . getStatus ( ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( "Animal" )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertTrue ( "Known content was not found in .doc" , readAll ( result ) . contains ( "quick brown fox" ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "provider" , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "ok" , stream )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "ok" , stream )
assertEquals ( JsonBindingProvider . called , Boolean . TRUE )
assertEquals ( "{\"value\":\"hi rest!\"}" , message )
assertEquals ( "ok" , stream )
assertEquals ( "hi rest!" , message )
assertEquals ( FooException . class . getName ( ) , response )
assertThat ( content . getBody ( ) ) . contains ( "/custom-" )
assertNotNull ( ds )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertNotEquals ( value , testBean . getSimpleReadOnly ( ) )
assertEquals ( "ok" , response )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( FooException . class . getName ( ) , response )
assertNotNull ( in )
assertEquals ( "" , value )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "test" , getFirstOrNull ( Collections . singletonList ( "test" ) ) )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( response . readEntity ( String . class ) , OK_200 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
assertEquals ( "hello" , FuturesExtra . getCompleted ( Futures . immediateFuture ( "hello" ) ) )
assertEquals ( "hello" , FuturesExtra . getCompleted ( Futures . immediateFuture ( "hello" ) ) )
assertThat ( holder . get ( ) , is ( message ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertTrue ( "Expected @Context injection of Providers to occur before @PostConstruct method invoked, but was not" , b )
assertTrue ( "Expected @Context injection of Providers to occur before @PostConstruct method invoked, but was not" , b )
assertEquals ( "immediateResume" , str )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( response . readEntity ( String . class ) , OK_200 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( classLoader . loadClass ( DelegatingClassLoaderTest . class . getName ( ) ) )
assertEquals ( "hi foo!" , hello . hi ( "foo" ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertNotNull ( "Response is null." , response )
assertEquals ( "Error" , error . toString ( ) )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertNull ( character )
assertEquals ( "Hi (including POJO interceptor)" , response )
assertNotNull ( resource )
assertEquals ( 1 , result )
assertEquals ( "Hello,      World!" , MessageUtils . getMessage ( ) )
assertTrue ( "Incorrect cause " + cause , cause instanceof TestException )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( lines ) . containsExactly ( TEST_DATA [ 0 ] . trim ( ) , TEST_DATA [ 1 ] + TEST_DATA [ 2 ] . trim ( ) , TEST_DATA [ 3 ] . trim ( ) , TEST_DATA [ 4 ] + TEST_DATA [ 5 ] + TEST_DATA [ 6 ] )
assertEquals ( "Name is inconsistent!" , name , record . getName ( ) )
assertEquals ( s , s2 )
assertEquals ( s , s2 )
assertEquals ( "" , step . getPath ( ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
fail ( )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "Error" , error . toString ( ) )
assertNotNull ( "Error message is empty" , npe . getMessage ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertTrue ( e . getMessage ( ) . contains ( "setter" ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertThat ( TemplateParser . DEFAULT . parse ( " {% if true == true %} true {% else %} false {% endif %} " ) . render ( ) , is ( "  true  " ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "resolved" ) ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertThat ( r . getStatus ( ) ) . isEqualTo ( 200 )
assertEquals ( valuableData , result )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "ok" , stream )
assertNull ( john )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( protocol . getExtension ( ) , equalTo ( "extension" ) )
assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertNotNull ( "cannot find resource \"ajaxslt/test/xpath.html\"" , url )
fail ( "Expected RuntimeException." )
assertThat ( response . getStatus ( ) , is ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "value" , CollectionsUtil . getAnyFrom ( populatedList ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertThat ( ( ( HasString ) test ) . getString ( ) ) . isEqualTo ( "a string" )
assertEquals ( "SecondFirstHi ejbthree1852" , result )
assertSame ( expected , definer . findLoadedClass ( expected . getClassLoader ( ) , expected . getName ( ) ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( "ok" , api . test ( ) )
assertThat ( loader . getResource ( "demo/Application.java" ) ) . isNotNull ( )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "Hello user1 with roles and with attributes!" , proxy . sayHello ( ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( out . toString ( ) , parseJSONToString ( json ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNull ( DiskCachedTile . getCacheFolder ( ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertEquals ( tsdata , new StreamedCollection < > ( hist :: stream ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "" , a . encode ( num_to_hash ) )
assertThat ( String . valueOf ( LEFT ) ) . isEqualTo ( LEFT . subSequence ( 0 , 1 ) )
fail ( "Expected " + SOAPFaultException . class . getName ( ) )
fail ( "Expected " + SOAPFaultException . class . getName ( ) )
assertEquals ( "xx10.20.130.230" , regexp )
assertEquals ( "xx10.20.130.230" , regexp )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertEquals ( "ValueSqlFragment:test" , test . toString ( ) )
assertEquals ( "Ville" , cp . getValue ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( fromJson ( asJson ( request ) , BatchCreateOrUpdateSecretsRequestV2 . class ) ) . isEqualTo ( request )
assertNotNull ( "rel previous not found" , dummyUberNode . getFirstByRel ( Link . REL_PREVIOUS ) )
assertNotNull ( "rel previous not found" , dummyUberNode . getFirstByRel ( Link . REL_PREVIOUS ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertEquals ( "png" , TestUtils . getFormatName ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) )
assertEquals ( null , ComparatorType . getByClassName ( null ) )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertEquals ( "Expected output in GZIP." , TEST_STRING_IN_GZIP , streamBytes )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertNull ( findElement ( parent , null , null ) )
assertEquals ( "foo://bar" , l . getValue ( ) )
assertEquals ( "foo://bar" , l . getValue ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( quote ( "2013-04-09T09:06:17+02:00" ) , mapper . writeValueAsString ( dt ) )
assertEquals ( EXIT_FAILURE , returnValue )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( getBinaryDistribution ( ) . exists ( ) )
assertEquals ( workerAddress , operation . getWorkerAddress ( ) )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( Can . < String > of ( "c" , "b" , "a" ) , Can . < String > of ( "a" , "b" , "c" ) . reverse ( ) )
assertEquals ( "Property stringProperty is mandatory but no value was provided" , e . getMessage ( ) )
assertThat ( response . getOutputAsString ( ) , is ( data ) )
assertThat ( response . getOutputAsString ( ) , is ( data ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( String . class . getName ( ) , propertyType . getName ( ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( "Parse Error: 'UNKNOWN' contains no valid operation" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertTrue ( e . getMessage ( ) . indexOf ( "trombone" ) > - 1 )
assertThat ( classLoader . defineClass ( Bar . class . getName ( ) , ClassFileLocator . ForClassLoader . read ( Bar . class ) ) , is ( ( Object ) type ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertTrue ( e . getMessage ( ) . indexOf ( "trombone" ) > - 1 )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( expected , ( ( DefaultMessageBuilder ) builder . build ( ) . getMessageBuilder ( ) ) . buildMessageHeaderData ( context ) )
assertThatJson ( "{\"name.with.dot\": \"value\"}" ) . node ( "name\\.with\\.dot" ) . isStringEqualTo ( "value" )
assertThatJson ( "{\"name.with.dot\": \"value\"}" ) . node ( "name\\.with\\.dot" ) . isStringEqualTo ( "value" )
assertTrue ( err . toString ( ) . contains ( "Compression codec (default: deflate)" ) )
assertEquals ( "LayerableConfig [layerRefresh=0, layerDisplay=1]" , config . toString ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertThat ( context . extension ( HibernateOrmExtension . get ( ) ) ) . isSameAs ( mappingContext )
assertEquals ( crossoverProbability , crossover . crossoverProbability ( ) , EPSILON )
assertEquals ( lease , lease1 )
assertEquals ( e . getCause ( ) . getMessage ( ) , "foo" )
assertThat ( metacardFileStorageRoute . getOutputPathTemplate ( ) , is ( OUTPUT_PATH_TEMPLATE ) )
assertEquals ( "LoadBalancer" , config . get ( Config . type ) )
assertEquals ( 0 , result , "o1[0,1] should be == o2[0,1]" )
assertEquals ( 0 , result , "o1[0,1] should be == o2[0,1]" )
assertEquals ( 0 , result , "o1[0,1] should be == o2[0,1]" )
assertEquals ( 0 , result , "o1[0,1] should be == o2[0,1]" )
assertEquals ( 0 , result , "o1[0,1] should be == o2[0,1]" )
assertEquals ( - 1 , result , "o1[0,10] should be < o2[1,3]" )
assertThat ( result . relation ) . isEqualTo ( StringLinkRelation . of ( "foo" ) )
assertThat ( AwsEndpointProviderUtils . disableHostPrefixInjection ( attrs ) ) . isFalse ( )
assertEquals ( object , Underscore . constant ( object ) . get ( ) )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertThat ( modifyException ( exception ) ) . isEqualTo ( exception )
assertEquals ( "1.5.0_19" , System . getProperty ( "java.version" ) )
assertThat ( ChannelDraftBuilder . of ( "key" ) . build ( ) . getKey ( ) ) . isEqualTo ( "key" )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertThat ( commonSupertypes , hasItems ( Object . class . getName ( ) , Serializable . class . getName ( ) ) )
assertEquals ( SyntaxInfo . keywords ( ) . size ( ) , 101 )
assertNull ( classUnderTest . writeToString ( null ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( Optional . empty ( ) , correlatedValues )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( new Integer ( 1 ) , ReflectionUtils . get ( obj , "val" ) )
assertEquals ( "A" , map . putIfAbsent ( one , "Z" ) )
assertEquals ( ImmutableSet . of ( "foo" , "foo2" ) , schema2 . getDatasourceNames ( ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( committed , committed2 )
assertEquals ( map . size ( ) , dictionary . size ( ) )
assertEquals ( VisitStatus . BYPASS , getVisitStatus ( node ) )
assertFalse ( invoked . get ( ) )
assertThat ( option . get ( ) , is ( restored . get ( ) ) )
assertEquals ( "2" , result . get ( "key" ) )
assertEquals ( i . size ( ) , i . negate ( ) . size ( ) )
assertTrue ( e . getMessage ( ) . contains ( "Invalid resource for an authorization" ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( 0 , array . length )
assertThat ( e . getMessage ( ) , new StringContains ( "Unknown component name: 'unavailable'" ) )
assertThat ( attribute ( ATTR_NAME_TEXT ) . getValueAsString ( ) ) . isEqualTo ( "foo" )
assertEquals ( future , future . interruptible ( ) )
assertEquals ( "2" , result . get ( 0 ) . get ( "key" ) )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertEquals ( APP_ID , driver . getCurrentPackage ( ) )
assertEquals ( APP_ID , driver . getCurrentPackage ( ) )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertThat ( attribute ( ATTR_NAME_TEXT ) . getValueAsString ( ) ) . isEqualTo ( "foo" )
assertEquals ( APP_ID , driver . getCurrentPackage ( ) )
assertEquals ( APP_ID , driver . getCurrentPackage ( ) )
assertEquals ( "SASL_IDENTITY_POOL_ID" , oAuthCredentialProvider . getTargetIdentityPoolId ( ) )
assertThat ( attribute ( ATTR_NAME_TEXT ) . getValueAsString ( ) ) . isEqualTo ( "foo" )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( "Page size must be greater than 0." , e . getMessage ( ) )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( parcel . readStrongBinder ( ) ) . isNull ( )
assertEquals ( yt . expected ( ) , yt . actual ( ) )
assertNull ( result )
assertFalse ( regionIds . contains ( region . getRegionId ( ) ) )
assertTrue ( state [ 0 ] )
assertEquals ( ":[0.0, 0.125, 0.375, 0.0, 0.5, 0.0]" , prediction . toString ( ) )
assertNull ( obj )
assertEquals ( "A" , map . putIfAbsent ( one , "Z" ) )
assertEquals ( "Only interfaces can have default methods. Not " + getClass ( ) , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "category cannot be null." , e . getMessage ( ) )
assertThat ( read ( JustSomeDifferentPropertyTypes . class , source ) . uuid ) . isEqualTo ( uuid )
assertEquals ( "value" , settings . get ( "key" , "default" ) )
assertEquals ( driftDef . getName ( ) , name , "Failed to get drift definition name" )
assertEquals ( driftDef . getName ( ) , name , "Failed to get drift definition name" )
assertEquals ( jolokiaConfig . get ( ConfigKey . MAX_DEPTH ) , "42" )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertFalse ( ( Boolean ) status . get ( "ready" ) )
assertNull ( request . getParameter ( "name" ) )
assertNotNull ( Fastq . builder ( ) )
assertThat ( Type . forSymbol ( type . getSymbol ( ) ) , is ( sameInstance ( type ) ) )
assertThat ( new SpringFacesModelHolder ( m ) . getModel ( ) . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertThat ( new SpringFacesModelHolder ( m ) . getModel ( ) . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertThat ( new SpringFacesModelHolder ( m ) . getModel ( ) . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertThat ( new SpringFacesModelHolder ( m ) . getModel ( ) . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertEquals ( "(1,2,3,4)" , IteratorToString . toString ( a . iterator ( ) ) )
assertThat ( e . getMessage ( ) , is ( "generator must not be null" ) )
assertNotNull ( idRange )
assertThat ( Type . forSymbol ( type . getSymbol ( ) ) , is ( sameInstance ( type ) ) )
assertEquals ( expected , encoded )
assertEquals ( "111" , s . get ( "1" ) )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( "{key1=value1,key2=value2}" , options . toString ( ) )
assertArrayEquals ( new int [ ] { 2 , 3 , 5 , 7 , 11 , 13 } , creatArrayUtil ( ) . getPrimes ( max ) )
assertTrue ( e . getMessage ( ) . contains ( "NodeBox 2" ) )
assertEquals ( i . size ( ) , i . negate ( ) . size ( ) )
assertEquals ( "myFactoryParameter" , decl . getBeanFactoryParameter ( ) )
assertFalse ( field . getBit ( i ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertTrue ( response . contains ( "All fine!" ) )
assertTrue ( response . contains ( "All fine!" ) )
assertTrue ( error . getMessage ( ) . length ( ) > 0 )
assertFalse ( testSubject . getException ( ) . isPresent ( ) )
assertEquals ( CreateNewNodeFactory . class , NodeInstanceFactoryRegistry . getInstance ( null ) . getProcessNodeInstanceFactory ( node ) . getClass ( ) )
assertEquals ( CreateNewNodeFactory . class , NodeInstanceFactoryRegistry . getInstance ( null ) . getProcessNodeInstanceFactory ( node ) . getClass ( ) )
assertEquals ( "Expected: null, but was: " + object . toString ( ) , e . getMessage ( ) )
assertEquals ( schema . toString ( ) , SCHEMA )
assertEquals ( "" , result )
assertEquals ( "Achievement Name cannot be empty." , e . getMessage ( ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertEquals ( "test123" , password )
assertEquals ( "test123" , password )
assertEquals ( ".0x123456789ABCDEFF,0xFFFFFFFFFFFFFFFF" , writer . Close ( ) . toString ( ) )
assertEquals ( WeightTypes . WEIGHT , ew . type )
assertEquals ( Type . INT2 , d . type ( ) )
assertTrue ( byteBuf instanceof VertxHeapByteBuf || byteBuf instanceof VertxUnsafeHeapByteBuf )
assertTrue ( "Allocated new object" , byteBuffer0 != byteBuffer1 )
assertTrue ( byteBuf instanceof VertxHeapByteBuf || byteBuf instanceof VertxUnsafeHeapByteBuf )
assertTrue ( e . getMessage ( ) . contains ( "All parameters are mandatory, submit 'hdfs path', 'indicator'" ) )
assertEquals ( expCapacity , actCapacity )
assertTrue ( e . getMessage ( ) . contains ( "All parameters are mandatory, submit 'hdfs path', 'indicator'" ) )
assertNotNull ( plugin )
assertEquals ( input , output )
assertEquals ( "startingSql is required." , message )
assertThat ( exception . getMessage ( ) ) . contains ( format ( "The testType %s is not unique" , token ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( ByteBuffer . wrap ( value , i , BLOCK_SIZE ) , buffer . toByteBuffer ( i , BLOCK_SIZE ) )
assertThat ( po . getTimestamp ( ) ) . isBeforeOrEqualTo ( ZonedDateTime . now ( ) )
assertThat ( data . getDateStamp ( ) , is ( "[2019-01-30T10:17:09.848Z]" ) )
assertEquals ( qualifier , version . getQualifierVersion ( ) )
assertEquals ( "2.0" , facesConfig . getVersion ( ) )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertThat ( thrown . getMessage ( ) ) . contains ( "No contract available for the given salesRep!" )
assertEquals ( "Invalid signature marker: 1" , ex . getMessage ( ) )
assertThat ( ddl , equalTo ( Ddl . builder ( ) . build ( ) ) )
assertTrue ( verifier . verify ( host , session ) )
assertTrue ( e . getCause ( ) instanceof UnsupportedOperationException )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( event . getEventProperties ( ) , map )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertEquals ( 3 , tryCount [ 0 ] )
assertEquals ( "xx10.20.130.230" , regexp )
assertEquals ( HASH_ERR , Blake2_HEXDIGEST , result )
assertNotNull ( BouncyGPG . decryptAndVerifyStream ( ) . withConfig ( mock ( KeyringConfig . class ) ) )
assertEquals ( HASH_ERR , Blake2_DIGEST_EMPTY_STRING , result )
assertEquals ( HASH_ERR , Blake2_DIGEST_EMPTY_STRING , result )
assertEquals ( "There must not be claims for an opaque access token." , expectedValue , opaqueAccessToken . getClaims ( ) )
assertEquals ( expected , actual )
assertEquals ( "foo" , Validate . paramNotNull ( "foo" , "someField" ) )
assertEquals ( "foo" , Validate . paramNotNull ( "foo" , "someField" ) )
assertEquals ( "foo" , Validate . paramNotNull ( "foo" , "someField" ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( "open stream failed" , exception . getMessage ( ) )
assertEquals ( "open stream failed" , exception . getMessage ( ) )
assertEquals ( URI , EndpointUtil . encodeEndpoint ( URI , null ) )
assertEquals ( Result . ERROR , sos . validate ( null ) . getStatus ( ) )
assertEquals ( headers , item . getHeaders ( ) )
assertEquals ( "Sun, 06 Nov 1994 08:49:37 GMT" , format ( DATE ) )
assertNotNull ( map . toString ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 0 , rootSerializer . serialize ( scbMap ) . length )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertThat ( buffer . capacity ( ) ) . isEqualTo ( 8 )
assertEquals ( y [ 2 ] , 3 )
assertEquals ( CardCommandAPDU . getBody ( apdu ) , new byte [ ] { ( byte ) 0x01 , ( byte ) 0x01 , ( byte ) 0x00 , ( byte ) 0x01 , ( byte ) 0xFF } )
assertThat ( compareResult ) . isEqualTo ( ECompareResult . EQUAL_TO . getValue ( ) )
assertEquals ( "" , result . getValue ( ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( Json . TRUE , object . get ( "foo" ) )
assertEquals ( Json . TRUE , object . get ( "foo" ) )
assertEquals ( 0 , exec ( SplitRecoveryIT . class ) . waitFor ( ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "hello" , holder . get ( ) )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertArrayEquals ( expectedSorted , data )
assertEquals ( data , TestFileUtils . readString ( target ) )
assertEquals ( name , instance ( ) . getName ( ) )
assertEquals ( "{\"id\":1,\"name\":\"Alice\"}" , result )
assertEquals ( "PDFsam_" , victim . getText ( ) )
assertThat ( "Root required" , translator . getAvroCompatibleSchema ( ) . isOptional ( ) , is ( false ) )
assertEquals ( new Fetch ( ) . field ( field , subFetch ) , new Fetch ( ) . field ( field , subFetch ) )
assertEquals ( new Fetch ( ) . field ( field , subFetch ) , new Fetch ( ) . field ( field , subFetch ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( Matcher . quoteReplacement ( "$1 \\$2" ) , tool . quoteReplacement ( "$1 \\$2" ) )
assertEquals ( ISOCountry . US , ISOCountry . get ( "us" ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( "41 42 43 44" , result )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( e , ex . getCause ( ) )
assertTrue ( true )
assertEquals ( "Chuck" , victim . getText ( ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertEquals ( expected , schemaAndValue )
assertNull ( avroData . toConnectData ( null , null ) )
assertNull ( avroData . toConnectData ( null , null ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , schemaAndValue )
assertEquals ( expected , schemaAndValue )
assertNull ( avroData . toConnectData ( null , null ) )
assertEquals ( SchemaAndValue . NULL , schemaAndValue )
assertNull ( filteredMap )
assertThat ( stringMap . get ( "openstack/latest/user_data" ) ) . isNotEmpty ( )
assertThat ( stringMap . get ( "openstack/latest/user_data" ) ) . isNotEmpty ( )
assertNull ( avroData . toConnectData ( null , null ) )
assertEquals ( "41424344" , result )
assertEquals ( register , newRegister )
assertEquals ( register , newRegister )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertNull ( rule . getTypeName ( ) )
assertEquals ( "Coffee name: " , "espresso" , coffeeSpy . getName ( ) )
assertEquals ( "Coffee name: " , "espresso" , coffeeSpy . getName ( ) )
assertThat ( support . getValue ( SearchPath . create ( "path_to_edit" ) ) ) . isEqualTo ( "path_to_edit" )
assertThat ( support . getValue ( SearchPath . create ( "path_to_edit" ) ) ) . isEqualTo ( "path_to_edit" )
assertTrue ( metrics instanceof MicrometerMetrics )
assertTrue ( base . isEmpty ( ) == other . isEmpty ( ) )
assertThat ( toRequestAdapter . startTimestamp ( request ) ) . isZero ( )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertThat ( fe . getMessage ( ) ) . startsWith ( "Unable to process value" )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertThat ( dao . getInstance ( 200 ) , is ( "woo!" ) )
assertThat ( shadowMediaPlayer . getState ( ) ) . isEqualTo ( IDLE )
assertEquals ( key , ConfigurationKey . fromString ( key . get ( ) ) )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertEquals ( 0 , checker . computeDefaultAuthorizers ( MockWebContext . create ( ) , new ArrayList < > ( ) , clients , new HashMap < > ( ) ) . size ( ) )
assertNotNull ( reduce . getInput ( ) )
assertThat ( new SpringFacesModelHolder ( m ) . getModel ( ) . get ( "k" ) , is ( equalTo ( ( Object ) "v" ) ) )
assertThat ( this . properties . getTomcat ( ) . getThreads ( ) . getMinSpare ( ) ) . isEqualTo ( 10 )
assertEquals ( firefoxUA , request . userAgent ( ) )
assertEquals ( 7 , Num . create ( 5 ) . add ( Num . create ( 2 ) ) . value ( ) )
assertEquals ( "invalid enum value 3 for proto Color, field=org.apache.servicecomb.foundation.protobuf.internal.model.Root:color" , exception . getMessage ( ) )
assertThat ( support . getValue ( SearchPath . create ( "path_to_edit" ) ) ) . isEqualTo ( "path_to_edit" )
assertThat ( support . getValue ( SearchPath . create ( "path_to_edit" ) ) ) . isEqualTo ( "path_to_edit" )
assertEquals ( argumentCaptor1 . getValue ( ) , "test" )
assertEquals ( expectedEndpointHost , config . getEndpointHost ( ) )
assertEquals ( "" , toString )
assertEquals ( "M. Please contact your web hosting service provider for assistance." , new FTPExceptionMappingService ( ) . map ( new FTPException ( 500 , "m\n" ) ) . getDetail ( ) )
assertEquals ( result , LPLATFORMID )
assertEquals ( result , LPLATFORMID )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( status , StatusConverter . convertFromString ( status . name ( ) ) )
assertThat ( missing , is ( empty ( ) ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertEquals ( "EJBServlet OK" , res )
assertEquals ( t , exception . getCause ( ) )
assertEquals ( value , mapMock . get ( key ) )
assertEquals ( "The validated object is null" , exception . getMessage ( ) )
assertThat ( ( Boolean ) formatParser . parse ( buildJson ( "\"Boolean\": true" ) ) . getEntity ( ) . getProperty ( BOOLEAN_NAME ) . getValue ( ) , is ( BOOLEAN ) )
assertThat ( this . mockTagAttribute . getValue ( ) ) . isEqualTo ( FOO )
assertEquals ( props . get ( TestSuiteProperties . BROWSER_NAME ) , val )
assertEquals ( props . get ( TestSuiteProperties . BROWSER_NAME ) , val )
assertEquals ( props . get ( TestSuiteProperties . BROWSER_NAME ) , val )
assertThat ( e . getCause ( ) , ( hasMessage ( endsWith ( ", path: $.ORDERTIME" ) ) ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertThat ( e . getCause ( ) , ( hasMessage ( endsWith ( ", path: $.ORDERTIME" ) ) ) )
assertEquals ( 0 , testStatus )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( value , result , "The Future should return the value given by asyncHandler#onCompleted" )
assertEquals ( value , result , "The Future should return the value given by asyncHandler#onCompleted" )
assertEquals ( value , result , "The Future should return the value given by asyncHandler#onCompleted" )
assertThat ( this . properties . getStaticLocations ( ) ) . allMatch ( ( location ) -> location . endsWith ( "/" ) )
assertFalse ( new DefaultEntityCollection ( entities , attrNames ) . isLazy ( ) )
assertNull ( this . list . getElementType ( ) )
assertEquals ( 20 , result )
assertTrue ( promise . cancel ( false ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertTrue ( e . getMessage ( ) . contains ( "stores is null" ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( NoSuchMethodException . class , e . getCause ( ) . getClass ( ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( location , emp1 . getLocation ( ) )
assertThat ( instance . getStateVariable ( "key" ) , is ( "value" ) )
assertEquals ( "2" , result )
assertFalse ( selected )
assertFalse ( selected )
assertThat ( resolver . resolvePlaceholders ( 123 ) ) . isEqualTo ( 123 )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( expected . getMessage ( ) , notNullValue ( ) )
assertThat ( expected . getMessage ( ) , notNullValue ( ) )
assertThat ( expected . getMessage ( ) , notNullValue ( ) )
assertEquals ( "HTTP method PATCH not available before Apache HttpComponents HttpClient 4.2" , ex . getMessage ( ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( object , Underscore . identity ( object ) )
assertEquals ( "info" , adapter . getServerInfo ( ) )
assertEquals ( "info" , adapter . getServerInfo ( ) )
assertEquals ( result , expResult )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertThat ( coercer . coerce ( ImmutableMap . of ( "foo" , "bar" ) , structType ) , is ( Result . failure ( ) ) )
assertEquals ( "123456789012" , action . getShortId ( ) )
assertNull ( IdServicesDecoratorUtils . toLowerCaseKeys ( null ) )
assertEquals ( "foo.bar.bazz" , node . getDestinationName ( ) )
assertEquals ( "{\"id\":1,\"name\":\"Alice\"}" , result )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse OBJECT_GET('/some/path'): Unable to parse: OBJECT_GET('/some/path') due to: Path '/some/path' could not be found in HDFS" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertEquals ( builder . toString ( ) , "@Id(name=\"foobar\")" , "Unexpected annotations built by JPAAnnotationBuilder." )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse OBJECT_GET('/some/path'): Unable to parse: OBJECT_GET('/some/path') due to: Path '/some/path' could not be found in HDFS" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertFalse ( Context . get ( ) . getConfig ( ) . isCacheGzippedContent ( ) )
assertEquals ( content . length ( ) , part . getSize ( ) )
assertThat ( thrown . getMessage ( ) ) . startsWith ( "Unable to instanciate the rule 'rootRule': " )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "fabric8.io" , generator . getRegistry ( ) )
assertEquals ( "fabric8.io" , generator . getRegistry ( ) )
assertThat ( confirmation . getListVersion ( ) , equalTo ( i ) )
assertNull ( sfcProviderRpc . instantiateServiceFunctionChain ( instantiateServiceFunctionChainInput . build ( ) ) )
assertThat ( formattedWheels . get ( i ) ) . isEqualTo ( wheelArtifactcoordinates . get ( i ) )
assertNull ( mediaModel . getValue ( ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNull ( sfcProviderRpc . instantiateServiceFunctionChain ( instantiateServiceFunctionChainInput . build ( ) ) )
assertEquals ( QQueryEmbeddable3Test_Complex . class , QQueryEmbeddable3Test_User . user . map . get ( "XXX" ) . getClass ( ) )
assertEquals ( QQueryEmbeddable3Test_Complex . class , QQueryEmbeddable3Test_User . user . map . get ( "XXX" ) . getClass ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> HitPolicy . fromValue ( "asd" ) )
assertEquals ( QQueryEmbeddable3Test_Complex . class , QQueryEmbeddable3Test_User . user . map . get ( "XXX" ) . getClass ( ) )
assertEquals ( status , StatusConverter . convertFromString ( status . name ( ) ) )
assertEquals ( "Format returned from getFormat() is incorrect" , format , query . getFormat ( ) )
assertEquals ( "test123" , password )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( input , AggregateCloner . DEFAULT . clone ( input ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertThat ( ScenarioSimulationServerMessages . getGenericScenarioExceptionMessage ( "An exception message" ) ) . isEqualTo ( "Failure reason: An exception message" )
assertEquals ( "20:11:12" , text )
assertEquals ( "Should have the correct text - Simple" , "Rename table my_table to your_table" , HumanReadableStatementHelper . generateRenameTableString ( "my_table" , "your_table" ) )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatCollection ( Entry :: getValue ) . toList ( ) )
assertThat ( 2 , is ( simple . get ( 0 ) ) )
assertThat ( 2 , is ( simple . get ( 0 ) ) )
assertEquals ( lease , lease1 )
assertThat ( 2 , is ( simple . get ( 0 ) ) )
assertEquals ( - 1 , errorSentinel )
assertEquals ( vals , Sequences . simple ( vals ) . toList ( ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertFalse ( FCollection . contains ( xs , False . instance ( ) ) )
assertEquals ( firstValue , pagedIterable . stream ( ) . limit ( 1 ) . collect ( Collectors . toList ( ) ) . get ( 0 ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertEquals ( 1 , version . getMinorVersion ( ) )
assertEquals ( "[1, 2, 4]" , result . toString ( ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( 101 , m . get ( 1 , 2 ) , 0.001 )
assertEquals ( new Point ( 5 , 10 ) , r1 . getLocation ( ) )
assertEquals ( FastList . newListWith ( 2 , 3 ) , interval . subList ( 1 , 3 ) )
assertNotNull ( excelWriter . createWritable ( "sheet" , null ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertEquals ( "individual" , kind . getValue ( ) )
assertNull ( "oldest time should be null" , queue . getLastAddedTime ( ) )
assertEquals ( 10 , ( int ) future . get ( ) )
assertThat ( outContent . toString ( ) , containsString ( "usage: Geen argument meegegeven" ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3.141592\n" ) )
assertThat ( mySearchParamRegistry . getActiveComboSearchParams ( "Patient" ) , is ( empty ( ) ) )
assertEquals ( "Incorrect type of parsing expression: class java.lang.Object" , thrown . getMessage ( ) )
assertEquals ( "test123" , password )
assertNotNull ( spanEvent )
assertNotEquals ( bicf . getChromosome ( ) , bestIndividual )
assertNotEquals ( bicf . getChromosome ( ) , bestIndividual )
assertNotSame ( b , GryoMapper . build ( ) )
assertThat ( expected . getMessage ( ) , is ( "Failed to extract Name from media type 'application/json'" ) )
assertEquals ( "key" , op . getKey ( ) )
assertEquals ( CUSTOM_DATA_TYPE , tested . customDataType )
assertEquals ( CUSTOM_DATA_TYPE , tested . customDataType )
assertEquals ( CUSTOM_DATA_TYPE , tested . customDataType )
assertThatCode ( ( ) -> guard . awaitCompletionAndAssertSuccess ( ) ) . isInstanceOf ( TimeoutError . class )
assertEquals ( copy , parameters )
assertThat ( pathTrie . get ( "/bar" ) , isAbsent ( ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( pathTrie . get ( "/bar" ) , isAbsent ( ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( this . properties . getTomcat ( ) . getThreads ( ) . getMinSpare ( ) ) . isEqualTo ( 10 )
assertEquals ( "hello world" , AviatorEvaluator . execute ( "a+b" , env , true ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( pathTrie . get ( "/bar" ) , isAbsent ( ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( pathTrie . get ( "/bar" ) , isAbsent ( ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( "0" , execute . get ( RETURN_RESULT ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( "0" , execute . get ( RETURN_RESULT ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertEquals ( "a" , toml . getString ( "a" ) )
assertEquals ( ATTRIBUTE , ( int ) testSubject . get ( ATTRIBUTE_KEY ) )
assertThat ( thrown . getMessage ( ) ) . startsWith ( "Unable to instanciate the rule 'rootRule': " )
assertEquals ( null , lineData . getString ( "key" ) )
assertEquals ( "value" , lineData . getString ( "key" ) )
assertEquals ( null , lineData . getString ( "key" ) )
assertEquals ( "value" , lineData . getString ( "key" ) )
assertEquals ( value , factory . factorize ( null ) . getLong ( ) )
assertEquals ( CliConstants . DEFAULT_SERVLET_ZONE . value ( ) , config . getServletZone ( ) )
assertEquals ( CliConstants . DEFAULT_SERVLET_ZONE . value ( ) , config . getServletZone ( ) )
assertEquals ( value , factory . factorize ( null ) . getLong ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "value" , lineData . getString ( "key" ) )
assertEquals ( "value" , ctx . getStringOptional ( "key" ) )
assertEquals ( value , factory . factorize ( null ) . getLong ( ) )
assertEquals ( yt . expected ( ) , yt . actual ( ) )
assertEquals ( "1" , actie . toString ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( 3 , atomicLong . get ( ) )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( ERROR_NULL_HTTPCLIENT , e . getMessage ( ) )
assertEquals ( "Message" , e . getMessage ( ) )
assertEquals ( ERROR_NULL_HTTPCLIENT , e . getMessage ( ) )
assertEquals ( "Message" , e . getMessage ( ) )
assertEquals ( StringUtils . substringAfterLast ( "abc" , 'a' ) , new TestStringLookup ( ) . substringAfterLast ( "abc" , 'a' ) )
assertTrue ( e . getMessage ( ) . contains ( "stores is null" ) )
assertTrue ( e . getMessage ( ) . contains ( "stores is null" ) )
assertTrue ( e . getMessage ( ) . contains ( "stores is null" ) )
assertTrue ( e . getMessage ( ) . contains ( "stores is null" ) )
assertEquals ( "category cannot be null." , e . getMessage ( ) )
assertEquals ( "Only interfaces can have default methods. Not " + getClass ( ) , e . getMessage ( ) )
assertEquals ( "Hello /u1234" , data )
assertNull ( myHashMap . get ( 5 ) )
assertNull ( myHashMap . get ( 5 ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertThat ( count . getInput ( ) ) . isNotNull ( )
assertThat ( NamesGenerator . generateUniqueName ( parent , "name" ) ) . isEqualTo ( "name" )
assertEquals ( "unit" , spectrumBand . getUnit ( ) )
assertEquals ( string , ValidationUtils . assertStringNotEmpty ( string , "someString" ) )
assertThat ( asJsonString ( bytes ) , is ( "62" ) )
assertThat ( asJsonString ( bytes ) , is ( "62" ) )
assertEquals ( Order . ASCENDING , type . getOrder ( ) )
assertEquals ( Order . ASCENDING , type . getOrder ( ) )
assertEquals ( new SelectorDimFilter ( "dim" , "v1" , null ) , filter . optimize ( ) )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertNotNull ( resultaat )
assertEquals ( wrapper . getToStringPrefix ( List . class ) , "pre-List" )
assertEquals ( 0 , array . length )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertThat ( ( ( Number ) executeExpression ( expression , expressionVars ) ) . doubleValue ( ) ) . isCloseTo ( 3919.9 , within ( 0.01 ) )
assertThat ( ( ( Number ) executeExpression ( expression , expressionVars ) ) . doubleValue ( ) ) . isCloseTo ( 3919.9 , within ( 0.01 ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "first" , mockedList . get ( 0 ) )
assertEquals ( "first" , mockedList . get ( 0 ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The passed in ColoredManaSymbol can not be null" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "Could not transform step argument: 22" , exception . getMessage ( ) )
assertEquals ( "Could not transform step argument: 22" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "The validated collection is empty" , ex . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "You must specify a path for tests" , exception . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "@" + i , raw [ i ] . intValue ( ) , array . get ( i ) . intValue ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertEquals ( TestConstants . DYNAMIC_PROPERTY_COLLECTION_NAME , propertyStudentInfo . getContainerName ( ) )
assertNull ( completionResult )
assertEquals ( src . copy ( ) . toString ( ) , src . toString ( ) )
assertEquals ( ERROR_NULL_HTTPCLIENT , e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . isNotNull ( )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "foo.bar.bazz" , node . getDestinationName ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( basedir . getRoot ( ) , container . getBaseDir ( ) . getRoot ( ) )
assertEquals ( inputPort , flow . getInputPort ( ) . intValue ( ) )
assertFalse ( new SpectraReadFeature ( session ) . offset ( null ) )
assertEquals ( timestamp , event . getTimestamp ( ) )
assertEquals ( timestamp , event . getTimestamp ( ) )
assertThat ( new Multipart ( "example" , new File ( "dunno.txt" ) ) . getHeaders ( ) , is ( emptyHeaders ( ) ) )
assertEquals ( basedir . getRoot ( ) , container . getBaseDir ( ) . getRoot ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertThat ( list . peek ( ) , is ( 1 ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertEquals ( "Type constructed without type information." , thrown . getMessage ( ) )
assertThat ( PkiTools . getHostName ( ) , not ( equalTo ( "" ) ) )
assertThat ( pathTrie . get ( "/bar" ) , isAbsent ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( uri ) . isEqualTo ( URI . create ( "/foo/first/second" ) )
assertThat ( elasticsearchIndexAlias . getName ( ) ) . isEqualTo ( "mycollection_2" )
assertEquals ( 1 , this . instance . execute ( "test()" ) )
assertEquals ( "batchTimeoutDivisor must be positive. Value provided was -1" , e . getMessage ( ) )
assertEquals ( 101 , HasMutableStaticInitializer . j )
assertEquals ( State . COMPLETED , run . getState ( ) )
assertEquals ( queue , receiver . getQueue ( ) )
assertEquals ( "TestGetFields 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "TestGetFields 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( "TestGetFields 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( installedPackage , cookbookConfiguration . getInstalledPackages ( ) . get ( "java" ) )
assertEquals ( ip , osenv . getProperty ( "profiler.transport.grpc.collector.ip" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( e . getCause ( ) , is ( exception ) )
assertEquals ( "userId is required." , message )
assertEquals ( "userId is required." , message )
assertNull ( "Expected null value." , builder . clientId ( ) )

assertNull ( "Expected null value." , builder . clientId ( ) )
assertNull ( "Expected null value." , builder . clientId ( ) )
assertNull ( "Expected null value." , builder . clientId ( ) )
assertTrue ( builder . getParameters ( ) . isEmpty ( ) )
assertThat ( compile ( "/** @externs */ function foo() {}" ) . externNodes ) . hasSize ( 2 )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Achievement Name cannot be empty." , e . getMessage ( ) )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertEquals ( "Cause must be returned." , e . getCause ( ) , cause )
assertThat ( databaseBackedConfig . getEmailLogLevel ( ) ) . isEqualTo ( "INFO" )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "Invalid major \"\", version \"\"." , exception . getMessage ( ) )
assertEquals ( "Invalid major \"\", version \"\"." , exception . getMessage ( ) )
assertEquals ( "Invalid major \"\", version \"\"." , exception . getMessage ( ) )
assertEquals ( "Invalid major \"\", version \"\"." , exception . getMessage ( ) )
assertTrue ( ! e . getMessage ( ) . isEmpty ( ) )
assertTrue ( ! e . getMessage ( ) . isEmpty ( ) )
assertEquals ( t , exception . getCause ( ) )
assertThat ( thrown . getMessage ( ) ) . startsWith ( "Unable to instanciate the rule 'rootRule': " )
assertEquals ( t , exception . getCause ( ) )
assertThat ( thrown . getMessage ( ) ) . startsWith ( "Unable to instanciate the rule 'rootRule': " )
assertEquals ( "Implicit nodes to string conversion is not supported. Use the tokenValue attribute instead." , thrown . getMessage ( ) )
assertEquals ( "Invalid major \"\", version \"\"." , exception . getMessage ( ) )
assertEquals ( Boolean . TRUE , map . get ( "throwExceptionOnMissing" ) )
assertEquals ( 1.0 , d . getValue ( 0 ) )
assertEquals ( 1.0 , d . getValue ( 0 ) )
assertNotNull ( ds )

assertEquals ( "A parser config supplier must be set before initializing the ParserRunner." , e . getMessage ( ) )
assertThat ( mySearchParamRegistry . getActiveComboSearchParams ( "Patient" ) , is ( empty ( ) ) )
assertThat ( mySearchParamRegistry . getActiveComboSearchParams ( "Patient" ) , is ( empty ( ) ) )
assertArrayEquals ( array , new EuclideanDoublePoint ( array ) . getPoint ( ) , 1.0e-15 )
assertEquals ( "info" , adapter . getServerInfo ( ) )
assertEquals ( "Implicit nodes to string conversion is not supported. Use the tokenValue attribute instead." , thrown . getMessage ( ) )
assertNotNull ( sslChannel . getSslSession ( ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( 0 , array . length )
assertEquals ( 0 , array . length )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , provider . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , provider . get ( ) )
assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertEquals ( result , DEFAULT_RESULT )
assertEquals ( 1 , foo . value )
assertThat ( thrown . getMessage ( ) , containsString ( "Unable to parse filter `name:ilike:someName:bla:bla`" ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( ex , crex . getCause ( ) , "Wrong cause" )
assertEquals ( "The validateArgTypes() method is buggy." , sf . getReturnType ( ) , sf . validateArgTypes ( argTypes ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertTrue ( processingEnv . getElementUtils ( ) instanceof TreeBackedElements )
assertEquals ( "Implicit nodes to string conversion is not supported. Use the tokenValue attribute instead." , thrown . getMessage ( ) )
assertTrue ( thread . getState ( ) != State . WAITING )
assertTrue ( projectionsContext . findAlias ( projection . getExpression ( ) ) . isPresent ( ) )
assertEquals ( "Wrong list item output" , "<li>Text</li>" , printer . item ( DUMMY_TEXT ) )
assertThat ( result ) . contains ( expectedScriptTagFormat ( expected ) )
assertEquals ( annotationAttributes , result )
assertTrue ( builder . getParameters ( ) . isEmpty ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Unknown pattern letter:" ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( Long . class ) ) . isTrue ( )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The passed in mana can not be null" , expectedException . getMessage ( ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertThat ( exception . getMessage ( ) , is ( "supplied a null/empty otpKey for second factor" ) )
assertEquals ( "File cannot be null" , exception . getMessage ( ) )
assertEquals ( "File cannot be null" , exception . getMessage ( ) )
assertEquals ( qualifier , version . getQualifierVersion ( ) )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( options . getRanges ( ) . get ( 0 ) , "0-5" )
assertEquals ( "only support String or TagFinder, but got " + Integer . class . getName ( ) , exception . getMessage ( ) )
assertEquals ( "constant ok?" , 1 , ( int ) query . get ( 0 ) . get ( "constant" ) . toInt ( ) )
assertNull ( "oldest time should be null" , queue . getLastAddedTime ( ) )
assertNotNull ( LimsFactory . empty ( ) )
assertNotNull ( LimsFactory . empty ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertThat ( exception . get ( ) , is ( instanceOf ( CancellationException . class ) ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertEquals ( "Method {execute} is missing or is invalid." , exception . getMessage ( ) )
assertThat ( supplier . get ( ) , is ( "{\"string\":\"foo\",\"integer\":123}" ) )
assertThat ( ksqlConfig . getBoolean ( KsqlConfig . KSQL_SHARED_RUNTIME_ENABLED ) , equalTo ( true ) )
assertEquals ( DefaultPriorityDashboardItem . ID , captor . getValue ( ) . id ( ) )
assertThat ( managerWithOriginal . getSecurityContext ( ) ) . isSameAs ( context )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertNotSame ( b , GryoMapper . build ( ) )
assertEquals ( "" , smsSettings . message ( ) )
assertEquals ( "" , smsSettings . message ( ) )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertEquals ( expected , FArray . filter ( this . is , False . instance ( ) ) )
assertEquals ( 0 , array . length )
assertEquals ( Element . PERSOON_INDICATIE , Element . parseId ( Element . PERSOON_INDICATIE . getId ( ) ) )
assertEquals ( Element . PERSOON_INDICATIE , Element . parseId ( Element . PERSOON_INDICATIE . getId ( ) ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "category cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "category cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertThat ( createContext ( ) , notNullValue ( ) )
assertEquals ( TruncateString . usingSplitMethod ( TEXT , 13 ) , "Welcome to ba" )
assertThat ( createContext ( ) , notNullValue ( ) )
assertEquals ( annotationAttributes , result )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertThat ( output . get ( ) , hasContent ( "23456" ) )
assertEquals ( Intervals . ETERNITY . getStart ( ) , adapter . getMinTime ( ) )
assertEquals ( "objects should be equals" , id1 , id2 )
assertEquals ( "bar" , PropertiesFactory . EMPTY_PROPERTIES . getProperty ( "foo" , "bar" ) )
assertEquals ( "bar" , PropertiesFactory . EMPTY_PROPERTIES . getProperty ( "foo" , "bar" ) )
assertTrue ( parameters . getParameters ( ) . isEmpty ( ) )
assertEquals ( 0 , array . length )
assertNull ( array )
assertNull ( array )
assertNull ( array )
assertNull ( array )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertEquals ( 3 , ( int ) ArrayUtil . lastOf ( numbers ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( underTest . databases ( ) , is ( empty ( ) ) )
assertEquals ( ">=6" , cookbookConfiguration . getDepends ( ) . get ( "java" ) )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertNull ( subject . reverseGet ( value ) )
assertNull ( subject . reverseGet ( value ) )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertThat ( underTest . databases ( ) , is ( empty ( ) ) )
assertEquals ( ">=6" , cookbookConfiguration . getDepends ( ) . get ( "java" ) )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertNull ( subject . reverseGet ( value ) )
assertNull ( subject . reverseGet ( value ) )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( "value" , ctx . getString ( "key" ) )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( 2 , result )
assertEquals ( ClusterType . STAND_ALONE , myTestInstance . getClusterType ( ) )
assertEquals ( "value" , adapter . getServletContextName ( ) )
assertTrue ( r . equals ( r . geometry ( ) ) )
assertEquals ( "Junit error" , "FFFFFF00" , color . toString ( ) )
assertThat ( Paths . get ( "foo" ) ) . isEqualTo ( Paths . get ( "foo" ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertNull ( array )
assertNull ( array )
assertEquals ( testString , HtmlSanitizerUtil . sanitize ( testString ) )
assertNull ( nullValue )
assertTrue ( bindingContainer . hidden )
assertEquals ( nic , networkDeviceHelper . getNicByPciDevice ( pciDevice ) )
assertEquals ( testString , HtmlSanitizerUtil . sanitize ( testString ) )
assertNull ( nullValue )
assertTrue ( bindingContainer . hidden )
assertEquals ( nic , networkDeviceHelper . getNicByPciDevice ( pciDevice ) )
assertEquals ( testString , HtmlSanitizerUtil . sanitize ( testString ) )
assertNull ( nullValue )
assertTrue ( bindingContainer . hidden )
assertEquals ( nic , networkDeviceHelper . getNicByPciDevice ( pciDevice ) )
assertEquals ( testString , HtmlSanitizerUtil . sanitize ( testString ) )
assertNull ( nullValue )
assertTrue ( bindingContainer . hidden )
assertEquals ( nic , networkDeviceHelper . getNicByPciDevice ( pciDevice ) )
assertNull ( activity . getParent ( ) )
assertNotNull ( model . getConfiguration ( ) )
assertNull ( nullValue )
assertFalse ( arrayType . canCreateSubtypes ( ) )
assertEquals ( "12" , mock . objectReturningMethod ( 4 ) )
assertThat ( testDocument . unwrap ( ) ) . isEqualTo ( "testDocument" )
assertThat ( headers . get ( "header1" ) . get ( ) , is ( "val1" ) )
assertNotNull ( model . getConfiguration ( ) )
assertNull ( obj )
assertEquals ( "A Object should equal itself" , obj , obj )
assertNull ( config . getString ( "stringNotInConfig" ) )
assertNotNull ( model . getConfiguration ( ) )
assertNull ( nullValue )
assertFalse ( arrayType . canCreateSubtypes ( ) )
assertEquals ( "12" , mock . objectReturningMethod ( 4 ) )
assertNull ( config . getString ( "stringNotInConfig" ) )
assertEquals ( context , initializer . createTilesApplicationContext ( context ) )
assertThat ( TextUtil . getByteBuffer ( null ) ) . isNull ( )
assertEquals ( new Integer ( 1 ) , wrapper . evaluate ( attribute , request ) )
assertEquals ( new Integer ( 1 ) , wrapper . evaluate ( attribute , request ) )
assertEquals ( new Integer ( 1 ) , wrapper . evaluate ( attribute , request ) )
assertEquals ( new Integer ( 1 ) , wrapper . evaluate ( attribute , request ) )
assertEquals ( context , initializer . createTilesApplicationContext ( context ) )
assertNull ( config . getString ( "stringNotInConfig" ) )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertEquals ( "test" , GROUP_1 . getDisplayName ( ) )
assertEquals ( 1L , ReflectionUtil . getFieldValue ( address , Address . class , "id" ) )
assertEquals ( "acceptablelanguages:de:" , actual )
assertEquals ( "Unable to add alerts to meta alert.  Meta alert with guid some_guid cannot be found." , e . getMessage ( ) )
assertThat ( metadata . causation ( ) , equalTo ( ImmutableList . of ( UUID . fromString ( UUID_CAUSATION ) ) ) )
assertThat ( metadata . causation ( ) , equalTo ( ImmutableList . of ( UUID . fromString ( UUID_CAUSATION ) ) ) )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertThat ( metadata . causation ( ) , equalTo ( ImmutableList . of ( UUID . fromString ( UUID_CAUSATION ) ) ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( metadata . causation ( ) , equalTo ( ImmutableList . of ( UUID . fromString ( UUID_CAUSATION ) ) ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertEquals ( 0 , array . length )
assertEquals ( file , instance ( ) . getParent ( ) . orElseThrow ( NoSuchElementException :: new ) )
assertEquals ( null , result )
assertEquals ( attribute1 , attribute2 )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( null , result )
assertThat ( udf . bigIntFromBytes ( toByteBuffer ( 5000000000L ) ) , is ( 5000000000L ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertNull ( new GsonCollectionAdapter ( ) . serialize ( null , null , null ) )
assertNull ( new GsonCollectionAdapter ( ) . serialize ( null , null , null ) )
assertNull ( new GsonCollectionAdapter ( ) . serialize ( null , null , null ) )
assertThat ( TextUtil . getByteBuffer ( null ) ) . isNull ( )
assertThat ( transform . apply ( tombstone ) ) . isNull ( )
assertNull ( new GsonCollectionAdapter ( ) . serialize ( null , null , null ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertNull ( cache . get ( key ) )
assertNotNull ( entry . getCache ( ) )
assertArrayEquals ( multipleUpdates , oneUpdate )
assertArrayEquals ( multipleUpdates , oneUpdate )
assertEquals ( "(A,0)(B,1)(C,3)(D,6)(E,5)(F,9)" , resultStr )
assertEquals ( "200 Servlet!" , get ( "userA" , "test" ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertTrue ( r . equals ( r . geometry ( ) ) )
assertEquals ( "Junit error" , "FFFFFF00" , color . toString ( ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertThat ( sut . locale ( ) , equalTo ( Locale . getDefault ( ) ) )
assertNull ( response )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertEquals ( null , result )
assertThat ( asJsonString ( bytes ) , is ( "62" ) )
assertThat ( asJsonString ( bytes ) , is ( "\"ew==\"" ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertTrue ( map . getFirst ( KEYS [ 0 ] ) == null , "MultivaluedMap#getFirst() should be null when list is empty" )
assertThat ( TextUtil . getByteBuffer ( null ) ) . isNull ( )
assertNull ( response )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertTrue ( map instanceof OrderedMap )
assertTrue ( f . get ( ) == tc . getReturnedResult ( ) )
assertEquals ( "eth0" , networkInterfaceInfo . getName ( ) )
assertEquals ( "Please provide a valid schema provider class!" , t . getMessage ( ) )
assertEquals ( NetInterfaceType . ETHERNET , config . getType ( ) )
assertThat ( properties . getImports ( ) ) . isEmpty ( )
assertEquals ( message , exception . getMessage ( ) )
assertEquals ( "eth0" , networkInterfaceInfo . getName ( ) )
assertThat ( "Parameterless constructor should create empty map!" , map . values ( ) , Matchers . is ( Matchers . empty ( ) ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertEquals ( "1/3" , rational . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertTrue ( thrown . getMessage ( ) . contains ( "Rule 'ruleName' should match:\nbar" ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , "1" ) )
assertTrue ( e . getMessage ( ) . contains ( "All parameters are mandatory, submit 'hdfs path', 'indicator'" ) )
assertNotNull ( build )
assertThat ( FormatUtil . formatDate ( calendar . getTimeInMillis ( ) ) ) . isEqualTo ( "2015/11/14 13:12:10" )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertNotNull ( ServiceUtil . construct ( constructMap ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertNotNull ( build )
assertThat ( getAliasesResponse . status ( ) ) . isEqualTo ( RestStatus . NOT_FOUND )
assertEquals ( response . getStatus ( ) , 401 )
assertEquals ( response . getStatus ( ) , 401 )
assertThat ( getAliasesResponse . status ( ) ) . isEqualTo ( RestStatus . NOT_FOUND )
assertThat ( getAliasesResponse . status ( ) ) . isEqualTo ( RestStatus . NOT_FOUND )
assertThat ( getAliasesResponse . status ( ) ) . isEqualTo ( RestStatus . NOT_FOUND )
assertThat ( getAliasesResponse . status ( ) ) . isEqualTo ( RestStatus . NOT_FOUND )
assertEquals ( expected , properties )
assertNull ( collationKeys . get ( 0 ) . byteArray )
assertNull ( collationKeys . get ( 0 ) . byteArray )
assertNull ( collationKeys . get ( 0 ) . byteArray )
assertThat ( provider . getDataValue ( indexes [ columnIndex ] , indexes [ rowIndex ] ) ) . isEqualTo ( "" )
assertEquals ( "java.lang.Exception" , serEx . getMessage ( ) )
assertEquals ( "java.lang.Exception" , serEx . getMessage ( ) )
assertFalse ( conf . getDefault ( p . toString ( ) ) . equals ( "please" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertThat ( Bytes . copyFrom ( new byte [ ] { ( byte ) b } ) . hashCode ( ) ) . isNotEqualTo ( hashCode )
assertThat ( tester . request . getParameter ( "aaa" ) , is ( "111" ) )
assertNotNull ( service . generateNewStateValue ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertArrayEquals ( destArray , retArray )
assertEquals ( status , Status . ACTIVE )
assertNull ( s . readToken ( null ) )
assertEquals ( "medication" , this . component . getName ( ) )
assertNull ( s . readToken ( null ) )
assertTrue ( file . getName ( ) . contains ( ".avsc" ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertThat ( parameterList ( "(#[A1(5)] $p1, #[A1(6)] $p2)" ) . parameters ( ) ) . hasSize ( 2 )
assertEquals ( inetAddress , sslSocketAdapter . getLocalAddress ( ) )
assertNotNull ( service . generateNewStateValue ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertThat ( user . toString ( ) ) . isEqualTo ( "user" )
assertNull ( problem . getException ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( ImmutableMap . of ( FOO_KEY , FOO_OBJECT , BAR_KEY , BAR_OBJECT ) , context . asMap ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "cba" , ValueUtil . asNativeString ( filter ( obj ) ) )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( props . get ( "nonexistingkey" ) ) . isNull ( )
assertNotNull ( result )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( result )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( result )
assertNull ( map . get ( "test" ) )
assertNull ( map . get ( "test" ) )
assertEquals ( "test" , txt . getData ( ) )
assertEquals ( "MyMessage" , e . getMessage ( ) )
assertEquals ( "test" , txt . getData ( ) )
assertEquals ( "MyMessage" , e . getMessage ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( result , description )
assertEquals ( result , description )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertThat ( provider . getRegistry ( ) ) . isEqualTo ( registry )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
fail ( e . getMessage ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertNull ( "DNS data returend" , result )
assertTrue ( list . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( names . contains ( Constants . TABLE_MASTER_NAME ) )
assertFalse ( list . isEmpty ( ) )
assertFalse ( list . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertFalse ( new GmtTimeZone ( false , 0 , 0 ) . useDaylightTime ( ) )
assertEquals ( Ipv4 . parse ( "192.168.0.1" ) . asRange ( ) , Ipv4Range . parse ( "192.168.0.1-192.168.0.1" ) )
assertEquals ( Ipv4 . parse ( "192.168.0.1" ) . asRange ( ) , Ipv4Range . parse ( "192.168.0.1-192.168.0.1" ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( folder . getName ( ) , "name2" )
assertEquals ( folder . getName ( ) , "name2" )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertThatExceptionOfType ( NullPointerException . class ) . isThrownBy ( ( ) -> map . replace ( getKey ( ) , null ) )
assertNull ( HEADERS . get ( "name1" ) )
assertNotNull ( intArrayInstance . get ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( name , definition . getName ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "id" , exception . getResourceId ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertEquals ( expected , got )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
order -> assertThat ( order . getCustomerId ( ) ) . contains ( customerId ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
assertEquals ( "Defaulted" , person . getName ( ) )
assertEquals ( input , encoded )
assertEquals ( input , encoded )
assertNotNull ( validator )
assertThat ( factory . getConnectionProvider ( ) , is ( equalTo ( connectionProvider ) ) )
assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertEquals ( "Test_CgLib" , variableName )
assertEquals ( "Test_CgLib" , variableName )
assertEquals ( "Test_CgLib" , variableName )
assertEquals ( "Test_CgLib" , variableName )
assertEquals ( "Test_CgLib" , variableName )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( "" , result )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( 1000 , weld . select ( MyService . class ) . get ( ) . doBusiness ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "foo" , new JsonString ( "foo" ) . asString ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertTrue ( stack . isEmpty ( ) )
assertNotSame ( m1 , m2 )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( 0 , bytes . length )
assertNull ( cmd . getWorkingDirectory ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertNotNull ( handler . getIcon ( new File ( "." ) . getPath ( ) , "" ) )
assertTrue ( wasCalled . get ( ) )
assertEquals ( 1 , services . length )
assertThat ( evaluateExpression ( "#firstname" ) ) . isEqualTo ( "parameterValue" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( name , definition . getName ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertThat ( host , is ( DNS . getDefaultHost ( getLoopbackInterface ( ) ) ) )
assertFalse ( buildFactory ( ) . isAccessibilityEnabled ( ) )
assertEquals ( ImmutableMap . of ( FOO_KEY , FOO_OBJECT , BAR_KEY , BAR_OBJECT ) , context . asMap ( ) )
assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertEquals ( 60 , exp )
assertEquals ( 60 , exp )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertThat ( isEmpty ( Paths . get ( "invalid-addr" ) ) ) . isFalse ( )
assertTrue ( "File does not has 2 lines" , lines . size ( ) == 2 )
assertTrue ( root != null )
assertThat ( confluence . isAvailable ( ) , is ( false ) )
assertThat ( IntrospectionUtils . isRequired ( object ) , is ( true ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( path . isEmpty ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "['s1', 's2']" , ToString . toStringOf ( array ( "s1" , "s2" ) ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertFalse ( ps . exists ( ) )
assertThat ( ConfigurationSnapshot . EMPTY . getOptional ( Collections . singleton ( "foo" ) , TypeLiteral . of ( String . class ) ) ) . isNotNull ( ) . isNotPresent ( )
assertEquals ( getCommentManager ( ) , commentManager . getClass ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertNotNull ( RuntimeUtils . which ( "ls" ) , "Unable to locate ls" )
assertNotNull ( RuntimeUtils . which ( "ls" ) , "Unable to locate ls" )
assertEquals ( "HandlerManager" , name )
assertTrue ( error . getMessage ( ) . length ( ) > 0 )
assertEquals ( errorEvent . getMessage ( ) , message )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertTrue ( tree . exists ( ) )
assertFalse ( vs . exists ( ) )
assertNotNull ( table . getTree ( ) )
assertThat ( directory . resolve ( "file" ) , exists ( ) )
assertNotNull ( sink . createWriteOperation ( ) )
assertNotNull ( sink . createWriteOperation ( ) )
assertNotNull ( sink . createWriteOperation ( ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( clusterId , standByMaster . getClusterId ( ) )
assertEquals ( USERNAME , principal . getName ( ) )
assertNull ( Cli . getResultFile ( ( Command ) new HelpCommand ( ) ) )
assertNotNull ( filter )
assertEquals ( "file1" , pathsHelper . getRelativeURI ( null , includedModelPath ) )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( type , jobScheduleParam . getType ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( type , jobScheduleParam . getType ( ) )
assertFalse ( ps . exists ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertThat ( javaTestClasspath . getElements ( ) ) . isEmpty ( )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( name , definition . getName ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertNull ( ContentRoutedRpcContext . forRpc ( RPCS . get ( 1 ) ) )
assertEquals ( 3 , set . size ( ) )
assertNotNull ( interceptor )
assertEquals ( 0 , NullColumn . INSTANCE . size ( ) )
assertEquals ( 0 , NullColumn . INSTANCE . size ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertNull ( Cli . getResultFile ( ( Command ) new HelpCommand ( ) ) )
assertEquals ( "abc" , Strings . append ( "c" ) . to ( "ab" ) )
assertEquals ( "abc" , Strings . append ( "c" ) . to ( "ab" ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
org . junit . Assert . fail ( "junit 4: single method failed" )
assertThat ( r . isDisabled ( ) , is ( false ) )
assertTrue ( result )
assertThat ( userDao . getAll ( ) . size ( ) ) . isEqualTo ( 2 )
assertEquals ( "get" , resource . getContent ( "bar" ) )
assertEquals ( "HTTP URL" , new DescriptiveUrl ( URI . create ( "http://me" ) ) . getHelp ( ) )
assertEquals ( "HTTP URL" , new DescriptiveUrl ( URI . create ( "http://me" ) ) . getHelp ( ) )
assertEquals ( "HTTP URL" , new DescriptiveUrl ( URI . create ( "http://me" ) ) . getHelp ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertEquals ( person , serializer . deserialize ( serializer . serialize ( person ) ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( IOUtil . toString ( emptyByteArray ( ) , - 1 ) , is ( emptyString ( ) ) )
assertArrayEquals ( DATA , v . get ( ) )
assertArrayEquals ( DATA , v . get ( ) )
assertTrue ( tree . exists ( ) )
assertTrue ( tree . exists ( ) )
assertTrue ( tree . exists ( ) )
assertFalse ( vs . exists ( ) )
assertFalse ( realmIds . contains ( realm . getRealmId ( ) ) )
assertEquals ( PreconditionMessage . ERR_WRITE_BUFFER_NULL . toString ( ) , e . getMessage ( ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertNull ( inStream . nextEntry ( ) )
assertEquals ( blobSize , mk . getLength ( id ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( allZoneIds . size ( ) ) . isGreaterThan ( 1 )
assertEquals ( DateUtils . getDate ( milliseconds ) , DateUtils . getDate ( "2020/01/01" , "yyyy/MM/dd" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertFalse ( new GmtTimeZone ( false , 0 , 0 ) . useDaylightTime ( ) )
assertFalse ( new GmtTimeZone ( false , 0 , 0 ) . useDaylightTime ( ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( expectedNames , fileNames )
assertEquals ( 20 , result )
assertThat ( profile . getPrefix ( ) , is ( equalTo ( FsPath . create ( "/valid/absolute/path" ) ) ) )
assertEquals ( expected , actual )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertEquals ( expected , actual )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( allZoneIds . size ( ) ) . isGreaterThan ( 1 )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "[\"set_member\",1,2,3]" , serialized . toString ( ) )
assertEquals ( 4 , systemUnderTestDao . getAllRunners ( ) . size ( ) )
assertEquals ( "PASSED" , pom . getValue ( "properties/interpolatedProperty" ) )
assertEquals ( 1000 , dbs . getDataStore ( ) . getMinRecordLength ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertThat ( query . count ( ) , is ( 1 ) )
assertEquals ( 3 , schemaBasedDynamicDestinations . getSideInputs ( ) . size ( ) )
assertEquals ( "name" , font . getBitmaps ( ) . get ( 0 ) )
assertEquals ( uri . toString ( ) , ref . toString ( ) )
assertEquals ( "Negative value is not allowed here" , e . getMessage ( ) )
assertEquals ( "SNMPWrapper Error: SNMP client is null" , e . getMessage ( ) )
assertEquals ( "" , s )
assertEquals ( new String ( content ) , new String ( read ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( 20 , stringsToSearch . size ( ) )
assertNotNull ( baos )
assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertThat ( new MppdbDecodingPlugin ( null ) . decode ( data , logSequenceNumber ) , instanceOf ( PlaceholderEvent . class ) )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
assertThat ( map . get ( new String ( entry . getKey ( ) ) ) ) . isEqualTo ( entry . getValue ( ) )
assertThat ( getValue ( ) , is ( sameInstance ( ( Object ) value ) ) )
assertNotNull ( result )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertTrue ( excelSheetReader . hasColNames ( ) )
assertTrue ( excelSheetReader . hasColNames ( ) )
assertEquals ( 0 , message . getNavigationalStatus ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( Short . MAX_VALUE , filter . getOrder ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( 10 , test . getUnchecked ( 1 ) . intValue ( ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( "name" , FileColumn . NAME . getTextValue ( file ) )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertFalse ( arrayType . canCreateSubtypes ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( test . getConnection ( ) )
assertNull ( this . producer . produce ( ) )
assertEquals ( clusterId , standByMaster . getClusterId ( ) )
assertEquals ( "closeable.close(); was not stubbed" , e . getMessage ( ) )
assertArrayEquals ( DATA , v . get ( ) )
assertThat ( result , is ( testObj ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertNotNull ( formatter )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertThat ( parse ( "xxx" ) . directives ( ) ) . isEmpty ( )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertEquals ( "Custom String" , config . getString ( "string" , "Custom String Default" ) )
assertEquals ( "Custom String" , config . getString ( "string" , "Custom String Default" ) )
assertEquals ( "RefTypeTest" , refType . getName ( ) )
assertEquals ( "value" , userConfiguration . getString ( "key" ) )
assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertThat ( environmentVariables . getProperty ( "a.property" ) , is ( "value" ) )
assertThat ( config . getOutputDirectory ( ) . getName ( ) , is ( "out" ) )
assertThat ( environmentVariables . getProperty ( "a.property" ) , is ( "value" ) )
assertThat ( parseArguments ( InterfaceWithNoGetPrefix . class , "--name" , "value" ) . name ( ) , equalTo ( "value" ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertNull ( npMapper . getOakPath ( jcrPath ) )
assertNull ( path , mapper . getOakPath ( path ) )
assertEquals ( name , npMapper . getOakName ( name ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertNull ( p )
assertNull ( p )
assertFalse ( n . exists ( ) )
assertFalse ( n . exists ( ) )
assertNull ( p )
assertFalse ( n . exists ( ) )
assertEquals ( "Hola mundo" , result . asString ( ) )
assertThat ( builder . asMap ( ) . get ( uncuried ( "foo" ) ) ) . isInstanceOf ( String . class )
assertEquals ( initial , after )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( calvalusProcessor . getTitle ( ) , equalTo ( "dummyProcessorName" ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertTrue ( exists ( 1 ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( result , list )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( subscribed . get ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertNull ( conf . getString ( "test.imaginarykey" ) )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertEquals ( test , new NFCNormalizer ( ) . normalize ( test ) . toString ( ) )
assertThat ( underTest . getValueOrNull ( ) ) . isNull ( )
assertThat ( underTest . getValueOrNull ( ) ) . isNull ( )
assertTrue ( cache . getSize ( ) < N )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertThat ( commit . get ( ) , is ( TRUE ) )
assertEquals ( ConstantFilter . EXCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertEquals ( ConstantFilter . INCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertEquals ( ConstantFilter . INCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertEquals ( ConstantFilter . EXCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertFalse ( p . apply ( createWithProperty ( name , value ) ) )
assertFalse ( p . apply ( createWithProperty ( name , value ) ) )
assertEquals ( nodeC , selector . select ( filter , null , null ) )
assertTrue ( root . isRoot ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "WIDE01018888" , WideFileInputInterpreter . toWideID ( "WIDE-01-01-8888" ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "medication" , this . component . getName ( ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( "WIDE01018888" , WideFileInputInterpreter . toWideID ( "WIDE-01-01-8888" ) )
assertEquals ( "345" , DiseaseOntology . extractDoid ( url ) )
assertEquals ( "HandlerManager" , name )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertEquals ( myType , entry . getType ( ) )
assertThat ( map . toString ( ) , is ( notNullValue ( ) ) )
assertThat ( map . toString ( ) , is ( notNullValue ( ) ) )
assertNull ( codec . getAggregator ( ) )
assertEquals ( wordCap . toString ( ) , "WordCap{word='aWord', isCapitalized=false}" )
assertEquals ( URIUtils . decode ( URIUtils . encode ( randomString ) ) , randomString )
assertEquals ( 6 , i )
assertNull ( manager . getCurrentRequestToken ( ) )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertEquals ( record , result )
assertEquals ( record , result )
assertEquals ( record , result )
assertEquals ( "Zipkin ContextResolverFactory" , victim . getName ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "y" , config . getString ( "x" ) )
assertThat ( human . getName ( ) ) . isNull ( )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertArrayEquals ( expected , actual , DELTA )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( "userid must be correct" , "admin" , cs . getAuthInfo ( ) . getUserID ( ) )
assertNotNull ( token )
assertEquals ( sc . getUserID ( ) , cs . getAuthInfo ( ) . getUserID ( ) )
assertNotNull ( token )
assertNull ( "Login should have failed." , cs )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "null" , mock . oneArray ( nullArray ) )
assertEquals ( "Region with name: APAC already exists" , e . getMessage ( ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( Errors . USER_NAME_DUPLICATE )
assertEquals ( name , definition . getName ( ) )
assertEquals ( 60 , exp )
assertEquals ( 60 , exp )
assertEquals ( 60 , exp )
assertThat ( new SQLTranslatorRule ( expected ) . getConfiguration ( ) , is ( expected ) )
assertEquals ( parent , handle . parent ( ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertFalse ( root . getTree ( tokenNodePath ) . exists ( ) )
assertEquals ( sc . getUserID ( ) , cs . getAuthInfo ( ) . getUserID ( ) )
assertThat ( Functions . request ( ) , is ( notNullValue ( ) ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertThat ( Functions . request ( ) , is ( notNullValue ( ) ) )
assertThat ( new EventIdConverter ( ) . marshal ( eventId ) ) . isEqualTo ( UUID )
assertThat ( new EventIdConverter ( ) . marshal ( eventId ) ) . isEqualTo ( UUID )
assertTrue ( tree . getRoot ( ) . getChildren ( ) . size ( ) > 1 )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( rootUri , mFileSystemMaster . getPath ( rootId ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0053: Invalid privilege bits for aggregated privilege definition." , e . getMessage ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( value , "," )
assertEquals ( 10 , p0 . distance ( p1 ) , 0 )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertEquals ( "type" , rrcCopy . getType ( ) )
assertEquals ( paths . get ( path ) , acl . getPath ( ) )
assertEquals ( paths . get ( path ) , acl . getOakPath ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( BrightnessMode . toEnum ( "invalid raw value" ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( empty ( ) , getErrorCode ( e ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( lhs + " + " + rhs , expr . toString ( ) )
assertTrue ( mdxBaseComponent . init ( ) )
assertTrue ( mdxBaseComponent . init ( ) )
assertTrue ( mdxBaseComponent . init ( ) )
assertTrue ( mdxBaseComponent . init ( ) )
assertFalse ( new Header ( ) . reset ( ) )
assertFalse ( new Header ( ) . reset ( ) )
assertFalse ( new Header ( ) . reset ( ) )
assertTrue ( lifecycle . getLifecycleState ( ) . isStopped ( ) )
assertEquals ( "2002:11:27 18:00:35" , directory . getString ( ExifIFD0Directory . TAG_DATETIME ) )
assertEquals ( privilege , p )
assertEquals ( readPriv , acMgr . privilegeFromName ( Privilege . JCR_READ ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( 0 , array . length )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertTrue ( stdoutWithNewlines ( ) . contains ( StellarShell . WELCOME ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , entry . getPrivilegeBits ( ) )
assertNull ( val )
assertEquals ( nameValue , val )
assertEquals ( nameValue , val )
assertNull ( vs )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( ace , ace2 )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( 1 , entries . length )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertEquals ( "IdentityEquals[c=extended-IdentityEquals]" , logAdapter . asString ( a ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( "On Write Possible" , _owp . get ( ) , greaterThanOrEqualTo ( 1 ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( 1 , policies . length )
assertEquals ( existingEntry , newEntry )
assertEquals ( 1 , policies . length )
assertEquals ( 1 , policies . length )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertTrue ( Iterables . isEmpty ( create ( empty ) . intersect ( empty ) ) )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
assertEquals ( integerRangeArr [ i ] , iterator . next ( ) )
assertThat ( factoryBean . getSuppressImportOnInit ( ) , is ( true ) )
assertThat ( fixture . selectFiles ( files ) ) . isSameAs ( fixture )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertThat ( config . getSentinels ( ) . size ( ) , is ( 0 ) )
assertEquals ( "" , getMetaphone ( "WHY" ) )
assertNotNull ( sourceLoader )
assertThat ( getCuriedObjectMapper ( ) . writeValueAsString ( resources ) ) . isEqualTo ( EMPTY_DOCUMENT )
assertThat ( config . getSentinels ( ) . size ( ) , is ( 0 ) )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertNull ( issueType . getObject ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertThat ( servletContext . getRealPath ( path ) , is ( realPath ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "abcd" , Joiner . on ( "" ) . join ( Lists . newArrayList ( iter ) ) )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertTrue ( actionServiceRegistered )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertThat ( new MyValidator ( ) . getLabel ( "aaa" ) , is ( "Aaa" ) )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertNull ( a . getPropertyStatus ( TreeConstants . OAK_CHILD_ORDER ) )
assertNull ( a . getProperty ( propName ) )
assertNull ( a . getProperty ( propName ) )
assertNull ( a . getPropertyStatus ( propName ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertThat ( p . getNext ( ) ) . isNull ( )
assertNull ( a . getProperty ( "aProp" ) )
assertNull ( a . getProperty ( "aProp" ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertFalse ( vs . exists ( ) )
assertTrue ( vs . exists ( ) )
assertFalse ( vs . exists ( ) )
assertTrue ( vs . exists ( ) )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertTrue ( tree . exists ( ) )
assertTrue ( tree . exists ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( found )
assertTrue ( found )
assertThat ( target . readValue ( value ) , is ( false ) )
assertThat ( target . readValue ( value ) , is ( false ) )
assertTrue ( tree . exists ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertThat ( authenticator . authenticate ( SimplePrincipal . of ( "CN=disabled" ) , true ) ) . isEmpty ( )
assertThat ( THE_OBJECT , should ( is ( THE_OBJECT ) ) . after ( pageRefresh ( driver ) ) )
assertTrue ( entityListenersService . isEmpty ( repoFullName ) )
assertEquals ( "['s1', 's2']" , ToString . toStringOf ( array ( "s1" , "s2" ) ) )
assertTrue ( this . entityAccess . updateCollaborators ( collaborators ) )
assertEquals ( "Object.property" , property . toString ( ) )
assertEquals ( "medication" , this . component . getName ( ) )
assertEquals ( 0 , es . size ( ) )
assertEquals ( 0 , es . size ( ) )
assertThat ( lhs . isEmpty ( ) , is ( true ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertFalse ( ps . exists ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( localDate , DataConverter . toLocalDate ( localDate ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3.141592\n" ) )
assertEquals ( "pluck" , transformer . name ( ) )
forEach ( ax -> assertTrue ( ax instanceof OWLObjectPropertyDomainAxiom , ax . toString ( ) ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( 5 , supplier . get ( ) , 0.1 )
assertNotNull ( query . fetchFirst ( ) )
assertEquals ( record , result )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( name , person . getName ( ) )
assertEquals ( 1 , services . length )
assertTrue ( obj . getService ( ) . equals ( "tcp://10.0.0.1:8080" ) || obj . getService ( ) . contains ( "tcp://10.0.0.2:8080" ) )
assertTrue ( stack . isEmpty ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( size , result . size ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( basePath , wrapper . getBasePath ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( basePath , wrapper . getBasePath ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( 1 , presenter . getValue ( ) . size ( ) )
assertEquals ( 1 , presenter . getValue ( ) . size ( ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertFalse ( vs . exists ( ) )
assertEquals ( "{summary=[], text=[], notminor=[], token=[!testToken]}" , params . toString ( ) )
assertEquals ( 0 , toTest . size ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "foo" , id )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertNull ( property )
assertNull ( result )
assertNull ( result )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertNull ( result )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertNotNull ( reader . readDefinition ( JCR_READ ) )
assertNull ( reader . readDefinition ( JCR_READ ) )
assertEquals ( name , definition . getName ( ) )
assertThat ( T0 . unit . toString ( ) ) . isEqualTo ( "()" )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "hello, baobao" , content )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertThat ( nestedAttribute . toString ( ) ) . isEqualTo ( "Attribute1.Attribute*2.Attribute-3" )
assertThat ( nestedAttribute . toString ( ) ) . isEqualTo ( "Attribute1.Attribute*2.Attribute-3" )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( request . getUserProperties ( ) . getProperty ( "w" ) , is ( "x=y" ) )
assertThat ( cacheManager . getCache ( "cache" ) , sameInstance ( cache ) )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( nullLocation , rootLocation . getParent ( ) )
assertEquals ( "dtableVerifier" , new DecisionTableVerifierWebWorkerProvider ( ) . getId ( ) )
assertEquals ( "dtableVerifier" , new DecisionTableVerifierWebWorkerProvider ( ) . getId ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertThat ( bean . getMostRecentException ( ) ) . isEqualTo ( "com.jamonapi.Exceptions" )
assertThat ( bean . getMostRecentException ( ) ) . isEqualTo ( "com.jamonapi.Exceptions" )
assertThat ( bean . getMostRecentException ( ) ) . isEqualTo ( "com.jamonapi.Exceptions" )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNull ( "DNS data returend" , result )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_buddiesMapped . FILTER(?user_buddiesMapped = ?_c6) }" )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_buddiesMapped . FILTER(?user_buddiesMapped = ?_c6) }" )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( console . isDiagnosticsEnabled ( ) , is ( true ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( console . isDiagnosticsEnabled ( ) , is ( true ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertNull ( testMock )
assertNull ( testMock )
assertNull ( testMock )
assertEquals ( expectedString , StringUtil . substringIncludingLast ( str , separator ) )
assertNull ( testMock )
assertTrue ( list . isEmpty ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertTrue ( true )
assertThat ( cmmnRuntimeService . createPlanItemInstanceQuery ( ) . caseInstanceId ( caseInstanceId ) . list ( ) ) . hasSize ( 4 )
assertThat ( generator . generateAssertionsEntryPointClassContentFor ( null , assertionsEntryPointType , null ) ) . isEmpty ( )
assertEquals ( testSize , set . size ( ) )
assertTrue ( true )
assertNull ( testMock )
assertNotNull ( factory . createEntityAcl ( ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertTrue ( tradeService . cancelOrder ( new DefaultCancelOrderParamId ( ) ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "hello, baobao" , content )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( "0b0da3" , rfAddress )
assertEquals ( "0b0da3" , rfAddress )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertThat ( e . getMessage ( ) ) . contains ( "Cannot find external task with id nonExistingExternalTaskId" )
assertNotNull ( factory . createEntityAcl ( ) )
fail ( e . getMessage ( ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( el ( "element" , attr ( "a" , "b" ) ) . hasAttr ( "a" ) ) . isTrue ( )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( 60 , exp )
assertNull ( result )
assertNull ( result )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertNull ( result )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertNull ( result )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertNotNull ( jcoder )
assertFalse ( db . containsKey ( entry . id ( ) ) )
assertEquals ( stepBasedSequenceHandler . getIdpRoleClaimUri ( externalIdPConfig ) , expectedRoleClaimUri )
assertEquals ( stepBasedSequenceHandler . getIdpRoleClaimUri ( externalIdPConfig ) , expectedRoleClaimUri )
assertEquals ( stepBasedSequenceHandler . getIdpRoleClaimUri ( externalIdPConfig ) , expectedRoleClaimUri )
assertEquals ( stepBasedSequenceHandler . getIdpRoleClaimUri ( externalIdPConfig ) , expectedRoleClaimUri )
assertEquals ( List . of ( ) , parser . parseBookmarks ( VirtualValues . EMPTY_LIST ) )
assertEquals ( List . of ( ) , parser . parseBookmarks ( VirtualValues . EMPTY_LIST ) )
assertEquals ( List . of ( ) , parser . parseBookmarks ( VirtualValues . EMPTY_LIST ) )
assertThat ( confluence . isAvailable ( ) , is ( false ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( "hehe" , StringUtils . toAscii ( s ) )
assertEquals ( "name2" , inputItem . getFilename ( ) )
assertEquals ( "name2" , inputItem . getFilename ( ) )
assertEquals ( "name2" , inputItem . getFilename ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertFalse ( vs . exists ( ) )
assertTrue ( "Simple permission mapper should be created" , ops . exists ( TEST_SIMPLE_PERMISSION_MAPPER_ADDRESS ) )
assertEquals ( RestConst . REST , instance . getName ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( bean . getProperty ( ) ) . isEqualTo ( "value" )
assertThat ( bean . getProperty ( ) ) . isEqualTo ( "value" )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertThat ( typeDescription . getDeclaredAnnotations ( ) , is ( annotationList ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertFalse ( rabbit . getAttribute ( Startable . SERVICE_UP ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertFalse ( rabbit . getAttribute ( Startable . SERVICE_UP ) )
assertEquals ( "" , buf . toString ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNull ( testMock )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( user . getId ( ) , is ( getTestUser ( ) . getId ( ) ) )
assertEquals ( "user1" , echoValue )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( expected , actual )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertEquals ( 1 , policies . length )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertThat ( map . toString ( ) , is ( notNullValue ( ) ) )
assertEquals ( 2 , log . count )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertEquals ( OUTCOME_REFRESH , result )
assertThat ( spans ) . isEmpty ( )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertNull ( tested . getMediators ( ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertThat ( new Greeter ( ) . apply ( "World" ) ) . isEqualTo ( "Hello World" )
assertThat ( new Greeter ( ) . apply ( "World" ) ) . isEqualTo ( "Hello World" )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( ImmutableMap . of ( FOO_KEY , FOO_OBJECT , BAR_KEY , BAR_OBJECT ) , context . asMap ( ) )
ARMSTRONG_MAP . forEach ( ( number , result ) -> assertEquals ( result , ArmstrongNumberUtil . isArmstrong ( number ) ) )
assertEquals ( Util . convertToIndependentLineDelimiter ( MARKDOWN_0 ) , Util . convertToIndependentLineDelimiter ( result ) )
assertThatCode ( ( ) -> PropertyValue . createValue ( "k" , null ) ) . doesNotThrowAnyException ( )
assertThat ( filter . filter ( d , interpreter ) ) . isEqualTo ( StrftimeFormatter . format ( d ) )
assertEquals ( 10 , result )
assertThat ( installedPlugin . getInfo ( ) . getVersion ( ) , is ( Version . fromString ( "0.1" ) ) )
assertThat ( InfoTextHtmlSanitizer . sanitize ( "<a href=\"link\">link</a>" ) , containsString ( "<a href" ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertThat ( target . getId ( ) , is ( "link_id123" ) )
assertThat ( new InfraDatabaseTypeFixture ( ) . getSchema ( connection ) , is ( "ds" ) )
assertEquals ( "foo" , descriptor . getId ( ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( retryQueue . size ( ) , 1 )
assertTrue ( it . next ( ) instanceof ScaleByPercent )
assertThat ( new Greeter ( ) . apply ( "World" ) ) . isEqualTo ( "Hello World" )
assertFalse ( "Worst cost solution (2.1 > 2.0) should not be accepted" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 2.1 ) ) )
assertFalse ( "Worst cost solution (2.1 > 2.0) should not be accepted" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 2.1 ) ) )
assertEquals ( "FSTreeTest\n" , tree . toString ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( new Integer ( "2147483647" ) , result )
assertEquals ( new Integer ( "2147483647" ) , result )
assertEquals ( expected , op . apply ( value ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertTrue ( "True expected." , accessPermissionFactoryImpl . clone ( accessPermission ) instanceof AccessPermission )
assertEquals ( TEST_MESSAGE , e . getMessage ( ) )
assertEquals ( mbeanServerConnection . getDefaultDomain ( ) , platformMBeanServer . getDefaultDomain ( ) )
assertFalse ( ps . exists ( ) )
assertFalse ( ps . exists ( ) )
assertNotNull ( str )
assertNotNull ( str )
assertNotNull ( str )
assertThatFactory ( factory ) . createsSinglePostProcessor ( TestEnvironmentPostProcessor . class )
assertEquals ( expected , actual )
assertEquals ( defaultValue , config . get ( Integer . class , KEY_PREFIX , defaultValue ) )
assertThatPrincipals ( server . expectedPrincipals ( ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertEquals ( objectId , TreeUtils . getObjectId ( "a/b.txt" , tree , repo ) )
assertFalse ( perun . getDatabaseManagerBl ( ) . propertyExists ( property ) )
assertThat ( isEmpty ( Paths . get ( "invalid-addr" ) ) ) . isFalse ( )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )

assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( privilege , p )
assertNull ( "Should not have returned providerMetadata JsonObject" , result )
assertEquals ( "default" , object . getString ( "foo" , "default" ) )
assertThat ( "Has default credentials" , sut . getCredentials ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "new name" , e . getName ( ) )
assertEquals ( "1.3.0-SNAPSHOT" , pom . getValue ( "build/plugins[1]/version" ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( "name" , name )
assertTrue ( root . move ( "/s" , "/s" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertThat ( getQueryParamMap ( "switchyard://SomeService?foo" ) . isEmpty ( ) , is ( true ) )
assertTrue ( cache . isRequested ( 1 ) )
assertEquals ( "file:////host/site/test-child" , pom . getValue ( "distributionManagement/site/url" ) )
assertEquals ( "file:////host/site/test-child" , pom . getValue ( "distributionManagement/site/url" ) )
assertEquals ( "file:////host/site/test-child" , pom . getValue ( "distributionManagement/site/url" ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( "nicechart" , CodecUtils . filenameEncode ( "nicechart" ) )
assertNull ( a . getPropertyStatus ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( "k=" + k , NEW , x . getChild ( "added" ) . getStatus ( ) )
assertEquals ( req . getClusterId ( ) , id )
assertNotNull ( nats )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( 1 , aces . length )
assertThat ( this . context . getBean ( ServletContextAwareEmbeddedConfiguration . class ) . getServletContext ( ) ) . isNull ( )
assertThat ( flattened . collect ( toList ( ) ) ) . containsExactly ( 1 )
assertEquals ( "/a/c" , path . toString ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( base , root . getBaseState ( ) )
assertEquals ( base , root . getBaseState ( ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertThat ( regionParser . getParentName ( mockElement ) ) . isNull ( )
assertEquals ( result , description )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertNull ( property , "void methods should not be accepted as property" )
assertTrue ( "testGetCurrent 0" , DateUtils . isSameDay ( DCDate . getCurrent ( ) . toDate ( ) , calendar . getTime ( ) ) )
assertTrue ( e instanceof IllegalArgumentException )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertThat ( OutputStreamFormater . spaces ( 20 ) . length ( ) , is ( 20 ) )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertNotNull ( node )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( path , nf . getPath ( groupNode ) )
assertNull ( testMock )
assertEquals ( path , nf . getPath ( groupNode ) )
assertEquals ( path , nf . getPath ( groupNode ) )
assertNull ( testMock )
assertNull ( routingRuleCache . getRoutingRule ( repository ) )
assertTrue ( name . equals ( node . getName ( ) ) )
assertEquals ( "bar2" , parent . getProperty ( "foo" ) . getString ( ) )
assertFalse ( session . getNode ( path ) . isLocked ( ) )
assertTrue ( root != null )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( "name" , instance . getName ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertThat ( tableAClient1 . get ( "KeyClient2" ) ) . isEqualTo ( 2 )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( uri , instance . getURI ( ) )
assertEquals ( uri , instance . getURI ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( 10 , cacheManager . getMaximumSizeMB ( ) , 1e-9 )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertEquals ( uri , instance . getURI ( ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertThat ( score > 0.0f , is ( true ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertEquals ( "jcr:read" , privileges [ 0 ] . getName ( ) )
assertEquals ( "Invalid to have null byte array in KeyValue." , iae . getMessage ( ) )
assertEquals ( Normal , Orientation . fromMetadataOrientation ( null ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertThat ( spans ) . isEmpty ( )
assertEquals ( "property" , theProperty . getName ( ) )
assertTrue ( e . getMessage ( ) . contains ( DalAnnotationValidator . VALIDATION_MSG ) )
assertEquals ( "cmis" , root . getName ( ) )
assertThat ( node , is ( notNullValue ( ) ) )
assertEquals ( "cmis" , root . getName ( ) )
assertNotNull ( node )
assertEquals ( "cmis" , root . getName ( ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( filter , filterRepository . getFilterByName ( "EMPTY" ) )
assertFalse ( true , "didn't find FakeDriver" )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertTrue ( ! retrievedIdValues . contains ( application . getId ( ) ) )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertThat ( underTest . getType ( ) , is ( TYPE ) )
assertEquals ( System . getProperty ( "user.home" ) + File . separator , cache1 . getPath ( ) )
assertThat ( user . getName ( ) ) . isEqualTo ( "John" )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( "iterator loses records" , BaseStreamTest . tenRowsTwoDuplicateRecords . size ( ) , numElements )
assertEquals ( it . next ( ) , q . take ( ) )
assertEquals ( it . next ( ) , q . take ( ) )
assertTrue ( found )
assertTrue ( found )
assertEquals ( 2 , hashset . size ( ) )
assertNotNull ( "Stateless Session always uses a new instance for method call, therefore should never callback, but was null." , ejb1 )
assertNotNull ( "Stateless Session always uses a new instance for method call, therefore should never callback, but was null." , ejb1 )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "name" , instance . getName ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( "foo" , featureId . getID ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "Stateless Session always uses a new instance for method call, therefore should never callback, but was null." , ejb1 )
assertEquals ( parameter . getParameterId ( ) , id )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "unknown" , name )
assertTrue ( ( ( Integer ) db . getLastValue ( "TestMetric" ) ) == 19 )
assertEquals ( new String ( content ) , new String ( read ) )
assertTrue ( "There should be wsdls to compare" , files != null && files . length > 0 )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( getCuriedObjectMapper ( ) . writeValueAsString ( resources ) ) . isEqualTo ( CURIED_DOCUMENT )
assertThat ( getCuriedObjectMapper ( ) . writeValueAsString ( resources ) ) . isEqualTo ( CURIED_DOCUMENT )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( l . launch ( ) ) . isEqualTo ( 15 )
assertThat ( l . launch ( ) ) . isEqualTo ( 15 )
assertTrue ( "The date and time was not formatted in ISO-8601 format in messages.log." , lines . size ( ) > 0 )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( x . getBaseState ( ) , x . getNodeState ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( x . getBaseState ( ) , x . getNodeState ( ) )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertEquals ( "cheese" , built . getString ( ) )
assertThat ( writer . get ( ) , is ( false ) )
assertEquals ( expected , stormAdminService . stopIndexingTopology ( "random_access_indexing" , false ) )
assertThat ( property . getName ( ) ) . isEqualTo ( "var_name_with_underscores" )
assertEquals ( "2" , eval ( "#macro inc(int x)${x+1}#end${macroGet('inc', 1)}" ) )
assertEquals ( Optional . ofNullable ( proxy1 . getId ( ) ) , Optional . ofNullable ( proxyUriIdMap . get ( proxy1 . getUri ( ) ) ) )
assertTrue ( obj . getService ( ) . equals ( "tcp://10.0.0.1:8080" ) || obj . getService ( ) . contains ( "tcp://10.0.0.2:8080" ) )
assertEquals ( Optional . ofNullable ( proxy1 . getId ( ) ) , Optional . ofNullable ( proxyUriIdMap . get ( proxy1 . getUri ( ) ) ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( repeat ( "a" , 506 ) + NL + " " + repeat ( "a" , 7 ) , getMainAttributeValue ( manifest , "test" ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( inetAddress , sslSocketAdapter . getLocalAddress ( ) )
assertEquals ( "WMT_MS_Capabilities" , e . getLocalName ( ) )
assertThat ( applicationHome . getDir ( ) ) . isEqualTo ( app )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( arrExpected . get ( i ) , email . getFromAddress ( ) )
assertEquals ( in , out )
assertThat ( e . getMessage ( ) , is ( String . format ( EXPECTED_ERROR_MESSAGE , value ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "someInterface" , name )
assertEquals ( target . size ( ) , 4 )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertTrue ( result instanceof OSelectStatement )
assertEquals ( "true" , existEmbeddedServer . executeOneValue ( query ) )
assertTrue ( result instanceof OSelectStatement )
assertEquals ( "Incorrect count returned!" , 3 , i )
assertEquals ( "Incorrect count returned!" , 3 , i )
assertThat ( OptionalBoolean . empty ( ) , isEmpty ( ) )
assertThat ( OptionalBoolean . empty ( ) , isEmpty ( ) )
assertEquals ( pk . getObjectIdentifier ( ) , TAObjectIdentifier . id_TA_ECDSA_SHA_512 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( 2 , count )
assertThat ( process ( messageProcessor , getTestEventUsingFlow ( "0" ) ) , is ( nullValue ( ) ) )
assertThat ( process ( messageProcessor , getTestEventUsingFlow ( "0" ) ) , is ( nullValue ( ) ) )
assertFalse ( list . isEmpty ( ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( "My_Folder-0-0" , name )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertEquals ( strip ( collectionText ( ) ) , writer . toString ( ) )
assertTrue ( test . shutdownCalls > 0 )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertEquals ( dto , pass ( dto , DeleteMeterResult . class ) )
assertEquals ( dto , pass ( dto , DeleteMeterResult . class ) )
assertEquals ( dto , pass ( dto , DeleteMeterResult . class ) )
assertEquals ( "Expected output in GZIP." , TEST_STRING_IN_GZIP , streamBytes )
assertEquals ( null , LayerTreePersistance . saveToDocument ( null ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( 0 , source . getEstimatedSizeBytes ( null ) )
assertThat ( del . getDeadline ( ) , is ( deadline ) )
assertEquals ( "x_x_x_x" , sessionFolder . getName ( ) )
assertEquals ( "x_x_x_x" , sessionFolder . getName ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( "Unknown request type: " + requestType , knownRequestTypes . contains ( requestType ) )
fail ( "Should throw an exception here" )
assertEquals ( "" , s )
assertEquals ( System . getProperty ( "user.dir" ) , value )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( 81 , options . getOptions ( ) . port )
assertTrue ( is instanceof ByteArrayInputStream )
assertEquals ( "bar" , result )
assertTrue ( readOutput ( ) . contains ( "project name is not provided" ) )
assertEquals ( toString ( dest ) , data . substring ( 0 , halfDataLength ) )
assertThat ( commandLineIO . getResultHandler ( ) , equalTo ( resultHandler ) )
assertEquals ( Architecture . ARMv6 , Architecture . getFromCpuInfo ( info ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
assertTrue ( count <= 2 , "Some temp files from old tests are found" )
assertTrue ( count <= 2 , "Some temp files from old tests are found" )
assertThat ( cache . ms . contains ( "aaa" ) , is ( false ) )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertNotNull ( connection . createChannel ( 1 ) )
assertEquals ( translator . getTranslation ( originalText ) , originalText )
order -> assertThat ( order . getOrderNumber ( ) ) . contains ( orderNumber ) )
assertNotNull ( result )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertNull ( gTableMap . createGroupKey ( null ) )
assertThat ( query , is ( notNullValue ( ) ) )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( path , nf . getPath ( groupNode ) )
assertEquals ( "baz" , manipulation . getColumnToRemove ( ) )
assertEquals ( 0 , refInt . get ( ) )
assertEquals ( RestartPolicy . parse ( "always" ) , RestartPolicy . alwaysRestart ( ) )
assertEquals ( "Retrieved value should match entered value" , value , retrievedValue )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( "id" , config . getId ( ) )
assertThat ( jarCommand . getMode ( ) ) . isEqualTo ( ProcessingMode . packaged )
assertThat ( interactionEvent . getIdentifier ( ) , is ( identifier ) )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertTrue ( true )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertThat ( new InstrumentedType . Frozen ( TypeDescription . ForLoadedType . of ( String . class ) , loadedTypeInitializer ) . getLoadedTypeInitializer ( ) , is ( loadedTypeInitializer ) )
assertEquals ( list . get ( i ++ ) , x )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertNotNull ( session . getNode ( "/preconfiguredProjection" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "db.val1" , config . getProperty ( "db.key1" ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( lazyEntity . getIdValue ( ) , id )
assertEquals ( "pluck" , transformer . name ( ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "db.val1" , config . getProperty ( "db.key1" ) )
assertThat ( GemfireCache . wrap ( mockRegion ) . getName ( ) ) . isEqualTo ( "Example" )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "db.val1" , config . getProperty ( "db.key1" ) )
assertThat ( fixture . clientProperty ( "name" ) ) . isEqualTo ( "Yoda" )
assertThat ( fixture . clientProperty ( "name" ) ) . isEqualTo ( "Yoda" )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( null , result )
assertEquals ( WORKER_EXCEPTION , operation . getType ( ) )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertThat ( subject . get ( MP3_FILE_NAME ) , is ( equalTo ( EMPTY_BUFFER ) ) )
assertEquals ( "subdir/file" , relativize ( "c:/path/to/dir" , "c:/path/to/dir/subdir/file" ) )
assertEquals ( "subdir/file" , relativize ( "c:/path/to/dir" , "c:/path/to/dir/subdir/file" ) )
assertEquals ( "subdir/file" , relativize ( "c:/path/to/dir" , "c:/path/to/dir/subdir/file" ) )
assertThat ( I18nUtil . getLocale ( ) , is ( Locale . ENGLISH ) )
assertThat ( I18nUtil . getLocale ( ) , is ( Locale . ENGLISH ) )
assertThat ( I18nUtil . getLocale ( ) , is ( Locale . ENGLISH ) )
assertNull ( st . getProperty ( "NOT_EXISTING" ) )
assertTrue ( DateTimeUtils . getLocaleByCountry ( "en" , "us" ) . equals ( Locale . US ) )
assertTrue ( DateTimeUtils . getLocaleByCountry ( "en" , "us" ) . equals ( Locale . US ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertNull ( TestStringEnum . fromString ( null ) )
assertEquals ( name , definition . getName ( ) )
assertTrue ( stack . isEmpty ( ) )
assertThat ( underTest . getOnboardingItems ( ) . size ( ) , is ( 0 ) )
assertEquals ( 10L , element . value ( ) )
assertArrayEquals ( testArray , options . getConfigValue ( "test" , null , String [ ] . class ) )
assertEquals ( 60 , exp )
assertEquals ( 60 , exp )
assertEquals ( options . buildQueryParameters ( ) . get ( "marker" ) , ImmutableList . of ( "test" ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( getCommentManager ( ) , commentManager . getClass ( ) )
assertEquals ( record , result )
assertEquals ( record , result )
assertEquals ( 0 , toTest . size ( ) )
assertEquals ( name , definition . getName ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertTrue ( "testCreateSharedDurableExpiry_B_SecOff failed" , testResult )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
assertTrue ( "testCreateSharedDurableExpiry_B_SecOff failed" , testResult )
assertFalse ( loginModule . abort ( ) )
assertFalse ( loginModule . abort ( ) )
assertEquals ( credentials , provider . getCredentials ( ) )
assertEquals ( GROUPS [ 0 ] , getSubject ( ) . getEnabledGroup ( ) )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( true ) )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( true ) )
assertEquals ( EXAMPLE , connectionManager . getLookupKey ( EXAMPLE ) )
assertEquals ( localDate , DataConverter . toLocalDate ( localDate ) )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertThat ( suiteFile . getRobotParserFile ( ) ) . hasName ( "abc.robot" )
assertEquals ( 255 , s . available ( ) )
assertEquals ( 255 , s . available ( ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( new Path ( "/horseheads" ) , that . getOutputPath ( ) )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertEquals ( error , handledError )
assertEquals ( "/foobar" , Decoder . path ( "/foobar" ) )
assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertNotNull ( client )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertTrue ( to . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
assertThat ( this . spannerKeyProperty . getSpelExpression ( ) ) . isNull ( )
assertNull ( servletContext . getAttribute ( "servlet-context-attr" ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertThat ( this . spannerKeyProperty . getSpelExpression ( ) ) . isNull ( )
ARMSTRONG_MAP . forEach ( ( number , result ) -> assertEquals ( result , ArmstrongNumberUtil . isArmstrong ( number ) ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertThat ( description . toString ( ) , is ( "x" ) )
assertThat ( p . toString ( ) , is ( equalTo ( "OidcSubjectPrincipal[sub-claim@OP]" ) ) )
assertFalse ( this . marker . remove ( null ) )
assertThat ( complete ( ":" ) ) . containsExactlyInAnyOrderElementsOf ( allCommands )
assertNotNull ( rb )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertNull ( decoder . frameListener ( ) )
assertThat ( presentation . getImage ( someObject ) ) . isNull ( )
assertArrayEquals ( DATA , v . get ( ) )
assertEquals ( "Unable to handle callbacks: Test IOException" , e . getMessage ( ) )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "sha-1" , command . getName ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertNotNull ( list . getActionMap ( ) . getParent ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( msg , e . getMessage ( ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( val )
assertNull ( val )
assertEquals ( nameValue , val )
assertNull ( vs )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( nameValue , val )
assertEquals ( nameValue , val )
assertEquals ( paths . get ( path ) , acl . getPath ( ) )
assertEquals ( paths . get ( path ) , acl . getOakPath ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( BrightnessMode . toEnum ( "invalid raw value" ) )
assertThat ( new Plugin . Engine . Source . Compound ( Collections . < Plugin . Engine . Source > emptyList ( ) ) . read ( ) , sameInstance ( ( Plugin . Engine . Source . Origin ) Plugin . Engine . Source . Empty . INSTANCE ) )
assertNotNull ( cs . getEndpoint ( ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertNull ( valve . getOtherwiseBlock ( ) )
assertEquals ( privilege , p )
assertTrue ( wb1 . equals ( wb1 ) )
assertThat ( ArrayUtils . nullToEmpty ( array ) ) . isEmpty ( )
assertTrue ( wb1 . equals ( wb1 ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( message , e . getMessage ( ) )
assertThat ( logger . getName ( ) , equalTo ( LOGGER_NAME ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( string , caselessString . getString ( ) )
assertEquals ( string , caselessString . getString ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( value , 1000000000L )
assertNull ( filter ( null ) )
assertEquals ( entry . getValue ( ) . longValue ( ) , Permissions . getPermissions ( entry . getKey ( ) , tl , false ) )
assertEquals ( "[A, B, E, C, F, D]" , list . toString ( ) )
ARMSTRONG_MAP . forEach ( ( number , result ) -> assertEquals ( result , ArmstrongNumberUtil . isArmstrong ( number ) ) )
assertTrue ( to . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
assertEquals ( "name" , name )
assertThat ( new ParseASTNode ( parseTree , mock ( CommonTokenStream . class ) ) . getRootNode ( ) , is ( parseTree ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( name , definition . getName ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertThat ( r . hasUnrestrictedChild ( LIST , FsPath . create ( "/foo/bar" ) ) , is ( equalTo ( false ) ) )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertEquals ( price ( ) . apply ( item ) , price )
assertNotNull ( gpf )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( IDENT ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( props . get ( MessageHelper . APP_PROPERTY_ORIG_ADAPTER ) ) . isEqualTo ( ADAPTER_NAME )
assertEquals ( principal , EveryonePrincipal . getInstance ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( name , definition . getName ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( principal , p )
assertTrue ( ! retrievedIdValues . contains ( application . getId ( ) ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertNull ( Cli . getResultFile ( ( Command ) new HelpCommand ( ) ) )
assertEquals ( "medication" , this . component . getName ( ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertTrue ( cl . getName ( ) , Expression . class . isAssignableFrom ( cl ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertEquals ( "Expected and actual values should be the same." , name , xmlAdaptedNameTypeValueObject . getName ( ) )
assertEquals ( blockBuilder . build ( ) . getEncodingName ( ) , RunLengthBlockEncoding . NAME )
assertEquals ( blockBuilder . build ( ) . getEncodingName ( ) , RunLengthBlockEncoding . NAME )
assertEquals ( blockBuilder . build ( ) . getEncodingName ( ) , RunLengthBlockEncoding . NAME )
assertEquals ( dao . getCollectionUUIDByName ( "Asia" ) , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1" )
assertEquals ( dao . getCollectionUUIDByName ( "Asia" ) , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1" )
assertEquals ( dao . getCollectionUUIDByName ( "Asia" ) , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1" )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( name , definition . getName ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( prefs . getPathExport ( ) . isEmpty ( ) )
assertEquals ( principal , p )
assertEquals ( expected , CoreUtils . getApplicationId ( clientOptions , logOptions ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertEquals ( "abc" , Strings . append ( "c" ) . to ( "ab" ) )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertFalse ( vs . exists ( ) )
assertEquals ( "JAVA" , toUpperCase . apply ( "java" ) )
assertEquals ( "JAVA" , toUpperCase . apply ( "java" ) )
assertEquals ( "JAVA" , toUpperCase . apply ( "java" ) )
assertEquals ( "not matched" , null , isBlank ( input ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertEquals ( testInstance . getAllIds ( ) , expected )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> assertThat ( stream ) . isEqualTo ( stream ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( state . get ( "admin.password.file" ) , nullValue ( ) )
assertThat ( state . get ( "admin.password.file" ) , nullValue ( ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( Integer . toString ( i ) , Double . isNaN ( Gamma . gamma ( i ) ) )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
assertEquals ( expected , paths )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( name , npMapper . getOakName ( name ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertNotNull ( str )
assertEquals ( userId , workspaceInfo . getUserId ( ) )
assertNotNull ( result )
assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertNull ( map . get ( "test" ) )
assertNotNull ( dataSource . getConnection ( "" , "" ) )
assertNotNull ( dataSource . getConnection ( "" , "" ) )
assertNotNull ( dataSource . getConnection ( "" , "" ) )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( aList , is ( List . of ( ) ) )
assertNotNull ( builder )
assertEquals ( "'Hello'" , Strings . quote ( o ) )
assertNull ( SegmentId . tryParse ( "datasource" , "datasource_invalid_interval_version" ) )
assertNull ( SegmentId . tryParse ( "datasource" , "datasource_invalid_interval_version" ) )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "Custom String" , config . getString ( "string" , "Custom String Default" ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( String . format ( "(%f, %s)" , sv1 . score , sv1 . value ) , sv1 . toString ( ) )
assertEquals ( "JDBC" , result )
assertEquals ( "" , result )
assertTrue ( attempts > 0 , "attempts > 0" )
assertTrue ( attempts > 0 , "attempts > 0" )
assertEquals ( "1.3.0-SNAPSHOT" , pom . getValue ( "build/plugins[1]/version" ) )
assertEquals ( "1.3.0-SNAPSHOT" , pom . getValue ( "build/plugins[1]/version" ) )
assertTrue ( stack . isEmpty ( ) )
assertThat ( map . size ( ) ) . isEqualTo ( 0 )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertNull ( BranchUtils . getLastLog ( "test_branch" , repo ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "hello" , PropertyExpander . expandProperties ( context , "${#test#//value/text()}" ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> createQuery ( queryMethod ) )
assertEquals ( "hello" , PropertyExpander . expandProperties ( context , "${#test#//value/text()}" ) )
assertEquals ( "{there=22, hi=5}" , m1 . toString ( ) )
assertEquals ( "{there=22, hi=5}" , m1 . toString ( ) )
assertEquals ( "{there=22, hi=5}" , m1 . toString ( ) )
assertNull ( store . retrieve ( cp ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertTrue ( "By default should return true" , getTransactionAdapter ( ) . run ( null ) )
assertEquals ( "test" , SidUtils . getStringValue ( sid ) )
assertFalse ( message . isAccurate ( ) )
assertEquals ( "?var2=value-of-var2{&var1}" , partiallyExpanded )
assertEquals ( expectedCounterDateValues , result [ i ] . getDateList ( ) . size ( ) )
assertEquals ( "hello" , ( new Hello ( ) ) . getMessage ( ) )
assertEquals ( 0 , result )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertThat ( new EventIdConverter ( ) . marshal ( eventId ) ) . isEqualTo ( UUID )
assertEquals ( 0 , result )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( serverList . get ( i ) , result . get ( i ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertTrue ( excelSheetReader . hasColNames ( ) )
assertTrue ( excelSheetReader . hasColNames ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( Short . MAX_VALUE , filter . getOrder ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( "@javax.validation.constraints.NotNull" , w . toString ( ) . trim ( ) )
assertFalse ( p . apply ( createWithProperty ( name , value ) ) )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertEquals ( Integer . valueOf ( 1 ) , future . get ( 2 , TimeUnit . SECONDS ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( "SimpleTestBean(42)" , findGrid ( ) . getCell ( 0 , 2 ) . getText ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertThat ( delegate . getEntity ( ) . getContentType ( ) ) . isEqualTo ( ContentType . TEXT_PLAIN . toString ( ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
fail ( )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( "bar" , conf . getString ( "foo" ) )
assertEquals ( "{\"async\":true}" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( "DEF" , conf . getProperty ( "worker.publicKey" ) )
assertEquals ( n . normalize ( "AbC" ) , "abc" )
assertEquals ( n . normalize ( "AbC" ) , "abc" )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertEquals ( expectedTableName , getTableName ( entityType ) )
assertEquals ( expectedIdentifier , testSubject . getTokenStoreIdentifier ( ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertFalse ( msg . getVirtualAidFlag ( ) )
assertFalse ( msg . getVirtualAidFlag ( ) )
assertFalse ( msg . getVirtualAidFlag ( ) )
assertEquals ( new Local ( "/private/tmp" ) , new FinderLocal ( "/tmp" ) . getSymlinkTarget ( ) )
assertEquals ( TEXT1 + " " + TEXT2 , PdfTextExtractor . getTextFromPage ( new PdfReader ( bytes ) , 1 , createRenderListenerForTest ( ) ) )
assertFalse ( floatQuantCompressor . compress ( FloatBuffer . wrap ( new float [ 4 ] ) , ByteBuffer . wrap ( new byte [ 100 ] ) ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertFalse ( wasCalled . get ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertEquals ( UnavailableContent . class , is . readContent ( ) . getClass ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertEquals ( bs1 , bs2 )
assertEquals ( expected , b )
assertThat ( e . getMessage ( ) , is ( "token must not be null" ) )
assertThat ( service . getHome ( ) , is ( kanbanHome . getRoot ( ) ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertArrayEquals ( expectedSorted , data )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNotNull ( NetUtils . getHostName ( "127.0.0.1" ) )
assertNotNull ( NetUtils . getHostName ( "127.0.0.1" ) )
assertNotNull ( NetUtils . getHostName ( "127.0.0.1" ) )
assertNotNull ( NetUtils . getHostName ( "127.0.0.1" ) )
assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertEquals ( repeat ( "\n" , 512 ) , make512Safe ( repeat ( "\n" , 512 ) ) )
assertEquals ( 1584 , length )
assertThat ( e . getMessage ( ) , containsString ( "FOO" ) )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( Integer . toString ( 1 ) , id . toString ( ) )
assertEquals ( 4 , UUID . fromString ( run . getID ( ) ) . version ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( sut . value ( ) , equalTo ( VALUE ) )
assertEquals ( cal . getTime ( ) , testedGsi . getCd ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertEquals ( 0 , toTest . size ( ) )
assertTrue ( serviceQueue < 10 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertThat ( p . getNext ( ) ) . isNull ( )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
fail ( "CloudifyMachine validation failed: " + e . getMessage ( ) )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertTrue ( super . ds . create ( Collection . NODES , Collections . singletonList ( up ) ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( blobSize , mk . getLength ( id ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( builder . toString ( ) , "@Id(name=\"foobar\")" , "Unexpected annotations built by JPAAnnotationBuilder." )
assertEquals ( null , replaceFilter ( null , null , null , false ) )
assertEquals ( null , replaceFilter ( null , null , null , false ) )
fail ( )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testIntentRequest ) ) . getLocale ( ) , "FooLocale" )
assertEquals ( "{\"branchVisible\":{},\"regular\":{},\":childNodeCount\":2}" , nodes )
assertNotNull ( e . getMessage ( ) )
assertThat ( builder . toString ( ) ) . isEqualTo ( "/foo/bar" )
assertThat ( path ) . isEqualTo ( REPOSITORY_BASEDIR . resolve ( "relative" ) )
assertThat ( builder . toString ( ) ) . isEqualTo ( "/foo/bar" )
assertThat ( builder . toString ( ) ) . isEqualTo ( "/foo/bar" )
assertThat ( builder . toString ( ) ) . isEqualTo ( "/foo/bar" )
assertNotNull ( bulk )
assertNotNull ( bulk )
assertEquals ( "SUCCESS" , future . get ( ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "Wrong property value after merge" , expectedNode , mergedNode )
assertEquals ( "2014-12-24" , info . getFormattedRevision ( ) )
assertEquals ( "2014-12-24" , info . getFormattedRevision ( ) )
assertEquals ( "" , result )
assertEquals ( "Wrong initial state." , CircuitBreakerState . CircuitState . CLOSED , state . getCircuitState ( ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertTrue ( references . isEmpty ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertNotNull ( parameters )
assertEquals ( "[\"aa\"]" , t0 . getName ( ) )
assertThat ( delegate . beginTransaction ( ) , is ( notNullValue ( ) ) )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertEquals ( "SUCCESS" , future . get ( ) )
assertEquals ( price ( ) . apply ( item ) , price )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
assertEquals ( 10L , template . execute ( callable ) . longValue ( ) )
assertEquals ( "[\"int_to_string\"]" , serialized . toString ( ) )
assertThat ( model . getSize ( ) , is ( 0 ) )
assertEquals ( Pmd . getScale ( i ) , jdbcPmd . getScale ( i ) )
assertEquals ( expected , built )
assertEquals ( Math . sqrt ( 2.0 ) , ConstantLookup . getValue ( "M_SQRT2" ) , TOL )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertEquals ( "foo" , e . getMessage ( ) )
assertEquals ( "Invalid fragment index or sequence order" , iae . getMessage ( ) )
assertEquals ( "Action not supported: PUT" , e . getMessage ( ) )
assertEquals ( "Action not supported: PUT" , e . getMessage ( ) )
assertEquals ( "my/cert/path" , httpClientConfig . getCertPath ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( uri , ref . toString ( ) )
assertTrue ( class1 . testBooleanLiteralExp01 ( ) )
assertEquals ( path , doc . getMainPath ( ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( expectedFiles , files )
assertEquals ( value , v . toString ( ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertThat ( udf . mapValues ( input ) , empty ( ) )
assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
assertTrue ( i == next )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertEquals ( "foo" , getQuoteContents ( "\"foo\"" ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( Unsafe . instance , Unsafe . getDeclaredStaticField ( sun . misc . Unsafe . class , "theUnsafe" ) )
assertEquals ( expected , paths )
assertThat ( c . toString ( ) ) . isNotNull ( )
assertThat ( c . toString ( ) ) . isNotNull ( )
assertTrue ( result . isEmpty ( ) )
assertEquals ( expected , paths )
assertEquals ( "ProducibleConfig [steps=1, width=2, height=3]" , producible . toString ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( "Missing KDC administrator credentials" ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , newArray )
assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertThat ( BigDecimalUtil . toBigDecimal ( value ) , is ( value ) )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertTrue ( failedAsExpected )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( amt . abs ( ) ) . isSameAs ( amt )
assertEquals ( valueOf ( 3 ) , entityPager . getPrevStart ( ) )
assertEquals ( TEST_2007_07_15_PONE , t )
assertThat ( unit . getRequestUri ( ) ) . hasToString ( "http://localhost/" )
assertTrue ( 10 != connection . createChannel ( ) . getChannelNumber ( ) )
assertTrue ( ( ( Integer ) db . getLastValue ( "TestMetric" ) ) == 19 )
assertEquals ( 3 , set . size ( ) )
assertNull ( store . getVerb ( "lalala" , "verb1" ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( entity . contains ( serverUriString ( ) ) )
assertEquals ( expResult , result )
assertTrue ( "Simple permission mapper should be created" , ops . exists ( TEST_SIMPLE_PERMISSION_MAPPER_ADDRESS ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertThat ( sortBuilders . size ( ) , is ( 1 ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( "Defaulted" , person . getName ( ) )
assertEquals ( "Defaulted" , person . getName ( ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertFalse ( Arrays . stream ( builder . getClass ( ) . getMethods ( ) ) . anyMatch ( m -> m . getName ( ) . equals ( "withKind" ) ) )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( VERSION , Version . getVersion ( ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertEquals ( "<font size=+3>test</font>" , largeSizeDecorator . toDisplay ( ) )
assertEquals ( "K2" , v2 . getKey ( 1 ) )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( expected , result )
assertThat ( key . name ( ) ) . isEqualTo ( "foo.bar.baz" )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertThat ( tracer . currentSpan ( ) ) . isNull ( )
assertTrue ( super . ds . create ( Collection . NODES , Collections . singletonList ( up ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertTrue ( stack . isEmpty ( ) )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertTrue ( serviceQueue < 10 )
assertEquals ( c , c )
assertThat ( new GlobalCommentBuilder ( config , null , QualityGate . newBuilder ( ) . status ( QualityGate . Status . OK ) . conditions ( Collections . emptyList ( ) ) . build ( ) , new Reporter ( config ) , new MarkDownUtils ( ) , analysisMode ) . buildForMarkdown ( ) ) . isEqualTo ( "SonarQube analysis indicates that quality gate is passed.\n" + "\n" + "SonarQube analysis reported no issues.\n" )
assertThat ( new GlobalCommentBuilder ( config , null , QualityGate . newBuilder ( ) . status ( QualityGate . Status . OK ) . conditions ( Collections . emptyList ( ) ) . build ( ) , new Reporter ( config ) , new MarkDownUtils ( ) , analysisMode ) . buildForMarkdown ( ) ) . isEqualTo ( "SonarQube analysis indicates that quality gate is passed.\n" + "\n" + "SonarQube analysis reported no issues.\n" )
assertThat ( max ( LONG_DURATION , SHORT_DURATION ) , is ( LONG_DURATION ) )
assertThat ( max ( LONG_DURATION , SHORT_DURATION ) , is ( LONG_DURATION ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertTrue ( subscribed . get ( ) )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( x . getBaseState ( ) , x . getNodeState ( ) )
assertThat ( new RuntimeType ( x ) . canHaveMember ( "foo" ) ) . isFalse ( )
assertFalse ( base . builder ( ) . remove ( ) )
assertThat ( node . insertNext ( next ) ) . isSameAs ( next )
assertThat ( node . insertNext ( next ) ) . isSameAs ( next )
assertThat ( Util . head ( list ) , is ( "1" ) )
assertEquals ( nameProperty , namePropertyFromValue )
assertEquals ( pathProperty , namePropertyFromValue )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertTrue ( "Failed to find properties" , stream != null )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertTrue ( stack . isEmpty ( ) )
assertEquals ( fsInput . length ( ) , FILE_CONTENTS . length ( ) )
assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertNotNull ( set . getApplicationContext ( "base" ) )
assertThat ( id . toString ( ) , is ( "Mixed-Case-Id" ) )
assertTrue ( parameters . getParameters ( ) . isEmpty ( ) )
assertTrue ( day . isToday ( ) )
assertEquals ( testData . length , is . available ( ) )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
assertEquals ( "system" , result )
assertThat ( userObject . getPassword ( ) , is ( equalTo ( password ) ) )

assertTrue ( stdoutWithNewlines ( ) . contains ( StellarShell . WELCOME ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertEquals ( null , fileExtension )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertThat ( Tools . join ( null , Arrays . asList ( "a" , "b" ) ) ) . isEqualTo ( "ab" )
assertTrue ( true )
assertTrue ( true )
assertTrue ( true )
assertEquals ( presenter , eventCaptor . getValue ( ) . getPage ( ) )
assertEquals ( DATA_SIZE , list . size ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertEquals ( CrdTestUtils . readResource ( "simpleTest.yaml" ) , s )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertEquals ( testClass , serializer . bytesToObject ( v ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertThat ( serializer . deserialize ( new byte [ 0 ] ) , IsNull . nullValue ( ) )
assertEquals ( path . toString ( ) , hadoopFileSystemPath . toString ( ) )
assertEquals ( path . toString ( ) , hadoopFileSystemPath . toString ( ) )
assertEquals ( expectedDate , new DateTypeAdapterDeserializer ( ) . deserialize ( getJsonElement ( dateString ) , null , null ) )
assertEquals ( input , compressed )
assertEquals ( input , compressed )
assertEquals ( 24 , result . size ( ) )
assertEquals ( 24 , result . size ( ) )
assertEquals ( 24 , result . size ( ) )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( 3 , objmap . size ( ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( "\n" , toString ( createTupleNoBindingSets ( ) ) . replaceAll ( "\\S+|\t" , "" ) )
assertEquals ( "\n" , toString ( createTupleNoBindingSets ( ) ) . replaceAll ( "\\S+|\t" , "" ) )
assertEquals ( "mapping.netty.io" , cache . get ( "netty.io" ) )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( "page" , wrapper . getDisplayParameter ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( authenticator , aURL . getAuthenticator ( ) )
assertNotNull ( bookService )
assertThat ( sut . validateWorkflow ( Workflow . create ( "test" , FULL_WORKFLOW_CONFIGURATION ) ) , is ( empty ( ) ) )
assertThat ( sut . validateWorkflow ( Workflow . create ( "test" , FULL_WORKFLOW_CONFIGURATION ) ) , is ( empty ( ) ) )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "str: 42" , injector . getInstance ( String . class ) )
assertEquals ( "Object.property" , property . toString ( ) )
assertEquals ( "Object.property" , property . toString ( ) )
assertEquals ( "Object.property" , property . toString ( ) )
assertEquals ( "Object.property" , property . toString ( ) )
assertEquals ( enironment . getRemoteObject ( ) . getId ( ) , id )
assertThat ( OriginTrackedValue . of ( value ) ) . hasToString ( value . toString ( ) )
assertEquals ( "{1,2}" , result )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertEquals ( store . get ( "blue" . getBytes ( Charsets . UTF_8 ) ) , entry )
assertEquals ( document , image . getDocument ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( Transformer . NoOp . INSTANCE . transform ( mock ( TypeDescription . class ) , target ) , is ( target ) )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( 2 , authors . size ( ) )
assertNotNull ( dbInfo )
assertThat ( p1 . getPackageFragment ( ) ) . isSameInstanceAs ( p2 . getPackageFragment ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNotNull ( ds )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( "" , result )
assertTrue ( new EqualsBuilder ( ) . setBypassReflectionClasses ( bypassReflectionClasses ) . isEquals ( ) )
assertEquals ( 2 , authors . size ( ) )
assertNull ( model . getFile ( ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( expectedResult , class1 . testCollectionLiteralExp01 ( ) )
assertEquals ( "value" , EvaluatorUtil . decode ( value ) )
assertThat ( Transformer . NoOp . INSTANCE . transform ( mock ( TypeDescription . class ) , target ) , is ( target ) )
assertEquals ( cause , ex . getCause ( ) )
assertEquals ( "API ERROR CODE: a VALUE: b" , testee . getMessage ( ) )
assertEquals ( "API ERROR CODE: a VALUE: b" , testee . getMessage ( ) )
assertEquals ( "" , result )
assertEquals ( rsmd_ResultSet . isNullable ( i ) , jdbcRsmd_ResultSet . isNullable ( i ) )
assertNull ( _expired )
assertThat ( randomService . nextInt ( - 5 , 5 ) , both ( lessThanOrEqualTo ( 5 ) ) . and ( greaterThanOrEqualTo ( - 5 ) ) )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 4 - 3 )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 3 , "address='CTRIP'" )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertThat ( NumberUtils . min ( array ) ) . isEqualTo ( ( byte ) 1 )
assertEquals ( 1 , records )
assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertThat ( OriginTrackedValue . of ( value ) ) . hasToString ( value . toString ( ) )
assertThat ( OriginTrackedValue . of ( value ) ) . hasToString ( value . toString ( ) )
assertEquals ( new Integer ( 1 ) , pb . getId ( ) )
assertThat ( shardingSphereResultSet . getCharacterStream ( 1 ) , is ( reader ) )
assertEquals ( "GameObjectConfigurationChanged" , theEvent . getType ( ) . getType ( ) )
assertEquals ( "test" , object . getValue ( "email" ) )
assertEquals ( "" , dialect . getLimitString ( "select * from user" , 0 , 0 ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( context . getBean ( SimpleElasticsearchMappingContext . class ) ) . isNotNull ( )
assertEquals ( 3 , objmap . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( key . get ( ) , key . get ( ) )
assertNotNull ( sslChannel . getSslSession ( ) )
assertEquals ( authors . size ( ) , 3 )
assertThat ( method . getDefType ( ) ) . isEqualTo ( "lucene" )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( it . next ( ) ) . extracting ( "id" ) . isEqualTo ( 1 )
assertTrue ( count == 5 )
assertThat ( resolver . createGetterInvocator ( "convertible" , converted ( ConvertibleObject . class , ConvertibleInterface . class ) ) , notNullValue ( ) )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> context . parse ( null ) )
assertEquals ( Http2Error . INTERNAL_ERROR , e . error ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( "[Lo3CategorieWaarde[categorie=01,elementen={ELEMENT_0110=}]]" , bericht . getCategorieen ( ) . toString ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertNotNull ( items )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertNull ( impl . getBodyBuffer ( ) )
assertEquals ( "bar" , new QueryParameters ( "foo=bar" ) . first ( "foo" ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( graph . v ( 3 ) . next ( ) , graph . v ( 6 ) . out ( "created" ) . nextOrDefault ( defaultValue ) )
assertNotNull ( result )
assertNotNull ( resolver . getLogger ( ) )
assertEquals ( false , exceptionCaught [ 0 ] )
assertThat ( avroData . toConnectSchema ( NAMED_AVRO_MAP_SCHEMA ) , equalTo ( NAMED_MAP_SCHEMA ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertEquals ( "Mapped_One" , name )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( i , count )
assertEquals ( ( i + 1 ) * 10 , buffer . getInt ( i * 4 ) )
assertThat ( Tree . Kind . values ( ) ) . hasSize ( 127 )
assertEquals ( "Comparing MessageConsumer id" , "[null-C-1]" , messageConsumer . getId ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( authors . size ( ) , 3 )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertThat ( entityInformation . getIdField ( ) . getType ( ) . equals ( UUID . class ) ) . isTrue ( )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( parent , scope . getParent ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "http://example.com/orders/{orderId}{?view}" , dummy . getTemplate ( ) . getTemplate ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertTrue ( MapUtils . isEmpty ( map ) )
assertNotNull ( FieldName . unmarshal ( "x" ) )
assertEquals ( "me" , role . getName ( ) )
assertThat ( converter . convert ( null ) ) . isNull ( )
assertEquals ( "" , s )
assertEquals ( "should retrieve correct field name" , fieldName , node . getFieldName ( ) )
assertEquals ( authors . size ( ) , 3 )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select foo from bar where foo = ?" )
assertEquals ( map , Loop . run ( "test/loop/confidence/cflow/if-then-else_2.loop" ) )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( where ( query , filters , operator ) , queryWhere )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( TargetType . GLOB , target . getType ( ) )
assertEquals ( PropertiesConfiguration . DEFAULT_ENCODING , FileBasedConfigurationBuilder . getDefaultEncoding ( PropertiesConfiguration . class ) )
assertThat ( factory . create ( value ) , is ( BigDecimal . valueOf ( value . getTime ( ) ) ) )
assertThat ( area . getType ( ) , is ( AreaType . UNDEFINED ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "Should retrieve type set" , int . class . getName ( ) , node . getType ( ) )
assertThat ( mavenCoordinates . getType ( ) , is ( "war" ) )
assertThat ( area . getType ( ) , is ( AreaType . UNDEFINED ) )
assertEquals ( "me" , role . getName ( ) )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertThat ( injector . getInstance ( Thing . class ) ) . isSameInstanceAs ( thing )
assertEquals ( component . init , 1 , "'init' method must be called just once" )
assertFalse ( PaginatorUtils . isOutputTokenAvailable ( DefaultSdkAutoConstructList . getInstance ( ) ) )
assertEquals ( component . init , 1 , "'init' method must be called just once" )
assertEquals ( 0 , failedAttempts , "Failed LockUnlock count" )
assertNotNull ( c [ i ] )
assertThat ( autoRegionLookupBeanPostProcessor . postProcessBeforeInitialization ( bean , "test" ) ) . isSameAs ( bean )
assertEquals ( null , ServerCallContextStack . get ( ) . currentCallee ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertTrue ( Parsers . valueOf ( "invalidParser" ) . getParser ( ) == null )
assertNotNull ( compound . getSource ( ) )
assertThat ( parsed . getSql ( ) ) . isEqualTo ( "select * from v$session" )
assertEquals ( "http://bar" , ctx . getURI ( "foo" ) )
assertEquals ( "http://bar" , ctx . getURI ( "foo" ) )
assertEquals ( "AB" , parser . getTableAlias ( ) )
assertEquals ( "" , StringUtil . repeat ( null , 5 ) )
assertEquals ( "a" , result )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( "Constructor - Incorrect type" , WHeading . MAJOR , heading . getType ( ) )
assertEquals ( "Constructor - Incorrect type" , WHeading . MAJOR , heading . getType ( ) )
assertEquals ( "Constructor - Incorrect type" , WHeading . MAJOR , heading . getType ( ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "class java.util.ArrayList" , typedef . getType ( ) . toString ( ) )
assertEquals ( "class java.util.ArrayList" , typedef . getType ( ) . toString ( ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "class java.util.ArrayList" , typedef . getType ( ) . toString ( ) )
assertEquals ( "class java.util.ArrayList" , typedef . getType ( ) . toString ( ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "(1,2,3,4)" , IteratorToString . toString ( a . iterator ( ) ) )
assertEquals ( "[2, 3]" , ints . toString ( ) )
MatcherAssert . assertThat ( target . getName ( ) , Matchers . is ( NAME ) )
assertEquals ( "[\"a\",\"c\"]" , array . toString ( ) )
assertNotNull ( toString )
assertEquals ( "\\Q{test:1}\\E" , e . getReplacementPattern ( ) )
assertEquals ( "(1,2,3,4)" , IteratorToString . toString ( a . iterator ( ) ) )
assertEquals ( "[\"a\",\"c\"]" , array . toString ( ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( id , container . getIdByIndex ( container . size ( ) - 1 ) )
assertNotNull ( result )
assertEquals ( "{a=b}" , list . toString ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( new Integer ( 0 ) , OclBags . count ( col1 , null ) )
assertFalse ( MapUtils . isEmpty ( map ) )
assertEquals ( 2 , authors . size ( ) )
assertEquals ( "JDBC" , result )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertEquals ( cssFinder . toString ( ) , elementFinder . toCssString ( ) )
assertEquals ( LIB_MARKUP , lib . serialize ( ) )
assertEquals ( "<a href=\"http://www.google.co.uk\">www.google.co.uk</a>" , result )
assertEquals ( "{\n  return false;\n}\n" , optimize ( Expressions . not ( TRUE ) ) )
assertTrue ( equal . evaluate ( null ) )
assertTrue ( equal . evaluate ( null ) )
assertTrue ( equal . evaluate ( null ) )
assertTrue ( equal . evaluate ( null ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( "<a href=\"http://www.google.co.uk\">www.google.co.uk</a>" , result )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertNotNull ( toString )
assertThat ( _testling . toString ( ) , is ( "field is wrong!" ) )
assertEquals ( "toString" , PNFS_SIMPLE_ID , value )
assertEquals ( Params . of ( "key" , Collections . < String > singletonList ( null ) ) . asHttpHeaders ( ) , expected )
assertEquals ( pos . getIndex ( ) , 0 )
assertNotNull ( params )
assertNotNull ( searchRequestBuilder )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertNull ( syntheticWorkItem . getItemSubType ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertNull ( syntheticWorkItem . getItemSubType ( ) )
assertNull ( syntheticWorkItem . getItemSubType ( ) )
assertNull ( syntheticWorkItem . getItemSubType ( ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( "" , user . getFullName ( ) )
assertEquals ( "<a href=\"http://www.google.co.uk\">www.google.co.uk</a>" , result )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( CssLoader . getCss ( ) ) . contains ( "/* constants */" ) . contains ( ".code {" )
assertThat ( flattener . flatten ( element ) ) . isEqualTo ( jsonParse ( "{abc:'qwe'}" ) )
assertThat ( flattener . flatten ( element ) ) . isEqualTo ( jsonParse ( "{abc:'qwe'}" ) )
assertThat ( flattener . flatten ( element ) ) . isEqualTo ( jsonParse ( "{abc:'qwe'}" ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Wrong class" , HdfsMrsImageWriter . class , provider . getMrsTileWriter ( context ) . getClass ( ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertNull ( exception . getMessage ( ) )
assertEquals ( "" , user . getFullName ( ) )
assertThat ( underTest . getLabel ( ) , is ( DOCUMENT_LABEL ) )
assertEquals ( "<a href=\"http://www.google.co.uk\">www.google.co.uk</a>" , result )
assertEquals ( DateTimeZone . getDefault ( ) , DateTimes . inferTzFromString ( "America/Unknown" , false ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertThat ( filter ( ITEMS ) . with ( "name" ) . equalsTo ( "n1" ) . get ( ) ) . containsExactly ( ITEMS [ 0 ] )
assertThat ( filter ( ITEMS ) . with ( "name" ) . equalsTo ( "n1" ) . get ( ) ) . containsExactly ( ITEMS [ 0 ] )
assertEquals ( "val=hello" , TypeConversion . toString ( new MyAutoConvertedClass ( "hello" ) ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertEquals ( o , builder . transformReturnValue ( o ) )
assertThat ( request . unwrap ( ) ) . isSameAs ( invocation )
assertThat ( request . unwrap ( ) ) . isSameAs ( invocation )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( Integer . class , injectable . get ( ) )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertTrue ( builder . getParameters ( ) . isEmpty ( ) )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNull ( brewery . getOpt ( "unavailable" ) )
assertNull ( EnumUtils . getEnum ( rawType , "rawType" ) )
assertNull ( brewery . getOpt ( "unavailable" ) )
assertEquals ( conversable , context . getForWhom ( ) )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertThat ( entity . kindName ( ) ) . isEqualTo ( "custom_test_kind" )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( Parameter . with ( "name" , "value" ) ) . isNotNull ( )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertThat ( Parameter . with ( "name" , "value" ) ) . isNotNull ( )
assertEquals ( expectedValues , attribute . getValues ( ) )
assertNotNull ( date1 )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertEquals ( 1 , builder . build ( ) . getStat ( ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( LocalDateTime . MIN , clock . min ( ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( e , tothrow )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( e , tothrow )
assertEquals ( e , tothrow )
assertEquals ( e , tothrow )
assertEquals ( e , tothrow )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( 42 , featureCollection . size ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNull ( stateDefault . value ( ) )
assertNull ( stateDefault . value ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertNotNull ( builder ( ) )
assertTrue ( config . isValid ( ) )
assertTrue ( config . isValid ( ) )
assertEquals ( DEFAULT_PATTERN , DatePatternConverter . newInstance ( Strings . EMPTY_ARRAY ) . getPattern ( ) )
assertEquals ( DEFAULT_PATTERN , DatePatternConverter . newInstance ( Strings . EMPTY_ARRAY ) . getPattern ( ) )
assertEquals ( DEFAULT_PATTERN , DatePatternConverter . newInstance ( Strings . EMPTY_ARRAY ) . getPattern ( ) )
assertEquals ( DEFAULT_PATTERN , DatePatternConverter . newInstance ( Strings . EMPTY_ARRAY ) . getPattern ( ) )
assertEquals ( DEFAULT_PATTERN , DatePatternConverter . newInstance ( Strings . EMPTY_ARRAY ) . getPattern ( ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertNull ( new TypeFacility ( ) . convertToRuntimeType ( ( Clob ) null ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( configurationInstance . getValue ( ) , is ( sameInstance ( value ) ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( e , tothrow )
assertEquals ( e , tothrow )
assertThat ( new ShorthandProjection ( "owner" , Collections . emptyList ( ) ) . getExpression ( ) , is ( "owner.*" ) )
assertEquals ( "select length(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( "4.3.2.one" , version . toString ( ) )
assertEquals ( "JDBC" , result )
assertEquals ( 401 , status . getStatusCode ( ) )
assertEquals ( "me" , role . getName ( ) )
assertNotNull ( list . getActionMap ( ) . getParent ( ) )
assertEquals ( 2 , map . size ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( catalog , classUnderTest . getCatalog ( ) )
assertEquals ( "NFe-4.00" , documentoZip . getSchema ( ) )
assertNotNull ( searchRequestBuilder )
assertNotNull ( searchRequestBuilder )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertEquals ( 10 , theAngle . get ( ) . intValue ( ) )
assertEquals ( "me" , role . getName ( ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( "foo" , entity . getName ( ) )
assertThat ( chain . isAcceptNull ( ) , equalTo ( true ) )
assertThat ( resolver . resolvePlaceholders ( 123 ) ) . isEqualTo ( 123 )
assertEquals ( "name" , cInfo . getName ( ) )
assertThat ( argument . getType ( ) , equalTo ( "int" ) )
assertEquals ( "JDBC" , result )
assertEquals ( "MockEntity" , entity . getModelName ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( converter . convert ( null ) ) . isNull ( )
assertNotNull ( build )
assertNotNull ( build )
assertEquals ( Utils . joinScope ( null ) , "" )
assertEquals ( expected , c . convert ( null , new DoubleWritable ( expected ) ) )
assertEquals ( "Name is inconsistent!" , name , record . getName ( ) )
assertEquals ( "JDBC" , result )
assertThat ( node . getText ( ) ) . isEqualTo ( "" )
assertNotNull ( build )
assertEquals ( "01tracked" , stringValue )
assertEquals ( "[fontcolor=\"blue\",fontsize=\"10\",fontname=\"Courier\"]" , builder . toString ( ) )
assertEquals ( ome , metadata . getRoot ( ) )
assertEquals ( "BNODE()" , expression . getQueryString ( ) )
assertEquals ( ome , metadata . getRoot ( ) )
assertEquals ( ome , metadata . getRoot ( ) )
assertNull ( component . getComponent ( VEvent . class ) )
assertEquals ( "@Mock.value() and @Mock.type() are aliases, you can't specify both at the same time" , e . getMessage ( ) )
assertEquals ( key . get ( ) , key . get ( ) )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( new VisitResult . List ( list ( 1 , 2 , 3 , 4 ) ) , list . merge ( single ) )
assertEquals ( new VisitResult . List ( list ( 1 , 2 , 3 , 4 ) ) , list . merge ( single ) )
assertEquals ( new VisitResult . List ( list ( 1 , 2 , 3 , 4 ) ) , list . merge ( single ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( "test" , e . getCause ( ) . getMessage ( ) )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertNotNull ( list )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( "123.00" , actual )
assertEquals ( "123.00" , actual )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( value , wrapper . getString ( ) )
assertEquals ( TestAdapter . class . getName ( ) + ":Key" , componentAdapter . toString ( ) )
assertTrue ( allow )
assertEquals ( orderBy ( query , columns , order ) , queryOrderBy )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertEquals ( 15 , count )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( 2 , row . size ( ) )
assertEquals ( Size . kilobytes ( 64 ) , Size . parse ( "64   kilobytes" ) )
assertEquals ( where ( query , filters , operator ) , queryWhere )
assertEquals ( Optional . of ( "TEST" ) , s . map ( String :: toUpperCase ) )
assertEquals ( Size . kilobytes ( 64 ) , Size . parse ( "64   kilobytes" ) )
assertEquals ( "Paul" , expectedAuthor . getName ( ) )
assertThatIterator ( iterator ) . isEqualTo ( iterator )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( 1 , count )
assertNull ( FilePathUtil . removeFileExtension ( null ) )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( InterestPolicy . DEFAULT , InterestPolicyType . DEFAULT . getInterestPolicy ( ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertNull ( query )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( authors . size ( ) , 3 )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( integerList . size ( ) , 4 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( method . getDefType ( ) ) . isEqualTo ( "lucene" )
assertEquals ( offHeapMutableBytesStore . add ( _values [ i ] ) , i )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( url )
assertEquals ( expectedResult , class1 . testSortedByIteratorExp01 ( ) )
assertEquals ( authors . size ( ) , 3 )
assertNull ( converter . convert ( "" ) )
assertNull ( query )
assertEquals ( InterestPolicy . DEFAULT , InterestPolicyType . DEFAULT . getInterestPolicy ( ) )
assertEquals ( authors . size ( ) , 2 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertFalse ( objmap . isEmpty ( ) )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( authors . size ( ) , 3 )
assertThat ( logger . getName ( ) ) . isEqualTo ( "xyz" )
assertThat ( slider . getValue ( ) , is ( 5.0 ) )
assertNull ( arrayType . getParentClass ( ) )
assertEquals ( "foo" , r . getName ( ) )
assertEquals ( "Ville" , cp . getValue ( ) )
assertEquals ( "Invalid signature marker: 1" , ex . getMessage ( ) )
assertEquals ( ValidationResult . Result . ERROR , closeSourceOrSink . validate ( container ) . getStatus ( ) )
assertEquals ( bs1 , bs2 )
assertEquals ( count , facet . getCount ( ) )
assertEquals ( "name" , name )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , InputStreamTransforms . TRANSFORMER . toString ( newInputStream ( "Hello SwitchYard" ) ) )
assertEquals ( "$foo" , s )
assertEquals ( expectedResult , result )
assertEquals ( expectedResult , result )
assertNotNull ( builder )
assertEquals ( authors . size ( ) , 3 )
assertEquals ( 2 , authors . size ( ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertThat ( ft . size ( ) , is ( 3 ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertThat ( methodName . toString ( ) ) . isEqualTo ( "public void org.camunda.bpm.engine.impl.test.TestHelperTest$SomeTestClass.testSomethingWithPublicAccessor()" )
assertEquals ( OWNER . getName ( ) , o . getUsername ( ) )
assertEquals ( "org/evosuite" , PackageInfo . getEvoSuitePackageWithSlash ( ) )
assertEquals ( "org/evosuite" , PackageInfo . getEvoSuitePackageWithSlash ( ) )
assertEquals ( "org/evosuite" , PackageInfo . getEvoSuitePackageWithSlash ( ) )
assertNull ( getAttachmentFileName ( null ) )
assertThat ( FileUtils . filename ( "" ) , is ( "" ) )
assertThat ( FileUtils . filename ( "" ) , is ( "" ) )
assertThat ( FileUtils . filename ( "" ) , is ( "" ) )
assertThat ( FileUtils . dirname ( "" ) , is ( "" ) )
assertThat ( FileUtils . dirname ( "" ) , is ( "" ) )
assertThat ( FileUtils . dirname ( "" ) , is ( "" ) )
assertEquals ( "&lt;&lt;a>&amp;text&apos;&quot;" , toAttributeValue ( "<<a>&text'\"" ) )
assertEquals ( "&lt;&lt;a>&amp;text&apos;&quot;" , toAttributeValue ( "<<a>&text'\"" ) )
assertEquals ( "&lt;&lt;a>&amp;text&apos;&quot;" , toAttributeValue ( "<<a>&text'\"" ) )
assertThat ( map . containsKey ( 123 ) ) . isFalse ( )
assertEquals ( 3 , map . size ( ) )
assertEquals ( MESSAGE , exception . getMessage ( ) )
assertEquals ( "new empty[] {}" , expr . toString ( ) )
assertEquals ( "new empty[] {}" , expr . toString ( ) )
assertEquals ( "name" , name )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( "value" , nonLocalConfigurationClassObject . getValue ( ) )
assertThat ( ( ( ProviderRole ) providerRole ) . getName ( ) , is ( "Binome supervisor" ) )
assertEquals ( 24 , result . size ( ) )
assertEquals ( getData ( ) . length , getCollection ( ) . size ( ) )
assertTrue ( verifyUtil . isPassed ( ) , verifyUtil . getFailureMessage ( ) )
assertThat ( json . to ( welcome ) ) . isEqualTo ( new Gson ( ) . toJson ( welcome ) )
assertEquals ( src , translate ( src ) )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertEquals ( "BlockFieldMatrix{{1.,2.,3.},{2.,5.,3.},{1.,0.,8.}}" , m . toString ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertThat ( sut . firstValue ( String . class ) , nullValue ( ) )
assertEquals ( "Decorated Hello" , response )
assertNotNull ( "URL not null" , resurl )
assertNotNull ( "URL not null" , resurl )
assertEquals ( source , checked )
assertEquals ( "/assignment/a/***CONTEXT_ID***/***ASSIGNMENT_ID***" , reference )
assertEquals ( "/assignment/a/***CONTEXT_ID***/***ASSIGNMENT_ID***" , reference )
assertEquals ( "Hello SwitchYard" , ReaderTransforms . TRANSFORMER . toString ( newReader ( "Hello SwitchYard" ) ) )
assertEquals ( "Hello SwitchYard" , ReaderTransforms . TRANSFORMER . toString ( newReader ( "Hello SwitchYard" ) ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertThat ( writer . toString ( ) , is ( emptyString ( ) ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
assertEquals ( "wrong msg" , ABOUT_TEXT , parser . about ( ) )
