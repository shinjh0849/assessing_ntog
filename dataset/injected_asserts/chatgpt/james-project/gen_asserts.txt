assertEquals ( CURRENT_VERSION , getCurrentVersion ( ) )
Assert . assertEquals ( null , rabbitMQ . basicGet ( queueName , false ) )
assertEquals ( 0 , countDownLatch . getCount ( ) )
Assert . assertEquals ( true , firstListener . get ( ) )
assertTrue ( firstListener . get ( ) )
assertEquals ( 1 , testee . getListeners ( KEY_1 ) . size ( ) )
Assert . assertEquals ( listener , registration . getLastListenerRemoved ( ) )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThat ( eventCollector . getEvents ( ) ) . containsOnly ( EVENT )
AssertPlaceHolder = "assertFalse(session.hasInbox())"
assertThat ( retrievedMailbox . getName ( ) ) . isEqualTo ( "INBOX" )
Assert . assertEquals ( mailboxName , createMailbox ( "" , USER_1 , mailboxName ) )
assertThat ( mailboxManager . getAnnotations ( inbox , session ) )
assertNull ( block ( mailboxManager . getMailbox ( inbox , session ) ) )
Assert . assertEquals ( 1 , mailboxManager . list ( session ) . size ( ) )
assertNotNull ( mailboxManager . getMailbox ( inboxSubMailbox , session ) )
assertEquals ( 4 , mailboxManager . list ( ) . size ( ) )
assertNotNull ( mailboxManager . createMailbox ( trash , session ) )
Assert . assertEquals ( 1 , mailboxManager . getMailbox ( MailboxPath . inbox ( session ) , session ) . getMessageCount ( ) )
assertEquals ( flags , testee . getValue ( ) )
assertNull ( cassandraACLMapper ( ) . retrieveACL ( ) )
assertNull ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID ) )
assertThat ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID ) ) . doesNotContainEntry ( key , rights )
assertThat ( result ) . containsOnlyElementsOf ( expected )
assertThat ( result ) . hasSize ( expectedSize )
assertEquals ( id , UserQuotaThresholds . Id . fromKey ( "BOB_listenerName" ) )
assertEquals ( 3 , keyParts . size ( ) )
Assert . assertEquals ( _50 , lessThanQuery . getValue ( ) ) ; // <AssertPlaceHolder>
assertThat ( messageIdManager . searchFromMessageManagerShouldReturnMessagesUsingSetInMailboxesFromMessageIdManager ( ) , hasSize ( expectedSize ) )
assertThat ( messageId , is ( notNullValue ( ) ) )
assertEquals ( 0 , messageManager1 . getMessages ( searchQuery , session ) . size ( ) )
assertEquals ( ImmutableList . of ( aliceMailbox1 . getMailboxId ( ) , aliceMailbox3 . getMailboxId ( ) ) , messageMailboxIds )
assertThat ( messageIdManager ) . hasSize ( expectedSize )
assertEquals ( 2 , actual . getUsersAcl ( ) . size ( ) )
assertEquals ( new SchemaVersion ( 2 ) , iterator . next ( ) )
assertEquals ( HostScheme . HTTP , HostScheme . of ( "http" ) )
Assert . assertEquals ( expectAclDiff , "<AssertPlaceHolder>" )
Assert . assertEquals ( expectedMailboxId , benwaInboxMailbox . getMailboxId ( ) )
Assert . assertEquals ( "benwaWorkMailbox" , benwaWorkMailbox , mailboxMapper . rename ( benwaWorkMailbox ) . block ( ) )
assertNotNull ( mono . block ( ) )
assertThat ( mailboxes . size ( ) ) . isEqualTo ( 1 )
assertEquals ( 2 , mailboxes . size ( ) )
assertEquals ( mailboxes . size ( ) , 2 )
assertEquals ( 0 , mailboxes . size ( ) )
assertEquals ( 0 , sut . getUnseen ( ) . longValue ( ) )
assertEquals ( 0L , sut . getUnseen ( ) )
assertThat ( sut . getUnseen ( ) ) . isEqualTo ( 0L )
assertEquals ( 1 , sut . getUnseen ( ) . intValue ( ) )
assertThat ( sut . getUnseen ( ) ) . isEqualTo ( expectedUnseen )
assertNull ( sut . getUnseen ( ) )
assertEquals ( 0 , getUnseen ( ) . intValue ( ) )
assertEquals ( 0 , getUnseen ( ) . intValue ( ) )
assertEquals ( 0L , getUnseen ( ) )
assertEquals ( unseen - 1 , getUnseen ( ) )
assertThat ( messageMapper . getFlags ( benwaInboxMailbox , message2 . getUid ( ) ) ) . doesNotContain ( Flag . RECENT )
Assert . assertEquals ( false , messageMapper . isRecent ( benwaInboxMailbox , message1 . getUid ( ) ) )
assertNull ( findFirstUnseenMessageUidShouldReturnNullWhenNoUnseenMessagesCanBeFound ( ) )
assertEquals ( message2 . getUid ( ) , findFirstUnseenMessageUid ( benwaInboxMailbox ) )
assertEquals ( uid . next ( ) , message . getUid ( ) )
assertEquals ( new Flags ( Flags . Flag . FLAGGED ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( new Flags ( Flags . Flag . FLAGGED , Flags . Flag . SEEN ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( new Flags ( USER_FLAG ) , retrieveMessageFromStorage ( message1 ) . createFlags ( ) )
assertEquals ( originalMessage . getSaveDate ( ) . plusSeconds ( 1000 ) , movedMessageMetaData . get ( 0 ) . getSaveDate ( ) )
assertEquals ( benwaWorkMailbox , messageToMove . getMailbox ( ) )
assertThat ( retrievedMessageIterator . next ( ) . getAttachments ( ) ) . isEmpty ( )
Assert . assertEquals ( 0 , retrievedMessageIterator . next ( ) . getAttachments ( ) . size ( ) )
assertEquals ( QuotaCountLimit . count ( 23 ) , maxQuotaManager . getMaxMessage ( ) )
Assert . assertEquals ( QuotaSizeLimit . size ( 36 ) , maxQuotaManager . getMaxStorage ( ) )
assertEquals ( QuotaCountLimit . count ( 36 ) , maxQuotaManager . getMaxMessage ( QUOTA_ROOT ) )
assertEquals ( QuotaSizeLimit . size ( 36 ) , maxQuotaManager . getMaxStorage ( QUOTA_ROOT ) )
assertEquals ( 1 , actual . size ( ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual . size ( ) ) . isEqualTo ( expectedSize )
assertThat ( results ) . containsOnly ( subscription )
assertNotNull ( information . failures ( ) )
failures = information . getFailures ( )
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( 0 , newMail . getAttributes ( ) . size ( ) )
assertThat ( actual . getUid ( ) ) . isEqualTo ( expected . getUid ( ) )
mail . getAttribute ( "name" ) == null
assertEquals ( NEW_VALUE , mail . getAttribute ( KEY ) )
assertNull ( mail . getAttribute ( KEY ) )
assertEquals ( "" , mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( mailboxIdFactory . fromString ( mailboxIdString ) , parseShouldIgnoreCase ( ) )
assertEquals ( "BayesianAnalysis Mailet" , getMailetInfo ( ) )
assertEquals ( 1 , message . getAllRecipients ( ) . length )
assertEquals ( "ghost" , getState ( ) )
assertEquals ( "" , testee . getRecipients ( ) )
assertEquals ( MailAddressFixture . ANY_AT_JAMES , mail . getRecipients ( ) )
assertEquals ( "" , testee . getRecipients ( ) )
assertEquals ( "postmasterAlias,postmaster" , testee . getRecipients ( ) )
assertEquals ( expectedSubject , message . getSubject ( ) )
assertThat ( matchedRecipients , not ( empty ( ) ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertEquals ( 2 , message . getAllRecipients ( ) . length )
Assert . assertEquals ( 2 , mimeMultipart . getCount ( ) )
assertEquals ( "application/json" , mimeMessage . getContentType ( ) )
Assert . assertEquals ( "expectedValue" , matcher . getRecipients ( ) )
assertNotNull ( getMatcherConfig ( ) )
Assert . assertEquals ( 0 , matchedRecipients . size ( ) )
assertThat ( mail . getRecipients ( ) ) . hasSize ( expectedSize )
assertThat ( mailetContext . localRecipients ( any ( ) ) ) . doesNotContain ( mailAddress2 )
assertEquals ( false , mailMatcher . match ( mailWithNoRecipient , defaultFakeMail ( ) ) )
assertThat ( results ) . containsOnly ( recipient )
assertNotNull ( matchedRecipients )
assertThat ( senderHosts ) . containsOnly ( new Domain ( "james.apache.org" ) )
assertThat ( results ) . containsOnly ( recipient )
assertThat ( selectedMailbox . getApplicableFlags ( ) ) . isEmpty ( )
assertEquals ( "554" , client . getReplyCode ( ) )
assertEquals ( "451" , client . getReplyCode ( ) )
Assert . assertEquals ( Action . DENY , resp )
AssertPlaceHolder = "assertEquals(Action.DECLINED, response.getAction());"
assertThat ( getServerConnectionResponse ( socketChannel ) ) . startsWith ( "* OK JAMES IMAP4rev1 Server" )
assertEquals ( CmdType . ADD_USER , lookup ( "addUser" ) )
assertEquals ( CmdType . ADD_DOMAIN , lookup ( "add_domain" ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( CmdType . DELETE_USER_MAILBOXES , lookup ( "deleteUserMailboxes" ) )
assertEquals ( CmdType . DELETE_MAILBOX , lookup ( "deleteMailbox" ) )
assertNotNull ( lookup ( "command" ) )
assertEquals ( CmdType . MAX_STORAGE_QUOTA , lookup ( "getMaxStorageQuota" ) )
assertNull ( lookup ( "" ) )
assertEquals ( "command <argument1> <argument2>" , getUsage ( ) )
Assert . assertEquals ( true , login )
assertEquals ( "220" , getServerConnectionResponse ( socketChannel ) )
assertEquals ( emptyMessage , mail . getMessage ( ) . getMimeMessage ( ) )
assertEquals ( nameMaxLength , newName . length ( ) )
assertEquals ( 1048576 , testee . getInputStream ( ) . available ( ) )
assertEquals ( "Subject: test\r\n" + "MIME-Version: 1.0\r\n" + "Date: Tue, 16 Jan 2018 09:56:01 +0700 (ICT)\r\n" + "Content-Type: text/plain; charset=us-ascii\r\n" + "Content-Transfer-Encoding: 7bit\r\n" + "\r\n" + "test body" , m . getContent ( ) )
assertEquals ( "" , mw . getSubject ( ) )
assertThat ( length , is ( equalTo ( expectedLength ) ) )
assertEquals ( length , mw . length ( ) )
assertEquals ( "UTF-8" , wrapper . getEncoding ( ) )
assertEquals ( "" , getSimplified ( ) )
assertEquals ( simplifiedUrl , "<expected value>" )
assertEquals ( expectedSimplifiedUrl , getSimplified ( ) )
assertEquals ( "expectedValue" , getSimplified ( ) )
assertEquals ( "" , file . getPath ( ) )
assertThat ( sut ) . hasSize ( expectedSize )
assertEquals ( probe , getProbe ( probe . getClass ( ) ) )
Assert . assertEquals ( 0 , LeakAware . getLeakCount ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertThat ( mailboxManagerManagement . list ( ) ) . doesNotContain ( mailbox )
assertEquals ( 0 , mailboxManagerManagement . list ( USER . asString ( ) ) . size ( ) )
assertEquals ( 6 , mapper . listMailboxes ( USER ) . collectList ( ) . block ( ) . size ( ) )
assertEquals ( 1 , mailboxManagerManagement . list ( ) . size ( ) )
assertNotNull ( mailboxManagerManagement . getMailbox ( MailboxConstants . USER_NAMESPACE , USER . asString ( ) , "name" ) )
assertion . isNotNull ( )
assertThat ( recordedExceptions ) . hasSize ( expectedSize )
assertEquals ( true , canceled . get ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( 0 , mapping . getDomains ( ) . size ( ) )
assertEquals ( Type . Error , error ( "mapping" ) . getType ( ) )
assertEquals ( Type . Forward , forward ( mapping ) . getType ( ) )
assertEquals ( "" , error ( "" ) . getErrorMessage ( ) )
assertEquals ( "regex:(.*)@localhost, regex:user@test" , separator )
Assert . assertEquals ( 1 , usersLDAPRepository . getUsers ( ) . size ( ) )
assertTrue ( testSystem . isAdministratorShouldReturnTrueWhenConfiguredAndUserIsAdmin ( ) )
assertEquals ( true , getUser ( ) )
assertEquals ( expectedDefaultDomain , getDefaultDomain ( ) )
assertThat ( domainList . getDomains ( ) ) . isEmpty ( )
assertEquals ( envDomain , envDetector . getEnv ( AbstractDomainList . ENV_DOMAIN ) )
assertThat ( actual ) . containsOnlyElementsOf ( expected )
assertThat ( actual ) . containsOnly ( expected )
actual . getMappings ( ) . size ( ) == 3
actual . getAddress ( )
actual . getRawString ( )
assertThat ( actual . getRawString ( ) ) . isEqualTo ( "domain:test" )
assertThat ( actual ) . isEqualTo ( MappingsImpl . fromRawString ( "regex:test" ) )
assertThat ( mappings . selectShouldReturnEmptyCollectionWhenNoMatchingMapping ( ) ) . isEmpty ( )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 0 , testIMAPClient . getMessageCount ( ) )
assertEquals ( 1 , testIMAPClient . getMessageCount ( ) )
Assert . assertEquals ( "All" , mailetConfiguration . getMatcher ( ) . getCanonicalName ( ) )
assertEquals ( "expectedValue" , readFirstMessage ( ) )
assertEquals ( initialState , bounce . getState ( ) )
assertThat ( propertiesToInnerProperties ( actual ) ) . containsOnlyElementsOf ( propertiesToInnerProperties ( expected ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
assertEquals ( null , mailet . getAttribute ( "name" ) )
assertEquals ( "state" , testee . getState ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( expected . getUid ( ) , actual . getUid ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . PERMANENT_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . PERMANENT_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( ExecutionState . TEMPORARY_FAILURE , executionResult . getState ( ) )
assertEquals ( "validUnsent" , Arrays . toString ( validUnsent ) , Arrays . toString ( mail . getRecipients ( ) ) )
assertEquals ( "validUnsent" , Arrays . toString ( validUnsent ) , Arrays . toString ( mail . getRecipients ( ) ) )
assertEquals ( ExecutionState . TEMPORARY_ERROR , executionResult . getExecutionState ( ) )
assertEquals ( DeliveryResult . PermanentError , executionResult . getResult ( ) )
assertEquals ( "ghost" , remoteDelivery . getState ( ) )
assertEquals ( subject , getSubject ( ) )
assertEquals ( condition . getOperator ( ) , "contains" )
assertEquals ( json , "{\"operator\":\"CONTAINS\",\"value\":\"matchme\"}" )
assertEquals ( response . getCode ( ) , 250 )
assertEquals ( json , "{\"statusCode\":250,\"message\":\"OK\"}" )
assertEquals ( true , testee . store ( URL , KEY_1 ) . block ( ) )
assertEquals ( 1 , mailboxProbe . getChildren ( inboxId ) . size ( ) )
assertEquals ( validSignature , focalMethod . sign ( source ) )
assertEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertNotEquals ( TokenStatus . VALID , getValidity ( pirateContinuationToken ) )
assertNotEquals ( TokenStatus . VALID , getValidity ( continuationToken ) )
assertEquals ( serializedToken , "<expectedSerializedToken>" )
assertEquals ( Date . from ( messageDate . toInstant ( ) ) , result . getDate ( ) )
assertEquals ( expected , result . getBody ( ) )
assertThrows ( MailboxNotFoundException . class , ( ) -> mockedMailboxManager . getMailbox ( mailboxId , session ) )
Assert . assertEquals ( true , tested . isInlinedWithCid ( ) )
assertEquals ( "" , exception . getMessage ( ) )
sut . validate ( port )
assertNotNull ( sut )
assertEquals ( Optional . of ( ImmutableList . of ( "1" , "2" ) ) , filterCondition . getInMailboxes ( ) )
assertEquals ( 3 , asProtocolSpecification . length )
assertEquals ( maxLengthFlagName , keyword . getFlagName ( ) )
assertEquals ( field . toLowerCase ( Locale . US ) , "<AssertPlaceHolder>" )
assertEquals ( false , valueOf ( "property" ) . equals ( valueOf ( "differentProperty" ) ) )
assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) )
assertEquals ( emptyBuilder . build ( ) , testee )
assertThrows ( NullPointerException . class , ( ) -> subject ( null ) )
assertThrows ( NullPointerException . class , ( ) -> builder . textBody ( null ) )
assertNotNull ( role )
assertNotNull ( sortOrder )
assertEquals ( null , builder . name ( ) )
assertEquals ( "" , mailbox . getParentId ( ) )
assertEquals ( 0 , mailbox . getTotalMessages ( ) )
assertThat ( sortOrder ) . isGreaterThanOrEqualTo ( 0 )
assertEquals ( mail , actual )
assertEquals ( 1 , criteria . count ( ) )
assertEquals ( BooleanOperator . set ( ) , attachmentCriterion . getOperator ( ) )
criteria . anyMatch ( criterion -> criterion instanceof TextCriterion && ( ( TextCriterion ) criterion ) . getValue ( ) . equals ( attachments ) && ( ( TextCriterion ) criterion ) . getScope ( ) == Scope . ATTACHMENTS )
assertThat ( criterion ) . isEqualTo ( sentDateAfter ( after . toInstant ( ) . toEpochMilli ( ) , DateResolution . MILLISECOND ) )
assertEquals ( true , flagCriterion . getFlag ( ) . isSet ( ) )
// <AssertPlaceHolder>
// <AssertPlaceHolder>
assertEquals ( 123L , sizeCriterion . getOperator ( ) . getValue ( ) )
assertEquals ( ExistsOperator . exists ( ) , headerCriterion . getOperator ( ) )
assertEquals ( headerValue , containsOperator . getValue ( ) )
criteria . anyMatch ( c -> c instanceof FlagCriterion && ( ( FlagCriterion ) c ) . getFlag ( ) == Flag . FLAGGED )
assertEquals ( "text without html" , textWithoutHtml )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( expectedPlainText , toPlainText ( html ) )
assertEquals ( 1 , mailboxManager . getMailboxes ( ) . size ( ) )
assertThat ( results ) . containsOnly ( recipient )
assertThat ( isEnabled . getValue ( ) ) . isFalse ( )
assertEquals ( HttpStatus . NO_CONTENT_204 , when ( ) . delete ( SPECIFIC_MAILBOX ) . then ( ) . statusCode ( ) )
assertThrows ( NullPointerException . class , ( ) -> mailboxIdFactory . fromString ( mailboxIdString ) )
assertEquals ( "Expected exception to be thrown on empty JSON" , expectedException , assertThrows ( YourException . class , ( ) -> focalMethod ( ) ) )
assertThat ( delegatedUserList ) . containsExactlyInAnyOrder ( BOB , ANDRE )
Assert . assertEquals ( "username_with_domain" , users . get ( 0 ) . get ( "username" ) )
assertThat ( allowedFroms , hasItem ( "user@example.com" ) )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertNull ( deadLetters . getEvent ( SERIALIZED_GROUP_A ) )
assertEquals ( HttpStatus . NO_CONTENT_204 , response . getStatusCode ( ) )
assertEquals ( - 1 , maxQuotaManager . getQuota ( userQuotaRootResolver . forUser ( BOB ) ) )
assertEquals ( 42 , maxQuotaManager . getMaxQuota ( userQuotaRootResolver . resolveQuotaRoot ( key ) ) . getSize ( ) )
assertEquals ( QuotaSizeLimit . size ( 0 ) , maxQuotaManager . getMaxStorage ( userQuotaRootResolver . forUser ( BOB ) ) )
assertEquals ( ".csv" , getFileUrl ( ) . substring ( getFileUrl ( ) . lastIndexOf ( "." ) ) )
assertThat ( actual . size ( ) ) . isEqualTo ( 1 )
assertThrows ( MailboxException . class , ( ) -> block ( mono ) )
assertEquals ( queue1 , queue2 . get ( ) )
assertEquals ( Duration . ofMinutes ( 20 ) , actual . getSliceWindow ( ) )
assertEquals ( "Unknown HostScheme 'null'" , assertThrows ( IllegalArgumentException . class , ( ) -> HostScheme . of ( null ) ) . getMessage ( ) )
assertThat ( taskManager . getExecutionDetails ( taskId ) . getStatus ( ) , Matchers . equalTo ( TaskManager . Status . CANCELED ) )
assertThat ( messageMoveEvent . isEventOnSpamMailbox ( ) ) . isFalse ( )
assertThat ( messageMoveEvent . isMessageMovedOutOfSpamMailbox ( ) ) . isFalse ( )
AssertPlaceHolder = "assertFalse(messageMoveEvent.isMovedOutOfSpamMailbox());"
assertThat ( mailet . requiredProcessingStateShouldReturnVirusProcessor ( ) ) . isEqualTo ( "virus" )
assertEquals ( "spam" , mailet . getState ( ) )
assertEquals ( "expectedState" , mailet . getState ( ) )
Assert . assertEquals ( hasVirus , analysisResult . hasVirus ( ) )
assertEquals ( 0 , result . getHits ( ) )
