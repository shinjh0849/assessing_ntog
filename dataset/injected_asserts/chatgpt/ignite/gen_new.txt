assert iterators . size ( ) < GENERATED : "Expected iterators size to be less than GENERATED"
assertEquals ( null , cache . get ( testKey ) )
assert cursors . size ( ) > 0 : "Expected non-empty result set"
assert rows . size ( ) == 1 : "Expected 1 row to be inserted for epoch_copied = " + i
assertEquals ( 0 , rel . getRowCount ( ) )
assertEquals ( 55555 , idxScan . getFilter ( ) . getExpression ( ) . getRight ( ) . getValue ( ) )
assertEquals ( 1 , idxScan . getIndex ( ) . getFields ( ) . size ( ) )
assertEquals ( 1 , idxScan . getIndex ( ) . getStatistics ( ) . getTotalPageCount ( ) )
assertEquals ( "TBL1_T1C7SHORT" , idxScan . getIndexName ( ) )
assertEquals ( pojo1 , pojo2 )
assertEquals ( null , cache . get ( 12L ) )
assertEquals ( "abc" , cache . get ( 1L ) )
assert srv . cacheNames ( ) . contains ( CACHE_NAME + 0 ) : "Cache " + CACHE_NAME + 0 + " was not destroyed"
assert ! thinClient . cacheNames ( ) . contains ( CACHE_NAME + 1 ) : "Cache " + CACHE_NAME + 1 + " was not destroyed"
assertEquals ( initiatorId , new SqlFieldsQuery ( sql ) . getQueryInitiatorId ( ) )
assertNotNull ( nodes )
assertNotNull ( nodes )
assertEquals ( 16 , blob . length ( ) )
assertEquals ( url , "CFG_URL_PREFIX + configURL()" )
assertEquals ( conn . getMetaData ( ) . getURL ( ) , CFG_URL_PREFIX + "cache=" + CUSTOM_CACHE_NAME + '@' + configURL ( ) )
assert rs . getString ( "tag" ) . equals ( "str" )
assertEquals ( 1 , res )
assertEquals ( true , res )
assertEquals ( false , isEmpty )
assertEquals ( i * 100 , ignite ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( i ) )
assert rs . getInt ( "id" ) == 1
assertTrue ( String . valueOf ( o ) , o instanceof BinaryObject )
assertEquals ( "gridCommandHandlerTest" , ret )
assertCacheOperation ( ret , "val0" )
assertNotNull ( grid ( ) )
assertNotNull ( ret )
assertCacheOperation ( jcache . get ( "appendKey" ) , true )
assertEquals ( "prefix_prependVal" , get ( "key" ) )
assert res != null : "Response is null"
assertEquals ( "1.0" , version ( ) )
assert size == grid ( 0 ) . cachesx ( ) . size ( ) + 1 : "Size is not incremented correctly"
assert cnt == size + 1
assertEquals ( 2 , checkCacheContents ( TBL_NAME , true ) )
assertEquals ( 1 , updatesCnt )
assertEquals ( updatesCnt , expectedUpdatesCnt )
assertEquals ( true , isRowSet )
assertEquals ( stmt . isClosed ( ) , true )
assertEquals ( prepared . getSQL ( ) , sqlText )
assertEquals ( "" , conn . nativeSQL ( sqlText ) )
assertEquals ( 1 , upd . executeUpdate ( ) )
assertEquals ( 1 , upd . executeUpdate ( ) )
assertEquals ( word . length ( ) , < expected value >  )
assertEquals ( 2 , res . size ( ) )
assertConnectionsCount ( ios , INITIAL_NODES_CNT )
assertEquals ( affinityCache , recreatedAffinityCache )
assertEquals ( affinityCache , recreatedAffinityCache )
assertEquals ( 0 , affinityCache . partitions ( ) )
AssertPlaceHolder : ` assertNull ( stmt . getResultSet ( ) ) ; `
assertTrue ( nameForIdInCache ( i ) != null )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assertEquals ( true , map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assertTrue ( map . containsKey ( 0 ) )
assert res . size ( ) > 0 : "Result list is empty"
assertEquals ( false , proc . getProcess ( ) . isAlive ( ) )
assertEquals ( true , expEThrown )
assertThrows ( IgniteException . class , ( ) -> execute ( task , onError ) )
assertThat ( arg . name ( ) , matches ( "^--([a-z]+(-)?)+([a-z]+)" ) )
assertContains ( log , testOutStr , ">>> Printing '" + word + "' on from compute job." )
assertContains ( testOutStr , "Control utility has completed execution at: " )
assertEquals ( 32 , cache1 . getConfiguration ( CacheConfiguration . class ) . getAffinity ( ) . getPartitions ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> execute ( "--cache" , "indexes_force_rebuild" , "--illegal_parameter" ) )
assertNull ( output )
assertContains ( log , output , "Found 2 secondary indexes." )
assertDoesNotThrow ( ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertNotNull ( out )
assertDoesNotThrow ( ( ) -> execute ( task , onError ) )
assertThrows ( Exception . class , ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertContains ( log , testOut . toString ( ) , "issues found (listed above)" )
assertContains ( log , testOut . toString ( ) , "Runtime failure on bounds" )
assertContains ( log , out , "typeName=Type_" + typeNum )
assertContains ( log , out , pd . getName ( ) )
assertThat ( out , containsString ( "firewall settings" ) )
assertEquals ( false , igniteEx . active ( ) )
assertEquals ( 1 , 1 )
assertContains ( log , testOut . toString ( ) , "LOST partitions:" )
assertThrows ( Exception . class , ( ) -> execute ( qryId , fragmentId , qryTask ) )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( Integer . MAX_VALUE , mreg . hitRateMetric ( "hitrate-metric" , "" , getTestTimeout ( ) , 2 ) . add ( Integer . MAX_VALUE ) )
assertEquals ( "STOP" , res )
assertEquals ( srvCnt , ignite0 . cluster ( ) . forServers ( ) . nodes ( ) . size ( ) )
assert affNodes . size ( ) == 1 : "Expected affinity nodes size to be 1, but was " + affNodes . size ( )
assertEquals ( 2 , cache . get ( key ) )
assert curSize == cacheSize : "Expected cache size: " + cacheSize + ", Actual cache size: " + curSize
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertEquals ( val , clientCache . get ( key ) )
assert expectedNullCnt == nullOps . size ( ) : msg
assert client . cluster ( ) . nodes ( ) . size ( ) > 0 : "No nodes found in the cluster"
assertEquals ( 0 , evtsTriggered . get ( ) )
assertEquals ( "test-worker" , worker . getName ( ) )
assert invalidPrj . size ( ) == 2
assert size >= 0 : size
assertEquals ( map . containsKey ( 0 ) , false )
assertEquals ( null , fut . get ( ) )
assertEquals ( 0 , grid . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( "expectedValue" , fut . get ( ) )
assertEquals ( 0 , evts . enabledEvents ( ) . length )
assertEquals ( ignite , ignite2 )
assertEquals ( ignite , ignite2 )
assertEquals ( 0 , checkpointSpi . get ( "task-checkpoints" ) . size ( ) )
assert prj != null : "prj is null"
assertThat ( processor . propagate ( variant . left , variant . right ) , is ( equalTo ( b . build ( ) ) ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assertNotNull ( externalize ( msgOut , marsh ) )
assertNotNull ( msgOut )
assertNotNull ( msgOut )
assert comp . affinityRunAsync ( DEFAULT_CACHE_NAME , 1 , new FailRunnable ( ) ) . get ( ) == null
assertEquals ( null , fut . get ( ) )
assert latch . getCount ( ) == 0 : "Latch count is not zero"
assertEquals ( false , ignite . event ( ) . isEnabled ( ) )
assertEquals ( 10000 , map . size ( ) )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 43 , - 97 } , buf . array ( ) )
assertEquals ( null , res . get ( field . getName ( ) ) )
assertEquals ( new Date ( 22222 ) , res . dateArr [ 0 ] )
assertEquals ( new Timestamp ( 333444555 ) , res . tsArr [ 0 ] )
assertEquals ( new UUID ( 2 , 2 ) , res . uuidArr [ 0 ] )
assertEquals ( 'b' , res . cArr [ 0 ] )
assertEquals ( 2.0 , res . dArr [ 0 ] )
assertEquals ( 2 , res . lArr [ 0 ] )
assertEquals ( 2 , res . iArr [ 0 ] )
assertEquals ( 2 , res . sArr [ 0 ] )
assertEquals ( 2 , res . bArr [ 0 ] )
assertEquals ( mutObj , arr [ 1 ] )
assertEquals ( src , res )
bo . hashCode ( )
assertEquals ( obj , deserialized )
metadata . getField ( "xx567" ) . equals ( "b" )
assertNotNull ( mutableObj . getField ( "foo" ) )
assertThat ( mutableObj . getField ( "foo" ) ) . containsExactly ( new Timestamp ( 100020003 ) )
assertEquals ( container . getField ( "foo" ) , deserialized . getField ( "foo" ) )
assert wrapper . hasField ( "str" ) == false
assertEquals ( typeName , actualTypeName )
assertNotNull ( date )
assertEquals ( ts . getNanos ( ) , 1000 )
assertEquals ( dateArr , binaryObjectBuilder . getField ( "dateArr" ) )
assert ! builder . hasField ( "str" )
assertEquals ( outer . foo , "b" )
assertEquals ( true , enableJdkMarshaller )
assertNotNull ( aff . mapKeyToNode ( new TestObject ( i ) ) )
assertNotNull ( binaries ( ) . toBinary ( new TestObject3 ( ) ) )
assertEquals ( IndexKeyType . TIMESTAMP , t . getType ( ) )
assertEquals ( false , map . containsKey ( 0 ) )
assertEquals ( "expectedValue" , map . get ( key ) )
assertEquals ( "John Doe" , val . getName ( ) )
assertEquals ( "Expected message" , "Expected message" , errMessage )
assertEquals ( data . size ( ) , cache . size ( ) )
assertEquals ( KEYS_CNT , cache . size ( ) )
assertNotNull ( cause )
assertNull ( dst )
assert rc . getAddresses ( ) . size ( ) == 2 : "Expected 2 addresses, but found " + rc . getAddresses ( ) . size ( )
assertEquals ( 0 , clientCache . get ( keyForUnknownNode ) )
assertEquals ( id0 , ig0 . cluster ( ) . id ( ) )
assertEquals ( 0 , nodes . get1 ( ) . context ( ) . encryption ( ) . getReencryptionRate ( ) )
assert rmts . size ( ) == 4 : "Expected 4 remote nodes"
assertEquals ( 10000 , map . size ( ) )
assertEquals ( 1 , baselineEvtLatch . getCount ( ) )
assert fut . get ( ) != null
assertEquals ( "Test message: PASSED" , outContent . toString ( ) . trim ( ) )
assertEquals ( val , unmarshal ( marshal ( new TestClass2 ( ) ) ) )
assert val == true
assertEquals ( 100 , obj . value )
obj . value ( 100 )
assertEquals ( 0 , cacheMetricsRegistryName ( "other-cache" , false ) . size ( ) )
assertNull ( metricRegistry ( ignite . name ( ) , CACHE_METRICS , n ) )
assertNotNull ( systemTime )
assertEquals ( names , res )
assertEquals ( State . END , check ( ) )
assertEquals ( 0.0 , loadVal , 0.001 )
assertThat ( phyMem , equalTo ( expectedValue ) )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "Expected description" , expectedRes , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedValue" , actualRes )
assertEquals ( "expectedResult" , actualRes )
assertThat ( loadedPages ( ) . size ( ) ) . isEqualTo ( expPages )
assert ! clientCfg . getDataStorageConfiguration ( ) . getDefaultDataRegionConfiguration ( ) . isPersistenceEnabled ( ) : "Persistence should be disabled"
assert clientMode
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
assertEquals ( "expectedValue" , cache . get ( key ) )
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
assertEquals ( ACTIVE_READ_ONLY , grid ( 0 ) . cluster ( ) . state ( ) )
assertEquals ( ACTIVE_READ_ONLY , grid ( 0 ) . cluster ( ) . state ( ) )
cache . get ( key )
assertThat ( grid . cache ( CACHE1 ) . metrics ( ) . getCacheSize ( ) ) . isEqualTo ( 0 )
assertNotNull ( engine . cache ( ) )
assertThrows ( null , ( ) -> cfg . setWalSegmentSize ( i ) , IllegalArgumentException . class , null )
assert cache . get ( "key" ) == 5
assertEquals ( 2 , cacheAsync . future ( ) . get ( ) )
assertEquals ( 3 , cache . get ( "key3" ) )
assertEquals ( 0 , cache . size ( ) )
assert c . localSize ( ) == 0 : "Cache is not empty."
assertEquals ( "UnsupportedOperationException should be thrown" , UnsupportedOperationException . class , assertThrows ( UnsupportedOperationException . class , ( ) -> remove ( ) ) )
AssertPlaceHolder = "Assert.assertTrue(tx.isRollbackOnly());"
AssertPlaceHolder = "assertThrows(UnsupportedOperationException.class, () -> remove());"
cache . localMetrics ( )
assert cache . localMetrics ( ) . getAverageRemoveTime ( ) > 0
assert cache . localMetrics ( ) . getAverageRemoveTime ( ) > 0
assert averageRmvTime >= 0
assert cache . localMetrics ( ) . getAverageGetTime ( ) > 0
assert cache . localMetrics ( ) . getAveragePutTime ( ) > 0
assertEquals ( 0 , cache . localMetrics ( ) . getCacheSize ( ) )
assertEquals ( expectedValue , get ( field , row ) )
assertNotNull ( parts )
assertEquals ( 1 , assignment . get ( part ) . size ( ) )
assertEquals ( expPart , affinity ( ) . partition ( affinityMapper ( ) . affinityKey ( key ) ) )
assertEquals ( 5000 , cnt . get ( ) )
assertEquals ( "Expected size of map is incorrect" , 9999 , map . size ( ) )
assertEquals ( "val1" , oldVal . get ( ) )
assertThat ( flags , equalTo ( expectedFlags ) )
assertNotEquals ( 0 , flags )
assertEquals ( g0 , g1 . affinity ( ) )
assertEquals ( 0 , cnt )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( State . READY , check ( ) )
assert ! suspended . get ( )
assertEquals ( Collections . emptySet ( ) , focalMethod ( ) )
assertEquals ( Collections . emptySet ( ) , focalMethod ( ) )
assertEquals ( expectedValue , entry . getValue ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( 0 , c1 . size ( ) )
assert all . size ( ) == 1 : "Expected size of 1, but found " + all . size ( )
assertNotNull ( node . cache ( name ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> cachingProvider . getCacheManager ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertNotNull ( sortedFuts . get ( j ) )
assertEquals ( 2 , ignite0 . cacheNames ( ) . size ( ) )
assert ex . cluster ( ) . nodes ( ) . size ( ) == 3 : "Expected 3 nodes in the cluster"
assertEquals ( i , cache1 . get ( i ) )
assertEquals ( true , metaDir . isDirectory ( ) )
assertThat ( isEmpty ) . isTrue ( )
assertEquals ( 10 , atomic . get ( ) )
assertEquals ( colCfg , getQueueCache ( queue1 ) )
assertEquals ( "Failed to get cache because it is a system cache" , e . getMessage ( ) )
assertEquals ( false , countReachedZero )
AssertPlaceHolder = "Assert.assertNotNull(cache);"
assertEquals ( BATCH_SIZE + 1 , seq . configuration ( ) . getAtomicSequenceReserveSize ( ) )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( true , isAll ( x , p ) )
assertEquals ( e . getValue ( ) . isCreateAllowed ( ) , true )
assertEquals ( 0 , map . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( numOfSrvs , cache . size ( ) )
assertNotNull ( c , "c" )
assertEquals ( 10000 , map . size ( ) )
seq . get ( )
seq . get ( )
seq . get ( )
assertEquals ( 1L , seq . get ( seqName ) )
assertEquals ( 5 , seq . get ( seqName ) )
assertEquals ( 10 , seq . get ( ) )
assertEquals ( incCnt * threadCnt , seq . get ( ) )
assertEquals ( cache . get ( i ) , new TestValue ( i ) )
assertEquals ( 0 , cache0 . get ( i ) )
assertEquals ( 1 , cacheC . apply ( getTestIgniteInstanceName ( 0 ) ) . length )
assertEquals ( 0 , ignite0 . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( val , i )
assertEquals ( nodeCnt , cnt )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertEquals ( false , grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isPrimary ( txNode , key ) )
assertEquals ( false , grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isPrimary ( txNode , key ) && grid ( originatingNode ( ) ) . affinity ( DEFAULT_CACHE_NAME ) . isBackup ( txNode , key ) )
assertEquals ( false , entry . isLocked ( ) )
assertEquals ( State . READY , check ( ) )
assert fullCacheSize == size : "Expected cache size: " + size + ", Actual cache size: " + fullCacheSize
assert c . localPeek ( key , CachePeekMode . ONHEAP ) == null
assertEquals ( beforeSize , cache1 . localMetrics ( ) . getSize ( ) )
assert primary . size ( ) > 0 : "Primary set is empty"
assertNotNull ( ignite . affinity ( DEFAULT_CACHE_NAME ) . mapKeyToNode ( key ) )
assert cache . localSize ( ) == 0
cache . getAndPut ( key , val )
cache . getAndPut ( key , val )
cache . putIfAbsent ( key , val )
cache . putIfAbsent ( key , "expectedValue" )
cache . putIfAbsent ( key , "expectedValue" )
part . assertEmpty ( )
assertNull ( cache . get ( key ) )
assertEquals ( State . READY , check ( ) )
cache . localPeek ( key )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( State . END , check ( ) )
assertEquals ( expectedActivationHash , activationHash )
assertEquals ( true , clusterActive )
assertNull ( ig . get ( key ) )
assertEquals ( i , queue . poll ( ) )
assert allMemPlcs . isEmpty ( ) : "allMemPlcs is not empty"
assertEquals ( 10000 , map . size ( ) )
assertEquals ( ClusterState . ACTIVE , grid ( ) . cluster ( ) . state ( ) )
assertEquals ( 100 , partitions . size ( ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( 0 , client . cache ( DEFAULT_CACHE_NAME ) . preloadedPartitions ( ) . size ( ) )
assertEquals ( 0 , client . cache ( DEFAULT_CACHE_NAME ) . preloadedPartitions ( ) . size ( ) )
assertEquals ( expectedValue , get ( key ) )
assertEquals ( State . END , check ( ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( cache . get ( i ) , cacheRestart . get ( i ) )
assertEquals ( true , srv . isEmpty ( ) )
assertEquals ( new IndexedObject ( k + 1 ) , cache1 . get ( k ) )
assertEquals ( "Checkpoint reason is incorrect" , "Too big WAL size" , checkpointReason )
assertEquals ( crc0 , crc1 )
assertEquals ( 1 , cache0 . size ( ) )
assertEquals ( i + 1 , map . get ( i ) )
assertEquals ( ig . name ( ) , pageLockTrackerMXBean . getIgniteInstanceName ( ) )
assertEquals ( 10000 , metaStorage . size ( ) )
assertEquals ( 50000 , metaStorage . size ( ) )
assertEquals ( false , ignite . resetLostPartitions ( Arrays . asList ( "myCache" ) ) )
assertThatThrottlingHappened ( throttle )
assertThatThrottlingHappened ( throttle )
cache . get ( key )
assertEquals ( "value" , cache . get ( 1 ) )
assertEquals ( initVMsize , committedVMSize )
assertEquals ( 100_000 , cache . size ( ) )
assertPartitionsSame ( res )
assertEquals ( "value" , snp . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
io ( ) . getTrackingPageIO ( )
assertEquals ( 3000 , cache . size ( ) )
assertNotNull ( tracker ( ignite ) )
assertNull ( future . get ( ) )
assertEquals ( 4 , aware . getLastArchivedAbsoluteIndex ( ) )
assertNotNull ( get ( key ) )
assertNotNull ( lock ( 5 ) )
assertEquals ( 5 , aware . get ( 10 ) )
assertThrows ( AssertionError . class , ( ) -> aware . unlock ( 7 ) )
assert srv . cache ( DEFAULT_CACHE_NAME ) . size ( ) == size : "Incorrect cache size"
assertNull ( npe . get ( ) )
assertEquals ( "client" , client . name ( ) )
assertEquals ( 1 , latch . getCount ( ) )
assert node1 . cluster ( ) . nodes ( ) . size ( ) == 2 : "Expected 2 nodes in the cluster"
assertEquals ( size , backupQueueSize ( ) )
assertEquals ( max , cntr . get ( id . get ( ) ) )
assertEquals ( grid ( 0 ) . cache ( caches [ i ] . getName ( ) ) . get ( 1 ) , ( i + 1 ) * 10 )
assertEquals ( i + 1 , futs . get ( i ) . get ( ) )
assert error == null
assert res . size ( ) == ENTRIES_NUM : "Incorrect number of entries processed"
assert ignite0 . cluster ( ) . state ( ) == ACTIVE : "Cluster state is not ACTIVE"
assertEquals ( "expectedClusterName" , clusterName )
assertEquals ( "test" , grid . utilityCache ( ) . get ( key ) )
assertThat ( client . cluster ( ) . state ( ) , is ( ClusterState . ACTIVE_READ_ONLY ) )
assert expCnt == get ( key )
assertNotNull ( get ( key ) )
assertNotNull ( get ( key ) )
assertNotNull ( get ( key ) )
assertEquals ( true , s )
assertNotNull ( topic )
assert g . get ( key ) == null
assertEquals ( 0 , ignite . cluster ( ) . forClients ( ) . nodes ( ) . size ( ) )
assertEquals ( null , pair )
assertEquals ( map . get ( key ) , cache . get ( key ) )
assertEquals ( v0 , cache . get ( k ) )
cache . get ( i )
assertEquals ( false , failed )
assertEquals ( 1 , cache . size ( ) )
A . assertion ( "bufSize > 0" )
assertEquals ( "value" , ignite . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
metastorage ( i ) . read ( key ) == val
ignite . context ( ) . distributedMetastorage ( ) . write ( "key" , "value" )
assertEquals ( null , histCache . get ( key ) )
assertEquals ( 0 , versionKey ( ) . length ( ) )
assert size == 0 : size
assertEquals ( translated , SqlListenerUtils . translateSqlWildcardsToRegex ( str ) )
assertEquals ( 0 , map . size ( ) )
assertThrowsWithCause ( ( ) -> forbidden ( clientMode ) . createCache ( CACHE_NAME ) , SecurityException . class )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( ClientState . ACTIVE , client . cluster ( ) . state ( ) )
assertThrowsWithCause ( ( ) -> client . cache ( CACHE ) . put ( "key" , "value" ) , ClientAuthorizationException . class )
assertNotNull ( cache . cache ( "key" ) )
assert insertedKeys . size ( ) == entriesCnt : "Expected " + entriesCnt + " keys to be inserted, but found " + insertedKeys . size ( ) + " keys."
assertThrowsWithCause ( ( ) -> compute ( grid ( FORBIDDEN ) ) . call ( c ) , AccessControlException . class )
assert res . size ( ) == NODES_CNT : "Incorrect number of results"
assertEquals ( "expectedValue" , svc . hello ( ) )
assertThat ( client . services ( ) . serviceDescriptors ( ) ) . hasSize ( NUM_SERVICES )
assertThat ( latch . getCount ( ) , is ( 0L ) )
assertEquals ( nodeCount ( ) , g . cluster ( ) . nodes ( ) . size ( ) )
assertEquals ( 10 , svc . get ( ) )
assertEquals ( 0 , svc . get ( 0 ) )
assertNotNull ( svc . get ( key ) )
assertEquals ( topVer , evt instanceof DiscoveryCustomEvent ? null : this . topVer )
assertNotNull ( originNodeId ( ) )
assertEquals ( srvcId , < expectedValue >  )
assertEquals ( true , map . containsKey ( 0 ) )
assertEquals ( countsTillCb , cntr . get ( ) )
assertEquals ( 10000 , map . size ( ) )
assertEquals ( "Expected MD5 value" , "Expected MD5 value" , md5 )
assertThat ( addrs . size ( ) , is ( equalTo ( hostNames . size ( ) ) ) )
AssertPlaceHolder = "Assert.assertFalse(logMessagesCollector().hasWarnings());"
assertEquals ( false , deleted )
assertNull ( map . get ( key ) )
assertNull ( map . get ( key ) )
map . remove ( "key" )
assertEquals ( 4999950000L , cntr . get ( ) )
assert directPositionMap . size ( ) == 4
assertEquals ( 2 , chain . get ( ) )
assertEquals ( strs , res )
assertEquals ( strs , res )
assertNull ( err . get ( ) )
assertEquals ( "Expected output" , obj . toStringAutomatic ( ) )
assertEquals ( manual , automatic )
assertEquals ( "IgniteTxKey [remAmnt=123, remTerm=1, apr=null, edf=null]" , k . toString ( ) )
assert set . contains ( "v1" )
assert set . isEmpty ( ) : "Set should be empty after calling clear()"
assertNotEquals ( new Date ( 0 ) , date )
assert set . size ( ) == size
assertEquals ( 0 , val )
assertEquals ( new DummyObject ( k ) , c2 . get ( k ) )
assertEquals ( clsName , String . class . getName ( ) )
assertEquals ( sumPopulated , sumQueried )
assertNull ( failure . get ( ) )
assertNull ( failure . get ( ) )
assertEquals ( 1 , cache . size ( ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( cli . createCache ( "Can_create_cache_after_compute_fail" ) )
assertEquals ( 1 , fIntBoxed )
assertEquals ( 1 , val )
assertEquals ( val , ? ? ? )
assertEquals ( State . READY , check ( ) )
assertEquals ( "Failed to wait for establishing inverse connection (node left topology): 67cf0e5e-974c-463a-a1f2-915fe3cdd3e7" , exception . getMessage ( ) )
assertEquals ( null , clusterTopologyCheckedException ( ) )
assertEquals ( "test" , testCache . get ( "test" ) )
assert clients . size ( ) == expectedSize
assert res . get ( n ) == true
assertEquals ( State . END , check ( ) )
assertEquals ( "Expected map to contain key 0" , false , map . containsKey ( 0 ) )
assertEquals ( null , client . get ( key ) )
assertEquals ( true , res )
assert size >= 0 : size
assertEquals ( false , fut . get ( ) )
assertEquals ( "expectedValue" , rejoinAttr )
assertEquals ( port0 , getDiscoveryPort ( grid ( 0 ) ) )
assert ignite2 . cluster ( ) . nodes ( ) . size ( ) == 3 : "Expected 3 nodes in the cluster"
assertEquals ( 0 , ignite0 . cacheNames ( ) . size ( ) )
assertEquals ( State . READY , check ( ) )
assert size >= 0 : size
assertEquals ( 10000 , map . size ( ) )
assert orderedNodes . size ( ) == allNodes . size ( ) : "The size of orderedNodes is not equal to the size of allNodes"
assert orderedNodes . size ( ) == allNodes . size ( ) : "Size of orderedNodes is not equal to size of allNodes"
assertEquals ( firstNode , secondNode )
assertEquals ( "Expected exception not thrown" , IgniteException . class , e . getClass ( ) )
assertEquals ( false , proxy . getProcess ( ) . getProcess ( ) . isAlive ( ) )
assertEquals ( State . READY , check ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( "1" , echo . getLogs ( ) . get ( 0 ) )
assert cp2 . size ( ) == 4
assertEquals ( allSize , size1 * 2 , 0.01 )
assertEquals ( allSize , size1 + size2 )
assertEquals ( "bar" , cache . get ( "foo" ) )
assertEquals ( size , CNT / 10 + CNT )
assertEquals ( false , qry . isEmpty ( ) )
assertEquals ( 2 , result )
assert ignite . cluster ( ) . forAttribute ( "metadata" ) . nodes ( ) . size ( ) == 1
assert ignite . cache ( DEFAULT_CACHE_NAME ) . size ( ) == threadsNum : "Incorrect cache size"
assertThat ( qry . getAll ( ) . isEmpty ( ) , is ( isEmpty ) )
assert all . size ( ) == 3 : "Expected size to be 3"
assertEquals ( 0 , all . size ( ) )
assertEquals ( "after" , ( ( Value ) all . get ( 0 ) . get ( 0 ) ) . str )
assert clientNode . cache ( PERSON_CACHE ) . size ( ) == size : "Expected size: " + size + ", Actual size: " + clientNode . cache ( PERSON_CACHE ) . size ( )
assertEquals ( 0 , qry . getColumns ( ) . size ( ) )
assert qry . size ( ) == size
assertEquals ( partsFilled , aff . partitions ( ) )
assert partsFilled == aff . partitions ( ) : "Incorrect number of partitions filled"
assertEquals ( i , cache . get ( i ) . getValue ( ) )
assertNotNull ( entry . getKey ( ) )
assert res . getAll ( ) . size ( ) > 0 : "No results found"
assertNotNull ( p . get ( id ) )
assertTrue ( map . containsKey ( 0 ) )
assertEquals ( 3 , cache . get ( new Key ( 1 , 2 ) ) . getField ( ) )
assertEquals ( 0 , ignite . cache ( cacheName ) . size ( ) )
assertEquals ( "Expected exception not thrown" , expectedExceptionClass , e . getClass ( ) )
assert qry . getAll ( ) . size ( ) == size
assertEquals ( 0 , cnt )
assert qry . getAll ( ) . size ( ) == keyCnt : "Incorrect number of entries in cache"
AssertPlaceHolder = "Assert.assertTrue(idxPaths.isEmpty());"
assertEquals ( 0 , grid ( ) . cache ( "TEST" ) . size ( ) )
assert size >= 0 : size
assertEquals ( false , n . cluster ( ) . state ( ACTIVE ) )
assertEquals ( v1 , rv1 )
assertEquals ( State . READY , check ( ) )
assertEquals ( State . READY , check ( ) )
assert res . size ( ) == 2 : "Expected size to be 2, but actual size is " + res . size ( )
assertExistIndexRoot ( cache , newTreeName , segments , true )
assertExistIndexRoot ( cache , oldTreeName , segments , true )
assertNotNull ( res )
assertThat ( stopRebuildIndexes ( n -> n . cluster ( ) . state ( INACTIVE ) , true ) ) . isTrue ( )
assert conns . size ( ) > 0 : "No client connections found"
assertEquals ( exp , rows )
assert keys . size ( ) == 2 : "Expected 2 keys, but found " + keys . size ( )
assert keys . size ( ) == 2 : "Expected 2 keys to be locked, but found " + keys . size ( )
assertEquals ( exp , rows )
assertEquals ( exp , rows )
assertEquals ( 42 , cache . get ( 12 ) )
assertEquals ( State . END , check ( ) )
assertNotNull ( cache . get ( i ) )
assertContains ( log , b . toString ( ) , "The check procedure has finished, no conflicts have been found." )
assertEquals ( "RegularPeter0" , cache . get ( 0 ) )
assertThrows ( log , ( ) -> sql ( "insert into test(id1, val) values(null, 1);" ) , TransactionDuplicateKeyException . class , "Duplicate key during INSERT" )
assertEquals ( testObj , selectData . get ( 0 ) . get ( 0 ) )
assert cursor . iterator ( ) . hasNext ( ) : "No results found"
assertEquals ( 10 , act . get ( 0 ) . get ( 0 ) )
assertNotNull ( cursor )
assertNotNull ( cache . get ( key1 ) )
assertThrows ( log , new Callable < Object > ( ) {
assert cache . containsKey ( key1 ) : "Key1 not found in cache"
assert result . size ( ) == 2
assertNotNull ( result )
assert result . size ( ) == 1
assert result . size ( ) == 1
assert result . size ( ) == 2
assert result . size ( ) > 0 : "Result size should be greater than 0"
assert res . size ( ) == expSize : "Expected size: " + expSize + ", Actual size: " + res . size ( )
assertEquals ( expSize , cache . size ( ) )
assert results . size ( ) > 0 : "Results list is empty"
assert r . size ( ) == expectedSize : "Expected size: " + expectedSize + ", Actual size: " + r . size ( )
assertNull ( res )
assertEquals ( 3 , res . size ( ) )
assertEquals ( ClusterState . INACTIVE , grid ( 0 ) . cluster ( ) . state ( ) )
assertEquals ( State . END , check ( ) )
assertEquals ( 1 , grid ( 0 ) . context ( ) . query ( ) . querySqlFields ( new SqlFieldsQuery ( SQL_TEXT ) . setSchema ( DEFAULT_CACHE_NAME ) , true ) . getAll ( ) . size ( ) )
assertNotNull ( cache . get ( obj . getId ( ) ) )
cache . get ( 1 )
assert cache . size ( ) == 1 : "Cache size is not equal to 1"
assert cache . size ( ) == KEYS : "Cache size is incorrect"
assert cache . size ( ) == 0 : "Cache size is not zero"
assertEquals ( 1 , rs . getFetchSize ( ) )
assertNotNull ( cache . get ( 1 ) )
assertEquals ( 0 , cc . size ( ) )
assertEquals ( false , o1 == o2 )
assertEquals ( true , isEmpty )
assertEquals ( 1 , res . getCount ( ) )
assertNotNull ( entry . getKey ( ) )
assertEquals ( 2 , statObs . get ( K1 ) . get ( 2 ) . get ( K1 ) )
assertNull ( e )
assertEquals ( localStats [ 0 ] . columnsStatistics ( ) . size ( ) , globalStat . columnsStatistics ( ) . size ( ) )
assert oldSize == 0 : "Expected size to be 0, but was " + oldSize
assertEquals ( 0 , statsStore . getAllStatistics ( ) . size ( ) )
assertEquals ( hugeTimeouts [ 0 ] , stmt . getQueryTimeout ( ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( false , isEmpty )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( 0 , getRowCount ( "SELECT * FROM char_table_3 WHERE id = 1" ) )
assertEquals ( 0 , countRows ( "SELECT * FROM decimal_table_3 WHERE id = 1" ) )
assertEquals ( false , isEmpty )
assertNotNull ( cache . get ( 1 ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( "Expected IllegalArgumentException exception" , e . getMessage ( ) )
assertEquals ( zeroCentre , mdl . predict ( VectorUtils . num2Vec ( 0.0 ) ) )
assertNotNull ( entry . getValue ( ) )
assertNotNull ( entry . getValue ( ) )
assert aggregator . getWeightedPredictions ( ) . length == 0
assertEquals ( 42 , affinityFunction . partitions ( ) )
assertEquals ( nodes , resNodes )
assertThrows ( RuntimeException . class , ( ) -> unsafeGet ( ) )
assertEquals ( 0.42 , infMdl . predict ( input ) , 0.001 )
assertEquals ( 0.5 , focalMethod . predict ( input ) , 0.001 )
assertEquals ( 0.5 , mdlBuilder . predict ( input ) , 0.001 )
assertEquals ( ex , e )
assertEquals ( ex , e )
assertEquals ( ex , e )
assert knnMdl . predict ( neighbors , pnt ) == expectedValue
assertEquals ( exp , y )
assertEquals ( exp , v )
assertEquals ( mu , m )
assertEquals ( exp , a )
assertEquals ( exp , c )
assertEquals ( vector . get ( i ) , csvVal )
assertTrue ( MathTestConstants . UNEXPECTED_VAL , storage . isDense ( ) )
assertEquals ( data , storage . get ( i , j ) )
assertEquals ( MathTestConstants . VAL_NOT_EQUALS , storage . columnSize ( ) , MathTestConstants . STORAGE_SIZE )
assertEquals ( MathTestConstants . VAL_NOT_EQUALS , storage . rowSize ( ) , MathTestConstants . STORAGE_SIZE )
assert storage . get ( i ) == random
assert this . size == size : "Size assertion failed"
assertNull ( of ( true ) )
assertEquals ( 0.0 , predict ( observation ) , 0.001 )
assertEquals ( 5.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 5.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 3.0 , f . apply ( new DenseVector ( new double [ ] { 1.0 , 3.0 } ) ) , 0.0001 )
assertEquals ( 1 , predict . getRow ( 0 ) . get ( 0 ) )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( preprocessor . preprocess ( data . get ( i ) ) , postProcessedData [ i ] )
assertEquals ( preprocessor . preprocess ( data [ i ] ) , postProcessedData [ i ] )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( expData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( standardData [ i ] , preprocessor . apply ( data [ i ] ) )
assertEquals ( standardData [ i ] [ 0 ] , preprocessor . apply ( data [ i ] ) [ 0 ] , 0.001 )
assertEquals ( postProcessedData [ i ] , preprocessor . apply ( data [ i ] ) )
assert res . size ( ) == 4 : res . size ( )
assertEquals ( "x" , dataset . getFeatureName ( 0 ) )
assertEquals ( training . size ( ) , expectedSize )
assert cache . size ( ) == 10
assertNull ( cache . get ( i ) )
assertEquals ( 100.0 , generator . labeled ( ) . findFirst ( ) . get ( ) . getLabel ( ) , 0.0 )
assertEquals ( producer1 . get ( 0 ) , producer2 . get ( 0 ) )
assertEquals ( 1.0 / N , counters . get ( i ) )
assertNotNull ( get ( key ) )
assertEquals ( 2.0 , res . apply ( 1.0 ) , 0.0001 )
assertEquals ( 1.0 , p . produce ( ) , 0.001 )
assertEquals ( producer1 . get ( 0 ) , producer2 . get ( 0 ) )
assertEquals ( vec , constant ( vec ) . generate ( ) )
assertEquals ( originalVec . times ( 2.0 ) , doubledVec )
assertEquals ( VectorUtils . of ( 1.0 , 2.0 ) , family . get ( VectorUtils . of ( 1 , - 1 ) ) )
assertEquals ( expectedFitness , population . getChromosome ( 0 ) . getFitness ( ) )
assertEquals ( expectedValue , population . getChromosome ( idx ) )
assertEquals ( res [ 0 ] . getFitness ( ) , 180 , PRECISION )
assertEquals ( listeners . size ( ) , 2 )
assertEquals ( 0 , listeners . size ( ) )
assert qryExecSpans . size ( ) == qryParallelism : "Expected " + qryParallelism + " query execution spans, but found " + qryExecSpans . size ( )
assertEquals ( 0 , gotSpans . size ( ) )
assert gotSpans . size ( ) == 1 : "Expected 1 span, but got " + gotSpans . size ( )
assertEquals ( txAmount / 2 , gotSpans . size ( ) )
assertEquals ( 0 , gotSpans . size ( ) )
assertEquals ( "expectedValue" , cache . getName ( ) )
assertNotNull ( g , "g" )
assertEquals ( 0 , grid ( 0 ) . compute ( grid ( 0 ) . cluster ( ) . forRemotes ( ) ) . call ( new IgniteCallable < Object > ( ) {
assertEquals ( "Expected value" , actualValue )
assertEquals ( null , svc )
assertEquals ( "nonExistentService" , svc . getServiceName ( ) )
dummyRsrcBean = null
assert client . exists ( "/apacheIgnite/1" ) : "Path /apacheIgnite/1 does not exist"
assert client . getChildren ( "/apacheIgnite" ) . size ( ) == cnt
assert client . exists ( "/apacheIgnite/2" ) : "Path /apacheIgnite/2 does not exist"
assertEquals ( 0 , client . getChildren ( "/apacheIgnite" ) . size ( ) )
assertEquals ( true , res . get ( ) )
assert res . get ( j ) : "Connection check failed for node: " + j
assert latch . await ( timeout , timeUnit )
assertEquals ( 0 , evts . size ( ) )
assertEquals ( 0 , l . getCount ( ) )
assertEquals ( 1 , l . getCount ( ) )
AssertPlaceHolder = "Assert.assertNotNull(ignite);"
assertEquals ( 100 , cache . size ( ) )
