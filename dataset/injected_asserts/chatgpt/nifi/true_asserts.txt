assertTrue ( exception . getMessage ( ) . contains ( "TLS" ) )
assertEquals ( MANIFEST_HASH , heartbeat . getAgentInfo ( ) . getAgentManifestHash ( ) )
assertEquals ( MANIFEST_HASH , heartbeat . getAgentInfo ( ) . getAgentManifestHash ( ) )
assertEquals ( C2OperationState . OperationState . NOT_APPLIED , response . getOperationState ( ) . getState ( ) )
assertEquals ( properties , result )
assertEquals ( getExpected ( OperationState . FULLY_APPLIED ) , result )
assertEquals ( getExpected ( OperationState . NO_OPERATION ) , result )
assertEquals ( getExpected ( OperationState . NOT_APPLIED ) , result )
assertEquals ( expected , result )
assertEquals ( RestChangeIngestor . GET_TEXT , response . body ( ) . string ( ) )
assertEquals ( EMPTY_STRING , outputStream . toString ( ) . trim ( ) )
assertEquals ( EMPTY_STRING , outputStream . toString ( ) . trim ( ) )
assertEquals ( EMPTY_STRING , outputStream . toString ( ) . trim ( ) )
assertEquals ( EMPTY_STRING , outputStream . toString ( ) . trim ( ) )
assertEquals ( OK , outputStream . toString ( ) . trim ( ) )
assertEquals ( OK , outputStream . toString ( ) . trim ( ) )
assertNull ( currentPortProvider . getCurrentPort ( ) )
assertTrue ( StringUtils . isNotEmpty ( properties . getProperty ( "nifi.sensitive.props.key" ) ) )
assertEquals ( 406 , urlConnection . getResponseCode ( ) )
assertEquals ( 400 , urlConnection . getResponseCode ( ) )
assertEquals ( 0 , idToNameList . size ( ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertTrue ( securityPropertiesSchema . isValid ( ) )
assertEquals ( "YAML configuration version 9999999 not supported.  Supported versions: 1, 2, 3" , e . getMessage ( ) )
assertNotEquals ( 0 , validationIssues . size ( ) )
assertEquals ( 0 , sourceRelationshipNames . size ( ) )
assertFalse ( result )
assertTrue ( result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , status )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( configSchema . isValid ( ) )
assertEquals ( 1 , dtoSchemaFunction . apply ( dto ) . getValidationIssues ( ) . size ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "[" + DEFAULT_VALUE + "]" ) )
assertTrue ( message . contains ( REFERENCE_CLASS . getName ( ) ) )
assertEquals ( StringUtils . EMPTY , evaluated )
assertEquals ( "true" , result )
assertEquals ( "world" , evaluate ( "${${xx}}" , attrs ) )
assertEquals ( removeXmlDeclaration ( property ) . trim ( ) , removeXmlDeclaration ( outputProperty ) . trim ( ) )
assertEquals ( value , resultValue )
assertEquals ( 0 , parameterParser . parseTokens ( input ) . toList ( ) . size ( ) )
assertEquals ( 0 , parameterParser . parseTokens ( input ) . toList ( ) . size ( ) )
assertNull ( references . substitute ( paramContext ) )
assertEquals ( Integer . parseInt ( portValue ) , clusterProtocolAddress . getPort ( ) )
assertEquals ( PROPERTY , decrypted )
assertEquals ( ENCRYPTED_BINARY_LENGTH , decoded . length )
assertEquals ( PROTECTED_PROPERTY , protectedProperty )
assertEquals ( secretName , protectedProperty )
assertEquals ( PROTECTED_PROPERTY , protectedProperty )
assertEquals ( ID , protectedProperty )
assertEquals ( AES_GCM_128 , identifierKey )
assertEquals ( "default/prop" , factory . getPropertyContext ( "ldap-provider" , "prop" ) . getContextKey ( ) )
assertTrue ( exception . getMessage ( ) . contains ( UNKNOWN ) )
assertEquals ( IDENTIFIER_KEY , identifierKey )
assertEquals ( IDENTIFIER_KEY , identifierKey )
assertEquals ( "John Doe: 48" , RecordPath . compile ( "concat(/firstName, ' ', /lastName, ': ', 48)" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertEquals ( "Hello World!" , RecordPath . compile ( "toString(/bytes, \"UTF-16\")" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertEquals ( RecordFieldType . DECIMAL . getDecimalDataType ( 30 , 10 ) , resultSchema . getField ( 0 ) . getDataType ( ) )
assertEquals ( RecordFieldType . ARRAY . getArrayDataType ( RecordFieldType . STRING . getDataType ( ) ) , resultSchema . getField ( 0 ) . getDataType ( ) )
assertTrue ( DataTypeUtils . isCompatibleDataType ( testMap , RecordFieldType . RECORD . getDataType ( ) ) )
assertNull ( timestamp )
assertNull ( timestamp )
assertEquals ( Collections . singletonList ( RecordFieldType . DOUBLE . getDataType ( ) ) , set . getTypes ( ) )
assertEquals ( "SUCCESS" , resultHolder . get ( ) )
assertTrue ( keyIds . contains ( KEY_ID ) )
assertTrue ( keyIds . contains ( KEY_ID ) )
assertEquals ( secretKey , readSecretKey , "Secret Key not matched" )
assertNotNull ( sslContext )
assertNotNull ( sslContext )
assertNotNull ( sslContext )
assertEquals ( KEY_STORE_PASSWORD , configuration . getFunctionalKeyPassword ( ) )
assertNull ( transaction )
assertTrue ( e instanceof SocketTimeoutException )
assertArrayEquals ( data , decompressed )
assertNull ( demarcator . nextOffsetInfo ( ) )
assertEquals ( i , ringBuffer . getNewestElement ( ) . intValue ( ) )
assertEquals ( "https" , WebUtils . determineProxiedScheme ( request ) )
assertEquals ( "http" , WebUtils . determineProxiedScheme ( request ) )
assertEquals ( "x-proxy-host" , WebUtils . determineProxiedHost ( request ) )
assertEquals ( "x-proxy-host" , WebUtils . determineProxiedHost ( request ) )
assertEquals ( "x-forwarded-host" , WebUtils . determineProxiedHost ( request ) )
assertEquals ( "1234" , WebUtils . determineProxiedPort ( request ) )
assertNotSame ( firstObject , secondObject )
assertEquals ( new HashSet < > ( records ) , new HashSet < > ( recovered ) )
assertNotNull ( document )
assertEquals ( "this came from a resource" , stringData )
assertNotNull ( policy )
assertNotNull ( extensionManifest )
Assert . assertEquals ( iterations , processor . getCounter ( ) )
assertEquals ( 5 , runner . getProcessContext ( ) . getMaxConcurrentTasks ( ) )
runner . assertAllFlowFiles ( f -> assertEquals ( "value" , f . getAttribute ( AddAttributeProcessor . KEY ) ) )
assertEquals ( "TestName" , runner . getProcessContext ( ) . getName ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertEquals ( 1 , results . size ( ) , "Wrong count, received " + results . size ( ) )
assertNull ( response )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertNull ( fetcher . fetchNext ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( new GenericObjectSerDe < > ( ) . deserialize ( null ) )
assertTrue ( ( ( MockProcessContext ) runner . getProcessContext ( ) ) . isYieldCalled ( ) )
assertEquals ( "1234-5678-0000-0000@namespace1" , nifiFlow . getQualifiedName ( ) )
assertEquals ( 2 , hook . getMessages ( ) . size ( ) )
assertEquals ( atlasUrls , atlasProperties . getProperty ( "atlas.rest.address" ) )
assertEquals ( atlasMetadataNamespace , atlasProperties . getProperty ( "atlas.metadata.namespace" ) )
assertNull ( provider . getParameterValue ( CONTEXT , PARAMETER ) )
assertNull ( provider . getParameterValue ( "Does not exist" , PARAMETER ) )
assertEquals ( 0 , mockPutCloudWatchMetric . putMetricDataCallCount )
Assertions . assertEquals ( TABLE_NAME , result . getTableName ( ) )
Assertions . assertEquals ( TABLE_NAME , result . getTableName ( ) )
Assertions . assertEquals ( "0" , flowFile . getAttribute ( PutDynamoDBRecord . DYNAMODB_CHUNKS_PROCESSED_ATTRIBUTE ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( PutKinesisFirehose . AWS_KINESIS_FIREHOSE_ERROR_MESSAGE ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( PutKinesisStream . AWS_KINESIS_ERROR_MESSAGE ) )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertThat ( sharedState . getProvenanceEvents ( ) . size ( ) , is ( 0 ) )
assertTrue ( runner . setProperty ( "x-custom-prop" , "hello" ) . isValid ( ) )
assertTrue ( runner . setProperty ( "x-custom-prop" , "hello" ) . isValid ( ) )
assertEquals ( storageClass . toString ( ) , request . getStorageClass ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertTrue ( runner . setProperty ( "DynamicProperty" , "hello!" ) . isValid ( ) )
assertTrue ( runner . setProperty ( "x-custom-prop" , "hello" ) . isValid ( ) )
Assertions . assertEquals ( "https://myaccount.blob.core.usgovcloudapi.net" , endpoint )
Assertions . assertEquals ( "https://myaccount.dfs.core.usgovcloudapi.net" , endpoint )
assertNotNull ( processor . getCosmosClient ( ) )
assertNotNull ( processor . getCosmosClient ( ) )
assertTrue ( ( ( ITProcessor ) runner . getProcessor ( ) ) . blobMetadataApplied )
assertEquals ( flowFile . getAttribute ( ATTR_NAME_IGNORED ) , "true" )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertNotSame ( clientOne , clientTwo )
assertEquals ( END_POINT_SUFFIX_VALUE , actual . getEndpointSuffix ( ) )
assertEquals ( ENDPOINT_SUFFIX_VALUE , actual . getEndpointSuffix ( ) )
assertEquals ( expectedJson . toString ( ) , actualJson . toString ( ) )
assertEquals ( DataType . ascii ( ) , AbstractCassandraProcessor . getPrimitiveDataTypeFromString ( "ascii" ) )
assertNotNull ( processor . getCluster ( ) )
assertTrue ( e . getCause ( ) . getClass ( ) . equals ( ProcessException . class ) )
assertEquals ( "6:hERjIfhRrlB63J0FDw1NBQmEH68xwMSELN:hZrlB62IwMS" , outFile . getAttribute ( "fuzzyhash.value" ) )
assertEquals ( expectedFileNames , actualFileNames )
assertEquals ( expectedFileNames , actualFileNames )
assertTrue ( passed )
assertFalse ( condition . evaluate ( facts ) )
assertTrue ( passed )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( 1 , checkedRules . size ( ) )
assertEquals ( 0 , splits . size ( ) )
assertTrue ( filenames . contains ( "nifiDrop.svg" ) )
assertEquals ( exception . getMessage ( ) , "Could not convert socket to TLS" )
assertTrue ( results . size ( ) == 1 )
assertEquals ( basename + ".xml" , parseEvtx . getName ( basename , null , null , ParseEvtx . XML_EXTENSION ) )
assertEquals ( basename + "-chunk1-record2.xml" , parseEvtx . getName ( basename , 1 , 2 , ParseEvtx . XML_EXTENSION ) )
assertEquals ( basename , parseEvtx . getBasename ( flowFile , componentLog ) )
assertEquals ( 10 , binaryReader . getPosition ( ) )
assertEquals ( content , cDataSectionNode . getCdata ( ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( val . getBytes ( Charsets . US_ASCII ) ) , new BinaryTypeNode ( binaryReader , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( val . getBytes ( Charsets . US_ASCII ) ) , new BinaryTypeNode ( binaryReader , chunkHeader , parent , val . length ( ) ) . getValue ( ) )
assertTrue ( Boolean . parseBoolean ( new BooleanTypeNode ( testBinaryReaderBuilder . putDWord ( 1 ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) ) )
assertEquals ( Double . toString ( value ) , new DoubleTypeNode ( testBinaryReaderBuilder . putQWord ( Double . doubleToLongBits ( value ) ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( guid , new GuidTypeNode ( testBinaryReaderBuilder . putGuid ( guid ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( hex , new Hex32TypeNode ( testBinaryReaderBuilder . putDWord ( value ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) . substring ( 2 ) )
assertEquals ( hex , new Hex64TypeNode ( testBinaryReaderBuilder . putQWord ( value ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) . substring ( 2 ) )
assertEquals ( "S-4-327686-7" , new SIDTypeNode ( testBinaryReaderBuilder . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( Byte . toString ( value ) , new SignedByteTypeNode ( testBinaryReaderBuilder . put ( value ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( value , new StringTypeNode ( binaryReader , chunkHeader , parent , - 1 ) . getValue ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( value , new WStringTypeNode ( testBinaryReaderBuilder . putWString ( value ) . build ( ) , chunkHeader , parent , value . length ( ) * 2 ) . getValue ( ) )
assertNotNull ( clazz )
Assertions . assertNotNull ( con )
assertEquals ( queue . size ( ) , queue . getLargestSize ( ) )
assertNotNull ( result )
assertFalse ( isDynamicCSVFormat )
assertTrue ( isDynamicCSVFormat )
assertTrue ( isDynamicCSVFormat )
assertEquals ( "Attributes map is null" , e . getMessage ( ) )
assertEquals ( "Attributes must contain an attribute name '" + LOOKUP_ATTRIBUTE + "'" , e . getMessage ( ) )
assertFalse ( event . isValid ( ) )
Assertions . assertFalse ( result )
Assertions . assertTrue ( result )
assertEquals ( 0 , policies . size ( ) )
assertTrue ( Result . Approved . equals ( result . getResult ( ) ) )
assertFalse ( Result . Approved . equals ( result . getResult ( ) ) )
assertEquals ( 0 , users . size ( ) )
assertEquals ( EMPTY_FINGERPRINT , managedAuthorizer . getFingerprint ( ) )
assertEquals ( proxiedEntitiesChain , Collections . EMPTY_LIST )
assertEquals ( Result . Denied , result . getResult ( ) )
assertEquals ( Result . Denied , result . getResult ( ) )
assertEquals ( 0 , handler . getMessages ( ) . size ( ) )
assertTrue ( unmarshalled instanceof NodeConnectionStatusRequestMessage )
assertEquals ( ClusterNodeFirewall . class , objectType )
assertEquals ( ipsConfig . length ( ) , new File ( restoreDirectory , ipsConfig . getName ( ) ) . length ( ) )
assertEquals ( 1 , proxiedService . getLevel ( ) )
assertEquals ( mockFlowFile . getAttribute ( CoreAttributes . UUID . key ( ) ) , observer . getMessages ( ) . get ( 0 ) . getFlowFileUuid ( ) )
assertEquals ( 1024 * 1024L , val )
assertEquals ( expected , filtered )
Assertions . assertEquals ( expectedFlow , actualFlow )
assertTrue ( pg . getControllerServices ( true ) . isEmpty ( ) )
assertEquals ( attributes , repositoryRecord . getFlowFileRecord ( ) . getAttributes ( ) )
assertNotNull ( ff1 )
assertNotNull ( flowFile )
assertEquals ( 0 , provenanceRepo . getEvents ( 0L , 100000 ) . size ( ) )
assertEquals ( 7 , flowFiles . size ( ) )
assertEquals ( "hello, world" , new String ( buffer ) )
assertTrue ( bogus . delete ( ) )
assertFalse ( replaced )
assertNotNull ( ZooKeeperStateServer . create ( completeProps ) )
assertNotNull ( statusAnalytics )
assertFalse ( exOccurred )
assertNotNull ( target )
assertEquals ( expected , result )
assertEquals ( BUFFER_SIZE , statusEntriesCaptor . getValue ( ) . size ( ) )
assertEquals ( fp1 , fp2 )
assertNotEquals ( fp1 , fp2 )
assertEquals ( 0 , validationErrors . size ( ) )
assertNull ( extensionMapping )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Found an invalid Site-to-Site route definition [no-host] 'hostname' is not specified." , illegalArgumentException . getMessage ( ) )
assertTrue ( ioException . getMessage ( ) . contains ( "Received a BadChecksum response" ) )
assertNull ( authentication )
assertNotNull ( requestLog )
assertNull ( entity . getComponent ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , mappings . size ( ) )
assertEquals ( 3 , mappings . size ( ) )
assertEquals ( "jsmith@aaa.bbb" , mappedIdentity )
assertEquals ( "jsmith@aaa.$4" , mappedIdentity )
assertEquals ( 0 , groups . size ( ) )
assertTrue ( userDetails . getNiFiUser ( ) . isAnonymous ( ) )
assertTrue ( userDetails . getNiFiUser ( ) . isAnonymous ( ) )
assertEquals ( ROOT_PATH , cookie . getPath ( ) )
assertNotNull ( serialized , "Serialized Key not found" )
assertEquals ( BEARER_TOKEN , resolver . resolve ( request ) )
assertNull ( resolver . resolve ( request ) )
assertFalse ( result . hasErrors ( ) )
assertTrue ( result . hasErrors ( ) )
assertEquals ( expiration . toString ( ) , saved , "Expiration not matched" )
assertNull ( authRequest )
assertEquals ( USERNAME , usernameCaptor . getValue ( ) )
assertNull ( shouldNotExistRequest )
assertNotNull ( request )
assertNull ( request )
assertNull ( object )
assertNotNull ( credentials )
assertNotNull ( credentials )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertNull ( Util . parseContentDisposition ( contentDisposition ) )
Assert . assertEquals ( 2 , integer . get ( ) )
assertEquals ( "onUnscheduled invoked successfully\n" , outContent . toString ( ) )
assertTrue ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( reloginTried )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertFalse ( new NotificationEventPathFilter ( Pattern . compile ( "" ) , true ) . accept ( null ) )
assertEquals ( value , parameterProvider . getParameterValue ( "context" , "param" ) )
assertNull ( parameterProvider . getParameterValue ( "context" , "param" ) )
assertTrue ( result )
assertTrue ( result )
assertEquals ( value , result )
assertFalse ( exception , "An unhandled exception was caught." )
assertEquals ( 0 , runner . getProvenanceEvents ( ) . size ( ) )
assertEquals ( "{\"" + QUAL1 + "\":\"" + VAL1 + "\", \"" + QUAL2 + "\":\"" + VAL2 + "\"}" , json )
assertEquals ( "{\"row\":\"row1\", \"cells\": {\"colFam1:colQual1\":\"val1\", \"colFam2:colQual2\":\"val2\"}}" , json )
assertNull ( deserialized )
assertEquals ( sqlException , pe . getCause ( ) )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertEquals ( TypeInfoCreator . createBoolean ( ) , orcType )
assertEquals ( null , result . getResults ( ) . iterator ( ) . next ( ) . getSeries ( ) , "Should have no results" )
assertEquals ( null , result . getResults ( ) . iterator ( ) . next ( ) . getSeries ( ) , "Should have no results" )
assertEquals ( flowFiles . get ( 0 ) . getAttribute ( PutInfluxDB . INFLUX_DB_ERROR_MESSAGE ) , "Max records size exceeded " + bytes . length )
assertEquals ( flowFiles . get ( 0 ) . getAttribute ( PutInfluxDB . INFLUX_DB_ERROR_MESSAGE ) , "Max records size exceeded " + bytes . length )
assertEquals ( flowFiles . get ( 0 ) . getAttribute ( PutInfluxDB . INFLUX_DB_ERROR_MESSAGE ) , null )
assertEquals ( flowFiles . get ( 0 ) . getAttribute ( PutInfluxDB . INFLUX_DB_ERROR_MESSAGE ) , "Empty measurement size 0" )
assertEquals ( ImmutableMap . of ( ) , cfProvider . getConfiguredProperties ( ) )
assertEquals ( "JOLT Chainr expects a JSON array of objects - Malformed spec." , e . getLocalizedMessage ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 5 , ldapUserGroupProvider . getGroups ( ) . size ( ) )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 4 , propertyValues . size ( ) )
assertNull ( testedReportingTask . currentStatusReference . get ( ) )
assertNull ( ex , "An exception was thrown!" )
assertTrue ( count == 10 , "Wrong count" )
assertTrue ( e . getMessage ( ) . contains ( "Invalid Packet Length" ) )
assertEquals ( KEY_ID_FORMATTED , formatted )
assertTrue ( content . contains ( "parent_id=\"\"" ) )
assertEquals ( 1 , closeCount . get ( ) )
assertEquals ( 0 , closeCount . get ( ) )
assertTrue ( newSize > storeSize )
assertEquals ( EMPTY_FINGERPRINT , managedRangerAuthorizer . getFingerprint ( ) )
assertEquals ( NON_EMPTY_FINGERPRINT , managedRangerAuthorizer . getFingerprint ( ) )
assertNull ( serDe . serialize ( null ) )
assertEquals ( 1 , results . size ( ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNull ( flowFiles . get ( 0 ) . getAttribute ( AbstractRethinkDBProcessor . RETHINKDB_ERROR_MESSAGE ) )
assertNotNull ( flowFiles . get ( 0 ) . getAttribute ( PutRethinkDB . RETHINKDB_ERROR_MESSAGE ) )
assertTrue ( ( ( MockProcessContext ) runner . getProcessContext ( ) ) . isYieldCalled ( ) )
assertEquals ( 42 , facts . get ( "testFact" ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 0 , task . dataSent . size ( ) )
assertEquals ( 0 , task . dataSent . size ( ) )
assertEquals ( "my-text" , requestBodyJson . getString ( "text" ) )
assertEquals ( expected , requestBody )
assertEquals ( "test_content" , testRunner . getFlowFilesForRelationship ( REL_SUCCESS ) . get ( 0 ) . getContent ( ) )
assertEquals ( 1 , testRunner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 1 , testRunner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 1 , testRunner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 1 , testRunner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertTrue ( shareAccessSet . contains ( SMB2ShareAccess . FILE_SHARE_READ ) )
assertEquals ( TARGET_ADDRESS , actualTargetAddress )
assertThat ( expectedXml , CompareMatcher . isIdenticalTo ( new String ( runner . getContentAsByteArray ( runner . getFlowFilesForRelationship ( GetSolr . REL_SUCCESS ) . get ( 0 ) ) ) ) )
assertThat ( expectedXml , CompareMatcher . isIdenticalTo ( new String ( runner . getContentAsByteArray ( runner . getFlowFilesForRelationship ( QuerySolr . RESULTS ) . get ( 0 ) ) ) ) )
assertEquals ( 0 , rows . size ( ) )
assertNotNull ( componentDetails )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( StringUtils . EMPTY , responseFlowFile . getContent ( ) )
assertTrue ( runner . setProperty ( CompressContent . UPDATE_FILENAME , "true" ) . isValid ( ) )
assertTrue ( runner . setProperty ( CompressContent . UPDATE_FILENAME , "true" ) . isValid ( ) )
assertTrue ( runner . setProperty ( CompressContent . UPDATE_FILENAME , "true" ) . isValid ( ) )
assertTrue ( runner . setProperty ( CompressContent . UPDATE_FILENAME , "true" ) . isValid ( ) )
assertEquals ( TEST_FILE_COUNT - MAX_FLOW_FILES_PER_BATCH , runner . getQueueSize ( ) . getObjectCount ( ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( out . getAttribute ( "xpath.result1" ) . contains ( "Hello" ) )
assertTrue ( outXml . contains ( "<name xmlns:ns=\"http://namespace/1\">apple</name>" ) )
assertEquals ( ProvenanceEventType . RECEIVE , runner . getProvenanceEvents ( ) . get ( 0 ) . getEventType ( ) )
assertFalse ( proc . isClosed )
assertFalse ( proc . isClosed )
assertEquals ( 1 , proc . fileContents . size ( ) )
assertEquals ( 1 , proc . fileContents . size ( ) )
assertEquals ( "one" , parsed . get ( "first.second.third[0]" ) , "Separator not applied." )
assertEquals ( "one" , parsed . get ( "first.second.third.0" ) , "Separator not applied." )
assertEquals ( "http://localhost/value1" , parsed . get ( "first.second.third[0]" ) , "Separator not applied." )
assertEquals ( currentProtocol , sslSession . getProtocol ( ) )
assertEquals ( 2 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 3 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 0L , out . getSize ( ) )
assertEquals ( 0L , out . getSize ( ) )
assertEquals ( testFile . length ( ) - 20 , out . getSize ( ) )
assertNull ( updatedState . get ( MonitorActivity . STATE_KEY_LATEST_SUCCESS_TRANSFER ) )
assertNotNull ( results . get ( 0 ) . getAttribute ( SyslogAttributes . SYSLOG_BODY . key ( ) ) )
assertNotNull ( results . get ( 0 ) . getAttribute ( SyslogAttributes . SYSLOG_BODY . key ( ) ) )
assertNull ( results . get ( 0 ) . getAttribute ( SyslogAttributes . SYSLOG_BODY . key ( ) ) )
assertEquals ( 1 , processor . getMessages ( ) . size ( ) , "Expected an attempt to send a single message" )
assertEquals ( "Hello world!!" , new String ( content ) )
assertEquals ( "Hello world!!" , new String ( content ) )
assertFalse ( rs . next ( ) )
assertEquals ( expected , outputString )
assertFalse ( mff . getAttribute ( "reason" ) . contains ( "${uuid}" ) , "Expression language not evaluated!" )
assertFalse ( validationResult . isValid ( ) )
assertTrue ( testSubject . supportsUpsert ( ) , testSubject . getClass ( ) . getSimpleName ( ) + " should support upsert" )
assertTrue ( db . supportsUpsert ( ) , db . getClass ( ) . getSimpleName ( ) + " should support upsert" )
assertEquals ( 0 , subDirectories . size ( ) )
assertEquals ( expectedDirectory , file . getAbsolutePath ( ) )
assertEquals ( expectedDirectory , file . getAbsolutePath ( ) )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( expectedPath , result )
assertEquals ( 3 , frames . size ( ) )
assertEquals ( expected , new String ( result , StandardCharsets . UTF_8 ) )
assertEquals ( expected , new String ( result , StandardCharsets . UTF_8 ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( SALT_LENGTH , skipped )
assertEquals ( 1 , callCounter . get ( ) )
assertTrue ( e . getLocalizedMessage ( ) . equals ( "JOLT Chainr expects a JSON array of objects - Malformed spec." ) )
assertNotNull ( connection )
assertTrue ( e . getMessage ( ) . contains ( "contained an external entity. To prevent XXE vulnerabilities, NiFi has external entity processing disabled." ) )
assertTrue ( val . isValid ( ) )
assertEquals ( accessTokenValue , actual )
assertEquals ( expected , requestCaptor . getValue ( ) . header ( "Authorization" ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertEquals ( RecordFieldType . DOUBLE . getDataType ( ) , inference . toDataType ( ) )
assertEquals ( firstId , secondId )
assertEquals ( expectedMessage , actualMessage . toString ( ) )
assertThat ( xmlResult , CompareMatcher . isIdenticalTo ( out . toString ( ) ) . ignoreWhitespace ( ) )
assertThat ( xmlResult , CompareMatcher . isIdenticalTo ( out . toString ( ) ) . ignoreWhitespace ( ) )
assertThat ( xmlResult , CompareMatcher . isIdenticalTo ( out . toString ( ) ) . ignoreWhitespace ( ) )
assertThat ( xmlResult , CompareMatcher . isIdenticalTo ( out . toString ( ) ) . ignoreWhitespace ( ) )
assertThat ( xmlResult , CompareMatcher . isIdenticalTo ( out . toString ( ) ) . ignoreWhitespace ( ) )
assertEquals ( xmlResult , out . toString ( ) . trim ( ) )
assertEquals ( protocol , sslContext . getProtocol ( ) )
assertEquals ( LOCALHOST_URI , uri )
assertTrue ( e . getMessage ( ) . contains ( "org.apache.nifi.processor.exception.ProcessException" ) )
assertTrue ( e . toString ( ) . contains ( "'server-url-path' is invalid because Must starts with" ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( CUSTOM_AUTH , testSubject . getAuthHeaderValue ( ) )
assertEquals ( eventXmls . size ( ) , flowFilesForRelationship . size ( ) )
assertEquals ( "ERROR_INSUFFICIENT_BUFFER(" + WinError . ERROR_INSUFFICIENT_BUFFER + ")" , errorLookup . getLastError ( ) )
assertEquals ( Integer . toString ( Integer . MAX_VALUE ) , errorLookup . getLastError ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertNull ( existingKey )
assertNull ( entity )
assertNull ( entity )
assertEquals ( "" , event . getField ( EventFieldName . COMMENT ) . getValue ( ) )
assertEquals ( "Bucket ID bucket-id-A was not found." , e . getMessage ( ) )
assertNull ( retrievedPolicy )
assertNull ( retrievedPolicy )
assertNull ( updatedUser1 )
assertNull ( updatedGroup1 )
assertEquals ( 5 , ldapUserGroupProvider . getGroups ( ) . size ( ) )
assertEquals ( "Unable to read the data model version for the flow content." , e . getMessage ( ) )
assertNull ( entity )
assertNull ( keyStoreProvider )
assertEquals ( 404 , response . getStatus ( ) )
assertNotNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertEquals ( Duration . ofMinutes ( 1 ) , StandardStatelessEngine . parseDuration ( "999 ms" ) )
assertTrue ( getNifiClient ( ) . getProcessorClient ( ) . getProcessor ( generate . getId ( ) ) . getComponent ( ) . getExtensionMissing ( ) )
assertEquals ( "2 / 2" , clusterSummary . getClusterSummary ( ) . getConnectedNodes ( ) )
assertFalse ( component . getSupportsSensitiveDynamicProperties ( ) )
assertFalse ( component . getSupportsSensitiveDynamicProperties ( ) )
assertEquals ( 0 , candidates . size ( ) )
assertEquals ( expected , resultOut )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( 8 , zeroCount )
assertEquals ( 4096 , zeroCount )
assertEquals ( 1024 , zeroCount )
assertEquals ( 0 , zeroCount )
assertEquals ( 0 , zeroCount )
assertTrue ( tlsToolkitMain . getDescription ( TlsToolkitMainTest . class ) . startsWith ( TlsToolkitMain . UNABLE_TO_GET_DESCRIPTION ) )
assertArrayEquals ( new String [ ] { "-h" } , StoringMain . args )
assertNotEquals ( 0 , nifiPropertiesTlsClientConfigWriter . getIncrementingPropertyMap ( ) . size ( ) )
assertEquals ( ExitCode . ERROR_TOKEN_ARG_EMPTY , e . getExitCode ( ) )
assertEquals ( testCaHostname , tlsCertificateAuthorityClientCommandLine . createClientConfig ( ) . getCaHostname ( ) )
assertEquals ( testPort , tlsCertificateAuthorityClientCommandLine . createClientConfig ( ) . getPort ( ) )
assertEquals ( testCertificateFile , tlsCertificateAuthorityClientCommandLine . getCertificateDirectory ( ) )
assertTrue ( e . getMessage ( ) . startsWith ( TlsCertificateSigningRequestPerformer . RECEIVED_RESPONSE_CODE + statusCode ) )
assertEquals ( testCaHostname , tlsCertificateAuthorityServiceCommandLine . createConfig ( ) . getCaHostname ( ) )
assertEquals ( ExitCode . HELP , e . getExitCode ( ) )
assertEquals ( ExitCode . ERROR_PARSING_COMMAND_LINE , e . getExitCode ( ) )
assertEquals ( testSigningAlgorithm , tlsToolkitStandaloneCommandLine . createConfig ( ) . getSigningAlgorithm ( ) )
assertEquals ( ExitCode . ERROR_PARSING_INT_ARG , e . getExitCode ( ) )
assertEquals ( TlsToolkitStandaloneTest . FAKE_VALUE , getProperties ( ) . get ( TlsToolkitStandaloneTest . NIFI_FAKE_PROPERTY ) )
assertEquals ( ExitCode . ERROR_READING_NIFI_PROPERTIES , e . getExitCode ( ) )
assertEquals ( testPrefix , config . getDnPrefix ( ) )
assertEquals ( testSuffix , config . getDnSuffix ( ) )
assertEquals ( root . toAbsolutePath ( ) . getRoot ( ) . toString ( ) , calculateDefaultOutputDirectory )
assertEquals ( FAKE_VALUE , nifiProperties . get ( NIFI_FAKE_PROPERTY ) )
assertEquals ( testKeyStore , nifiProperties . getProperty ( NiFiProperties . SECURITY_KEYSTORE_PASSWD ) )
assertEquals ( testTrustStore , nifiProperties . getProperty ( NiFiProperties . SECURITY_TRUSTSTORE_PASSWD ) )
assertEquals ( ExitCode . HELP , e . getExitCode ( ) )
assertEquals ( 43 , generated . length ( ) )
assertEquals ( "my_silly_filename.pem" , result )
assertEquals ( "my_silly_filename.pem" , result )
assertEquals ( "my_illyfilename.pem" , result )
assertEquals ( "my_sillyfilename.pem" , result )
assertEquals ( "my-silly-filename.pem" , result )
assertEquals ( "my_silly_filename.pem" , result )
assertEquals ( "CN=testuser_OU=NiFi_Organisation" , escapedClientDn )
assertArrayEquals ( keys . get ( file . getName ( ) . split ( "\\." ) [ 0 ] ) . getEncoded ( ) , key . getPrivateKeyInfo ( ) . getEncoded ( ) )
