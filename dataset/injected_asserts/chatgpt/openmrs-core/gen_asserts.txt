assertEquals ( expected , actual )
assertEquals ( expected , actual . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "No known allergies" , allergies . getAllergyStatus ( ) )
assertEquals ( "my ns.my path" , formNamespaceAndPathProperty . get ( impl ) )
assertEquals ( ns , impl . getFormFieldNamespace ( ) )
Assert . assertNull ( impl . getFormFieldPath ( ) )
assertEquals ( path , impl . getFormFieldPath ( ) )
AssertPlaceHolder = "assertFalse(session.load(oneThing, id) == session.load(something, id));"
Assert . assertEquals ( false , newMember . isActive ( ) )
Assert . assertEquals ( false , newMember . isActive ( ) )
Assert . assertEquals ( ids , cohort . getMembers ( ) )
assertEquals ( cohortSize , c . getMemberships ( ) . size ( ) )
assertEquals ( "frenchName" , concept . getName ( ) )
assertEquals ( "frenchName" , concept . getName ( ) )
assertEquals ( 1 , term . getConceptReferenceTermMaps ( ) . size ( ) )
assertThat ( compatibleNames , contains ( name_en_UK ) )
assertNull ( drugOrder . getAutoExpireDate ( ) )
assertNull ( drugOrder . getAutoExpireDate ( ) )
assertEquals ( drug1 , map . getDrug ( ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertThat ( autoExpireDate , is ( notNullValue ( ) ) )
assertEquals ( "2014-07-08 10:00:00" , addToDate ( startDate , duration , onceAWeek ) )
assertEquals ( "Frequency cannot be null" , exception . getMessage ( ) )
assertEquals ( daysCode , concept . getCode ( ) )
Assert . assertEquals ( false , enc . getObs ( ) . isVoided ( ) )
assertEquals ( encounter , obs . getEncounter ( ) )
assertEquals ( 1 , encounter . getOrders ( ) . size ( ) )
assertNotNull ( encounter . getEncounter ( ) )
assertNotNull ( encounter . contains ( encounterRole , provider ) )
Assert . assertEquals ( false , hasDiagnosis ( diagnosis ) )
assertEquals ( 123 , encounterType . getEncounterTypeId ( ) )
assertEquals ( 123 , form . getFormId ( ) )
assertNotNull ( obs )
Assert . assertEquals ( false , obs . getValueAsBoolean ( ) )
assert passes
Assert . assertEquals ( true , method . isAnnotationPresent ( Test . class ) )
Assert . assertTrue ( currentClass . getName ( ) . endsWith ( "Test" ) )
assertNotEquals ( dcOrder , previousOrder )
assertNotNull ( orderGroup . getPreviousOrderGroup ( ) )
orderGroup . assertNull ( getPreviousOrderGroup ( ) )
Assert . assertEquals ( true , order . isActive ( ) )
assertThat ( ot . contains ( cc ) ) . isTrue ( )
Assert . assertEquals ( false , active )
assertNotNull ( patientState . getEndDate ( ) )
assertNull ( patientState . getEndDate ( ) )
Assert . assertEquals ( expectedResult , result )
assertEquals ( 2 , p . getIdentifiers ( ) . size ( ) )
pa . getVoided ( )
assertEquals ( "family name" , getFamilyName ( ) )
Assert . assertEquals ( null , pn . getFamilyName2 ( ) )
Assert . assertNull ( pn . getFamilyNamePrefix ( ) )
pn . setFamilyNameSuffix ( null )
Assert . assertEquals ( "middle name" , getMiddleName ( ) )
assertEquals ( "Bob Jones" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( "Taylor Bob Wilson Mark Jones jr. 3" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( "Taylor Bob Wilson Mark Jones jr. 3" , pn . getFullName ( Locale . getDefault ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 2 , person . getAge ( onDate . getTime ( ) ) )
assertEquals ( 10 , person . getAge ( ) )
assertEquals ( 5 , person . getAge ( ) )
assertEquals ( true , actualPersonAddress . getVoided ( ) )
assertNull ( getPersonAddress ( ) )
assertNull ( getPersonName ( ) )
Assert . assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ) . parse ( "2012-01-01" ) , person . getBirthdate ( ) )
assertEquals ( "value1" , person . getAttribute ( "name1" ) )
assertNull ( getAttribute ( pat ) )
assertEquals ( "givenName middleName familyName" , provider . getPersonName ( ) . getFullName ( ) )
assertEquals ( createDateTime ( "2014-07-01 10:00:00" ) , autoExpireDate )
assertEquals ( createDateTime ( "2014-07-31 00:00:00" ) , drugOrder . getAutoExpireDate ( ) )
assertEquals ( null , autoExpireDate )
assertNull ( autoExpireDate )
assertThat ( fetchedLocations , contains ( location ) )
assertEquals ( null , afterNull )
assertEquals ( "caret^caret" , afterInvalid . getImplementationId ( ) )
assertEquals ( invalidId2 , afterInvalid2 )
assertEquals ( validId , adminService . getImplementationId ( ) )
assertEquals ( "JUNIT-TEST" , gp . getPropertyValue ( ) )
assertEquals ( "expectedValue" , propertyValue )
assertNull ( getGlobalPropertyByUuid ( uuid ) )
assertEquals ( "new prop value" , adminService . getGlobalPropertyObject ( "new prop" ) . getPropertyValue ( ) )
assertEquals ( "100" , adminService . getGlobalProperty ( "detectHiddenSkill" ) )
assertEquals ( modifiedCohortDescription , service . getCohort ( ) . getDescription ( ) )
assertEquals ( "Example Cohort" , cohortToGet . getName ( ) )
assertEquals ( concept . getConceptId ( ) , "<expected value>" )
Assert . assertEquals ( null , concept )
assertNotNull ( drug )
Assert . assertEquals ( "Expected concept datatype to not be a fuzzy match on name" , null , result )
assertEquals ( currentWeight , nextWeight )
Assert . assertNull ( drug )
assertEquals ( 3 , getConceptService ( ) . getAllConceptAttributeTypes ( ) . size ( ) )
Assert . assertEquals ( false , voided )
Assert . assertEquals ( true , sourceEncounterAfterTransfer . getVoided ( ) )
assertNotNull ( ff )
assertEquals ( 1 , fieldType . getFieldTypeId ( ) )
assertEquals ( null , getFormService ( ) . getFormField ( "nonexistentForm" ) )
assertEquals ( uuid , field . getUuid ( ) )
assertNull ( getFormService ( ) . getFieldByUuid ( "uuid" ) )
assertNull ( "<AssertPlaceHolder>" , getFormService ( ) . getFieldTypeByUuid ( "uuid" ) )
formId = form . getFormId ( )
assertEquals ( null , getFormService ( ) . getFormByUuid ( "uuid" ) )
assertEquals ( null , getFormService ( ) . getFormFieldByUuid ( "uuid" ) )
assertEquals ( 2 , getFormService ( ) . getFormsContainingConcept ( concept ) . size ( ) )
assertEquals ( Collections . emptyList ( ) , getLocationService ( ) . getLocations ( "nameFragment" ) )
Assert . assertEquals ( true , location . getRetired ( ) )
Assert . assertEquals ( 7 , dispense . getPatient ( ) )
assertEquals ( true , obs . getVoided ( ) )
assertEquals ( 1 , oSaved . getObsId ( ) )
Assert . assertEquals ( false , obs . getVoided ( ) )
Assert . assertEquals ( true , obs . getVoided ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( orderFrequencyId , getOrderFrequency ( orderFrequencyId ) . getId ( ) )
assertEquals ( "Expected exception message" , s , exception . getMessage ( ) )
assertEquals ( "Expected exception message" , "Testing" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "6f0c9a92-6f24-11e3-af88-005056821db0" , cs . getUuid ( ) )
assertEquals ( "Search phrase cannot be null" , exception . getMessage ( ) )
Assert . assertEquals ( "Expected order number is not equal to actual order number" , expectedOrderNumber , order . getOrderNumber ( ) )
assertThat ( order . getAutoExpireDate ( ) , is ( dateformat . parse ( "18/08/2014" ) ) )
assertEquals ( expectedOrderType , getOrderType ( ) )
assertEquals ( null , orderType )
assertEquals ( "131168f4-15f5-102d-96e4-000c29c2a5d7" , orderType . getUuid ( ) )
assertNull ( getOrderTypeByUuid ( uuid ) )
assertEquals ( "Drug order" , orderType . getName ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( 1 , order . getOrderTypeId ( ) )
assertEquals ( "Order type is required" , exception . getMessage ( ) )
assertEquals ( revisionOrder , getRevisionOrder ( order ) )
assertEquals ( null , ? ? ? getRevisionOrder ( order ) )
Assert . assertNull ( getNonCodedDrugConcept ( ) )
assertEquals ( "Expected exception message does not match" , s , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Bacteriology" , orderGroupAttributeType . getName ( ) )
assertNull ( getOrderGroupAttributeTypeByUuid ( "nonExistingUuid" ) )
assertEquals ( "namespace" , order . getFormNamespaceAndPath ( ) . split ( ":" ) [ 0 ] )
assertEquals ( null , getOrderAttributeTypeById ( 1 ) )
assertEquals ( orderAttributeTypeId , getOrderAttributeTypeById ( orderAttributeTypeId ) . getId ( ) )
assertNull ( getOrderAttributeByUuid ( "nonExistingUuid" ) )
Assert . assertEquals ( 0 , numberOfOrderSetMembers )
assertEquals ( "Expected order set attribute with given UUID" , expectedOrderSetAttribute , actualOrderSetAttribute )
Assert . assertNull ( service . getOrderSetAttributeByUuid ( uuid ) )
assertEquals ( allergy . getAllergen ( ) , getAllergen ( ) )
assertEquals ( 6 , notPreferred . getPersonId ( ) )
Assert . assertNull ( patient )
Assert . assertNull ( identifierType )
assertNull ( voidedPatient )
assertEquals ( expectedPerson , person )
assertEquals ( null , deletedRelationship )
assertEquals ( null , personName )
Assert . assertNull ( p )
Assert . assertNull ( pws . getProgramByName ( "A name" ) )
assertEquals ( "Program workflow concept is null" , exception . getMessage ( ) )
assertEquals ( "Program workflow state concept is null" , exception . getMessage ( ) )
assertEquals ( "Program workflow state terminal is null" , exception . getMessage ( ) )
assertNotNull ( exception . getMessage ( ) )
assertNotNull ( provider )
assertEquals ( expectedCount , getCountOfProviders ( query ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "Tester13" , u . getPassword ( ) )
assertEquals ( ADMIN_USERNAME , user . getUsername ( ) )
Assert . assertEquals ( "d979d066-15e6-467c-9d4b-cb575ef97f0f" , privilege )
assertNull ( getPrivilegeByUuid ( uuid ) )
assertEquals ( role , userService . getRoleByUuid ( uuid ) )
assertNull ( result )
assertEquals ( null , userService . getRole ( "Some Role To Delete" ) )
assertEquals ( null , userService . getUser ( 502 ) )
assertEquals ( null , userService . getUser ( 502 ) )
assertNull ( setUserProperty ( null , "key" , "value" ) )
Assert . assertEquals ( p , savedPrivilege )
assertEquals ( "Old password is not correct" , exception . getMessage ( ) )
assertEquals ( "User does not exist" , exception . getMessage ( ) )
assertEquals ( "hank.williams@gmail.com" , user . getUsernameOrEmail ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
Assert . assertEquals ( null , getUserByActivationKey ( key ) )
assertEquals ( "Invalid activation key exception message is incorrect" , "Invalid activation key" , exception . getMessage ( ) )
assertEquals ( "Invalid activation key exception message" , "Invalid activation key" , exception . getMessage ( ) )
assertEquals ( null , getVisitType ( ) )
assertEquals ( expectedVisit , visit )
assertNull ( getVisitAttributeTypeByUuid ( uuid ) )
Assert . assertEquals ( EncounterVisitHandler . class , registeredComponent . getClass ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertEquals ( "User already exists" , exception . getMessage ( ) )
assertEquals ( true , getConceptService ( ) . isConceptMapTypeInUse ( ) )
assertEquals ( "admin" , u . getUsername ( ) )
assertEquals ( "1-8" , u . getSystemId ( ) )
assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
assertEquals ( 1 , patientCount )
Assert . assertEquals ( 2 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
Assert . assertEquals ( 0 , patientCount )
Assert . assertEquals ( 1 , patientCount )
Assert . assertEquals ( 2 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( 0 , patientCount )
assertEquals ( null , personName )
Assert . assertEquals ( true , searchable )
assertEquals ( outcomesConcept , savedProgram . getOutcomesConcept ( ) )
assertEquals ( userJoe , u2 )
assertNotNull ( getNextVisit ( null , visitTypes , cal . getTime ( ) ) )
assertEquals ( beforeDate , afterDate )
Assert . assertEquals ( dateChangedBefore , weight . getDateChanged ( ) )
assertSame ( u . getDateCreated ( ) , dateCreated . clone ( ) )
assertEquals ( dateWithoutMillisecond , person . getBirthdate ( ) )
assertEquals ( dateWithoutMillisecond . getTime ( ) , personService . getPerson ( 1 ) . getBirthdate ( ) . getTime ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( "4e663d66-6b78-11e0-93c3-18a905e044dc" , diagnosis . getUuid ( ) )
assertEquals ( "1" , diagnosis . getId ( ) )
Assert . assertEquals ( 7 , dispense . getPatient ( ) )
assertEquals ( "9cf1bce0-d18e-11ea-87d0-0242ac130003" , orderGroupAttributeType . getUuid ( ) )
orderGroupAttributeType . assertEquals ( expectedOrderGroupAttributeType )
assertEquals ( 2 , duplicatePatients . size ( ) )
Assert . assertEquals ( false , p . getVoided ( ) )
Assert . assertEquals ( true , providers . get ( providers . size ( ) - 1 ) . getRetired ( ) )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
AssertPlaceHolder = "Assert.assertTrue(isShortName(name));"
Assert . assertEquals ( true , providers . get ( providers . size ( ) - 1 ) . getRetired ( ) )
Assert . assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( null , retireable . getRetiredBy ( ) )
Assert . assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( false , retireable . getRetired ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( false , voidable . getVoided ( ) )
assertEquals ( null , handler . getVoidedBy ( ) )
assertEquals ( null , newTag . getConceptNameTagId ( ) )
assertEquals ( 34 , newTag . getConceptNameTagId ( ) )
assertEquals ( "the location name" , loc . getName ( ) . trim ( ) )
assertEquals ( "the location desc" , loc . getDescription ( ) . trim ( ) )
assertEquals ( "" , obj . getName ( ) )
obj . getSomeProperty ( ) , is ( nullValue ( ) )
assertEquals ( "" , obj . getName ( ) . trim ( ) )
Assert . assertEquals ( false , person . getPersonVoided ( ) )
assertEquals ( false , person . getPersonVoided ( ) )
Assert . assertEquals ( false , person . getPersonVoided ( ) )
assertEquals ( null , handler . getPersonVoidedBy ( ) )
assertNotNull ( drugs )
assertEquals ( true , drug . getRetired ( ) )
assertEquals ( false , drug . getRetired ( ) )
locales . contains ( localeToSearch )
assertEquals ( condition . getEncounter ( ) , savedCondition . getEncounter ( ) )
assertEquals ( ns + ":" + path , savedCondition . getFormField ( ) )
assertNotNull ( condition )
assertNull ( getConditionByUuid ( uuid ) )
assertNotNull ( diagnosis )
assertEquals ( id , diagnosisAttributeType . getId ( ) )
assertEquals ( null , getDiagnosisAttributeTypeById ( id ) )
assertEquals ( uuid , diagnosisAttributeType . getUuid ( ) )
assertNull ( getDiagnosisAttributeTypeByUuid ( uuid ) )
assertNull ( getDiagnosisAttributeByUuid ( uuid ) )
assertNotNull ( globalLocaleList . getAllowedLocales ( ) )
Assert . assertEquals ( expectedUuid , location . getUuid ( ) )
Assert . assertEquals ( date , new SimpleDateFormat ( "yyyy-MM-dd" ) . parse ( "2011-04-25" ) )
assertEquals ( "generated uuid should not be null" , true , hl7 . getUuid ( ) != null )
assertEquals ( "Expected timezone offset" , expectedTimeZoneOffset , getTimeZoneOffset ( fullString , givenDate ) )
assertEquals ( expectedConcept , getConcept ( hl7ConceptId , codingSystem , uid ) )
assertEquals ( expectedConcept , actualConcept )
assertThrows ( ApplicationException . class , ( ) -> router . processMessage ( hl7message ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( true , actual )
assertEquals ( "ben" , changeSet . getAuthor ( ) )
assertEquals ( false , actual )
assertEquals ( false , actual )
assertEquals ( false , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
Assert . assertEquals ( firstResult , parentResult . earliest ( ) )
Assert . assertEquals ( firstResult , parentResult . earliest ( ) )
Assert . assertEquals ( result , latest ( ) )
assertEquals ( null , last . getResultDate ( ) )
Assert . assertEquals ( null , last . getResultDate ( ) )
assertEquals ( valueAsString , valueAsPM . getMessage ( ) )
assertEquals ( null , module . getExtensionNames ( ) )
assertNotNull ( moduleClassLoader )
Assert . assertEquals ( value , test2 . contains ( value ) )
assertNotNull ( exception )
assertThat ( module , equalTo ( expectedModule ) )
Assert . assertEquals ( value , module . getAwareOfModules ( ) )
assertNotNull ( module )
Assert . assertEquals ( value , equalTo ( value ) )
Assert . assertEquals ( value , equalTo ( value ) )
assertNotNull ( module )
Assert . assertEquals ( value , module . getPrivilege ( ) )
assertNotNull ( module )
assertThat ( module . getGlobalProperties ( ) . isEmpty ( ) ) . isTrue ( )
Assert . assertEquals ( "72" , module . getGlobalProperty ( "report.deleteReportsAgeInHours" ) )
assertNull ( module . getMappingFiles ( ) )
assertEquals ( "Invalid tag found in conditionalResources" , exception . getMessage ( ) )
assertEquals ( "Resource path cannot be blank" , exception . getMessage ( ) )
assertThat ( module . getAdvice ( ) , equalTo ( "will be ignored" ) )
Assert . assertEquals ( module . getAdvice ( ) . size ( ) , 0 )
Assert . assertEquals ( null , module . getAdvice ( ) )
assertEquals ( "1.0" , testModule . getRequiredModuleVersion ( "mod1" ) )
assertThat ( updateRdf , containsString ( "update.rdf" ) )
assertNotNull ( updateRdf )
assertNotNull ( updateRdf )
Assert . assertEquals ( "/css/ui.css" , getPathForResource ( module , path ) )
Assert . assertEquals ( null , getModuleForPath ( path ) )
Assert . assertEquals ( null , nullURL )
Assert . assertEquals ( textMaxLength , lastAlert . getMessage ( ) . length ( ) )
Assert . assertEquals ( expectedText , lastAlert . getText ( ) )
assertEquals ( "recipient1@example.com,recipient2@example.com" , testMessage . getRecipients ( ) )
assertEquals ( oldRecipients + ", " + newRecipient , testMessage . getRecipients ( ) )
assertEquals ( alert , hibernateAlertDAO . getAlert ( ) )
Assert . assertEquals ( 2 , savedAlert . getAlertId ( ) )
assertEquals ( null , editor . getValue ( ) )
assertEquals ( null , editor . getValue ( ) )
assertEquals ( getExistingObject ( ) . getUuid ( ) , editor . getValue ( ) )
assertEquals ( "" , mapType . getConceptMapTypeId ( ) . toString ( ) )
assertEquals ( "2011-10-27 00:00" , ed . getValue ( ) . toString ( ) )
assertEquals ( "2011-10-27 17:59" , ed . getValue ( ) . toString ( ) )
assertEquals ( "27/10/2011" , ed . getAsText ( ) )
assertEquals ( "27/10/2011 17:59" , ed . getAsText ( ) )
assertEquals ( "Some Privilege" , editor . getValue ( ) )
assertEquals ( "concept.9" , editor . getValue ( ) )
assertEquals ( "concept.0a9afe04-088b-44ca-9291-0a8c3b5c96fa" , editor . getValue ( ) )
assertEquals ( "1" , editor . getValue ( ) )
assertEquals ( "Provider" , editor . getValue ( ) )
assertEquals ( true , o instanceof Task )
assertEquals ( 1 , latch . getCount ( ) )
Assert . assertEquals ( "1365a6da-6493-4e9b-b950-5af1b392aaa3" , td . getUuid ( ) )
Assert . assertNull ( td )
assertEquals ( className , taskDefinition . getTaskClass ( ) )
assertThat ( description . toString ( ) , is ( "expected description" ) )
assertThat ( matcher . matches ( description ) , is ( true ) )
assertThat ( description . toString ( ) , is ( "expected description" ) )
assertEquals ( true , r1 . contains ( d ) )
assertEquals ( - 1 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( - 1 , actualValue )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "" , format ( null , null , null ) )
assertNotNull ( dateFormat . format ( date ) )
assertEquals ( "" , format ( null , null , null ) )
assertEquals ( "Expected exception message" , "APIException: No handler found for Validator and Integer" , exception . getMessage ( ) )
assertEquals ( "The exception message is incorrect" , "Malformed URL" , exception . getMessage ( ) )
assert localesInOrder . contains ( Locale . ENGLISH )
assertThat ( callerClass , equalTo ( LogicCriteria . class ) )
assertEquals ( null , url2file ( null ) )
assertEquals ( null , shortenedStackTrace ( null ) )
Assert . assertFalse ( isInCriticalNumericRange ( 5.0f , concept ) )
assertTrue ( isInCriticalNumericRange ( 5.64f , concept ) )
Assert . assertTrue ( isInAbsoluteNumericRange ( 5.0f , concept ) )
Assert . assertEquals ( false , isInAbsoluteNumericRange ( 5.0f , concept ) )
assertNull ( concept . getHiAbsolute ( ) )
AssertPlaceHolder : ` assertTrue ( concept . getLowAbsolute ( ) == null ) ; `
Assert . assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
Assert . assertEquals ( true , isInAbsoluteNumericRange ( 4.34f , concept ) )
assertEquals ( - 1 , actualValue )
assertEquals ( 1 , actualValue )
assertEquals ( 0 , actualValue )
assertEquals ( 0 , actualValue )
Assert . assertEquals ( 1 , fields . size ( ) )
assertEquals ( errorMsgSubString , exception . getMessage ( ) )
assertEquals ( errorMsgSubString , exception . getMessage ( ) )
assertEquals ( "Expected error message" , expectedErrorMessage , errors . getFieldError ( "text" ) . getDefaultMessage ( ) )
assertThatFieldTextHasError ( )
assertNotNull ( exception . getMessage ( ) )
Assert . assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors . hasFieldErrors ( "code" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) . withField ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) . withField ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertNotNull ( exception . getMessage ( ) )
assertEquals ( "Duplicate concept name exception should be thrown" , "Duplicate concept name exception" , exception . getMessage ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , hasFieldErrors ( ) )
assertNotNull ( exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "diagnosis" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "drug" ) ) . isTrue ( )
assertThat ( errors . getFieldErrors ( "doseUnits" ) ) . isNotEmpty ( )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors())"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "encounterDateTime" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "encounterType" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" , "Field length must be less than or equal to 20" ) )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertThat ( errors . hasFieldErrors ( "retired" ) ) . isTrue ( )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , not ( hasFieldErrors ( ) ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "name" ) ) . isTrue ( )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors . hasFieldErrors ( "orderType" ) ) . isFalse ( )
assertEquals ( false , pi . isUnique ( ) )
assertThat ( errors . getFieldError ( "patient" ) ) . isNotNull ( )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
Assert . assertEquals ( 1 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors(" personAddress ")).isTrue();"
AssertPlaceHolder = "assertThat(errors, not(hasFieldErrors()));"
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "name" , "Name already in use" ) )
AssertPlaceHolder . assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.hasFieldErrors()).isFalse();"
assertThat ( errors . hasGlobalErrors ( ) ) . isTrue ( )
assertEquals ( 1 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "error.code" ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "errorCode" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "prefix" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "middleName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyNamePrefix" , "error.code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "TOO_LONG" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName2" , "code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyNameSuffix" , "code" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "invalid" ) ) . isTrue ( )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "middleName" , "invalid" ) ) . isTrue ( )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( "familyName" , "<expectedErrorCode>" ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
AssertPlaceHolder = "assertThat(errors.getFieldErrors()).isNotEmpty();"
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getErrorCount ( ) )
AssertPlaceHolder = "assertThat(errors, not(hasFieldErrors()));"
assertThat ( errors , not ( hasFieldErrors ( ) ) )
Assert . assertEquals ( 1 , errors . getErrorCount ( ) )
assertEquals ( 0 , errors . getFieldErrors ( ) . size ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "voidReason" , "Field length must be less than or equal to 255 characters" ) )
assertThat ( errors , hasFieldErrors ( ) )
Assert . assertEquals ( 1 , errors . getErrorCount ( ) )
Assert . assertEquals ( 1 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "email" ) )
assertEquals ( "Invalid drug name" , exception . getMessage ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder . assertEquals ( 0 , errors . getErrorCount ( ) )
Assert . assertEquals ( 0 , errors . getErrorCount ( ) )
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) )
AssertPlaceHolder = "assertThat(errors, hasFieldErrors());"
assertThat ( errors , hasFieldErrors ( ) )
assertThat ( errors , hasFieldErrors ( ) . withFieldError ( "voidReason" , "Field length must be less than or equal to 255 characters" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Expected exception message" , "Expected message" , exception . getMessage ( ) )
assertThat ( f . exists ( ) ) . isTrue ( )
assertEquals ( "" , contextPath )
assertEquals ( "" , contextPath )
assertEquals ( "Value" , WebConstants . WEBAPP_NAME )
assertEquals ( null , normalizeLocale ( "  en_US" ) )
assertEquals ( null , normalizeLocale ( localeString ) )
assertNotNull ( normalizeLocale ( localeString ) )
assertEquals ( null , normalizeLocale ( "   " ) )
assertEquals ( "" , localeString )
assertEquals ( null , normalizeLocale ( localeString ) )
assertEquals ( 0 , cookies . length )
AssertPlaceHolder = "assertFalse(isSuperUser(user));"
