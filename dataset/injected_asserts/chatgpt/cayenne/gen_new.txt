assertEquals ( "abc" , task . getUserName ( ) )
assertEquals ( "jdbc:///" , task . getUrl ( ) )
assertEquals ( "DbImporterTask" , DbImporterTask . class , getCdbImport ( "build.xml" ) . getClass ( ) )
assertThat ( hasNoDuplicates ) . isTrue ( )
assertEquals ( fullyQualifiedType , formatJavaType ( baseType ) )
assertEquals ( "LAST_NAME" , capitalizedAsConstant ( "lastName" ) )
assertEquals ( expected , capitalizedAsConstant ( "varA" ) )
assertEquals ( expected , capitalizedAsConstant ( "abcA" ) )
assertEquals ( expected , capitalizedAsConstant ( "abCdef" ) )
assertEquals ( "../testTemplate.vm" , cgenConfiguration . getTemplate ( ) . getTemplatePath ( ) )
assertEquals ( tempFolder . getRoot ( ) . getParent ( ) , cgenConfiguration . getRootPath ( ) )
assertEquals ( 2 , logs . size ( ) )
assertNotNull ( f )
assertEquals ( expectedOutput1 , output1 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "expectedValue" , converter . fromBytes ( bytes ) )
assertNull ( e . encrypt ( null , null ) )
assertEquals ( 36.6d , originalValue , 0.001 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "0.0" , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( - 36.6f , originalValue , 0.001 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "0.0" , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( "expectedValue" , focalMethod ( bytes ) )
assertEquals ( "expectedValue" , focalMethod ( bytes ) )
assertNotNull ( date ( "2022-01-01 00:00:00" ) )
assertArrayEquals ( new byte [ ] { 1 , 3 , 5 } , output )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 1 , mergerTokens . size ( ) )
assertEquals ( 0 , db . size ( ) )
assertNotNull ( dbEntity . getAttribute ( "NEWCOL1" ) )
assertNotNull ( column )
assertArrayEquals ( expected . toArray ( ) , actual . toArray ( ) )
assertNotNull ( column )
assertNotNull ( dbEntity . getAttribute ( "NEWCOL2" ) )
assertThat ( entity . getCallbackMethods ( ) ) . contains ( name )
assertEquals ( "expectedValue" , stem ( "dbEntityName" ) )
manyToManyEntity . assertMatches ( DataMapMerger . build ( tokenFactory ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertNotNull ( service )
assertEquals ( "MockImplementation1_DepOn2Provider" , service . getClass ( ) . getSimpleName ( ) )
assertEquals ( "altered_" , service . getName ( ) . substring ( 0 , 8 ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "abc" , service . getName ( ) )
assertEquals ( "E1-ID-5" , getStringId ( e1 . getObjectId ( ) ) )
assertEquals ( "Expected ObjectIdSingle" , ObjectIdSingle . class , handler . of ( "entityName" , "keyName" , "value" ) . getClass ( ) )
assertEquals ( decoded , of ( ".E1:01D70A64" , key ) )
assertEquals ( 1 , document . getElementsByTagName ( "PROJECT1" ) . getLength ( ) )
assertEquals ( 1 , paints . size ( ) )
assertEquals ( 1 , paints . size ( ) )
assertSame ( target , o1 . getTargets ( ) . get ( "B1" ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( null , p1 . getToPaintingInfo ( ) )
assertEquals ( p1 . getToArtist ( ) , a1 )
assertEquals ( src . getToOneToFK ( ) , src2 . getToOneToFK ( ) )
assertEquals ( 0 , Cayenne . intPKForObject ( object ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 4 , performQuery ( query ) . get ( 0 ) )
assertEquals ( 0 , a1 . getGroupArray ( ) . size ( ) )
assertNotNull ( object . getObjectId ( ) )
assertEquals ( 1 , rezult . size ( ) )
assertEquals ( 3 , artists . size ( ) )
o1 . getObjectContext ( )
assertEquals ( "expectedValue" , p1 . getToArtist ( ) )
assertEquals ( 0 , artist . getPaintingArray ( ) . size ( ) )
assertEquals ( null , object2 . getToArtist ( ) )
assertEquals ( 0 , paints . size ( ) )
assertSame ( cause , ex . getCause ( ) )
assertEquals ( "xabx" , ex . getUnlabeledMessage ( ) )
assertSame ( cause , ex . getCause ( ) )
assertEquals ( 100 , queriesCount )
assertEquals ( 0 , queriesCount )
assertEquals ( 10 , tempList . size ( ) )
assertEquals ( 10 , tempList . size ( ) )
assertEquals ( ft1 , ft5Persisted . getToFT1 ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( expected , lazyData )
assertEquals ( 1 , song . getAuthors ( ) . size ( ) )
assertEquals ( ref , oid )
assertEquals ( null , o )
assertEquals ( oid1 , oid2 )
assertEquals ( oid1 , oid2 )
assertEquals ( t12 , t2 . getToOneOneWayDb ( ) )
assertEquals ( context , object . getObjectContext ( ) )
assertEquals ( 0 , queryCounter )
assertEquals ( new ASTObjPath ( "pathSpec" ) , result )
assertEquals ( "x$" , buffer . toString ( ) )
assertEquals ( 3 , objects2 . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 1 , ps . size ( ) )
assertEquals ( 2000 , obj . getPkAttribute ( ) )
assertEquals ( 1 , checkQ . getResults ( ) . size ( ) )
assertEquals ( 3 , query . select ( context ) . size ( ) )
assertEquals ( 3 , query . select ( ) . size ( ) )
assertSame ( object , context . getUserProperty ( "ABC" ) )
assertEquals ( 5 , objects . size ( ) )
assertEquals ( "expectedArtistName" , artist . getArtistName ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 7 , count )
assertEquals ( "Y" , a1 . getArtistName ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 1 , managers . size ( ) )
assertEquals ( 4 , query . size ( ) )
assertEquals ( 4 , query . size ( ) )
assertSame ( context . getEntityResolver ( ) , deserializedContext . getEntityResolver ( ) )
assertEquals ( NEW_NAME , a1 . getArtistName ( ) )
assertEquals ( 2 , components2 . size ( ) )
assertSame ( a1 , listener1 . getPublicCalledbackEntity ( ) )
assertEquals ( null , d1 . getDataMap ( m1 . getName ( ) ) )
assertSame ( entity , resolver . getObjEntity ( "TestEntity" ) )
assertSame ( resolver , node . getEntityResolver ( ) )
assertSame ( a1 , node . getAdapter ( ) )
assertNotNull ( dataStore )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( Enum1 . one , e . getEnumAttribute ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 0 , allObjects . size ( ) )
assertEquals ( 2 , allObjects . size ( ) )
assertEquals ( 3 , allObjects . size ( ) )
assertEquals ( 1 , objects11 . size ( ) )
assertEquals ( 6 , list . size ( ) )
assertEquals ( 25 , list . size ( ) )
assertEquals ( 4 , result . size ( ) )
assertEquals ( 0 , map . size ( ) )
assertEquals ( note . getPerson ( ) , getPerson ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertNotEquals ( parent1 , child . getParent ( ) )
assertEquals ( 1 , observer . getQueries ( ) . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , observer . getResults ( ) . size ( ) )
assertEquals ( 0 , sorted . size ( ) )
assertEquals ( effectiveOpId1 , effectiveOpId2 )
assertEquals ( "abc" , column . getName ( ) )
assertNotNull ( column . getDataRowKey ( ) )
assertSame ( bindings , statement . getBindings ( ) )
assertEquals ( "A BC" , template . getTemplate ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "select distinct a from Artist a" , sql )
assertThat ( sql , equalTo ( "SELECT p FROM Painting p WHERE p.estimatedPrice < 1.0" ) )
assertThat ( sql ) . isEqualTo ( "select p from Painting p where p.estimatedPrice <= 1.0" )
assertNotEquals ( "select p from Painting p where p.paintingTitle NOT like 'Stuff'" , sql )
assertEquals ( totalJoins , 1 )
assertEquals ( 2 , totalJoins )
assertTrue ( type instanceof BooleanType )
assertEquals ( EnumTypeFactory . class , map . getClass ( ) )
assertEquals ( null , createType ( null ) )
assertEquals ( null , testRead . getDate ( ) )
assertSame ( tstType1 , converter1 . extendedType )
assertEquals ( int . class , converter3 . extendedType )
assertSame ( tstType4 , converter4 . extendedType )
converter5 . extendedType
assertSame ( descriptor , merged )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertNotNull ( runtime )
assertNotNull ( runtime )
assertEquals ( true , task . isExecuted ( ) )
assertEquals ( max , ds . getMaxConnections ( ) )
assertEquals ( str , createTable ( entity ) )
assertEquals ( len , actualLen )
assertEquals ( "TEST_ENTITY" , entity . getSequenceName ( ) )
assertEquals ( "CUSTOM_GENERATOR" , entity . getPrimaryKeyGenerator ( ) . getGeneratorName ( ) )
assertEquals ( "CUSTOM_GENERATOR" , customGenerator . getGeneratorName ( ) )
parser . assertNotNull ( )
assertNotNull ( select )
assertEquals ( "select p from Painting p WHERE db:p.toArtist.ARTIST_NAME = 'a'" , select . getEjbqlStatement ( ) )
assertThat ( select . getEjbqlStatement ( ) ) . isEqualTo ( "SELECT a FROM Artist a WHERE a.paintingArray+.toGallery.galleryName = 'gallery2'" )
assertEquals ( "x.y" , path . getAbsolutePath ( ) )
assertEquals ( s1 , s2 )
assertEquals ( 0 , artist . getPaintingArray ( ) . size ( ) )
assertNotNull ( exp )
assertEquals ( 0 , exp . getValues ( ) . size ( ) )
exp . shouldNotContain ( "a" )
assertEquals ( false , exp . evaluate ( ) )
assertEquals ( "c" , "C" , e3 )
assertEquals ( "*******" , e . toString ( ) )
assertEquals ( "*******" , e . toString ( ) )
assertEquals ( 1 , e1 . get ( "a" ) )
e . isEmpty ( )
assertEquals ( "*******" , e . toString ( ) )
assertEquals ( "Expected result" , expected , actual )
assertEquals ( "abc" , e1 . getOperand ( 0 ) )
assertEquals ( ExpEnum1 . TWO , a . getA ( ) )
e . toString ( )
assertNotNull ( dbPathExp ( pathSpec ) )
assertEquals ( null , e4 . first ( paintingList ) )
assertEquals ( 0 , artists . size ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( "abc" , p . getValue ( ) )
assertEquals ( "consignment.parts" , 123 , e . getValue ( ) )
e . toString ( )
assertEquals ( "consignment.parts >= 3.14" , toEJBQL ( "rootId" ) )
assertEquals ( "\"artistName\" IN (:a, :b, :c)" , ejbql )
assertEquals ( "artistName != 'bla'" , ejbql )
assertEquals ( e1 . evaluate ( null ) , e2 . evaluate ( null ) )
theRobbinsEquation . evaluate ( null )
assertEquals ( "a = enum:org.apache.cayenne.exp.ExpEnum1.THREE" , ejbql )
assertEquals ( "a = 'abc'" , buffer . toString ( ) )
assertEquals ( "true" , transformed . toString ( ) )
assertEquals ( "a in ($ap, $bp)" , transformed . toString ( ) )
assertEquals ( e1 , e2 )
assertEquals ( null , params . get ( "a" ) )
assertNull ( e2 )
assertEquals ( e1 , e2 )
exp . shouldBeInstanceOf ( ASTCurrentDate . class )
exp . shouldBeInstanceOf ( ASTCurrentTimestamp . class )
assertEquals ( true , parsed1 . evaluate ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( 22 , parsed1 . size ( ) )
assertEquals ( 1 , parsed1 . size ( ) )
assertEquals ( 1 , components1 . size ( ) )
assertEquals ( "Expected function name to be null" , null , avg . getFunctionName ( ) )
assertEquals ( null , min . getFunctionName ( ) )
assertEquals ( "<expected value>" , sum . getFunctionName ( ) )
assertEquals ( new Date ( ) , result )
assertEquals ( new Date ( ) , result )
assertEquals ( new Date ( ) , result )
assertEquals ( "test" , sb . toString ( ) )
assertEquals ( "Expected EJBQL: SELECT e FROM Entity e WHERE e.artistName = 'bla'" , "SELECT e FROM Entity e WHERE e.artistName = 'bla'" , toEJBQL ( null ) )
assertEquals ( "expectedEJBQL" , ejbql )
assertEquals ( 1 , res )
assertEquals ( 2 , res )
assertEquals ( 28 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 39 , res )
assertTrue ( res . getDateColumn ( ) . after ( new Date ( ) ) )
assertNotNull ( res )
assertEquals ( - 10 , p1 . getIntColumn ( ) )
assertEquals ( 1 , p1 . getIntColumn ( ) % 3 )
assertEquals ( 3 , evaluate ( exp ) )
exp . evaluate ( o )
assertEquals ( "name" , a2 . getArtistName ( ) )
assertEquals ( "NAME" , a2 . getArtistName ( ) )
assertEquals ( "name" , a2 . getArtistName ( ) )
assertEquals ( "23456789" , a2 . getArtistName ( ) . substring ( 2 , 8 ) )
assertEquals ( "Pablo Picasso" , a2 . getArtistName ( ) )
assertEquals ( "An Artist" , a2 . getArtistName ( ) )
assertEquals ( "SDEFGHIJ test" , a2 . getArtistName ( ) )
assertEquals ( "34" , evaluate ( exp ) )
assertEquals ( "abc" , evaluate ( exp ) )
assertEquals ( "ABC" , evaluate ( exp ) )
assertEquals ( exp . evaluate ( null ) , true )
assertEquals ( "SELECT consignment FROM Consignment consignment WHERE consignment.parts IN (91, 23)" , e . toEJBQL ( "consignment" ) )
assertEquals ( "Expected EJBQL expression" , "a LIKE '%b%'" , toEJBQL ( null , "rootId" ) )
assertEquals ( "|%|%?|_title|%" , like . getPattern ( ) )
assertEquals ( "x" , ejbql )
assertEquals ( "paintingArray.paintingTitle" , node . getPath ( ) )
add . evaluate ( null )
subtract . evaluate ( null )
multiply . evaluate ( null )
assertEquals ( new BigDecimal ( "3.5" ) , divide . evaluate ( null ) )
assertNotNull ( getExpression ( ) )
exp . isNotNull ( )
exp ( property ) . isFalse ( ) . assertion ( )
assertEquals ( null , OBJECT_FIELD_INT_FIELD . getFrom ( bean ) )
assertEquals ( "property.function(\"%\", Integer.class, arg)" , "<AssertPlaceHolder>" )
assertNotNull ( operator )
assertNotNull ( operator )
exp . hour ( ) . getExpression ( ) . assertMethod ( )
exp ( property . second ( ) . getExpression ( ) ) . isEqualTo ( expectedExpression )
assertThat ( exp , is ( notNullValue ( ) ) )
assertEquals ( 1 , exp . getProperty ( ) . eqId ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , exp . size ( ) )
assertNotContains ( exp , artist )
exp . assertEquals ( new ASTFullObject ( ) )
exp . notContainsOneId ( ) . assertNotContainsId ( 1 )
assertNotNull ( getExpression ( ) )
assertNotNull ( jjtn000 )
assertNotNull ( jjtn000 )
assertNotNull ( getExpression ( ) )
assertEquals ( exp ( "path - 42" ) , property . sub ( 42 ) . getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertNotNull ( getExpression ( ) )
assertEquals ( expected , actual )
assertNotNull ( exp ( builder ) )
assertNotNull ( exp ( builder ) )
assertTrue ( lteProp ( ) )
assertNotNull ( expression )
assertThat ( ExpressionFactory . matchExp ( getExpression ( ) , value ) ) . isTrue ( )
assertThat ( expression . endsWith ( value ) ) . isTrue ( )
assertEquals ( expected , actual )
assertNotNull ( jjtn000 )
assertEquals ( "bind[0].getColumnName()" , "t0.NAME" , bindings [ 0 ] . getColumnName ( ) )
assertEquals ( tstName , a . getName ( ) )
assertEquals ( LifecycleEvent . POST_LOAD , m . getCallbackType ( ) )
assertEquals ( tstName , map . getName ( ) )
assertEquals ( null , map . getQueryDescriptor ( "a" ) )
assertEquals ( 1 , queries . size ( ) )
ent . getName ( ) . equals ( parentTask . getTaskName ( ) )
assertNotNull ( translated )
assertEquals ( relationship , join . getRelationship ( ) )
assertEquals ( "abc" , generator . getGeneratorName ( ) )
assertEquals ( tstName , entity . getName ( ) )
assertSame ( null , entity . getRelationship ( rel . getName ( ) ) )
assertSame ( descriptor , resolved )
assertEquals ( q , resolver . getQueryDescriptor ( "query1" ) )
assertNotNull ( attribute . getDbAttributePath ( ) )
assertEquals ( "org.aa.zz" , attribute . getType ( ) )
assertEquals ( a1 , a2 )
assertEquals ( entity , d1 )
assertEquals ( "paintingArray" , r . getDbRelationshipPath ( ) )
assertEquals ( "aaa" , builder . getName ( ) )
assertEquals ( tstName , rel . getName ( ) )
assertEquals ( QueryType . SQL_TEMPLATE , builder . getQueryType ( ) )
assertSame ( entity , ( ( SQLTemplate ) query ) . getRoot ( ) )
query . getSql ( ) . equals ( "abc" )
builder . setRoot ( "FakeRoot" )
assertSame ( entity , builder . buildQuery ( ) . getRoot ( ) )
assertEquals ( "abc = 5" , builder . getWhere ( ) . toString ( ) )
query . setRoot ( "SomeEntity" )
assertSame ( e , query . getRoot ( ) )
query . setRoot ( Artist . class )
assertThrows ( IllegalArgumentException . class , ( ) -> query . setRoot ( 1 ) )
assertEquals ( "a%" , Artist . ARTIST_NAME . like ( "a%" ) . getExpression ( ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( 3 , performQuery ( query ) )
assertEquals ( "John Doe" , artistName )
assertEquals ( "<query name=\"Test\" type=\"EJBQLQuery\">\n<ejbql><![CDATA[select a FROM Artist a]]></ejbql>\n</query>\n" , w . toString ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( expectedCount , count )
assertEquals ( 1 , count )
assertThat ( avg , equalTo ( date ) )
assertEquals ( 1 , count )
assertEquals ( 5 , intColumn2 )
assertEquals ( true , boolColumn )
assertEquals ( expectedAvg , avg )
assertEquals ( count , expectedCount )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertThat ( count , equalTo ( expectedCount ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( count , 0 )
assertEquals ( "a.b.c" , ord . getPathSpec ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( CapsStrategy . UPPER , q1 . getColumnNamesCapitalization ( ) )
assertEquals ( params , clone . getParameters ( ) )
assertEquals ( 1 , inserted )
assertEquals ( 2 , result . size ( ) )
q1 . fetch ( ) . size ( )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "painting3" , a . getPaintingTitle ( ) )
assertEquals ( 33001 , id )
assertEquals ( 2 , c )
assertEquals ( 1 , result . size ( ) )
assertEquals ( painting . getToArtist ( ) , artist )
assertEquals ( "AAA # BBB" , query . getDefaultTemplate ( ) )
assertEquals ( CapsStrategy . UPPER , q1 . getColumnNamesCapitalization ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( "field = 1.0" , s1 )
assertEquals ( "field in (1.0,2.0,3.0)" , s1 )
assertEquals ( true , map . isEmpty ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( "xyz" , p . getName ( ) )
assertEquals ( "ABC" , accessor . getValue ( o1 ) )
assertSame ( o1 , accessor . getValue ( o1 ) )
assertNotNull ( accessor )
assertEquals ( "abc" , object . getString ( ) )
assertSame ( newValue , object . stringField )
assertEquals ( "123" , to . getString ( "string" ) )
assertArrayEquals ( new byte [ ] { 3 , 4 , 5 } , o1 . getRelated ( ) . getByteArrayField ( ) )
assertEquals ( 55 , o1 . getRelated ( ) . getIntegerField ( ) )
assertEquals ( "SELECT #from(1) FROM a" , compiled . getSql ( ) )
assertNotNull ( parser )
parserPool . createNewParser ( ) ; "<AssertPlaceHolder>"
assertEquals ( "SELECT * FROM a" , sql )
assertEquals ( "SELECT field FROM table WHERE field = 5" , sql )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" } , $a . arrayMethod ( new String [ ] { "1" , "2" , "3" } ) )
assertEquals ( "['1', '2', '3']" , sql )
assertThat ( sql , is ( "expected result" ) )
assertThat ( sql , is ( "5.0" ) )
assertEquals ( "(#bind('A' 'b'))" , sql )
assertNotNull ( BaseTransaction . getThreadTransaction ( ) )
assertNotNull ( BaseTransaction . getThreadTransaction ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , children . size ( ) )
assertEquals ( 1 , set . size ( ) )
assertEquals ( 2 , set . size ( ) )
assertEquals ( Dispatch . this , inv0 . getDispatch ( ) )
assertEquals ( expectedPath , getPackagePath ( ) )
assertEquals ( "ext" , extractFileExtension ( fullName ) )
assertNotNull ( extractFileExtension ( fullName ) )
assertEquals ( "n" , stripFileExtension ( fullName ) )
assertEquals ( "normalstring" , encodeXmlAttribute ( "normalstring" ) )
assertEquals ( "a&amp;b" , encodeXmlAttribute ( "a&b" ) )
assertEquals ( "Error message with a % literal (should be escaped)" , e . getValidationResult ( ) . getFailures ( ) . get ( 0 ) . getMessage ( ) )
assertNotNull ( object )
assertEquals ( "SELECT #from(1) FROM a" , compiled . getSql ( ) )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( "[A] OR [B] OR [C]" )
assertThat ( compiled . getSql ( ) , is ( "[A][C]" ) )
assertThat ( compiled . getSql ( ) , is ( " OR WHERE [B][C]" ) )
assertEquals ( "#chain(' OR ' 'WHERE ')[A][B]" , compiled . getSql ( ) )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( "[A] OR [C] WHERE [A] OR [C]" )
assertThat ( compiled . getSql ( ) ) . isEqualTo ( delegateTranslator . getSql ( ) )
assertNull ( compiled )
assertNull ( compiled )
assertEquals ( "expectedValue" , config . getDefaultPackage ( ) )
assertEquals ( "someName" , event . getNewName ( ) )
assertEquals ( 3 , artifacts . size ( ) )
assertEquals ( CUSTOM_TPL , saver . getSavedTemplate ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( "Expected result" , expected , actual )
a . toString ( ) . equals ( "*******" )
assertEquals ( expectedValue , actualValue )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( in . available ( ) , expectedValue )
assertNotNull ( url )
assertNotNull ( url )
assertEquals ( map . get ( "key3" ) , list )
assertThrows ( ParseException . class , ( ) -> object ( "parentKeyPath" ) )
// <assertion code>
assertEquals ( 1 , list . size ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 5 , map . get ( "str" ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( 1 , list . size ( ) )
