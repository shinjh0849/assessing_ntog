assertEquals ( x , v )
assertEquals ( x , v )
assertThat ( v , is ( x ) )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( null , auth . getScheme ( ) )
assertEquals ( "Expected command text" , "<expected_command_text>" , query . getCommandText ( ) )
assertEquals ( "http://example.org" , query . getBaseUri ( ) )
assertEquals ( r , map . get ( "s" ) )
assertNotNull ( query . getNsPrefixURI ( "ex" ) )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( "SELECT * WHERE { ?s ?p ?o . }" , cmdText )
assertEquals ( copy . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertEquals ( "http://example.org" , copy . getNsPrefixURI ( "ex" ) )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ? . }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ?. }" , cmdText )
assertEquals ( "SELECT * WHERE { ? ? ?, ?o . }" , cmdText )
assertEquals ( 1 , count )
assertEquals ( 3 , count )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( 1 , x . size ( ) )
assertEquals ( 1 , c )
assertEquals ( 1 , rdfs . count ( null , rdfType , node ( ":D" ) ) )
assertEquals ( 1 , rdfs . count ( null , rdfType , node ( ":T" ) ) )
assertEquals ( 3 , bag . get ( r ) . length )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( expectedStatement ( EXAMPLE_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
AssertPlaceHolder = "Assert.assertTrue(m.contains(expectedStatement(FILE_BASE)));"
"assertTrue(m.contains(stmt));"
assertEquals ( 1 , m . size ( ) )
assertEquals ( expected , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( HTTP_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( "http://example.com/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( expectedStatement ( JENA_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( 1 , m . size ( ) )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( expectedStatement ( SSH_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
AssertPlaceHolder = "Assert.assertEquals(1, m.size());"
assertEquals ( expectedStatement ( X_MADEUP_BASE + "nested/" ) , m . listStatements ( ) . next ( ) )
assertEquals ( in , expectedInputStream )
assertEquals ( null , in )
assertEquals ( InputStream . class , in . getClass ( ) )
assertEquals ( null , in )
no generation
assertEquals ( "Expected NotFoundException to be thrown" , NotFoundException . class , ex . getClass ( ) )
assertEquals ( "http://example.org/file" , fileManager . getLocatorFile ( ) )
assertEquals ( true , n . isBlank ( ) )
assertEquals ( n1 , n2 )
assertEquals ( n , mapper . create ( ) )
exts . put ( ext , lang1 )
assertNotNull ( lang . getFileExtensions ( ) )
assertEquals ( l , shortnameToLang ( l . getName ( ) ) )
assertEquals ( t , t2 )
assertEquals ( t , t2 )
assertEquals ( t , t2 )
assertNotSame ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertSame ( b1 , b2 )
assertNotSame ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( m2 . size ( ) , m1 . size ( ) )
assertEquals ( lang , RDFLanguages . filenameToLang ( "data.rpb" ) )
assertEquals ( "_:blanknode" , rt . getBlankNodeLabel ( ) )
writer . shouldNotBeNull ( )
writer . shouldNotBeNull ( )
assertEquals ( filename , writer . getFilename ( ) )
assertEquals ( filename , writer . getFilename ( ) )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "http://example/x" , x )
assertEquals ( "ex:x" , x )
assertEquals ( "ex:x" , x )
assertEquals ( null , x )
assertEquals ( "expectedResult" , result )
assertEquals ( n , n1 )
assertEquals ( v , v1 )
assertEquals ( t , t1 )
assertEquals ( lang , RDFLanguages . filenameToLang ( "data.rt" ) )
assertEquals ( true , b )
assertEquals ( true , b )
assertNotNull ( n )
assertEquals ( x0 , x1 )
assertEquals ( true , b )
result . length > 0
assertEquals ( op , parseOp ( x ) )
assertEquals ( "" , x )
assertEquals ( 1 , count )
assertEquals ( "zzz" , qSoln . getLiteral ( "z" ) . getLexicalForm ( ) )
assertEquals ( true , result )
assertThat ( result . asDatasetGraph ( ) , is ( expected . asDatasetGraph ( ) ) )
assertEquals ( 1 , x )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "Lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The lists are not equal" , quads1 , quads2 )
assertEqualsUnordered ( "The two lists are not equal" , quads1 , quads2 )
assertEquals ( e , x )
assertEquals ( 1 , ds . getDefaultModel ( ) . size ( ) )
assertEquals ( pmap , g . getPrefixMapping ( ) )
assertEquals ( pmap , g . getPrefixMapping ( ) )
dsg . isEmpty ( )
assertEquals ( 0 , dataset . asDatasetGraph ( ) . size ( ) )
assertEquals ( dsgData , dataset . asDatasetGraph ( ) )
assertThrows ( IllegalArgumentException . class , ( ) -> new JsonString ( str ) )
assertEquals ( false , writeLockCaptured . get ( ) )
assertEquals ( 0 , rows )
assertTrue ( qe instanceof ResultSetAdapter )
assertEquals ( qs , qs2 )
assertEquals ( qs , qs2 )
assertEquals ( expectedOp , op2 )
assertEquals ( true , sameTerm ( n1 , n2 ) . getBoolean ( ) )
assertEquals ( expected , sameTerm ( NodeValue . makeNode ( n1 ) , NodeValue . makeNode ( n2 ) ) )
assertEquals ( true , sameTerm ( n1 , n2 ) . getBoolean ( ) )
assertEquals ( "56" , s . value ( ) )
assertEquals ( e , r )
assertEquals ( e , r )
assertEquals ( "en-gb" , n . getLanguage ( ) )
assertEquals ( e , r )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
assertEquals ( false , r . getBoolean ( ) )
assertEquals ( true , r . getBoolean ( ) )
nv . isLiteral ( )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertEquals ( v1 . getInteger ( ) , v2 . getInteger ( ) )
assertEquals ( 0 , x )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( r , eval ( "triple(:s1, :p1, :o1)" ) )
assertEquals ( "0.333333333333333333333333" , x )
assertEquals ( true , isomorphicWith )
assertEquals ( true , isomorphicWith )
assertEquals ( true , isomorphicWith )
assertEquals ( n , nv . getNode ( ) )
nv . isLiteral ( )
assertEquals ( nv . asNode ( ) . getLiteralDatatype ( ) , XSDDatatype . XSDstring )
assertEquals ( "'a'" , nv . getString ( ) )
assertNotNull ( nv )
factory . getFactory ( language )
assertEquals ( "http://example/" , pmap . getNsPrefixURI ( "ex" ) )
assertEquals ( uri , pmap . getNsPrefixURI ( "ex" ) )
assertEquals ( "ex1" , pmap . getNsPrefixURI ( "ex1" ) )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
no generation
assertEquals ( 5 , x )
assertEquals ( 6 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , x )
assertTrue ( m . isIsomorphicWith ( calcUnion ) )
assertEquals ( 0 , x )
assertEquals ( 2 , x )
assertEquals ( 0 , x )
assertEquals ( 1 , x )
assertEquals ( 2 , x )
assertEquals ( gStore . size ( ) , 1 )
assertNotNull ( getGraph ( graphIRI ) )
assertEquals ( 0 , gStore . size ( ) )
assertNull ( gStore . getGraph ( graph1 ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , gStore . size ( ) )
assertEquals ( 1 , gStore . size ( ) )
assertEquals ( 2 , g . size ( ) )
assertEquals ( 3 , gStore . size ( ) )
assertEquals ( dsg . size ( ) , expectedSize )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , gs . size ( ) )
assertEquals ( true , b )
assertEquals ( 2 , rs . getResultSetVars ( ) . size ( ) )
assertEquals ( 5.0 , d , 0.001 )
assertEquals ( 5.0 , d , 0.001 )
assertThat ( d , equalTo ( 5.0 ) )
assertThat ( d , equalTo ( 5.0 ) )
assertEquals ( 5.0 , d , 0.0001 )
assertEquals ( 5.0 , d , 0.001 )
assertEquals ( 10.0 , d , 0.001 )
assertEquals ( 10.0 , d , 0.001 )
assertThat ( d , equalTo ( 11.0 ) )
assertEquals ( 11.0 , d , 0.001 )
assertEquals ( 3.0 , d , 0.001 )
assertEquals ( 200 , d , 0.001 )
assertEquals ( bgp2 , bgp ( "(bgp (:x :q ?w) (:x :p ?v))" ) )
assertEquals ( bgp2 . toString ( ) , "expected value" )
assertEquals ( bgp2 , SSE . parseBGP ( "(prefix ((: <http://example/>)) (bgp))" ) )
assertEquals ( 1 , i )
assertEquals ( 23 , i )
assertEquals ( 23 , i )
e . toString ( ) . equals ( "(sameTerm (?x) (?y))" )
assertEquals ( item , SSE . parse ( "(prefix ((ex: <http://example/>)))" ) )
assertEquals ( 1 , dsg . size ( ) )
assertEquals ( true , b )
assertEquals ( true , f . get ( ) )
assertEquals ( false , b )
assertEquals ( "expectedValue" , stringForTripleEncoding ( ) )
assertEquals ( "<expected value>" , "<AssertPlaceHolder>" )
nl . getLiteralValue ( ) . equals ( 2 )
nl . getLiteralValue ( ) . equals ( new BigDecimal ( "2.4" ) )
assertEquals ( expectedValue , rdfNod . getURI ( ) )
assertNotNull ( name , "Argument to NodeFactory.createVariable is null" )
assertEquals ( "zz:%C3%BC_fe-zz" , s )
assert b
assertEquals ( 4 , x )
assertEquals ( 56 , x )
assertEquals ( "x" , x )
assertEquals ( "abc" , x )
assertEquals ( "abcdefghijklmnopqrstuvwxyzXYZ" , x )
assertEquals ( "test" , x )
assertEquals ( 8194 , x . length ( ) )
assertEquals ( 5000 , x . length ( ) )
assertEquals ( "file" , fn2 )
assertEquals ( "file.ttl" , fn2 )
assertEquals ( "a/b/file.ttl" , fn2 )
assertEquals ( "hello" , b . toString ( ) )
assertEquals ( "0x0001\nXX" , b . asString ( ) )
assertEquals ( "ABCD\nXYZ" , b . toString ( ) )
assertEquals ( "ABCD\nXYZ\n" , b . toString ( ) )
assertEquals ( 0 , x )
assertEquals ( expected , str )
assertEquals ( expected , str )
assertEquals ( true , b )
assertEquals ( true , b )
assertNotNull ( peek . peek ( ) )
assertEquals ( 0 , n )
assertEquals ( 2 , n )
assertEquals ( 2 , n )
iter . next ( )
assertEquals ( null , alarmClock . get ( index ) )
assertEquals ( - 1 , idx )
assertTrue ( command . contains ( x ) )
assertEquals ( - 1 , v )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertEquals ( x . getLang ( ) , expected )
assertTrue ( v == 0 )
assertTrue ( v >= 0 )
assertEquals ( x . getLang ( ) , expected )
no generation
assertEquals ( x . getLang ( ) , expected )
assertEquals ( 0xF1F2F3F4 , i )
assertEquals ( "expectedValue" , str )
assertEquals ( "a" , oneElt ( x ) )
assertEquals ( iri , testFileIRI ( "file:///D.ttl" ) )
assertEquals ( 123 , trie . longestMatch ( "test" ) )
assertEquals ( 2 , testSet . size ( ) )
assertEquals ( tuple1 , tuple2 )
assertEquals ( array1 , array )
assertEquals ( expected , mapped )
assertEquals ( expected , map . getValues ( ) )
assertEquals ( tuple1 , tuple2 )
no generation
array . get ( index )
assertEquals ( rules . size ( ) , 5 )
assertThat ( secondWriterHasLock . get ( ) ) . isFalse ( )
assertEquals ( len , length )
assertEquals ( x , store . size ( ) )
assertEquals ( fn , lock . getPath ( ) . toAbsolutePath ( ) . toString ( ) )
assertEquals ( v , 1234 )
assertEquals ( r , index . find ( r ) )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( "http://example.net/ns#" , x1 )
assertEquals ( "pref1:xyz" , x )
assertEquals ( r , null )
assertEquals ( 20 , r . getKey ( ) )
assertEquals ( outerRootIdx1 , outerRootIdx2 )
assertEquals ( str , str2 )
assertEquals ( "Hello" , s )
assertEquals ( "two" , transBlob . getString ( ) )
assertEquals ( e , e2 )
assertEquals ( 1 , counter1 . get ( ) )
assert b
assertEquals ( Transactional . Promote . ISOLATED , unit . promote ( ) )
assert b
assertEquals ( Transactional . Promote . ISOLATED , unit . promote ( promoteMode ) )
assert b
assertEquals ( Transactional . Promote . READ_COMMITTED_PROMOTE , unit . promote ( ) )
assert b
assertEquals ( true , b )
assertEquals ( true , b )
id1 . assertNotNull ( )
assertEquals ( 2 , x1 )
assertEquals ( 1 , x )
e . assertNotNull ( )
e . isURI ( )
assertEquals ( e , factory . now ( ) )
assertEquals ( Change . none ( ) , e )
assertEquals ( 0 , e . getHours ( ) )
e . isInstanceOf ( E_DateTimeMonth . class )
assertEquals ( "Expected timezone to be E_DateTimeTimezone" , E_DateTimeTimezone . class , e . getClass ( ) )
e . shouldBeInstanceOf ( E_DateTimeYear . class )
assertEquals ( true , e . isBlank ( ) )
assertEquals ( true , e . isLiteral ( ) )
assertEquals ( Expr . NONE , e )
assertEquals ( 1 , e . getValue ( ) )
assertEquals ( 0 , e . getValue ( ) )
assertEquals ( "" , e . toString ( ) )
assertEquals ( 0 , e . evaluate ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( e , factory . plus ( factory . none ( ) ) )
e . assertEquals ( expectedValue )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( "expectedValue" , e . toString ( ) )
assertEquals ( 0 , e . evaluate ( ) )
assertThat ( e , instanceOf ( E_GreaterThan . class ) )
e . isLangMatches ( )
e . assertEquals ( expr1 , expr2 )
assertThat ( e , is ( instanceOf ( E_LogicalOr . class ) ) )
assertNotEquals ( e , factory . none ( ) )
assertEquals ( "" , e . toString ( ) )
assertEquals ( e , factory . contains ( factory . none ( ) , factory . none ( ) ) )
assertEquals ( e , new E_Subtract ( factory . none ( ) , factory . none ( ) ) )
e is  an instance  of E_Conditional
assertNotNull ( e )
assertEquals ( "name" , e . getName ( ) )
assertThat ( e , is ( instanceOf ( E_OneOf . class ) ) )
assertEquals ( e , regex ( factory . none ( ) , "pattern" , "ims" ) )
e . assertEquals ( new E_StrReplace ( asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) , asExpr ( factory . none ( ) ) ) )
assertNotNull ( e )
assertNotNull ( e )
e should  be null
assertEquals ( "ThresholdPolicyCount: Threshold=???, Count=???" , toString ( ) )
assertEquals ( "foo" , handler . fromNamed ( "foo" ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getWhereList ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , wv . getTriplePaths ( ) . size ( ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getOptionalCount ( ) )
assertEquals ( 1 , epb . getPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , visitor . getTriplePaths ( ) . size ( ) )
assertEquals ( true , visitor . isValid ( ) )
assertEquals ( 1 , visitor . getViolations ( ) . size ( ) )
assertEquals ( 1 , visitor . getFilterCount ( ) )
assertEquals ( 1 , handler . getWhereHandler ( ) . getSubQueries ( ) . size ( ) )
assertEquals ( 1 , handler . getQueryPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , handler . getQueryPattern ( ) . getList ( ) . size ( ) )
assertEquals ( 1 , visitor . getBindings ( ) . size ( ) )
assertEquals ( values , handler . getValuesHandler ( ) . getValueVar ( Converters . makeVar ( var ) ) )
assertEquals ( 2 , edat . size ( ) )
assertEquals ( 2 , visitor . getBindings ( ) . size ( ) )
assertTrue ( rows > 0 )
assertTrue ( rows > 0 )
assertTrue ( rows == 10 )
assertEquals ( evalRowCount , cachedRowCount )
assertEquals ( 1000 , rows )
assertEquals ( 9 , actualRowCount )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertThat ( result , is ( expResult ) )
assertEquals ( 3 , x )
assertEquals ( "expectedValue" , x )
assertEquals ( "expectedValue" , x1 )
assertEquals ( "pong" , x )
assertEquals ( "http://localhost:" + port + "/$/metrics" , x )
assertEquals ( "http://localhost:" + port + "/$/tasks" , x )
assertEquals ( 0 , dataAccessPointRegistry . size ( ) )
assertEquals ( 200 , in . getStatusCode ( ) )
assertEquals ( 200 , in . getStatusCode ( ) )
assertTrue ( in . available ( ) > 0 )
assertEquals ( 1 , x )
assertEquals ( "expectedValue" , x )
assertTrue ( result )
assertEquals ( x , 0 )
assertEquals ( x , 0 )
assertEquals ( null , auth )
assertEquals ( HttpSC . NOT_FOUND_404 , ex . getStatusCode ( ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( in )
assertEquals ( HttpSC . OK_200 , ex . getStatusCode ( ) )
assertSeen ( results2 , s2 , s3 )
assertSeen ( results2 )
assertEquals ( 10 , Integer . parseInt ( x ) )
assertEquals ( 100 , Integer . parseInt ( x ) )
assertEquals ( 2 , c )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "assertTrue(result.equals(expResult));"
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResults , results )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.000001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "assertEquals(expResult, result);"
AssertPlaceHolder = "assertEquals(expResult, result);"
AssertPlaceHolder = "assertEquals(expResult, result);"
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , geo )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , geo )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
no generation
assertEquals ( expResult , result )
assertThat ( result , is ( expResult ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult . getDouble ( ) , result . getDouble ( ) , 0.000001 )
assertEquals ( expResult . getDouble ( ) , result . getDouble ( ) , 0.000001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result , 0.001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
AssertPlaceHolder = "Assert.assertNotNull(dataset);"
assertEquals ( 1 , graph . size ( ) )
AssertPlaceHolder = "StreamRDFCounting count = count(); assertEquals(0, count.getTriplesCount());"
assertEquals ( graph , GSP . service ( endpoint ( ) ) . defaultGraph ( ) . GET ( ) )
assertEquals ( HttpStatus . SC_OK , graph . getStatusCode ( ) )
assertEquals ( "<_:ABC>" , t . getSubject ( ) . toString ( ) )
assertEquals ( "<_:789>" , obj . toString ( ) )
assertEquals ( "" , x )
assertNotNull ( dsg )
assertThat ( iter . hasNext ( ) , is ( true ) )
AssertPlaceHolder = "assertEquals(1, dataset.getDefaultGraph().size());"
assertTrue ( b )
assertEquals ( LiteralKindCase . VALUE_OF , Service . parseTimeout ( Integer . valueOf ( 56 ) ) )
assertThat ( b ) . isTrue ( )
AssertPlaceHolder : Assert . assertEquals ( 1 , ds . getDefaultModel ( ) . size ( ) )
assertEquals ( "http://example/2" , x )
assertEquals ( sizeBefore , sizeAfter )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 0 , batchResults . length )
assertEquals ( 5 , batchResults . length )
assertEquals ( JenaMetadata . DEFAULT_CATALOG , conn . getCatalog ( ) )
AssertPlaceHolder = "assertNull(conn.getWarnings());"
assertEquals ( null , rset . getWarnings ( ) )
assertEquals ( null , stmt . getWarnings ( ) )
assertEquals ( 1 , stmt . execute ( ) )
assertTrue ( stmt . isClosed ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( pss . toString ( ) , "SELECT * WHERE { ?s ?p ? }" )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( pss . toString ( ) , "SELECT * WHERE { ?s ?p ? }" )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . getCommandText ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( "SELECT * WHERE { ?s ?p ? }" , pss . toString ( ) )
assertEquals ( rdfNode2 . getModel ( ) , securedModel )
assertEquals ( expected , actual )
assertNotNull ( m2 )
assertNotNull ( alt )
assertNotNull ( seq )
assertEquals ( 1 , count )
assertTrue ( b )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( 1 , link . newQuery ( ) . build ( ) . execSelect ( ) . toList ( ) . size ( ) )
assertTrue ( b )
assertEquals ( 1 , counter . get ( ) )
assertEquals ( output , output2 )
assertExists ( mout . latestFilename ( ) . toString ( ) )
assertEquals ( base , graph . getBaseURI ( ) )
assertSame ( dgBase1 , dgBase2 )
assertEquals ( false , b )
assertEquals ( false , b )
assertEquals ( id1 , f . write ( x1 ) )
assertEquals ( "http://example.com/x" , x )
assertEquals ( "http://foo/" , uri )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertThat ( mapped , is ( equalTo ( expected ) ) )
assertEquals ( hash ( x1 ) , hash ( x2 ) )
assertEquals ( params1 , params2 )
assertEqualsStoreParams ( sp , input )
assertEquals ( sp , sp )
assertEquals ( expectedValue , x )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( "http://host/bar0" , g1 . getPrefixMapping ( ) . getNsPrefixURI ( "foo0" ) )
assertEquals ( 1 , m1 . getNsPrefixMap ( ) . size ( ) )
assertEquals ( "expectedValue" , uri )
assertEquals ( 1 , dsg . getDefaultGraphTDB ( ) . size ( ) )
assertEquals ( uri , "http://example.org/" )
assertEquals ( 1 , graph . size ( ) )
assertEquals ( 37 , nodeId . getValue ( ) )
assertEquals ( n , expectedResultSetSize )
assertNotNull ( sConn )
assertNotNull ( rwx )
assertEqualsStoreParams ( sp , input )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEquals ( 1 , gs . getDefaultGraph ( ) . size ( ) )
assertEquals ( 1 , g1 . getPrefixMapping ( ) . getNsPrefixMap ( ) . size ( ) )
assertEquals ( 1 , m1 . getNsPrefixMap ( ) . size ( ) )
assertEquals ( 1 , n )
assertTrue ( b )
assertEquals ( dg1 , dg2 )
assertEquals ( expectedURIs . size ( ) , scores . size ( ) )
assertEquals ( "expectedValue" , entityDef . getPrimaryField ( ) )
assertEquals ( 1 , rs . getRowNumber ( ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedAnalyzer , entDef . getAnalyzer ( field ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( before , after - 1 )
assertEquals ( spec1 , dataset . getSpec ( ) )
assertNotNull ( getDocDef ( ) )
assertEquals ( ModelFactory . createModelForGraph ( graph ) , index . open ( a , root , null ) )
assertEquals ( directory , index . getDirectory ( ) )
