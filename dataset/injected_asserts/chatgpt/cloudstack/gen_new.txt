assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "PhysicalNetwork.IsolationMethod[bla, blob]" , method . toString ( ) )
assertEquals ( "No registration of prefix 'bla' found." , exception . getMessage ( ) )
assertEquals ( Native , type )
assertEquals ( GuestType . Shared , GuestType . fromValue ( "Shared" ) )
assertEquals ( null , action )
assertEquals ( accountType , getFromValue ( accountType . getValue ( ) ) )
assertEquals ( null , getFromValue ( 123 ) )
assertEquals ( roleType , RoleType . fromString ( roleType . toString ( ) ) )
assertEquals ( RoleType . Admin , role . getRoleType ( ) )
assertEquals ( "someString" , rule . toString ( ) )
assertNotNull ( e )
assertEquals ( new HashMap < String , Map < String , String > > ( ) , cmd . getDetails ( ) )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "Expected message" , ex . getMessage ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertEquals ( expectedTags , createSnapshotCmd . getTags ( ) )
assertNotNull ( exception )
assertEquals ( values1 , result )
assertEquals ( "virtualmachine" , list . get ( 0 ) . getResponseType ( ) )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertNotNull ( exception )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertEquals ( expectedTags , createSnapshotPolicyCmd . getTags ( ) )
assertEquals ( null , registerTemplateCmdByAdmin . zoneIds )
assertEquals ( null , registerTemplateCmd . zoneIds )
assertEquals ( true , _mgr . deleteUserData ( cmd ) )
assertEquals ( response , cmd . getResponseObject ( ) )
assertEquals ( 1 , actualResponse . getList ( ) . size ( ) )
assertNotNull ( _responseObject )
assertEquals ( null , hostResponse . getDetails ( ) )
assertEquals ( expected , statsResponseMock . diskIopsTotal )
assertEquals ( expected , statsResponseMock . getDiskIopsTotal ( ) )
assertEquals ( i + 1 , aclList . get ( i ) . getNumber ( ) )
assertThat ( received , equalTo ( answer ) )
assertNotNull ( received . getOvfInformationTO ( ) )
assertNotNull ( answer )
assertEquals ( true , cmd . getResult ( ) )
assertEquals ( true , getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( true , result )
assertEquals ( "proxyImageUrl" , url , cpi . getProxyImageUrl ( ) )
assertEquals ( "console.example.com" , url )
assertEquals ( "" , url , cpi . getProxyImageUrl ( ) )
assertEquals ( "1.2.3.4" , url )
assertEquals ( bytes , expectedBytes )
assertEquals ( null , getVirtualSize ( ) )
assertEquals ( 1000L , actualSize )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertEquals ( true , b )
assertEquals ( aic , after )
assertEquals ( expectedResult , b )
assertNotNull ( s2 )
s . assertEquals ( 0L , s . longValue ( ) )
assertEquals ( true , b )
e != null
assertEquals ( true , r )
assertEquals ( true , b )
h . assertEquals ( cohc . getHost ( ) )
assertEquals ( id , host . getId ( ) )
assertEquals ( Status . EXPECTED_STATUS , s )
assertEquals ( 10 , speed )
assertEquals ( expectedPodId , pID )
assertEquals ( expectedSize , size )
assertEquals ( expectedMsID , msID )
dcId . assertEquals ( expected )
assertEquals ( expected , vId )
assertEquals ( "BaseImage" , type )
assertEquals ( "Iso" , type . getType ( ) )
assertEquals ( "RootDisk" , type . getType ( ) )
assertEquals ( "VolumeTypeBase" , type . getType ( ) )
assertEquals ( true , actual )
assertEquals ( null , actual )
assertEquals ( ScopeType . CLUSTER , storagePoolVoMock . getScope ( ) )
assertEquals ( ScopeType . CLUSTER , storagePoolVoMock . getScope ( ) )
assertEquals ( ScopeType . ZONE , storagePoolVoMock . getScope ( ) )
assertEquals ( listAutoScaleVmGroupVOMock , result )
assertEquals ( result , listAutoScaleVmGroupVOMock )
assertEquals ( result , true )
assertTrue ( result )
assertEquals ( 2 , result )
assertEquals ( state , getState ( ) )
assertEquals ( 6 , result )
assertEquals ( result , listAutoScaleVmGroupVmMapVOMock )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( 2 , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertNotNull ( getRecentVersionMiddle ( ) )
assertNotNull ( getRecentVersionExact ( ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( fileContent . getBytes ( ) , returnedContentInBase64 . getBytes ( ) )
assertEquals ( ConfigDrive . CONFIGDRIVEDIR + "/" + configIsoFileName ( instanceName ) , "<AssertPlaceHolder>" )
assertEquals ( expectedTemplateUuid , templateUuid )
assertEquals ( 5L , priority )
assertEquals ( dataStore2 , volumeInfo1 . getDataStore ( ) )
assertEquals ( false , pool2 . isManaged ( ) )
assertEquals ( DataStoreRole . Primary , sourceStore . getRole ( ) )
assertEquals ( true , isStoragePoolTypeInList ( StoragePoolType . LVM , listTypes ) )
assertEquals ( false , isStoragePoolTypeInList ( StoragePoolType . LVM , listTypes ) )
assertEquals ( true , result . isSuccess ( ) )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( false , result )
assertEquals ( "Panic!" , e . getMessage ( ) )
assertEquals ( "test" , test )
assertEquals ( "expectedValue" , result )
assertEquals ( input , asyncJobManager . obfuscatePassword ( result , false ) )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( "\"password\":\"*****\"" , result )
assertEquals ( 2L , accountVO . getId ( ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( expected , result )
assertEquals ( false , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( "" , quotaTariffVoMock . getActivationRule ( ) )
result . assertNull ( )
assertEquals ( presetVariablesMock , result )
assertEquals ( BigDecimal . ZERO , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( result . getAccount ( ) . getRole ( ) , getProject ( id ) . getRole ( ) )
assertEquals ( domain . getPath ( ) , result . getPath ( ) )
assertEquals ( expected . getTags ( ) , result . getTags ( ) )
assertEquals ( expected , result )
assertThat ( result . isCustomized ( ) ) . isEqualTo ( expected . isCustomized ( ) )
assertEquals ( expected . getTag ( ) , actual . getTag ( ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertNotNull ( set )
assertEquals ( "Expected IOException to be thrown" , IOException . class , e . getClass ( ) )
assertEquals ( "Expected exception message" , "expected message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertNotNull ( accountService . getAccount ( Mockito . anyLong ( ) ) )
assertEquals ( Collections . singletonList ( permission ) , roleServiceMock . findAllPermissionsBy ( Mockito . anyLong ( ) ) )
assertEquals ( true , focalMethodResult )
assertEquals ( 204 , status )
assertNotNull ( generateRandomBigInt ( ) )
assertEquals ( expectedNextDate , nextDate )
assertThat ( e . getMessage ( ) , is ( equalTo ( "Expected error message" ) ) )
assertEquals ( ans . getVmStats ( ) . size ( ) , 1 )
assertEquals ( true , ans . getResult ( ) )
assertEquals ( expectedPortName , getNextDpdkPort ( ) )
assertEquals ( DpdkHelper . VHostUserMode . CLIENT . toString ( ) , dpdKvHostUserMode . toString ( ) )
assertEquals ( expected , lcr . diskUuidToSerial ( uuid ) )
assertEquals ( 100 , memoryFreeInKBs )
assertEquals ( 0 , memoryFreeInKBs )
assertEquals ( 100 , memoryFreeInKBs )
assertEquals ( true , ans . getResult ( ) )
assertEquals ( valueExpected , result )
assertEquals ( IoDriverPolicy . IO_URING , getIoDriver ( ) )
assertEquals ( 2000 , cpuShares )
assertEquals ( null , diskDef . getSourcePath ( ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , interfaceDef . toString ( ) )
assertEquals ( expected , ifDef . toString ( ) )
assertEquals ( expected , ifDef . toString ( ) )
assertEquals ( expectedXML , disk . toString ( ) )
assertEquals ( expectedXml , xmlDef )
assertEquals ( expectedXml , xmlDef )
assertEquals ( Networks . TrafficType . Public , ip . getTrafficType ( ) )
assertEquals ( expectedResult , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( 2350L , KVMHostInfo . getCpuSpeedFromHostCapabilities ( capabilities ) )
assertEquals ( manualSpeed , kvmHostInfo . getCpuSpeed ( ) )
assertEquals ( filename , file . getFileName ( ) )
assertNotNull ( hypervisor . configure ( config . getAgentName ( ) , configTest . getParams ( ) ) )
assertEquals ( Status . EXPECTED_STATUS , hypervisor . getCurrentStatus ( id ) )
assertNotNull ( start )
results . basicStringTest ( hypervisor . getVmState ( vmName ) . toString ( ) , State . Running . toString ( ) )
assertNotNull ( vmwareDatacenter )
assertEquals ( "01:23:45:67:89:AB|02:00:65:b5:00:03" , macSequence )
assertEquals ( StrategyPriority . EXACT , canHandle )
assertEquals ( expected , guestOsType )
assertEquals ( expected , guestOsType )
assertEquals ( "My Own Linux Distribution Y.M (64-bit)" , guestOsType )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
assertEquals ( patch , patchFilePath )
AssertPlaceHolder = "Assert.assertNotNull(wrapper);"
assertEquals ( 1 , answer )
assertEquals ( false , answer . getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , result )
assertEquals ( null , group )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( expected , result )
assertEquals ( "50.25%" , hostResponse . getCpuAllocatedGhz ( ) )
assertEquals ( false , ping . getStatus ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . getResult ( ) )
assertEquals ( false , ans . isSuccess ( ) )
assertEquals ( ans . getResult ( ) , result )
assertEquals ( false , ans . isSuccess ( ) )
assertNotNull ( designednetwork )
assertEquals ( "Offline" , ping . getStatus ( ) )
assertEquals ( false , ping . isSuccess ( ) )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , answer . getResult ( ) )
assertNotNull ( answer )
assertNotNull ( answer )
assertEquals ( true , result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( null , actual )
assertEquals ( null , actual )
assertEquals ( false , domain . isDeleted ( ) )
assertEquals ( false , isReady )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( vr , _lbVmSvc . startInternalLbVm ( validVmId , _accountMgr . getAccount ( 1L ) , 1L ) )
assertEquals ( true , vr . isStopped ( ) )
assertEquals ( 0 , compare ( cls , parameters ) )
assertEquals ( 0 , compare ( cls , parameters ) )
assertEquals ( 2 , executionCounter . getExecutionCount ( ) )
assertEquals ( "stable" , clusterStatus )
assertEquals ( "unstable" , ping . getClusterStatus ( ) )
assertNotNull ( clsa )
assertEquals ( false , clsa . getResult ( ) )
assertEquals ( true , dlsa . getResult ( ) )
assertNull ( clspa )
assertNotNull ( dlspa )
assertEquals ( lspl , flspa . getResult ( ) )
assertEquals ( false , flspa . getResult ( ) )
assertEquals ( false , flspa . getResult ( ) )
assertEquals ( false , clra . getResult ( ) )
assertEquals ( false , clra . getResult ( ) )
assertNotNull ( dlspa )
assertEquals ( false , answer . getResult ( ) )
assertNotNull ( answer )
assertEquals ( netUrl , MessageFormat . format ( NeutronNorthboundEnum . NETWORK_PARAM_URI . getUri ( ) , netId ) )
assertEquals ( nodedelUrl , MessageFormat . format ( NeutronNorthboundEnum . NODE_PARAM_URI . getUri ( ) , "test" , nodeId ) )
assertNull ( returnValue )
assertNotNull ( newHttpGet )
assertNotNull ( newHttpPut )
assertEquals ( true , caughtException )
assertEquals ( "Expected error message" , expectedErrorMessage , storPoolPrimaryDataStoreDriver . getError ( ) )
assertEquals ( "" , _responseObject )
assertNotNull ( getResponseObject ( ) )
assertEquals ( "ldapListUsersCmd.getCommandName()" , "s_name" , commandName )
assertEquals ( true , result )
assertNotNull ( getResponseObject ( ) )
assertNotNull ( getResponseObject ( ) )
assertEquals ( "cn=bla" , ldapConfiguration . getLdapBindPrincipal ( ) )
assertEquals ( "cn=cloudstack,cn=users,dc=cloudstack,dc=org" , result )
assertEquals ( "password" , result )
userManager . getOpenLdapInstance ( )
assertNotNull ( pair )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( randomToken , getToken ( ) )
assertThat ( isSAMLPluginEnabled ( ) ) . isTrue ( )
assertEquals ( password , encode ( password ) )
assertEquals ( 160 , generateSecureRandomId ( ) . length ( ) )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( APIAuthenticationType . EXPECTED_VALUE , getAPIType ( ) )
assertEquals ( "ipv4" , response . getIpAddr ( ) )
assertEquals ( 0 , virtualMachineCount . get ( securityGroupResponse ) )
assertEquals ( 2 , virtualMachineCount . get ( securityGroupResponse ) )
assertEquals ( null , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid site local IP address" , testVariable )
assertEquals ( "a valid instance name (instance names cannot contain hyphens, spaces or plus signs)" , testVariable )
assertEquals ( null , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertEquals ( "a valid domain name" , testVariable )
assertNotNull ( getVlanNumberFromUri ( vlan ) )
assertEquals ( true , sameSubnet . first ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( expectedResult , result )
assertEquals ( true , dest . shouldAvoid ( ) )
assertEquals ( "host" , dest . getHost ( ) )
assertEquals ( "host" , dest . getHost ( ) )
assertEquals ( true , result )
assertEquals ( TransactionLegacy . open ( "testMethod1" ) , event )
assertEquals ( Status . Down , investigate ( hostId ) )
assertEquals ( true , fenceOff ( virtualMachine , host ) )
assertEquals ( maxCpuCores , result . getValue ( ) )
assertEquals ( 1l , virtualMachineMock . getLastHostId ( ) )
assertEquals ( "Ubuntu" , guru . getPlatformEmulator ( ) )
assertEquals ( null , virtualMachineTo . getGuestOsMapping ( ) )
assertEquals ( null , clusterId )
assertEquals ( DpdkHelper . VHostUserMode . CLIENT , DpdkHelper . VHostUserMode . fromValue ( "client" ) )
assertEquals ( expected , nic . getIPv6Address ( ) )
assertEquals ( ipv6Address , assignedNic . getIPv6Address ( ) )
assertEquals ( "Expected exception message" , _description , e . getMessage ( ) )
assertEquals ( "524-524,525-530" , argumentCaptor . getValue ( ) )
assertEquals ( counterName , ReflectionTestUtils . getField ( cmd , ApiConstants . NAME ) )
assertEquals ( countersMock , counters )
assertTrue ( success )
assertEquals ( 1 , conditionDao . persist ( Mockito . any ( ) ) )
AssertPlaceHolder = "assertTrue(success);"
assertEquals ( true , result )
assertEquals ( false , autoScaleVmProfileDao . remove ( vmProfileId ) )
assertEquals ( vmGroupId , loadBalancer )
assertEquals ( AutoScaleVmGroup . State . DISABLED , vmGroup . getState ( ) )
assertEquals ( dataDiskSize , result )
assertEquals ( Counter . Source . CPU , counterTO . getSource ( ) )
assertEquals ( Counter . Source . VIRTUALROUTER , counterTO . getSource ( ) )
assertEquals ( Counter . Source . VIRTUALROUTER , counterTO . getSource ( ) )
assertEquals ( Counter . Source . CPU , counterTO . getSource ( ) )
assertTrue ( result )
assertEquals ( true , answer . getResult ( ) )
assertEquals ( "expectedValue" , getCapabilities ( ) )
assertThat ( StrategyPriority . canHandle ( vmId , poolId , snapshotMemory ) ) . isTrue ( )
assertThat ( networkModel . areServicesSupportedByNetworkOffering ( offering . getId ( ) , Network . Service . SecurityGroup ) ) . isTrue ( )
assertEquals ( null , result )
assertEquals ( "1.1.1.1 2.2.2.2/24 " , result )
assertEquals ( returnedNetworkAclItemVo , networkAclItemVoMock . clone ( ) )
assertEquals ( null , networkACLItemVOReceived )
assertEquals ( null , networkACLItemVOReceived )
assertEquals ( true , result )
assertEquals ( true , enterMaintenanceMode )
assertEquals ( - 11l , amount )
assertNotNull ( result )
assertEquals ( DEFAULT_DATABASE_NAME , dbName )
assertEquals ( Snapshot . State . BackedUp , snapshot . getState ( ) )
assertEquals ( STORE_ID , nfsVersion )
assertEquals ( "expectedNfsVersion" , nfsVersion )
assertEquals ( nfsVersion , imageStoreDetailsUtil . getNfsVersion ( ) )
assertEquals ( "expectedNfsVersion" , nfsVersion )
assertEquals ( null , imageStoreDetailsUtil . getNfsVersionByUuid ( STORE_UUID ) )
assertEquals ( "expectedValue" , globalDefaultNfsVersion )
assertEquals ( null , createVol . getVolumeName ( ) )
assertEquals ( " " , createVol . getVolumeName ( ) )
assertEquals ( "" , returnedStoragePoolTags )
assertEquals ( "A,B,C" , diskOfferingVoMock . getTags ( ) )
assertEquals ( "A,B,C" , diskOfferingVoMock . getTags ( ) )
assertEquals ( "A,B,C,D,X,Y" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "C,D" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "A" , volumeApiServiceImpl . getStoragePoolTags ( storagePoolMock ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( DataStoreRole . Image , snapshot . getDataStoreRole ( ) )
assertEquals ( expectedResult , result )
assertEquals ( null , dataStore )
assertEquals ( 2L , cmd . getUserdataId ( ) )
assertEquals ( null , _accountDao . findById ( 42l ) )
assertNotNull ( receivedUser )
assertEquals ( "" , domainVo . getUuid ( ) )
assertEquals ( "expectedUuid" , domainVo . getUuid ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertNull ( returnedRole )
assertNull ( returnedRole )
assertEquals ( false , _groupDao . isNameInUse ( anyLong ( ) , anyLong ( ) , eq ( "group1" ) ) )
assertEquals ( group . getName ( ) , AFFINITY_GROUP_NAME )
assertEquals ( 0l , domainIdBasedOnDomainLevel )
assertEquals ( listToSend , expectedList )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "expectedValue" , focalMethod ( ) )
assertEquals ( "Expected InvalidParameterValueException to be thrown" , InvalidParameterValueException . class , e . getClass ( ) )
assertNotNull ( value ( ) )
assertEquals ( true , crlDao . revokeCertificate ( Mockito . any ( BigInteger . class ) , anyString ( ) ) )
assertNotNull ( rule )
assertEquals ( newAccountOwner , owner )
assertEquals ( null , owner )
assertEquals ( publicIp , deployment . findSourceNatIP ( ) )
assertEquals ( 1 , workers . size ( ) )
assertEquals ( "Expected exception not thrown" , ServerApiException . class , exception . getClass ( ) )
assertEquals ( "InvalidParameterValueException should be thrown" , "Invalid parameter value" , e . getMessage ( ) )
assertEquals ( "foo" , regionManager . getRegionName ( ) )
assertTrue ( offeringCustom . isDynamic ( ) )
assertNotNull ( actualErrors )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( time , dtParsed )
assertEquals ( "Expected exception not thrown" , Exception . class , e . getClass ( ) )
assertEquals ( "expectedValue" , getHumanReadableBytesJson ( "inputJson" ) )
assertEquals ( "b" , properties . get ( "a" ) )
assertEquals ( "Expected output" , "Actual output" , script . toString ( ) )
assertEquals ( "" , output )
assertEquals ( expected , output )
assertEquals ( expected , result )
assertEquals ( expected , output . toString ( ) )
assertEquals ( expected , output )
assertEquals ( sleepTimeNano , pf . getDuration ( ) )
assertThat ( ImageStoreUtil . isCompressedExtension ( url ) , Matchers . is ( isValidCompression ) )
assertEquals ( "before" , LOG . getLastDebugMessage ( ) )
assertEquals ( false , isCgLibLogTrace ( s ) )
assertEquals ( "4294967297" , max . addr ( ) )
assertEquals ( BigInteger . valueOf ( 10 ) , countIp6InRange ( "2001:db8::1-2001:db8::a" ) )
assertEquals ( BigInteger . valueOf ( 10 ) , countIp6InRange ( "2001:db8::1-2001:db8::a" ) )
assertEquals ( URI . create ( "pvlan://" + primaryVlan + "-c" + isolatedPvlan ) , generateUriForPvlan ( primaryVlan , isolatedPvlan , isolatedPvlanType ) )
assertNotNull ( getSSLContextTest ( ) )
assertEquals ( expectedVirtualSize , getVirtualSize ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "" , result )
assertEquals ( value , jsInterpreterSpy . get ( key ) )
assertThat ( props . getUseStartTLS ( ) ) . isTrue ( )
assertThat ( props . getDebugMode ( ) ) . isFalse ( )
assertEquals ( false , props . getDebugMode ( ) )
assertEquals ( null , smtpMailSender . getTimeout ( ) )
assertEquals ( null , smtpMailSender . getStartTLSEnabled ( ) )
assertEquals ( "true" , smtpMailSender . get ( getConfigName ( SMTPMailSender . CONFIG_USE_STARTTLS ) ) )
assertNull ( message )
assertNotNull ( message )
assertNull ( returnOfPropertyThatDoesNotExist )
assertEquals ( expectedResult , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( systemId , result )
assertEquals ( expectedResult , result )
assertEquals ( expected , result )
assertEquals ( "expectedResult" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( SHA256_NO_PREFIX_CHECKSUM , DigestHelper . getHashValueFromChecksumValue ( SHA256_NO_PREFIX_CHECKSUM ) )
assertEquals ( "scsi0" , vmDiskInfo . getControllerFromDeviceBusName ( ) )
assertEquals ( "cloud.public.untagged" , publicNetworkPrefix )
assertEquals ( "cloud.public.1234." , publicNetworkPrefix )
assertEquals ( "vmx-08" , vmxHwVersion )
assertNotNull ( composePoolKey ( vCenterAddress , vCenterUserName ) )
