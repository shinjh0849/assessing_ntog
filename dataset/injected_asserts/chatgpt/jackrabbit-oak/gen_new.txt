assertSame ( base , ex . getCause ( ) )
assertSame ( base , ex . getCause ( ) )
assertEquals ( r . getProviderName ( ) , providerName )
assertEquals ( id , getAuthorizable ( new SimplePrincipal ( id ) ) . getID ( ) )
a . hasProperty ( ExternalIdentityConstants . REP_EXTERNAL_PRINCIPAL_NAMES )
assertNotNull ( userManager . getAuthorizable ( principal ) )
assertNotNull ( getAuthInfo ( ) )
assertEquals ( null , createSyncedIdentity ( null ) )
assertNotNull ( result )
assertNotNull ( getExternalGroupFromRefFails ( ) . getName ( ) )
assertEquals ( user . getExternalGroup ( ) , getExternalGroupFromRef ( user . getExternalGroupRef ( ) ) )
assertThat ( a , hasProperty ( propName ) )
assertThat ( a , hasProperty ( propName ) )
assertEquals ( createTestGroup ( ) . getID ( ) , createTestGroup ( ) . getID ( ) )
assertEquals ( getTestUser ( ) . getIDP ( ) , "local" )
assertEquals ( externalGroup , getAuthorizable ( principal ) )
assertNotNull ( getAuthorizable ( principal ) )
assertNotNull ( res . getIdentity ( ) )
assertNotNull ( si . getIdentity ( ref ) )
assertEquals ( true , list . isEmpty ( ) )
assertNull ( info . getUserID ( ) )
assertNotNull ( config . getName ( ) )
assertEquals ( validMapping , userConfig . getPropertyMapping ( ) )
assertEquals ( "getName() should not return null" , expected , actual )
assertThat ( t , hasProperty ( "name" ) )
assertNotNull ( a )
assertThat ( t , hasProperty ( "name" ) )
assertThat ( t , hasProperty ( "groups" , containsInAnyOrder ( "a" , "aa" , "secondGroup" ) ) )
assertSame ( syncManager , f . get ( factory ) )
assertSame ( idpManager , f . get ( factory ) )
assertEquals ( "invalid" , syncMBean . getSyncHandlerName ( ) )
assertNotNull ( getAuthorizable ( principal ) )
assertEquals ( 0 , result . length )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( 0 , list . size ( ) )
assertTrue ( "Exception should be thrown" , assertThrows ( RepositoryException . class , ( ) -> amprincipals . getPrincipals ( authorizable ) ) . getMessage ( ) . contains ( "RepositoryException" ) )
assertEquals ( IDP_INVALID_AM , getTestUser ( ) . getExternalId ( ) )
assertEquals ( false , user . isGroup ( ) )
assertEquals ( false , user . isGroup ( ) )
assertNull ( um . getAuthorizable ( any ( Principal . class ) ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( validator , provider . getRootValidator ( nsBefore , nsAfter , CommitInfo . EMPTY ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( ref . getId ( ) , gr . getID ( ) )
assertEquals ( "thirdGroup" , gr . getID ( ) )
assertEquals ( ref . getId ( ) , gr . getID ( ) )
assertEquals ( true , gr . exists ( ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertEquals ( getTestUser ( ) . getPrincipal ( ) , "<expectedPrincipal>" )
assertNotNull ( getPrincipal ( pName ) )
assertEquals ( 0 , principals . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , principals . size ( ) )
principals . isEmpty ( )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , principalNames . size ( ) )
assertEquals ( all . size ( ) , result . size ( ) )
assertNotNull ( externalIdIndex )
assertNotNull ( externalPrincipalNames )
assert g . isMember ( getTestUser ( ) )
assertThat ( externalUserTree , hasProperty ( "id" ) )
assertEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertTrue ( "Expected group principal name to be 'a'" , gp . getName ( ) . equals ( idp . getGroup ( "a" ) . getPrincipalName ( ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "testSH" , ref . getProperty ( PARAM_SYNC_HANDLER_NAME ) )
assertEquals ( 0 , list . size ( ) )
assertTrue ( "Modified service should be tracked" , tracker . isServiceTracked ( ref , service ) )
assertTrue ( "Modified service should have sync handler set" , ref . getSyncHandlerName ( ) . equals ( "testSH" ) )
assertNotNull ( getAuthInfo ( ) )
assertNotNull ( getAuthInfo ( ) )
assertNotNull ( id )
assertNotNull ( getAuthorizable ( principal ) )
assertEquals ( 5 , props . getInitialSize ( ) )
assertEquals ( null , keyMapping . get ( convert ( key ) ) )
assertEquals ( authorizable , focalMethodReturnValue )
assertNotNull ( getName ( ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertNotNull ( id )
assertNull ( group )
assertIfEquals ( "Group members" , TEST_GROUP1_MEMBERS , grp . getDeclaredMembers ( ) )
assertEquals ( 0 , memberrefs . spliterator ( ) . getExactSizeIfKnown ( ) )
assertIfEquals ( "Groups" , TEST_USER1_GROUPS , id . getDeclaredGroups ( ) )
assertEquals ( 0 , Iterables . size ( groupIds ) )
assertEquals ( expectedIds , Sets . newHashSet ( ids ) )
assertNotNull ( config . getName ( ) )
assertEquals ( encodedValue , encodeFilterValue ( value ) )
assertEquals ( encodedValue , encodeFilterValue ( value ) )
assertEquals ( validator , getValidator ( ) )
assertEquals ( buffer , lc . getBuffer ( ) )
assertEquals ( IllegalArgumentException . class , assertThrows ( IllegalArgumentException . class , ( ) -> validate ( path ) ) )
assertEquals ( null , connection . lookup ( Dn . ROOT_DSE , SchemaConstants . NO_ATTRIBUTE ) )
assertNotNull ( id )
assertNotNull ( id )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( effective )
assertEquals ( Sets . newHashSet ( MIX_REP_CUG_MIXIN ) , tree . getProperty ( JcrConstants . JCR_MIXINTYPES ) . getValues ( ) )
AssertPlaceHolder = "assertNotNull(acMgr);"
assertSame ( EmptyPermissionProvider . getInstance ( ) , permissionProvider )
assertNotNull ( permissionProvider )
assertNotNull ( defConfig . getParameters ( ) )
assertEquals ( true , cc . isCugEnabled ( ) )
assertEquals ( defaultValue , getConfigValue ( key , defaultValue ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( "rep:CugPolicy" , getTargetNode ( ) . getProperty ( "jcr:primaryType" ) . getString ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertTrue ( "Tree should exist" , tree . exists ( ) )
assertEquals ( ImportBehavior . ABORT , createCugPolicy ( ImportBehavior . ABORT , principals ) )
assertEquals ( "" , empty . getPath ( ) )
assertEquals ( "/oak:testPath" , empty . getPath ( ) )
assertEquals ( expected , defaultMountInfoProvider ( ) . getSupportedPaths ( ) )
assertNotNull ( connection )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( connection )
assertThat ( immutableRoot , hasProperty ( "name" ) )
assertEquals ( message , tlp . containsNoCug ( p ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertSame ( t . getPath ( ) , TreePermission . NO_RECOURSE , tp )
assertEquals ( VersionConstants . JCR_UUID , versionable . getProperty ( VersionConstants . JCR_UUID ) . getValue ( Type . STRING ) )
atp . getTree ( ) . equals ( getTree ( selectorName ) )
assertNotNull ( pp )
assertEquals ( PrincipalBasedAccessControlManager . class , acMgr . getClass ( ) )
assertEquals ( exists , tree . exists ( ) )
assertNotNull ( getUserManager ( ) )
assertEquals ( EMPTY , ConfigurationParameters . of ( new Hashtable < > ( ) ) )
assertNotNull ( getFilterRoot ( ) )
AssertPlaceHolder = "assertNotNull(filter);"
assertNotNull ( getTestSystemUser ( ) )
assertEquals ( pm , getPrincipalManager ( ) )
assertSame ( pm , mgrProvider . getPrivilegeManager ( ) )
assertEquals ( pbp , mgrProvider . getPrivilegeBitsProvider ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( 1 , rootState . getChildNodeCount ( REP_PRINCIPAL_POLICY ) )
AssertPlaceHolder = "Assert.assertEquals(AccessControlPolicyIteratorAdapter.EMPTY, mgr.getApplicablePolicies(absPath));"
assertThat ( effective . length , is ( 1 ) )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( expectedSize , entries . get ( principalName ) . getSize ( ) )
assertEquals ( jcrName , mockPropInfo ( jcrName ) . getName ( ) )
assertEquals ( null , focalMethod ( mockPropertyDefinition ( "jcrName" ) ) )
assertEquals ( NT_REP_PRINCIPAL_POLICY , t . getProperty ( REP_PRINCIPAL_POLICY ) . getValue ( ) . getString ( ) )
assertThat ( hasProperty ( oakPath ) , is ( true ) )
assertEquals ( false , watch . isRunning ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertEquals ( RepositoryPermission . EMPTY , testObject . getRepositoryPermission ( ) )
assertNotNull ( applicable )
assertEquals ( "expected size is 0" , 0 , acl . size ( ) )
assertEquals ( false , mockTree ( false , "name" , "type" ) . exists ( ) )
assertEquals ( "wrongName" , tree . getName ( ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( tp . getTree ( ) , ( ( AbstractTreePermission ) versionTp ) . getTree ( ) )
assertEquals ( tp . getTree ( ) , ( ( AbstractTreePermission ) labelsTp ) . getTree ( ) )
assertEquals ( frozenTp . getTree ( ) , tp . getTree ( ) )
assertThat ( identifiers , containsInAnyOrder ( ds . getAllIdentifiers ( ) . toArray ( ) ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( null , backend . getRecord ( identifier ) )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( service , getService ( ) )
assertEquals ( blobLength , length )
assertEquals ( 0 , existingAfterGC . size ( ) )
assert existingAfterGC . isEmpty ( )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( KEYS + misses , cacheStats . getElementCount ( ) )
assertThat ( retrieved , containsInAnyOrder ( added . toArray ( ) ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( "<Expected Value>" , "<Actual Value>" )
assertThat ( retrieved , containsInAnyOrder ( initAdd . toArray ( ) ) )
assertEquals ( initAdd , retrieved )
assertEquals ( initAdd , retrieved )
assertEquals ( initAdd , retrieved )
assertThat ( retrieved , containsInAnyOrder ( initAdd . toArray ( ) ) )
assertNotNull ( props . getProperty ( "name" ) )
assertEquals ( "FileDataStore" , System . getProperty ( DS_CLASS_NAME ) )
assertEquals ( 0 , noop . size ( ) )
assertEquals ( uri , getDataStore ( ) . getDownloadURI ( record . getIdentifier ( ) , DataRecordDownloadOptions . DEFAULT ) )
assertEquals ( null , ds . getDownloadURI ( blob , downloadOptions ) )
assertEquals ( "Expected download URI is not null" , true , getDownloadURI ( blob , downloadOptions ) != null )
assertThrows ( NullPointerException . class , ( ) -> getDownloadURI ( blob , downloadOptions ) )
assertNull ( b . getNewStream ( ) )
assertEquals ( true , closed . get ( ) )
assertEquals ( 0 , ret . size ( ) )
assertCollectedSize ( collector . size , size )
assertEquals ( "Test string" , iCharacter )
assertEquals ( list , retrieved )
assertEquals ( list , retrieved )
assertEquals ( e . getKey ( ) , getKey ( ) )
AssertPlaceHolder = "assertEquals(1, runnable.getCount());"
assertEquals ( "100" , tree . getPropertyCount ( ) )
assertEquals ( 1 , logs . size ( ) )
assertNotNull ( name ( ) )
assertEquals ( ( KEYS - ( double ) misses - fails ) / KEYS , cacheStats . getHitRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getMissCount ( ) )
assertEquals ( ( ( double ) misses + fails ) / KEYS , cacheStats . getMissRate ( ) , Double . MIN_VALUE )
assertEquals ( misses + fails , cacheStats . getLoadCount ( ) )
assertEquals ( null , test . put ( null , 10 , 100 ) )
assertEquals ( null , lookup ( context , "name" ) )
assertEquals ( "" , lookup ( context , "name" ) )
assertEquals ( "42" , lookup ( context , "name" ) )
assertEquals ( "value" , lookup ( context , "name" ) )
assertEquals ( null , context . getBundleContext ( ) . getProperty ( "name" ) )
assertEquals ( "" , context . getProperty ( "name" ) )
assertEquals ( " " , context . getBundleContext ( ) . getProperty ( "name" ) )
assertEquals ( "value" , context . getProperty ( "name" ) )
assertEquals ( cs1 , cs2 )
assertEquals ( 3 , whiteboard . getServiceCount ( Service1 . class ) )
assertEquals ( 0 , meterStats . getCount ( ) )
assertNotNull ( cs . getWorkspace ( ) . getName ( ) )
assertNotNull ( getBlob ( reference ) )
assertSame ( permissionProvider , pp )
assertEquals ( null , child )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getChildNode ( "name" ) )
assertEquals ( null , ns )
assertEquals ( ns , getNodeState ( tree ) )
assertNotNull ( ns )
assertEquals ( "size of list must be 1 after adding an entry" , 1 , list . size ( ) )
assertEquals ( "size after removing property must be 0" , 0 , secureNodeBuilder . size ( ) )
assertEquals ( "a" , getName ( ) )
assertEquals ( "value" , getName ( ) )
assertEquals ( "anothervalue" , secureNodeBuilder . getProperty ( NAME_NON_ACCESSIBLE ) )
secureNodeBuilder . should ( not ( hasProperty ( "prop" ) ) )
assertNotNull ( getOakPath ( validPrincipal ) )
assertThrows ( Exception . class , ( ) -> getOakPath ( validPrincipal ) )
assertNotNull ( getProperty ( name ) )
assertEquals ( null , p )
assertEquals ( null , p )
assertEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( OUR_VALUE , p . getValue ( ) )
assertEquals ( true , cleaned . get ( ) )
assertEquals ( 2 , provider . getCallbacks ( ) . size ( ) )
assertEquals ( 2 , provider . getCallbacks ( ) . size ( ) )
assertEquals ( newArrayList ( "/file" ) , actual )
assertThat ( statsMBean ) . hasStatus ( IndexStatsMBean . STATUS_RUNNING )
assertThat ( idxBuilder , hasProperty ( "barIndexProp" , equalTo ( "barbar" ) ) )
assertEquals ( "foo" , info2 . getCheckpoint ( ) )
assertThat ( updater . contains ( message ) ) . isTrue ( )
assertEquals ( expectedLogs , getLogs ( ) )
assertArray ( cd , "values" , asList ( "x" ) )
assertThat ( callbackInvoked . get ( ) ) . isTrue ( )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 0 , disabledIndexes . size ( ) )
assertEquals ( 5 , meterStats . getCount ( ) )
assertNotNull ( statsProvider . getTimer ( Type . SESSION_READ_DURATION . name ( ) , StatsOptions . TIME_SERIES_ONLY ) )
assertEquals ( "NONE" , service . getProviderType ( ) )
assertEquals ( "/content" , decorated . getPath ( ) )
assertNotNull ( frozenNode )
assertNotNull ( property )
assertEquals ( new Date ( t0 + 1000 ) , getTime ( Clock . ACCURATE . getTime ( ) ) )
assertNotNull ( condition )
assertNotNull ( createFilter ( before , after ) )
assertNotNull ( createFilter ( before , after ) )
assertEquals ( filter , new GlobbingPathFilter ( "q" ) )
assertEquals ( filter , new GlobbingPathFilter ( STAR ) )
assertEquals ( value , p . test ( createWithProperty ( name , value ) ) )
assertEquals ( value , createWithProperty ( name , value ) . getProperty ( name ) . getValue ( STRING ) )
assertNotNull ( selectDescendant ( ) )
assertEquals ( true , root . isRoot ( ) )
assertNotNull ( getChild ( "name" ) )
assertNotNull ( getHiddenTree ( immutable ) )
orderable . shouldNotBeNull ( )
assertNull ( f , "Filter should be null" )
assertEquals ( sql2 , "<expected value>" )
assertEquals ( count , 10 )
assertEquals ( q , token )
assertNotNull ( plan . getAttribute ( "foo" ) )
assertNull ( sc )
assertEquals ( expected , context . registerInjectActivateService ( authenticationConfiguration , ConfigurationParameters . of ( PARAM_APP_NAME , "name" ) ) )
assertNotNull ( getName ( ) )
assertSame ( wb , lcp . getWhiteboard ( ) )
assertEquals ( "" , cb . getPassword ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( cb . getName ( ) )
assertEquals ( null , authInfo )
assertEquals ( anonymousID , authInfo . getUserId ( ) )
assertNotNull ( getAuthInfo ( ) )
assertNull ( authenticate ( creds ) )
assertEquals ( "LoginException expected" , e . getClass ( ) , LoginException . class )
assertEquals ( true , auth . authenticate ( tc ) )
assertEquals ( true , auth . authenticate ( tc ) )
assertNotNull ( getName ( ) )
tp . assertNotNull ( tp )
assertNotNull ( ctx )
assertEquals ( 0 , keyMapping . size ( ) )
assertEquals ( 0 , tokens . getChildren ( ) . size ( ) )
assertNotNull ( getAuthInfo ( ) )
assertEquals ( "Token info can only be retrieved after successful authentication." , exception . getMessage ( ) )
assertEquals ( 1 , 1 )
assertNotNull ( readOnlyInfo )
assertEquals ( info , null )
assertEquals ( token , getTokenInfo ( ) . getToken ( ) )
assertEquals ( 50 , cnt )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( StatusCode . INVALID_TOKEN , e . getCode ( ) )
assertEquals ( StatusCode . INVALID_PATH , e . getStatusCode ( ) )
assertEquals ( StatusCode . COMMIT_FAILED , e . getCode ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertNotNull ( authInfo . getUserId ( ) )
assertNotNull ( getName ( ) )
assertEquals ( treeProvider , ac . getTreeProvider ( ) )
assertEquals ( mip , f . get ( authorizationConfiguration ) )
assertEquals ( tree . getPath ( ) , defPath )
assertEquals ( RestrictionType . REP_SUBTREES , getRestrictionType ( null ) )
assertEquals ( map . getRecordId ( ) , mapInfo . mapId )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( mockJackrabbitSession ( ) . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertNotNull ( getNamePathMapper ( ) )
assertThat ( watch . isRunning ( ) ) . isFalse ( )
AssertPlaceHolder = "assertTrue(watch.isRunning());"
assertEquals ( ImmutableList . of ( unknownPrincipalInfo , privs ) , importer . getChildInfo ( ) )
assertEquals ( privilege . getName ( ) , privilegeName )
assertEquals ( policy . getClass ( ) , expectedPolicyClass )
assertPolicies ( acMgr . getPolicies ( testPath ) , 0 )
assertPolicies ( acMgr . getPolicies ( ( String ) null ) , 0 )
assertNotNull ( applicable )
assertNotNull ( policies [ 0 ] )
assertNotNull ( of ( properties ) )
assertNotNull ( effective )
ace . getBits ( "JCR_READ" , "JCR_READ" )
assertEquals ( val , nameValue )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 2 , acl . getAccessControlEntries ( ) . size ( ) )
assertEquals ( 0 , acl . getAccessControlEntries ( ) . length )
assertEquals ( store . getHead ( ) , backup . getHead ( ) )
assertEquals ( policy1 . getPath ( ) , null )
assertEquals ( policy2 . getPath ( ) , null )
assertEquals ( expected , "/some/path1" . compareTo ( "/some/path2" ) )
assertEquals ( expected , Ints . compare ( PathUtils . getDepth ( "/path" ) , PathUtils . getDepth ( "/a/deeper/path" ) ) )
assertEquals ( expectedAcl , actualAcl )
assertTrue ( found )
assertEquals ( false , t . exists ( ) )
assertNotNull ( getInstance ( root , namePathMapper ) )
assertEquals ( cnt , expectedCount )
assertNotNull ( applicable )
assertEquals ( 1 , composite . getPolicies ( EveryonePrincipal . getInstance ( ) ) . length )
assertNotNull ( accessControlManager )
assertEquals ( rp , ac . getRestrictionProvider ( ) )
AssertPlaceHolder = "assertNotNull(accessControlManager);"
assertEquals ( 2 , cc . getAuthorizationConfigurations ( ) . size ( ) )
assertEquals ( mock ( RestrictionProvider . class ) , rp )
assertSame ( RestrictionProvider . EMPTY , rp )
assertNotNull ( tp )
assertEquals ( tp , createPermissionProvider ( ) . getTreePermission ( rootTree , TreePermission . EMPTY ) )
assertEquals ( tp , createPermissionProviderOR ( ) . getTreePermission ( rootTree , TreePermission . EMPTY ) . getChildPermission ( childNames . get ( 0 ) , ns ) )
assertTrue ( cugPermProvider . getPrivileges ( tree ) . isEmpty ( ) )
assertTrue ( expected . equals ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertNotNull ( tpField )
assertTrue ( expected . equals ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) ) )
assertEquals ( true , a . hasProperty ( "name" ) )
assertEquals ( 3 , tree . getPropertyCount ( ) )
assertNotNull ( a )
assertThat ( a , hasProperty ( propName ) )
assertNotNull ( a . getPropertyStatus ( propName ) )
assertEquals ( 3 , tree . getChildrenCount ( 4 ) )
assertEquals ( expected , testAcMgr . getPrivileges ( getTestRoot ( ) ) )
assertThat ( a , hasProperty ( "<property_name>" ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotEquals ( false , dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( max , num )
assertEquals ( validator , maValidator . childNodeAdded ( "name" , mock ( NodeState . class ) ) )
assertSame ( TreePermission . EMPTY , actualPermission )
assertEquals ( maxPaths + 1 , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertEquals ( maxPaths + 1 , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertEquals ( Long . MAX_VALUE , store . getNumEntries ( anyString ( ) , anyLong ( ) ) . getValue ( ) )
assertFalse ( "Non-empty list should be non-empty" , list . isEmpty ( ) )
assertEquals ( 5 , entries . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "empty" , h2 . toString ( ) )
assertEquals ( null , getName ( ) )
assertEquals ( ZERO , NumEntries . valueOf ( 0 , false ) )
assertEquals ( ZERO , everyoneTree . getProperty ( REP_NUM_PERMISSIONS ) )
assertFalse ( ps . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 0 , privilegeNames . size ( ) )
assertEquals ( null , getReadOnlyTreeOrNull ( null , r ) )
tp . assertHasParentPermission ( parentPermission )
assertEquals ( name , parent . getName ( ) )
assertEquals ( 1 , gp . getPatterns ( ) . size ( ) )
assertEquals ( sc , ConfigurationInitializer . getConfiguration ( ) )
assertEquals ( sc . getParameters ( ) , defConfig . getParameters ( ) )
assertNotNull ( getWhiteboard ( ) )
assertSame ( uc , securityProvider . getConfiguration ( UserConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertSame ( ac , securityProvider . getConfiguration ( AuthorizationConfiguration . class ) )
assertSame ( pc , securityProvider . getConfiguration ( PrivilegeConfiguration . class ) )
assertEquals ( 5 , entries . length )
assertEquals ( true , f . get ( registration ) )
assertEquals ( mockConfiguration , registration . getBoundAuthorizationConfiguration ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( principalName , umMock . getAuthorizable ( new PrincipalImpl ( principalName ) ) . getName ( ) )
assertEquals ( userMock , um . getAuthorizable ( p ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( um )
assertNotNull ( findPrincipals ( null ) )
assertEquals ( 1 , umMock . findAuthorizables ( any ( Query . class ) ) )
assertEquals ( 1 , membership . size ( ) )
assertEquals ( aggregates . size ( ) , expectedSize )
assertEquals ( true , privilegesTree . exists ( ) )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertNotNull ( copyOf ( ) )
assertNotNull ( getName ( ) )
assertEquals ( new ExternalIdentityRepositoryInitializer ( protectedExternalIds ( ) ) , getRepositoryInitializer ( ) )
assertEquals ( property . getName ( ) , propName )
assertEquals ( 0 , treeProvider . getTree ( ) . size ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertNull ( readDefinition ( privilegeName ) )
assertNotNull ( getName ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( 5 , testGroup . getMembers ( ) . size ( ) )
assertNotNull ( copyOf ( ) )
assertEquals ( t , root . getTree ( authorizable . getPath ( ) ) )
assertEquals ( "-1" , getSize ( indexPath ) )
assertThat ( names ) . containsExactlyElementsIn ( expected )
assertNotNull ( getProperty ( "name" ) )
assertNotNull ( properties . getProperty ( "mvProp" ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( "expected size is incorrect" , expectedSize , list . size ( ) )
assertEquals ( "dmp.coversAllMembers(any(Group.class)) should return true" , true , dmp . coversAllMembers ( any ( Group . class ) ) )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertEquals ( "expected size after removing an item" , expectedSize , list . size ( ) )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( 1 , members . size ( ) )
assertNull ( getAuthorizable ( external , type ) )
assertEquals ( 1 , members . size ( ) )
assertEquals ( 1 , verifyMonitor ( 1 , true ) )
assertEquals ( true , groupPrincipal . isMember ( getTestUser ( ) ) )
assertEquals ( 2 , impersonators . size ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( principals , subject . getPrincipals ( ) )
assertEquals ( 1 , createSubject ( principals ) . getPrincipals ( ) . size ( ) )
assertNull ( getPrincipal ( "nonExistingGroup" ) )
assertEquals ( null , imp . lookupUser ( nonExisting ) )
assertNull ( createAuthorizable ( false , null ) )
assertEquals ( UserConstants . DEFAULT_USER_PATH + "/a/b/c" , authorizable . getPath ( ) )
assertEquals ( UserConstants . DEFAULT_GROUP_PATH + "/a/b/c" , authorizable . getPath ( ) )
assertNotNull ( authorizable )
assertEquals ( 0 , gr . getTree ( selectorName ) . getMembers ( ) . size ( ) )
assertEquals ( 0 , failed . size ( ) )
assertEquals ( true , getTree ( selectorName ) . isDeclaredMemberTransient ( ) )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( id , grp . getMembers ( ) . contains ( id ) )
assertEquals ( memberDN , attribute . getValue ( ) )
assertNotNull ( g . getTree ( selectorName ) )
assertThrows ( LoginException . class , ( ) -> authenticate ( expiredPw , newPw ) )
assertEquals ( 0 , root . getTree ( user . getPath ( ) ) . getChild ( UserConstants . REP_PWD ) . getProperty ( UserConstants . REP_PASSWORD_LAST_MODIFIED ) )
assertEquals ( newModTime , user . getPasswordLastModified ( ) )
assertEquals ( 0 , getTestUser ( ) . getProperty ( UserConstants . REP_PASSWORD_LAST_MODIFIED ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNull ( getTree ( selectorName ) )
assertEquals ( "expected size after changing password" , expectedSize , list . size ( ) )
assertNotNull ( getTree ( selectorName ) )
assertNotNull ( failed )
assertEquals ( 2 , testGroup . getMembers ( ) . size ( ) )
assertNotNull ( userTree . getProperty ( "name" ) )
assertEquals ( "testRelPath" , u . getName ( ) )
assertNotNull ( user )
assertNotNull ( user )
assertNotNull ( authentication )
assertNull ( authenticate ( creds ) )
assertEquals ( null , a . authenticate ( sc ) )
assertEquals ( AuthenticationStatus . SUCCESS , a . authenticate ( creds ) )
assertNotNull ( a )
assertEquals ( userId , sc . getUserID ( ) )
AssertPlaceHolder = "assertNotNull(ua.authenticate(credentials));"
assertNotNull ( authenticate ( credentials ) )
assertEquals ( userId , authentication . getUserPrincipal ( ) . getName ( ) )
params . get ( PARAM_DEFAULT_DEPTH ) . equals ( "8" )
assertEquals ( defines , property . defines ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertEquals ( ntName , tree . getPath ( ) )
assertNotNull ( admin )
assertThat ( importer , hasProperty ( "name" ) )
assertThat ( importer , hasProperty ( "<property_name>" ) )
assertNotNull ( getNamePathMapper ( ) )
assertEquals ( umgr , uc . getUserManager ( root , getNamePathMapper ( ) ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertEquals ( s . getPrincipalManager ( ) , getPrincipalManager ( root ) )
assertNotNull ( def . getDeclaringNodeType ( ) )
assertEquals ( buildPasswordHash ( "password" ) , "<expected value>" )
assertEquals ( "expectedValue" , actualValue )
assertEquals ( false , def . isMultiple ( ) )
assertEquals ( "testGroup" , groupTree . getName ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertEquals ( true , watch . isRunning ( ) )
assertEquals ( 1 , repMembers . getChildrenCount ( ) )
assertEquals ( 0 , watch . getTime ( ) )
AssertPlaceHolder = "assertFalse(tree.exists());"
assertEquals ( NT_REP_MEMBER_REFERENCES_LIST , memberRefList . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) )
assertEquals ( NT_REP_MEMBERS , repMembers . getProperty ( JcrConstants . JCR_PRIMARYTYPE ) )
assertEquals ( "sid" , su . getUserId ( ) )
assertNull ( getAuthorizable ( principal ) )
assertNotNull ( getAuthorizable ( external , type ) )
assertNull ( getAuthorizable ( null , null ) )
assertNull ( getAuthorizable ( null ) )
assertEquals ( authorizable . getPath ( ) , byPath . getPath ( ) )
assertNull ( getAuthorizable ( null ) )
assertNull ( getAuthorizable ( principal ) )
assertEquals ( principal . getName ( ) , user . getPrincipal ( ) . getName ( ) )
assertNotNull ( principal )
assertNull ( principal )
assertNull ( t . getProperty ( REP_PRINCIPAL_NAME ) )
assertNotNull ( getPrincipals ( searchType ) )
assertNotNull ( principalsAgain )
assertNull ( getAuthorizable ( user ) )
assertEquals ( 1 , policies . length )
assertEquals ( "expectedId" , dlg . getID ( ) )
assertNull ( getPrincipal ( principalName ) )
assertEquals ( 1 , timesInvoked ( dlg , "removeProperty" ) )
assertEquals ( "" , dlg . getPath ( ) )
assertNotNull ( it . next ( ) )
assertEquals ( 3 , group . getMembers ( ) . size ( ) )
assertThat ( dlg , times ( 1 ) ) . removeMembers ( "u" , getTestUser ( ) . getID ( ) )
assertEquals ( path , "/configured/user_and_group/path" )
assertEquals ( ntNames . size ( ) , 3 )
assertEquals ( Text . escapeIllegalJcrChars ( name ) , escapeNodeName ( name ) )
assertEquals ( "'string\\\\value" , escapeForQuery ( value ) )
assertEquals ( before , after )
assertEquals ( EMPTY , ConfigurationParameters . of ( properties ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( rrta )
assertEquals ( "g2" , result . next ( ) . getID ( ) )
assertEquals ( 2 , visitor . getVisitedConditions ( ) . size ( ) )
assertEquals ( "expectedSortProperty" , getSortProperty ( ) )
assertThat ( c ) . isTrue ( )
assertThat ( c ) . isEqualTo ( condition . or ( condition2 ) )
assertEquals ( authorizableId . length ( ) , generateNodeName ( authorizableId ) . length ( ) )
assertEquals ( null , factory . getUserConfiguration ( ) )
assertThat ( recorder . includedChanges , contains ( expected . toArray ( ) ) )
assertNotNull ( props . get ( "type" ) )
assertNotNull ( authInfo . getPrincipals ( searchType ) )
assertEquals ( expectedID , anonymousID )
assertNotNull ( testSession . getAuthInfo ( ) )
assertNotNull ( getString ( ) )
assertFalse ( permissionStoreTree . exists ( ) )
assertFalse ( testRoot . hasNode ( testPath ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
AssertPlaceHolder = "Assert.assertNotNull(effectivePolicies);"
assertNotNull ( expected )
assertEquals ( true , hasPrivilege )
assertEquals ( expectedPw , systemUserTree . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertNotNull ( nodeName )
assertNotNull ( getValue ( key ) )
assertEquals ( expected , new PathRev ( path , rv ) )
assertNotNull ( system )
assertNull ( r2 . getTree ( "/c" ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertThat ( store . checkpointInfo ( checkpoint ) , equalTo ( info ) )
assertEquals ( true , store . release ( checkpoint ) )
assertNotNull ( retrievedBlob )
assertNotNull ( retrievedBlob )
assertNotNull ( validator )
assertNotNull ( c )
assertNotNull ( child . getName ( ) )
assertNotNull ( x . getChild ( "added" ) )
assertEquals ( 1 , ClusterRepositoryInfo . getClusterId ( ds1 ) )
assertNotNull ( dataStoreStats )
assertNotNull ( getAuthorizable ( new Principal ( "testUser" ) ) )
assertEquals ( 1 , aces . length )
assertNotNull ( dataStoreStats )
assertThat ( store . checkpointInfo ( cp ) , equalTo ( props ) )
assertEquals ( path , copiedRecsFile . getPath ( ) )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertNotEquals ( base , added . getBaseState ( ) )
assertEquals ( 3 , tree . getPropertyCount ( ) )
assertNotNull ( n . getNodeOrNull ( "child" ) )
assertNotNull ( n . getPropertyOrNull ( "prop" ) )
assertEquals ( "abc" , root . getProperty ( "test" ) . getString ( ) )
assertEquals ( new String [ ] { "abc" , "def" } , root . getProperty ( "test" ) . getValues ( ) )
assertEquals ( "jcr:primaryType" , property . getName ( ) )
assertEquals ( "Path should not exist after removal" , false , s1 . nodeExists ( path ) )
assertEquals ( n . getPath ( ) , n2 . getPath ( ) )
assertEquals ( "/new" , n . getPath ( ) )
assertEquals ( "/parent/new" , n2 . getPath ( ) )
assertEquals ( "/moved" , n . getPath ( ) )
assertEquals ( "/moved" , n . getPath ( ) )
assertEquals ( "/moved" , n2 . getPath ( ) )
assertEquals ( "/moved/new" , n . getPath ( ) )
assertEquals ( "/moved/new" , n2 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
assertEquals ( destPath , node1 . getPath ( ) )
repository . assertNotNull ( )
assertEquals ( value , property . getLong ( ) )
assertEquals ( childPath , child . getPath ( ) )
assertNotNull ( getPath ( ) )
assertNotNull ( descriptors . getValue ( key ) )
assertNotNull ( n . getName ( ) )
assertNotNull ( n . getName ( ) )
assertEquals ( null , getConfigurableHttpDataRecordProvider ( ) . setDirectDownloadURIExpirySeconds ( REGULAR_READ_EXPIRY ) )
assertNull ( upload )
assertEquals ( null , downloadURI )
assertEquals ( nt , testRootNode . getPrimaryNodeType ( ) )
assertEquals ( 90 , count )
assertEquals ( "/etc/p1/p2/r" , n . getPath ( ) )
assertEquals ( 0 , testAcMgr . getPolicies ( acl . getPath ( ) ) . length )
assertNotNull ( e . getMessage ( ) )
assertEquals ( RestrictionType . REP_SUBTREES , getRestrictionType ( name ) )
assertEquals ( pPath , p . getPath ( ) )
assertTrue ( testSession . checkPermission ( childPath , Session . ACTION_READ ) )
assertEquals ( 2 , childNodeNames . size ( ) )
assertThat ( n , hasProperty ( propertyName1 , equalTo ( "modified" ) ) )
assertThat ( n , hasProperty ( propertyName1 ) )
assertThat ( n , not ( hasProperty ( propertyName1 ) ) )
assertEquals ( "Version should not be removed without jcr:versionManagement privilege" , 1 , testNode . getVersionHistory ( ) . getAllVersions ( ) . getSize ( ) )
assertEquals ( versionablePath . getName ( ) , superuser . getWorkspace ( ) . getName ( ) )
assertNotNull ( pp . getName ( ) )
assertNotNull ( memb . getName ( ) )
assertNotNull ( memb )
assertNull ( getProperty ( name ) )
assertEquals ( path , gr . getPath ( ) )
assertEquals ( path , user . getPath ( ) )
assertNull ( getPrincipal ( "testPrincipal" ) )
assertEquals ( true , memberOfEveryone )
assertEquals ( found , true )
AssertPlaceHolder = "Assert.assertTrue(!entry.containsGroup(group));"
assertTrue ( auth instanceof Authorizable )
assertTrue ( auth instanceof Authorizable )
assertEquals ( a , it . next ( ) )
assertEquals ( 0 , newGroup . getMembers ( ) . size ( ) )
assertNotNull ( userManager . getAuthorizable ( principal ) )
assertEquals ( "Invalid path " + path , e . getMessage ( ) )
assertNotNull ( u . getID ( ) )
assertEquals ( id , gr . getID ( ) )
assertNull ( getAuthorizable ( new SimplePrincipal ( uid ) ) )
assertNotNull ( authorizable )
assertEquals ( "changed" , user . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertEquals ( hash , getNode ( user , superuser ) . getProperty ( UserConstants . REP_PASSWORD ) . getString ( ) )
assertEquals ( true , c . getProperty ( "reindex" ) . getBoolean ( ) )
assertEquals ( 1 , counter . getProperty ( "oak:increment" ) . getValue ( ) . getLong ( ) )
assertEquals ( "t1" , remote . listAll ( ) [ 0 ] )
assertEquals ( fileNames . size ( ) , files . size ( ) )
assertEquals ( 1 , planner . getSortEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . getEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . getEntries ( ) . size ( ) )
assertEquals ( 1 , basePlans . size ( ) )
assertNotNull ( planner . getPlan ( "/foo" ) )
assertEquals ( 1 , basePlans . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/test/a" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/foo" ) . size ( ) )
assertNotNull ( planner )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "jcr:content/*" ) . getAggregates ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "jcr:content/*" ) . size ( ) )
assertEquals ( 2 , planner . getPlans ( ) . size ( ) )
assertEquals ( plan . getSelectionPolicy ( ) , IndexSelectionPolicy . TAG )
assertEquals ( 2 , stats . numDocs ( ) )
assertEquals ( 0 , stats . numDocs ( ) )
assertEquals ( "jcr:primaryType of index " + invalidJcrPrimaryTypeIndexName + " should be oak:QueryIndexDefinition instead of " + invalidJcrPrimaryTypeForIndex , logs . get ( 0 ) )
assertEquals ( "jcr:primaryType of index " + invalidJcrPrimaryTypeIndexName + " should be oak:QueryIndexDefinition instead of " + invalidJcrPrimaryTypeForIndex , logs . get ( 0 ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( "v2" , getVersion ( ) )
assertEquals ( "V1" , defn . getCompatibilityMode ( ) )
assertNotNull ( getApplicableIndexingRule ( primaryNodeType ) )
assertEquals ( editorProvider . getIndexingQueue ( ) , mock ( DocumentQueue . class ) )
assertEquals ( "async" , info . getName ( ) )
assertNotNull ( getProperty ( "name" ) )
assertEquals ( V2 , IndexFormatVersion . getDefault ( ) )
assertEquals ( mock ( PreExtractedTextProvider . class ) , service . getExtractedTextProvider ( ) )
assertEquals ( true , editorProvider . isAlwaysUsePreExtractedCache ( ) )
assertEquals ( 0 , sr . length )
assertEquals ( "explain test1" , explain ( "test1" ) )
assertThat ( explain ( query ) , containsString ( "test/a" ) )
assertEquals ( loader . openResource ( "foo" ) , new ByteArrayInputStream ( testData ) )
assertEquals ( 0 , executionCount . get ( ) )
assertEquals ( f1 , f2 )
assertTrue ( "Directory should not be empty" , dir . nonEmptyDir ( ) )
assertEquals ( dataSize , input . length ( ) )
assertEquals ( fileSize , dir . fileLength ( fileName ) )
assertNotNull ( queue )
assertEquals ( 2 , index . numDocs ( ) )
assertEquals ( 0 , list . size ( ) )
assertNotNull ( current )
assertEquals ( readers , readers3 )
assertThat ( explain ( query ) ) . isEqualTo ( "expected result" )
assertEquals ( Double . NEGATIVE_INFINITY , test . getProperty ( FulltextIndexConstants . FIELD_BOOST ) )
assertEquals ( "HELLO" , test . getPropertyValue ( FulltextIndexConstants . PROP_FUNCTION ) )
assertEquals ( 100 , bs . getBucket ( ) )
assertNotNull ( bs . getBucket ( 100 ) )
assertEquals ( 1 , f . getRestrictions ( ) . size ( ) )
assertThat ( paths ) . containsExactly ( "/a" )
assertThat ( newString ( "bar" ) . getString ( ) , is ( equalTo ( "bar" ) ) )
assertThat ( callback . getUniqueProperties ( ) ) . containsOnly ( "foo" )
assertEquals ( "Unique property constraint violated" , e . getMessage ( ) )
assertEquals ( "Unique property index should have thrown CommitFailedException" , CommitFailedException . class , e . getClass ( ) )
assertEquals ( 0 , builder . child ( "a" ) . getProperty ( PROP_CREATED ) )
assertEquals ( 0 , readers . size ( ) )
assertEquals ( facetsConfigProvider . getFacetsConfig ( ) , FacetHelper . getFacetsConfig ( root . builder ( ) ) )
assertEquals ( true , session . nodeExists ( path ) )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( expectedTokens . get ( i ) , token )
assertEquals ( writer . isOpen ( ) , true )
assertEquals ( 1 , writer . getIndexWriter ( ) . numDocs ( ) )
assertEquals ( writerConfig , w . getConfig ( ) )
assertEquals ( sortStrategy . getClass ( ) , DefaultSortStrategy . class )
assertEquals ( 0 , flatFileList . size ( ) )
assertNotNull ( a . getPath ( ) )
assertNull ( list . get ( list . size ( ) - 1 ) )
assertEquals ( blobId , "<expected_blob_id>" )
assertNotNull ( p2 . getProperty ( "foo" ) )
assertClusterInvisible ( store )
getOptionBean ( CommonOptions . class ) != null
assertNotNull ( is )
assertEquals ( value , nodeState2 . getProperty ( property ) )
assertThrows ( ClassNotFoundException . class , ( ) -> command . checkTikaDependency ( ) )
assertThat ( config1 , is ( equalTo ( config2 ) ) )
assertEquals ( IOUtils . toString ( new FileInputStream ( output ) , StandardCharsets . UTF_8 ) , buildIndexes . toString ( ) )
assertEquals ( new Revision ( i , 0 , 1 ) , map . get ( Path . fromString ( "/some/test/path/node-" + i ) ) )
assertEquals ( 2 , files . count ( ) )
assertEquals ( output . contains ( message ) , true )
assertEquals ( client1 , client2 )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( 1 , planner . getSortEntries ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . getPaths ( ) . size ( ) )
assertNotNull ( planner )
assertNotNull ( planner )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlans ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/test2" ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . getPaths ( ) . size ( ) )
assertEquals ( 1 , planner . getPlan ( "/oak:index/" + indexName ) . size ( ) )
assertEquals ( 10 , counter . get ( ) )
assertEquals ( 0 , cache . getCacheStats ( ) . size ( ) )
assertEquals ( "foo" , text )
assertEquals ( "foo" , text )
assertEquals ( seed1 , seed2 )
assertEquals ( rule , getApplicableIndexingRule ( primaryNodeType ) )
assertEquals ( new File ( "/foo" ) , extractor . getIndexDefinition ( ) . getRoot ( ) )
assertEquals ( 0 , builder . getLimit ( ) )
assertNotNull ( estimate )
assertEquals ( mse , currentMSE )
assertEquals ( value , state . getProperty ( property ) )
assertEquals ( "y" , test . getProperty ( "foo" ) . getString ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getName ( ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( result )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertNotNull ( getTree ( selectorName ) )
assertEquals ( true , child . remove ( ) )
assertEquals ( false , child . remove ( ) )
assertEquals ( null , location . remove ( ) )
assertNotNull ( getType ( test . getTree ( ) , test . getParent ( ) ) )
assertNull ( primaryTypeName )
assertEquals ( child . getPath ( ) , t . getPath ( ) )
assertEquals ( relPath , child . getPath ( ) )
AssertPlaceHolder = "assertTrue(child.exists());"
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( "expectedValue" , actualValue )
assertNotNull ( getName ( ) )
assertNotNull ( compositeConfiguration . getDefaultConfig ( ) )
assertNotNull ( base . getParameters ( ) )
assertEquals ( defaultValue , getConfigValue ( "test" , defaultValue , targetClass ) )
assertNull ( options . get ( "test" ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( connection , create ( ) )
assertEquals ( 5 , getConfiguration ( ) . getAppConfigurationEntry ( "" ) . length )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
AssertPlaceHolder = "assertTrue(sessions.contains(session));"
assertEquals ( false , transientWrites )
AssertPlaceHolder = "assertThrows(SQLFeatureNotSupportedException.class, () -> loginModule.abort(null));"
AssertPlaceHolder = "assertThrows(SQLFeatureNotSupportedException.class, () -> loginModule.abort(null));"
assertNotNull ( credentials )
assertEquals ( TestCredentials . class , lm . getCredentials ( ) . getClass ( ) )
assertEquals ( null , lm . getCredentials ( ) )
assertEquals ( UnsupportedCallbackException . class , lm . getCallbackException ( ) )
assertNull ( credentials )
assertEquals ( null , loginModule . getSharedPreAuthLogin ( ) )
assertNull ( getSharedPreAuthLogin ( ) )
assertSame ( root , loginModule . getRoot ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( loginModule . getRoot ( ) )
assertEquals ( TestSecurityProvider . class , loginModule . getSecurityProvider ( ) . getClass ( ) )
assertNotNull ( getRoot ( ) )
assertNotNull ( loginModule )
assertNotNull ( getWhiteboard ( ) )
assertThrows ( IOException . class , ( ) -> loginModule . getWhiteboard ( ) )
assertThrows ( UnsupportedCallbackException . class , ( ) -> loginModule . getWhiteboard ( ) )
assertNull ( loginModule . getWhiteboard ( ) )
assertEquals ( expectedUserManager , loginModule . getUserManager ( ) )
assertEquals ( "Expected exception of type IOException" , IOException . class , assertThrows ( IOException . class , ( ) -> loginModule . getUserManager ( ) ) )
assertEquals ( UnsupportedCallbackException . class , assertThrows ( UnsupportedCallbackException . class , ( ) -> loginModule . getUserManager ( ) ) )
assertEquals ( um , loginModule . getUserManager ( ) )
AssertPlaceHolder = "Assert.assertNotNull(loginModule);"
AssertPlaceHolder
assertEquals ( null , loginModule . getSecurityProvider ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( null , getUserID ( ) )
assertEquals ( null , getUserID ( ) )
assertEquals ( SQLFeatureNotSupportedException . class , assertThrows ( LoginException . class , ( ) -> abort ( null ) ) . getCause ( ) . getClass ( ) )
assertEquals ( "name" , ctx . getName ( ) )
assertEquals ( SystemSubject . INSTANCE , subject )
assertNotNull ( getUserId ( ) )
assertNotNull ( getPrincipals ( searchType ) )
assertEquals ( repo , cb . getContentRepository ( ) )
assertSame ( sp , cb . getSecurityProvider ( ) )
assertEquals ( wspName , cb . getWorkspaceName ( ) )
assertNotNull ( getUserId ( ) )
assertEquals ( EMPTY , ConfigurationParameters . of ( new Dictionary < > ( ) ) )
composite . getName ( )
assertEquals ( 2 , tp . getProviders ( ) . size ( ) )
assertSame ( info , composite . getTokenInfo ( TOKEN ) )
assertEquals ( properties . size ( ) , options . size ( ) )
assertEquals ( "expired" , e . getMessage ( ) )
assertNull ( ace . getRestrictions ( ) )
assertNotNull ( val )
vs . length == 0
assertTrue ( "ACE should be created with testPrincipal, JCR_READ privilege, and isAllow flag set to true" , ace . getPrincipal ( ) . equals ( testPrincipal ) && ace . getPrivilegeBits ( ) . equals ( PrivilegeBits . BUILT_IN . get ( JCR_READ ) ) && ace . isAllow ( ) )
assertEquals ( expectedACE , ace )
assertNotEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( ace , ace2 )
assertNotEquals ( "val" , ace . getRestriction ( ) . getValue ( ) )
assertEquals ( root , accessControlManager . getMgrProvider ( this . root ) )
assertEquals ( "No tree at " + oakPath , e . getMessage ( ) )
assertNotNull ( p )
assertTrue ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) . isEmpty ( ) )
assertNotNull ( getName ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( options )
assertEquals ( 0 , names . size ( ) )
assertEquals ( "ALL" , str )
assertEquals ( expected , actual )
assertNotNull ( getString ( ) )
assertThat ( hadNext ) . isTrue ( )
assertEquals ( 0 , restrictions . size ( ) )
assertEquals ( 2 , rp . size ( ) )
assertNotNull ( getName ( ) )
assertEquals ( def , tree . getProperty ( pInfo . asPropertyState ( def ) ) )
assertEquals ( pInfo . asPropertyState ( def ) , tree . getProperty ( pInfo . getName ( ) ) )
assertNotNull ( pMgr )
pp = getComposite ( ) . getPrincipalProvider ( root , NamePathMapper . DEFAULT )
assertEquals ( testConfig , pMgr . getConfiguration ( ) )
assertSize ( 2 , ( CompositePrincipalProvider ) pp )
assertNotNull ( getPrincipalUnknown ( ) )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertNotNull ( getName ( ) )
assertNotNull ( getName ( ) )
assertEquals ( "name" , p . getName ( ) )
assertEquals ( EMPTY , getInstance ( new byte [ 0 ] ) )
assertEquals ( 1 , it . size ( ) )
assertEquals ( "TestPrincipalProvider.UNKNOWN.getName().substring(0, 4)" , unknownHint )
assertNotNull ( getItemBasedPrincipal ( principalOakPath ) )
assertNotNull ( getName ( ) )
assertNotNull ( getName ( ) )
assertEquals ( "anyName" , propertyState . getName ( ) )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertThat ( asPropertyState ( "name" , bits , provider ) , is ( equalTo ( expectedPropertyState ) ) )
assertEquals ( true , privilegesTree . exists ( ) )
assertEquals ( bits1 , bits2 )
assertEquals ( 0 , names . size ( ) )
assertEquals ( 0 , names . size ( ) )
assertNotNull ( copyOf )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( ImmutableSet . of ( JCR_LOCK_MANAGEMENT , JCR_READ_ACCESS_CONTROL ) , result )
assertThat ( result ) . containsExactlyElementsIn ( expected )
assertEquals ( expected , ImmutableSet . copyOf ( result ) )
assertEquals ( expected , result )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( next . asPropertyState ( REP_BITS ) , tmp . getProperty ( REP_BITS ) )
assertEquals ( JCR_READ , readPrivTree . getName ( ) )
assertEquals ( JCR_LIFECYCLE_MANAGEMENT , oakName )
assertTrue ( list . isEmpty ( ) )
assertEquals ( hint , generateNodeName ( hint ) )
assertNotNull ( creds . getUserId ( ) )
assertEquals ( 1 , action . getLogs ( ) . size ( ) )
assertTrue ( "Empty list should be empty" , cap . isEmpty ( ) )
assertEquals ( aap , aap2 )
assertEquals ( "[" , action . getPattern ( ) )
assertEquals ( null , buildPasswordHash ( null ) )
assertEquals ( test , createTree ( builder ) . getTypes ( ) )
assertEquals ( test . get ( UserConstants . NT_REP_GROUP ) , AuthorizableType . GROUP )
assertEquals ( ntName , createTree ( builder ) . getType ( ) )
assertNotNull ( createTree ( ntName , id ) )
assertNotNull ( getName ( ) )
assertEquals ( "value" , propInfo . getName ( ) )
assertEquals ( "value" , getValue ( "string" ) )
assertEquals ( 0 , rct . size ( ) )
assertNotNull ( getChildNode ( "name" ) )
assertEquals ( "v2" , base . getRoot ( ) . getChildNode ( "foo" ) . getChildNode ( "bar" ) . getProperty ( "version" ) )
assertEquals ( "v2" , split . getRoot ( ) . getChildNode ( "foo" ) . getChildNode ( "bar" ) . getProperty ( "version" ) )
assertEquals ( lines , entries )
assertReadAccessGranted ( persistence , BLOBS )
assertWriteAccessGranted ( persistence )
assertWriteAccessNotGranted ( persistence )
assertWriteAccessGranted ( persistence )
assertWriteAccessGranted ( persistence )
assertEquals ( entries , reader . readAllLines ( ) )
assertEquals ( entries . size ( ) , 10 )
assertThat ( store . isReleased ( cp ) ) . isTrue ( )
assertEquals ( 0 , compactor . getCancelledCount ( ) )
assertEquals ( 10000 , getRevisions ( ) . size ( ) )
assertEquals ( defaultValue , toString ( propValue , defaultValue ) )
assertFalse ( EMPTY_STORE . containsSegment ( SegmentId . NULL ) )
assertEquals ( entries , iterated )
assertEquals ( message , logCustomizerBuilder . contains ( message ) )
assertTrue ( reference > 0 )
assertEquals ( first , second )
assertEquals ( 99 , test . getChildNodeCount ( ) )
assertEquals ( "loader #" + segment + " offset " + offset , x )
assertEquals ( KEYS - misses - fails , cacheStats . getHitCount ( ) )
assertEquals ( ( ( double ) misses + fails ) / KEYS , cacheStats . getMissRate ( ) , Double . MIN_VALUE )
assertEquals ( fails , cacheStats . getLoadExceptionCount ( ) )
assertTrue ( ( ( double ) loadTime / ( misses + fails ) ) <= cacheStats . getAverageLoadPenalty ( ) )
assertEquals ( KEYS + misses , cacheStats . estimateCurrentWeight ( ) )
assertNotNull ( after )
assertEquals ( before , after )
assertEquals ( before , after )
assertNotNull ( state . getProperty ( "jcr:primaryType" ) )
assertThat ( state . getProperty ( "jcr:mixinTypes" ) . getType ( ) , is ( PropertyType . STRING ) )
assertEquals ( null , res . get ( ) )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( existingAfterGC , new HashSet < > ( ) , "GC should remove all special character nodes" )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( null , mapInfo . getRecordId ( null ) )
assertEquals ( 0 , builder . binariesInlineThreshold ( ) )
assertEquals ( base . getRecordId ( ) , ro . getHead ( ) . getRecordId ( ) )
fail ( "Expected exception was not thrown" )
assertEquals ( 1 , in . getGeneration ( ) )
assertEquals ( 2 , before . getStoreVersion ( ) )
assertEquals ( "data" , property . getName ( ) )
assertEquals ( n . getBackend ( ) , mockBackend ( ) )
assertEquals ( Optional . empty ( ) , backend . getSegment ( "s" ) )
assertEquals ( true , segment . isDataSegment ( ) )
assertEquals ( Optional . of ( segment ) , backend . getSegment ( "s" ) )
assertArrayEquals ( entries , new SegmentArchiveEntry [ ] { new SegmentArchiveEntry ( msb , lsb , buffer , 0 , buffer . length , newGCGeneration ( 1 , 2 , false ) ) } )
assertEquals ( "expected size after adding an item" , expectedSize , list . size ( ) )
assertEquals ( segmentId , assertThrows ( SegmentNotFoundException . class , ( ) -> focalMethodCall ) . getSegmentId ( ) )
assertEquals ( expected , graph )
assertEquals ( sizeBefore + 42 , sizeAfter )
assertEquals ( 10 , buffer . position ( ) )
assertEquals ( 2 * IndexEntryV2 . SIZE , buffer . position ( ) )
assertThat ( blobId , is ( notNullValue ( ) ) )
assertEquals ( "clientId" , "blobId" , message )
assertEquals ( "GET /head?clientId=clientId HTTP/1.1\r\n\r\n" , message )
assertEquals ( expected , buffer )
assertEquals ( "clientId" , "clientId" )
assertEquals ( expected , buffer )
assertEquals ( "expectedValue" , message )
assertEquals ( expected , buffer )
assertEquals ( "Expected message" , expectedMessage , extractMessageFromPayloadWithoutMagic ( ) )
assertEquals ( "Expected message not extracted" , expectedMessage , extractMessageFromPayloadWithoutClient ( ) )
assertEquals ( "expectedClient" , extractClientFrom ( payload ) )
assertEquals ( "clientId" , request . getClientId ( ) )
assertEquals ( recordId , response . getHeadRecordId ( ) )
assertEquals ( new InetSocketAddress ( InetAddress . getByName ( client ) , 8080 ) , createAddress ( ) )
assertEquals ( null , r . readBlob ( "test" ) )
assertEquals ( null , r . readBlob ( "id" ) )
assertEquals ( persistedHead . toString ( ) , "<expected value>" )
assertNull ( reader . getSegment ( "nonexistent" ) )
assertEquals ( "expectedID" , focalMethod . getID ( ) )
assertEquals ( "127.0.0.1" , observablePartnerMBean . getRemoteAddress ( ) )
assertEquals ( "request" , getLastRequest ( ) )
assertEquals ( new Date ( ) , observablePartnerMBean . getLastSeen ( ) )
assertEquals ( 100 , observer . getSentBinariesBytes ( "client" ) )
assertEquals ( "empty list must be 0-sized" , 0 , list . size ( ) )
assertEquals ( test , roundtripped )
assertNotNull ( remoteSolrServerProvider )
assertNotNull ( embeddedSolrServerProvider )
assertEquals ( OakSolrConfigurationDefaults . CATCHALL_FIELD , nodeStateConfiguration . getCatchAllField ( ) )
assertEquals ( collection , "sample_" + System . nanoTime ( ) )
assertEquals ( 1 , ctx . getServices ( MountInfoProvider . class ) . size ( ) )
assertEquals ( 3 , provider . getMountInfo ( ) . size ( ) )
assertEquals ( null , d )
assertEquals ( desc . size ( ) , expectedSize )
assertEquals ( blobLength , length )
assertEquals ( "v" , ns . getRoot ( ) . getProperty ( "p" ) . getValue ( ) )
assertEquals ( info , Collections . emptyMap ( ) )
assertEquals ( false , createInactive ( true ) . isActive ( ) )
assertEquals ( null , getTime ( 0 ) )
assertEquals ( defaultLeaseCheckMode ( ) , "<expected value>" )
assertEquals ( "branchVisible" , nodes . contains ( "branchVisible" ) )
assertEquals ( "Must fail with DocumentStoreException" , e . getMessage ( ) )
assertEquals ( null , op )
assertNotNull ( c )
assertEquals ( "expectedValue" , val )
assertEquals ( "conflict" , cfe . getMessage ( ) )
assertJsonEquals ( expectedNode , mergedNode )
String assertLine = "assertEquals(\"expectedValue\", jsop);"
assertEquals ( rebased , branch )
assertEquals ( rebased , branch )
assertNotNull ( state )
assertEquals ( 2 , ns . getPropertyCount ( ) )
assertNotNull ( bean . getRevision ( ) )
assertFalse ( config . getBoolean ( "socketKeepAlive" ) )
assertEquals ( jobScheduled , true )
assertNotNull ( clusterNodeInfo )
"<AssertPlaceHolder>"
assertNotNull ( statisticManager . getStatsCounter ( type ) )
assertEquals ( 10 , counter . get ( ) )
AssertPlaceHolder = "assertEquals(documentStore, store);"
assertEquals ( DocumentMK . UPDATE_LIMIT + 1 , Iterables . size ( b1 . getChildNode ( "child" + DocumentMK . UPDATE_LIMIT ) . getChildNodeNames ( ) ) )
assertEquals ( NUM_CHILDREN , b1 . getChildNodeCount ( ) )
assertEquals ( 2 , ws . getWriteCount ( ) )
assertEquals ( updateLimit , ns . getUpdateLimit ( ) )
assertEquals ( "must fail with DocumentStoreException" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , e . getMessage ( ) )
assertEquals ( store . isDisposed ( ) , true )
assertNotNull ( path )
AssertPlaceHolder = "assertTrue(success);"
assertEquals ( "0.9.7" , v . toString ( ) )
assertEquals ( "10" , getSize ( "/foo" ) )
assertEquals ( "{/foo=, /bar=+\"qux\"}" , diff . diffFromAsString ( ) )
assertEquals ( diff , diff2 )
assertEquals ( "foo/bar" , p . toString ( ) . trim ( ) )
assertEquals ( expected , key )
assertEquals ( NUM_REVS_THRESHOLD + 1 , docs )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 0 , existingAfterGC . size ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( expected , paths )
assertEquals ( 6 , uncommittedRevisions )
assertEquals ( 0 , uncommittedRevisions )
assertEquals ( 1 , tds . paths . size ( ) )
assertEquals ( expected , paths )
assertNotNull ( getRoot ( ) . getChild ( "child" ) )
assertEquals ( rv , rvFromStr )
assertEquals ( true , success )
assertEquals ( sweepRev , ns2 . getSweepRevisions ( ) )
t . assertEndNotLaterThan ( end + 1 )
t . assertEquals ( fromMs , t . getStart ( ) )
assertEquals ( 0 , processingTime . get ( ) )
assertNotNull ( find ( collection , key ) )
assertTrue ( Sets . symmetricDifference ( cluster . blobStoreState . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertEquals ( 0 , store . findVersionGC . get ( ) )
assertThat ( deletedOnceCountCalls . get ( ) ) . isEqualTo ( 0 )
assertEquals ( "expectedValue" , actualValue )
assertTrue ( "The property 'nt:file' should have been set with the property 'jcr:content'" , registry . hasProperty ( "nt:file" , "jcr:content" ) )
assertFalse ( dataStore . exists ( new DataIdentifier ( ID_PREFIX + 0 ) ) )
assertEquals ( "Node '/test/book.jpg/jcr:content' should have been removed" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , e . getMessage ( ) )
assertEquals ( "must fail with CommitFailedException" , "CommitFailedException" , e . getMessage ( ) )
assertEquals ( 0 , result . size ( ) )
assertThat ( pr . getName ( ) , is ( "book.jpg" ) )
assertEquals ( 1L , getModCount ( ) )
assertEquals ( totalPaths , ds ( c1 ) . getCache ( ) . size ( ) )
assertNotNull ( getName ( ) )
AssertPlaceHolder = "Assert.assertNull(builder.getDocStoreThrottlingFeature());"
assertNotNull ( createMissingLastRevSeeker ( ) )
assertEquals ( "expectedVersion" , getVersion ( ) )
assertEquals ( 50 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 50 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 10 , sizeLimit )
assertEquals ( 0 , docs . size ( ) )
assertEquals ( 0 , nodeCache . size ( ) )
assertEquals ( empty , revisionVectorFromBuffer ( rb ) )
assertEquals ( p , pathFromBuffer ( rb ) )
assertEquals ( "/foo/bar/quux" , p . toString ( ) )
assertEquals ( p , pathFromBuffer ( rb ) )
assertEquals ( expected , pathRevFromBuffer ( rb ) )
assertEquals ( expected , namePathRevFromBuffer ( rb ) )
assertThat ( requests , equalTo ( 1 ) )
assertEquals ( null , doc . getModified ( ) )
assertEquals ( 0 , cnt )
assertEquals ( 2 , secondaryRoot ( ) . getChildNodeCount ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( k1 , k2 )
assertEquals ( test , roundtripped )
assertEquals ( false , throttlingEnabled )
assertEquals ( true , throttlingEnabled )
assertEquals ( false , throttlingEnabled )
assertEquals ( a , Utils . min ( a , b ) )
assertEquals ( 1 , doc . getLastRev ( ) . getClusterId ( ) )
assertEquals ( false , closed . get ( ) )
assertNotNull ( nodeState2 . getProperty ( "name" ) )
assertEquals ( expectedOrder , childNames )
assertEquals ( getBaseState ( ) , root . getNodeState ( ) )
assertNotNull ( builder ( ) )
assertEquals ( date , builder . getPropertyState ( ) . getValue ( ) )
assertEquals ( nameProperty , namePropertyFromValue )
assertEquals ( expected , actual )
assertTrue ( "Empty list should be empty" , list . isEmpty ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( blobLength , length )
assertEquals ( "expected size after adding one entry" , 1 , list . size ( ) )
assertNotNull ( blobStore )
assertEquals ( "empty" , factory . toString ( ) )
assertEquals ( matcher . group ( 1 ) , "<expected value>" )
assertEquals ( "" , stripValue ( "" ) )
