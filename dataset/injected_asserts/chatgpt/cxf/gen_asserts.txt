assertEquals ( TestBusFactory . class . getName ( ) , System . getProperty ( BusFactory . BUS_FACTORY_PROPERTY_NAME ) )
assertNotNull ( bus . getExtension ( BusApplicationContext . class ) . getBean ( "cxf" ) )
assertEquals ( mockHandler , m . getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
Assert . assertEquals ( EnumTest . class , method . getDeclaringClass ( ) )
assertEquals ( text , decodedText )
assertEquals ( "com.example" , packageName )
assertEquals ( "/foo%2Fz.txt" , s )
assertEquals ( value , urlDecode ( value ) )
ex . printStackTrace ( )
assertEquals ( "dummy" , System . getProperty ( "java.io.tmpdir" ) )
assertEquals ( ISO88591 , cs )
assertEquals ( "ISO-8859-1" , cs )
assertEquals ( "http://com.example.ws" , tns )
assertEquals ( result , getResetOutValue ( result , cache ) )
assertEquals ( "expectedValue" , getName ( ) )
assertEquals ( "[message:sequenceNumber:timestamp]" , toString ( event ) )
assertEquals ( sayHi , dr . getName ( ) )
assertEquals ( XMLStreamConstants . START_DOCUMENT , reader . getEventType ( ) )
assertThat ( reader . getLocalName ( ) , equalTo ( "Body" ) )
assertEquals ( input , output )
assertEquals ( "<foo xmlns=\"http://example.com/\"><bar xmlns=\"\"/></foo>" , out . toString ( ) )
assertNotNull ( e )
assertNotNull ( exception )
assertNotNull ( rex )
assertEquals ( "Hi Bob!" , response )
assertEquals ( "Hi Sam" , response )
Assert . assertEquals ( "java.lang.String" , c1 . getName ( ) )
Assert . assertEquals ( null , url )
Assert . assertEquals ( null , url )
AssertPlaceHolder
assertEquals ( null , get ( key ) )
assertEquals ( writer , mc . getLogWriter ( ) )
re . getLinkedException ( ) == null
AssertPlaceHolder = "assertNotNull(getLinkedException());"
assertEquals ( rai , mci . getResourceAdapter ( ) )
assertEquals ( "exception expected" , re . getMessage ( ) )
assertSame ( mci . createManagedConnection ( null , null ) , unboundMC )
Assert . assertEquals ( "http://localhost:9000/soap" , cri . getAddress ( ) )
assertEquals ( mockHandler , handler . getNext ( ) )
assertEquals ( method , getMethod ( testTarget , op ) )
assertEquals ( "org.apache.hello_world_soap_http.GreeterBean" , endpoint . getServiceClassName ( ) )
assertEquals ( 1 , actual . size ( ) )
assertEquals ( Collections . emptySet ( ) , actual )
assertNotNull ( unwrap ( clazz ) )
assertNotNull ( unwrap ( HttpTracing . class ) )
assertNotNull ( getPhase ( ) )
assertEquals ( conduit , setupCorbaConduit ( false ) )
assertEquals ( endpoint , conduit . getTarget ( ) )
assertEquals ( "String" , stringValue )
assertEquals ( "WString" , wstringValue )
assertEquals ( ulongValue , ul )
assertEquals ( new QName ( "http://foo.org" , "test" ) , mock . getName ( ) )
assertEquals ( "test" , focalMethod ( ) )
assertEquals ( "abcdef" , mock . getText ( ) )
assertEquals ( "abcd" , pointer [ 0 ] )
assertEquals ( org . omg . CORBA . ARG_IN . value , mode )
assertNotNull ( oe )
assertNotNull ( soapMessage . getContent ( Exception . class ) )
assertNotNull ( nsc )
assertEquals ( "urn:cxf" , action )
assertEquals ( "" , action )
assertEquals ( "" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "Channa Doll" , sholder . value )
assertEquals ( "reflection" , boing )
assertEquals ( "expectedURI" , uri )
assertEquals ( sb , expectedSimpleBean )
assertEquals ( "simple" , s )
assertEquals ( "expectedNodeName" , rootElement . getNodeName ( ) )
assertEquals ( MediaType . valueOf ( "Array" ) , invoke ( "Array" , "takeNumber.xml" ) )
assertEquals ( "expectedValue" , h . getSomeValue ( ) )
assertEquals ( correctAnswer , something )
assertEquals ( correctAnswer , something )
assertArrayEquals ( STRING_ARRAY , client . getStringArrayValue ( ) )
Assert . assertEquals ( "Expected exception not thrown" , DatabindingException . class , e . getClass ( ) )
assertNotNull ( pds )
assertEquals ( objects , readWriteReadRef ( "arrayUrType1.xml" , Object [ ] . class ) )
assertEquals ( 0 , objects . length )
this . assertValidBoolean ( "//xsd:simpleType[@name='class']/xsd:restriction" , doc . getDocumentElement ( ) )
assertEquals ( true , config . isDefaultNillable ( ) )
assertEquals ( false , config . getDefaultNillable ( ) )
assertValid ( "//xsd:complexType[@name='getValuesResponse']//xsd:element" + "[@name='return'][@type='xsd:string']" , wsdl )
assertEquals ( SmallEnum . class , type . getTypeCreator ( ) . createType ( SmallEnum . class ) )
assertEquals ( new QName ( "urn:foo" , "BadBean" ) , type . getSchemaType ( ) )
assertEquals ( 0 , lts . size ( ) )
assertEquals ( "somevalue" , db . getUnmarshallerProperties ( ) . get ( "someproperty" ) )
assertEquals ( "org.apache.cxf.jaxb.DatatypeFactory" , Class . forName ( "org.apache.cxf.jaxb.DatatypeFactory" ) . getName ( ) )
assertEquals ( "TestSOAPMessage" , elNode . getTextContent ( ) )
assertEquals ( "GET" , event . getOperationName ( ) )
assertEquals ( "preflight_passed" , event . getType ( ) )
Assert . assertEquals ( null , event . getOperationName ( ) )
assertEquals ( "http://localhost:9001/api" , event . getUri ( ) )
assertEquals ( Arrays . asList ( TEST_HEADER_VALUE ) , event . getContextData ( ) . get ( TEST_HEADER_NAME ) )
Assert . assertEquals ( "PUT" , event . getOperationName ( ) )
assertEquals ( actual , expected )
assertNull ( actual )
assertNull ( actual . getCause ( ) )
assertEquals ( 1 , actual . size ( ) )
assertNotNull ( actual . getName ( ) )
Assert . assertEquals ( expected , actual )
assertNull ( actual )
assertThat ( actual , is ( nullValue ( ) ) )
assertNull ( actual )
assertNull ( actual )
assertEquals ( DUMMY_TAG , actual . iterator ( ) . next ( ) )
assertEquals ( DUMMY_TAG , actual . iterator ( ) . next ( ) )
mc . getContext ( ) == context
assertEquals ( "a=b&c=d" , formToString ( form ) )
assertEquals ( "expectedValue" , a . getHeader ( "name" ) )
assertEquals ( "baz" , xp . getAttributeValue ( "bar" , "attr" ) )
assertNotNull ( element )
assertNotNull ( element )
assertNotNull ( xp . getNode ( expression , cls ) )
assertEquals ( bar , getNode ( xp . getDocumentElement ( ) , "http://baz" , "bar" ) )
assertEquals ( "http://baz" , bar . getNamespaceURI ( ) )
assertEquals ( bar , getNode ( xp . getDocumentElement ( ) , "http://baz" , "bar" ) )
assertEquals ( "/2" , value . toString ( ) )
assertEquals ( "private=\"foo\",no-cache=\"bar\",no-store,no-transform,must-revalidate,proxy-revalidate,max-age=2,s-maxage=3" , parsed )
assertEquals ( false , cc . isNoCache ( ) )
assertEquals ( "[c,d]" , cc . getNoCacheFields ( ) . toString ( ) )
assertEquals ( retry , retry2 )
assertEquals ( "200" , response . getStatus ( ) )
assertEquals ( HttpStatus . NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "304" , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( Arrays . asList ( "b=c; param=c" , "a=b;param=b" ) , values )
assertEquals ( MediaType . valueOf ( "application/json" ) , h . getContentType ( ) )
assertEquals ( "text/plain" , h . getFirst ( "content-type" ) )
assertEquals ( "expectedValue" , date )
assertEquals ( "en-US" , h . getLanguage ( ) . toString ( ) )
assertEquals ( "[http://example.com/page1:previous]" , toString ( prevLink ) )
Assert . assertEquals ( "[http://example.com/page1:1:2]" , toString ( prevLink ) )
assertEquals ( "http://localhost:8080/base/relative" , link . getUri ( ) . toString ( ) )
assertEquals ( "/base/path/relative" , link . getUri ( ) . toString ( ) )
Assert . assertEquals ( "[A title:1:2021-01-01]" , toString ( prevLink ) )
l . getUri ( ) . equals ( "<http://bar>" )
assertEquals ( expected , result )
Assert . assertEquals ( eTag , rb . getEntityTag ( ) )
Assert . assertEquals ( rb , evaluateAll ( serverDate , null ) )
assertEquals ( null , getStatus ( ) )
assertEquals ( null , r . getAllowedMethods ( ) )
Assert . assertEquals ( "\"foo\"" , eTag )
Assert . assertEquals ( str , response . getEntity ( ) )
assertEquals ( expected , actual )
assertEquals ( doc . getDocumentElement ( ) , getDocumentElement ( new DOMSource ( responseSource ) ) )
Assert . assertEquals ( bean . get ( ) , header )
assertEquals ( "1234" , ri . getMetadata ( ) . getFirst ( HttpHeaders . ETAG ) )
assertEquals ( "http://localhost:8080" , ri . getMetadata ( ) . getFirst ( HttpHeaders . LOCATION ) )
assertEquals ( "en-US" , ri . getLanguage ( ) )
assertEquals ( MediaType . TEXT_XML , ri . getMediaType ( ) )
assertEquals ( null , builder )
assertNotNull ( response . getEntity ( ) )
assertNotNull ( response . readEntity ( Reader . class , annotations ) )
// <AssertPlaceHolder>
assertEquals ( "Digest" , scheme )
assertEquals ( "[b:null:null]" , toString ( event ) )
assertEquals ( "http://localhost/1/2" , uri . toString ( ) )
assertEquals ( "/{}" , uri . toString ( ) )
assertEquals ( "/1/2" , uri . getPath ( ) )
assertEquals ( "/2/1" , uri . toString ( ) )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/" , newUri . getPath ( ) )
assertEquals ( uri , newUri )
assertEquals ( "bar/foo" , newUri . toString ( ) )
assertEquals ( "/bar/foo" , newUri . getPath ( ) )
assertEquals ( "" , newUri . getQuery ( ) )
assertEquals ( "http://bar/foo;q=1%2F2" , newUri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "https://localhost:8080/foo/bar" , newUri . toString ( ) )
assertEquals ( "/newpath" , newUri . getPath ( ) )
assertEquals ( "httppnewpath" , newUri . getPath ( ) )
assertEquals ( null , newUri . getPath ( ) )
assertEquals ( uri , newUri )
assertEquals ( "/foo/bar/foo" , newUri . getPath ( ) )
assertEquals ( "/foo%25/bar%/baz%20" , newUri . getPath ( ) )
assertEquals ( "/foo" , newUri . getPath ( ) )
assertEquals ( expectedPath , rawPath )
assertEquals ( "/BookStore/" , newUri . getPath ( ) )
assertEquals ( "http://foo/BookStore/updateBook/bar" , newUri . toString ( ) )
assertEquals ( new URI ( "http://foo/bar" ) , newUri )
assertEquals ( null , uri . getQuery ( ) )
assertEquals ( "" , newUri . getQuery ( ) )
assertEquals ( "p1=nv1" , newUri . getQuery ( ) )
assertEquals ( "http://foo/bar?p1=v1" , newUri . toString ( ) )
assertEquals ( "http://foo/bar?p2=v2" , newUri . toString ( ) )
Assert . assertEquals ( "http://foo/bar?p1=nv1&p2=v2" , newUri . toString ( ) )
Assert . assertEquals ( "" , newUri . getMatrix ( ) )
Assert . assertEquals ( "http://foo/bar;p1=nv1;p2=v2" , newUri . toString ( ) )
assertEquals ( "http://foo/bar;p1=v1;p2=v2" , newUri . toString ( ) )
Assert . assertEquals ( "http://foo/bar;p1=v2,v3" , newUri . toString ( ) )
Assert . assertEquals ( "http://blah/foo;p1=v1/bar" , newUri . toString ( ) )
assertEquals ( "http://blah/foo/bar" , newUri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , template )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "myscheme" , uri . getScheme ( ) )
assertEquals ( "his/him" , uri . getPath ( ) )
assertEquals ( "my/day" , uri . getPath ( ) )
assertEquals ( "/{}" , uri . getPath ( ) )
assertEquals ( parent , c . getParent ( ) )
assertEquals ( 1 , names . size ( ) )
Assert . assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( "a {id} b" , ut . encodeLiteralCharacters ( false ) )
assertEquals ( "a {digit:[0-9]} b" , ut . encodeLiteralCharacters ( false ) )
assertEquals ( bus , provider . getBus ( ) )
assertEquals ( "image" , readStringFromStream ( ds . getInputStream ( ) ) )
assertEquals ( "a=a1&b=b1" , result )
assertEquals ( p . isWriteable ( Object . class , null , null , null ) , false )
assertNotNull ( p )
assertEquals ( OneShotAsyncExecutor . getInstance ( ) , INSTANCE )
assertSame ( writer , writer2 )
em . getClass ( ) . getName ( ) . equals ( "ExpectedExceptionMapperClassName" )
em . getClass ( ) . getName ( ) . equals ( "com.example.ExceptionMapper" )
Assert . assertEquals ( mbr . getClass ( ) , CustomBooleanReader . class )
Assert . assertNotNull ( mbr )
assertEquals ( mbr . getClass ( ) , MessageBodyWriter . class )
assertSame ( StreamSource . class , verifyRead ( p , StreamSource . class ) . getClass ( ) )
Assert . assertEquals ( "Expected output" , expectedOutput , s )
assertEquals ( "TheBook2" , b2 . getName ( ) )
assertEquals ( b , b2 )
assertEquals ( "PUT" , getHttpMethodValue ( m ) )
assertEquals ( "expected" , encodePartiallyEncoded ( "input" , true ) )
assertEquals ( value , urlDecode ( value ) )
assertEquals ( urlEncode ( "test" ) , "test" )
assertEquals ( urlDecode ( value , StandardCharsets . UTF_8 . name ( ) , true ) , "<expected value>" )
assertEquals ( "http://localhost:8080/bar/foo" , u . toString ( ) )
assertEquals ( "1.1" , id . getId ( ) )
helmId . getId ( )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( 0L , c . getB ( ) )
Assert . assertEquals ( "Expected address is not equal to actual address" , expectedAddress , application . getAddress ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( expeced , e . getMessage ( ) )
assertEquals ( binding , endpoint . getBinding ( ) )
Assert . assertEquals ( target , object )
AssertPlaceHolder
assertEquals ( false , server . isStarted ( ) )
assertNotNull ( serverFB )
assertEquals ( "Did not throw exception" , e . getMessage ( ) )
assertEquals ( "Did not throw expected exception" , WebServiceException . class , e . getClass ( ) )
assertValid ( "/s:Envelope/s:Body/s:Fault/faultstring[text()='I blame Hadrian.']" , response )
Assert . assertEquals ( HTTPBinding . HTTP_BINDING , disp . getBinding ( ) . getBindingID ( ) )
assertEquals ( true , pi . handleMessage ( message ) )
assertEquals ( resourceName , ret )
Assert . assertEquals ( "Operation" , event . getOperationName ( ) )
assertNoFault ( response )
assertNoFault ( response )
info . getWsdlLocation ( ) . equals ( getWsdlLocation ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
assertEquals ( "expected exception did not occur" , ex . getMessage ( ) )
AssertPlaceHolder = "assertEquals(dir, f.getParent());"
assertEquals ( "http://localhost/Hello" , server . getDestination ( ) . getAddress ( ) )
assertEquals ( "Hello, yo!" , result )
assertEquals ( info , assembler . getModelMbeanInfo ( AnnotationTestInstrumentation . class ) )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( "http://bar" , bean . getAddress ( ) )
assertEquals ( "http://foo/bar+%2B;a=value+%20?b=bv+%2B" , u . toString ( ) )
assertEquals ( "http://foo/*" , u . toString ( ) )
assertEquals ( "http://foo/**" , u . toString ( ) )
assertNull ( wc . query ( "_wadl" ) )
assertEquals ( "" , wc . getCurrentURI ( message ) . getQuery ( ) )
assertEquals ( ClientConfiguration . class , wc . getConfiguration ( ) . getClass ( ) )
Assert . assertEquals ( "en_CA" , wc . getHeaders ( ) . getLanguage ( ) )
assertEquals ( "IllegalStateException is expected" , e . getMessage ( ) )
assertEquals ( "expectedResult" , result )
assertEquals ( "Expected exception message" , "Expected message" , ex . getMessage ( ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertEquals ( "Expected ModelAndView to be null" , null , controller . service ( request , response ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( json , "{\"createdAt\":\"" + date . toString ( ) + "\"}" )
assertEquals ( "<?xml version=\"1.0\" encoding=\"utf-8\"?><AegisTestBean><boolValue>true</boolValue><strValue>hovercraft</strValue></AegisTestBean>" , xml )
assertEquals ( "{\"a\":{}}" , str )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( "{\"url\":\"http://cxf\",\"id\":123}" , bos . toString ( ) )
assertEquals ( "{\"url\":\"http://cxf\",\"id\":123}" , bos . toString ( ) )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( true , p . isIgnoreNamespaces ( ) )
assertEquals ( "<expected value>" , "<actual value>" )
assertEquals ( "{\"name\":\"CXF\",\"pages\":125}" , s )
assertEquals ( "" , s . trim ( ) )
assertEquals ( "{\"name\":\"a\",\"id\":\"b\"}" , s )
assertEquals ( "{\"name\":\"a\",\"group\":\"b\"}" , s )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "myCallback" , message . get ( Message . QUERY_STRING ) . split ( "=" ) [ 1 ] )
assertEquals ( "[expected value]" , toString ( message . getContent ( OutputStream . class ) ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( "a=b" , exp )
assertEquals ( "a=b&a=b1" , exp )
assertEquals ( "a=b&c=d" , exp )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertEquals ( "%test%" , toSqlWildcardString ( "test" , true ) )
assertNull ( getCondition ( ) )
assertEquals ( "" , query ( ) )
assertEquals ( "foo" , ret )
assertNotEquals ( 123.5 , ret )
assertNotEquals ( "foo" , d )
assertThat ( ret , greaterThan ( "abc" ) )
assertThat ( ret , lessThanOrEqualTo ( "abc" ) )
assertThat ( ret , greaterThan ( 25.0 ) )
assertThat ( ret , lessThan ( 25.333 ) )
assertThat ( ret , is ( equalTo ( "foo" ) ) )
assertThat ( ret , is ( "foo" ) )
assertNotNull ( ret )
assertNotNull ( ret )
assertThat ( ret , is ( notNullValue ( ) ) )
assertThat ( ret , anyOf ( greaterThan ( 20 ) , lessThan ( 10 ) ) )
assertThat ( ret , is ( greaterThan ( 20 ) ) )
assertEquals ( "aaa" , ret )
assertEquals ( "foo" , ret )
assertEquals ( "baz" , ret )
assertEquals ( "baz" , ret )
assertNotNull ( SearchConditionBuilder . instance ( ) )
Assert . assertEquals ( "description" , place . getCondition ( ) . getDescription ( ) )
assertEquals ( expectedSql , sql )
assertEquals ( "id=lt=10" , jpa . getQuery ( ) )
assertNotNull ( ldap )
assertEquals ( "name==ami*,level=gt=10" , ldap )
assertNotNull ( ldap )
assertEquals ( "(name==test,level==18);(name==test1,level!=19)" , ldap )
assertEquals ( "SELECT * FROM table WHERE name='test'" , sql )
assertEquals ( "SELECT * FROM table WHERE NAMES='test'" , sql )
assertThrows ( NullPointerException . class , ( ) -> extract ( null ) )
assertEquals ( "Expected exception message" , expectedMessage , cs . toCompletableFuture ( ) . get ( ) )
Assert . assertEquals ( "defaultValue" , client . myDefaultMethod ( false ) )
assertEquals ( "Hello" , getContentText ( ) )
assertEquals ( null , jwk1 . asMap ( ) . get ( JsonWebKey . RSA_PUBLIC_EXP ) )
assertEquals ( "expectedValue" , "<AssertPlaceHolder>" )
assertNotNull ( jwsConsumer . getExpiryTime ( ) )
assertEquals ( "expectedAlgorithm" , jws . getAlgorithm ( ) )
assertEquals ( tokenKey , cat . getTokenKey ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , t . getExpiresIn ( ) )
assertEquals ( "newSecret" , savedClient . getClientSecret ( ) )
assertEquals ( c . getClientId ( ) , c2 . getClientId ( ) )
assertEquals ( "Expected exception message" , "Exception expected" , ex . getMessage ( ) )
Assert . assertEquals ( OutboundSseEventImpl . BuilderImpl . class , sse . newEventBuilder ( ) . getClass ( ) )
Assert . assertEquals ( "expectedResponseType" , resp . getResponseType ( ) )
assertEquals ( "expectedResponseType" , resp . getResponseType ( ) )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
assertEquals ( factory , bus . getExtension ( JettyHTTPServerEngineFactory . class ) )
assertEquals ( "expectedValue" , response )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
assertEquals ( NOWHERE + "bar/foo" , dest . getAddress ( ) )
AssertPlaceHolder = "assertNotNull(factory);"
assertNotNull ( get ( key ) )
assertEquals ( null , get ( key ) )
assertNotNull ( conduit )
assertNotNull ( conduit )
assertEquals ( "[Expected Message]" , "<Actual Message>" )
Assert . assertEquals ( OutputStream . class , os . getClass ( ) )
Assert . assertEquals ( "java:/comp/TransactionManager" , endpoint . getJndiTransactionManagerName ( ) )
assertEquals ( "expectedValue" , config . getMessageSelector ( ) )
assertEquals ( outMessage , destMessage )
assertEquals ( "Principal in SecurityContext should be" , "testUser" , securityContext . getUserPrincipal ( ) . getName ( ) )
assertEquals ( true , destination . isMultiplexCapable ( ) )
assertEquals ( TEST_VALUE , messageHeaders . getProperty ( org . apache . cxf . message . Message . RESPONSE_CODE ) )
Assert . assertEquals ( null , provider . getContinuation ( ) )
Assert . assertEquals ( 5000 , cw . getSuspendTime ( ) )
assertEquals ( userObject , cw . getObject ( ) )
assertEquals ( "jms://" , endpoint . getJmsVariant ( ) )
Assert . assertEquals ( JMSConstants . BYTE_MESSAGE_TYPE , jmsMessage . getJMSType ( ) )
Assert . assertEquals ( 1 , added )
assertEquals ( "expectedActionUri" , action )
assertEquals ( "expected SOAPFaultException on invalid MAP" , sfe . getMessage ( ) )
assertNotNull ( doc )
assertEquals ( "Expected PolicyException not thrown." , ex . getMessage ( ) )
assertEquals ( uri , eap . getLocation ( ) )
assertSame ( assertion , eap . getEffectivePolicy ( ei , null ) )
assertSame ( assertion , eap . getEffectivePolicy ( si , null ) . getAssertions ( ) . get ( 0 ) )
assertEquals ( 2 , ep )
Assert . assertEquals ( "abc" , seq . getEndpointIdentifier ( ) )
Assert . assertEquals ( EMPTY_SEQUENCE , getSequence ( type ) )
assertSame ( id , proxy . getOfferedIdentifier ( ) )
assertEquals ( control , c )
assertEquals ( ret , expectedHandler )
assertSame ( as , ws . getWrappedService ( ) )
assertEquals ( binding , control . createMock ( SoapBinding . class ) )
assertSame ( null , manager . getDestination ( message ) )
assertSame ( null , manager . getSource ( message ) )
Assert . assertEquals ( 0 , manager . getReliableEndpointsMap ( ) . size ( ) )
Assert . assertEquals ( null , manager . getReliableEndpointsMap ( ) . get ( e ) )
assertEquals ( name , seq . getSource ( ) . getName ( ) )
assertEquals ( DATA , msgbytes )
assertEquals ( "testRole" , echo . getClass ( ) . getMethod ( "echo" ) . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getClass ( ) . getMethod ( "echo" ) . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertThat ( service . getInInterceptors ( ) , contains ( inhandler ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( "testRole" , echo . getAnnotation ( SecureRolesAllowed . class ) . value ( ) )
assertEquals ( null , ctx . getAuthentication ( ) . getPrincipal ( ) )
assertNotNull ( returnedRepresentation )
assertEquals ( true , result )
assertEquals ( "mimeAttachment" , part . getName ( ) )
assertEquals ( true , received )
assertEquals ( true , received )
assertEquals ( "CN-Example-OU-Test-O-Organization-L-Location-ST-State-C-Country" , convertedName )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . CREATED . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( ret )
assertEquals ( bytes . length , expectedLength )
assertEquals ( bytes . length , expectedLength )
assertEquals ( expected , widgetFromService )
assertEquals ( expected , widgetFromService )
assertEquals ( 200 , r . getStatus ( ) )
assertNotNull ( str )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
Assert . assertEquals ( 1 , book . getId ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/bookheaders/simple" , address )
assertEquals ( "simple" , book . getId ( ) )
assertEquals ( "simple" , book . getId ( ) )
assertEquals ( "bookId" , book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "PUT" , wc . getHeaders ( ) . getFirst ( "THEMETHOD" ) )
assertEquals ( "PUT" , wc . getHeaders ( ) . getFirst ( "THEMETHOD" ) )
assertNotNull ( book . getId ( ) )
Assert . assertEquals ( "Expected value" , book . getId ( ) )
Assert . assertEquals ( 200 , wc . getResponse ( ) . getStatus ( ) )
Assert . assertEquals ( 200 , wc . getResponse ( ) . getStatus ( ) )
Assert . assertEquals ( 10000000 , WebClient . getConfig ( wc ) . getHttpConduit ( ) . getClient ( ) . getReceiveTimeout ( ) )
assertNotNull ( future )
assertEquals ( "BOOKSTORE" , entity )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( book )
Assert . assertEquals ( "Patch" , book . getName ( ) )
assertNotNull ( book )
assertEquals ( "Delete" , book . getName ( ) )
assertNotNull ( book . get ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , future . get ( ) . getStatus ( ) )
assertEquals ( true , holder . value )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertThat ( ex . getCause ( ) , instanceOf ( ResponseProcessingException . class ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "Delete" , book . getName ( ) )
assertEquals ( "expectedValue" , book . getName ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( b . getId ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertNotNull ( cause )
assertNotNull ( cause )
assertEquals ( "relative Redirect is not allowed" , cause . getMessage ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "Intro" , chapter . getTitle ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/allCharsButA-B/:@!$&'()*+,;=-._~" , wc . getCurrentURI ( ) . toString ( ) )
assertEquals ( "application" , wc . getResponse ( ) . getMediaType ( ) . toString ( ) )
Assert . assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
Assert . assertEquals ( 100L , book . getId ( ) )
assertEquals ( 100L , book . getId ( ) )
assertEquals ( "Many spaces" , b . getName ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/object" , endpointAddress )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertNotNull ( client ( proxy ) )
assertEquals ( "12" , book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertNull ( client ( store ) )
assertEquals ( HttpURLConnection . HTTP_UNSUPPORTED_TYPE , urlConnection . getResponseCode ( ) )
assertNotNull ( wc )
assertNotNull ( wc )
assertEquals ( 888 , book . getId ( ) )
assertEquals ( "http://localhost:" + PORT + "/bookstore/books/querycontext/id=ge=123" , address )
assertEquals ( "222" , book . getId ( ) )
assertEquals ( "1" , book . getId ( ) )
assertNull ( store . getEmptyBookNullable ( ) )
assertEquals ( "" , response )
assertEquals ( "bookId" , info . getId ( ) )
assertEquals ( 0 , book . getId ( ) )
assertEquals ( "/application/bookstore/uifromconstructor" , response )
assertEquals ( 123 , book . getId ( ) )
assertEquals ( "PropValue" , getHeaderString ( "property" ) )
assertNotNull ( ex )
assertNotNull ( b . getId ( ) )
assertEquals ( getStringFromInputStream ( in ) , getStringFromInputStream ( expected ) )
Assert . assertEquals ( "expectedName" , name )
Assert . assertEquals ( "application/json" , wc . getResponse ( ) . getMediaType ( ) . toString ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "this is" , book . getName ( ) )
assertEquals ( "this is the book title" , book . getName ( ) )
assertEquals ( "expectedValue" , source . getValue ( ) )
assertNotNull ( get ( 444 ) )
assertNotNull ( get ( "ssn/book" ) )
assertEquals ( 1000000 , conduit . getClient ( ) . getReceiveTimeout ( ) )
Assert . assertEquals ( null , get ( key ) )
assertNotNull ( book . getId ( ) )
Assert . assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "book" , book . getXsiType ( ) )
assertEquals ( "SuperBook2" , book2 . getName ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( expectedChapter , c )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "expectedStatus" , response . getStatus ( ) )
wc . get ( )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
Assert . assertEquals ( "New" , response . getId ( ) )
Assert . assertEquals ( 124L , response . getId ( ) )
Assert . assertEquals ( "123" , book . getId ( ) )
Assert . assertEquals ( "book" , book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( 12345L , book . getId ( ) )
assertEquals ( "file name with semicolon" , partContent )
assertThat ( interceptor . getResponseStream ( ) , is ( nullValue ( ) ) )
assertEquals ( "http://localhost:" + PORT + "/one/bookstore/request" , path )
assertEquals ( "expectedValue" , value )
Assert . assertEquals ( "http://localhost:" + PORT + "/webapp/filter/resources/servlet/config/query?name=a" , endpointAddress )
assertEquals ( "Welcome to the application" , welcome )
assertEquals ( "expectedValue" , getStringFromInputStream ( in ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "BookNotFoundFault" , ex . getMessage ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "123" , book . getId ( ) )
Assert . assertEquals ( "expectedValue" , data )
assertEquals ( null , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertNotNull ( text )
assertNotNull ( text )
assertNotNull ( text )
assertNotNull ( text )
assertEquals ( "Hello World" , text )
assertEquals ( "123" , b . getId ( ) )
assertEquals ( "123" , b . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "1" , book . getId ( ) )
assertEquals ( "Expected SOAPFaultException" , expectedExceptionMessage , e . getMessage ( ) )
assertEquals ( "expected exception message" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( "http://cxf.apache.org/greeter_control/types" , nd . getAttributes ( ) . getNamedItem ( "namespace" ) . getNodeValue ( ) )
Assert . assertEquals ( false , created . value )
assertEquals ( "Bonjour John!" , g . greetMe ( "John" ) )
assertEquals ( wsdl . toString ( ) , wsdlLocator . getBaseURI ( ) )
assertEquals ( 0 , bytes )
Assert . assertEquals ( "Invalid response message" , "<AssertPlaceHolder>" , sfe . getMessage ( ) )
Assert . assertEquals ( "test" , cause . getMessage ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , conn . getResponseCode ( ) )
assertEquals ( HttpURLConnection . HTTP_OK , conn . getResponseCode ( ) )
cert . assertNotNull ( )
assertNotNull ( cert )
assertEquals ( Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "book" , text )
assertEquals ( "book" , text )
assertEquals ( "book" , text )
assertNotNull ( at )
assertEquals ( "http://localhost:" + pubPort + "/oauth2Public/token" , wc . getCurrentURI ( ) . toString ( ) )
assertNotNull ( at )
assertNotNull ( at )
assertNotNull ( at )
assertNotNull ( ex )
assertEquals ( Response . Status . FORBIDDEN . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertThat ( ex . getResponse ( ) . getStatus ( ) , is ( equalTo ( 403 ) ) )
assertNotNull ( book . getId ( ) )
assertNotNull ( book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "123" , book . getId ( ) )
assertEquals ( "125" , book . getId ( ) )
assertNotNull ( book )
assertEquals ( "Patch" , book . getName ( ) )
assertNotNull ( book )
assertNotNull ( book . get ( ) )
assertEquals ( Response . Status . NOT_FOUND . getStatusCode ( ) , future . get ( ) . getStatus ( ) )
assertEquals ( true , holder . value )
assertNotNull ( client . get ( String . class ) )
assertEquals ( "Expected message is null" , null , getMessage ( ) )
assertEquals ( "Expected reply is not correct" , "Hello" , reply )
assertEquals ( "Hello FooBar" , reply )
assertEquals ( "Hello Chris" , greeting )
assertThrows ( Exception . class , ( ) -> greeter . greetMe ( "Bad guy" ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 1 , 1 )
assertEquals ( HelloContinuation . class , helloPort . getClass ( ) )
assertNotNull ( client . get ( String . class ) )
assertEquals ( 1 , 1 )
Assert . assertEquals ( "http://schemas.xmlsoap.org/wsdl/soap/http" , ep . getBinding ( ) . getBindingID ( ) )
assertEquals ( "qualified" , ef )
assertEquals ( "Hi John!" , greeter . sayHi ( "John" ) )
assertNotNullExtensions ( bus )
assertNotNull ( bus . getExtension ( WSDLManager . class ) )
assertEquals ( wsdlUrl , getClass ( ) . getResource ( "/wsdl/hello_world.wsdl" ) )
assertEquals ( "expectedValue" , resp )
assertEquals ( "Hello Betty" , output )
assertEquals ( "dummy" , sendNotification ( new testnotification . SendNotification ( ) ) )
Assert . assertEquals ( true , numResp . isEven ( ) )
assertEquals ( bytes , image . value )
assertEquals ( bytes , image . value )
assertEquals ( "[Hello World:1:123456789]" , toString ( event ) )
assertEquals ( expected , e . getMessage ( ) )
assertEquals ( "Expected result" , "Actual result" , echo )
assertEquals ( "expected exception message" , ex . getMessage ( ) )
assertEquals ( "Hello" , retObj )
assertEquals ( "expectedValue" , port . sayHello ( "inputValue" ) )
Assert . assertEquals ( expectedValue , port . doubleIt ( numberToDouble ) )
Assert . assertEquals ( expectedValue , port . doubleIt ( numberToDouble ) )
assertEquals ( "Expected output" , "Actual output" , output )
assertEquals ( INPUT , output )
assertEquals ( "Frank is unauthorized" , ex . getMessage ( ) )
assertEquals ( "Frank is unauthorized" , ex . getMessage ( ) )
assertNotEquals ( "Result = 0" , port . addNumbers ( 0 , 0 ) )
assertThrows ( AddNumbersException . class , ( ) -> port . addNumbers ( 1 , 2 ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( "Result = 3" , port . addNumbers ( 1 , 2 ) )
assertEquals ( "Result = 3" , port . addNumbers ( 1 , 2 ) )
assertNotNull ( e )
assertNotNull ( e )
assertEquals ( "v1" , value )
assertEquals ( "v2" , value )
assertEquals ( "Expected value" , expectedValue , actualValue )
assertEquals ( null , e . getMessage ( ) )
assertEquals ( tsSource , toolSpec . getTsSource ( ) )
assertEquals ( "expectedValue" , getStreamRefName ( "streamId" ) )
assertEquals ( "test" , result . getParameter ( "n" ) )
jType = "string"
assertEquals ( "com.iona.test/A.java" , fileWriter . getRoot ( "com.iona.test/A.java" ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( null , error )
assertEquals ( "[expected message:expected sequence number:expected timestamp]" , toString ( event ) )
assertEquals ( "Expected output" , expectedOutput , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "test.wsdl" , getLocation ( "test.wsdl" ) )
assertEquals ( "JavaToWS Error: <expected exception message>" , getStdOut ( ) )
assertEquals ( "JavaToWS Error: java.lang.IllegalArgumentException: Invalid argument: a.ww" , getStdOut ( ) . trim ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "demo.xjb" , gen . getJAXBCustFile ( outputdir ) . getName ( ) )
assertEquals ( Style . Simple , factory . discoverStyle ( ) )
assertEquals ( Style . Simple , factory . discoverStyle ( ) )
assertEquals ( oldCP , newCP )
assertEquals ( "" , getStdOut ( ) )
assertEquals ( "Expected error message" , "Error message" , getStdErr ( ) )
assertEquals ( expected , e . getMessage ( ) )
assertEquals ( "[expected value]" , toString ( def ) )
assertEquals ( "Should throw ToolException." , ToolException . class , e . getClass ( ) )
assertEquals ( "hello world" , writer . toString ( ) )
assertNotNull ( wrex . getMessage ( ) )
assertEquals ( boolA , boolB )
Assert . assertEquals ( greeterServer , classLoader . loadClass ( "org.apache.cxf.w2j.hello_world_soap_http.Greeter_SoapPort_Server" ) )
Assert . assertEquals ( Holder . class , method . getParameterTypes ( ) [ 0 ] )
Assert . assertEquals ( "org.apache.cxf.w2j.hello_world_soap_http.types.ActionType" , clz . getName ( ) )
assertEquals ( expected , e . getMessage ( ) )
