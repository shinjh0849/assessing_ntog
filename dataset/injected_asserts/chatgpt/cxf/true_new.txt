assertTrue ( factory instanceof TestBusFactory )
assertNotNull ( bus . getExtension ( TestListener . class ) )
assertEquals ( mockHandler , m . getProperty ( "org.glassfish.jaxb.characterEscapeHandler" ) )
assertEquals ( "Lorg/apache/cxf/common/util/ASMHelperTest$EnumObject<Ljava/lang/Enum;>;" , classCode )
assertEquals ( decodedText , text )
assertEquals ( "Should get same packageName" , this . getClass ( ) . getPackage ( ) . getName ( ) , packageName )
assertEquals ( orig , URLDecoder . decode ( s , StandardCharsets . UTF_8 . name ( ) ) )
assertEquals ( "+ " , UrlUtils . urlDecode ( "%2B+" ) )
assertNull ( ex . getRuntimeException ( ) )
assertTrue ( e . toString ( ) . contains ( "please set java.io.tempdir to an existing directory" ) )
assertEquals ( HttpHeaderHelper . ISO88591 , cs )
assertEquals ( HttpHeaderHelper . ISO88591 , cs )
assertEquals ( "http://ws.example.com/" , tns )
assertEquals ( "The test stream content isn't same " , test , result )
assertEquals ( bindingOperationInfo . getName ( ) , new QName ( TEST_NS , "operationTest" ) )
assertTrue ( bos . toString ( ) . contains ( "ItemLookup" ) )
assertEquals ( sayHi , dr . getName ( ) )
assertNotNull ( reader )
assertEquals ( "Body" , reader . getLocalName ( ) )
assertEquals ( input , output )
assertEquals ( in . toString ( ) , out . toString ( ) )
assertEquals ( "gorilla" , value )
assertThat ( exception , is ( nullValue ( ) ) )
assertTrue ( "Expect RejectedExecutionException when the work queue is full." , x <= 4 )
assertEquals ( "SayHi isn't returning expected string" , "Hello Bob" , response )
assertEquals ( "SayHiToUser isn't returning expected string" , "Hello Sam" , response )
assertNotNull ( "Should have returned a class here" , c1 )
assertNull ( "url must be null. " , url )
assertNull ( "url must be null. " , url )
assertNotNull ( "stream is not null" , is )
assertFalse ( closed . get ( ) )
assertTrue ( closed . get ( ) )
assertNull ( "getLinkedException return null" , re . getLinkedException ( ) )
assertEquals ( "get same exception" , cause , re . getLinkedException ( ) )
assertEquals ( "ResourceAdapter is set" , mci . getResourceAdapter ( ) , rai )
assertTrue ( "wrong ResourceAdapter set" , re . getMessage ( ) . indexOf ( "ResourceAdapterImpl" ) != - 1 )
assertNotNull ( "MC must not be null." , unboundMC )
assertTrue ( o instanceof Foo )
assertFalse ( "target object must not be called" , target . methodInvoked )
assertTrue ( "non object method must be passed to next handler in chain" , dummyHandler1 . invokeCalled )
assertEquals ( "org.apache.hello_world_soap_http.Greeter" , endpoint . getServiceClassName ( ) )
assertThat ( actual . stream ( ) . map ( Timed :: value ) . collect ( Collectors . toSet ( ) ) , containsInAnyOrder ( "aliasTimed" ) )
assertThat ( actual . stream ( ) . map ( Timed :: value ) . collect ( Collectors . toSet ( ) ) , empty ( ) )
assertThat ( context . unwrap ( Tracer . class ) , sameInstance ( brave . tracer ( ) ) )
assertThat ( context . unwrap ( Tracer . class ) , sameInstance ( tracer ) )
assertEquals ( Phase . POST_LOGICAL , colocOut . getPhase ( ) )
assertNotNull ( "conduit should not be null" , conduit )
assertNotNull ( "EndpointReferenceType should not be null" , endpoint )
assertEquals ( "String" , stringValue )
assertEquals ( "WString" , wstringValue )
assertTrue ( ul == ulongValue )
assertEquals ( "checking getName " , new QName ( "http://foo.org" , "test" ) , reader . getName ( ) )
assertEquals ( "checking localName " , "test" , reader . getLocalName ( ) )
assertEquals ( "checking getText" , "abcdef" , reader . getText ( ) )
assertEquals ( "abcd" , pointer [ 0 ] )
assertTrue ( mode == org . omg . CORBA . ARG_IN . value )
assertNotNull ( soapMessage . getHeaders ( ) )
assertNotNull ( soapMessage . getHeaders ( ) )
assertNull ( nsc )
assertEquals ( "urn:cxf" , action )
assertNull ( action )
assertNull ( action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertNull ( action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "urn:cxf" , action )
assertEquals ( "Channa Doll" , sholder . value )
assertEquals ( "reflection" , boing )
assertNotSame ( DefaultTypeMapping . DEFAULT_MAPPING_URI , uri )
assertTrue ( sb instanceof SimpleBean )
assertEquals ( "simple" , s )
assertEquals ( "carrot" , rootElement . getNodeName ( ) )
assertEquals ( Long . valueOf ( 123456789 ) , arrayService . getNumberValue ( ) )
assertTrue ( h instanceof MyHello )
assertEquals ( correctAnswer , something )
assertEquals ( correctAnswer , something )
assertArrayEquals ( STRING_ARRAY , service . stringArrayValue )
fail ( "No exception was thrown" )
assertEquals ( 9 , pds . length )
assertArrayEquals ( new Object [ ] { 42 , Float . valueOf ( 42.42f ) , "Forty Two" } , objects )
assertArrayEquals ( new Object [ ] { 42 , new BigDecimal ( "42.42" ) , "Forty Two" } , objects )
assertNotNull ( doc )
assertTrue ( info . isNillable ( new QName ( info . getDefaultNamespace ( ) , "bogusProperty" ) ) )
assertFalse ( info . isNillable ( new QName ( info . getDefaultNamespace ( ) , "bogusProperty" ) ) )
assertNotNull ( wsdl )
assertTrue ( type instanceof EnumType )
assertEquals ( 0 , type . getTypeInfo ( ) . getElements ( ) . size ( ) )
assertEquals ( "twenty-seven" , lts . get ( Long . valueOf ( 27 ) ) )
assertEquals ( "somevalue" , db . getUnmarshallerProperties ( ) . get ( "someproperty" ) )
assertEquals ( "PT0S" , DatatypeFactory . PT0S . toString ( ) )
assertEquals ( "TestSOAPMessage" , elNode . getFirstChild ( ) . getFirstChild ( ) . getNodeValue ( ) )
assertEquals ( "GET[test]" , event . getOperationName ( ) )
assertEquals ( EventType . RESP_OUT , event . getType ( ) )
assertEquals ( "" , event . getOperationName ( ) )
assertEquals ( "http://localhost:9001/api" , event . getAddress ( ) )
assertEquals ( MASKED_HEADER_VALUE , event . getHeaders ( ) . get ( TEST_HEADER_NAME ) )
assertEquals ( "PUT[test]" , event . getOperationName ( ) )
assertThat ( actual , equalTo ( registry . config ( ) . clock ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual . stream ( ) . map ( Timed :: value ) . collect ( Collectors . toSet ( ) ) , containsInAnyOrder ( "customTimed" ) )
assertThat ( actual , is ( Tag . of ( EXCEPTION_METRIC_NAME , exception . getClass ( ) . getName ( ) ) ) )
assertThat ( actual , equalTo ( Tags . of ( Tag . of ( OPERATION_METRIC_NAME , "UNKNOWN" ) ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertThat ( actual , equalTo ( Tags . of ( DUMMY_TAG ) ) )
assertThat ( actual , equalTo ( Tags . of ( DUMMY_TAG ) ) )
assertNull ( mc . getContext ( Message . class ) )
assertEquals ( "a=b&c=d" , FormUtils . formToString ( form ) )
assertEquals ( "bar" , a . getHeader ( "foo" ) )
assertEquals ( "baz" , xp . getValue ( "/foo/bar/@attr" ) )
assertNotNull ( element )
assertNotNull ( element )
assertNull ( xp . getNode ( "/foo/bar1" , Element . class ) )
assertNotNull ( bar )
assertNotNull ( bar )
assertNotNull ( bar )
assertEquals ( "/2" , value . toString ( ) )
assertEquals ( s , parsed )
assertEquals ( "no-transform" , cc . toString ( ) )
assertTrue ( cc . toString ( ) . contains ( "no-cache=\"c,d\"" ) )
assertEquals ( HttpUtils . toHttpDate ( retry ) , HttpUtils . toHttpDate ( retry2 ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_NOT_MODIFIED , response . getStatus ( ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertNull ( values )
assertEquals ( MediaType . valueOf ( "*/*" ) , h . getMediaType ( ) )
assertEquals ( "text/plain" , h . getRequestHeaders ( ) . getFirst ( "Content-Type" ) )
assertEquals ( "1,2" , date )
assertEquals ( "en_US" , h . getLanguage ( ) . toString ( ) )
assertEquals ( "<http://example.com/page1>;rel=\"previous\"" , prevLink . toString ( ) )
assertEquals ( "<http://example.com/page1>;rel=\"1 2\"" , prevLink . toString ( ) )
assertEquals ( "<http://localhost:8080/base/relative>;rel=\"next\"" , link . toString ( ) )
assertEquals ( "<http://localhost:8080/relative>;rel=\"next\"" , link . toString ( ) )
assertEquals ( "<http://example.com/page1>;rel=\"previous\";title=\"A title\"" , prevLink . toString ( ) )
assertEquals ( "http://bar" , l . getUri ( ) . toString ( ) )
assertEquals ( expected , result )
assertNull ( "Precondition must be met" , rb )
assertNull ( "Precondition must be met" , rb )
assertEquals ( 204 , new ResponseBuilderImpl ( ) . build ( ) . getStatus ( ) )
assertNull ( r . getMetadata ( ) . getFirst ( "Allow" ) )
assertEquals ( "\"foo\"" , eTag )
assertEquals ( str , response . readEntity ( String . class ) )
assertEquals ( "Response" , doc . getDocumentElement ( ) . getLocalName ( ) )
assertEquals ( "Response" , doc . getDocumentElement ( ) . getLocalName ( ) )
assertTrue ( header . contains ( bean . get ( ) ) )
assertEquals ( EntityTag . valueOf ( "\"1234\"" ) , ri . getEntityTag ( ) )
assertEquals ( URI . create ( "http://localhost:8080" ) , ri . getLocation ( ) )
assertEquals ( Locale . US , ri . getLanguage ( ) )
assertEquals ( MediaType . TEXT_XML_TYPE , ri . getMediaType ( ) )
assertNull ( builder )
assertEquals ( str , response . readEntity ( String . class ) )
assertEquals ( str , response . readEntity ( String . class , annotations ) )
assertThat ( RetryAfterHeaderProvider . valueOf ( clock , date ) , is ( delay ) )
assertEquals ( "Digest" , scheme )
assertEquals ( "path?a=b" , uri . toString ( ) )
assertEquals ( "http://localhost/1/2" , uri . toString ( ) )
assertEquals ( "/%7B%7D" , uri . toString ( ) )
assertEquals ( "/1/2" , uri . toString ( ) )
assertEquals ( "/2/1" , uri . toString ( ) )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "/index1.jsp?a=valueA&b=valueB" , uri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://bar/" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://bar" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "bar/foo" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "/bar/foo" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://bar?q" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://bar/foo;q=1%2F2" , newUri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "URI is not built correctly" , "https://localhost:8080/foo/bar" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://foo/newpath" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://foo/httppnewpath" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , "http://foo" , newUri . toString ( ) )
assertEquals ( "URI is not built correctly" , uri , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://zzz/foo/bar/foo" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://zzz/foo%25/bar%25/baz%20" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://zzz/%7Bfoo%7D" ) , newUri )
assertEquals ( expectedPath , rawPath )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bookstore/" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bookstore/books/bar" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/books/bar" ) , newUri )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar?p1=nv1" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar?p1=v1&p1=v1" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar?p2=v2" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar?p1=nv1&p1=nv2&p2=v2" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar;p1=nv1" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar;p1=v1;p2=v2" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/bar;p1=v1;p1=v2;p1=v3" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://blah/foo;p1=v1/bar" ) , newUri )
assertEquals ( "URI is not built correctly" , new URI ( "http://blah/foo;p1=v1/bar;p2=v2" ) , newUri )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( uri . toString ( ) , expected )
assertEquals ( template , expected )
assertEquals ( uri . toString ( ) , expected )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expectedValue , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( url , uri . toString ( ) )
assertEquals ( "my/path/%7B%7Bp:his/him%7D%7D" , uri . toString ( ) )
assertEquals ( "my/path/pmy/day/%7D" , uri . toString ( ) )
assertEquals ( "/%7B" , uri . toString ( ) )
assertEquals ( "test/foo" , c . getProduceMime ( ) . get ( 0 ) . toString ( ) )
assertEquals ( Collections . singleton ( CustomNameBinding . class . getName ( ) ) , names )
assertTrue ( uriTemplate . match ( "/customers;123456/123/orders;456/3" , values ) )
assertEquals ( "a%20{id}%20b" , ut . encodeLiteralCharacters ( false ) )
assertEquals ( "a%20{digit:[0-9]}%20b" , ut . encodeLiteralCharacters ( false ) )
assertSame ( bus , provider . getBus ( ) )
assertEquals ( "image" , IOUtils . readStringFromStream ( ds . getDataSource ( ) . getInputStream ( ) ) )
assertEquals ( "Wrong value" , "a=a1&b=b1" , result )
assertFalse ( p . isWriteable ( Byte . class , null , null , MediaType . valueOf ( "text/custom" ) ) )
assertFalse ( p . isWriteable ( Character . class , null , null , MediaType . valueOf ( "text/custom" ) ) )
assertNotSame ( ServerProviderFactory . getInstance ( ) , ServerProviderFactory . getInstance ( ) )
assertTrue ( writer instanceof DataSourceProvider )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertTrue ( mbr instanceof PrimitiveTextProvider )
assertTrue ( mbr instanceof CustomBooleanReader2 )
assertTrue ( mbr instanceof StringTextProvider )
assertTrue ( Document . class . isAssignableFrom ( verifyRead ( p , Document . class ) . getClass ( ) ) )
assertEquals ( "<test/>" , s )
assertEquals ( "Transformation is bad" , b , b2 )
assertEquals ( "Transformation is bad" , b , b2 )
assertEquals ( "UPDATE" , AnnotationUtils . getHttpMethodValue ( m ) )
assertEquals ( "/address" , HttpUtils . encodePartiallyEncoded ( "/address" , false ) )
assertEquals ( "+ " , HttpUtils . urlDecode ( "%2B+" ) )
assertEquals ( "%2B+" , HttpUtils . urlEncode ( "+ " ) )
assertEquals ( "+++" , HttpUtils . pathDecode ( "+%2B+" ) )
assertEquals ( "http://localhost:8080/bar/foo" , u . toString ( ) )
assertEquals ( value , id . getId ( ) )
assertEquals ( "Type is wrong" , "a6f7357f-6e7e-40e5-9b4a-c455c23b10a2" , helmId . getId ( ) )
assertEquals ( 404 , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( "bQuery" , c . getB ( ) )
assertEquals ( "/base" , application . getAddress ( ) )
assertTrue ( e . getMessage ( ) . contains ( "WebMethod" ) )
assertEquals ( expeced , e . getMessage ( ) )
assertNotNull ( binding )
assertEquals ( "the target object and service object should be equal " , object , target )
assertNotNull ( s )
assertNotNull ( server )
assertNotNull ( serverFB . getServer ( ) )
assertNotNull ( wsdl1 )
assertNotNull ( wsdl1 )
assertNotNull ( response )
assertTrue ( disp . getBinding ( ) instanceof HTTPBinding )
assertEquals ( "unexpected phase" , "user-protocol" , pi . getPhase ( ) )
assertEquals ( "incorrect string value returned" , STRING_VALUE , ret )
assertEquals ( "{http://my}Operation" , event . getOperationName ( ) )
assertNotNull ( response )
assertNotNull ( response )
assertEquals ( "testutils/calculator.wsdl" , info . getWsdlLocation ( ) )
assertEquals ( "wrong exception message" , ServerApp . NO_FILES_ERR , ex . getMessage ( ) )
assertTrue ( ex . getMessage ( ) . startsWith ( ServerApp . UNKNOWN_OPTION ) )
assertNotNull ( dir )
assertTrue ( server . getDestination ( ) instanceof CustomDestination )
assertEquals ( "Wazzzuuup yo!" , result )
assertNotNull ( "MBeanInfo should not be null" , info )
assertTrue ( bean . create ( ) instanceof BookStore )
assertTrue ( bean . create ( ) instanceof BookStore )
assertTrue ( bean . create ( ) instanceof Book )
assertEquals ( "http://foo/bar+%20%2B;a=value+%20?b=bv%2B+%2B" , u . toString ( ) )
assertEquals ( "http://foo/*" , u . toString ( ) )
assertEquals ( "http://foo/**" , u . toString ( ) )
assertEquals ( "http://foo?_wadl" , wc . getCurrentURI ( ) . toString ( ) )
assertEquals ( "http://foo" , wc . getCurrentURI ( ) . toString ( ) )
assertNotNull ( WebClient . getConfig ( wc ) != null )
assertEquals ( "en_CA" , wc . getHeaders ( ) . getFirst ( HttpHeaders . CONTENT_LANGUAGE ) )
assertTrue ( e . getMessage ( ) . contains ( "client is closed" ) )
assertEquals ( "test1" , result )
assertEquals ( null , ex . getResponse ( ) . getHeaderString ( "X-Done" ) )
assertThat ( ex . getCause ( ) , is ( instanceOf ( ResponseProcessingException . class ) ) )
assertThat ( ex . getCause ( ) , is ( instanceOf ( ResponseProcessingException . class ) ) )
assertNull ( handleRequest ( wg , m ) )
assertEquals ( response . getStatus ( ) , 404 )
assertEquals ( "{\"createdAt\":\"" + date . toString ( ) + "\"}" , json )
assertEquals ( simpleBeanXml , xml )
assertEquals ( "{\"a\":\"\"}" , str )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , ex . getResponse ( ) . getStatus ( ) )
assertTrue ( bos . toString ( ) . contains ( "\"name\":\"http://cxf\"" ) )
assertTrue ( bos . toString ( ) . contains ( "\"name\":\"http:\\/\\/cxf\"" ) )
assertEquals ( "{\"tagVO\":{\"group\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( "{\"thetag\":{\"group\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( "{\"book2\":{\"id\":123}}" , s )
assertEquals ( "{\"tagVO\":{\"group\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( "{\"Book\":{\"id\":\"125\",\"name\":\"CXF\",\"state\":\"\"}}" , s )
assertEquals ( "{\"b\":2}" , s )
assertEquals ( "{\"testBean\":{\"@id\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( "{\"ns1.thetag\":{\"group\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "myCallback();" , bos . toString ( ) )
assertEquals ( "callback();" , bos . toString ( ) )
assertThat ( ex . getResponse ( ) . getStatus ( ) , equalTo ( Response . Status . BAD_REQUEST . getStatusCode ( ) ) )
assertEquals ( "a==b" , exp )
assertEquals ( "(a==b,a==b1)" , exp )
assertEquals ( "(a==b;c==d)" , exp )
assertEquals ( "abc" , SearchUtils . toSqlWildcardString ( "abc" , false ) )
assertEquals ( "abc%" , SearchUtils . toSqlWildcardString ( "abc*" , false ) )
assertEquals ( cLeq . getCondition ( ) , attr )
assertEquals ( "" , b . query ( ) )
assertEquals ( "foo==-P0Y0M1DT12H0M0S" , ret )
assertEquals ( "foo!=123.5" , ret )
assertEquals ( "foo!=-P0Y0M1DT12H0M0S" , ret )
assertEquals ( "foo=gt=abc" , ret )
assertEquals ( "foo=le=abc" , ret )
assertEquals ( "foo=gt=25.0" , ret )
assertEquals ( "foo=lt=25.333" , ret )
assertEquals ( "foo=le=0" , ret )
assertEquals ( "foo=ge=-5" , ret )
assertEquals ( "foo=lt=2011-03-02" , ret )
assertEquals ( "foo=ge=2011-03-02" , ret )
assertEquals ( "foo=ge=-P0Y0M1DT12H0M0S" , ret )
assertEquals ( "foo=gt=20,foo=lt=10" , ret )
assertEquals ( "foo=gt=20;bar==plonk" , ret )
assertEquals ( "(foo==aaa;bar==bbb)" , ret )
assertEquals ( "foo==123.4,foo==137.8" , ret )
assertEquals ( "(foo==123.4,foo==137.8);bar==baz" , ret )
assertEquals ( "(foo==123.4,foo==137.8,n==n1);bar==baz" , ret )
assertTrue ( SearchConditionBuilder . instance ( ) instanceof FiqlSearchConditionBuilder )
assertNotNull ( place )
assertEquals ( "SELECT * FROM table WHERE name = 'test'" , sql )
assertEquals ( "SELECT t FROM Book t WHERE t.id < '10'" , jpa . getQuery ( ) )
assertEquals ( "(!name=ami)" , ldap )
assertEquals ( "(|(name=ami*)(level>=10))" , ldap )
assertEquals ( "(&(name=foo)(|(!name=bar)(level<=10)))" , ldap )
assertEquals ( "(&(|(name=test)(level=18))(|(name=test1)(!level=19)))" , ldap )
assertEquals ( "SELECT * FROM table WHERE name = 'test'" , sql )
assertEquals ( "SELECT NAMES FROM table WHERE NAMES = 'test'" , sql )
assertNull ( "Document should be null, it is encrypted" , extractor . extract ( ( InputStream ) null ) )
assertEquals ( "CompletionException:NoSuchEntityException" , cs . toCompletableFuture ( ) . get ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "defaultValue" , client . myDefaultMethod ( false ) )
assertEquals ( "Hello" , jweIn . decrypt ( jweOutput ) . getContentText ( ) )
assertNotNull ( jwk1 . getProperty ( JsonWebKey . RSA_PUBLIC_EXP ) )
assertEquals ( ENCODED_TOKEN_SIGNED_BY_MAC , jws . getSignedEncodedJws ( ) )
assertEquals ( exp , jwsConsumer . getJwtClaims ( ) . getExpiryTime ( ) . longValue ( ) )
assertEquals ( SignatureAlgorithm . NONE , jws . getAlgorithm ( ) )
assertEquals ( tokenKey , cat . getTokenKey ( ) )
assertEquals ( OAuthConstants . SERVER_ERROR , e . getMessage ( ) )
assertTrue ( t instanceof BearerAccessToken )
assertEquals ( c . getClientSecret ( ) , savedClient . getClientSecret ( ) )
assertNull ( c3 )
assertEquals ( "Duplicate nonce" , ex . getMessage ( ) )
assertEquals ( sse . newEventBuilder ( ) . getClass ( ) , OutboundSseEventImpl . BuilderImpl . class )
assertEquals ( "Hello " + request , resp . getResponseType ( ) )
assertEquals ( "Hello " + request , resp . getResponseType ( ) )
assertEquals ( policy , dest . getServer ( ) )
assertNotNull ( "EngineFactory is not configured." , factory )
assertEquals ( "Get a wrong response" , "Hello test" , response )
assertEquals ( policy , dest . getServer ( ) )
assertEquals ( policy , dest . getServer ( ) )
assertNotNull ( "EngineFactory is not configured." , factory )
assertNull ( inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
assertTrue ( sw . toString ( ) . contains ( "href=\"" + styleSheetPath + "\"" ) )
assertTrue ( "The OutputStream and Writer should not both be null " , os != null || writer != null )
assertEquals ( "java:/comp/TransactionManager" , endpoint . getJndiTransactionManagerName ( ) )
assertEquals ( "customJMSAttribute=helloWorld" , config . getMessageSelector ( ) )
assertNotNull ( "The destiantion should have got the message " , destMessage )
assertNull ( "SecurityContext should not be set in message received by JMSDestination" , securityContext )
assertTrue ( "is multiplex" , destination instanceof MultiplexDestination )
assertEquals ( CONVERTED_RESPONSE_KEY , message . getPropertyNames ( ) . nextElement ( ) )
assertNull ( provider . getContinuation ( ) )
assertFalse ( cw . suspend ( 1000 ) )
assertNull ( cw . getObject ( ) )
assertEquals ( JMSEndpoint . QUEUE , endpoint . getJmsVariant ( ) )
assertTrue ( "Message should have been of type BytesMessage " , jmsMessage instanceof BytesMessage )
assertEquals ( 1 , added )
assertEquals ( "http://foo/bar/SEI/opRequest" , action )
assertEquals ( "unexpected fault string" , "Duplicate Message ID urn:uuid:12345" , sfe . getMessage ( ) )
assertTrue ( FilteringUtil . doesConformToFilter ( doc . getDocumentElement ( ) , filter ) )
assertEquals ( "NOT_ASSERTED_EXC" , ex . getCode ( ) )
assertNull ( eap . getLocation ( ) )
assertNull ( eap . getEffectivePolicy ( ei , null ) )
assertNull ( eap . getEffectivePolicy ( si , null ) )
assertNotNull ( ep )
assertEquals ( "Unexpected endpoint identifier" , name , seq . getEndpointIdentifier ( ) )
assertNull ( destination . getSequence ( id ) )
assertNull ( proxy . getOfferedIdentifier ( ) )
assertNotNull ( new RMContextUtils ( ) )
assertNotNull ( rme . getServant ( ) )
assertNotNull ( s )
assertNotNull ( new RMManager ( ) . getBindingFaultFactory ( binding ) )
assertNull ( manager . getDestination ( message ) )
assertNull ( manager . getSource ( message ) )
assertNotNull ( manager )
assertNull ( manager . getReliableEndpointsMap ( ) . get ( e ) )
assertEquals ( "Unexpected endpoint identifier" , name , seq . getEndpointIdentifier ( ) )
assertArrayEquals ( DATA , msgbytes )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "Unauthorized" , ex . getMessage ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertTrue ( ctx . getUserPrincipal ( ) instanceof SAMLTokenPrincipal )
assertNull ( returnedRepresentation . getAny ( ) )
assertTrue ( result )
assertNotNull ( part . getTypeName ( ) )
assertTrue ( received )
assertTrue ( received )
assertEquals ( "CN-www.issuer.com_L-CGN_ST-NRW_C-DE_O-Issuer" , convertedName )
assertEquals ( Response . Status . CREATED . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( ret , "ffang" )
assertEquals ( y , bytes . length )
assertEquals ( y , bytes . length )
assertEquals ( expected , widgetFromService )
assertEquals ( expected , widgetFromService )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( "resumeFromFastThread" , str )
assertEquals ( 204 , r . getStatus ( ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 1023L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 561L , book . getId ( ) )
assertEquals ( 561L , book . getId ( ) )
assertEquals ( 561L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertTrue ( wc . post ( "s" , Boolean . class ) )
assertTrue ( wc . post ( "s" , Boolean . class ) )
assertTrue ( wc . post ( "s" , Boolean . class ) )
assertEquals ( 124L , future . get ( ) . getId ( ) )
assertEquals ( entity , response . readEntity ( String . class ) )
assertThat ( response . getStatus ( ) , equalTo ( 404 ) )
assertEquals ( "Retrieve" , book . getName ( ) )
assertEquals ( "Patch" , book . getName ( ) )
assertEquals ( "Patch" , book . getName ( ) )
assertEquals ( "Delete" , book . getName ( ) )
assertEquals ( "Retrieve" , book . get ( ) . getName ( ) )
assertEquals ( 404 , future . get ( ) . getStatus ( ) )
assertTrue ( holder . value )
assertThat ( ex . getCause ( ) , is ( instanceOf ( ResponseProcessingException . class ) ) )
assertThat ( ex . getCause ( ) , is ( instanceOf ( ResponseProcessingException . class ) ) )
assertThat ( response . getStatus ( ) , equalTo ( 404 ) )
assertThat ( response . getStatus ( ) , equalTo ( 200 ) )
assertEquals ( "Delete" , book . getName ( ) )
assertEquals ( "Retrieve" , book . getName ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 125L , b . getId ( ) )
assertEquals ( 406 , r . getStatus ( ) )
assertTrue ( cause . getMessage ( ) . contains ( "Different HTTP Scheme or Host Redirect detected on" ) )
assertTrue ( cause . getMessage ( ) . contains ( "Redirect loop detected on" ) )
assertTrue ( cause . getMessage ( ) . contains ( "Relative Redirect detected on" ) )
assertEquals ( "empty form" , r . readEntity ( String . class ) )
assertEquals ( "chapter 1" , chapter . getTitle ( ) )
assertEquals ( "Encoded Path" , book . getName ( ) )
assertEquals ( 406 , r . getStatus ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( name , b . getName ( ) )
assertEquals ( "Book as Object" , b . getName ( ) )
assertEquals ( 403 , r . getStatus ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( "notReturned" , ex . getResponse ( ) . getHeaderString ( "Status" ) )
assertEquals ( 202 , WebClient . client ( proxy ) . getResponse ( ) . getStatus ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 204 , WebClient . client ( store ) . getResponse ( ) . getStatus ( ) )
assertEquals ( 415 , urlConnection . getResponseCode ( ) )
assertTrue ( wc . get ( boolean . class ) )
assertTrue ( wc . get ( Boolean . class ) )
assertEquals ( 304 , WebClient . client ( bs ) . getResponse ( ) . getStatus ( ) )
assertEquals ( "SELECT * FROM books WHERE id >= '123'" , sql )
assertEquals ( 222L , book . getId ( ) )
assertEquals ( 444L , book . getId ( ) )
assertNull ( store . getEmptyBookNullable ( ) )
assertEquals ( "{\"id\":123,\"name\":\"CXF in Action\"}" , response )
assertEquals ( 123L , info . getId ( ) )
assertEquals ( 123 , book . getId ( ) )
assertEquals ( address + "?prop=cxf" , response )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( "PropValue" , r . getHeaderString ( "X-Property-WriterInterceptor" ) )
assertEquals ( "Nonexistent method" , ex . getResponse ( ) . readEntity ( String . class ) )
assertEquals ( b . getId ( ) , 123L )
assertEquals ( getStringFromInputStream ( expected ) , getStringFromInputStream ( in ) )
assertEquals ( "{\"name\":\"Barry\"}" , name )
assertEquals ( "1" , id )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( "this is the book title" , book . getName ( ) )
assertEquals ( "this is the book title" , book . getName ( ) )
assertEquals ( 123L , Long . parseLong ( source . getValue ( "Book/id" ) ) )
assertEquals ( 444L , WebClient . create ( address ) . get ( Book . class ) . getId ( ) )
assertEquals ( 444L , WebClient . create ( address ) . get ( Book . class ) . getId ( ) )
assertEquals ( PetStore . CLOSED , value )
assertEquals ( "avalue" , wc . get ( String . class ) )
assertEquals ( 999L , book . getId ( ) )
assertEquals ( "[{\"t\":\"doc\"}]" , r . readEntity ( String . class ) )
assertEquals ( 413 , r . getStatus ( ) )
assertEquals ( 413 , r . getStatus ( ) )
assertEquals ( 413 , r . getStatus ( ) )
assertEquals ( 413 , r . getStatus ( ) )
assertEquals ( "SuperBook" , book . getName ( ) )
assertEquals ( "SuperBook2" , book2 . getName ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertNotNull ( c )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 502 , response . getStatus ( ) )
assertEquals ( "FilteredApplicationInfo" , wc . get ( String . class ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 124L , response . getId ( ) )
assertEquals ( 124L , response . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( 432L , book . getId ( ) )
assertEquals ( "file name with semicolon, filename:" + "a;txt" , partContent )
assertThat ( interceptor . checkAllClosed ( ) , is ( true ) )
assertEquals ( "Absolute RequestURI is wrong" , wc . getBaseURI ( ) . toString ( ) , path )
assertEquals ( "CXF Rocks" , value )
assertEquals ( "avalue" , wc . get ( String . class ) )
assertEquals ( "Welcome" , welcome )
assertEquals ( "0" , getStringFromInputStream ( in ) )
assertEquals ( 124L , book . getId ( ) )
assertEquals ( "No Book with id 356 is available" , ex . getMessage ( ) )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatus ( ) )
assertEquals ( "id is wrong" , book . getId ( ) , 123 )
assertEquals ( "my/resource/1/matched/uris,my/resource/1" , data )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . NO_CONTENT . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( "Hello, world!" , text )
assertEquals ( "Hello, world!" , text )
assertEquals ( "Hello, world!" , text )
assertEquals ( "Hello, world!" , text )
assertEquals ( "Hello, world!" , text )
assertEquals ( 123 , b . getId ( ) )
assertEquals ( 123 , b . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 200 , r . getStatus ( ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . UNSUPPORTED_MEDIA_TYPE . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , r . getStatus ( ) )
assertEquals ( 1L , book . getId ( ) )
assertEquals ( 1L , book . getId ( ) )
assertEquals ( "HandleMessage throws exception" , e . getMessage ( ) )
assertEquals ( "HandleMessage throws exception" , e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . indexOf ( "HandleMessage throws exception" ) >= 0 )
assertTrue ( e . getMessage ( ) . equals ( "TestSOAPFaultException" ) )
assertNotNull ( nd )
assertFalse ( created . value )
assertEquals ( "Hello CXF" , g . greetMe ( "CXF" ) )
assertNotNull ( wsdl )
assertTrue ( "Attachment data were not received" , bytes > 0 )
assertTrue ( sfe . getMessage ( ) . contains ( "Marshalling Error" ) )
assertTrue ( "Timeout cause is expected" , cause instanceof java . net . SocketTimeoutException )
assertTrue ( "Soap fault must be returned" , 400 <= conn . getResponseCode ( ) )
assertEquals ( "http 202 must be returned" , 202 , conn . getResponseCode ( ) )
assertNotNull ( cert )
assertNotNull ( cert )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( "book" , text )
assertEquals ( "book" , text )
assertEquals ( "book" , text )
assertNotNull ( at . getTokenKey ( ) )
assertNotNull ( at . getTokenKey ( ) )
assertNotNull ( at . getTokenKey ( ) )
assertNotNull ( at . getTokenKey ( ) )
assertNotNull ( at . getTokenKey ( ) )
assertEquals ( "invalid_client" , ex . getError ( ) . getError ( ) )
assertEquals ( 403 , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( 403 , ex . getResponse ( ) . getStatus ( ) )
assertEquals ( 125L , book . getId ( ) )
assertEquals ( 125L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( 125L , book . getId ( ) )
assertEquals ( "Retrieve" , book . getName ( ) )
assertEquals ( "Patch" , book . getName ( ) )
assertEquals ( "Delete" , book . getName ( ) )
assertEquals ( "Retrieve" , book . get ( ) . getName ( ) )
assertEquals ( 404 , future . get ( ) . getStatus ( ) )
assertTrue ( holder . value )
assertEquals ( Controller . RESPONSE , client . get ( String . class ) )
assertTrue ( e . getMessage ( ) . contains ( "Unrecognized BindingVersion" ) )
assertEquals ( "Bonjour" , reply )
assertEquals ( "Hello " + name , reply )
assertEquals ( "Hello Chris" , greeting )
fail ( "Expecting exception here" )
assertThat ( response . getStatus ( ) , equalTo ( 406 ) )
assertNotNull ( service )
assertNotNull ( service )
assertEquals ( TestServlet . RESPONSE , client . get ( String . class ) )
assertNotNull ( service )
assertTrue ( ep . getBinding ( ) instanceof SOAPBinding )
assertEquals ( "qualified" , ef )
assertEquals ( "Bonjour" , greeter . sayHi ( ) )
assertNotNullExtensions ( bus )
assertNotNullExtensions ( bus )
assertNotNull ( "wsdl resource was not found" , wsdlUrl )
assertEquals ( "registerCallback called" , resp )
assertEquals ( "Unexpected returned string: " + output , "Hello Betty" , output )
assertEquals ( "dummy" , getPort ( ) . sendNotification ( new SendNotification ( ) ) )
assertFalse ( "103 is not even" , numResp . isEven ( ) )
assertNotNull ( image )
assertNotNull ( image )
assertTrue ( "MTOM should not be enabled" , bout . toString ( ) . indexOf ( "<xop:Include" ) == - 1 )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . indexOf ( expected ) != - 1 )
assertEquals ( "Bonjour" , echo )
assertTrue ( ex . getMessage ( ) , ex . getMessage ( ) . contains ( "Marshalling" ) )
assertEquals ( "Hello" , retObj )
assertEquals ( "Hello CXF" , port . sayHello ( "CXF" ) )
assertEquals ( 50 , port . doubleIt ( 25 ) )
assertEquals ( 50 , port . doubleIt ( 25 ) )
assertEquals ( INPUT , output )
assertEquals ( INPUT , output )
assertEquals ( "Unauthorized" , ex . getMessage ( ) )
assertEquals ( "Unauthorized" , ex . getMessage ( ) )
assertEquals ( 3 , port . addNumbers ( 1 , 2 ) )
assertEquals ( 3 , port . addNumbers ( 1 , 2 ) )
assertTrue ( e . getMessage ( ) . contains ( "Unexpected wrapper" ) )
assertTrue ( ( end - start ) < 50000 )
assertTrue ( ( end - start ) < 50000 )
assertTrue ( e . getFault ( ) . getFaultCode ( ) . contains ( "OnlyNonAnonymousAddressSupported" ) )
assertTrue ( e . getFault ( ) . getFaultCode ( ) . contains ( "OnlyAnonymousAddressSupported" ) )
assertEquals ( "v1" , value )
assertEquals ( "v2" , value )
assertEquals ( "@WebService" , annotation . toString ( ) )
assertEquals ( "Tool specification has to be set before initializing" , e . getMessage ( ) )
assertNull ( toolSpec . getAnnotation ( ) )
assertEquals ( "test getStreamRefName failed" , toolSpec . getStreamRefName ( "streamref" ) , "namespace" )
assertEquals ( "testValidArguments Failed" , "test" , result . getParameter ( "namespace" ) )
assertEquals ( jType , "java.lang.String" )
assertTrue ( new File ( targetDir . getRoot ( ) , "/com/iona/test/A.java" ) . canWrite ( ) )
assertTrue ( e . getMessage ( ) . indexOf ( "can't resolve type for const myConst" ) >= 0 )
assertEquals ( "No bindings exists within this WSDL." , error )
assertTrue ( "Fail to generate JS file: " + jsFile . toString ( ) , jsFile . exists ( ) )
assertNotNull ( getStdOut ( ) )
assertNotNull ( getStdOut ( ) )
assertNotNull ( getStdOut ( ) )
assertNotNull ( getStdOut ( ) )
assertNotNull ( getStdOut ( ) )
assertNotNull ( getStdOut ( ) )
assertEquals ( - 1 , getStdOut ( ) . indexOf ( "Caused by:" ) )
assertTrue ( gen . getJAXBCustFile ( new File ( "." ) ) . toString ( ) . endsWith ( "demo.xjb" ) )
assertEquals ( FrontendFactory . Style . Jaxws , factory . discoverStyle ( ) )
assertEquals ( FrontendFactory . Style . Simple , factory . discoverStyle ( ) )
assertEquals ( oldCP , newCP )
assertTrue ( this . getStdOut ( ) . contains ( "Valid WSDL" ) )
assertTrue ( getStdErr ( ) . indexOf ( "The ftp URI scheme is not allowed" ) != - 1 )
assertTrue ( e . getMessage ( ) . contains ( expected ) )
assertEquals ( "/wsdl:definitions" , def . toString ( ) )
assertEquals ( getLogMessage ( "FOUND_NO_FRONTEND" ) , te . getMessage ( ) )
assertNull ( gen . parseOutputName ( packageName , className ) )
assertTrue ( wrex . getMessage ( ) . contains ( "Could not find portType for binding" ) )
assertTrue ( boolA || boolB )
assertNotNull ( "Server should be generated" , greeterServer )
assertNotNull ( "method should be generated" , method )
assertNotNull ( "Enum class could not be found" , clz )
assertEquals ( expected , e . getMessage ( ) . trim ( ) )
