assertEquals ( 1 , cnt )
assertEquals ( 1 , count )
assertEquals ( 1 , cnt )
assertThat ( e . getMessage ( ) , is ( "Expected exception message" ) )
AssertPlaceHolder = "Assert.assertTrue(results.isEmpty());"
assertEquals ( "group1" , getNameFromPath ( path1 ) )
assertEquals ( "" , getNameFromPath ( emptyPath ) )
assertEquals ( "" , getNameFromPath ( rootPath ) )
assertNotNull ( e . getMessage ( ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 10 , count )
assertEquals ( 10 , count )
assertEquals ( 1 , cnt )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertNotNull ( queryBuilder ( ) )
assertEquals ( "Expected UserException to be thrown" , "Expected message" , e . getMessage ( ) )
assertEquals ( 3 , listener . getResults ( ) . size ( ) )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 0 , cnt )
assertEquals ( null , table )
assertEquals ( 10 , cnt )
assertEquals ( 1 , cnt )
assertEquals ( 10 , result )
assertEquals ( 1 , cnt )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( 1 , count )
assertEquals ( "{\"type\":\"selector\",\"dimension\":\"SOME_FIELD\",\"value\":\"SOME_VALUE\"}" , druidScanSpec . toJson ( ) )
assertEquals ( "{\"type\":\"selector\",\"dimension\":\"SOME_FIELD\",\"value\":\"SOME_VALUE\"}" , druidScanSpec . toJson ( ) )
assertEquals ( "1" , druidScanSpec . toJson ( ) )
assertEquals ( "<expected value>" , druidScanSpec . toJson ( ) )
assertEquals ( expectedJson , druidScanSpec . toJson ( ) )
assertEquals ( "$regex$_some_regular_expression" , druidScanSpec . getFilter ( ) . toJson ( ) )
assertEquals ( "expectedValue" , druidScanSpec . toJson ( ) )
assertEquals ( "Invalid column name" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( 2 , insertResults . getRowsAffected ( ) )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( 1 , actualRowCount )
assertThat ( columns . size ( ) , is ( 2 ) )
assertNotNull ( cache . addOrGet ( columns ) )
assertEquals ( "Expected UserException to be thrown" , "Expected message" , e . getMessage ( ) )
assertNull ( results )
assertEquals ( "Expected exception message" , "<expected message>" , e . getMessage ( ) )
assertEquals ( 18 , count )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertNotNull ( plan )
assertNotNull ( plan )
assertEquals ( plan , queryBuilder ( ) . sql ( query ) . explainJson ( ) )
assertEquals ( plan , queryBuilder ( ) . sql ( query ) . explainJson ( ) )
assertNotNull ( plan )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertEquals ( "Table does not exist" , e . getMessage ( ) )
assertNotNull ( re . getMessage ( ) )
assertEquals ( JsonMessageReader . class . getName ( ) , messageReader . getClass ( ) . getName ( ) )
assertNotNull ( mapReader )
assertNotNull ( mapReader )
assertNotNull ( plan )
assertThat ( plan , is ( notNullValue ( ) ) )
assertEquals ( expectedQuery , sql )
assertEquals ( "phoenix123.v1" , queryBuilder ( ) . getSchema ( ) )
// Add your assertion here
assertEquals ( 1 , cnt )
assertEquals ( "Expected UserException to be thrown" , "ExpectedMessage" , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertEquals ( "field1" , newFields . get ( 0 ) . getName ( ) )
assertEquals ( 3 , builder . getFields ( ) . size ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "field1" , newFields . get ( 0 ) . getPath ( ) . toString ( ) )
assertEquals ( "main" , builder . getQuery ( ) )
assertEquals ( " sourcetype=\"access_combined_wcookie\"" , builder . build ( ) )
assertEquals ( "field1=value1" , query )
assertEquals ( " sourcetype=\"access_combined_wcookie\" OR sourcetype=\"sourcetype2\" OR sourcetype=\"sourcetype3\"" , query )
assertEquals ( "Invalid credentials" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "jame" , result )
assertEquals ( "Baston" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( 0.0 , result , 0.0001 )
result . validateArgs ( new String [ ] { "-Dlog.path=" + logPath + "/drillbit.log" , "-Dlog.query.path=" + logPath + "/drillbit_queries.json" } )
assertEquals ( propArg , result . getArgs ( ) . get ( 0 ) )
assertEquals ( "Test framework verification failed, expected failure on missing records." , ex . getMessage ( ) )
assertEquals ( "Test framework verification failed, expected failure for extra records." , ex . getMessage ( ) )
assertEquals ( "Test framework verification failed, expected failure on extra column." , ex . getMessage ( ) )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRecordCount , actualRecordCount )
assertEquals ( expectedRowCount , actualRowCount )
assertThat ( e . getVerboseMessage ( ) ) . isEqualTo ( "Storage alias '`abc`' for '`dfs`' created successfully" )
assertNotNull ( e )
assert recordCount == 1
assertEquals ( 1 , recordCount )
assertEquals ( 1 , recordCount )
assertThat ( recordCount , equalTo ( 1 ) )
assertEquals ( 1 , recordCount )
assertNotNull ( e )
assertEquals ( "Expected exception message" , "<expected exception message>" , e . getMessage ( ) )
assertEquals ( "Expected RpcException to be thrown" , RpcException . class , ex . getClass ( ) )
assertEquals ( expectedVersion , getVersion ( ) )
assertEquals ( value , actual )
assertEquals ( data , actual )
assertEquals ( expected , entries . next ( ) )
assertEquals ( null , existing )
assertEquals ( null , existing )
assertEquals ( expectedResult , registryHolder . getAllFunctionsWithHolders ( version . get ( ) ) )
assertEquals ( 1 , count )
assertEquals ( 1 , count )
assertEquals ( 2 , count )
assertEquals ( 0 , count )
assertEquals ( null , findLeaf ( dag , e ) )
assertEquals ( 0 , count )
assertEquals ( 4 , topNBatch . getTopNConfig ( ) . getLimit ( ) )
assertEquals ( 0 , count )
assertEquals ( 10 , count )
assertEquals ( 0 , count )
assertEquals ( 0 , count )
assertEquals ( 10 , count )
assertEquals ( 10 , count )
assertThat ( ex . getMessage ( ) , containsString ( "some expected error message" ) )
assertEquals ( ImpliedTupleRequest . ALL_MEMBERS , scanProj . getProjection ( ) )
assertEquals ( 0 , scanFixture . getReaderCount ( ) )
assertEquals ( 0 , fixture . batchBuilder ( ) . getColumns ( ) . size ( ) )
assertThat ( result . getSchema ( ) ) . isEqualTo ( expected )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( cache , handler . vectorCache )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertThat ( e . getMessage ( ) , is ( generateMessage ( true ) ) )
assertEquals ( 2 , projSet . size ( ) )
assertEquals ( definedSchema , schemaTracker . getDefinedSchema ( ) )
assertEquals ( expected , tracker . getReaderSchema ( ) )
assertEquals ( 0 , numOutputRecords )
assertEquals ( 3 , batch . getRowCount ( ) )
assertEquals ( 0 , ov . getAccessor ( ) . get ( 3 ) )
assert hasAssertions
assertEquals ( "Expected UserException to be thrown" , UserException . class , e . getClass ( ) )
assertEquals ( 0 , rsReader . getBatchCount ( ) )
assertEquals ( null , rsReader . next ( ) )
assertEquals ( 0 , cache . size ( ) )
assertEquals ( 0 , index . index )
assert vector . getAccessor ( ) . get ( i ) == 0xdeadbeef
assertEquals ( base + i , stringAt ( vector , i ) )
assert e . getMessage ( ) . equals ( "overflow called" )
assertEquals ( 25 , cnt )
assertEquals ( 2 , activeEndpoints . size ( ) )
assertEquals ( defaultValue , changedValue )
assertEquals ( 0 , totalDataSize )
assertEquals ( "Expected exception to be thrown" , ex . getClass ( ) , Exception . class )
assertEquals ( true , resourceManager . isResourceManagerEnabled ( ) )
assertEquals ( false , resourceManager . isResourceManagerEnabled ( ) )
assertNotNull ( selectedPool )
assertEquals ( testPool1 , selectedPool )
assertEquals ( testPool2 , selectedPool )
assertEquals ( future . get ( ) , handler . getQueryId ( ) )
assertEquals ( mesgA , future . get ( ) )
assertNotNull ( returnedProfile )
assertThat ( returnedProfile , is ( equalTo ( mockProfile ) ) )
assertEquals ( Acks . OK , response )
assertEquals ( Acks . FAIL , response )
assert failureCaught
assert failureCaught
assert failureCaught
assertEquals ( "10" , slice_target )
assertEquals ( "2" , maxWidth )
assertThat ( scope ) . isEqualTo ( "<expected value>" )
assertEquals ( "10000" , scope )
assertEquals ( null , config_server )
assertEquals ( "Impersonation is disabled" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Invalid value for option 'exec.errors.verbose' : not a boolean" , e . getMessage ( ) )
assertEquals ( expectedHeaders , responseHeaders )
assertEquals ( "Submission failed." , e . getMessage ( ) )
assertEquals ( 1 , cnt )
assertThat ( e . getMessage ( ) , is ( "Expected error message" ) )
assertNotNull ( singletonString ( ) )
assertEquals ( false , Files . exists ( file ) )
assertEquals ( true , Files . exists ( file ) )
assertEquals ( true , Files . exists ( createdFile ) )
assertEquals ( createdParentPath , resultPath . getParent ( ) )
assertEquals ( createdParentPath , resultPath . getParent ( ) )
assertEquals ( 1 , plugins . getPlugins ( ) . size ( ) )
assertEquals ( schema , actual )
assertEquals ( 0 , converters . size ( ) )
assertEquals ( 1 , schema . getFields ( ) . size ( ) )
assertEquals ( null , selection )
assertNotNull ( results )
assertNotNull ( e . getMessage ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
assertNotNull ( shpGeometryRow )
assertNull ( loader . next ( ) )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected UserException to be thrown" , "<AssertPlaceHolder>" , e . getMessage ( ) )
assertEquals ( "Expected UserException to be thrown" , "ExpectedMessage" , e . getMessage ( ) )
assertEquals ( "Expected exception message" , "Expected message" , e . getMessage ( ) )
assertEquals ( "Invalid error message" , "Expected error message" , e . getMessage ( ) )
assertEquals ( rowCount , expectedRowCount )
assertEquals ( expectedRowCount , actualRowCount )
assertEquals ( 1 , cnt )
assertThat ( mappings . get ( i ) ) . contains ( chunks . get ( i ) )
assertEquals ( null , testDisabledPluginGet ( ) )
assertThat ( e . getMessage ( ) , containsString ( "Key [" + key + "] should be illegal, putIfAbsent in the store should have failed" ) )
assertEquals ( "Expected UserException to be thrown" , UserException . class , ex . getClass ( ) )
assertEquals ( expectedValues [ i ] , map . get ( expectedValues [ i ] ) )
assertEquals ( "" , formattedValue )
assertEquals ( "2012-11-05" , formattedValue )
assertEquals ( "1:00:30 PM" , formattedValue )
assertEquals ( "yyyy-MM-dd HH:mm:ss.SS" , options . getString ( ExecConstants . WEB_DISPLAY_FORMAT_TIME ) )
assertEquals ( DEFAULT_INSTANCE , result )
assertEquals ( expected , deserialized )
assertEquals ( "sys" , connection . getSchema ( ) )
assertEquals ( 1 , rs . getInt ( 1 ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( expected , actual )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( true , c . getString ( path ) )
assertEquals ( mdrOptBIGINT , c . getString ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 16 ) , getIntOrNull ( row , "COLUMN_SIZE" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "DECIMAL_DIGITS" ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( "DECIMAL_DIGITS" , getColumnTypeName ( columnNumber ) )
assertEquals ( Integer . valueOf ( 10 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , columnName ) )
assertEquals ( "NUM_PREC_RADIX" , getColumnName ( ) )
assertThat ( getColumnName ( ) , equalTo ( "<expected value>" ) )
assertEquals ( expectedValue , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( columnName , "<expectedColumnName>" )
assertEquals ( Integer . valueOf ( 1 ) , getIntOrNull ( row , "ORDINAL_POSITION" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertNull ( c . getString ( path ) )
assertEquals ( "SCOPE_CATALOG" , getColumnLabel ( 1 ) )
assertEquals ( PcapTypes . class , getColumnType ( ) . getClass ( ) )
assertEquals ( columnName , "<expected value>" )
assertEquals ( properties . getProperty ( DrillProperties . QUOTING_IDENTIFIERS , DEFAULT_QUOTING_IDENTIFIER ) , "<expected value>" )
assertEquals ( null , getObject ( null ) )
assertEquals ( "jdbc:drill:zk=local" , connection . getMetaData ( ) . getURL ( ) )
assertEquals ( "STRING" , getColumnTypeName ( 1 ) )
assertEquals ( 0 , rowCount )
assertEquals ( 0 , timeoutValue )
assertEquals ( rowCount , expectedRowCount )
assertEquals ( expectedValue , getInt ( value ) )
assertEquals ( 123L , getLong ( 123 ) )
assertEquals ( expectedValue , getFloat ( value ) )
assertNotNull ( getPrecision ( ) )
assertEquals ( 0 , rowCount )
assertEquals ( 0 , timeoutValue )
assertEquals ( "Invalid query timeout value: -10" , e . getMessage ( ) )
assertEquals ( 2147483647 , getInt ( uut ) )
assertEquals ( 9223372036854775807L , uut . getLong ( ) )
assertEquals ( 9223372036854775807L , getLong ( uut ) )
assertEquals ( 0 , connection . getConnectTries ( ) )
assertEquals ( 7 , connection . getConnectTries ( ) )
assertEquals ( "Expected no instance of org.apache.drill.jdbc.Driver" , false , driver instanceof org . apache . drill . jdbc . Driver )
assertEquals ( JoinRelType . RIGHT , join . getJoinType ( ) )
assertEquals ( "TABLE_CATALOG" , getColumnLabel ( 1 ) )
assertNull ( columnType )
assertEquals ( mdrOptBIGINT , c . getString ( path ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( "EXPECTED_VALUE" , c . getString ( "path" ) )
assertEquals ( 7 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( 10 , getIntOrNull ( row , "CHARACTER_MAXIMUM_LENGTH" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "CHARACTER_OCTET_LENGTH" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( "NUMERIC" , getColumnTypeName ( 1 ) )
assertEquals ( Integer . valueOf ( 0 ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 1048576 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 7 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( value ) , getIntOrNull ( row , columnName ) )
assertEquals ( Integer . valueOf ( 3 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( Integer . valueOf ( 5 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( "expectedValue" , focalMethodResult )
assertEquals ( mdrReqDATE , c . getString ( path ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "expectedValue" , focalMethodResult )
assertEquals ( "mdrReqINTERVAL_3D_Mi" , c . getString ( "path" ) )
assertEquals ( "expectedValue" , focalMethodCall )
assertEquals ( "mdrReqINTERVAL_S" , c . getString ( "path" ) )
assertEquals ( Integer . valueOf ( 4 ) , getIntOrNull ( row , "columnName" ) )
assertEquals ( 512 , drillBuf . capacity ( ) )
assertEquals ( expected , jsonString ( ) )
assertEquals ( "Id INTEGER NOT NULL" , schema )
assertEquals ( expected , unit . getTableKey ( ) )
assertEquals ( expected , tableKey . toLocation ( "/metastore" ) )
assertEquals ( expected , operation . getFilter ( ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
AssertPlaceHolder = "assertEquals(expected, actual);"
AssertPlaceHolder = "Assert.assertEquals(expected, actual);"
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( conditions )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( null , tableMetadata )
assertThat ( requestMetadata . getMetadataKeys ( ) ) . containsExactly ( "a" , "b" , "c" )
assertNotNull ( e . getMessage ( ) )
assertThat ( operation . getFilter ( ) ) . isEqualTo ( expected )
assertEquals ( expectedResult , actualResult )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertEquals ( "Expected RdbmsMetastoreException to be thrown" , RdbmsMetastoreException . class , e . getClass ( ) )
assertThat ( e . getMessage ( ) ) . isEqualTo ( generateMessage ( true ) )
