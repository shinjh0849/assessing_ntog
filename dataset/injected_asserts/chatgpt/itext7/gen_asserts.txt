assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( "9781935*182610" , barcode . getBarsCode39 ( "9781935*182610" ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 10.0 , barcode . getAspectRatio ( ) , 0.001 )
assertEquals ( 63 , barcode . getOptions ( ) )
assertEquals ( 100 , barcode . getOptions ( ) . get ( 0 ) . intValue ( ) )
assertEquals ( metaInfoAfter , e . getMetaInfo ( ) )
assertEquals ( "Expected product name" , expectedProductName , event . getProductName ( ) )
activeProcessor . assertNotNull ( )
assertEquals ( productProcessorFactory , ProductProcessorFactoryKeeper . getProductProcessorFactory ( ) )
assertEquals ( "com.hello.world" , getRecognisedNamespace ( notRegisteredNamespace ) )
assertEquals ( "1994" , result )
assertEquals ( "1992" , result )
assertEquals ( "2010" , result )
assertEquals ( "1998" , result )
assertEquals ( "'plain text'" , result )
assertEquals ( "'plain\\\\text'" , result )
assertEquals ( "'plain'' ''text'" , result )
assertEquals ( expectedResult , result )
assertEquals ( "Expected producer line to be modified" , "ExpectedProducerLine" , newProducerLine )
assertEquals ( "'plain text'" , result )
assertEquals ( "expectedValue" , result )
assertEquals ( sequenceId1 . getId ( ) , sequenceId2 . getId ( ) )
assertEquals ( null , encodeObject ( null ) )
assertEquals ( nowEpoch , nowDateTimeUtilEpoch )
assertEquals ( millisFromEpochTo2020_05_05 , parsedDate . getTimeInMillis ( ) - offset )
assertEquals ( getUtcMillisFromEpochWithNullParam , millisFromEpochToCurrentTime , 0.001 )
assertEquals ( offset , relativeTime , 0.001 )
assertEquals ( expectedMap , destination )
assertEquals ( expectedMap , map )
assertNotNull ( format ( date , pattern ) )
assertEquals ( "output" , processInfo . getStdOutput ( ) )
assertThat ( stringBuilder . toString ( ) , is ( "<expected value>" ) )
assertEquals ( cmp , dest )
assertEquals ( 0 , compareByContent ( dest , cmp , destinationFolder , "diff" ) )
assertEquals ( null , errorMessage )
assertEquals ( 1 , doc1 . getNumberOfPages ( ) )
assertEquals ( 1 , destDoc . getNumberOfPages ( ) )
assertEquals ( 1 , target . getNumberOfPages ( ) )
Assert . assertEquals ( "Expected error message is not null" , null , errorMessage )
assertEquals ( null , errorMessage )
Assert . assertEquals ( null , errorMessage )
assertEquals ( null , errorMessage )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "simpleFormWithOneField.xfdf" , sourceFolder + "cmp_simpleFormWithOneField.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfHierarchyFields.xfdf" , sourceFolder + "cmp_xfdfHierarchyFields.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfFreeText.xfdf" , sourceFolder + "cmp_xfdfFreeText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfHighlightedText.xfdf" , sourceFolder + "cmp_xfdfHighlightedText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfUnderlineText.xfdf" , sourceFolder + "cmp_xfdfUnderlineText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSquigglyText.xfdf" , sourceFolder + "cmp_xfdfSquigglyText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLine.xfdf" , sourceFolder + "cmp_xfdfLine.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCircle.xfdf" , sourceFolder + "cmp_xfdfCircle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSquareAndCircleInteriorColor.xfdf" , sourceFolder + "cmp_xfdfSquareAndCircleInteriorColor.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCaret.xfdf" , sourceFolder + "cmp_xfdfCaret.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfPolygon.xfdf" , sourceFolder + "cmp_xfdfPolygon.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfPolyline.xfdf" , sourceFolder + "cmp_xfdfPolyline.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfStamp.xfdf" , sourceFolder + "cmp_xfdfStamp.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfInk.xfdf" , sourceFolder + "cmp_xfdfInk.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfFileAttachment.xfdf" , sourceFolder + "cmp_xfdfFileAttachment.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSound.xfdf" , sourceFolder + "cmp_xfdfSound.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLink.xfdf" , sourceFolder + "cmp_xfdfLink.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkBorderStyle.xfdf" , sourceFolder + "cmp_xfdfLinkBorderStyle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDest.xfdf" , sourceFolder + "cmp_xfdfLinkDest.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFit.xfdf" , sourceFolder + "cmp_xfdfLinkDestFit.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitR.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitR.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitH.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitH.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitBH.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitBH.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitBV.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitBV.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfLinkDestFitV.xfdf" , sourceFolder + "cmp_xfdfLinkDestFitV.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfRedact.xfdf" , sourceFolder + "cmp_xfdfRedact.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfProjection.xfdf" , sourceFolder + "cmp_xfdfProjection.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReplaceText.xfdf" , sourceFolder + "cmp_xfdfReplaceText.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfArrow.xfdf" , sourceFolder + "cmp_xfdfArrow.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCallout.xfdf" , sourceFolder + "cmp_xfdfCallout.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCloud.xfdf" , sourceFolder + "cmp_xfdfCloud.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCloudNested.xfdf" , sourceFolder + "cmp_xfdfCloudNested.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfTextBoxAllParams.xfdf" , sourceFolder + "cmp_xfdfTextBoxAllParams.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfJavaScriptForms.xfdf" , sourceFolder + "cmp_xfdfJavaScriptForms.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfAttrFlagsOpacity.xfdf" , sourceFolder + "cmp_xfdfAttrFlagsOpacity.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfAttrTitle.xfdf" , sourceFolder + "cmp_xfdfAttrTitle.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DMeasurement.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DMeasurement.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DAngular.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DAngular.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfReferenceFor3DRadial.xfdf" , sourceFolder + "cmp_xfdfReferenceFor3DRadial.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfSubelementContents.xfdf" , sourceFolder + "cmp_xfdfSubelementContents.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfButton.xfdf" , sourceFolder + "cmp_xfdfButton.xfdf" ) )
assertThat ( new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfCheckBox.xfdf" , sourceFolder + "cmp_xfdfCheckBox.xfdf" ) ) . isTrue ( )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfList.xfdf" , sourceFolder + "cmp_xfdfList.xfdf" ) )
assertEquals ( true , new CompareTool ( ) . compareXmls ( destinationFolder + "xfdfDropDown.xfdf" , sourceFolder + "cmp_xfdfDropDown.xfdf" ) )
assertEquals ( DUMMY_OPTIONS , builder . getOptions ( ) )
assertEquals ( PdfAConformanceLevel . PDF_A_1A , builder . getConformanceLevel ( ) )
Assert . assertEquals ( expectedValue , actualValue )
assertEquals ( canvas . getMetaInfo ( ) , PdfFormField . getMetaInfoToCanvas ( canvas ) )
assertEquals ( "Caption" , builder . getCaption ( ) )
assertEquals ( DUMMY_RECTANGLE , builder . getWidgetRectangle ( ) )
assertNotNull ( annot . getPage ( ) )
Assert . assertEquals ( null , errorMessage )
assertNotNull ( name )
Assert . assertNotNull ( getResourceStream ( "key" ) )
assertEquals ( DATA , testObject . getData ( ) )
assertEquals ( expectedOutput , output )
assertEquals ( - 1 , encoding . getDifference ( - 1 ) )
Assert . assertEquals ( "a" , encoding . getDifferences ( ) [ 0 ] )
assertEquals ( 255 , encoding . getDifference ( "a" ) )
assertEquals ( null , encoding . getDifference ( index ) )
assertEquals ( expectedValue , actualValue )
assertEquals ( expectedValue , actualValue )
assertEquals ( expected , actual )
Assert . assertEquals ( part . getActualText ( ) , "\u002d" )
Assert . assertEquals ( 2 , line . getGlyphs ( ) . length )
Assert . assertTrue ( stream . isClosed ( ) )
assertEquals ( imageDataFromUrl , imageDataFromBytes )
assertNotNull ( e . getMessage ( ) )
assertEquals ( expected , stream . toDouble ( ) , 0.000001 )
assertEquals ( 15 , read [ 1 ] )
assertEquals ( "Name1" , readString ( 6 ) )
assertNotNull ( list . get ( idx ) )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( new String ( expecteds ) , new String ( actuals ) , message )
assertEquals ( new String ( expecteds ) , new String ( actuals ) )
assertEquals ( currentDate , currentCalendar . getTime ( ) )
ghostscriptHelper . ghostscriptEnvVarIsDefault ( )
ghostscriptHelper . getCliExecutionCommand ( ) == null
Assert . assertEquals ( "Expected CLI execution command to be equal to gsExec" , gsExec , imageMagickHelper . getCliExecutionCommand ( ) )
assertEquals ( hashtable , clonedTable )
Assert . assertEquals ( 9 , matcher . regionStart ( ) )
Assert . assertEquals ( 9 , matcher . regionEnd ( ) )
assertThrows ( IOException . class , ( ) -> getInputStreamOfFinalConnection ( invalidUrl ) )
assertEquals ( doc , XmlUtil . initNewXmlDocument ( ) )
Assert . assertNotNull ( factory ) ; // suggested assertion
assertEquals ( document . getDocumentIdWrapper ( ) , sequenceId )
assertEquals ( rgb , convertCmykToRgb ( cmyk ) )
assertEquals ( cmpRgb , resultRgb )
assertEquals ( cmpCmyk , resultCmyk . getComponents ( ) , delta )
assertEquals ( stream . getEncoding ( ) , FACTORY . createASN1Encoding ( ) . getBer ( ) )
assertEquals ( UnitValue . createPointValue ( 0 ) , font . getWidth ( ) )
assertEquals ( expected , glyphLine )
assertEquals ( new byte [ ] { ( byte ) 84 , ( byte ) 69 } , bytes )
assertEquals ( E_GLYPH_FONT_SPECIFIC , bytes )
assertEquals ( 0 , bytes . length )
assertEquals ( true , img . isMask ( ) )
assertEquals ( expected , rotateOne )
assertEquals ( expected , result )
assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
assertEquals ( expected , src )
assertEquals ( expected , dest )
assertEquals ( expected , src )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertArrayEquals ( shouldBe . vals , rslt . vals , 0.001 )
assertEquals ( "1.23 1.1" , first . toString ( ) )
AssertPlaceHolder : assertEquals ( true , result )
AssertPlaceHolder : assertEquals ( true , result )
AssertPlaceHolder : assertEquals ( true , result )
assertEquals ( shouldBe , rslt )
assertEquals ( "expectedValue" , convert ( 5 ) )
assertEquals ( "EXPECTED_VALUE" , toRomanUpperCase ( 5 ) )
assertEquals ( 90 , page . getRotation ( ) )
assertEquals ( len , stream . getWrittenBytes ( ) . length )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , destinationFolder , "differenceImagePrefix" ) )
assertEquals ( 0 , resource . size ( ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , compareByContent ( dest , cmp , "" , "" ) )
assertEquals ( 0 , compareByContent ( dest , cmp , destinationFolder ) )
assertEquals ( copiedDestination , catalog . copyDestination ( null , new HashMap < PdfPage , PdfPage > ( ) , pdfDocument ) )
assertEquals ( EXPECTED , result )
AssertPlaceHolder = "Assert.assertEquals(dict.getIndirectReference(), ???);"
assertEquals ( null , pdfDocument . getDocumentInfo ( ) )
assertEquals ( expectedNames , actualNames )
assertEquals ( new PdfName ( "c" ) , object )
assertEquals ( object , catalog . get ( new PdfName ( "a" ) ) . getRefersTo ( true ) )
assertNotNull ( outline . getTitle ( ) )
assertEquals ( "" , compareResult )
assertEquals ( "1.7" , pdfDoc . getPdfVersion ( ) . toString ( ) )
pdfDoc . getPdfAConformanceLevelNoMetadata ( )
assertEquals ( expected , textArray . get ( 0 ) )
assertNotNull ( textArray . get ( idx ) )
assertNotNull ( textArray . getAsNumber ( 0 ) )
Assert . assertEquals ( 1 , fos . size ( ) )
assertEquals ( pdfDest . getPage ( 1 ) . getPdfObject ( ) . getAsDictionary ( new PdfName ( "Key1" ) ) . getIndirectReference ( ) , key1Ref )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNotNull ( aa . getOnEnter ( ) )
assertNotNull ( aa . getOnFocus ( ) )
assertNotNull ( aa . getOnLostFocus ( ) )
assertNotNull ( aa . getOnMouseUp ( ) )
assertNotNull ( aa . getOnPageClosed ( ) )
assertNotNull ( aa . getOnPageOpened ( ) )
assertNotNull ( aa . getOnPageVisible ( ) )
assertEquals ( target , getPdfObject ( objNum ) )
Assert . assertEquals ( null , target . getPdfObject ( ) )
Assert . assertEquals ( dict , pdf3DAnnotation . getDefaultInitialView ( ) )
assertEquals ( expectedDict , pdf3DAnnotation . getActivationDictionary ( ) )
assertEquals ( PdfName . ANNOTATION , result . getSubtype ( ) )
assertEquals ( lineArray , pdfLineAnnotation . getLine ( ) . toFloatArray ( ) )
Assert . assertEquals ( dict , pdfLineAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfLineAnnotation . getBorderStyle ( ) )
assertNotNull ( annotation . getExternalData ( ) )
assertEquals ( vertices , pdfPolyGeomAnnotation . getVertices ( ) )
assertEquals ( expectedPath , pdfPolyGeomAnnotation . getPath ( ) )
Assert . assertEquals ( style , pdfPolyGeomAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfPolyGeomAnnotation . getBorderStyle ( ) )
assertEquals ( "test" , tag . getActualText ( ) )
Assert . assertEquals ( expectedBoundingBox , getBoundingBox ( ) )
assertThrows ( PdfException . class , ( ) -> canvas . endMarkedContent ( ) )
assertEquals ( expectedText , actualText )
assertEquals ( expectedText , actualText )
Assert . assertEquals ( 1 , listener . getCharacterPositions ( ) . size ( ) )
assertEquals ( 0 , listener . getAverageBboxCalculation ( ) )
assertEquals ( "Expected extracted text does not match actual extracted text" , "expectedText" , extractedText )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , null ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , null ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( 0 , compareByContent ( output , cmp , outputPath ) )
assertEquals ( expOpacity , textRenderInfo . get ( "fillOpacity" ) )
AssertPlaceHolder = "Assert.assertEquals(expectedText, getTextFromPage(pdfDocument.getPage(1)));"
pdfDocument . getPage ( 1 ) . getText ( ) . contains ( "expectedText" )
assertEquals ( "Expected text" , txt , "<AssertPlaceHolder>" )
assertEquals ( origText , result )
assertEquals ( "1.23 5.34 234.23" , dp . toString ( ) )
Assert . assertEquals ( childs , Collections . unmodifiableList ( node . getChilds ( ) ) )
assertEquals ( expected , actual )
assertNotNull ( node . getNext ( ) )
Assert . assertEquals ( firstChild , tree . getFirst ( ) )
tree . getFirst ( ) == null
assertEquals ( timeValueAsString , field . getValue ( ) . toString ( ) )
assertEquals ( timeValueAsString , item . getValue ( ) . toString ( ) )
assertNotNull ( schema . getField ( fieldName ) )
assertEquals ( sort . getKey ( ) , key )
assertNotNull ( sort . getSortOrder ( ) [ i ] )
assertEquals ( 0 , compareByContent ( outFilePath , cmpFilePath , null , null , null , null , null ) )
assertEquals ( 0 , compareByContent ( outFilePath , cmpFilePath , null , null , null , null , null ) )
Assert . assertEquals ( new FontCacheStringKey ( "fontName" ) , create ( "fontName" ) )
assertNotNull ( function )
Assert . assertEquals ( new FontCacheStringKey ( "fontName" ) , create ( "fontName" ) )
assertEquals ( expected [ i ] [ j ] , actual )
Assert . assertEquals ( "Expected exception message" , exception . getMessage ( ) )
Assert . assertEquals ( "expected message" , exception . getMessage ( ) )
Assert . assertEquals ( "Expected exception message" , "expectedMessage" , e . getMessage ( ) )
assertEquals ( new double [ ] { 8 } , output )
assertEquals ( new double [ ] { 2 } , output )
assertEquals ( 2 , type3FuncDict . getAsArray ( PdfName . Functions ) . getAsDictionary ( 0 ) . getAsArray ( PdfName . Domain ) . getAsDouble ( 0 ) )
assertEquals ( 0 , compareByContent ( destinationFolder + "output_copy_layered.pdf" , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , compareByContent ( destFilename , cmpFilename , DESTINATION_FOLDER ) )
assertEquals ( expectedMessage , compareDocumentInfo ( licensed , agpl ) )
assertEquals ( "Assertion failed: XML files are not equal" , true , compareTool . compareXmls ( outXmlPath , cmpXmlPath ) )
assertNotNull ( document )
Assert . assertEquals ( name , dictPathItem . getKey ( ) )
assertEquals ( "arrayIndex" , element . getNodeName ( ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( position1 , position2 )
assertEquals ( BackgroundPosition . PositionY . BOTTOM , position1 . getPositionY ( ) )
assertEquals ( 200 , div . getHeight ( ) )
assertEquals ( cmp , out )
AssertUtil . assertFileExists ( outFileName )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( HorizontalAlignment . CENTER , image . getHorizontalAlignment ( ) )
assertEquals ( HorizontalAlignment . RIGHT , image . getHorizontalAlignment ( ) )
assertEquals ( HorizontalAlignment . LEFT , image . getHorizontalAlignment ( ) )
assertThat ( keptTogetherDiv . < Style > getProperty ( Property . KEEP_TOGETHER ) ) . isEqualTo ( true )
assertEquals ( true , document . getPdfDocument ( ) . getPage ( 1 ) . getPdfObject ( ) . getAsDictionary ( PdfName . Annots ) . getAsArray ( PdfName . Annots ) . get ( 0 ) . getAsDictionary ( PdfName . P ) . getAsBoolean ( PdfName . KE ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 1 , pdf . getNumberOfPages ( ) )
assertEquals ( 1 , 1 )
assertEquals ( cmpFileName , outFileName )
assertEquals ( 1 , pdfDocument . getNumberOfPages ( ) )
assertEquals ( 30 , list . size ( ) )
assertEquals ( "AA" , text )
assertEquals ( "A\nB\nC\nD" , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( "Expected text" , "Actual text" , text )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder , "" ) )
assertThat ( text , containsString ( text1 ) )
Assert . assertEquals ( true , p1 . getStyle ( ) . isKeepTogether ( ) )
assertEquals ( cmpFileName , outFileName )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 1 , p . getUnderline ( ) . getThickness ( ) )
assertEquals ( DESTINATION_FOLDER + "simpleTest.pdf" , outFileName )
assertThrows ( IllegalArgumentException . class , ( ) -> new Range . SubRange ( low , high ) )
assertEquals ( null , pdfXObject . getPdfObject ( ) )
assertEquals ( areaBreakRenderer . getOccupiedArea ( ) , occupiedArea )
assertThat ( areaBreakRenderer . getDefaultProperty ( Property . MARGIN_BOTTOM ) ) . isEqualTo ( 36f )
assertNotNull ( areaBreakRenderer )
assertEquals ( FormFieldValueNonTrimmingTextRenderer . class , areaBreakRenderer . getNextRenderer ( ) . getClass ( ) )
assertEquals ( 200f , widthAndHeight [ 0 ] , 0.001 )
assertEquals ( BackgroundSizeType . CONTAIN , backgroundImage . getBackgroundSize ( ) . getBackgroundSizeType ( ) )
assertEquals ( 200f , widthAndHeight [ 0 ] , 0.001 )
assertEquals ( cover , true )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , "" , "" ) )
assertEquals ( 50 , div . getWidth ( ) )
AssertPlaceHolder = "Assert.assertTrue(info.getMinContentHeight() > 0);"
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath ) )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( - 10 , textRenderer . getProperty ( Property . LINE_HEIGHT ) . getValue ( ) )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( 0 , lineHeight , 0.001 )
assertEquals ( 200 , lineHeight , 0.001 )
assertEquals ( metaInfo , metaInfoContainer . getMetaInfo ( ) )
assertNotNull ( getPageByID ( divRenderer , id ) )
Assert . assertEquals ( 1 , documentRenderer . getTargetCounterHandler ( ) . previousRenderersPages . size ( ) )
assertEquals ( 1 , getPageByID ( documentRenderer , id ) )
assertEquals ( 1 , getPageByID ( documentRenderer , id ) )
assertNull ( page )
assertEquals ( 1 , range [ 1 ] )
assertEquals ( 2 , range [ 1 ] )
assertEquals ( 0 , range [ 1 ] )
assertEquals ( 0 , compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNotEquals ( result1 . getOccupiedArea ( ) , result2 . getOccupiedArea ( ) )
assertEquals ( "Puritan2.otf" , pdfFont . getFontProgram ( ) . getFontNames ( ) . getFontName ( ) )
assertEquals ( 0 , doc . getNumberOfPages ( ) )
assertEquals ( expectedURL , url )
AssertPlaceHolder = "assertNotNull(crl);"
assertEquals ( "" , getDigest ( oid ) )
assertEquals ( SignExceptionMessageConstant . THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL , e . getMessage ( ) )
assertEquals ( SignExceptionMessageConstant . THE_NAME_OF_THE_DIGEST_ALGORITHM_IS_NULL , e . getMessage ( ) )
assertEquals ( initDict . get ( new PdfName ( "add_key" ) ) , new PdfName ( "add_value" ) )
assertNotNull ( parent )
assertEquals ( true , verifier . isVerifyRootCertificate ( ) )
assertNull ( xObject )
assertEquals ( PdfAConformanceLevel . PDFA_1A , signer . getConformanceLevel ( ) )
assertEquals ( raf . createSourceView ( ) . length ( ) , length )
Assert . assertEquals ( infoBouncyCastle , clientBouncyCastle . getTSAInfo ( ) )
assertEquals ( "Mock verification" , verificationOK . getName ( ) )
signatureApp . getPdfObject ( objNum )
assertEquals ( "" , verificationResult )
assertEquals ( caCert . getNotBefore ( ) , getNotBefore ( ) )
assertEquals ( true , verifyRes )
assertEquals ( expectedCss , fontFaceRule . toString ( ) )
Assert . assertEquals ( null , fontFace . getSrc ( ) )
assertEquals ( 1 , ruleSets . size ( ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( "expectedValue" , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertEquals ( getCssFileContents ( cmpFile ) , getCssFileContents ( cssFile ) )
assertNotNull ( pseudoElementNode )
assertEquals ( expected , beforePseudoElemName )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
assertEquals ( expectedResolvedProperties , new HashSet < > ( resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toList ( ) ) ) )
assertEquals ( expectedResolvedProperties , resolvedShorthandProps . stream ( ) . map ( CssDeclaration :: toString ) . collect ( Collectors . toSet ( ) ) )
Assert . assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
Assert . assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
Assert . assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertThat ( item . matches ( divNode ) ) . isTrue ( )
Assert . assertEquals ( 1 , divNode . siblingIndex ( ) )
Assert . assertEquals ( 1 , divNode . childNodes ( ) . size ( ) )
assertThat ( divNode . matches ( ":matchesOwn(Alexander)" ) ) . isTrue ( )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( "" , trimControlCodes ( str ) )
assertEquals ( "\uFEFF<html><head><title>One</title></head><body>Two</body></html>" , doc . outerHtml ( ) )
assertEquals ( 1 , ls . size ( ) )
Assert . assertNotNull ( doc )
assertEquals ( "One" , a . get ( "One" ) )
assertEquals ( expected , actual )
el . attr ( "id" ) . equals ( "Foo" )
assertEquals ( "Foo" , el . id ( ) )
assertNotNull ( form . hasAssociatedControls ( ) )
assertEquals ( "test" , form . selectFirst ( "input[name=test]" ) . val ( ) )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( "http://example.com/one/two.html" , a1 . absUrl ( "href" ) )
assertEquals ( "<p>One <em>foo</em> three</p>" , doc . html ( ) )
assertEquals ( "<div><p>Hello</p></div>" , accum . toString ( ) )
assertEquals ( "bar" , inputElement . attr ( "value" ) )
assertEquals ( "Check" , els . first ( ) . text ( ) )
assertEquals ( 0 , parser . getErrors ( ) . size ( ) )
Assert . assertEquals ( "hidden" , normalizedAttribute )
assertEquals ( "1" , normalizedAttributes . get ( "ITEM" ) )
assertEquals ( "One & Two" , s )
assertEquals ( "SomeNonEncodedInput" , body )
assertEquals ( p1 , p2 )
assertEquals ( string , unescape ( string ) )
assertEquals ( "Three" , tq . remainder ( ) )
Assert . assertEquals ( "Expected value" , "<html<" , triggeringSnippet )
assertEquals ( "html" , doc . outputSettings ( ) . syntax ( ) . toString ( ) )
assertEquals ( "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>" , cleanHtml )
assertEquals ( "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>" , cleanHtml )
assertEquals ( "<div><p>Nice</p><blockquote>Hello</blockquote>" , cleanHtml )
assertEquals ( "<a href='http://example.com/foo'>Link</a><img src='http://example.com/bar'>" , clean )
assertEquals ( "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>" , clean )
assertEquals ( "<p class='foo'><a class='qux'>link</a></p>" , clean )
Assert . assertEquals ( "<p class='foo'>One</p>" , clean )
assertEquals ( "<a href='/foo'>Link</a><img src='/bar'>" , clean )
assertThat ( cleanHtml , equalTo ( "<a href=\"SOMETHING://x\"></a>" ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , cleanHtml )
Assert . assertEquals ( 2 , textNodes . size ( ) )
assertNull ( ob )
assertEquals ( "span div" , parse . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "<div><p>Hello</p></div><div>There</div>" , accum . toString ( ) )
assertEquals ( 0 , stream . read ( ) )
assertArrayEquals ( new byte [ 100 ] , bytes )
assertEquals ( 0 , stream . read ( ) )
assertEquals ( 0 , stream . read ( bytes , 0 , 100 ) )
Assert . assertEquals ( image , resourceResolver . retrieveImage ( bLogo ) )
assertNotNull ( image )
assertNotNull ( cache . getImage ( "src" + i + 10 + ".jpg" ) )
assertEquals ( expectedUrl , resolvedUrl . toString ( ) )
assertEquals ( absolutePathRoot + "%homepath%" , resolver . getBaseUri ( ) )
assertEquals ( expectedStyles , styles )
assertEquals ( expectedStyles , styles )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , compareByContent ( destinationFolder + "unusedXObjectIntegrationTest1.pdf" , destinationFolder + "unusedXObjectIntegrationTest2.pdf" , destinationFolder , "differenceImagePrefix" ) )
assertEquals ( 0 , compareByContent ( outPdf , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 0 , compareByContent ( output , cmp_file , "" , "" ) )
assertEquals ( 0 , compareByContent ( destinationFolder + name + ".pdf" , cmpPdf , outPath , differenceImagePrefix ) )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( 0 , y )
assertEquals ( destName , "eclipse_-50_-100" )
assertEquals ( 1 , 1 )
assertEquals ( "DOP_eclipse_StringPdfPage.pdf" , destName + ".pdf" )
assertEquals ( 1 , 1 )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( 1 , doc . getNumberOfPages ( ) )
assertEquals ( "DOC_eclipse_StringCanvas.pdf" , destName + ".pdf" )
assertEquals ( 1 , 1 )
assertEquals ( 1 , 1 )
assertEquals ( null , drawOnDocument ( content , document , pageNo ) )
Assert . assertEquals ( null , page . drawOnPage ( content , page , 0 , 0 ) )
Assert . assertEquals ( null , page )
assertEquals ( 1 , canvas . getContentStream ( ) . size ( ) )
assertNull ( convertToXObject ( content , document ) )
assertEquals ( null , convertToXObject ( content , document ) )
assertNull ( ob )
assertEquals ( 0 , getResources ( ) . size ( ) )
assertEquals ( 0 , getResources ( ) . getResources ( ) . size ( ) )
assertEquals ( "#testid" , attr . get ( "xlink:href" ) )
assertNotNull ( resolvedStyles )
assertEquals ( renderer , popped )
assertEquals ( "test01" , testProcessorState . top ( ) . toString ( ) )
assertEquals ( "test01" , testProcessorState . top ( ) . toString ( ) )
assertEquals ( expected , actual )
assertNull ( actual )
Assert . assertEquals ( "Courier" , info . getFontName ( ) )
assertEquals ( parentRenderer , childRenderer . getParent ( ) )
assertionErrorsThrown . isEmpty ( )
assertEquals ( clipRenderer . draw ( sdc ) , "<expected value>" )
renderer . getObjectBoundingBox ( context )
Assert . assertEquals ( expectedValue , actualValue )
assertThat ( renderer . getObjectBoundingBox ( context ) ) . isEqualTo ( new Rectangle ( ) )
assertEquals ( expectedBoundingBox , renderer . getObjectBoundingBox ( context ) )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual , 0.001f )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Point ( 210 , 310 ) , end )
assertEquals ( new Point ( 210 , 310 ) , end )
assertNotNull ( end )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
assertNotNull ( renderer . getObjectBoundingBox ( context ) )
Assert . assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( new Rectangle ( 0 , 0 , 0 , 0 ) , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expected , actual , 0.0f )
assertEquals ( expected , actual , 0.001 )
assertEquals ( expectedBoundingBox , renderer . getObjectBoundingBox ( context ) )
assertEquals ( expectedBoundingBox , actualBoundingBox )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNotNull ( get ( idx ) )
assertNull ( get ( - 1 ) )
assertNull ( get ( - 1 ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual , 0.001 )
assertEquals ( "" , filterReferenceValue ( "#url()" ) )
assertEquals ( new AffineTransform ( ) , parseTransform ( "" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
