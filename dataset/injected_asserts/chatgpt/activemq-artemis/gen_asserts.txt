assertEquals ( "expectedValue" , connectionAbstract . getBrokerURL ( ) )
assertEquals ( "q1,t2" , queues )
assertEquals ( "admin" , new PerfClientCommand ( ) . getUser ( ) )
assertEquals ( 1 , Integer . parseInt ( parts [ 0 ] ) )
assertEquals ( "cannot detect invalid options" , e . getMessage ( ) )
assertEquals ( 1 , count . get ( ) )
assertEquals ( "CLIException" , e . getClass ( ) . getSimpleName ( ) + " failed. Reason: " + reason )
assertEquals ( assertContent , convertedContent )
Assert . assertSame ( buffer . writerIndex ( ) , wrapped . length - 1 )
assertEquals ( 33 , buffer . capacity ( ) )
assertThat ( e , is ( equalTo ( element ) ) )
assertNotNull ( codec )
assertEquals ( 0 , check . getNodes ( ) . size ( ) )
assertNotNull ( codec )
assertEquals ( randomStart , simpleFuture . get ( ) )
assert failed
assertNotNull ( e )
assertThrows ( IllegalStateException . class , ( ) -> properties . clearInternalProperties ( ) )
assertNull ( props . getProperty ( "someProperty" ) )
assertEquals ( null , focalMethod ( index ) )
assertEquals ( null , valueOf ( ( byte ) 0 ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( testSet . size ( ) , other . size ( ) )
assertEquals ( testSet , other )
assertEquals ( mapAsAString , testSet . toString ( ) )
assertEquals ( "world" , map . get ( "hello" ) )
assertEquals ( "" , result )
assertEquals ( expected , truncated )
assertEquals ( "testTruncateStringWithoutValueSizeLimit" , notTruncated )
AssertPlaceHolder = "assertEquals(\"secret_password\", configuration.getParams().get(TransportConstants.TRUSTSTORE_PASSWORD_PROP_NAME));"
assertEquals ( "expectedValue" , getRetroactiveResourceAddressName ( "prefix" , "delimiter" , address ) )
assertEquals ( 1 , handleResponseCount . get ( ) )
decodedMessage . assertEquals ( readBodyText ( buff ) )
assertThrows ( Exception . class , ( ) -> empty2 . getBodyBuffer ( ) . readLong ( ) )
assertEquals ( "foo" , getTextContent ( e ) )
assertEquals ( "Expected equivalent XML elements" , XMLUtil . stringToElement ( s ) , XMLUtil . stringToElement ( s2 ) )
assert BASE_LOGGER . isStarted ( getCaller ( ) , source )
assertEquals ( "Shouldn't be using reflection" , ex . getMessage ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=QUEUE_XA_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=QUEUE_CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true&type=CF" , factory . getBrokerURL ( ) )
assertEquals ( "tcp://localhost:3030?ha=true" , factory . getBrokerURL ( ) )
assertEquals ( "udp://localhost:3030?ha=true&type=QUEUE_XA_CF" , factory . getBrokerURL ( ) )
assertThat ( buffer ) . isInstanceOf ( ByteBuffer . class )
assertNotEquals ( buffer , differentBuffer )
Assert . assertSame ( "The two objects should be the same" , small , big )
assertThat ( readOnlyBuffer . isReadOnly ( ) ) . isTrue ( )
Assert . assertEquals ( size , buffer . capacity ( ) )
assertEquals ( nMsgs , messages . size ( ) )
Assert . assertEquals ( "hello" , consumer . receive ( ) . getBody ( String . class ) )
assertEquals ( "Test" , SimpleBundle . MESSAGES . simpleTest ( ) )
Assert . assertEquals ( null , protonProtocolManager . getServerSASLAnonDefault ( ) )
assertNotNull ( decoded . getConnectionID ( ) )
assertNull ( decoded . getLastValueProperty ( ) )
assertNull ( decoded . getDuplicateProperty ( ) )
assertNotNull ( decoded . getAddress ( ) )
assertEquals ( ADDRESS , decoded . getAddressSimpleString ( ) . toString ( ) )
Assert . assertEquals ( true , decoded . isDurable ( ) )
Assert . assertEquals ( false , decoded . isDurable ( ) )
assertNotNull ( decoded . isDurable ( ) )
decoded . getRoutingType ( ) == null
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertEquals ( "QUEUE" , decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNotNull ( decoded . getRoutingType ( ) )
assertNull ( decoded . getGroupID ( ) )
assertNull ( decoded . getReplyTo ( ) )
assertNotNull ( decoded . getReplyTo ( ) )
assertNotNull ( decoded . getAMQPUserID ( ) )
assertNull ( decoded . getAMQPUserID ( ) )
assertNull ( decoded . getAMQPUserID ( ) )
assertEquals ( expirationTime , decoded . getExpirationTime ( ) )
assertNull ( decoded . getScheduledDeliveryTime ( ) )
assertEquals ( expectedResult , result )
assertNotNull ( decoded . getAnnotation ( TEST_ANNOTATION ) )
assertEquals ( 10 , buffer . writerIndex ( ) )
assertEquals ( text , textMessage . getText ( ) )
assertEquals ( "expectedValue" , toMessageIdString ( null ) )
assertEquals ( "expectedValue" , toCorrelationIdString ( null ) )
assertNotNull ( getSymbol ( key ) )
Assert . assertEquals ( Boolean . TRUE , getMessageAnnotation ( "x-opt-test" , message ) )
Assert . assertEquals ( null , getMessageAnnotation ( "key" , message ) )
assertEquals ( null , getMessageAnnotation ( "key" , message ) )
assertEquals ( null , getMessageAnnotation ( "key" , null ) )
assertEquals ( deliveryTime , coreMessage . getScheduledDeliveryTime ( ) )
assertNull ( amqp . getBody ( ) )
Assert . assertEquals ( null , amqp . getBody ( String . class ) )
assertSame ( byteBuffer , buffer . getByteBuf ( ) )
assertEquals ( 1024 , buffer . capacity ( ) )
assertEquals ( "TEST" , messageDispatch . getMessage ( ) . getStringProperty ( bytesPropertyKey ) )
Assert . assertSame ( manager . getLock ( ) , manager . getLock ( ) )
Assert . assertEquals ( closedLock , manager . getDistributedLock ( "a" ) )
assertThat ( held , is ( true ) )
Assert . assertEquals ( 0 , lock . getParticipantCount ( ) )
Assert . assertEquals ( 0 , unavailable . getCount ( ) )
assertEquals ( "XPATH '//title[@lang=''eng'']'" , filter . toString ( ) )
assertEquals ( "25K" , configuration . getGlobalMaxSize ( ) )
assertEquals ( "vv-${SOME_RANDOM_VV}" , configuration . getName ( ) )
assertEquals ( "Expected exception not thrown" , "<expected exception class>" , cause . getClass ( ) . getName ( ) )
assertEquals ( queueName , embeddedActiveMQDelegate . locateQueue ( queueName ) )
assertNotNull ( config . getAddressSettings ( address ) )
assertEquals ( 0 , config . getIDCacheSize ( ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( "TEST" , bodyText )
assertEquals ( "Should have failed authenticating" , le . getMessage ( ) )
assertEquals ( "Should have failed authenticating" , le . getMessage ( ) )
assertEquals ( "FOO" , principal . getName ( ) )
assertEquals ( "FOO" , principal . getName ( ) )
assertEquals ( "queue_name" , queueConfig . getName ( ) . toString ( ) )
assertEquals ( 1 , test . getConnectors ( ) . size ( ) )
assertEquals ( false , lockExists )
assertEquals ( CACHE_ENTRY_VALUE , cache . get ( CACHE_ENTRY_KEY ) )
assertNotNull ( selectedTarget )
assertEquals ( instance , PolicyFactoryResolver . getInstance ( ) )
Assert . assertEquals ( null , selectedTarget )
assertEquals ( "Should have thrown a FailedLoginException" , fle . getMessage ( ) )
assertEquals ( "Should have thrown a FailedLoginException" , "Should have thrown a FailedLoginException" , fle . getMessage ( ) )
assertEquals ( "abcdef&^*&!^ghijkl\uB5E2\uCAC7\uB2BB\uB7DD\uB7C7\uB3A3\uBCE4\uB5A5" , myString )
Assert . assertSame ( expectedPooled , pool . getOrCreate ( s ) )
assertNotNull ( configs )
Assert . assertEquals ( "OFF_WITH_REDISTRIBUTION" , configuration . getMessageLoadBalancingType ( ) )
assertEquals ( null , consumer . receive ( 1000 ) )
assertEquals ( expectedReceiveCount ( ) , receivedMessageCount . get ( ) )
assertEquals ( timeout , duration )
Assert . assertEquals ( 1 , consumer . receiveNoWait ( ) )
assertEquals ( 0 , consumer . receiveNoWait ( ) )
Assert . assertEquals ( expectedValue , actualValue )
assertEquals ( "hello" , consumer . receive ( ) . getBody ( String . class ) )
Assert . assertEquals ( false , queueQuery ( queueName ) . isExists ( ) )
assertNull ( queueQuery ( queueName ) )
Assert . assertEquals ( "AMQ229017: Queue " + queueName + " does not exist" , exception . getMessage ( ) )
assertNull ( queueQuery ( queueName ) )
assertNotNull ( repos . getMatch ( "test.foo.bar" ) )
Assert . assertEquals ( 1 , getManagementService ( ) . getTotalMessagesSent ( ) )
assertEquals ( 1 , consumer . getMessageCount ( ) )
Assert . assertEquals ( true , setThreadPools )
assertEquals ( 1 , message . getBodyBuffer ( ) . readableBytes ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readInt ( ) )
Assert . assertEquals ( 0 , cf1 . getNumConnections ( ) )
assertEquals ( 0 , errors . get ( ) )
assertEquals ( 1 , consumer . receiveImmediate ( ) )
assertEquals ( 1 , consumer . receive ( ) . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( null , message2 )
assertEquals ( 10 , ( end - start ) )
Assert . assertEquals ( timeout , transport . getParams ( ) . get ( TransportConstants . NETTY_CONNECT_TIMEOUT ) )
Assert . assertEquals ( 1 , cc . receive ( 1000 ) )
Assert . assertFalse ( q . isDurable ( ) )
Assert . assertEquals ( true , q . isDurable ( ) )
AssertPlaceHolder = "assertTrue(q.isTemporary());"
assertEquals ( filterString , q . getFilterString ( ) )
assertNotNull ( binding )
Assert . assertEquals ( queueName , consumer . getQueueName ( ) )
assertEquals ( "Invalid Exception type: ActiveMQInvalidFilterExpressionException" , e . getType ( ) )
Assert . assertEquals ( browseOnly , consumer . isBrowseOnly ( ) )
assertEquals ( "Expected exception of type ActiveMQObjectClosedException" , ActiveMQObjectClosedException . class , e . getClass ( ) )
Assert . assertEquals ( true , failed )
assertEquals ( MSG_COUNT , count . get ( ) )
assertEquals ( MSG_COUNT , count . get ( ) )
assertEquals ( MSG_COUNT , count . get ( ) )
assertThat ( listener . getLatch ( ) . getCount ( ) , equalTo ( 0 ) )
Assert . assertEquals ( true , clientMessage . isDurable ( ) )
Assert . assertEquals ( true , clientMessage . isDurable ( ) )
assertEquals ( "expectedVersion" , BASE_LOGGER . getVersion ( getCaller ( ) , source ) )
assertEquals ( "expectedNodeId" , nodeId )
assertEquals ( SecurityManagerType . JAAS , getType ( "jaas" ) )
assertEquals ( "m" + i , receive ( ) . getBody ( String . class ) )
assertEquals ( 1 , message . getBodySize ( ) )
assertEquals ( 1 , message . getBodyBuffer ( ) . readableBytes ( ) )
assertThrows ( ActiveMQClusterSecurityException . class , ( ) -> clusterControl . authorize ( ) )
Assert . assertEquals ( 0 , queue . getMessageCount ( ) )
assertNotNull ( sessionFactory )
assertEquals ( 3 , serverLocator . getInitialConnectAttempts ( ) )
assertEquals ( nMsgs , messages . size ( ) )
Assert . assertEquals ( true , server . isStarted ( ) )
Assert . assertTrue ( server . isStarted ( ) )
assertEquals ( 0 , interceptor . getReceivedMessages ( ) . size ( ) )
assertEquals ( 1 , interceptor . getMessages ( ) . size ( ) )
assertEquals ( JMSFactoryType . XA_CF , getFactoryType ( "vm://0?type=XA_CF" ) )
assertEquals ( JMSFactoryType . TOPIC_CF , getFactoryType ( "vm://0?type=TOPIC_CF" ) )
Assert . assertEquals ( true , cf . isHA ( ) )
assertNotNull ( destination )
assertNotNull ( destination )
Assert . assertEquals ( false , getUseTopologyForLoadBalancing ( ) )
Assert . assertEquals ( id , conn2 . getClientID ( ) )
assertEquals ( 1 , consumer1 . receiveNoWait ( ) )
Assert . assertEquals ( 1 , producer . getDeliveryMode ( ) )
assertEquals ( false , failed . get ( ) )
assertEquals ( noOfMessages , 1 )
assertEquals ( 0 , noOfMessages )
Assert . assertEquals ( null , consumer . receiveNoWait ( ) )
assertEquals ( "test" , txt . getText ( ) )
assertEquals ( "test" , txt . getText ( ) )
assertEquals ( "message text" , receivedMessage . getText ( ) )
assertEquals ( "message text" , receivedMessage . getText ( ) )
assertEquals ( "Exception expected" , e . getClass ( ) , MessageFormatException . class )
assertEquals ( randomStr , receiveMsg . getText ( ) )
Assert . assertEquals ( "Expected InvalidDestinationRuntimeException to be thrown" , InvalidDestinationRuntimeException . class , assertThrows ( InvalidDestinationRuntimeException . class , ( ) -> producer . send ( ( Destination ) null , msg ) ) )
assertEquals ( id , c2 . getClientID ( ) )
assertEquals ( id , context . getClientID ( ) )
Assert . assertEquals ( 0 , prod . getDeliveryMode ( ) )
assertEquals ( true , server . isActive ( ) )
assert buff . limit ( ) == 10
assertEquals ( nMsgs , messages . size ( ) )
assertEquals ( 1 , getCurrentFile ( ) . getStartIndex ( ) )
Assert . assertEquals ( null , serverControl . getDivertNames ( getCaller ( ) ) )
assertEquals ( address , addressControl . getAddress ( ) )
assertThat ( addressControl . isRetroactiveResource ( source ) ) . isTrue ( )
assertEquals ( 0 , count )
assertMessageMetrics ( queueControl , 1 , durable )
Assert . assertEquals ( "<expected value>" , history )
Assert . assertEquals ( queueName , embeddedActiveMQDelegate . locateQueue ( queueName ) . getQueueName ( ) )
assertEquals ( 1 , q . getQueueName ( ) . length ( ) )
assertEquals ( "testXX" + i , txt . getText ( ) )
Assert . assertEquals ( Transaction . Status . STATUS_SUSPENDED , transaction . getStatus ( ) )
assertNull ( transaction )
Assert . assertEquals ( 1 , consumer . receiveNoWait ( ) )
assertEquals ( "JMSMessageID should contain host name" , IdGenerator . getHostName ( ) , m . getJMSMessageID ( ) )
assertEquals ( outbound [ i ] , message )
Assert . assertEquals ( 1 , getPostOffice ( ) . getInbox ( ) . size ( ) )
Assert . assertEquals ( 1 , pubishDoneToQeueuB . getCount ( ) )
assertNotNull ( message )
assertEquals ( "PAGE_STORE_" , storageConfiguration . getPageStoreTableName ( ) )
assertEquals ( origFileSize + ( align / 2 - 1 ) , fileSize )
assertEquals ( origFileSize + ( align / 2 ) , fileSize )
assertEquals ( "Invalid error code" , "InvalidCredentialsException" , e . getErrorCode ( ) )
Assert . assertEquals ( "Expected resource recovery to be null" , null , getResourceRecovery ( ) )
assertEquals ( msg , cons . receive ( 10000 ) )
assert sf . isClosed ( )
assertEquals ( manager . getState ( ) , ReplicationManager . State . STARTED )
Assert . assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertNotNull ( e )
assertEquals ( "Expected exception not thrown" , "<expected exception class>" , e . getClass ( ) . getSimpleName ( ) )
Assert . assertEquals ( 1 , producer . getSentCount ( ) )
assertEquals ( "Expected JMSException to be thrown" , JMSException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , ActiveMQException . class , e . getClass ( ) )
Assert . assertEquals ( "Expected exception not thrown" , ActiveMQSecurityException . class , se . getClass ( ) )
Assert . assertEquals ( "Invalid Exception type:" , e . getType ( ) )
Assert . assertEquals ( 1 , latch . getCount ( ) )
assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getDeadLetterQueuePrefix ( ) )
assertEquals ( prefix + "#" + suffix , embeddedActiveMQDelegate . locateQueue ( "#" ) . getName ( ) )
assertNotNull ( createConsumer ( queueName ) )
assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getExpiryQueuePrefix ( ) )
Assert . assertEquals ( prefix , server . getAddressSettingsRepository ( ) . getMatch ( "#" ) . getExpiryQueuePrefix ( ) )
Assert . assertEquals ( 1 , context . createConsumer ( queueName ) . getMessageAvailableCount ( ) )
assertNotNull ( e )
Assert . assertEquals ( 0 , latch . getCount ( ) )
Assert . assertEquals ( queue , embeddedActiveMQDelegate . locateQueue ( queueName ) )
Assert . assertEquals ( "Invalid Exception type:" , e . getType ( ) )
Assert . assertEquals ( "Invalid Exception type:" , e . getType ( ) )
assertEquals ( "Hello World" , ( ( TextMessage ) msg ) . getText ( ) )
assertEquals ( count , latch . getCount ( ) )
assertEquals ( "AMQ119119" , e . getMessage ( ) )
assertEquals ( "BEGIN" , frame . getCommand ( ) )
assertEquals ( "myclientid" , conn . getClientId ( ) )
assertNull ( server . locateQueue ( QUEUE ) )
Assert . assertEquals ( conn , AmqpClient . connect ( uri , null , null ) )
frame . getCommand ( )
assertEquals ( null , message )
assertEquals ( "Expected error frame" , Stomp . Commands . ERROR , error . getCommand ( ) )
assertEquals ( "Expected message ID to be 'someother'" , "someother" , error . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( messageID , frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( null , error )
assertEquals ( "Expected message id to be 'someother'" , "someother" , frame . getHeader ( Stomp . Headers . Message . MESSAGE_ID ) )
assertEquals ( "ERROR" , f . getCommand ( ) )
assertEquals ( "SUBSCRIBE" , frame . getCommand ( ) )
assertNotNull ( frame )
assertEquals ( count , latch . getCount ( ) )
assertEquals ( "mysubid" , frame . getHeader ( ) . getSubscriptionId ( ) )
assertEquals ( "Expected topic to be subscribed with specified QoS" , QoS . values ( ) [ qos ] , topics [ 0 ] . getQoS ( ) )
assertEquals ( null , message )
assertEquals ( NUMBER_OF_THREADS , threads . length )
assertEquals ( 0 , embeddedActiveMQDelegate . locateQueue ( queueName ) . getConsumerCount ( ) )
Assert . assertEquals ( null , message )
assertEquals ( 1 , cons . receiveImmediate ( ) . getBodyBuffer ( ) . readInt ( ) )
assertEquals ( 0 , browser . getMessageCount ( ) )
Assert . assertEquals ( "somethingelse" , c . getClientID ( ) )
assertEquals ( null , getClientID ( ) )
assertEquals ( null , clientID )
assertEquals ( "message one" , rm . getText ( ) )
assertEquals ( "message one" , rm . getText ( ) )
assertRemainingMessages ( 1 )
Assert . assertEquals ( selector , consumer . getMessageSelector ( ) )
assertEquals ( t , getTopic ( ) )
Assert . assertEquals ( null , ( ( TopicSubscriber ) topicConsumer ) . getTopic ( ) )
Assert . assertEquals ( queue1 , q )
Assert . assertEquals ( null , ( ( QueueReceiver ) queueConsumer ) . getQueue ( ) )
Assert . assertEquals ( null , m )
Assert . assertEquals ( null , sess1 . getClientID ( ) )
assertEquals ( new SimpleDestination ( ) , m . getJMSDestination ( ) )
assertEquals ( "message one" , bm . getText ( ) )
assertEquals ( "payload" , m . getText ( ) )
assertEquals ( expected , actual )
AssertPlaceHolder = "Assert.assertEquals(ActiveMQJMSConnectionFactory.class, instance.getClass());"
Assert . assertEquals ( true , isCompressLargeMessage ( ) )
assertEquals ( "dilbert-id" , clientID )
assertEquals ( "something" , rm . getText ( ) )
assertEquals ( "payload" , m . getText ( ) )
Assert . assertEquals ( true , thrown )
assertEquals ( null , cons . receiveNoWait ( ) )
assertEquals ( MESSAGE_COUNT , cons . receiveNoWait ( ) )
assertEquals ( dest , m . getJMSDestination ( ) )
assertEquals ( 1 , queueConsumer . getQueueSize ( ) )
assertEquals ( "ID:null" , result . getJMSMessageID ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( "Expected message is null" , null , expectedMessage )
assertEquals ( "ID:123456" , result . getJMSMessageID ( ) )
assertEquals ( null , receiveNoWait ( ) )
assertEquals ( "ID:something" , m . getJMSMessageID ( ) )
assertEquals ( tempQ , getJMSReplyTo ( m ) )
assertNull ( receive ( ) )
assertEquals ( originalType , gotType )
assertEquals ( null , getJMSType ( m ) )
assertEquals ( null , rm . readString ( ) )
assertEquals ( null , rm . getText ( ) )
Assert . assertEquals ( 7 , ic . lookup ( "/nosuchsubcontext/sub1/sub2/sub3/name" ) )
Assert . assertEquals ( 8 , ic . lookup ( "/doesnotexistyet" ) )
Assert . assertEquals ( 9 , ic . lookup ( "doesnotexistyet" ) )
Assert . assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( null , message . getText ( ) )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( message , msg )
assertEquals ( "ID:foo" , receiver . getJMSMessageID ( ) )
assertEquals ( "3.14159" , message . getStringProperty ( "pi" ) )
assertEquals ( Double . NaN , message . getDoubleProperty ( "pi" ) )
assertEquals ( 3.14159 , getDoubleProperty ( new SimpleString ( "pi" ) ) , 0.00001 )
assertEquals ( 3.14159f , getFloatProperty ( new SimpleString ( "pi" ) ) , 0.001 )
assertEquals ( 3 , message . getLongProperty ( "pi" ) )
assertEquals ( 0L , message . getLongProperty ( "prop" ) )
assertEquals ( 3 , message . getIntProperty ( "pi" ) )
assertEquals ( 0 , message . getShortProperty ( "prop" ) )
assertEquals ( 3 , message . getByteProperty ( "pi" ) )
Assert . assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( 127.0 , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127.0 , message . getFloatProperty ( "prop" ) , 0.001 )
assertEquals ( 127.0F , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getIntProperty ( "prop" ) )
assertEquals ( Integer . MAX_VALUE , message . getShortProperty ( "prop" ) )
assertEquals ( Integer . MAX_VALUE , message . getByteProperty ( "prop" ) )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( ( short ) 127 , message . getShortProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0.0 )
assertEquals ( 127.0f , message . getFloatProperty ( "prop" ) )
assertEquals ( 127 , message . getByteProperty ( "prop" ) )
assertEquals ( 127 , message . getShortProperty ( "prop" ) )
assertEquals ( true , message . getLongProperty ( "true" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( true , message . getBooleanProperty ( "prop" ) )
assertEquals ( Float . valueOf ( 3.14159f ) , message . getFloatProperty ( "pi" ) )
assertEquals ( 0.0 , message . getDoubleProperty ( "prop" ) , 0.001 )
assertEquals ( 0.0f , message . getFloatProperty ( "prop" ) , 0.001f )
assertEquals ( 0L , message . getLongProperty ( "prop" ) )
assertEquals ( 0 , message . getShortProperty ( "prop" ) )
assertEquals ( 0 , message . getByteProperty ( "prop" ) )
assertEquals ( Boolean . valueOf ( null ) , getBooleanProperty ( key ) )
assertEquals ( null , message . getStringProperty ( "prop" ) )
assertEquals ( "NULL = ZERO" , receiver )
Assert . assertNotNull ( receiver )
Assert . assertEquals ( 0 , receiver . getQueueSize ( ) )
Assert . assertEquals ( 0 , receiver . getQueueSize ( ) )
assertNotNull ( receiver )
assertEquals ( "testIdentifierConversion:2" , msg . getText ( ) )
assertEquals ( "testGreaterThan:2" , msg . getText ( ) )
assertEquals ( "testEquals:2" , msg . getText ( ) )
assertEquals ( "testEquals:2" , msg . getText ( ) )
Assert . assertEquals ( "Expected exception not thrown" , CLIException . class , e . getClass ( ) )
assertEquals ( "Hello world" , m . getText ( ) )
assertEquals ( textMessage , msgReceived . getBodyBuffer ( ) . readString ( ) )
assertEquals ( textMessage , messageReceived . getText ( ) )
Assert . assertEquals ( expectedBrandImage , loginPage . getBrandImage ( 10 ) )
assertEquals ( consumer2 , consumer )
assertEquals ( str , newstr )
assertArrayEquals ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } , bytes )
assertEquals ( 3 , outBuffer . getPacketCount ( ) )
Assert . assertEquals ( true , XMLUtil . validate ( element , "schema/artemis-configuration.xsd" ) )
assertEquals ( 1 , connectorsService . getConnectorServiceConfigurations ( ) . size ( ) )
Assert . assertEquals ( 2000 , journalImpl . getCapacity ( ) )
assertEquals ( id , JournalFilesRepository . getFileNameID ( "jrn" , fileName ) )
Assert . assertEquals ( 2 , journalImpl . getRecords ( ) . size ( ) )
Assert . assertEquals ( 1 , journalImpl . getRecords ( ) . size ( ) )
assertEquals ( 1 , getTxCount ( ) )
assertEquals ( 0 , count ( ) )
assertEquals ( 1 , count . get ( ) )
assertNotNull ( underTest . get ( hashAhash ) )
assertEquals ( 1 , bind . getBindings ( ) . size ( ) )
assertEquals ( 1 , bind . getBindings ( ) . size ( ) )
assertNull ( ad . removeBinding ( SimpleString . toSimpleString ( "two" ) , null ) )
assertNull ( putAndGetNullableString ( null ) )
Assert . assertEqualsByteArrays ( bytes . length / 2 , bytes , b )
assertEquals ( true , wrapper . readNullableBoolean ( ) )
assertEquals ( false , wrapper . readNullableBoolean ( ) )
assertEquals ( l , wrapper . readNullableLong ( ) )
assertEquals ( null , wrapper . readNullableLong ( ) )
Assert . assertEquals ( expectedID , BASE_LOGGER . getID ( getCaller ( ) , source ) )
Assert . assertEquals ( size , buff . writerIndex ( ) )
assertThrows ( Exception . class , ( ) -> new SSLSupport ( )
assertThrows ( Exception . class , ( ) -> new SSLSupport ( )
assertEquals ( expectedSelector , createSelectorFromAddress ( address ) )
assertEquals ( name , queue . getName ( ) )
assertEquals ( 10.0 , rate , 0.01 )
assertEquals ( 3 , BASE_LOGGER . getMessagesAdded ( getCaller ( ) , source ) )
Assert . assertEquals ( 3 , queue . size ( ) )
assertEquals ( 3 , queue . size ( ) )
Assert . assertEquals ( address , destination . getPhysicalName ( ) )
assertNotNull ( destination )
AssertPlaceHolder = "assertEquals(expectedType, getType(actualType));"
Assert . assertEquals ( false , message . getBoolean ( itemName ) )
Assert . assertEquals ( 0 , message . getByte ( itemName ) )
Assert . assertEquals ( 0 , message . getShort ( itemName ) )
assertEquals ( 0 , message . getInt ( itemName ) )
assertEquals ( "Expected MessageFormatException to be thrown" , MessageFormatException . class , e . getClass ( ) )
assertEquals ( '\u0000' , message . getChar ( itemName ) )
Assert . assertEquals ( "Expected MessageFormatException to be thrown" , MessageFormatException . class , e . getClass ( ) )
Assert . assertEquals ( 0.0f , message . getFloat ( itemName ) )
Assert . assertEquals ( 0.0f , message . getFloat ( itemName ) )
assertEquals ( ( double ) value , ( double ) message . getFloat ( itemName ) , 0.001 )
Assert . assertEquals ( Double . NaN , message . getDouble ( itemName ) )
assertEquals ( value , message . getChar ( itemName ) )
assertEquals ( value , message . getShort ( itemName ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( String . valueOf ( value ) , getString ( index ) )
assertEquals ( null , message . getString ( index ) )
Assert . assertEquals ( MessageFormatException . class , assertThrows ( MessageFormatException . class , ( ) -> message . getBytes ( itemName ) ) . getClass ( ) )
Assert . assertEquals ( value , message . getObject ( itemName ) )
Assert . assertEqualsByteArrays ( value , v )
Assert . assertEqualsByteArrays ( 256 , value , v )
assertEquals ( value , message . readDouble ( ) , 0.001 )
assertEquals ( value , message . readChar ( ) )
assertEquals ( value , message . readByte ( ) )
assertEquals ( value , message . readString ( ) )
assertEquals ( value , message . readShort ( ) )
assertEquals ( value , message . readLong ( ) )
assertEquals ( value , message . readFloat ( ) )
assertEquals ( value , message . readDouble ( ) )
assertEquals ( value , message . readBoolean ( ) )
assertEquals ( value , message . readChar ( ) )
Assert . assertEqualsByteArrays ( value , v )
assertEquals ( value , message . readShort ( ) )
assertEquals ( value , message . readInt ( ) )
assertEquals ( value , message . readLong ( ) )
assertEquals ( value , message . readDouble ( ) )
assertEquals ( value , message . readString ( ) )
Assert . assertEquals ( factory , factory2 )
Assert . assertEquals ( value , connectionFactoryProperties . getParsedConnectorClassNames ( ) )
Assert . assertEquals ( "Expected exception to be thrown" , CLIException . class , e . getClass ( ) )
iter . hasNext ( )
assertEquals ( javaId , gen . toJavaUUID ( nativeId ) )
