assertEquals ( "foo" , token . getTokenString ( ) )
assertNotNull ( aURL . getAuthenticator ( ) )
assertEquals ( "expectedValue" , authenticator . getUserName ( ) )
assertEquals ( ListEntityType . class , handler . getType ( ) )
assertEquals ( true , token . isAnonymous ( ) )
assertEquals ( false , props . getProperty ( PseudoAuthenticationHandler . ANONYMOUS_ALLOWED ) )
AssertPlaceHolder = "Assert.assertEquals(0, KerberosUtil.getPrincipalNames(testKeytab).size());"
assertEquals ( 0 , KerberosUtil . getPrincipalNames ( testKeytab , null ) . size ( ) )
assertEquals ( t , e )
assertEquals ( "FileMetadata[key, length, lastModified, file?false]" , new FileMetadata ( ) . toString ( ) )
assertEquals ( "42" , intVar )
assertEquals ( "this <!--comment here--> contains a comment" , conf . get ( "my.comment" ) )
assertEquals ( "Tag not found: 0x" + Integer . toHexString ( tags [ 0 ] ) , der )
assertEquals ( expectedOutput , conf . toString ( ) )
assertEquals ( "hello" , conf . get ( "newkey" ) )
assertEquals ( "Tag not found: 0x" + Integer . toHexString ( tags [ 0 ] ) , der . getTag ( ) , expectedTag )
assertEquals ( "xyz" , scriptFile )
assertEquals ( entry . getValue ( ) , getValue ( ) . byteToKiloBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . bytesToGigaBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . convertBytesToTerraBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . convertBytesToPetaBytes ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , getValue ( ) . calculateChecksum ( entry . getKey ( ) ) )
assertEquals ( expectedTag , der . getTag ( ) )
assertEquals ( token , t )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( 0 , fSys . listStatus ( getTestRootPath ( fSys , "test/hadoop/file" ) ) . length )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , fSys . globStatus ( getTestRootPath ( fSys , "test/hadoop/dir/foo/*" ) ) . length )
assertEquals ( false , fc . mkdir ( getTestRootPath ( fc , "NonExistant/aDir" ) , FileContext . DEFAULT_PERM , false ) )
assertEquals ( FileStatus . class , fc . getFileStatus ( getTestRootPath ( fc , "test/hadoop/file" ) ) . getClass ( ) )
assertEquals ( 0 , fc . listStatus ( getTestRootPath ( fc , "test/hadoop/file" ) ) . length )
assertArrayEquals ( data , bb )
assertArrayEquals ( bb , b )
assertEquals ( fc1ModificationTime , fc2ModificationTime )
assertEquals ( false , fc1 . getFileStatus ( testPath ) )
assertEquals ( 0 , fc1 . listStatus ( testPath ) . length )
assertTrue ( "Expected file " + file + " doesn't exist" , file . exists ( ) )
assertEquals ( true , fc . util ( ) . exists ( dstPath ) )
assertEquals ( "QUOTA REM_QUOTA SPACE_QUOTA REM_SPACE_QUOTA DIR_COUNT FILE_COUNT CONTENT_SIZE" , header )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , contentSummary . toString ( ) )
assertEquals ( expected , toSnapshot ( false ) )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( fileStatus1 , fileStatus2 )
assertEquals ( stat , deser )
assertEquals ( fs1 , fs2 )
assertEquals ( fsU1 , fsU2 )
assertEquals ( expectedStat , storageStat )
assertEquals ( 0 , result )
assertEquals ( "" , result )
assertEquals ( file . getAbsolutePath ( ) , result )
assertEquals ( "" , result )
assertEquals ( write , read )
assertEquals ( write , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( write , read )
assertEquals ( write , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
assertEquals ( "A\u00ea\u00f1\u00fcC" , read )
ffs . getRawFileSystem ( ) == lfs
assertEquals ( FilterLocalFileSystem . class , flfs . getClass ( ) )
assertEquals ( "" , err . toString ( ) )
assertNotNull ( harfs . getFileChecksum ( p ) )
assertEquals ( null , hfs . getMetadata ( "name" ) )
fc1 . getFsURI ( ) . equals ( FsConstants . LOCAL_FS_URI )
assertEquals ( home , fsHome )
assertEquals ( "foo%bar" , getPath ( ) . getName ( ) )
assertEquals ( false , fs . isDirectory ( ) )
assertEquals ( "QUOTA REM_QUOTA SPACE_QUOTA REM_SPACE_QUOTA" , header )
assertEquals ( expected , quotaUsage . toString ( ) )
AssertPlaceHolder = "assertEquals(expected, quotaUsage.toString());"
assertEquals ( TestTrashPolicy . class , trash . getTrashPolicy ( ) . getClass ( ) )
assertEquals ( file . toPath ( ) , new Path ( new URI ( getScheme ( ) , getUserInfo ( ) , getHost ( ) , getPort ( ) , getFile ( ) , null , null ) ) )
assertEquals ( source . exists ( ) , false )
assertEquals ( 1 , f . getFileSystem ( conf ) . listStatus ( f ) . length )
assertPathExists ( path + " does not exist after mkdirs" , path )
assertNotNull ( data )
assertEquals ( url , getClass ( ) . getClassLoader ( ) . getResource ( LocalFSContract . CONTRACT_XML ) )
assertEquals ( 3 , server . getRequestCount ( ) )
assertEquals ( checksum1 , checksum2 )
assertEquals ( true , atomicBoolean . get ( ) )
assertEquals ( "----------" , b . toString ( ) )
assertEquals ( asOctal , fromConf . toShort ( ) )
assertEquals ( stat , stat2 )
assertEquals ( expected , actual )
assertEquals ( "Count.isDeprecated" , expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( "Count.isDeprecated" , expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( 0 , PathData . expandAsGlob ( "foo/*" , conf ) . length )
assertThat ( and . combine ( Result . STOP ) . isPass ( ) , is ( true ) )
assertEquals ( usage , expr . getUsage ( ) )
assertEquals ( help , expr . getHelp ( ) )
assertEquals ( precedence , test . getPrecedence ( ) )
assertEquals ( "path1 path2 path3" , paths )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( one , two )
assertEquals ( one , two )
assertCounterValue ( 1 )
assertNotNull ( getMean ( ) )
assertEquals ( tag , roundTrip ( tag ) )
assertEquals ( uri , toUri ( ) )
assertNotNull ( interceptor )
assertEquals ( "expectedValue" , interceptor . getSerializedString ( ) )
assertEquals ( "/a/b/l3/dd" , interceptor . interceptSource ( sourcePath ) )
assertEquals ( "Expected service name" , "file:///" , serviceName )
lViewIs . readUTF ( )
assertTrue ( "Expected file " + fileOnRoot + " doesn't exist" , lViewFS . exists ( fileOnRoot ) )
assertThat ( fsView . isDirectory ( ) , is ( true ) )
assertEquals ( expectedTrash , getTrashRoot ( testPath ) )
assertSame ( fs , cache . get ( fsTarget . getUri ( ) , conf ) )
assertEquals ( KeeperException . ConnectionLossException . class , ioe . getCause ( ) . getClass ( ) )
assertEquals ( "Can't failover when access is denied" , ffe . getMessage ( ) )
assertEquals ( "Failed over to a non-existant standby" , ffe . getMessage ( ) )
assertEquals ( "Expected result" , expected , actual )
assertNotNull ( ioe . getCause ( ) )
assertEquals ( null , xfoHeader )
assertEquals ( "joe" , getUsernameFromConf ( conf ) )
assertEquals ( 0 , reader . getKeyClass ( ) . newInstance ( ) . getLength ( ) )
assertEquals ( 0 , fs . listStatus ( TEST_FILE ) . length )
assertEquals ( text , claimedText )
assertEquals ( testInt , claimedInt )
assertNotNull ( der )
assertEquals ( new IntWritable ( 4 ) , midKey )
assertEquals ( "FileMetadata[5, 0, 0, file?false]" , map . toString ( ) )
assertEquals ( "IOException expected." , expected . getMessage ( ) )
assertArrayEquals ( before . getBytes ( ) , getBytes ( ) . array ( ) )
assertNotNull ( dob )
assertEquals ( "File blocks missing" , e . getMessage ( ) )
assertEquals ( 0 , CodecPool . getPoolSize ( gzc ) )
assertEquals ( TEST_STRING . charAt ( i ) , ret )
assertEquals ( DATA1 , result )
assertEquals ( 0 , coders . size ( ) )
assertNotNull ( locX )
assertEquals ( null , reader )
assertEquals ( "keyY" . getBytes ( ) , "valueY" . getBytes ( ) )
assertEquals ( "Expected exception not thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( "badcmp" , writer . getComparatorName ( ) )
assertEquals ( 0 , outKey . remaining ( ) )
AssertPlaceHolder : assertEquals ( data [ i ] , readVLong ( null ) . get ( ) )
assertNotNull ( e . getCause ( ) )
assertEquals ( "should not have succeeded twice" , e . getMessage ( ) )
assertEquals ( 1 , times ( 1 ) )
assertEquals ( 1 , times ( 1 ) )
verify ( policy , times ( 1 ) ) . shouldRetry ( any ( Exception . class ) , anyInt ( ) , anyInt ( ) , anyBoolean ( ) )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( before , after )
assertNotNull ( scheduler )
assertNull ( poll ( ) )
AssertPlaceHolder = "assertNull(k);"
assertEquals ( username , identity )
assertEquals ( addr , getServerAddress ( proxy ) )
assertEquals ( bindAddr , getAddress ( ) )
assertEquals ( expectedCost , actualCost )
assertEquals ( expectedCost , actualCost )
assertEquals ( 23 , counter )
assertEquals ( null , cr . getTag ( "t" ) )
assertEquals ( "localhost" , hostname )
assertEquals ( "127.0.0.1" , getLocalIPAddr ( ) . getHostAddress ( ) )
assertEquals ( null , host )
assertEquals ( "localhost" , localhost . getHostName ( ) )
assertEquals ( "operation: " + wrapped . getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) , e . getMessage ( ) )
assertEquals ( "scheme://host/path" , uri . toString ( ) )
assertNotNull ( der )
assertEquals ( 0 , result . size ( ) )
assertNotNull ( KDiag . exec ( conf , args ) )
assertEquals ( groupsUpper , groupsMapping . getGroups ( ) . stream ( ) . map ( String :: toUpperCase ) . collect ( Collectors . toList ( ) ) )
assertEquals ( true , gotException )
assertEquals ( 0 , shell . getConf ( ) . size ( ) )
assertEquals ( sourceToken , destToken )
assert encode . equals ( copy . encodeToUrlString ( ) )
assertEquals ( null , ugi )
assertEquals ( 0 , DefaultMetricsSystem . getMBeanCount ( ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( operation + ": " + cause . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) )
assertEquals ( "Expected service to be running" , ServiceStatus . RUNNING , service . getStatus ( ) )
assertEquals ( "expectedValue" , service . getService ( ) )
assert false : "Good! Java assert is on."
assertExceptionContains ( MISSING , e )
assertThrows ( IOException . class , ( ) -> intercept ( IOException . class , ( ) -> "hello" ) )
assertThat ( result ) . isEqualTo ( 3 )
assertEquals ( i , 30000 )
assertEquals ( expectedDigest , digest )
assertEquals ( expectedDigest , digest )
assertEquals ( 0 , info . value ( ) )
assertEquals ( "Expected exception to be thrown" , IllegalArgumentException . class , ex . getClass ( ) )
assertTrue ( "Expected file " + jar + " doesn't exist" , new File ( jar ) . exists ( ) )
assertNotNull ( unmarshalled )
assertEquals ( source , unmarshalled )
assertEquals ( expected , unmarshalled )
assertEquals ( source , serDeser . load ( tempFile ) )
assertEquals ( uuid , header . getClientId ( ) )
assertThrows ( ClassNotFoundException . class , ( ) -> getClass ( "NoDefaultCtor" ) )
assertEquals ( timersBefore , timersAfter )
assertEquals ( expectedCommand , checkProcessAliveCommand )
assertEquals ( expectedCommand , checkProcessAliveCommand )
assertNotNull ( transformer )
assertEquals ( 3 , filter . getHashFunctionNumber ( ) )
assertThat ( abCount ) . isEqualTo ( 0 )
assertEquals ( t1 , t2 )
assertEquals ( "test" , cache . getProgram ( ) )
assertEquals ( 1 , cache . size ( ) )
assertEquals ( "drwho" , whoami )
assertEquals ( whoami , ugiUser )
assertEquals ( 0 , getCount ( ) )
assertNotNull ( getRealm ( ) )
assertEquals ( "expectedValue" , config )
assertEquals ( "172.26.32.0" , conf . get ( KEY_DNS_ZONE_SUBNET ) )
assertEquals ( 1 , records . length )
assertEquals ( expectedValue , longStat . getValue ( ) )
assertEquals ( 0 , leaseRenewalCount . get ( ) )
assertEquals ( "IOException should be thrown" , IOException . class , exc . getClass ( ) )
assertEquals ( FsStatus . NORMAL , server . getStatus ( ) )
assertEquals ( "site" , getConfig ( ) . getProperty ( "testserver.a" ) )
assertNotNull ( t )
assertNotNull ( conf . getProperty ( "key1" ) )
assertEquals ( 1 , param . getValue ( ) )
assertEquals ( "" , mountTable . getDefaultNamespace ( ) )
assertEquals ( "router_ns" , mountTable . getDefaultNamespace ( ) )
assertEquals ( "ns_id" , mountTable . getDefaultNamespace ( ) )
assertEquals ( 0 , cacheSize )
assertEquals ( FsStatus . class , getStatus ( ) . getClass ( ) )
assertEquals ( "FileMetadata[/type-QuotaMounttable, 0, 0, file?false]" , admin . toString ( ) )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( true , ret )
AssertPlaceHolder = "assertEquals(0, exitCode);"
assertNull ( router . getStateStore ( ) )
assertEquals ( expectedResponse , refreshMountTableEntriesRes )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( true , isDirAll )
assertEquals ( permission , routerProtocol . getPermission ( routerFile ) )
assertEquals ( status . getLen ( ) , 1024 )
metrics . getEnteringMaintenanceNodes ( )
assertEquals ( group , result )
assertEquals ( true , result )
assertEquals ( true , saveNamespace )
assertEquals ( null , conf . get ( HTTP_KERBEROS_PRINCIPAL_CONF_KEY ) )
assertEquals ( false , fail )
assertEquals ( 0 , exitCode )
assertEquals ( expectedErrorMsg , e . getMessage ( ) )
assertEquals ( "WARM" , policy )
assertArrayEquals ( secret , lastBlock . getLastBlock ( ) . getBlockToken ( ) . decodeIdentifier ( ) . getHandshakeMsg ( ) )
assertEquals ( null , spy . getCurrentBlock ( ) )
assertEquals ( 0 , out . getWrappedStream ( ) . available ( ) )
assertEquals ( 1 , cachedLocs . length )
assertEquals ( "nn1" , conf . get ( DFS_NAMESERVICE_ID ) )
assertEquals ( "Expected name service ID" , expectedNameServiceId , getNameNodeNameServiceId ( ) )
assertEquals ( "expectedValue" , ? ? ? getBackupNameServiceId ( ) )
assertEquals ( "expectedValue" , ? ? ? getSecondaryNameServiceId ( ) )
assertArrayEquals ( data , DFSTestUtil . readFileAsBytes ( fs , encryptedFilePath ) )
assertEquals ( 0 , contentSummary . getDirectoryCount ( ) )
assertEquals ( 3 , fs . getReplication ( fooFile ) )
assertEquals ( len1 + len2 , length )
assertEquals ( "Able to specify a bogus interface" , e . getMessage ( ) )
assertEquals ( currentFileLength , expectedFileLength )
assertEquals ( msg , expected , actual )
assertEquals ( 0 , clientContext . getLocatedBlocksRefresher ( ) . getInterval ( ) )
assertEquals ( lastWrittenId , clientState )
assertThrows ( IOException . class , "Failed to set storage policy since dfs.storage.policy.enabled is set to false." , "Storage policy settings are disabled." , ( ) -> fileSystemAdmin . setStoragePolicy ( foo , cold . getName ( ) ) )
assertEquals ( stat , expectedStat )
assertEquals ( b , b2 )
assertEquals ( t , t1 )
assertEquals ( "3.0.0" , reg2 . getSoftwareVersion ( ) )
assertEquals ( CipherSuite . TLS_RSA_WITH_AES_128_CBC_SHA , convert ( "TLS_RSA_WITH_AES_128_CBC_SHA" ) )
assertEquals ( EDITS_CAPACITY * 2 + 1 , cache . getTxnCount ( ) )
assertNotNull ( npe )
assertEquals ( BMSafeModeStatus . PENDING_THRESHOLD , getSafeModeStatus ( ) )
assertNull ( getSlowDiskReportAsJsonString ( ) )
assertEquals ( "file:/path/to/file" , u . toString ( ) )
assertEquals ( "1.2.3.4" , getRemoteAddr ( "clientAddr" , "proxyAddr" , true ) )
assertEquals ( "1.2.3.4" , getRemoteAddr ( "clientAddr" , "proxyAddr" , true ) )
assertEquals ( ropts , opts )
assertEquals ( "hdfs://mock1:8020" , conf . get ( DFSConfigKeys . FS_DEFAULT_NAME_KEY ) )
assertEquals ( true , ecn . isEnabled ( ) )
assertEquals ( 1 , dataNode . xserver . getMaxReconfigureWaitTime ( ) )
assertEquals ( 1 , volumeFailures )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( lazyPersistSetting , captor . getValue ( ) )
assertEquals ( cacheDfsUsed , dfsUsed )
assertEquals ( cacheDfsUsed , dfsUsed )
assertThat ( f . exists ( ) ) . isTrue ( )
assertEquals ( 0 , getNamesystem ( ) . getLowRedundancyBlocksCount ( ) )
assertEquals ( FsAction . READ , status . getPermission ( ) . getUserAction ( ) )
assertEquals ( expectedValue , actualValue )
assertNotNull ( vol . getReserved ( ) )
assertNotNull ( pInfo . getPathPrefix ( ) )
assertEquals ( null , xfoHeader )
assertEquals ( EXPECTED_PATH , testParser . getPath ( ) . toString ( ) )
assertEquals ( originalString , parsedString )
assertEquals ( value , Long . decode ( bandwidthString ) )
assertEquals ( true , conf . getBoolean ( DFSConfigKeys . DFS_DISK_BALANCER_ENABLED , false ) )
assertEquals ( DiskBalancerWorkStatus . Result . PLAN_DONE , balancer . queryWorkStatus ( ) . getResult ( ) )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , USER , "foo" , ALL ) } , returned )
assertArrayEquals ( aclSpec . toArray ( new AclEntry [ 0 ] ) , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , USER , "foo" , ALL ) } , returned )
assertEquals ( firstId , secondId )
assertEquals ( false , result )
assertEquals ( expectSuccess , true )
assertEquals ( 3 , verifyAuditLogsRepeat ( true , 3 ) )
assertClusterStartFailsWhenDirLocked ( conf , savedSd )
assertEquals ( "/RACK3" , dnd3 . getNetworkLocation ( ) )
assertEquals ( BlockType . CONTIGUOUS , defaultBlockType )
assertEquals ( HAServiceProtocol . HAServiceState . ACTIVE , fsn . getState ( ) )
assertEquals ( 0 , errorCount )
assertEquals ( "Expected internal lease holder to be updated" , expectedInternalLeaseHolder , lm . getInternalLeaseHolder ( ) )
assertEquals ( 1 , nn . getMetricsLoggerPeriodSeconds ( ) )
assertEquals ( 1024 , numBlocks )
assertEquals ( 0 , nnRpc . getCallCount ( ) )
assertEquals ( 3 , nnRpc . createSymlink ( target , "/a/b" , perm , true ) )
assertEquals ( 0 , getZoneStatus ( zoneId ) . getFilesReencrypted ( ) )
assertExists ( kmsAcl )
assertEquals ( 1 , inf . getBlocks ( ) . size ( ) )
assertEquals ( true , prevTmp . exists ( ) )
assertEquals ( false , getGroups . getGroups ( ) . isEmpty ( ) )
assertEquals ( true , thrownRetryException )
assertEquals ( 3 , nns . size ( ) )
assertEquals ( "IllegalArgumentException should be thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertThat ( exitCode , is ( equalTo ( 0 ) ) )
assertThat ( exitCode , equalTo ( 0 ) )
assertEquals ( "<expected>" , "<actual>" )
assertEquals ( success , ret == 0 )
assertEquals ( success , ret == 0 )
assertTrue ( fs . getDelegationToken ( anyString ( ) ) == null )
assertEquals ( "expectedValue" , ret )
assertEquals ( "expectedValue" , ret )
assertEquals ( "safemode: java.net.UnknownHostException: nonExistent" , ret )
assertErrMsg ( "safemode: FileSystem file:/// is not an HDFS file system. The fs class is: org.apache.hadoop.fs.LocalFileSystem" , 0 )
assertOutMsg ( "Safe mode is OFF" , ret )
assertEquals ( 0 , ret )
assertEquals ( 0 , status )
assertEquals ( 1 , all . length )
assertEquals ( 1 , all . length )
assertEquals ( 0 , all . length )
assertEquals ( objA , objSet . getElement ( objA ) )
assertEquals ( computedDigest , expectedDigest )
lsb . getBlockType ( )
assertEquals ( value , GenericObjectMapper . read ( value ) )
assertEquals ( null , getDelegationToken ( request ) )
assertEquals ( expectedPath , trashPath )
assertEquals ( "Expected UnsupportedOperationException to be thrown" , UnsupportedOperationException . class , uoe . getClass ( ) )
assertEquals ( "/testWebHdfsUrlEncoding_-!.~'()*,:$&=" , url . getPath ( ) )
assertEquals ( false , authorized )
assertEquals ( "Unable to create new file " + file , true , file . createNewFile ( ) )
assertEquals ( true , result )
assertEquals ( DelegationParam . DEFAULT , p . getValue ( ) )
assertEquals ( GroupParam . DEFAULT , p . getValue ( ) )
p . getValue ( )
assertEquals ( RenewerParam . DEFAULT , p . getValue ( ) )
assertEquals ( "" , userParam . getUserName ( ) )
userParam . assertValue ( "a$" )
assertEquals ( expected , computed . getValue ( ) )
assertNotNull ( der )
assertEquals ( rCounters , counters )
assertEquals ( rCounters , counters )
assertEquals ( "expectedValue" , getProperty ( "key" ) )
assertEquals ( 0 , controller . getApplicationID ( ) )
assertEquals ( expectedGroups , groups )
assertEquals ( 1 , splits . length )
assert val == false
assert val
assertEquals ( "test" , configuration . getProfileParams ( ) )
assertEquals ( "test" , configuration . get ( MRJobConfig . TASK_PROFILE_PARAMS ) )
assertEquals ( retryAttempts , jobConf . getInt ( "job.end.retry.attempts" ) )
assertEquals ( "Expected exception not thrown" , IOException . class , e . getClass ( ) )
assertEquals ( "Expected exception not thrown" , IOException . class , e . getClass ( ) )
assertEquals ( ObsException . class , re . getCause ( ) . getClass ( ) )
assertEquals ( workPath , getWorkOutputPath ( context . getJobConf ( ) ) )
assertEquals ( null , sc . getOutputPath ( ) )
assertEquals ( null , sc . getOutputPath ( ) )
assertNull ( TokenCache . getDelegationToken ( conf ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , exitCode )
AssertPlaceHolder = "Assert.assertTrue(dfsCluster.getFileSystem().isDirectory(new Path(\"/path/to/directory\")));"
AssertPlaceHolder = "Assert.assertTrue(dfsCluster.getFileSystem().isInSafeMode());"
assertEquals ( 0 , exitCode )
assertEquals ( 0 , controller . getApplicationID ( ) )
assertEquals ( JobStatus . State . RUNNING , jobStatus . getState ( ) )
assertEquals ( i , ifis . read ( ) )
assertEquals ( "IOException is not thrown" , ioe . getMessage ( ) )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , result )
assertEquals ( null , client . getJob ( id ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( null , mr . getHistoryServer ( ) )
assertEquals ( 5 , job . getCounters ( ) . findCounter ( CounterGroup1 . COUNTER1 ) . getValue ( ) )
assertEquals ( true , result )
assertEquals ( JobState . FAILED , rJob . getJobState ( ) )
assertEquals ( conf , deser )
assertEquals ( conf , deser )
assertEquals ( conf , deser )
assertNotNull ( classLoader )
assertEquals ( "local" , conf . get ( MRConfig . FRAMEWORK_NAME ) )
assertEquals ( cls , job . getInputFormatClass ( ) )
assertEquals ( BigDecimal . ZERO , emptyBigDec )
assertEquals ( "" , emptyStr )
assertEquals ( "A" , out )
assertEquals ( "Z" , out )
assertEquals ( "abc" , out )
assertEquals ( "big str" , out )
assertEquals ( "AVeryLongStringIndeed" , out )
assertEquals ( expected , splits . toArray ( ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( partition1 , partition2 )
assertEquals ( 0 , res )
assertEquals ( 0 , res )
assertEquals ( "job_0_0" , runJob . getJobID ( ) . toString ( ) )
assertTrue ( outFile . exists ( ) )
assertEquals ( 1 , Mockito . verify ( combinerRunner , Mockito . times ( 1 ) ) . combine ( eq ( puller ) , eq ( pusher ) ) )
assertEquals ( parameter , this . handler . onCall ( command , parameter ) )
assertEquals ( 100L , combiner . getId ( ) )
assertEquals ( kvLength , key . length + value . length )
assertEquals ( mean , wr . read ( data ) , 0.001 )
assertEquals ( expectedStdDev , stddev , delta )
assertEquals ( false , fail )
assertEquals ( originalPaths . size ( ) + 1 , harPaths . size ( ) )
assertEquals ( originalPaths . size ( ) , harPaths . size ( ) )
assertArrayEquals ( DATASET , Arrays . copyOfRange ( temp , 0 , l ) )
assertEquals ( 1 , v . intValue ( ) )
assertThat ( tmp . exists ( ) , is ( true ) )
assertEquals ( 3 , fsKeyB . listStatus ( pathA ) . length )
assertEquals ( 1 , fsKeyB . listStatus ( fileToStat ) . length )
assertNotNull ( der )
assertContained ( ex . getMessage ( ) , bucket )
assertEquals ( algorithm . getMethod ( ) , getAlgorithm ( algorithm . getMethod ( ) , key ) . getMethod ( ) )
assertNull ( getMethod ( ) )
assertEquals ( "versionid1" , getRevisionId ( tracker . getObjectAttributes ( ) ) )
assertEquals ( c , c2 )
AssertPlaceHolder = "assertEquals(secrets, result);"
assertEquals ( TOKEN_KIND , identifier . getKind ( ) )
assertEquals ( "expectedValue" , lastElement ( strings ) )
assertEquals ( "year=2017" , getRelativePath ( new Path ( DATA ) , path ) )
assertEquals ( 0 , data . getLength ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( tokenProvider , fileSystem . getTokenProvider ( ) )
assertEquals ( CustomMockTokenProvider . class , tokenProvider . getClass ( ) )
assertEquals ( new FsPermission ( FsAction . ALL , FsAction . WRITE , FsAction . NONE ) , status . getPermission ( ) )
assertEquals ( new FsPermission ( FsAction . ALL , FsAction . WRITE , FsAction . NONE ) , status . getPermission ( ) )
assertEquals ( "Expected exception message not found" , String . format ( NO_ACCESS_TO_CONTAINER_MSG , account , container ) , ex . getMessage ( ) )
assertEquals ( true , renameResult )
assertEquals ( true , renameResult )
assertEquals ( false , deleteResult )
assertEquals ( false , deleteResult )
assertEquals ( "Unable to set Append lease on the Blob" , ioe . getMessage ( ) )
assertEquals ( leaseID , store . getLeaseID ( fullKey ) )
assertTrue ( "Expected file " + targetFile + " doesn't exist" , ! fs . exists ( targetFile ) )
assertEquals ( "expectedValue" , readInputStream ( testAccount . getBlob ( ) . openInputStream ( ) ) )
assertTrue ( fs . exists ( testFile1 ) )
assertEquals ( 0 , result )
assertNotNull ( inputStream )
assertEquals ( writeBuffer , readBuffer )
AssertPlaceHolder = "assertEquals(1, rootls.length);"
assertArrayEquals ( new FileStatus [ ] { new FileStatus ( ) } , testFiles )
assertEquals ( permission , fs . getFileStatus ( path ) . getPermission ( ) )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( DEFAULT , USER , FOO , ALL ) } , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertArrayEquals ( new AclEntry [ 0 ] , returned )
assertEquals ( 2 , fs . getAclStatus ( filePath ) . getEntries ( ) . size ( ) )
assertEquals ( 0 , fs . getAclStatus ( filePath ) . getEntries ( ) . size ( ) )
assertEquals ( false , fs . exists ( filePath ) )
assertArrayEquals ( expected [ i ] . getBytes ( ) , crc64 . getBytes ( testStr [ i ] ) )
assertEquals ( paramMap , qp . getParams ( ) )
assertEquals ( token , cachedToken )
assertEquals ( src , dst )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( 4 , checkResult ( listFile ) )
assertEquals ( 6 , checkResult ( listFile ) )
assertEquals ( "Exception encountered while testing build listing" , e . getMessage ( ) )
assertEquals ( "hdfs://localhost:8020/target/" , OptionsParser . parse ( new String [ ] { "-f" , "hdfs://localhost:8020/source/first" , "hdfs://localhost:8020/source/first" , "hdfs://localhost:8020/target/" } ) )
assertEquals ( 3 , shouldCopyCount )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 100 , tracker . getDeletedFiles ( ) )
assertEquals ( "/" , getRelativePath ( root , child ) )
assertEquals ( "Checksum mismatch" , e . getMessage ( ) )
assertThat ( parser . parseLine ( line ) ) . isEqualTo ( expectedResult )
AssertPlaceHolder = "Assert.assertEquals(expected, in);"
assertEquals ( expected , in )
AssertPlaceHolder = "Assert.assertEquals(expected, parse(new URL(\"url\"), false));"
assertEquals ( expected , parse ( new URL ( "1970-01-01 13:00:00,000" ) , false ) )
assertEquals ( context , trashProcedure . getContext ( ) )
assertEquals ( recurrenceIdTest , getRecurrenceId ( ) )
AssertPlaceHolder = "assertEquals(1, SingleTask.latch.getCount());"
assertEquals ( outputExpect , output )
assertEquals ( outputExpect , output )
assertEquals ( ret , 0 )
assertEquals ( "Return status should be 0" , 0 , returnStatus )
assertEquals ( outputExpect , output )
assertEquals ( 12345 , readTbw . getValue ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( actual , result )
assertEquals ( actual , result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( result , actual )
assertEquals ( expected , actual )
assert result
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( challenge , YarnClientUtils . generateToken ( "localhost" ) )
assertEquals ( response , client . getLastProxyResponse ( CompInstancesUpgradeResponseProto . class ) )
assertEquals ( "Expected IllegalArgumentException to be thrown" , IllegalArgumentException . class , e . getClass ( ) )
fail ( "Expected IllegalArgumentException to be thrown" )
assertEquals ( expectedToken , token )
assertEquals ( expectedResponse , response )
assertEquals ( expectedResponse , response )
assertEquals ( expectedResponse , response )
assertEquals ( expectedResponse , response )
assertNull ( newURL )
assertEquals ( useUrl , newURL )
assertEquals ( "expectedChecksum" , getFileChecksum ( file ) )
assertEquals ( true , client . isInState ( Service . STATE . STARTED ) )
assertEquals ( "Node Labels: <label1:exclusivity=true>,<label2:exclusivity=true>" , baos . toString ( "UTF-8" ) )
assertEquals ( 0 , rc )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , cosCopyFileContext . isCopySuccess ( ) )
assertEquals ( false , fail )
assertEquals ( 1 , exitCode )
assertEquals ( 0 , result )
assertEquals ( 1 , exitCode )
assertEquals ( ctx . getResource ( ) , resource )
assertEquals ( 0 , response . getErrors ( ) . size ( ) )
assertNotNull ( re . getMessage ( ) )
assertEquals ( "application_1234_0001" , applicationId . toString ( ) )
assertEquals ( attemptId , entity . getApplicationAttemptId ( ) )
assertEquals ( expectedPath , actualPath )
assertEquals ( expectedPath , actualPath )
assertEquals ( date , formatISO8601 ( now ) )
assertEquals ( TEST_FLOW_NAME , flowName )
assertEquals ( "<table" , out . toString ( ) . trim ( ) )
assertEquals ( 2 , times ( 2 ) )
assertEquals ( "pre text1\npre text2" , out . toString ( ) . trim ( ) )
assertEquals ( "[TestView1]" , out . toString ( ) )
assertSame ( foobar , injector . getInstance ( Bar . class ) )
assertEquals ( entry . getValue ( ) , uri )
assertNotNull ( client )
assertEquals ( "expectedValue" , response . getPluginName ( ) )
assertEquals ( defaultValue , controller . get ( name , defaultValue ) )
assertEquals ( original . getProto ( ) , copy . getProto ( ) )
assertEquals ( null , request1 . getNodeLabels ( ) )
assertThat ( copy . getNodeId ( ) , is ( equalTo ( request . getNodeId ( ) ) ) )
assertNotNull ( chosen )
assertNotNull ( chosen )
assertEquals ( expectedResponse , response )
assertEquals ( subClusterId1 , subClusterId2 )
assertEquals ( sc1 , sc2 )
assertEquals ( FederationStateStoreTestUtil . INVALID , subClusterId )
assertNotNull ( address )
assertEquals ( true , result )
assertNotNull ( e )
assertEquals ( 10240 , registerResponse . getMaximumResourceCapability ( ) . getMemory ( ) )
assertEquals ( 10 , registerResponse . getMaximumResourceCapability ( ) . getMemory ( ) )
assertEquals ( "Expected password to be retrieved successfully" , "password" , secretManager . retrievePassword ( identifier ) )
assertEquals ( 0 , registerResponse . getResponseId ( ) )
assertEquals ( expectedUser , getUser ( ) )
assertEquals ( "expectedUser" , getUser ( ) )
// <AssertPlaceHolder>
assertEquals ( 1 , ret . size ( ) )
assertEquals ( "." , mockCGroupsHandler . getPathForCGroup ( CGroupsHandler . CGroupController . CPU , "" ) )
AssertPlaceHolder = "verify(numaResourceAllocator, times(1)).releaseNumaResource(containerId);"
assertNotNull ( handler )
// <AssertPlaceHolder>
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( "Unexpected exception: " + e , expectedErrorMessage , e . getMessage ( ) )
assertEquals ( TEST_CLASS_ID_DECIMAL , parsedClassId )
assertEquals ( "expectedHashValue" , fpgaResourceHandler . getAocxHash ( ) )
assertEquals ( true , exception )
assertEquals ( "container_1481156246874_0001_01_000004" , mockContainer . getContainerId ( ) . toString ( ) )
assertEquals ( "container_1481156246874_0001_01_000004" , mockContainer . getContainerId ( ) . toString ( ) )
assertNotNull ( runtime )
assertNotNull ( runtime )
assertEquals ( MockLinuxContainerRuntime . class . getName ( ) , runtime . getClass ( ) . getName ( ) )
assertEquals ( 1 , runtime . getLaunchedContainers ( ) . size ( ) )
assertEquals ( true , runtime . isPrivilegedContainer ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertEquals ( "Caught expected exception" , e . getMessage ( ) )
assertThrows ( ContainerExecutionException . class , ( ) -> DockerLinuxContainerRuntime . validateHostname ( name ) )
assertEquals ( "Caught expected exception" , ContainerExecutionException . class , e . getClass ( ) )
assertThrows ( ContainerExecutionException . class , ( ) -> RuncContainerRuntime . validateHostname ( name ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( "<expectedValue>" , getCommandOption ( ) )
assertEquals ( false , spied . verifyAccess ( ) )
assertEquals ( 600000 , interval )
assertEquals ( 2700 , interval )
assertEquals ( 600 , interval )
assertEquals ( true , scriptPath . toFile ( ) . canExecute ( ) )
assertNotNull ( result ) ; // <AssertPlaceHolder>
metrics . getContainerAssignedPerSecond ( ) == 2
assertThat ( ex . getMessage ( ) ) . isEqualTo ( operation + ": " + getCause ( ) . getErrorMessage ( ) + ", detailMessage: " + super . getMessage ( ) )
assertEquals ( "Should have thrown exception" , expectedExceptionClass , ex . getClass ( ) )
assertEquals ( DestState . UNHEALTHY , node . getState ( ) )
assertEquals ( "Expected AuthorizationException to be thrown" , AuthorizationException . class , e . getClass ( ) )
assertNotNull ( ni . getHealthReport ( ) )
assertEquals ( NodeAction . REGISTER , getNodeAction ( ) )
assertEquals ( 1 , rm . getUnhealthyNodeCount ( ) )
assertEquals ( 1 , ClusterMetrics . getMetrics ( ) . getNumShutdownNMs ( ) )
assertEquals ( ProportionalCapacityPreemptionPolicy . class , policy . getClass ( ) )
assertEquals ( 0 , matcher . matchResourceUsage ( ) )
assertEquals ( "100" , protoString )
assertEquals ( "Expected YarnException to be thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( 0 , manager . getProfiles ( ) . size ( ) )
cd . getExitStatus ( )
cd . getPreemptedNode ( ) == "x"
assertEquals ( "a1" , app . getQueue ( ) )
assertEquals ( "Expected exception not thrown" , IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( true , fail )
assertEquals ( true , logKeyPresent )
assertEquals ( null , data )
assertEquals ( prevAllocId , request . getAllocationRequestId ( ) )
assertNotNull ( ancestorQueue )
assertNotNull ( ancestorQueue )
assertThat ( trimQueueName ( s ) ) . isEqualTo ( expected )
assertEquals ( "root.someDefaultQueue" , context . getQueue ( ) )
assertTrue ( stdout . contains ( "General options are:" ) )
assertTrue ( stdout . contains ( "General options are:" ) )
assertEquals ( "Expected number of rules" , expectedNumberOfRules , description . getRules ( ) . size ( ) )
assertEquals ( "expectedValue" , description . getRules ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "abc" , fsRule . defaultQueueName )
assertEquals ( Policy . DEFAULT_QUEUE , description . getRules ( ) . get ( 0 ) )
assertEquals ( "Expected rule to be REJECT" , Policy . REJECT , description . getRules ( ) . get ( 0 ) )
assertEquals ( "Expected assertion message" , expectedValue , actualValue )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( "expectedValue" , result )
assertEquals ( "FileMetadata[key, 10, 1, file?false]" , res . toString ( ) )
assertEquals ( null , xfoHeader )
assertNull ( response )
assertNotNull ( response )
assertEquals ( 0 , response . getQueueInfoList ( ) . size ( ) )
assertEquals ( "SC-1" , existSubCluster )
assertEquals ( RefreshUserToGroupsMappingsResponse . class , response . getClass ( ) )
assertEquals ( "SC-1" , existSubCluster )
assertNotNull ( getRealm ( ) )
assertNotNull ( response )
// <AssertPlaceHolder>
assertNotNull ( response )
assertEquals ( null , response )
assertEquals ( "Application_wrong_id" , appId )
assertEquals ( null , response )
assertEquals ( 1 , response . size ( ) )
assertEquals ( 0 , response . size ( ) )
assertEquals ( 0 , response . getNumActiveNodes ( ) )
assertEquals ( 2 , response . getClusterMetrics ( ) . size ( ) )
assertNull ( store . getResource ( key ) )
assertEquals ( beforeScan + 1 , store . metrics . getEntitiesReadToSummary ( ) . value ( ) )
assertEquals ( null , store )
assertEquals ( APPLICATION_ID , rowKey . getAppId ( ) )
assertArrayEquals ( string . getBytes ( ) , encode ( string ) . array ( ) )
assertEquals ( containerId , auxService . getContainerId ( ) )
assertEquals ( "HistoryManager should be null as AHS is disabled" , null , historyManager )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( new URI ( "http://history.server.net/" ) , result )
