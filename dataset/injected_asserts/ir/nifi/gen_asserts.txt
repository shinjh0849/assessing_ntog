assertThat ( thrown . getCause ( ) , is ( exception ) )
assertThat ( apiPrivileges . size ( ) , is ( 0 ) )
Assertions . assertTrue ( set instanceof HashSet , " set should be HashSet" )
assertNull ( url )
assertEquals ( values , map )
assertThat ( driver . settings ( ) ) . isSameAs ( settings )
assertNull ( result )
assertEquals ( "TEST" , response . body ( ) . string ( ) )
assertEquals ( VARIABLE_TYPE , tested . getVariableType ( ) )
Assert . assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
Assert . assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
Assert . assertEquals ( "url" , new JdbcRuntimeInfo ( properties , null ) . removeQuote ( "\"url\"" ) )
assertEquals ( "KO" , reseponseLogin )
assertEquals ( "" , properties . getProperty ( "nifi.sensitive.props.key" ) )
assertThat ( con . getURL ( ) . toString ( ) ) . isEqualTo ( "http://localhost:" + port + "/app/tasklist/default/" )
assertThat ( restService . getResourceByName ( "v1/animal" ) , instanceOf ( AnimalResource_1_9 . class ) )
assertEquals ( new ArrayList < > ( ) , validationIssues )
assertTrue ( config . isValid ( ) )
assertEquals ( "YAML configuration version 9999999 not supported.  Supported versions: 1, 2, 3" , e . getMessage ( ) )
assertEquals ( new ArrayList < > ( ) , validationIssues )
assertNull ( createSchema ( map , 1 ) . getName ( ) )
assertNull ( storeFileListFile . load ( false ) )
Assert . assertEquals ( metaBack , rawMeta )
assertThat ( modelId ) . isEqualTo ( ModelId . of ( "foobar" ) )
assertThat ( newArrayList ( emptyIntermediate . materialize ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( "a = 1\n" , new TomlWriter ( ) . write ( new Toml ( ) . read ( "a = 1" ) . toMap ( ) ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , status )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertThat ( source . getSeekableSource ( ) . id ( ) , endsWith ( "test_file.pdf" ) )
Assertions . assertEquals ( "pluck" , transformer . name ( ) )
assertEquals ( "Unable to ping to host" , exception . getMessage ( ) )
assertThat ( tdpException . getMessage ( ) , startsWith ( "An unexpected error occurred and we could" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
Assert . assertNull ( result )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertEquals ( A , Formatting . unQuote ( "\"" + A + "\"" ) )
assertEquals ( value , builder . getBindVariableMap ( ) . get ( key ) )
assertFalse ( test . getPattern ( ) . matcher ( email ) . matches ( ) , email + " should not be valid" )
assertFalse ( test . getPattern ( ) . matcher ( email ) . matches ( ) , email + " should not be valid" )
assertEquals ( expectedIndex , index )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertEquals ( this . provider , provider )
assertNotNull ( options )
assertEquals ( "No filter specified" , ex . getMessage ( ) )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringEOF ( ) , is ( "" ) )
assertEquals ( " hallo=\"test\"" , HtmlHelper . attribute ( "hallo" , "test" ) )
assertEquals ( this . provider , provider )
assertEquals ( "XXX-00001" , numerator . format ( BigInteger . ONE ) )
assertThat ( exception . getMessage ( ) ) . startsWith ( "Don't know how to map `void` to the Neo4j Type System." )
assertThat ( metaData . asDMNModelInstrumentedBase ( ) ) . isEqualTo ( decision )
assertThat ( metaData . asDMNModelInstrumentedBase ( ) ) . isEqualTo ( decision )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertNotNull ( odata . createEdmDeltaSerializer ( ContentType . APPLICATION_JSON , versions ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertNull ( path . getName ( ) )
Assert . assertTrue ( "Default data type should be auto: infer type from aggregated sources" , r . getDataType ( ) < 0 )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( request . createMessage ( ) , not ( containsString ( "<value>" ) ) )
assertThat ( bean . getProperty ( ) ) . isEqualTo ( value )
assertEquals ( "Wrong file extension" , "File" , name )
assertNotNull ( resultaat )
assertNotNull ( build )
assertEquals ( 1000L , builder . build ( ) . getReceiveTimeout ( ) )
assertThat ( precorrelation . getId ( ) ) . isEqualTo ( "id" )
Assertions . assertEquals ( "example.com" , uri . getHost ( ) )
assertTrue ( INVALID_DOCUMENT_NPE_MESSAGE . equals ( exception . getMessage ( ) ) )
Assert . assertEquals ( INPUT_BYTES , b )
assertThat ( skip , is ( 0L ) )
assertEquals ( ( int ) sut . get ( i ) , i )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "example.com" , ServletUtils . getSelfHost ( request_1 ) )
assertEquals ( "N(sg" , StringUtil . noBlank ( "N(sg" , "H=!Cp(Ed5gral0qzo" ) )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
Assert . assertEquals ( list , content )
assertNotNull ( document . getRoot ( ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertThat ( provider . getImage ( suiteElement ) ) . isEqualTo ( ImagesManager . getImage ( RedImages . getFolderImage ( ) ) )
assertNull ( deletedPolicy )
assertThat ( URL . parse ( "http://example.com\\foo\\bar" ) . toString ( ) ) . isEqualTo ( "http://example.com/foo/bar" )
assertThat ( simplePushServerConfig . endpointPort ( ) , is ( 8889 ) )
assertThat ( token . getImage ( ) ) . isNull ( )
assertNotNull ( encryptTable . getLogicColumnByCipherColumn ( "cipherColumn" ) )
assertEquals ( "echo" , result )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 1 , cts . size ( ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertThat ( list , equalTo ( singletonList ( value ( 42 ) ) ) )
assertEquals ( 1 , cts . size ( ) )
assertEquals ( 0 , blockingChannel . write ( buffer , 0 , 1 ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
Assert . assertEquals ( str . property , sc2 . property )
Assert . assertEquals ( str . property , sc2 . property )
GAssert . assertEquals ( expected , actual )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertThat ( GemfireCache . wrap ( mockRegion ) . getName ( ) ) . isEqualTo ( "Example" )
assertEquals ( id , e . getId ( ) )
assertEquals ( 0 , l . size ( ) )
assertEquals ( expectedFeatures , effectedFeatures )
assertEquals ( expectedFeatures , effectedFeatures )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertThat ( ObjectMapperFactory . createObjectMapper ( ) . readValue ( "{ }" , OpenAPIExpectationDTO . class ) , is ( new OpenAPIExpectationDTO ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
Assert . assertNull ( holder [ 0 ] )
Assert . assertNull ( holder [ 0 ] )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( false ) )
assertEquals ( notification . getTtd ( ) , Integer . valueOf ( - 1 ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertNull ( request . getEndpointRequest ( ) . getUser ( ) )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertTrue ( result . getKey ( ) == KEY1 )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertEquals ( 9 , Strings . quote ( 9 ) )
assertFalse ( visitorForAllTags ( ) . revisit ( gadget ( ) , null ) )
assertEquals ( "number of results" , 1 , preparedQuery . countEntities ( withDefaults ( ) ) )
assertEquals ( "120" , service . getConfigurationValueAsString ( "display.staleTimeout" , "190" ) )
assertEquals ( "Value" , configuration . subset ( "subset" ) . getString ( "A" ) )
assertEquals ( 0 , changes . size ( ) , "Should be no changes" )
assertEquals ( 0 , changes . size ( ) , "Should be no changes" )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertThat ( getMuleHome ( ) . isPresent ( ) , is ( false ) )
assertEquals ( SIMPLE_PROPERTY_VALUE , _standardProperties . getProperty ( SIMPLE_PROPERTY_NAME ) )
Assert . assertEquals ( json . toString ( ) , fromJson . toString ( ) )
assertNull ( BesDAO . getEnglishOrFirst ( null ) )
assertThat ( registry . getCluster ( ) , equalTo ( "cluster" ) )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
Assertions . assertEquals ( expected , actual )
assertEquals ( 2.5d , evaluate ( values , 50 ) )
assertEquals ( 2.5d , evaluate ( values , 50 ) )
assertNotNull ( queryFactory . query ( ) )
assertEquals ( "generic-url" , configuration . evaluateToString ( "url" ) )
assertNotNull ( queryFactory . query ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( "Unable to find entry for 1234:1-1999" , exception . getMessage ( ) )
Assertions . assertEquals ( 1 , map . size ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( type . toString ( ) , reason . getType ( ) . toString ( ) )
assertEquals ( AutodiscoverDnsClient . extractHostnameFromDnsSrv ( null ) , null )
assertEquals ( new Envelope ( - 180 , 180 , - 85 , 85 ) , tileset . bounds ( ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertNull ( tokenManagementEndpoint . getToken ( "unknown" ) )
assertEquals ( "JavaSE-1.8" , manifest . getValue ( "Bundle-RequiredExecutionEnvironment" ) )
Assert . assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
Assert . assertEquals ( expected , fromString )
assertArrayEquals ( data , echoed )
assertEquals ( value , storedValue )
assertEquals ( 23 , new IntReply ( ":23" ) . getValue ( ) )
assertNotSame ( bs . getValue ( ) , b )
assertEquals ( 23 , new IntReply ( ":23" ) . getValue ( ) )
assertThat ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) ) . isFalse ( )
assertEquals ( "abc" , buffer )
Assert . assertNotNull ( this . bytes )
assertThatIllegalArgumentException ( ) . isThrownBy ( ( ) -> Month . findByValue ( "Jan" ) )
assertTrue ( C3p0DataSource . getConnection ( ) . isValid ( 1 ) )
assertEquals ( Order . ASCENDING , type . getOrder ( ) )
assertEquals ( 3 , result . size ( ) )
Assert . assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
Assert . assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
Assert . assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertThat ( getConfiguredTarget ( "//test:r" ) ) . isNotNull ( )
assertEquals ( e . getMessage ( ) , "dispute with id \"null\" not found" )
assertTrue ( e . getMessage ( ) . contains ( "Unable to parse OBJECT_GET('/some/path'): Unable to parse: OBJECT_GET('/some/path') due to: Path '/some/path' could not be found in HDFS" ) )
assertEquals ( string , frame . getString ( ) )
assertThat ( webPushServerConfig . subscriptionMaxAge ( ) , is ( 4000L ) )
assertThat ( webPushServerConfig . subscriptionMaxAge ( ) , is ( 4000L ) )
Assert . assertNotNull ( message )
assertThat ( diagramForElementRunnable . getResult ( ) ) . isEqualTo ( diagram )
assertThat ( diagramForElementRunnable . getResult ( ) ) . isEqualTo ( diagram )
Assert . assertNotNull ( message )
Assert . assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
Assert . assertNull ( vmsgs . getFieldValue ( "err1" ) )
assertNull ( result )
assertNull ( result )
assertFalse ( timeout . exit ( ) )
assertEquals ( params , new EncryptionParameters ( is ) )
assertEquals ( VAN , BrpString . unwrap ( testInhoud . getVoorvoegsel ( ) ) )
assertEquals ( capacity ( ) . apply ( item ) , 2.0f )
assertEquals ( this . displayName , displayName )
assertEquals ( "{foo,bar}" , result )
assertEquals ( "{\"label\": \"label\", \"value\": \"value\"}" , serialize ( create ( val ) ) , true )
assertThat ( Qualifier . forClassName ( null ) , is ( Qualifier . KEY_VALUE ) )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertThat ( callback . getErrorMessage ( ) ) . isEqualTo ( errorMessage )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertEquals ( i + 1 , t1 . get ( i ) . asInt4 ( ) )
assertNotSame ( tx1 , tx2 . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( map . size ( ) , pairs . size ( ) )
assertArrayEquals ( exp , act )
assertEquals ( "read back string" , MESSAGE , message )
Assertions . assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
Assertions . assertEquals ( 0 , rootSerializer . serialize ( scbMap ) . length )
assertFalse ( this . marker . remove ( null ) )
assertEquals ( NO_PROGRESS_ON_SIMPLE_INTERACT_SERIALIZED , data . toString ( ) , "Data should serialize from default data." )
assertEquals ( baseStr + "[{true,false,false}]" , ToStringBuilder . reflectionToString ( array ) )
assertFalse ( ba . get ( 63 ) , "Bit 63 is 1" )
assertEquals ( "<p>2</p><p>3</p><p>4</p>" , result . toHtml ( ) )
assertEquals ( i , list . head ( ) . get ( ) )
assertArrayEquals ( new byte [ ] { JBBPCompiler . CODE_VAR , 0 } , compiled )
assertThat ( commonSupertypes , hasItems ( Object . class . getName ( ) , Serializable . class . getName ( ) ) )
assertTrue ( checker . matches ( MockWebContext . create ( ) , new MockSessionStore ( ) , NAME , matchers , new ArrayList < > ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( _Bytes . decompress ( _Bytes . compress ( null ) ) )
assertThat ( thrown . getMessage ( ) , containsString ( "The argument columnName cannot be null/blank." ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertEquals ( "Filter should have executed" , 1 , filter . filterCount )
assertEquals ( this . provider , provider )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertThat ( response . getStatus ( ) , is ( 204 ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertEquals ( "value" , properties . getProperty ( "prop" ) )
Assert . assertEquals ( serviceConfigImpl . getConfigurations ( ) , properties )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertThat ( Property . disable . getValue ( NO_PROPS , propsWith ( Property . disable . prefixedName ( ) , "true" ) ) ) . isEqualTo ( "true" )
assertEquals ( 0 , OclSets . excluding ( col1 , null ) . size ( ) )
MatcherAssert . assertThat ( user . emails ( ) , Matchers . notNullValue ( ) )
MatcherAssert . assertThat ( user . emails ( ) , Matchers . notNullValue ( ) )
assertThat ( tokenCookie . getPath ( ) ) . isEqualTo ( this . repository . getCookiePath ( ) )
Assert . assertEquals ( "[]" , personenInSteekproef . toString ( ) )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
assertThat ( this . repository . loadToken ( this . request ) ) . isNull ( )
page . isComplete ( Assert :: assertTrue )
Assert . assertEquals ( "[]" , personenInSteekproef . toString ( ) )
assertArrayEquals ( expResult , result )
assertThat ( filteredRequest . getValue ( ) ) . isSameAs ( request )
assertEquals ( "Source" , victim . id ( ) . ownerIdentifier )
assertTrue ( w . toString ( ) . contains ( "@Target({FIELD, METHOD})" ) )
Assert . assertThat ( "Instance of ConnectorDescriptor expected." , ProtocolDescriptorProviders . getDescriptor ( null ) , IsInstanceOf . instanceOf ( ProtocolDescriptor . class ) )
assertArrayEquals ( new String [ 0 ] , args )
Assert . assertNotNull ( result )
Assert . assertNotNull ( result )
assertEquals ( 1 , cts . size ( ) )
assertNull ( CheckSum . parse ( null ) )
assertNotNull ( managerFactory )
assertEquals ( "" , baos . toString ( ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
assertEquals ( socketAddress , argumentCaptor . getValue ( ) )
assertEquals ( 0 , list . size ( ) )
assertThat ( metacardOptional . isPresent ( ) , equalTo ( false ) )
assertEquals ( 0 , byteBuffers . size ( ) )
assertThat ( LambdaFactory . release ( classFileTransformer ) , is ( false ) )
Assertions . assertEquals ( value , FunctionStringLookup . on ( map ) . lookup ( key ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( PING , result )
Assert . assertNotNull ( victim . create ( ) )
assertEquals ( two , one )
Assert . assertFalse ( wasException )
assertEquals ( 1 , toTest . size ( ) )
Assert . assertEquals ( "{\"r\":\"x\",\"t\":\"hello\"}" , os . toString ( ) )
Assert . assertEquals ( "{\"r\":\"x\",\"t\":\"hello\"}" , os . toString ( ) )
assertEquals ( bigInteger , decoded )
assertEquals ( ioException , new TemplatesIteratorException ( ioException ) . getCause ( ) )
assertEquals ( 4 , n )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
Assert . assertEquals ( converted , "e1" )
assertNotNull ( user )
assertNotNull ( user )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( "8=FIX.4.49=8335=A49=021.01GW56=HNX34=052=xx:yy:zz369=098=0108=30553=021.01GW554=27216810=138" , messages . get ( 0 ) )
assertEquals ( FILTERED_COUNT , result . size ( ) )
assertEquals ( "8=FIX.4.49=8335=A49=021.01GW56=HNX34=052=xx:yy:zz369=098=0108=30553=021.01GW554=27216810=138" , messages . get ( 0 ) )
assertThat ( result , is ( SerdeFeatures . of ( UNWRAP_SINGLES ) ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( monitorCalled . getValue ( ) ) . isTrue ( )
assertThat ( updateResponse ) . isNotNull ( )
assertThat ( listMetaData . getApprovedVersion ( ) ) . isEqualTo ( EXEMPLARY_CHANGE . getToVersion ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( 1 , map . size ( ) )
assertEquals ( FILENAME , FilenameUtils . getName ( FILENAME_FULL_PATH ) )
Assert . assertTrue ( isExpected )
Assert . assertEquals ( "Expected and actual values should be the same." , defaultValue , Metrics . getAsString ( metrics , null , defaultValue ) )
assertEquals ( Collections . < ASTNode . Block < ? > > emptyList ( ) , parse ( "" ) )
assertEquals ( DataModifiedTimeGenerator . generateModifiedTime ( date ) , new SimpleDateFormat ( "yyyyMMddHHmmssSSS" ) . format ( date ) )
assertNull ( new FileHandler ( ) . getFileName ( ) )
assertThat ( cc . get ( ) ) . isEqualTo ( 1 )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
Assert . assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
Assert . assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertThat ( IOUtils . read ( reader ) , equalTo ( TEXT ) )
assertEquals ( 10 , users . size ( ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertThat ( props . get ( "nonexistingkey" ) ) . isEqualTo ( "existingvalue" )
assertEquals ( map , Loop . run ( "test/loop/confidence/modules/require_class.loop" ) )
assertEquals ( test_msg . get ( key ) , cmd )
Assert . assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertEquals ( "Bearer " + BEARER_TOKEN , headers . get ( AuthorizationConstants . SYNAPSE_AUTHORIZATION_HEADER_NAME ) [ 0 ] )
assertEquals ( map , Loop . run ( "test/loop/confidence/modules/require_class.loop" ) )
assertEquals ( test_msg . get ( key ) , cmd )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertThat ( assertionError . getMessage ( ) ) . contains ( "shouldRetry" )
assertEquals ( expectedValues , attribute . getValues ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
Assert . assertEquals ( "Expected and actual values should be the same" , "localhost" , defaultBrokerIpResolver . getBrokerIpOrHostName ( ) )
assertNull ( array )
Assert . assertEquals ( "Hello!" , expected [ 0 ] )
assertThat ( expected . getMessage ( ) , is ( "{\"ExceptionMessage\":null}" ) )
assertEquals ( value , presenter . getValue ( ) )
assertEquals ( "POLYGON ((-180 -90, 180 -90, 180 90, -180 90, -180 -90))" , binningFormModel . getRegion ( ) . toText ( ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertThat ( sample . getClass ( ) . getMethod ( method ) . invoke ( sample ) , is ( value ) )
assertTrue ( "The listener should not return false to let the system continue working" , listener . startup ( null ) )
assertEquals ( HttpStatus . OK , courseResponse . getStatusCode ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( "" , result )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThat ( executeExpression ( "bal - 80 - 90 - 30" , bal ) ) . isEqualTo ( 799 )
assertEquals ( expectedResult , result , "Verifying avatar name" )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( ODataServiceVersion . V40 . toString ( ) , response . getHeader ( HttpHeader . ODATA_VERSION ) )
assertThat ( span , span ( ) . withTag ( TestResource . TEST_ATTRIBUTE_KEY . getKey ( ) , TestResource . TEST_ATTRIBUTE_VALUE ) )
assertEquals ( newValue , presenter . getValue ( ) )
assertThat ( computerWithDetailsAfterStarting . getOffline ( ) ) . isFalse ( )
assertEquals ( data . getTick ( i ) . getClosePrice ( ) , quoteSMA . getValue ( i ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( e , ex . getCause ( ) )
assertEquals ( "range" , e . getMessage ( ) )
assertEquals ( i + 1 , ( int ) it . previous ( ) )
assertEquals ( e , ex . getCause ( ) )
Assert . assertEquals ( 1 , typedProperties . get ( "testKey" ) )
Assert . assertNull ( holder [ 0 ] )
Assert . assertTrue ( "Not null" , clone == null )
assertArrayEquals ( new String [ 0 ] , selectValuesMeta . getSelectName ( ) )
assertThat ( kyotoDb . get ( key ) , is ( new byte [ ] { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 10 , 0 , 0 , 0 , 23 , 72 , 118 , - 25 , - 1 } ) )
Assert . assertEquals ( PROP_VAL , _context . getProperty ( PROP_NAME ) . getValue ( ) )
Assert . assertEquals ( PROP_VAL , _context . getProperty ( PROP_NAME ) . getValue ( ) )
assertEquals ( ip . getMultipleOf ( ) , new BigDecimal ( "3.0" ) )
assertEquals ( ip . getMultipleOf ( ) , new BigDecimal ( "3.0" ) )
assertEquals ( udids [ 0 ] , device . getUdid ( ) )
assertEquals ( i + 1 , counter . count )
assertEquals ( i + 1 , counter . count )
Assert . assertEquals ( 1 , typedProperties . get ( "testKey" ) )
Assert . assertEquals ( 1 , typedProperties . get ( "testKey" ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
Assert . assertTrue ( "The following banned modules were provisioned " + results . toString ( ) , results . isEmpty ( ) )
assertEquals ( Sampler . DEFAULT_SIZE , s . getSize ( ) )
Assertions . assertEquals ( expectedString , UrlStringLookup . INSTANCE . lookup ( "UTF-8:" + uri . toString ( ) ) )
Assert . assertEquals ( "{\"key\":\"value\"}" , new String ( output ) )
assertFalse ( t . failed )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertEquals ( "Bearer eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.e30." , unit . get ( ) )
assertThat ( getInfo ( ) . getMaximumWeight ( ) ) . isEqualTo ( MAX_VALUE )
assertFalse ( recorder . wasClosedInBackgroundResourceReleaserThread ( ) )
Assertions . assertEquals ( "png" , BasicAttachmentProvider . getFileExtension ( s ) )
Assertions . assertEquals ( "png" , BasicAttachmentProvider . getFileExtension ( s ) )
assertEquals ( 0 , OclBags . excluding ( col1 , null ) . size ( ) )
assertThat ( buildRule . getLog ( ) , containsString ( filename + " does not exist" ) )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertThat ( result ) . isEqualTo ( DUMMY_NAME . toString ( ) )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( "1-SNAPSHOT" , result )
assertEquals ( 2 , listJobsResult . size ( ) )
assertEquals ( HASH_ERR , Blake2_DIGEST_NULL , HEX . encode ( result ) )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertEquals ( bigInteger , decoded )
assertEquals ( "Invalid signature marker: 1" , ex . getMessage ( ) )
assertThat ( getContextClassLoader ( ) , equalTo ( classLoader ) )
assertThat ( "Exception message" , e . getCause ( ) . getMessage ( ) , containsString ( "ConnectException: RetryBeanC Connect: 1" ) )
assertFalse ( iterator :: hasNext )
assertThat ( e . getMessage ( ) , containsString ( "Unsupported browser type: netscape" ) )
Assert . assertTrue ( verifyUtil . isPassed ( ) , verifyUtil . getFailureMessage ( ) )
assertThat ( response . code ( ) , equalTo ( 200 ) )
assertThat ( filteredRequest . getValue ( ) . getRemoteAddr ( ) ) . isEqualTo ( "1.2.3.4" )
Assertions . assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
Assertions . assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
Assertions . assertThat ( mockUtil . getMockName ( mock ) . toString ( ) ) . isEqualTo ( "newName" )
assertEquals ( dir . name ( ) , dir == UP || dir == DOWN , AxisDirections . isVertical ( dir ) )
Assert . assertEquals ( o . getOpt ( ) , sortOrder . get ( i ) )
assertThat ( a . toString ( ) ) . isEqualTo ( "delicious taco" )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( createString ( BUFFER_SIZE - 3 ) + "oob" , wrapped . toString ( ) )
assertEquals ( createString ( BUFFER_SIZE - 3 ) + "oob" , wrapped . toString ( ) )
assertEquals ( ",ACTIVE,,,,,,,,,,,false,false,,,,,,,,,,,,,,,,,\n" , out . toString ( ) )
assertEquals ( "https" , protocol )
assertEquals ( URI . create ( "http://amazon.com" ) , uri )
assertEquals ( "{\"\":\"test\"}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
Assert . assertEquals ( actualResult , value )
assertEquals ( 3 , list . size ( ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( servers . size ( ) , is ( vals . size ( ) ) )
assertEquals ( field . getGenericType ( ) , target . getGenericType ( ) , field . toString ( ) )
assertEquals ( 3 , class1 . testBagAsBag ( bag01 ) . size ( ) )
assertThat ( ChannelDraftBuilder . of ( "key" ) . build ( ) . getKey ( ) ) . isEqualTo ( "key" )
assertNull ( entity )
assertEquals ( "PROD_TYPE" , ModisFileReader . getTypeString ( null , product ) )
assertEquals ( "" , event . getField ( EventFieldName . COMMENT ) . getValue ( ) )
assertEquals ( "Page size must be greater than 0." , e . getMessage ( ) )
assertNull ( retrievedPolicy )
assertNull ( retrievedUser1 )
assertNull ( group1 )
assertFalse ( isWorkItemSet )
Assert . assertEquals ( message , e . getMessage ( ) )
assertNull ( entity )
Assert . assertNull ( keyStoreProvider )
Assert . assertEquals ( HttpResponseCodes . SC_SERVICE_UNAVAILABLE , response . getStatus ( ) )
assertNotNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
assertNull ( service . getJwt ( TEST_REQUEST_IDENTIFIER ) )
Assert . assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
Assert . assertEquals ( EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
Assert . assertEquals ( NON_EMPTY_FINGERPRINT , authorizer . getFingerprint ( ) )
assertNotNull ( request )
assertEquals ( domain , cmd . electNewMaster ( ) )
Assert . assertTrue ( application . getVitamServer ( ) . isStarted ( ) )
Assert . assertEquals ( expectedId , loadSpec . getClass ( ) . getAnnotation ( JsonTypeName . class ) . value ( ) )
Assert . assertEquals ( expectedId , loadSpec . getClass ( ) . getAnnotation ( JsonTypeName . class ) . value ( ) )
assertNull ( networkDeviceHelper . getNicByPciDevice ( pciDevice , devices ) )
assertThat ( request . getGoals ( ) ) . isEqualTo ( customGoals )
assertEquals ( "ArrayList[{1,2}]" , logAdapter . asString ( collection ) )
assertEquals ( "" , s )
Assert . assertEquals ( "abc" , writer . toString ( ) )
Assert . assertEquals ( expected , getString ( writer ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( bytes [ i ] , bytesIn [ i ] )
assertEquals ( "C3S FRP Level 3 products" , plugIn . getDescription ( null ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
Assert . assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertEquals ( CidrValidation . ILLEGAL_ARGUMENT_EXCEPTION_MESSAGE , e . getMessage ( ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( System . getProperty ( "user.home" ) + File . separator , cache1 . getPath ( ) )
assertNotNull ( store . get ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertThat ( opt . htmlReport ( ) ) . isEqualTo ( "myreport" )
assertEquals ( "/p1/p2.jpg" , instance . getPath ( ) )
Assert . assertEquals ( "MyEvent" , event . getId ( ) )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertEquals ( "Federation" , testRealm . getAuthType ( ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertThat ( e . getMessage ( ) , containsString ( "no refspecs provided" ) )
assertEquals ( OsFamily . UBUNTU , osFamily ( ) . apply ( "Ubuntu Linux os" ) )
Assert . assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
Assert . assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
Assert . assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
Assert . assertEquals ( "krakentaxid129951NC_001405" , FilenameUtil . stripInvalidFilenameCharacters ( "kraken:taxid|129951|NC_001405" ) )
assertEquals ( "____Content__Conclusion__" , laundry )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
