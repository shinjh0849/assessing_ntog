Assertions . assertEquals ( tokenStr , token . toString ( ) )
Assertions . assertEquals ( authenticator , aURL . getAuthenticator ( ) )
Assert . assertEquals ( System . getProperty ( "user.name" ) , authenticator . getUserName ( ) )
Assert . assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertNull ( handler . authenticate ( request , response ) )
Assertions . assertEquals ( PseudoAuthenticationHandler . TYPE , handler . getType ( ) )
Assertions . assertEquals ( AuthenticationToken . ANONYMOUS , token )
Assertions . assertNull ( token )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Exception should have been thrown" )
Assertions . assertEquals ( t , e )
assertEquals ( "" , sw . toString ( ) )
Assert . assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( expectedOutput , conf . toString ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( value , wrapped . get ( key ) )
Assert . assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
Assert . assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . assertEquals ( 0 , filteredPaths . length )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . assertEquals ( 0 , filteredPaths . length )
assertArrayEquals ( data , bb )
assertArrayEquals ( data , bb )
assertEquals ( "/foo/bar/baz" , output )
assertArrayEquals ( data , bb )
assertEquals ( "otherUser" , newFc . getUgi ( ) . getUserName ( ) )
Assert . assertEquals ( fc1ModificationTime , fc2ModificationTime )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . fail ( "Should throw FileNotFoundException" )
assertTrue ( "FileSystem.exists() fails for root" , fs . exists ( path ( "/" ) ) )
assertTrue ( localFs . mkdirs ( dstPath ) )
assertThat ( StringUtils . wrap ( "asd" , "wrapper" ) ) . isEqualTo ( "wrapperasdwrapper" )
assertEquals ( expected , contentSummary . toString ( false ) )
assertEquals ( expected , quotaUsage . toString ( true ) )
assertEquals ( expected , contentSummary . toString ( false ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
Assert . assertNull ( Util . getCatalogFromSpec ( "repo" ) )
assertThat ( cronExpression . getCronExpression ( ) ) . isEqualTo ( newExpression . getCronExpression ( ) )
assertNotSame ( fs1 , fs2 )
assertNull ( value )
assertEquals ( "application/netcdf" , contentType )
Assert . assertTrue ( ExceptionUtil . transform ( new Error ( "Error" ) ) . startsWith ( "java.lang.Error" ) )
assertEquals ( f . toURL ( ) , toURL ( f ) )
assertTrue ( Paths . get ( p . toUri ( ) ) . equals ( p . toAbsolutePath ( ) ) )
assertNotNull ( pathToTest . getFileSystem ( ) . getSeparator ( ) )
assertEquals ( EXPECTED_DATA_LAYER_STRING , testedObject . getExpected ( VALID_FILE_PATH ) )
assertNull ( uri )
assertNull ( uri )
assertNull ( uri )
assertEquals ( datasetSchema , rt . getSchema ( ) )
assertEquals ( "someInterface" , name )
assertTrue ( errContent . toString ( "UTF-8" ) . startsWith ( "Required option '--sql-file' is missing" ) )
Assert . assertEquals ( null , harfs . getFileChecksum ( p ) )
assertEquals ( "application/vnd.iso.19139+xml" , type )
Assert . fail ( )
Assertions . assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertNotNull ( client )
assertEquals ( home , fsHome )
assertEquals ( 1 , fileSchemeCount )
assertNotNull ( bis . getFileDescriptor ( ) )
assertTrue ( stats != null && stats . length == 1 && stats [ 0 ] == stat )
assertEquals ( header , helpUrlPayload . getHeader ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertEquals ( accessTime1 , accessTime2 )
assertEquals ( accessTime1 , accessTime2 )
assertEquals ( "root listing" , 0 , rootls . length )
assertTrue ( fs . mkdirs ( path ) )
assertTrue ( "Premature EOF" , instream . read ( ) != - 1 )
assertTrue ( GZipFiles . isGzip ( getFile ( "org/apache/pulsar/io/file/validGzip.gz" ) ) )
assertEquals ( path . makeQualified ( fs ) , status . getPath ( ) )
Assert . assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
assertEquals ( value , wrapped . get ( key ) )
assertThat ( toCamelCaseBySplitting ( "THIS STRING SHOULD BE IN CAMEL CASE" , " " ) ) . isEqualTo ( "thisStringShouldBeInCamelCase" )
assertEquals ( stat , fstat )
assertThat ( commandInfo . getCommandName ( ) ) . isEqualTo ( expected )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( criteria , filter . getCriteria ( ) )
assertEquals ( expected , actual )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . assertNotNull ( dbVXString )
assertThat ( new MySQLPacketPayload ( byteBuf , StandardCharsets . UTF_8 ) . readStringNul ( ) , is ( "" ) )
assertEquals ( 255 , s . available ( ) )
assertEquals ( Collections . < Object > emptyList ( ) , expr . getParameterValue ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( new Vector3i ( 2 , 6 , 14 ) , v )
assertThat ( function . andThen ( Object :: toString ) . apply ( "x" ) ) . isEqualTo ( "1" )
assertNotNull ( f . cause ( ) )
Assert . assertEquals ( this . expectedInputSplit , kafkaInputSplit )
Assert . assertEquals ( this . entryUri , this . entry . getUri ( ) )
assertEquals ( "H$$4}B" , seg . toString ( ) )
assertEquals ( autoirityKeyIdentifier , clonedCertificate . getAuthorityKeyIdentifier ( ) )
assertThat ( interactionEvent . getMemberNaturalName ( ) , equalTo ( "Cancel Order" ) )
assertNull ( serviceName )
assertEquals ( STRING , s )
assertEquals ( "BLOOB" , ShpFileType . DBF . toBase ( file ) )
Assert . assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( home , fsHome )
Assert . fail ( "Should throw FileNotFoundException" )
assertTrue ( ffe . getCause ( ) . getMessage ( ) . contains ( "Access denied" ) )
assertEquals ( hash ( buffer . getLong ( 0 ) ) , hash ( buffer , 0 , SizeOf . SIZE_OF_LONG ) )
assertTrue ( ioe . getCause ( ) instanceof IllegalStateException )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertNull ( reader . get ( 0 , new RandomDatum ( ) ) )
assertNotNull ( "testDeleteFile error !!!" , writer )
assertEquals ( "two arrays are not equal" , array [ i ] , claimedArray [ i ] )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( "/tmp/abc.txt" , returnedEx . getPath ( ) . toString ( ) )
assertEquals ( new IntWritable ( ( SIZE - 1 ) / 2 ) , reader . midKey ( ) )
assertEquals ( "{5=value}" , map . toString ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( s , new String ( dob . getData ( ) , 2 , dob . getLength ( ) - 2 , "UTF-8" ) )
assertNotNull ( extractor . getText ( ) )
assertTrue ( "Got mismatched ZlibCompressor" , c2 != CodecPool . getCompressor ( gzc ) )
assertThat ( decompressorStream . read ( ) , is ( ( int ) TEST_STRING . charAt ( i ) ) )
assertEquals ( "foo" , Utils . inputStreamToString ( Utils . stringToInputStream ( "foo" ) ) )
assertNull ( coders )
Assert . assertEquals ( scanner . endLocation , locX )
Assert . fail ( "Cannot read before closing the writer." )
Assert . fail ( "Cannot create metablocks with the same name." )
Assert . fail ( "Cannot add key/value after start adding meta blocks." )
Assert . fail ( "Error on handling invalid compression codecs." )
Assert . fail ( "Error on handling empty files." )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Error on handling negative offset." )
Assert . fail ( "Error on handling negative offset." )
Assert . fail ( "Error on handling negative length." )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Cannot create metablocks with the same name." )
Assert . assertEquals ( Utils . readVLong ( in ) , data [ i ] )
assertTrue ( e . getCause ( ) instanceof PathIOException )
assertEquals ( "impl1" , e . getMessage ( ) )
Assert . fail ( "Exception should not be thrown: " + e )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertTrue ( isDuplicate ( singletonList ( mockObject ( "qwerty" ) ) , mockObject ( "qwerty" ) ) )
assertNull ( service . poll ( ) )
assertNull ( preparedStatement )
assertEquals ( username , identity )
assertEquals ( datum_morgen , morgen )
assertFalse ( conf . getTimestampField ( ) . isPresent ( ) )
Assert . assertEquals ( new String ( content ) , new String ( read ) )
assertEquals ( result [ i ] , testData [ i ] )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( 100 , startLevel )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertThat ( host , is ( DNS . getDefaultHost ( DEFAULT ) ) )
assertThat ( host , is ( DNS . getDefaultHost ( getLoopbackInterface ( ) ) ) )
assertEquals ( null , ex . getMessage ( ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertEquals ( defaultAddr . trim ( ) , NetUtils . getHostPortString ( addr ) )
assertEquals ( value , wrapped . get ( key ) )
assertNull ( result )
assertThat ( typeConverter . convert ( null , domainField , null ) ) . isNull ( )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertTrue ( caughtException )
assertTrue ( module . logout ( ) )
Assert . assertEquals ( this . expectedInputSplit , kafkaInputSplit )
assertNull ( ugi )
assertTrue ( "JSONObject was not created" , obj == null )
assertFalse ( ex . getMessage ( ) . contains ( "cause" ) )
assertNull ( svc . getCloseable ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . assertNull ( yamlDataObject )
assertEquals ( i , fromList )
Assert . assertNull ( obj )
assertThatPath ( "/test" ) . containsBytes ( bytes )
assertNotNull ( result )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . assertTrue ( new File ( jar ) . exists ( ) )
assertEquals ( "{\"foo\":\"foo1\",\"bar\":\"bar1\"}" , json )
Assert . assertEquals ( TEST_JSON , output . toJson ( ) )
assertTrue ( Arrays . equals ( uuid , header . getClientId ( ) . toByteArray ( ) ) )
assertEquals ( NoSuchMethodException . class , rte . getCause ( ) . getClass ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertEquals ( testDate , UTCDateOnlyField . parse ( ( DATE_STR . getBytes ( ) ) ) )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertNotNull ( "testDynamicBloomFilter error " , filter . toString ( ) )
. forEach ( i -> assertFalse ( i . toString ( ) , i . aborted ) )
assertNull ( state )
Assert . assertEquals ( "test" , response . getSysUrl ( ) )
Assert . assertEquals ( "a" , s )
assertThat ( ioUtils . getCanonicalPath ( file ) , equalTo ( file . getCanonicalPath ( ) ) )
assertEquals ( count , facet . getCount ( ) )
assertEquals ( "" , string0 )
assertNotNull ( "Unset: " + Environment . JAAS_CONF_KEY , confFilename )
assertEquals ( "wrong name" , "26.172.in-addr.arpa." , name . toString ( ) )
assertEquals ( 0 , out . length )
assertEquals ( 0 , count )
Assert . fail ( "Did not renew lease at all!" )
assertEquals ( e , exc )
Assert . assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
Assertions . assertEquals ( RestConst . REST , instance . getName ( ) )
assertTrue ( siteFile . mkdir ( ) )
assertEquals ( "foo" , runCallable ( ( ) -> privateClassMethod ( ( ) -> "foo" ) ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( 1 , result )
assertThat ( Datastore . delegate ( ) , is ( sameInstance ( Datastore . delegate ( ) ) ) )
assertEquals ( "The number of items must be six." , 6 , numOfItems )
assertThat ( translator . getAlias ( ) , is ( ALIAS ) )
Assert . assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
Assert . assertEquals ( status , Status . ACTIVE )
assertTrue ( errContent . toString ( "UTF-8" ) . startsWith ( "Required option '--sql-file' is missing" ) )
Assert . assertTrue ( accessDenied )
assertTrue ( allowed )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
Assert . assertTrue ( new File ( uniqueFile ) . exists ( ) )
assertTrue ( fs . mkdirs ( testFolder ) )
assertEquals ( fn . apply ( "foo" ) , md5 ( ) . hashString ( "foo" , UTF_8 ) . asBytes ( ) )
assertNull ( result )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertTrue ( resultMap . isEmpty ( ) )
assertThat ( invocation . toString ( ) , endsWith ( "oneArray(null);" ) )
assertThat ( methodName . toString ( ) ) . isEqualTo ( "public void org.camunda.bpm.engine.impl.test.TestHelperTest$SomeTestClass.testSomethingWithPublicAccessor()" )
assertThat ( invocation . toString ( ) , endsWith ( "oneArray(null);" ) )
Assert . assertEquals ( 1 , fileWriteOutBytes . size ( ) )
assertEquals ( "\"Foo\",,\"Bar\",\"baz\"\n" , result )
assertEquals ( message , new String ( buffer ) )
assertFalse ( abortResult )
assertThat ( registry . getCluster ( ) , equalTo ( "cluster" ) )
Assert . assertTrue ( accessDenied )
assertEquals ( "DFSAdmin should return -1" , - 1 , exitCode )
assertThat ( e . getMessage ( ) , is ( "Specified repository is missing" ) )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertEquals ( "\"gamma\";\"beta\";\"alpha\"\r\n" , writer . getBuffer ( ) . toString ( ) )
assertNull ( classUnderTest . writeToString ( null ) )
assertEquals ( '7' , in . read ( ) )
assertNull ( array )
assertEquals ( Formatting . nl ( ) + Formatting . nl ( ) , Formatting . dnl ( ) )
assertEquals ( result [ i ] , testData [ i ] )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
Assert . assertNull ( input . getAnummer ( ) )
assertTrue ( fs . mkdirs ( path ) )
assertTrue ( e . getMessage ( ) . contains ( "] not on impl " ) )
assertEquals ( 0L , currentFileLength )
Assert . fail ( "Should throw FileNotFoundException" )
assertNotNull ( pair . getMakerFee ( ) )
Assert . assertEquals ( "TileDecompressor(0,null,0)" , toString )
assertEquals ( "root listing" , 0 , rootls . length )
assertThat ( taskModel ( "" ) . getChildren ( ) , is ( Collections . < Content > emptyList ( ) ) )
assertEquals ( b , b2 )
assertEquals ( "Hello! World" , appender . getOutput ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( AlosAV2Constants . PROCESSING_1B , metadata . getProcessingLevel ( ) )
assertNotNull ( u )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
Assert . assertEquals ( "A cada segundo" , CronExpressionDescriptor . getDescription ( "* * * * * *" , Options . twentyFourHour ( ) , PORTUGUESE ) )
assertEquals ( "2011-11-29T22:05:15.123" , buff . toString ( ) )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertEquals ( 0 , array . length )
assertThat ( writer . get ( ) , is ( "2019-01-01 00:00:00" ) )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertThat ( fileArgumentCaptor . getValue ( ) . length ( ) ) . isEqualTo ( 0 )
assertEquals ( Long . MIN_VALUE , value )
assertTrue ( entities . size ( ) == 5 && entities . get ( 0 ) . getId ( ) != 0 )
assertEquals ( "The source dataset has 0 partition to snapshot." , thrown . getMessage ( ) )
assertThat ( hostname , not ( DUMMY_HOSTNAME ) )
assertTrue ( text . contains ( Integer . toString ( VALUES ) ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( record , result )
assertEquals ( "ok" , IO . slurp ( conn . getInputStream ( ) ) )
Assert . assertNull ( manager )
assertThat ( descriptor . name ( ) ) . isEqualTo ( "Analyzer for \"php.ini\" files" )
assertEquals ( "" , result )
assertNotNull ( result )
assertThat ( response . status ( ) , is ( OK ) )
assertTrue ( uriA == uriB )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertEquals ( pos . getIndex ( ) , 0 )
Assert . assertTrue ( failed )
assertEquals ( 0 , result )
Assert . assertEquals ( 1 , visitFileCalled [ 0 ] )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
assertThat ( get ( "https://google.com" ) . blockingGet ( ) . code ( ) ) . isEqualTo ( 200 )
assertNotNull ( build )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( "error.changePassword" , e . getMessageKey ( ) )
assertThat ( holder . get ( ) , is ( message ) )
assertTrue ( true )
assertEquals ( result [ i ] , testData [ i ] )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Exception should have been thrown" )
Assert . assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
Assert . assertTrue ( new File ( uniqueFile ) . exists ( ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( adaptPoi ( getCellForCoordinate ( coordinate ( A , 1 ) , modified . workbook ( ) ) ) , is ( instanceOf ( BlankCell . class ) ) )
assertFalse ( cluster . getFileSystem ( ) . delete ( new Path ( "/" ) , true ) )
Assert . assertTrue ( accessDenied )
assertTrue ( error )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
Assert . fail ( "No exception was thrown" )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertThat ( args . text ( ) ) . isEqualTo ( "" )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( VarInt . sizeOf ( - 1 ) , new VarInt ( - 1 ) . encode ( ) . length )
assertEquals ( "Minhash MR Job failed for " + HashType . LINEAR , 0 , ret )
assertTrue ( runTool ( conf , args , true ) . equals ( "myval\n" ) )
assertEquals ( "Minhash MR Job failed for " + HashType . LINEAR , 0 , ret )
Assert . assertArrayEquals ( destArray , origin )
assertEquals ( "" , output )
assertEquals ( "" , output )
assertNull ( objSet . getElement ( new TestObject ( "not in set" ) ) )
assertEquals ( TEST_MD5 , computedDigest )
assertThat ( supplier . get ( ) , equalTo ( Optional . < AccessToken > absent ( ) ) )
Assert . assertArrayEquals ( XAttrCodec . decodeValue ( "0x313131" ) , value )
Assert . assertNull ( webHdfs . getDelegationToken ( null ) )
Assert . assertNull ( webHdfs . getDelegationToken ( null ) )
Assert . fail ( "No exception was thrown" )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
Assert . fail ( "Exception should have been thrown" )
assertTrue ( exists ( 1 ) )
assertNotNull ( basic )
assertNotNull ( basic )
assertNotNull ( basic )
assertNotNull ( obj . getValue ( ) )
assertNotNull ( obj . getValue ( ) )
assertNotNull ( obj . getValue ( ) )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
Assert . assertEquals ( p . getXAttrName ( ) , "user.a1" )
assertEquals ( "Some text" , new Immutable18NModel ( new NonI18NModel ( "Some text" ) ) . getValue ( null ) )
assertEquals ( value , wrapped . get ( key ) )
assertNotEquals ( null , counters )
assertNotEquals ( null , counters )
Assert . assertEquals ( System . getProperty ( "user.name" ) , job . getUserName ( ) )
assertEquals ( Apps . toString ( ctx . appID ) , controller . get ( APP_ID , "" ) )
assertEquals ( "[\n" + "    {\"_id\": 1},\n" + "    {\"_id\": 2}\n" + "]" , array . toString ( 4 ) )
assertEquals ( "root listing" , 0 , rootls . length )
assertNotNull ( params )
assertEquals ( value , wrapped . get ( key ) )
assertNull ( jobConf . get ( DBConfiguration . PASSWORD_PROPERTY , null ) )
assertEquals ( e . getMessage ( ) , "Missing parameter, 'client_id'" )
assertEquals ( "test" , ioe . getMessage ( ) )
assertTrue ( re . getCause ( ) instanceof IOException )
Assert . assertNull ( PartitionerCache . getCategory ( conf , new Text ( "table1" ) ) )
assertNull ( sc . getOutputPath ( ) )
assertNull ( sc . getOutputPath ( ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( 0 , result . length )
assertEquals ( procStore . getFileSystem ( ) , procStore . getWalArchiveDir ( ) . getFileSystem ( conf ) )
Assert . assertNotNull ( lfs )
assertEquals ( "Exit code should be 0 but was: " + exitCode , 0 , exitCode )
assertEquals ( Apps . toString ( ctx . appID ) , controller . get ( APP_ID , "" ) )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( i , ifis . read ( ) )
assertEquals ( "Dummy Exception" , ioe . getMessage ( ) )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
this . assertEquals ( expected , readOutputFile ( conf ) )
this . assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertEquals ( "dist job res is not 0:" , 0 , res )
Assert . assertTrue ( "ShuffleHandler should use a random chosen port" , shuffleHandler . getPort ( ) > 0 )
assertTrue ( job . waitForCompletion ( true ) )
assertTrue ( result )
Assert . assertEquals ( "Wrong class" , HdfsMrsImageWriter . class , provider . getMrsTileWriter ( context ) . getClass ( ) )
assertEquals ( orig , deser )
assertEquals ( orig , deser )
assertNotNull ( items )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertEquals ( propertyClass , TSnowflakeOutputProperties . class )
assertEquals ( BigDecimal . ZERO , emptyBigDec )
assertEquals ( "A" , out )
assertEquals ( "abc" , out )
assertEquals ( "big str" , out )
this . assertEquals ( expected , readOutputFile ( conf ) )
assertNull ( array )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertNotNull ( result )
Assert . assertTrue ( "RunJar failed" , outFile . exists ( ) )
Assert . assertEquals ( null , handler . onCall ( CombinerHandler . COMBINE , null ) )
Assert . assertEquals ( null , handler . onCall ( new Command ( - 1 ) , null ) )
Assert . assertEquals ( null , handler . onCall ( new Command ( - 1 ) , null ) )
assertEquals ( EXPECTED_DOCS_COLLECTION_SIZE , docsCount )
assertEquals ( mean , wr . read ( INPUT ) , 0.0 )
assertEquals ( stddev , wr . read ( INPUT ) , 0.0 )
assertEquals ( testString + "\n" , result )
assertNotNull ( disk . getName ( ) )
Assert . assertEquals ( path . toString ( ) , newPath . toString ( ) )
assertEquals ( text , result )
assertEquals ( SOME_VALUE , v )
assertTrue ( "not found: " + tmp , tmp . exists ( ) )
assertTrue ( getFileSystem ( ) . mkdirs ( pathABC ) )
assertTrue ( getFileSystem ( ) . mkdirs ( pathABC ) )
assertEquals ( value , wrapped . get ( key ) )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( "no" , this . render ( null ) , "Null should be interpreted as FALSE" )
assertThat ( new URL ( user . getServer ( ) ) . getHost ( ) ) . isEqualTo ( SERVER )
assertEquals ( structLikeClass . getFoo ( ) , structLikeClass . getValue ( "get_foo" ) )
MatcherAssert . assertThat ( factory . getByIface ( List . class ) , is ( notNullValue ( ) ) )
assertEquals ( AuthenticationTokenIdentifier . TOKEN_KIND , token . getKind ( ) )
assertEquals ( "three" , lastElement )
Assert . assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
assertEquals ( "Stream statistics were not merged" , 26 , read . value ( ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
assertThat ( ghfs . getUri ( ) ) . isEqualTo ( initUri . resolve ( "/" ) )
Assert . assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
Assert . assertFalse ( ResourceUtils . isFileReadable ( path . toString ( ) ) )
assertFalse ( Arrays . stream ( fs . listStatus ( basePath ) ) . anyMatch ( file -> file . getPath ( ) . getName ( ) . equalsIgnoreCase ( markerFileName ) ) )
assertNotNull ( HFileArchiveUtil . getArchivePath ( conf ) )
Assert . assertEquals ( "Children of resource property element must be XML elements" , e . getMessage ( ) )
assertThat ( servletContext . getRealPath ( path ) , is ( realPath ) )
assertTrue ( fs . exists ( new Path ( "testFolder3/a/input/file" ) ) )
assertTrue ( fs . exists ( srcFilePath ) )
assertTrue ( fs . exists ( srcFilePath ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
assertEquals ( "test123" , password )
assertEquals ( "root listing" , 0 , rootls . length )
assertEquals ( TEST_BYTE , inputStream . read ( ) )
assertArrayEquals ( readBuffer , writeBuffer )
assertEquals ( "root listing" , 0 , rootls . length )
assertEquals ( "length of test files" , 1 , testFiles . length )
Assert . assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
assertArrayEquals ( new AclEntry [ ] { aclEntry ( ACCESS , GROUP , READ_EXECUTE ) } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( src , dst )
Assert . assertTrue ( fs . exists ( target ) )
Assert . fail ( "build listing failure" )
Assert . fail ( "build listing failure" )
Assert . fail ( "build listing failure" )
Assert . fail ( "build listing failure" )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( options . getStorageClass ( ) , is ( storageClass . toString ( ) ) )
Assert . assertEquals ( list , content )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
assertEquals ( value , wrapped . get ( key ) )
Assert . assertEquals ( DistCpUtils . getRelativePath ( root , child ) , "/a" )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( create ( "abc" , DESC ) , new SortParser ( "-abc" ) . parse ( ) )
Assert . assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
Assert . assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
Assert . assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
Assert . assertEquals ( "\"Hello Amelia\"" , read ( url . openStream ( ) ) )
assertNotNull ( morphline )
assertEquals ( style , event . getVisualStyleAdded ( ) )
Assert . assertTrue ( SingleTask . first )
assertEquals ( outputExpect , output )
assertEquals ( outputExpect , output )
Assert . assertEquals ( expected , emailService . getOrder ( ) )
Assert . assertEquals ( expected , emailService . getOrder ( ) )
assertEquals ( outputExpect , output )
assertEquals ( tbw , readTbw )
assertEquals ( 0 , result . size ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> doReturn ( 100 ) . when ( spyList ) . size ( ) )
assertEquals ( result , string )
assertEquals ( expectedItem , item )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
assertThat ( actual . getId ( ) ) . isEqualTo ( expected . getId ( ) )
Assertions . assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertEquals ( value , wrapped . get ( key ) )
Assertions . assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
Assert . assertTrue ( result )
assertNotNull ( challenge )
Assert . assertNull ( part )
Assert . fail ( "Exception should have been thrown" )
Assert . assertEquals ( token , cluster . createFakeToken ( ) )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertThat ( lognit . welcome ( ) ) . isEqualTo ( welcome )
Assert . assertEquals ( null , harfs . getFileChecksum ( p ) )
Assert . assertTrue ( "ShuffleHandler should use a random chosen port" , shuffleHandler . getPort ( ) > 0 )
assertEquals ( 0 , rc )
assertEquals ( 0 , rc )
Assert . assertTrue ( accessDenied )
Assert . assertTrue ( accessDenied )
Assert . assertTrue ( accessDenied )
Assert . assertTrue ( accessDenied )
Assert . assertTrue ( accessDenied )
Assert . assertTrue ( accessDenied )
Assert . assertNotSame ( "should return non-zero exit code." , 0 , exitCode )
assertEquals ( 0 , result )
Assert . assertEquals ( 0 , exitCode )
Assert . assertNotNull ( ctx . getResource ( ) )
Assert . assertEquals ( ex . getClass ( ) , pb . deSerialize ( ) . getClass ( ) )
Assert . fail ( "Exception is not expected" )
Assert . assertEquals ( "Returned generic diagnosis has wrong id" , "code1" , genericDiagnosis . getId ( ) )
Assert . assertEquals ( "Returned generic diagnosis has wrong id" , "code1" , genericDiagnosis . getId ( ) )
assertNotNull ( PathUtils . getLastModifiedFileTime ( current ( ) . toUri ( ) . toURL ( ) ) )
assertEquals ( rfc1123text [ i ] , DateUtil . formatRfc1123Date ( timeStamps [ i ] . getTime ( ) ) )
assertEquals ( 32 , ArbitraryId . next ( ) . length ( ) )
assertEquals ( 50000 , port )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 5 , h . indents )
assertNotSame ( bar , injector . getInstance ( Bar . class ) )
Assert . assertEquals ( entry . getValue ( ) , uri )
Assert . assertNull ( manager )
assertEquals ( "JDBC" , result )
assertThat ( Rosetta . getMapper ( ) . valueToTree ( bean ) . get ( "annotatedField" ) ) . isEqualTo ( NullNode . getInstance ( ) )
assertThat ( RuntimeHintsPredicates . resource ( ) . forResource ( "my-resource.txt" ) ) . accepts ( hints )
assertEquals ( CONTENT_TYPE , request . getContentType ( ) )
Assert . assertEquals ( "sc05" , chosen . getId ( ) )
Assert . assertEquals ( "sc5" , chosen . getId ( ) )
Assert . assertNotNull ( channel )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
assertTrue ( splitRestriction instanceof NoRegionSplitRestriction )
Assert . assertNotNull ( channel )
Assert . assertEquals ( nodeHttpAddress , container . getNodeHttpAddress ( ) )
assertThat ( e . getMessage ( ) , is ( String . format ( EXPECTED_ERROR_MESSAGE , value ) ) )
assertThat ( e . getMessage ( ) , is ( "value must not be null!" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
assertThat ( bean . getName ( ) , equalTo ( "name" ) )
Assert . fail ( "Should fail because application is already killed" )
Assert . assertNotNull ( registerResponse )
assertEquals ( "user" , info . getUser ( ) )
assertEquals ( jwtSessionManager . getUser ( jwtToken ) , "testUser" )
assertTrue ( XsdIDValidator . validate ( "test" ) )
assertEquals ( "ArrayList[{1,2}]" , logAdapter . asString ( collection ) )
Assert . assertNull ( cGroupsCpuResourceHandler . postComplete ( mockContainerId ) )
assertTrue ( XsdIDValidator . validate ( "test" ) )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Should throw FileNotFoundException" )
Assert . fail ( "Should throw FileNotFoundException" )
assertTrue ( equal )
Assert . assertEquals ( "a" , row . get ( 0 ) )
Assert . assertTrue ( exception )
assertThat ( handler . execute ( ) , instanceOf ( UpdateResponseHeader . class ) )
assertThat ( new MapRandomizer ( keyRandomizer , valueRandomizer , 3 ) . getRandomValue ( ) ) . hasSize ( 3 )
assertTrue ( runtime instanceof DockerLinuxContainerRuntime )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a privileged launch container failure." )
Assert . fail ( "Expected a privileged launch container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Expected a pid host disabled container failure." )
Assert . fail ( "Should throw FileNotFoundException" )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertEquals ( "exec" , dockerExecCommand . getCommandOption ( ) )
assertFalse ( spied . call ( ) )
assertEquals ( settings , expected )
Assert . assertEquals ( "Expected null result" , null , value )
assertEquals ( new File ( "dir" , "file" ) , PropertyConverter . toFile ( p ) )
assertEquals ( IPV4_ROUTES_IDENTIFIER , ribSupportTestImp . routesContainerIdentifier ( ) )
assertFalse ( isValid )
assertEquals ( "Move not supported" , ex . getMessage ( ) )
assertEquals ( "Move not supported" , ex . getMessage ( ) )
Assert . assertEquals ( NodeState . LOST , node . getState ( ) )
Assert . assertEquals ( NodeState . SHUTDOWN , node . getState ( ) )
Assert . fail ( "Exception should have been thrown" )
assertNotNull ( ni . getHealthReport ( ) )
Assert . assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
Assert . assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
Assert . assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
Assert . assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
assertThat ( actual . execute ( ) , is ( Collections . emptyList ( ) ) )
Assert . assertNotNull ( protoString )
Assert . fail ( "Exception should have been thrown" )
Assert . fail ( "Should throw FileNotFoundException" )
assertEquals ( 5 , FilterUtils . getUniqueElementMatchingPredicate_WithReduction ( getIntegers ( ) , IS_STRICTLY_GREATER_THAN4 ) )
Assert . assertEquals ( ContainerExitStatus . ABORTED , cd . getExitStatus ( ) )
Assert . assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
assertTrue ( "exception not thrown for null collection name" , failedAsExpected )
assertTrue ( found )
assertArrayEquals ( new byte [ 0 ] , out )
assertEquals ( expected [ index ++ ] , iterator . next ( ) . longValue ( ) )
assertEquals ( processInfo . getName ( ) , "aprocname" )
Assert . assertEquals ( "" , this . realiser . realise ( emptyClause ) . getRealisation ( ) )
assertNull ( th )
assertThat ( output ) . contains ( "Hello Gordon for 60 seconds" )
assertThat ( output ) . contains ( "Hello Gordon for 60 seconds" )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertEquals ( null , Styles . combine ( ) )
assertThat ( singleValuedParameter ( ) . toString ( ) , not ( equalTo ( Utils . defaultToString ( singleValuedParameter ( ) ) ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertTrue ( codes . add ( LongEncoding . encode ( i ) . toLowerCase ( ) ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertTrue ( result instanceof PoolingAsyncResponseConsumer )
assertTrue ( result instanceof PoolingAsyncResponseConsumer )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertThatNoException ( ) . isThrownBy ( ( ) -> asyncClient . getUsage ( request ) . join ( ) )
assertEquals ( "Applications" , c . get ( TITLE , "unknown" ) )
assertEquals ( "<memory:10, vCores:1>" , res . toString ( ) )
Assert . assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertNotNull ( response )
assertNotNull ( response )
assertEquals ( "" , string0 )
Assert . assertEquals ( BAD_REQUEST , response . getStatus ( ) )
Assert . assertEquals ( BAD_REQUEST , response . getStatus ( ) )
Assert . assertEquals ( BAD_REQUEST , response . getStatus ( ) )
Assert . assertNull ( response )
Assert . assertNull ( response )
Assert . assertNull ( response )
Assert . assertNull ( response )
Assert . assertNull ( response )
Assert . assertNull ( response )
assertThat ( function . apply ( Arrays . asList ( "Hello" , " " , "world!" ) ) , equalTo ( "Hello world!" ) )
assertNotNull ( value . getMuleContext ( ) )
assertThat ( PathUtil . toBucketName ( URI . create ( "s3://bucket/foo/bar" ) ) , is ( "bucket" ) )
assertEquals ( chatTlv , chat . toTlv ( ) )
assertEquals ( "aa" , StringUtils . removeWhitespace ( "\t\r\n    aa" ) )
assertFalse ( auxService . hasApplication ( appAttemptId . getApplicationId ( ) ) )
assertEquals ( "MondrianCatalogHelper.ERROR_0019 - Failed to flush schema schemaX" , e . getMessage ( ) )
assertEquals ( URI . create ( uri ) , Tools . uriWithTrailingSlash ( URI . create ( "http://example.com/api" ) ) )
assertEquals ( "admittedRelationships" , ProcedureRequestUtils . hasPossibleRequestKey ( "admittedrelationships" , Collections . singletonList ( "admittedRelationships" ) ) )
assertNull ( "result" , result )
