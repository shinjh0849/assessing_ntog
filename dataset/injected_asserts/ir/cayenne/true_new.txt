assertEquals ( "abc" , task . userName )
assertEquals ( "jdbc:///" , task . url )
assertNotNull ( getCdbImport ( "build-with-project.xml" ) . getCayenneProject ( ) )
assertTrue ( "Contains duplicate callback names." , hasNoDuplicates )
assertEquals ( fullyQualifiedType , importUtils . formatJavaType ( fullyQualifiedType ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "LastName" ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "varA" ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "abc_A" ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "abCDEF" ) )
assertNotNull ( action . getTemplate ( templateType ) )
assertNotNull ( action . getTemplate ( templateType ) )
assertEquals ( 2 , logs . size ( ) )
assertEquals ( "AES/CBC/PKCS5Padding" , f . transformation )
assertArrayEquals ( expectedOutput1 , output1 )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( positiveInt , converter . fromBytes ( converter . toBytes ( positiveInt ) ) )
assertNull ( e . encrypt ( encryptor , null ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( originalValue , converter . fromBytes ( converter . toBytes ( originalValue ) ) )
assertEquals ( Integer . valueOf ( 6 ) , new IntegerConverter ( ) . fromBytes ( new byte [ ] { 6 } ) )
assertEquals ( Short . valueOf ( ( short ) 6 ) , ShortConverter . INSTANCE . fromBytes ( new byte [ ] { 6 } ) )
assertEquals ( date ( "2015-01-07 11:00:02" ) , UtilDateConverter . INSTANCE . fromBytes ( new byte [ ] { 0 , 0 , 1 , 74 , - 60 , 13 , 31 , 80 } ) )
assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 5 , 3 , 1 } , output )
assertEquals ( 0 , mergerTokens . size ( ) )
assertEquals ( 0 , mergerTokens . size ( ) )
assertEquals ( 0 , dbMerger ( ) . createMergeTokens ( existing , db ) . size ( ) )
assertNotNull ( dbEntity )
assertNotNull ( dbEntity )
assertEquals ( expected , actual )
assertNotNull ( dbEntity )
assertNotNull ( dbEntity )
assertEquals ( "project" , NameBuilder . builder ( new DataChannelDescriptor ( ) ) . name ( ) )
assertEquals ( "xyzabc" , new PatternStemmer ( "^pre" , false ) . stem ( "xyzabc" ) )
assertTrue ( factory . createAdapter ( nodeDescriptor , dataSource ) instanceof AutoAdapter )
assertTrue ( i . getInstance ( DbImportAction . class ) instanceof DbImportAction )
assertNotNull ( ManyToManyCandidateEntity . build ( manyToManyEntity ) )
assertTrue ( "Store is not empty" , store . getDbEntities ( ) . isEmpty ( ) )
assertFalse ( "Store not empty" , store . getDbEntities ( ) . isEmpty ( ) )
assertNotNull ( emptyInjector )
assertNotNull ( service )
assertEquals ( "MockImplementation2Name" , service . getName ( ) )
assertEquals ( "altered_MyName" , service . getAlteredName ( ) )
assertEquals ( "Map element was not overridden in submodule" , ";a=abc" , service . getName ( ) )
assertEquals ( "Map element was not overridden in submodule" , ";a=abc" , service . getName ( ) )
assertEquals ( "E1:5" , handler . getStringId ( e1 ) )
assertEquals ( "E1:5" , handler . getStringId ( ObjectId . of ( "E1" , "ID" , 5 ) ) )
assertEquals ( ObjectId . of ( "E1" , key ) , decoded )
assertEquals ( "11" , document . getDocumentElement ( ) . getAttribute ( "project-version" ) )
assertEquals ( 1 , paints . size ( ) )
assertEquals ( 1 , paints . size ( ) )
assertNull ( o1 . getTargets ( ) . get ( "B" ) )
assertEquals ( 1 , artists . size ( ) )
assertNull ( p1 . getToPaintingInfo ( ) )
assertNull ( p2 . getToPaintingInfo ( ) )
assertNull ( src2 . getToOneToFK ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( Collections . singletonList ( 4L ) , context . performQuery ( query ) )
assertEquals ( 1 , results . size ( ) )
assertNull ( object . getObjectId ( ) )
assertEquals ( a1 , rezult . get ( 0 ) . getToArtist ( ) )
assertEquals ( 3 , artists . size ( ) )
assertNull ( o1 . getObjectContext ( ) )
assertTrue ( p1 . getToArtist ( ) . readNestedProperty ( "paintingArray" ) instanceof List < ? > )
assertEquals ( 1 , artist . getPaintingArray ( ) . size ( ) )
assertNull ( object2 . getToArtist ( ) )
assertEquals ( 0 , paints . size ( ) )
assertNull ( object )
assertEquals ( CayenneRuntimeException . getExceptionLabel ( ) + "abc" , ex . getMessage ( ) )
assertEquals ( "xaxbx" , ex . getUnlabeledMessage ( ) )
assertEquals ( CayenneRuntimeException . getExceptionLabel ( ) + "abc" , ex . getMessage ( ) )
assertEquals ( 11 , queriesCount )
assertEquals ( 2 , queriesCount )
assertEquals ( 2 , queriesCount )
assertEquals ( 2 , queriesCount )
assertEquals ( ft1 , ft5Persisted . getToFT1 ( ) )
assertEquals ( 1 , result . size ( ) )
assertArrayEquals ( expected , lazyData )
assertEquals ( author , song . getAuthors ( ) . iterator ( ) . next ( ) )
assertNotEquals ( ref , oid )
assertNotNull ( o )
assertNotEquals ( oid1 , oid2 )
assertNotEquals ( oid1 , oid2 )
assertEquals ( 2 , t2FK )
assertNull ( object . getObjectContext ( ) )
assertEquals ( 1 , queryCounter )
assertEquals ( "abc$.xyz$" , ExpressionFactory . pathExp ( "abc$.xyz$" ) . toString ( ) )
assertEquals ( "db:x$" , buffer . toString ( ) )
assertEquals ( 3 , objects2 . size ( ) )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( 4 , objects . size ( ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 2 , ps . size ( ) )
assertEquals ( 2 , ps . size ( ) )
assertEquals ( 2 , ps . size ( ) )
assertEquals ( 2000 , id . getIdSnapshot ( ) . get ( "PK_ATTRIBUTE" ) )
assertEquals ( 1 , e1 . getObjectContext ( ) . performQuery ( checkQ ) . size ( ) )
assertEquals ( 2 , e1 . getObjectContext ( ) . performQuery ( query ) . size ( ) )
assertEquals ( 2 , e1 . getObjectContext ( ) . performQuery ( query ) . size ( ) )
assertNull ( context . getUserProperty ( "ABC" ) )
assertNotNull ( objects )
assertEquals ( artist . getArtistName ( ) . trim ( ) , artist . getArtistName ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 2 , results . size ( ) )
assertEquals ( 7 , count )
assertEquals ( "X" , a1 . getArtistName ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , results . size ( ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 2 , managers . size ( ) )
assertEquals ( 4 , context . performQuery ( query ) . size ( ) )
assertEquals ( 4 , context . performQuery ( query ) . size ( ) )
assertNotNull ( deserializedContext . getEntityResolver ( ) )
assertNotSame ( a2 , a1 )
assertEquals ( 2 , ObjectSelect . query ( Painting . class ) . select ( context ) . size ( ) )
assertNull ( listener2 . getPublicCalledbackEntity ( ) )
assertNull ( d1 . getDataMap ( m1 . getName ( ) ) )
assertNotNull ( resolver )
assertNull ( node . getEntityResolver ( ) )
assertNull ( node . getAdapter ( ) )
assertNotNull ( dataStore )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertNotNull ( e )
assertEquals ( Enum1 . two , test . getEnumAttribute ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( 3 , allObjects . size ( ) )
assertEquals ( 1 , objects11 . size ( ) )
assertEquals ( 25 , list . size ( ) )
assertEquals ( 25 , list . size ( ) )
assertTrue ( result instanceof SimpleIdIncrementalFaultList )
assertTrue ( group . getGroupMembers ( ) . isEmpty ( ) )
queryBlocker . runWithQueriesBlocked ( ( ) -> assertEquals ( "AA" , note . getPerson ( ) . getName ( ) ) )
assertEquals ( 1 , addresses . size ( ) )
assertEquals ( 1 , addresses . size ( ) )
assertEquals ( parent2 , child . getParent ( ) )
assertTrue ( node . getSchemaUpdateStrategy ( ) instanceof TstSchemaUpdateStrategy )
assertEquals ( 1 , existingTables ( ) . size ( ) )
assertEquals ( 1 , existingTables ( ) . size ( ) )
assertTrue ( sorted . isEmpty ( ) )
assertEquals ( effectiveOpId1 , effectiveOpId2 )
assertEquals ( "abc" , column . getName ( ) )
assertEquals ( "abc" , statement . getSql ( ) )
assertEquals ( "A BC" , action . extractTemplateString ( ) )
assertEquals ( 21 , result . size ( ) )
assertTrue ( sql , sql . startsWith ( "SELECT DISTINCT " ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.ESTIMATED_PRICE < #bind($id0 'DECIMAL')" ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.ESTIMATED_PRICE <= #bind($id0 'DECIMAL')" ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.PAINTING_TITLE " + "NOT LIKE #bind('Stuff' 'VARCHAR')" ) )
assertEquals ( 3 , totalJoins )
assertEquals ( 4 , totalJoins )
assertEquals ( Boolean . class . getName ( ) , type . getClassName ( ) )
assertNotNull ( map . getType ( MockEnum . class ) )
assertNull ( map . createType ( Object . class . getName ( ) ) )
assertNull ( testRead . getDate ( ) )
assertNotNull ( converter1 )
assertNotNull ( converter3 )
assertNotNull ( converter4 )
assertEquals ( "Zx" , merged . getName ( ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertEquals ( "cayenne" , runtime . getDataDomain ( ) . getName ( ) )
assertEquals ( 100 , task . i . get ( ) )
assertNotNull ( c )
assertEquals ( str , adaptMySQL . createTable ( entity ) )
assertTrue ( len <= actualLen )
assertEquals ( "pk_test_entity" , pkGenerator . sequenceName ( entity ) )
assertEquals ( "custom_generator" , pkGenerator . sequenceName ( entity ) )
assertEquals ( "pk_test_entity" , pkGenerator . sequenceName ( entity ) )
assertNotNull ( parser )
assertEquals ( source , select . getSource ( ) )
assertNotNull ( select )
assertNotNull ( select )
assertEquals ( "x.y" , path . getAbsolutePath ( ) )
assertEquals ( s1 , s2 )
assertEquals ( artist . getPaintingArray ( ) . size ( ) , countExp . evaluate ( artist ) )
assertEquals ( Expression . GREATER_THAN , exp . getType ( ) )
assertEquals ( Expression . FALSE , exp . getType ( ) )
assertEquals ( Expression . NOT_IN , exp . getType ( ) )
assertEquals ( Expression . NOT_LIKE_IGNORE_CASE , exp . getType ( ) )
assertEquals ( "(a = 1) and (b = 2) and (c = \"C\")" , e . toString ( ) )
assertEquals ( "a = 1" , e . toString ( ) )
assertEquals ( "(a = 1) and (b = 2) and (c = \"C\")" , e . toString ( ) )
assertEquals ( "a = 1" , e . toString ( ) )
assertNull ( e )
assertEquals ( "(a = 1) or (b = 2) or (c = \"C\")" , e . toString ( ) )
assertEquals ( "(a = 1) or (b = 2) or (c = \"C\")" , e . toString ( ) )
assertEquals ( "abc" , e1 . getOperand ( 1 ) )
assertEquals ( Boolean . TRUE , result )
assertEquals ( "k1 in (\"a\", \"b\")" , e . toString ( ) )
assertEquals ( "db:abc.xyz" , ExpressionFactory . dbPathExp ( "abc.xyz" ) . toString ( ) )
assertNull ( e4 . first ( paintingList ) )
assertTrue ( "Less than 'NULL' never matches anything" , artists . isEmpty ( ) )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( "abc" , p . getName ( ) )
assertEquals ( "x.consignment.parts = 123" , e . toEJBQL ( "x" ) )
assertEquals ( "x.consignment.parts >= 3.145" , e . toEJBQL ( "x" ) )
assertEquals ( "x.artistName in ('a', 'b', 'c')" , ejbql )
assertEquals ( "x.artist = 1" , ejbql )
assertEquals ( "x.artistName <> 'bla'" , ejbql )
assertEquals ( "x.artistName is not null" , ejbql )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( 3748L , theHuntingEquation . evaluate ( new Object ( ) ) )
assertEquals ( "k1 in (\"a\", \"b\")" , transformed . toString ( ) )
assertNull ( e2 )
assertEquals ( ExpressionFactory . exp ( "abc = 3 and x = null" ) , e2 )
assertNotNull ( e2 )
assertNull ( e2 )
assertTrue ( exp instanceof ASTCurrentDate )
assertTrue ( exp instanceof ASTCurrentTimestamp )
assertEquals ( 1 , execute ( Painting . class , parsed1 ) . size ( ) )
assertEquals ( 25 - 2 , execute ( Painting . class , parsed1 ) . size ( ) )
assertEquals ( 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( 25 - 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( 25 - 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( 3 , execute ( Painting . class , parsed1 ) . size ( ) )
assertEquals ( 1 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( "AVG" , avg . getFunctionName ( ) )
assertEquals ( "MIN" , min . getFunctionName ( ) )
assertEquals ( "SUM" , sum . getFunctionName ( ) )
assertTrue ( result instanceof Date )
assertTrue ( result instanceof Date )
assertTrue ( result instanceof Date )
assertEquals ( "dbid:test" , sb . toString ( ) )
assertEquals ( "db:x.y" , new ASTDbPath ( "x.y" ) . toString ( ) )
assertEquals ( "x.artistName = 'bla'" , e . toEJBQL ( "x" ) )
assertEquals ( "x.artistName = 'bla'" , ejbql )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertEquals ( 1 , res )
assertNotNull ( res )
assertNotNull ( res )
assertEquals ( p1 , p2 )
assertEquals ( p1 , p2 )
assertEquals ( 3.0 , exp . evaluate ( new Object ( ) ) )
assertEquals ( 1.0 , exp . evaluate ( new Object ( ) ) )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( a1 , a2 )
assertEquals ( "abcdef" , exp . evaluate ( new Object ( ) ) )
assertEquals ( "abc" , exp . evaluate ( new Object ( ) ) )
assertEquals ( "ABC" , exp . evaluate ( new Object ( ) ) )
assertEquals ( true , exp . evaluate ( new Object ( ) ) )
assertEquals ( "x.consignment.parts in (91, 23)" , e . toEJBQL ( "x" ) )
assertEquals ( like . toEJBQL ( "p" ) , "upper(p.a) like '%B%'" )
assertEquals ( "x.mainName like '|%|%?|_title|%' escape '|'" , like . toEJBQL ( "x" ) )
assertEquals ( ":name" , ejbql )
assertTrue ( target instanceof ObjAttribute )
assertEquals ( "x.y" , new ASTObjPath ( "x.y" ) . toString ( ) )
assertEquals ( 6.5 , ( ( Number ) add . evaluate ( null ) ) . doubleValue ( ) , 0.0001 )
assertEquals ( 7 , ( ( Number ) multiply . evaluate ( null ) ) . doubleValue ( ) , 0.0001 )
assertEquals ( Boolean . TRUE , new ASTTrue ( ) . evaluate ( null ) )
assertEquals ( new ASTObjPath ( "path" ) , property . getExpression ( ) )
assertEquals ( ExpressionFactory . exp ( "path != null" ) , exp )
assertEquals ( ExpressionFactory . exp ( "path = false" ) , exp )
assertNull ( OBJECT_FIELD_INT_FIELD . getFrom ( bean ) )
assertEquals ( ExpressionFactory . exp ( "fn('%', intField, intField2)" ) , operator . getExpression ( ) )
assertEquals ( ExpressionFactory . exp ( "op('%', intField, intField2)" ) , operator . getExpression ( ) )
assertEquals ( ExpressionFactory . exp ( "op('%', intField, 10)" ) , operator . getExpression ( ) )
assertEquals ( exp ( "year(path)" ) , exp )
assertEquals ( exp ( "dayOfMonth(path)" ) , exp )
assertEquals ( exp ( "minute(path)" ) , exp )
assertEquals ( exp ( "max(path)" ) , exp )
assertEquals ( ExpressionFactory . exp ( "path = 1" ) , exp )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( 4 , paintings . size ( ) )
assertEquals ( ExpressionFactory . matchExp ( "path" , artist ) , exp )
assertEquals ( ExpressionFactory . noMatchExp ( "path" , artist ) , exp )
assertEquals ( ExpressionFactory . fullObjectExp ( ExpressionFactory . pathExp ( "path" ) ) , exp )
assertEquals ( ExpressionFactory . exp ( "path != 1" ) , exp )
assertEquals ( exp ( "avg(path)" ) , property . avg ( ) . getExpression ( ) )
assertEquals ( exp ( "sum(path)" ) , property . sum ( ) . getExpression ( ) )
assertEquals ( exp ( "mod(path, other)" ) , property . mod ( other ) . getExpression ( ) )
assertEquals ( exp ( "path + 42" ) , property . add ( 42 ) . getExpression ( ) )
assertEquals ( exp ( "path - other" ) , property . sub ( other ) . getExpression ( ) )
assertEquals ( exp ( "path * 42" ) , property . mul ( 42 ) . getExpression ( ) )
assertEquals ( exp ( "path = other" ) , property . eq ( other ) )
assertEquals ( exp ( "path > 123" ) , property . gt ( 123 ) )
assertEquals ( exp ( "path >= other" ) , property . gte ( other ) )
assertEquals ( exp ( "path <= 42" ) , property . lte ( 42 ) )
assertEquals ( exp ( "path = false" ) , property . isFalse ( ) )
assertEquals ( exp ( "path like 'abc'" ) , property . like ( "abc" ) )
assertEquals ( exp ( "path likeIgnoreCase 'abc'" ) , property . likeIgnoreCase ( "abc" ) )
assertEquals ( exp ( "path not like other" ) , property . nlike ( other ) )
assertEquals ( exp ( "path like '%abc%'" ) , property . contains ( "abc" ) )
assertEquals ( exp ( "path likeIgnoreCase '%abc%'" ) , property . containsIgnoreCase ( "abc" ) )
assertEquals ( exp ( "length(path)" ) , property . length ( ) . getExpression ( ) )
assertEquals ( exp ( "lower(path)" ) , property . lower ( ) . getExpression ( ) )
assertEquals ( exp ( "substring(path, offset, len)" ) , property . substring ( offset , length ) . getExpression ( ) )
assertEquals ( buffer . toString ( ) , "[bind: 1->t0.NAME: {'', 52, 'true'}, 2->t0.F_KEY1: 'true']" )
assertEquals ( tstName , a . getName ( ) )
assertEquals ( LifecycleEvent . POST_LOAD , m . getCallbackType ( ) )
assertEquals ( tstName , map . getName ( ) )
assertEquals ( 1 , queries . size ( ) )
assertNull ( ent . getName ( ) )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:toArtist.paintingArray" ) , translated )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:paintingArray.toArtist.ARTIST_NAME = 'aa'" ) , translated )
assertNull ( join . getRelationship ( ) )
assertEquals ( "abc" , generator . getGeneratorName ( ) )
assertEquals ( id , targetMap . get ( "GALLERY_ID" ) )
assertEquals ( tstName , entity . getName ( ) )
assertNull ( entity . getRelationship ( rel . getName ( ) ) )
assertNotNull ( resolved )
assertNull ( resolver . getQueryDescriptor ( "query2" ) )
assertEquals ( dbAttr . getName ( ) , attribute . getDbAttributeName ( ) )
assertEquals ( a1 . getName ( ) , a2 . getName ( ) )
assertEquals ( entity . getName ( ) , d1 . getName ( ) )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:toArtist.paintingArray" ) , translated )
assertEquals ( r . getDbRelationshipPath ( ) , "paintingArray" )
assertEquals ( "aaa" , builder . name )
assertEquals ( tstName , rel . getName ( ) )
assertTrue ( builder . buildQuery ( ) instanceof SQLTemplate )
assertTrue ( query instanceof SQLTemplate )
assertEquals ( "abc" , query . getDefaultTemplate ( ) )
assertTrue ( builder . buildQuery ( ) instanceof ObjectSelect )
assertTrue ( builder . buildQuery ( ) instanceof ObjectSelect )
assertEquals ( ExpressionFactory . exp ( "abc = 5" ) , query . getWhere ( ) )
assertNull ( query . getRoot ( ) )
assertNull ( query . getRoot ( ) )
assertNotNull ( date )
assertEquals ( Collections . singletonList ( 3L ) , context . performQuery ( query ) )
assertEquals ( Collections . singletonList ( 3L ) , context . performQuery ( query ) )
assertEquals ( Collections . singletonList ( 2L ) , context . performQuery ( query ) )
assertEquals ( Collections . singletonList ( 1L ) , context . performQuery ( query ) )
assertEquals ( artistName , artist . getArtistName ( ) )
assertEquals ( w . getBuffer ( ) . toString ( ) , s )
assertEquals ( 2 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 3 , paintings . size ( ) )
assertEquals ( 1 , paintings . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 20L , count )
assertEquals ( 1L , count )
assertEquals ( date , avg )
assertEquals ( 4L , count )
assertEquals ( 10 , intColumn2 )
assertFalse ( boolColumn )
assertEquals ( 105.0 , avg , 0.00001 )
assertEquals ( 20 , count )
assertEquals ( 1 , artists . size ( ) )
assertEquals ( 20L , count )
assertEquals ( 5L , count )
assertEquals ( 20L , count )
assertEquals ( 5L , count )
assertEquals ( 5L , count )
assertEquals ( 4L , count )
assertEquals ( pathSpec , ord . getSortSpec ( ) . getOperand ( 0 ) )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( CapsStrategy . UPPER , q1 . getColumnNamesCapitalization ( ) )
assertEquals ( params , clone . getParameters ( ) )
assertEquals ( 1 , inserted )
assertEquals ( 2 , result . size ( ) )
assertEquals ( 5 , context . select ( q1 ) . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "painting3" , a . getPaintingTitle ( ) )
assertEquals ( 3L , id )
assertEquals ( 20 , c )
assertEquals ( 0 , result . size ( ) )
assertEquals ( PersistenceState . COMMITTED , painting . getToArtist ( ) . getPersistenceState ( ) )
assertEquals ( "AAA # BBB" , query . getDefaultTemplate ( ) )
assertEquals ( 2 , objects . size ( ) )
assertTrue ( s1 . contains ( "<value placeholder>" ) )
assertTrue ( s1 . contains ( "<value placeholder>" ) )
assertTrue ( cacheKey . toString ( ) . isEmpty ( ) )
assertEquals ( 2 , objects . size ( ) )
assertEquals ( "xyz" , p . getName ( ) )
assertNull ( o1 . getStringField ( ) )
assertNull ( o1 . getRelated ( ) )
assertEquals ( "string" , accessor . getName ( ) )
assertEquals ( "abc" , accessor . getValue ( object ) )
assertEquals ( "aaa" , object . stringField )
assertEquals ( "123" , to . getString ( ) )
assertNotNull ( accessor )
assertEquals ( Integer . valueOf ( 55 ) , o1related . getIntegerField ( ) )
assertEquals ( "SELECT  FROM a" , compiled . getSql ( ) )
assertNotNull ( parser )
assertNotNull ( parser )
assertEquals ( template , sql )
assertEquals ( "(5)" , sql )
assertEquals ( "array_3" , sql )
assertEquals ( "array_3" , sql )
assertEquals ( "int_42" , sql )
assertEquals ( "float_3.14" , sql )
assertEquals ( "(?)" , sql )
assertNull ( BaseTransaction . getThreadTransaction ( ) )
assertNull ( BaseTransaction . getThreadTransaction ( ) )
assertEquals ( 3 , result . size ( ) )
assertEquals ( 1 , children . size ( ) )
assertEquals ( 1 , set . size ( ) )
assertEquals ( expectedPath , Util . getPackagePath ( UtilTest . class . getName ( ) ) )
assertEquals ( "ext" , Util . extractFileExtension ( fullName ) )
assertNull ( Util . extractFileExtension ( fullName ) )
assertEquals ( "n" , Util . stripFileExtension ( fullName ) )
assertEquals ( unencoded , Util . encodeXmlAttribute ( unencoded ) )
assertEquals ( "a&amp;b" , Util . encodeXmlAttribute ( unencoded ) )
assertTrue ( e . getMessage ( ) . contains ( message ) )
assertEquals ( "true" , object . toString ( ) )
assertEquals ( "SELECT #from(1) FROM a" , compiled . getSql ( ) )
assertEquals ( "[A] OR [B] OR [C]" , compiled . getSql ( ) )
assertEquals ( "WHERE [A] OR [C]" , compiled . getSql ( ) )
assertEquals ( "WHERE [B] OR [C]" , compiled . getSql ( ) )
assertEquals ( "WHERE [A] OR [B]" , compiled . getSql ( ) )
assertEquals ( "WHERE [A] some other stuff OR [C]" , compiled . getSql ( ) )
assertEquals ( "WHERE C1 OR C2 OR C3" , compiled . getSql ( ) )
assertEquals ( "" , compiled . getSql ( ) )
assertEquals ( "WHERE false OR 0" , compiled . getSql ( ) )
assertEquals ( "com.example.test" , config . getDefaultPackage ( ) )
assertEquals ( "someName" , event . getNewName ( ) )
assertEquals ( 3 , artifacts . size ( ) )
assertEquals ( TemplateType . ENTITY_SUPERCLASS . pathFromSourceRoot ( ) , configuration . getSuperTemplate ( ) . getData ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertEquals ( "oldname" , e . getOldName ( ) )
assertTrue ( filter . accept ( new File ( "." ) ) )
assertFalse ( filter . accept ( new File ( "bad_cayenne.xml" ) ) )
assertEquals ( "[null, null, null, null, null]" , a . toString ( ) )
assertFalse ( filter . accept ( new File ( "cayenne.xml" ) ) )
assertFalse ( filter . accept ( new File ( "xyz.MAP.xml" ) ) )
assertFalse ( filter . accept ( new File ( "index.eomodeld" ) ) )
assertNotNull ( in )
assertNotNull ( url )
assertNotNull ( url )
assertEquals ( map , parser ( "{key1 = val; key2 = 5; key3 = (str, 5)}" ) . object ( "" ) )
assertEquals ( list , parser ( "(\"s{t)r\", 5)" ) . object ( "" ) )
assertEquals ( list , parser ( "(\"s/t\\\\r\", 5)" ) . object ( "" ) )
assertEquals ( Collections . EMPTY_MAP , parser ( "{}" ) . object ( "" ) )
assertEquals ( list , parser ( "(\n // comment\n str )" ) . object ( "" ) )
assertEquals ( list , parser ( "(// comment\n str)" ) . object ( "" ) )
assertEquals ( list , parser ( "// comment\r\n ( str)" ) . object ( "" ) )
assertEquals ( list , parser ( "// comment\n ( str)" ) . object ( "" ) )
