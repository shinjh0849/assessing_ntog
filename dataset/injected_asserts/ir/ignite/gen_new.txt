assertEquals ( N , holder . allAlerts ( ) . size ( ) )
assertThat ( cache . get ( "test" ) , equalTo ( 1 ) )
assertEquals ( ( Integer ) 7 , Collections . max ( list ) )
assertEquals ( list , content )
fail ( e . getMessage ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertEquals ( "when" , when . getLastName ( ) )
assertThat ( render ( sql ) ) . isEqualTo ( sql )
assertThat ( numwantProvider . get ( RequestEvent . STARTED ) ) . isEqualTo ( 1 )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( "true false true " , sum [ 0 ] )
assertEquals ( "true false true " , sum [ 0 ] )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertThat ( CollectionUtils . getFirst ( Collections . emptySet ( ) , "ABC" ) ) . isEqualTo ( "ABC" )
assertThat ( CollectionUtils . getFirst ( Collections . emptySet ( ) , "ABC" ) ) . isEqualTo ( "ABC" )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertNotNull ( "Verify that the connection is not null." , conn )
assertNotNull ( "Verify that the connection is not null." , conn )
assertTrue ( "incorrect row count returned!" , count > 0 )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertNull ( v )
assertEquals ( ( sum / 100.0D ) , m . avg ( ) , 0.0D )
assertEquals ( 441 , i )
assertEquals ( "Small long return 1010L" , expected , count )
assertTrue ( p . toString ( ) . matches ( "RuntimeESBProviderCallback.*TalendESBJob" ) )
assertThat ( cache . get ( "key" ) ) . isEqualTo ( "foo" )
assertEquals ( "name" , name )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertThat ( content ) . startsWith ( "fromchild" )
assertThat ( dialect . getNativeDriver ( ) , is ( SparkSimbaDatabaseMeta . DRIVER_CLASS_NAME ) )
assertEquals ( "get [" + i + ']' , values [ i + OFFSET ] , test . get ( i ) , EPSILON )
assertEquals ( expResult , result )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "Small long return 1010L" , expected , count )
assertEquals ( "Small long return 1010L" , expected , count )
assertEquals ( expResult , result )
assertEquals ( 0 , conn . getMetaData ( ) . getDriverMajorVersion ( ) )
assertNotNull ( stmt )
assertFalse ( t . failed )
assertSame ( UNSUPPORTED_EXCEPTION , session . startWorkflow ( syntheticWorkflow . getWorkflowModel ( ) , workflowData , stringObjectMap ) )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertTrue ( e . getMessage ( ) , e . getMessage ( ) . contains ( "Parsing error" ) )
assertEquals ( "auto" , ChecksumMode . CP_AUTO . getName ( ) )
assertEquals ( list , connection . get ( key ) )
assertEquals ( null , ServerCallContextStack . get ( ) . currentCallee ( ) )
assertEquals ( "name" , name )
assertEquals ( "oid" , rs . getArray ( "proargtypes" ) . getBaseTypeName ( ) )
assertTrue ( "Incorrect number of rows returned!" , rs . next ( ) )
assertThat ( e . toString ( ) ) . contains ( "must be non-null" )
assertTrue ( e . getMessage ( ) . contains ( "Type mismatch" ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "Parameter 0 was not found." , e . getMessage ( ) )
assertTrue ( filter . test ( storageDomain ) )
assertEquals ( PropertiesConfiguration . DEFAULT_ENCODING , FileBasedConfigurationBuilder . getDefaultEncoding ( conf . getClass ( ) ) )
assertEquals ( "%%EOF\n" , ( ( ByteArrayOutputStream ) out ) . toString ( "US-ASCII" ) )
assertEquals ( "force-square" , SymbolShapeHint . FORCE_SQUARE . toString ( ) )
assertTrue ( timeString < timeStringBuilder )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertEquals ( expectedXml , getXmlWriterContents ( ) )
assertEquals ( "aList = [ 1, 2 ]\n" , new TomlWriter . Builder ( ) . padArrayDelimitersBy ( 1 ) . build ( ) . write ( o ) )
assertEquals ( "X" , Expressions . constant ( "X" ) . toString ( ) )
assertEquals ( true , execute ( "internal: var cpVar : ComplexType" , "cpVar.x == 0" ) )
assertEquals ( expectedXml , getXmlWriterContents ( ) )
assertEquals ( CACHEABLE , requestPipeline . execute ( new HttpRequest ( URI ) ) )
assertFalse ( returnedValue )
assertEquals ( 404 , renameSecret ( oldName , newName ) . code ( ) )
fail ( "couldn't put lots of stuff in:" + e . getMessage ( ) )
assertEquals ( "person-name" , name )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( 0 , msg . getAISVersionIndicator ( ) )
assertEquals ( data [ i ] , ( byte ) rafoa . read ( ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertThat ( ( ( QueryResponseHeader ) handler . execute ( ) ) . getQueryHeaders ( ) . size ( ) , is ( 1 ) )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( "status code should be 1:" , 1 , statusCode )
assertNull ( out )
assertThat ( this . arr . get ( 1 ) , is ( 1 ) )
assertEquals ( 12 , result )
assertEquals ( i . toString ( ) , "[1.0, 5.0]" )
assertEquals ( tropo . text ( ) , "{\"tropo\":[]}" )
assertEquals ( new String ( buf ) , "ABCD" )
assertEquals ( ElementType . BOOLEAN . size ( ) , ElementType . BOOLEAN . size ( Boolean . FALSE ) )
assertEquals ( maxSize , cacheSize )
assertEquals ( "true false true " , sum [ 0 ] )
assertThat ( out . toString ( "ISO-8859-1" ) ) . isEqualTo ( "Hello, world." )
assertTrue ( squaresCache . get ( 6 ) == 36 )
assertEquals ( "Annotation attribute 'name' is not unique." , expected , actual )
assertEquals ( value , redis . get ( key ) )
assertNotSame ( recycler . get ( ) , o2 )
assertTrue ( set . add ( val ) )
assertTrue ( size == 2 , "Incorrect number of appenders" )
assertThat ( spans ) . isEmpty ( )
assertThat ( intentServiceController . get ( ) . boundIntent ) . isNotNull ( )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e . getMessage ( ) . contains ( undeclaredErrMsg ) )
assertEquals ( new Integer ( 1 ) , cache2 . get ( "test" ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertTrue ( ListUtil . isEmpty ( filterConstraints ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertEquals ( in , out )
assertNotNull ( str )
assertThat ( error . get ( ) , instanceOf ( RejectedExecutionException . class ) )
assertEquals ( 0 , latch . getCount ( ) )
assertNotNull ( cfg )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( TestModel . class , field . getType ( ) )
assertEquals ( "Hello World" , HttpRequest . get ( url . toExternalForm ( ) + "SimpleServlet" , 2 , TimeUnit . SECONDS ) )
assertNull ( "Null check" , obj )
assertNull ( "Null check" , obj )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( 1 , f . getOrder ( ) )
assertThat ( actual ) . contains ( 1.0f , atIndex ( 0 ) , withPrecision ( 0.1f ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertThat ( score ) . isEqualTo ( BendableScore . zero ( 1 , 2 ) )
assertEquals ( new String ( new byte [ ] { 0 , 1 , 2 , 3 , 4 } ) , result . data ( ) )
assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( "[1, 2, null, [...], foo]" , Arrays . deepToString ( array ) )
assertEquals ( diff ( left , right ) , "abc\n" )
assertEquals ( diff ( left , right ) , "abc\n" )
assertThat ( response . cookie ( "c" ) , isValue ( responseCookie ( "c" , "d" ) . build ( ) ) )
assertEquals ( RectangleInsets . ZERO_INSETS , plot . getAxisOffset ( ) )
assertEquals ( "List<String>" , Pretty . type ( pti ) )
assertNotNull ( "Generated full name can not be null" , value )
assertNotNull ( "Generated full name can not be null" , value )
assertEquals ( "a" , Util . getName ( mock ) )
assertNotNull ( "Class not null" , was )
assertThat ( new JcrValue ( factories , PropertyType . DATE , date ) . getDouble ( ) , is ( ( double ) date . getTime ( ) ) )
assertEquals ( "Hello World!" , response )
assertEquals ( "Hello World!" , response )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( "Hola mundo" , result . asString ( ) )
assertEquals ( i , cache . get ( i ) )
assertThat ( underTest . listIdentifiers ( ListIdentifiersParameters . request ( ) . withMetadataPrefix ( FORMAT ) ) . hasNext ( ) , is ( false ) )
assertThat ( type . getBacklogPhase ( ) , is ( "phase 1" ) )
assertThat ( spans ) . isEmpty ( )
assertThat ( spans ) . isEmpty ( )
assertThat ( method . getName ( ) ) . isEqualTo ( "findByLastname" )
assertTrue ( actualMessage . contains ( "map" ) )
assertNotNull ( parameters )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertTrue ( ex . getMessage ( ) . contains ( BigInteger . valueOf ( 2 ) . pow ( PRODUCT_ELEMENTS ) . toString ( ) ) )
assertEquals ( "{\"a\":\"a_value\",\"b\":2}" , JSON . toString ( new JSON ( ) . set ( "a" , "a_value" ) . set ( "b" , 2 ) , new StringBuilder ( ) ) . toString ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertEquals ( ArrayProducer . INTEGER_BAR , integerBar )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( 0 , proposals . length )
assertEquals ( list . get ( i ++ ) , x )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertThat ( nonAdults ) . size ( ) . isEqualTo ( 2 )
assertEquals ( expected , classMapper . applyOrNull ( Integer . class ) )
assertEquals ( "" , new String ( result ) )
assertNull ( obj )
assertNull ( object )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertEquals ( LENGTH , MAC_NORMAL . length ( ) )
assertNotNull ( oAuth2AccessToken )
assertEquals ( n . getName ( ) , noteObj . getName ( ) )
assertArrayEquals ( new String [ 0 ] , args )
assertEquals ( expectedFields , actual )
assertEquals ( "entry?servicehandler=handler" , CameraImpl . stripContextPath ( serviceHandlerUrl ) )
assertEquals ( name + '.' , record . name ( ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertThat ( header ( "=recalled" ) , is ( instanceOf ( RecalledColumn . class ) ) )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertEquals ( offHeapMutableBytesStore . add ( _values [ i ] ) , i )
assertEquals ( 131l , getalLiteral . getWaarde ( ) )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertTrue ( value instanceof String )
assertTrue ( "exception not thrown for null collection name" , failedAsExpected )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertEquals ( i + 1 , ( int ) it . next ( ) )
assertNull ( getSingleEntity ( service , key ) )
assertTrue ( multimap . put ( 4 , "4" ) )
assertNull ( "DNS data returend" , result )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( properties . remove ( "source.type" ) )
assertNotNull ( message )
assertEquals ( i , cache . get ( i ) )
assertEquals ( null , test . get ( i ) )
assertEquals ( ( int ) sut . get ( i ) , i )
assertNull ( cache . get ( 4 ) )
assertEquals ( i , cache . get ( i ) )
assertEquals ( i , cache . get ( i ) )
assertNull ( cache . get ( 4 ) )
assertEquals ( i , cache . get ( i ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( counter . get ( ) , NUM_TIMES )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertEquals ( error , resultRef . get ( ) )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertEquals ( entry . getValue ( ) , cache . get ( entry . getKey ( ) ) )
assertThat ( faker . bool ( ) . bool ( ) , isOneOf ( true , false ) )
assertEquals ( offHeapMutableBytesStore . add ( _values [ i ] ) , i )
assertArrayEquals ( destArray , retArray )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertThat ( bndrun . check ( ) ) . isTrue ( )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( numTasks , completed . get ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( entry . getValue ( ) , actual )
assertEquals ( 10000 + k , ia . get ( k ) )
assertTrue ( value instanceof String )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertEquals ( 15 , result )
assertEquals ( poiFiles . get ( i ) . getName ( ) , expected [ i ] )
assertEquals ( CacheManager . getInstance ( ) , cachingProvider . getCacheManager ( ) )
assertTrue ( value instanceof String )
assertEquals ( list . size ( ) - j , ( ( ( RunCounter ) ( list . get ( j ) ) ) . count ) )
assertEquals ( 0 , source . getEstimatedSizeBytes ( null ) )
assertThat ( removed . get ( ) ) . isEqualTo ( MAXIMUM )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( false , result )
assertEquals ( result , BuildWorkspaceStatus . CANCELLED )
assertEquals ( Status . STATUS_COMMITTED , status . get ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertNull ( v )
assertFalse ( freeCalled . get ( ) )
assertNull ( v )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertNotNull ( entry . getKey ( ) + " is NULL" , entry . getValue ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertEquals ( list , content )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( any ( EVEN , asList ( 1 , 2 ) ) , is ( true ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( "[1, 2, 3, 4, 5]" , map . keySet ( ) . toString ( ) )
assertTrue ( roleNames . toString ( ) , roleNames . isEmpty ( ) )
assertEquals ( "\\u0000\\u0001\\u0002\\u0003\\u0004" , output . toString ( ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertArrayEquals ( result , heapsort . sort ( input ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertEquals ( key . getValue ( ) , otherKey . getValue ( ) )
assertEquals ( list , content )
assertEquals ( ShapeElementType . POLYGON , reader . getShapeElementType ( ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( expected , actual )
assertEquals ( null , test . get ( i ) )
assertEquals ( results . get ( i ) , norm . normalise ( "arxiv" , tests . get ( i ) ) )
assertEquals ( "Hello, World!" , client . hello ( "World" ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertEquals ( ( Integer ) 1 , service . getFromCache ( CACHE_NAME , "test" ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertEquals ( - 1 , cache . get ( 1 ) . intValue ( ) )
assertEquals ( - 1 , cache . get ( 1 ) . intValue ( ) )
assertEquals ( "name" , name )
assertEquals ( i , cache . get ( i ) )
assertTrue ( b . check ( "The JAR is empty: " ) )
assertThat ( c . peek ( 1 ) ) . isEqualTo ( ( Integer ) 1 )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertTrue ( multiMap . remove ( key , value ) )
assertArrayEquals ( result , bubbleSort . sort ( input ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThat ( ( String ) queue . poll ( NUMBER_OF_ITEMS ) , is ( String . valueOf ( i ) ) )
assertEquals ( expResult , result )
assertThat ( spans ) . isEmpty ( )
assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertEquals ( false , cache . update ( e1 ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "Sheet name cannot contain '.'" , e . getMessage ( ) )
assertEquals ( "Sheet name cannot contain '.'" , e . getMessage ( ) )
assertEquals ( value , redis . get ( key ) )
assertEquals ( out . get ( Integer . toString ( i ) ) , Integer . toString ( i ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( true , builder . metadata ( ) . id ( "1234" ) . draft ( true ) . build ( ) . isDraft ( ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i , cache . get ( i ) )
assertEquals ( buf , bufClone )
assertThat ( failed . get ( ) ) . withFailMessage ( "counter already modified" ) . isFalse ( )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertNull ( "The class does not exist." , ClassUtil . newInstance ( null , null ) )
fail ( e . getMessage ( ) )
assertArrayEquals ( message , decrypted )
assertTrue ( bean . isImportDisabled ( ) )
assertThatEventIsAccessible ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertThat ( operationRan . get ( ) ) . isTrue ( )
assertNull ( exceptions [ i ] )
assertThat ( spans ) . isEmpty ( )
assertTrue ( result )
assertEquals ( "ProtocolId" , consumer . getConsumerKey ( ) )
assertNotNull ( metricServiceImpl . getMetricRegistry ( ) )
assertEquals ( i ++ , key . intValue ( ) )
assertEquals ( expected ++ , n )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( new Integer ( 2 ) , cache . get ( "key" ) )
assertEquals ( "+OK" , commandFuture . get ( ) )
assertEquals ( metrics , future . get ( ) )
assertEquals ( "@Mock.value() and @Mock.type() are aliases, you can't specify both at the same time" , e . getMessage ( ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertFalse ( called . get ( ) , "Callback should not be run" )
assertNull ( documentation )
assertTrue ( promise . cancel ( false ) )
assertFalse ( mapContent . layers ( ) . remove ( new MockLayer ( WORLD ) ) )
assertEquals ( strings . get ( i ) , writer . get ( i ) )
assertThat ( future . get ( ) ) . isEqualToIgnoringCase ( "hello" )
assertEquals ( 0.0 , cvec . get ( i ) , 0.0 )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertFalse ( fail . get ( ) )
assertTrue ( resultMap != null && resultMap . size ( ) == 0 )
assertFalse ( isTimeoutSet )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertEquals ( "Retrieved value should match entered value" , value , retrievedValue )
assertThat ( IntegerUtil . toPrimitiveInt ( null ) , is ( 0 ) )
assertTrue ( output . get ( ) . get ( 0 ) instanceof RedisException )
assertEquals ( value , redis . get ( key ) )
assertEquals ( target . size ( ) , 4 )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertTrue ( cache instanceof AsyncUfsAbsentPathCache )
assertTrue ( instantiator . newInstance ( SerializableWithUIDClass . class ) instanceof SerializableWithUIDClass )
assertEquals ( target . size ( ) , 4 )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( 1 , science ( ) . getExperimentCount ( ) )
assertNull ( map . get ( null ) )
assertEquals ( 10000 + k , ia . get ( k ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertArrayEquals ( new String [ ] { "2" , "3" } , testBean . varArgs )
assertTrue ( isExpected )
assertEquals ( 0 , msg . getAISVersionIndicator ( ) )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertEquals ( "/plugin/build-failure-analyzer/images" , PluginImpl . getStaticImagesBase ( ) )
assertEquals ( expResult , result )
assertNotNull ( Version . str ( ) )
assertEquals ( LOCATION_ID , impl . getCurrentLocationId ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertThat ( e . getMessage ( ) , is ( "value must not be null!" ) )
assertTrue ( latch . await ( LISTENER_TIMEOUT , TimeUnit . MILLISECONDS ) )
assertEquals ( "" , result )
assertEquals ( "value" , processor . getValue ( request ) )
assertNull ( t . getFormat ( null ) )
assertEquals ( n , set . size ( ) )
assertThat ( person . getIdProperty ( ) ) . satisfies ( it -> assertThat ( it . getType ( ) ) . isEqualTo ( String . class ) )
assertEquals ( " AB | CD |" , iv . getValues ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "foobar" , result )
assertEquals ( "foobar" , result )
assertEquals ( "" , buf . toString ( ) )
assertEquals ( 2 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertEquals ( "Hello, World!" , client . hello ( "World" ) )
assertTrue ( output . get ( ) . get ( 0 ) instanceof RedisException )
assertEquals ( position2 . anyOther ( ) , result )
assertThat ( state . getId ( ) , notNullValue ( ) )
assertEquals ( "red" , tuple . getRed ( ) )
assertEquals ( UnifiedMap . newWithKeysValues ( 1 , 2 ) , this . getCollection ( ) . toMapOfItemToCount ( ) )
assertNull ( "stress test failed" , failure . get ( ) )
assertEquals ( new Integer ( i + 1 ) , arr [ i ] )
assertEquals ( hash1 , hash2 )
assertNull ( page )
assertThat ( objectValidator . validate ( validObjectWithFilter ) , is ( empty ( ) ) )
assertEquals ( BundleType . TEXTMATE , BundleType . fromDirectory ( getBundleDirectory ( TestUtil . MARKDOWN_TEXTMATE ) ) )
assertThat ( testClientCacheConfigurerThreeCalled . get ( ) ) . isTrue ( )
assertEquals ( y , res )
assertTrue ( Double . isNaN ( map . remove ( 50 ) ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( i + 1 , t1 . get ( i ) . asInt4 ( ) )
assertEquals ( "alpha" , v0 . get ( ) )
assertEquals ( "Result did not match expected value." , key , result )
assertEquals ( delimitWithOriginal ( ) , delimitWithMina ( ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertThat ( info . getLabel ( ) , is ( nullValue ( ) ) )
assertNull ( StringUtils . padEnd ( null , 5 , '*' ) )
assertEquals ( i . toString ( ) , "[1.0, 5.0]" )
assertThat ( this . modelBuilder . getModel ( ) , is ( equalTo ( map ) ) )
assertThat ( this . modelBuilder . getModel ( ) , is ( equalTo ( map ) ) )
assertThat ( connection . get ( entry . getKey ( ) ) ) . isEqualTo ( entry . getValue ( ) )
assertTrue ( set . add ( val ) )
assertNull ( v )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( Integer . valueOf ( i + 1 ) , f . evaluate ( null ) )
assertNotNull ( FieldName . unmarshal ( "x" ) )
assertEquals ( expected , actual )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertThat ( nAdapter . adaptedValue ( ) , equalTo ( "1" ) )
assertThat ( discoverer . getMapping ( ChildWithTypeMapping . class , method ) ) . isEqualTo ( "/child/parent" )
assertNotNull ( this . registry . getService ( new BasicServiceConfiguration < > ( FakeInterface . class ) ) )
assertFalse ( noStatusCodes . shouldRetry ( RetryPolicyContexts . withStatusCode ( 404 ) ) )
assertThat ( factory . getClass ( ) . getAnnotation ( HttpClientName . class ) . value ( ) ) . isEqualTo ( "netty" )
assertEquals ( "There must not be claims for an opaque access token." , expectedValue , opaqueAccessToken . getClaims ( ) )
assertEquals ( 0 , matches )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , equalTo ( node ) )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , equalTo ( node ) )
assertEquals ( new Integer ( 1 ) , cache2 . get ( "test" ) )
