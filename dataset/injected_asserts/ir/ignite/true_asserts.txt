assertTrue ( iterators . size ( ) < GENERATED )
assertNull ( cache . get ( testKey ) )
assertEquals ( ROWS , cursors . size ( ) )
assertEquals ( "Unexpected rows for epoch " + i , 0 , rows . size ( ) )
assertTrue ( rel instanceof IgniteTableScan || rel instanceof IgniteIndexScan )
assertNull ( idxScan )
assertNull ( idxScan )
assertNull ( idxScan )
assertEquals ( getIdxName ( 1 , "T1C7SHORT" ) , idxScan . indexName ( ) )
assertEquals ( "Kryo simple serialization test failed" , pojo1 , pojo2 )
assertEquals ( 12L , ( long ) cache . get ( 12L ) )
assertEquals ( "abc" , cache . get ( 1L ) )
assertEquals ( 0 , this . srv . cacheNames ( ) . size ( ) )
assertEquals ( 0 , this . srv . cacheNames ( ) . size ( ) )
Consumer < String > initiatorChecker = initId0 -> assertEquals ( initiatorId , initId0 )
assertTrue ( F . first ( nodes ) . connectable ( ) )
assertFalse ( F . first ( nodes ) . connectable ( ) )
assertEquals ( 16 , ( int ) blob . length ( ) )
assertNotNull ( conn )
assertNotNull ( conn )
assertEquals ( "str" , rs . getString ( 1 ) )
assertEquals ( 3 , res )
assertEquals ( false , res )
assertTrue ( F . isEmpty ( reason . getUpdateCounts ( ) ) )
assertEquals ( i , grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( i ) )
assertEquals ( 1 , cnt )
assertEquals ( nameForId ( i ) , nameForIdInCache ( i ) )
assertEquals ( getTestIgniteInstanceName ( 0 ) , validateJsonResponse ( ret ) . asText ( ) )
assertEquals ( "val1" , grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( "key0" ) )
assertEquals ( "val1" , grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( "key0" ) )
assertNull ( grid ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . get ( "key0" ) )
assertEquals ( "appendVal_suffix" , jcache ( ) . get ( "appendKey" ) )
assertEquals ( "prefix_prependVal" , jcache ( ) . get ( "prependKey" ) )
assertTrue ( res . size ( ) > 0 )
assertNotNull ( client . version ( ) )
assertTrue ( "Topology wasn't changed." , grid ( 0 ) . cachesx ( ) . size ( ) > size )
assertEquals ( cnt + 1 , ignite ( 0 ) . cache ( DEFAULT_CACHE_NAME ) . size ( ) )
assertEquals ( 2 , updatesCnt )
assertEquals ( 2 , updatesCnt )
assertEquals ( 2 , updatesCnt )
assertFalse ( isRowSet )
assertTrue ( conn . getMetaData ( ) . supportsTransactions ( ) )
assertNotNull ( stmt )
assertNotNull ( prepared )
assertEquals ( sqlText , conn . nativeSQL ( sqlText ) )
assertEquals ( 3 , stmt . executeUpdate ( SQL ) )
assertEquals ( 3 , prepStmt . executeUpdate ( ) )
assertFalse ( prepStmt . execute ( ) )
assertEqualsCollections ( F . asList ( 2 , "John" , "Apple" ) , res . get ( 0 ) )
assertEquals ( "Unexpected connections count." , 0 , ios . size ( ) )
assertTrue ( recreatedAffinityCache . version ( ) . compareTo ( affinityCache . version ( ) ) > 0 )
assertTrue ( recreatedAffinityCache . version ( ) . compareTo ( affinityCache . version ( ) ) > 0 )
assertNull ( "Affinity cache is not null." , affinityCache )
assertNotNull ( stmt . getResultSet ( ) )
assertEquals ( nameForId ( i ) , nameForIdInCache ( i ) )
assertTrue ( log . toString ( ) . contains ( "ignoring BEGIN command" ) )
assertFalse ( log . toString ( ) . contains ( "ignoring BEGIN command" ) )
assertTrue ( log . toString ( ) . contains ( "ignoring BEGIN command" ) )
assertTrue ( log . toString ( ) . contains ( "ignoring BEGIN command" ) )
assertTrue ( log . toString ( ) . contains ( "ignoring BEGIN command" ) )
assertEquals ( KEYS_PER_NODE * 2 , res . size ( ) )
assertEquals ( 0 , proc . getProcess ( ) . exitValue ( ) )
assertTrue ( "Expected exception about cache configuration validation has not been thrown" , expEThrown )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "check_index_inline_sizes" ) )
assertTrue ( arg . toString ( ) , p . matcher ( arg . toString ( ) ) . matches ( ) )
assertEquals ( EXIT_CODE_OK , execute ( "--help" ) )
assertEquals ( EXIT_CODE_OK , execute ( ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "list" , ".*" ) )
assertEquals ( 1 , code )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "indexes_rebuild_status" ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "check_index_inline_sizes" ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" , CACHE_NAME ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" , "--check-crc" , CACHE_NAME ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" , CACHE_NAME ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" , "--check-crc" , CACHE_NAME ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "validate_indexes" , CACHE_NAME ) )
assertEquals ( EXIT_CODE_OK , execute ( "--meta" , "list" ) )
assertEquals ( EXIT_CODE_OK , execute ( "--property" , "list" ) )
assertEquals ( EXIT_CODE_CONNECTION_FAILED , execute ( params ) )
assertFalse ( igniteEx . cluster ( ) . state ( ) . active ( ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "idle_verify" , "--dump" ) ) )
assertEquals ( EXIT_CODE_OK , execute ( "--cache" , "idle_verify" , "--yes" ) )
assertEquals ( EXIT_CODE_UNEXPECTED_ERROR , execute ( "--warm-up" , "--stop" , "--yes" ) )
assertEquals ( EXIT_CODE_OK , execute ( hnd , "--tracing-configuration" , "get_all" ) )
assertEquals ( EXIT_CODE_OK , res )
assertEquals ( EXIT_CODE_OK , res )
assertEquals ( EXIT_CODE_OK , res )
assertEquals ( EXIT_CODE_OK , res )
assertEquals ( Integer . toString ( Integer . MAX_VALUE ) , metric ( ignite0 , metricName ( mregName , "hitrate-metric" ) ) )
assertEquals ( EXIT_CODE_OK , res )
assertEquals ( srvCnt , systemView ( ignite0 , SNAPSHOT_SYS_VIEW ) . size ( ) )
assertEquals ( 1 , affNodes . size ( ) )
assertEquals ( "Uninitialized cache store session listener." , 0 , uninitializedListenerCnt . get ( ) )
assertEquals ( cacheSize , curSize )
assertEquals ( - 1 , clientSocket . getInputStream ( ) . read ( ) )
assertArrayEquals ( val , igniteCache . get ( key ) )
assertEquals ( msg , expectedNullCnt , nullOps . size ( ) )
assertEquals ( 0 , evtsTriggered . get ( ) )
assertTrue ( GridTestUtils . waitForCondition ( ( ) -> thread . getName ( ) . equals ( failureHndThreadName ) , fdTimeout * 2 ) )
assertEquals ( 0 , invalidPrj . nodes ( ) . size ( ) )
assertEquals ( size , prj . forRemotes ( ) . nodes ( ) . size ( ) )
assertTrue ( ignite . cluster ( ) . nodes ( ) . contains ( ignite . cluster ( ) . forRandom ( ) . node ( ) ) )
assertEquals ( 42 , fut . get ( ) . intValue ( ) )
assertTrue ( grid . compute ( ) . apply ( new TestMultipleHoldccCallsClosure ( ) , ( Object ) null ) )
assertFalse ( evtType == EVT_CACHE_OBJECT_PUT )
assertEquals ( "Must return same instance" , ignite , ignite2 )
assertEquals ( "Must return same instance" , ignite , ignite2 )
assertEquals ( cntr . get ( ) , 0 )
assertEquals ( "Invalid projection: " + prj . nodes ( ) , 1 , prj . nodes ( ) . size ( ) )
assertTrue ( computeJobWorkerInterruptTimeout ( ignite ) . propagate ( 10L ) )
assertFalse ( lsnr . check ( ) )
assertEquals ( msgOut , GridTestIoUtils . externalize ( msgOut , marsh ) )
assertEquals ( msgOut , GridTestIoUtils . externalize ( msgOut , marsh ) )
assertEquals ( msgOut , GridTestIoUtils . externalize ( msgOut , marsh ) )
assertEquals ( msgOut , GridTestIoUtils . externalize ( msgOut , marsh ) )
assertEquals ( 0 , empty . nodes ( ) . size ( ) )
assertTrue ( true )
assertEquals ( 4 , grid ( 0 ) . cluster ( ) . forServers ( ) . nodes ( ) . size ( ) )
assertFalse ( ignite . context ( ) . event ( ) . isRecordable ( EVT_NODE_VALIDATION_FAILED ) )
assertTrue ( strLog . toString ( ) . contains ( "LongJVMPauseDetector was successfully started" ) )
assertEquals ( field . value ( binObj ) , field . < Time > readField ( buf ) )
assertNull ( field . getName ( ) , field . get ( res ) )
Assert . assertArrayEquals ( new Date [ ] { new Date ( 22222 ) , new Date ( 11111 ) , new Date ( 11111 ) } , res . dateArr )
Assert . assertArrayEquals ( new Timestamp [ ] { new Timestamp ( 333444555 ) , new Timestamp ( 222333444 ) } , res . tsArr )
Assert . assertArrayEquals ( new UUID [ ] { new UUID ( 2 , 2 ) , new UUID ( 1 , 1 ) , new UUID ( 1 , 1 ) } , res . uuidArr )
Assert . assertArrayEquals ( new double [ ] { 2.0 , 1.0 , 1.0 } , res . dArr , 0 )
Assert . assertArrayEquals ( new float [ ] { 2.0f , 1.0f , 1.0f } , res . fArr , 0 )
Assert . assertArrayEquals ( new int [ ] { 2 , 1 , 1 } , res . iArr )
Assert . assertArrayEquals ( new short [ ] { 2 , 1 , 1 } , res . sArr )
Assert . assertArrayEquals ( new byte [ ] { 2 , 1 , 1 } , res . bArr )
Assert . assertArrayEquals ( new String [ ] { "b" , "a" , "a" } , res . strArr )
assertEquals ( "a" , arr [ 0 ] )
Assert . assertEquals ( Collections . emptyList ( ) , mutObj . build ( ) . < GridBinaryTestClasses . TestObjectContainer > deserialize ( ) . foo )
assertEquals ( src , res )
assertEquals ( src , res )
assertEquals ( new GridMapEntry < > ( 1 , "a" ) , res . foo )
assertEquals ( "String" , metadata . fieldTypeName ( "xx567" ) )
assertEquals ( Timestamp . class , mutableObj . getField ( "foo" ) . getClass ( ) )
assertEquals ( Timestamp . class , ( ( List < ? > ) mutableObj . getField ( "foo" ) ) . get ( 0 ) . getClass ( ) )
Assert . assertNull ( wrapper . build ( ) . < GridBinaryTestClasses . TestObjectAllTypes > deserialize ( ) . str )
assertEquals ( typeName , actualTypeName )
assertEquals ( date , builder ( "C" ) . setField ( "d" , date ) . build ( ) . < Date > field ( "d" ) )
assertTrue ( Arrays . equals ( dateArr , builder ( "C" ) . setField ( "da" , dateArr ) . build ( ) . < Date [ ] > field ( "da" ) ) )
assertTrue ( Arrays . equals ( tsArr , builder ( "C" ) . setField ( "ta" , tsArr ) . build ( ) . < Timestamp [ ] > field ( "ta" ) ) )
Assert . assertNull ( builder . build ( ) . < GridBinaryTestClasses . TestObjectAllTypes > deserialize ( ) . str )
assertEquals ( "b" , res . foo )
assertNull ( startGrid ( ) . binary ( ) )
assertEquals ( aff . mapKeyToNode ( i ) . id ( ) , nodeId . get ( ) )
assertNotNull ( binaries ( ) . type ( TestObject3 . class ) )
assertEquals ( IndexKeyType . INT , t . type ( ) )
assertFalse ( client . cacheNames ( ) . contains ( TMP_CACHE_NAME ) )
assertTrue ( err . getMessage ( ) . contains ( "Cache does not exist" ) )
assertEquals ( "person" , val . getName ( ) )
assertTrue ( errMessage . contains ( "cause=Foo" ) )
data . forEach ( ( key , val ) -> assertEquals ( val . get1 ( ) , cache . get ( key ) ) )
map . keySet ( ) . forEach ( key -> assertFalse ( cache . containsKey ( key ) ) )
assertEquals ( ClientStatus . TX_LIMIT_EXCEEDED , cause . getCode ( ) )
assertNull ( client . set ( "non-existent" , null ) )
assertEquals ( 3 , rc . getChannelHolders ( ) . size ( ) )
assertNotNull ( "Not found key for node " + grid ( 0 ) . localNode ( ) . id ( ) , keyForUnknownNode )
assertEquals ( id0 , ig0 . cluster ( ) . id ( ) )
assertTrue ( isReencryptionInProgress ( Collections . singleton ( cacheName ( ) ) ) )
assertEquals ( 4 , rmts . size ( ) )
assertFalse ( log . logs ( ) . stream ( ) . anyMatch ( msg -> msg . contains ( "Coordinator changed" ) && msg . contains ( "isClient=true" ) ) )
assertTrue ( baselineEvtLatch . await ( 2 , TimeUnit . SECONDS ) )
assertEquals ( usrType , fut . get ( ) . type ( ) )
assertNotNull ( r )
assertNull ( val . field3 )
assertTrue ( val )
assertEquals ( 200 , obj . value ( ) )
assertEquals ( 200 , obj . value ( ) )
assertEquals ( 1L , grid ( "client" ) . cache ( "other-cache" ) . get ( 1L ) )
assertNotNull ( cacheBean )
assertArrayEquals ( BOUNDS , systemTime . bounds ( ) )
assertEquals ( names , res )
assertFalse ( "There was an exception during metric read. See log for details." , lsnr . check ( ) )
assertTrue ( "CPU Load is negative: " + loadVal , loadVal >= 0 )
assertEquals ( SECOND_DESCRIPTION_METHOD_ANNOTATION , actualRes )
assertEquals ( SECOND_DESCRIPTION_PARAM_ANNOTATION , actualRes )
assertEquals ( SECOND_DESCRIPTION_METHOD_ANNOTATION , actualRes )
assertEquals ( PARAMETER_INFO_DESCRIPTION , actualRes )
assertEquals ( SECOND_NAME_METHOD_ANNOTATION , actualRes )
assertEquals ( SECOND_NAME_PARAM_ANNOTATION , actualRes )
assertEquals ( SECOND_NAME_METHOD_ANNOTATION , actualRes )
assertEquals ( NAME , actualRes )
assertEquals ( mem . loadedPages ( ) , expPages )
assertEquals ( "Unexpected cluster size" , 2 , grid ( 1 ) . cluster ( ) . nodes ( ) . size ( ) )
assertNotNull ( aff )
assertTrue ( client . configuration ( ) . isClientMode ( ) )
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
assertEquals ( Thread . currentThread ( ) . getName ( ) , listenThreadName . get ( ) )
G . allGrids ( ) . forEach ( n -> assertEquals ( n . name ( ) , ACTIVE_READ_ONLY , n . cluster ( ) . state ( ) ) )
G . allGrids ( ) . forEach ( n -> assertEquals ( n . name ( ) , ACTIVE_READ_ONLY , n . cluster ( ) . state ( ) ) )
assertNull ( cache . get ( key ) )
assertFalse ( grid . cluster ( ) . state ( ) . active ( ) )
Assert . assertEquals ( "Cache consistency is broken for key: " + k , 0 , clnt . cache ( CACHE_NAME ) . get ( k ) )
assertEquals ( i , cfg . setWalSegmentSize ( i ) . getWalSegmentSize ( ) )
assertEquals ( ( Integer ) 6 , cache . get ( "key2" ) )
assertNull ( cache . removeAllAsync ( F . asSet ( "key1" , "key2" ) ) . get ( ) )
assertEquals ( Integer . valueOf ( 1 ) , peek ( c , key ) )
assertFalse ( jcache ( ) . remove ( UUID . randomUUID ( ) . toString ( ) ) )
assertFalse ( jcache ( ) . remove ( UUID . randomUUID ( ) . toString ( ) ) )
assertFalse ( jcache ( ) . remove ( UUID . randomUUID ( ) . toString ( ) ) )
assertFalse ( jcache ( ) . remove ( UUID . randomUUID ( ) . toString ( ) ) )
assertNotSame ( "Method metrics() should return snapshot." , cache . localMetrics ( ) , cache . localMetrics ( ) )
assertEquals ( 0.0 , cache . localMetrics ( ) . getAverageRemoveTime ( ) , 0.0 )
assertEquals ( 0.0 , cache . localMetrics ( ) . getAverageRemoveTime ( ) , 0.0 )
assertEquals ( 0.0 , cache . localMetrics ( ) . getAverageRemoveTime ( ) , 0.0 )
assertEquals ( 0.0 , cache . localMetrics ( ) . getAverageGetTime ( ) , 0.0 )
assertEquals ( 0.0f , cache . localMetrics ( ) . getAveragePutTime ( ) )
assertEquals ( 0.0f , cache . localMetrics ( ) . getAveragePutTime ( ) )
assertEquals ( 1L , cache . localMetrics ( ) . getCacheRemovals ( ) )
assertEquals ( 1 , cache . get ( new TestAffinityKey ( 1 , "1" ) ) )
assertEquals ( affinity ( ) . partitions ( ) , grid ( 0 ) . affinity ( DEFAULT_CACHE_NAME ) . partitions ( ) )
assertEquals ( F . first ( nodes ( assignment , aff , part ) ) , grid ( 0 ) . affinity ( DEFAULT_CACHE_NAME ) . mapPartitionToNode ( part ) )
assertEquals ( expPart , grid ( i ) . affinity ( DEFAULT_CACHE_NAME ) . partition ( key ) )
assertTrue ( "Maximum number of permits exceeded: " + max . get ( ) , max . get ( ) <= 51 )
assertTrue ( log . contains ( "Default lock timeout" ) )
assertTrue ( "Failed to wait for eviction event" , latch . await ( 10 , TimeUnit . SECONDS ) )
assertTrue ( "Candidate: " + c , mask . get ( flags ) )
assertFalse ( "Mask check failed [mask=" + mask + ", c=" + c + ']' , mask . get ( flags ) )
assertEquals ( g0 . affinity ( DEFAULT_CACHE_NAME ) . mapKeyToNode ( i ) . id ( ) , g1 . affinity ( DEFAULT_CACHE_NAME ) . mapKeyToNode ( i ) . id ( ) )
assertEquals ( ADDITION_CACHE_NUMBER , cnt )
assertTrue ( lsnr . check ( getTestTimeout ( ) ) )
assertTrue ( logTxDumpLsnr . check ( ) )
assertTrue ( rollbackDumpLsnr . check ( ) )
assertTrue ( rollbackDumpLsnr . check ( ) )
assertTrue ( logTxDumpLsnr . check ( ) )
assertTrue ( rollbackDumpLsnr . check ( ) )
assertTrue ( rollbackDumpLsnr . check ( ) )
assertFalse ( logTxDumpLsnr . check ( ) )
assertNotNull ( e )
performAction ( cache -> assertEquals ( kvMap , cache . getAll ( kvMap . keySet ( ) ) ) )
performAction ( cache -> assertEquals ( kvMap , ( cache . getAllAsync ( kvMap . keySet ( ) ) . get ( ) ) ) )
assertEquals ( kvMap . get ( entry . getKey ( ) ) , entry . getValue ( ) )
assertTrue ( grid0 . cache ( cacheName ( ) ) . localSize ( ) == 0 )
assertEquals ( 1 , cache . get ( 1 ) )
assertNotNull ( client . cache ( "c1" ) )
assertEquals ( 1 , all . size ( ) )
assertEquals ( name , i , node . cache ( name ) . get ( i ) )
assertNotSame ( cacheMgr , cachingProvider . getCacheManager ( ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertEquals ( futs . get ( j ) , sortedFuts . get ( j ) )
assertNotNull ( ignite0 . createCache ( ccfg ) )
assertEquals ( 3 , ex . context ( ) . discovery ( ) . aliveServerNodes ( ) . size ( ) )
assertNotNull ( cache1 . get ( i ) )
assertTrue ( F . isEmpty ( metaDir . list ( ) ) )
assertFalse ( clsAwareNodes . isEmpty ( ) )
assertEquals ( 10 , atomic . get ( ) )
assertEquals ( getQueueCache ( queue1 ) , getQueueCache ( queue2 ) )
assertNotNull ( ( ( IgniteKernal ) grid ( 0 ) ) . internalCache ( ccfg . getName ( ) ) )
assertTrue ( "IgniteClientDisconnectedException was not thrown" , countReachedZero )
assertNotNull ( cache )
assertEquals ( BATCH_SIZE + 1 , seq . batchSize ( ) )
assertNotNull ( e . getKey ( ) , grid ( 0 ) . atomicLong ( e . getKey ( ) , e . getValue ( ) , INITIAL_VAL , false ) )
assertNotNull ( e . getKey ( ) , grid ( 0 ) . atomicReference ( e . getKey ( ) , e . getValue ( ) , INITIAL_VAL , false ) )
atomicSeqs . forEach ( l -> assertEquals ( l . name ( ) , INITIAL_VAL , l . get ( ) ) )
assertNotNull ( grid ( 0 ) . atomicStamped ( e . getKey ( ) , e . getValue ( ) , INITIAL_VAL , INITIAL_STAMP , false ) )
igniteCollections . forEach ( c -> assertFalse ( name ( c ) , c . contains ( UNKNOWN_ELEM ) ) )
igniteCollections . forEach ( c -> assertFalse ( name ( c ) , c . contains ( UNKNOWN_ELEM ) ) )
assertTrue ( latch2 . await ( 10000 ) )
assertNotNull ( grid ( 0 ) . countDownLatch ( LATCH_NAME , LATCH_INITIAL_VALUE , false , false ) )
igniteCollections . forEach ( c -> assertEquals ( name ( c ) , name ( c ) , cast ( c ) . peek ( ) ) )
assertFalse ( stringLogger . toString ( ) . contains ( NullPointerException . class . getName ( ) ) )
assertEquals ( ITERATION_NUM * THREAD_NUM , seq . get ( ) )
assertEquals ( ITERATION_NUM * THREAD_NUM , seq . get ( ) )
assertEquals ( 5 * ITERATION_NUM * THREAD_NUM , seq . get ( ) )
assertEquals ( new TestValue ( i ) , grid ( g ) . cache ( "replicated" ) . get ( i ) )
assertNull ( ( ( IgniteKernal ) ignite ( 0 ) ) . context ( ) . cache ( ) . internalCache ( CACHE_NAME1 ) )
assertNotNull ( client . cache ( CACHE_NAME1 ) )
assertEquals ( ( Integer ) i , val )
assertEquals ( 1 + BACKUPS , cnt )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertEquals ( i , grid ( i % 2 ) . cache ( "cache" + ( 1 + ( i >> 3 ) % 3 ) ) . get ( i ) )
assertNotNull ( key )
assertNotNull ( key )
assertEquals ( GRID_CNT , keys . size ( ) )
assertTrue ( "Remote MVCC is not empty: " + entry , entry == null || entry . remoteMvccSnapshot ( ) . isEmpty ( ) )
assertFalse ( "The message was found" , lnsr . check ( ) )
assertEquals ( "Invalid cache size" , fullCacheSize , cache . size ( ) )
assertEquals ( null , c . localPeek ( key , CachePeekMode . ONHEAP ) )
assertEquals ( beforeSize , cache1 . localMetrics ( ) . getSize ( ) )
assertEquals ( backups . size ( ) , cnt - primary . size ( ) )
assertFalse ( "For key: " + i , grid ( 0 ) . affinity ( DEFAULT_CACHE_NAME ) . isPrimaryOrBackup ( grid ( 0 ) . localNode ( ) , i ) )
assertEquals ( 0 , cache . size ( ) )
assertNull ( cache . getAndPut ( key , "val" ) )
assertNull ( cache . getAndPut ( key , "val" ) )
assertTrue ( cache . putIfAbsent ( key , "val" ) )
assertTrue ( cache . putIfAbsent ( key , "val" ) )
assertTrue ( cache . putIfAbsent ( key , "val" ) )
assertEquals ( OWNING , part . state ( ) )
assertTrue ( nodeFailure . get ( ) )
assertTrue ( lsnr . check ( ) )
assertEquals ( ( Integer ) 100 , cache . localPeek ( key , CachePeekMode . ONHEAP ) )
assertEquals ( 1 , cache . get ( 1 ) )
assertTrue ( logLsnr . check ( ) )
assertEquals ( expectedActivationHash , activationHash )
assertTrue ( clusterActive )
assertTrue ( gridStartFut . get ( ) )
assertEquals ( i , queue . poll ( ) )
assertEquals ( 4 , allMemPlcs . size ( ) )
assertFalse ( log0 . toString ( ) . contains ( WARN_MSG_PREFIX ) )
assertTrue ( grid ( 0 ) . cluster ( ) . state ( ) . active ( ) )
assertTrue ( "Should be empty : " + partitions , partitions . isEmpty ( ) )
assertEquals ( i , cache . get ( i ) . intValue ( ) )
assertNotNull ( client . cache ( DEFAULT_CACHE_NAME ) )
assertNotNull ( client . cache ( DEFAULT_CACHE_NAME ) )
assertFalse ( handleFired . get ( ) )
assertTrue ( lsnr . check ( ) )
assertEquals ( ( Integer ) i , cache . get ( i ) )
assertEquals ( valueWithRedundancyForKey ( i ) , cacheRestart . get ( i ) )
assertTrue ( opened . isEmpty ( ) )
assertEquals ( new IndexedObject ( k + 1 ) , cache1 . get ( k ) )
assertEquals ( "too big size of WAL without checkpoint" , checkpointReason )
assertEquals ( crc0 , crc1 )
assertTrue ( recordedAfterSleep )
assertEquals ( i + 1 , map . get ( i ) )
Assert . assertNotNull ( pageLockTrackerMXBean )
assertNotNull ( metaStorage )
assertNotNull ( metaStorage )
assertFalse ( backoff . reset ( ) )
assertThatThrottlingHappened ( throttle )
assertEquals ( "test" , cache . get ( 1 ) )
assertEquals ( "test" , cache . get ( 1 ) )
assertTrue ( committedVMSize - initVMsize <= ALLOWED_DELTA )
assertFalse ( G . allGrids ( ) . isEmpty ( ) )
assertTrue ( F . isEmpty ( res . exceptions ( ) ) )
assertEquals ( "value" , snp . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
assertEquals ( 0 , io ( TrackingPageIO . VERSIONS ) . getFreeSpace ( pageSz , addr ) )
assertTrue ( PageMemoryTrackerPluginProvider . tracker ( ignite ) . checkPages ( true ) )
assertTrue ( PageMemoryTrackerPluginProvider . tracker ( ignite0 ) . checkPages ( true ) )
assertTrue ( future . get ( 20 ) instanceof IgniteInterruptedCheckedException )
assertTrue ( future . get ( 20 ) instanceof IgniteInterruptedCheckedException )
assertTrue ( future . get ( 20 ) instanceof IgniteInterruptedCheckedException )
assertTrue ( aware . lock ( 5 ) )
assertTrue ( future . get ( 20 ) instanceof IgniteInterruptedCheckedException )
assertTrue ( aware . lock ( 5 ) )
assertEquals ( client . cluster ( ) . nodes ( ) . size ( ) , 5 )
assertNull ( npe . get ( ) )
assertNotNull ( client . cache ( DEFAULT_CACHE_NAME ) )
assertTrue ( latch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( 2 , node2 . cluster ( ) . nodes ( ) . size ( ) )
assertTrue ( size <= QUERY_COUNT * 1024 )
assertEquals ( max , cntr . get ( ) )
assertEquals ( ( i + 1 ) * 10 , grid ( 0 ) . cache ( caches [ i ] . getName ( ) ) . get ( 1 ) )
assertEquals ( i + 1 , futs . get ( i ) . get ( ) )
Assert . fail ( "Critical failure occurred '" + error + "'" )
assertEquals ( ENTRIES_NUM , res . size ( ) )
assertEquals ( 3 , ignite0 . cluster ( ) . nodes ( ) . size ( ) )
assertNotNull ( clusterName )
assertEquals ( "test" , grid . utilityCache ( ) . get ( key ) )
assertTrue ( "Should be client" , client . configuration ( ) . isClientMode ( ) )
assertEquals ( expCnt , cnt . get ( ) )
assertEquals ( MSG_CNT * ( GRID_CNT - 1 ) , cnt . get ( ) )
assertEquals ( MSG_CNT * ( GRID_CNT + 1 ) , cnt . get ( ) )
assertEquals ( MSG_CNT * GRID_CNT , cnt . get ( ) )
assertTrue ( s )
assertTrue ( s )
assertEquals ( MSG_CNT * ( GRID_CNT + 1 ) , cnt . get ( ) )
assertFalse ( failed )
assertEquals ( 999 , pair . getValue ( ) . intValue ( ) )
assertEquals ( map . get ( key ) , cache . get ( key ) )
assertEquals ( v0 , cache . get ( k ) )
assertEquals ( ( byte ) i , cache . get ( i ) . byteValue ( ) )
assertTrue ( failed )
assertEquals ( Integer . valueOf ( 0 ) , cache . get ( 0 ) )
assertTrue ( thrown )
assertEquals ( "value" , ignite . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
assertEquals ( i + " " + j , val , metastorage ( j ) . read ( key ) )
assertEquals ( "value" , newNode . context ( ) . distributedMetastorage ( ) . read ( "key" ) )
assertNull ( histCache . get ( 0 ) )
assertEquals ( INITIAL_VERSION , metastorage . read ( versionKey ( ) ) )
assertEquals ( 1 , metastorage . cache . size ( ) )
assertTrue ( str . matches ( translated ) )
assertEquals ( ignite . context ( ) . rest ( ) . getClass ( ) , GridRestProcessor . class )
assertFalse ( commands . contains ( GridRestCommand . LOG ) )
assertNotNull ( node . createCache ( CACHE_NAME ) )
assertTrue ( latch . await ( getTestTimeout ( ) , TimeUnit . MILLISECONDS ) )
Assert . assertTrue ( containsAddr )
assertNull ( client . cache ( CACHE ) . get ( "key" ) )
assertNull ( ignite . cache ( EXPIRATION_TEST_CACHE ) . get ( "key" ) )
assertTrue ( ignite . cache ( EVICTION_TEST_CACHE ) . getAll ( insertedKeys ) . size ( ) < entriesCnt )
assertNotNull ( compute ( grid ( ALLOWED ) ) . call ( c ) )
assertEquals ( NODES_CNT , res . size ( ) )
assertEquals ( 42 , svc . hello ( ) )
assertTrue ( "Waiting for services deployment timed out." , latch . await ( 30 , TimeUnit . SECONDS ) )
assertTrue ( "Waiting for services deployment timed out." , latch . await ( 30 , TimeUnit . SECONDS ) )
assertEquals ( 0 , DummyService . started ( name ) - DummyService . cancelled ( name ) )
assertEquals ( 10 , svc . get ( ) )
assertEquals ( extras , svc . get ( ) )
assertEquals ( 0 , MyServiceImpl . cnt . get ( ) )
assertEquals ( topVer , sut . topologyVersion ( ) )
assertEquals ( nodeId , sut . originNodeId ( ) )
assertEquals ( srvcId , sut . serviceId ( ) )
assertFalse ( getErr ( ) . contains ( "Cache is not configured:" ) )
assertTrue ( res . get ( ) )
assertTrue ( log . toString ( ) . contains ( msg ) )
assertEquals ( "d7dbe555be2eee7fa658299850169fa1" , md5 )
assertEquals ( 1 , U . toSocketAddresses ( addrs , hostNames , port ) . size ( ) )
assertThat ( logMessages , is ( empty ( ) ) )
assertTrue ( "cannot delete file" , deleted )
assertNull ( map . get ( 0 ) )
assertNull ( map . get ( 32 ) )
assertNull ( map . remove ( 0 ) )
assertEquals ( 99_999L * 100_000L / 2 , cntr . get ( ) )
assertEquals ( 4 , directPositionMap . size ( ) )
assertEquals ( 2 , chain . get ( ) )
assertEquals ( strs , res )
assertEquals ( strs , res )
assertNull ( "Unexpected exception on socket close" , err . get ( ) )
assertEquals ( obj . toStringManual ( ) , obj . toStringAutomatic ( ) )
assertEquals ( manual , automatic )
assertTrue ( "Wrong string: " + k , k . toString ( ) . startsWith ( "IgniteTxKey [" ) )
assertEquals ( 2 , set . size ( ) )
assertEquals ( 6 , set . size ( ) )
assertEquals ( 1L , date . getTime ( ) )
assertEquals ( i , set . size ( ) )
assertEquals ( 42 , val )
assertEquals ( k , c2 . get ( k ) . val )
assertEquals ( "java.lang.String" , clsName )
assertTrue ( sumQueried == sumPopulated * SCALE_FACTOR )
assertThatFailureHandlerIsNotCalled ( )
assertThatFailureHandlerIsNotCalled ( )
assertFalse ( classFound ( getClass ( ) . getClassLoader ( ) , PREDICATE_CLASSNAME ) )
assertTrue ( errMsgLsnr . check ( ) )
assertTrue ( errMsgLsnr . check ( ) )
assertTrue ( errMsgLsnr . check ( ) )
assertEquals ( val , new TestJavaObject ( ) . setIntBoxed ( 1 ) )
assertEquals ( val , new TestJavaObject ( ) . setIntBoxed ( 1 ) )
assertEquals ( val , new TestJavaObject ( ) )
assertTrue ( listener . check ( ) )
assertTrue ( ClientExceptionsUtils . isClientNodeTopologyException ( clusterTopologyCheckedException ( ) , node ) )
assertFalse ( ClientExceptionsUtils . isClientNodeTopologyException ( clusterTopologyCheckedException ( ) , node ) )
assertEquals ( "test" , srv . getOrCreateCache ( "test" ) . get ( "test" ) )
