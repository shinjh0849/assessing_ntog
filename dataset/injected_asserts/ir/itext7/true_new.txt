assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
fail ( "IllegalArgumentException expected" )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertEquals ( 10 , barcode . getAspectRatio ( ) , 0 )
assertEquals ( 63 , barcode . getOptions ( ) )
assertEquals ( 100 , barcode . getOptions ( ) )
assertSame ( metaInfoAfter , e . getMetaInfo ( ) )
assertEquals ( processor , event . getActiveProcessor ( processor . getProductName ( ) ) )
assertTrue ( activeProcessor instanceof TestProductEventProcessor )
assertTrue ( productProcessorFactory instanceof DefaultProductProcessorFactory )
assertNull ( ContextManager . getInstance ( ) . getRecognisedNamespace ( notRegisteredNamespace ) )
assertEquals ( "1994" , result )
assertEquals ( "1992" , result )
assertEquals ( "2010" , result )
assertEquals ( "2009" , result )
assertEquals ( "plain text" , result )
assertEquals ( "plain\\text" , result )
assertEquals ( "plain text" , result )
assertEquals ( expectedResult , result )
assertEquals ( "Created at " + DateTimeUtil . format ( DateTimeUtil . getCurrentTimeDate ( ) , "yyyy" ) , newProducerLine )
assertEquals ( "plain text" , result )
assertEquals ( "type1" , result )
assertNotEquals ( sequenceId1 . getId ( ) , sequenceId2 . getId ( ) )
assertEquals ( "rO0ABXA=" , Base64 . encodeObject ( null ) )
assertEquals ( nowEpoch , nowDateTimeUtilEpoch , ONE_SECOND_DELTA )
assertEquals ( 1588636800000d - offset , millisFromEpochTo2020_05_05 , ZERO_DELTA )
assertEquals ( millisFromEpochToCurrentTime , getUtcMillisFromEpochWithNullParam , ONE_SECOND_DELTA )
assertEquals ( 1588636800000d - offset , relativeTime , ZERO_DELTA )
assertEquals ( expectedMap , destination )
assertEquals ( expectedMap , map )
assertEquals ( expectedResult , MessageFormatUtil . format ( pattern , arguments ) )
assertEquals ( stdOutput , processInfo . getProcessStdOutput ( ) )
assertEquals ( "This is error info" , stringBuilder . toString ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( dest , cmp , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( dest , cmp , destinationFolder , "diff_" ) )
fail ( errorMessage )
assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyFields02.pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destFilename , sourceFolder + "cmp_copyFields05.pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destFile , sourceFolder + "cmp_AnnotationSampleStandard_copy.pdf" , destinationFolder , "diff_" ) )
fail ( errorMessage )
fail ( errorMessage )
fail ( errorMessage )
fail ( errorMessage )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
fail ( "Xfdf files are not equal" )
assertSame ( DUMMY_OPTIONS , builder . getOptions ( ) )
assertSame ( PdfAConformanceLevel . PDF_A_1A , builder . getConformanceLevel ( ) )
assertSame ( metaInfoContainer , canvas . < MetaInfoContainer > getProperty ( Property . META_INFO ) )
assertNull ( canvas . < MetaInfoContainer > getProperty ( Property . META_INFO ) )
assertEquals ( "Caption" , builder . getCaption ( ) )
assertSame ( DUMMY_RECTANGLE , builder . getWidgetRectangle ( ) )
assertEquals ( 5 , pageNum )
fail ( errorMessage )
assertNull ( name )
assertNull ( ResourceUtil . getResourceStream ( "some-random-resource.zzz" ) )
assertEquals ( 37084801881332636L , crc64 ( Dictionary . getData ( ) ) )
assertArrayEquals ( expectedOutput , output )
assertNull ( FontCache . getCompatibleCidFont ( "78-RKSJ-V" ) )
assertThrows ( IOException . class , ( ) -> FontCache . getCid2Byte ( "78ms-RKSJ-H" ) )
assertArrayEquals ( initialDifferences , encoding . differences )
assertEquals ( "a" , encoding . differences [ 0 ] )
assertEquals ( "a" , encoding . differences [ 255 ] )
assertNull ( encoding . getDifference ( 0 ) )
assertNotNull ( font . getGlyph ( 'A' ) )
assertNotNull ( font . getGlyph ( 'A' ) )
assertEquals ( expected , actual )
assertNull ( part . actualText )
assertEquals ( "Belarus" , lineToBeReplaced . toString ( ) )
assertThrows ( Exception . class , ( ) -> ImageTypeDetector . detectImageType ( stream ) )
assertArrayEquals ( imageDataFromBytes . getData ( ) , imageDataFromUrl . getData ( ) )
assertEquals ( IOException . UnsupportedBoxSizeEqEq0 , e . getMessage ( ) )
assertArrayEquals ( stringArray , dir . getField ( 305 ) . getAsStrings ( ) )
assertEquals ( Objects . toString ( expected ) , new String ( bytes . toByteArray ( ) , StandardCharsets . UTF_8 ) )
assertEquals ( "/Name1 " , new String ( read ) )
assertEquals ( "/Name" , tok . readString ( 5 ) )
assertEquals ( content [ i ] , source . get ( i ) )
assertArrayEquals ( message , expecteds , actuals )
assertArrayEquals ( message , expecteds , actuals )
assertArrayEquals ( message , expecteds , actuals )
assertEquals ( 0 , currentCalendar . getTime ( ) . compareTo ( currentDate ) )
assertNotNull ( ghostscriptHelper . getCliExecutionCommand ( ) )
assertNotNull ( ghostscriptHelper . getCliExecutionCommand ( ) )
assertNotNull ( imageMagickHelper . getCliExecutionCommand ( ) )
assertEquals ( hashtable . count , clonedTable . count )
assertFalse ( matcher . matches ( ) )
assertThrows ( UnknownHostException . class , ( ) -> UrlUtil . getInputStreamOfFinalConnection ( invalidUrl ) )
assertNotNull ( doc )
assertEquals ( SAXParserFactory . newInstance ( ) . getClass ( ) , factory . getClass ( ) )
assertEquals ( 3 , access . publicGetEvents ( document . getDocumentIdWrapper ( ) ) . size ( ) )
assertArrayEquals ( rgb . colorValue , Color . convertCmykToRgb ( cmyk ) . colorValue , EPS )
assertEquals ( cmpRgb , resultRgb )
assertArrayEquals ( cmpCmyk , resultCmyk . colorValue , delta )
assertNotNull ( stream )
assertEquals ( 0 , font . getWidth ( textAsString ) )
assertEquals ( expected , glyphLine )
assertArrayEquals ( new byte [ 0 ] , bytes )
assertArrayEquals ( new byte [ ] { E_CODE } , bytes )
assertArrayEquals ( new byte [ 0 ] , bytes )
assertNull ( glyph . addImageWithTransformationMatrix ( img , 100 , 0 , 0 , 100 , 0 , 0 , true ) )
assertEquals ( rotateOne , expected )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertArrayEquals ( expected , src , 0 )
assertArrayEquals ( expected , dest , 0 )
assertArrayEquals ( expected , src , 0 )
assertArrayEquals ( expected , dest , 0 )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertArrayEquals ( expected , dest , 0 )
assertEquals ( expected , dest )
assertEquals ( expected , dest )
assertEquals ( shouldBe , rslt )
assertEquals ( shouldBe , rslt )
assertEquals ( "Point: [x=1.23,y=1.1]" , first . toString ( ) )
assertTrue ( result )
assertFalse ( result )
assertFalse ( result )
assertEquals ( shouldBe , rslt )
assertEquals ( "" , ArmenianNumbering . toArmenian ( - 10 ) )
assertEquals ( "" , GeorgianNumbering . toGeorgian ( - 10 ) )
assertEquals ( "-vi" , RomanNumbering . convert ( - 6 ) )
assertEquals ( "CCCLXXXVI" , RomanNumbering . toRomanUpperCase ( 386 ) )
assertNull ( new CompareTool ( ) . compareByContent ( outputFileName , cmpFileName , destinationFolder ) )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> stream . write ( new byte [ 1 ] , 0 , - 1 ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( dest , cmp , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( dest , cmp , destinationFolder ) )
assertNull ( copiedDestination )
assertEquals ( EXPECTED , result )
assertTrue ( dict . getIndirectReference ( ) . getObjNumber ( ) > 0 )
assertThrows ( PdfException . class , ( ) -> pdfDocument . getDocumentInfo ( ) )
assertEquals ( expectedNames , actualNames )
assertTrue ( object instanceof PdfDictionary )
assertNotNull ( ( ( PdfIndirectReference ) catalog . get ( new PdfName ( "a" ) ) ) . getRefersTo ( true ) )
assertEquals ( "New Title" , outline . getTitle ( ) )
assertNull ( compareResult )
assertEquals ( PdfVersion . PDF_1_4 , pdfDoc . getPdfVersion ( ) )
assertNull ( pdfDoc . getReader ( ) . getPdfAConformanceLevel ( ) )
assertEquals ( expected , textArray . get ( 0 ) )
assertEquals ( new PdfString ( string ) , textArray . get ( 0 ) )
assertEquals ( a + b , textArray . getAsNumber ( 0 ) . floatValue ( ) , 0.0001 )
fail ( "Exception expected" )
assertNotEquals ( key1Ref , key2Ref )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , inFileName , destinationFolder ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnEnter ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnFocus ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnLostFocus ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnMouseUp ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnPageClosed ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnPageOpened ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( action . getPdfObject ( ) . getAsString ( PdfName . T ) , aa . getOnPageVisible ( ) . getPdfObject ( ) . getAsString ( PdfName . T ) )
assertEquals ( dictionary , target . getPdfObject ( ) )
assertEquals ( PdfName . C , dictionary . get ( PdfName . R ) )
assertEquals ( dict , pdf3DAnnotation . getDefaultInitialView ( ) )
assertEquals ( flag , pdf3DAnnotation . isInteractive ( ) . getValue ( ) )
assertNull ( result . getSubtype ( ) )
assertArrayEquals ( lineArray , pdfLineAnnotation . getLine ( ) . toFloatArray ( ) , FLOAT_EPSILON_COMPARISON )
assertEquals ( dict , pdfLineAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfLineAnnotation . getBorderStyle ( ) . getAsName ( PdfName . S ) )
assertEquals ( PdfObject . DICTIONARY , annotation . getExternalData ( ) . getType ( ) )
assertArrayEquals ( vertices , pdfPolyGeomAnnotation . getVertices ( ) . toFloatArray ( ) , FLOAT_EPSILON_COMPARISON )
assertEquals ( path . toString ( ) , pdfPolyGeomAnnotation . getPath ( ) . toString ( ) )
assertEquals ( style , pdfPolyGeomAnnotation . getBorderStyle ( ) )
assertEquals ( PdfName . D , pdfPolyGeomAnnotation . getBorderStyle ( ) . getAsName ( PdfName . S ) )
assertNull ( tag . getActualText ( ) )
assertTrue ( characterRenderInfo . getBoundingBox ( ) . equalsWithEpsilon ( new Rectangle ( - 8.616f , 0f , 11.1f , 19.344f ) ) )
assertEquals ( KernelExceptionMessageConstant . UNBALANCED_BEGIN_END_MARKED_CONTENT_OPERATORS , message )
assertEquals ( expectedText , actualText )
assertEquals ( expectedText , actualText )
assertEquals ( 21.6 , listener . glyphWidth , 1e-5 )
assertEquals ( 600 , listener . firstTextRenderInfo . getFont ( ) . getFontProgram ( ) . getAvgWidth ( ) , 0.01f )
assertEquals ( "1234\nt5678" , extractedText )
assertEquals ( "Your " , extractedText )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp , outputPath ) )
assertEquals ( "Expected fill opacity not found" , expOpacity , textRenderInfo . get ( "FillOpacity" ) )
assertEquals ( "*0*" , PdfTextExtractor . getTextFromPage ( pdfDocument . getPage ( 1 ) ) )
assertEquals ( "MyriadPro-Bold font." , PdfTextExtractor . getTextFromPage ( pdfDocument . getPage ( 1 ) ) )
assertEquals ( "Pname Dname Email Address" , txt )
assertEquals ( origText , result )
assertEquals ( "Point [x=1.23, y=5.34, z=234.23]" , dp . toString ( ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> childs . add ( new PolyNode ( ) ) )
assertNull ( node . getNext ( ) )
assertSame ( child2 , child1 . getNext ( ) )
assertSame ( firstChild , tree . getFirst ( ) )
assertNull ( tree . getFirst ( ) )
assertTrue ( ( ( PdfString ) field . getValue ( timeValueAsString ) ) . getValue ( ) . startsWith ( "D:1986" ) )
assertTrue ( ( ( PdfString ) field . getValue ( timeValueAsString ) ) . getValue ( ) . startsWith ( "D:1986" ) )
assertEquals ( schema . getField ( fieldName ) . getPdfObject ( ) , pdfObject )
assertEquals ( key , sort . getPdfObject ( ) . getAsName ( PdfName . S ) . getValue ( ) )
assertEquals ( testAscendings [ i ] , sort . getPdfObject ( ) . getAsArray ( PdfName . A ) . getAsBoolean ( i ) . getValue ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFilePath , cmpFilePath , DESTINATION_FOLDER ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFilePath , cmpFilePath , DESTINATION_FOLDER ) )
assertTrue ( function instanceof PdfType0Function )
assertTrue ( function instanceof PdfType2Function )
assertTrue ( function instanceof PdfType4Function )
assertEquals ( expected [ i ] [ j ] , actual , DELTA )
assertEquals ( KernelExceptionMessageConstant . PDF_TYPE0_FUNCTION_NOT_NULL_PARAMETERS , e . getMessage ( ) )
assertEquals ( KernelExceptionMessageConstant . PDF_TYPE0_FUNCTION_INVALID_DECODE , e . getMessage ( ) )
assertEquals ( KernelExceptionMessageConstant . PDF_TYPE0_FUNCTION_INVALID_SAMPLES , e . getMessage ( ) )
assertArrayEquals ( new double [ ] { 9 } , output , EPSILON )
assertArrayEquals ( new double [ ] { - 2 } , output , EPSILON )
assertArrayEquals ( new double [ ] { 4 } , output , EPSILON )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "output_copy_layered.pdf" , sourceFolder + "input_layered.pdf" , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destFilename , cmpFilename , DESTINATION_FOLDER ) )
assertEquals ( expectedMessage , new CompareTool ( ) . compareDocumentInfo ( agpl , licensed ) )
fail ( "Resultant xml is different." )
assertNotNull ( document )
assertEquals ( name , dictPathItem . getKey ( ) )
assertNotNull ( path1 . toXmlNode ( doc ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , DESTINATION_FOLDER , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( position1 , position2 )
assertEquals ( position1 , position1 )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( out , cmp , DESTINATION_FOLDER ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff03_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff05_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( true )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "A\nAA\nB\nBB\nC\nCC\nD\nDD" , text )
assertEquals ( "A \nB \nC \nD" , text )
assertEquals ( "A \nB \nC \nD" , text )
assertEquals ( "A \nB \nC \nD" , text )
assertEquals ( "A\nB\nX\nC" , text )
assertEquals ( "WA" , text )
assertEquals ( "Hello" , text )
assertEquals ( expectedText , text )
assertEquals ( "Preface" , text )
assertEquals ( "Preface" , text )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( "extracted text (" + text + ") must contain '" + text1 + "'" , text . contains ( text1 ) )
assertEquals ( true , p1 . isKeepTogether ( ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , DESTINATION_FOLDER , "diff" ) )
assertThrows ( IllegalArgumentException . class , ( ) -> new RangeBuilder ( ) . addRange ( 11 , 10 ) )
assertNull ( pdfXObject . getPdfObject ( ) . get ( PdfName . Resources ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> areaBreakRenderer . getOccupiedArea ( ) )
assertNull ( areaBreakRenderer . < Property > getDefaultProperty ( Property . BORDER ) )
assertEquals ( areaBreakRenderer , areaBreakRenderer . setParent ( new AreaBreakRenderer ( new AreaBreak ( ) ) ) )
assertNull ( areaBreakRenderer . getNextRenderer ( ) )
assertArrayEquals ( new float [ ] { 45f , 45f } , widthAndHeight , delta )
assertArrayEquals ( new float [ ] { 200f , 200.000015f } , widthAndHeight , delta )
assertArrayEquals ( new float [ ] { 200f , 112.5f } , widthAndHeight , delta )
assertArrayEquals ( new float [ ] { 533.3333f , 300f } , widthAndHeight , delta )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 50.0f , info . minContent , EPS )
assertEquals ( 60.0f , info . minContent , EPS )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , DESTINATION ) )
assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , DESTINATION ) )
assertEquals ( 13.79999f , lineHeight , EPS )
assertEquals ( 13.79999f , lineHeight , EPS )
assertEquals ( 13.79999f , lineHeight , EPS )
assertEquals ( 13.79999f , lineHeight , EPS )
assertEquals ( 200 , lineHeight , EPS )
assertSame ( metaInfo , metaInfoContainer . getMetaInfo ( ) )
assertEquals ( ( Integer ) 4 , TargetCounterHandler . getPageByID ( divRenderer , id ) )
assertEquals ( ( Integer ) 4 , TargetCounterHandler . getPageByID ( paragraphRenderer , id ) )
assertEquals ( ( Integer ) 4 , TargetCounterHandler . getPageByID ( imageRenderer , id ) )
assertEquals ( ( Integer ) 4 , TargetCounterHandler . getPageByID ( lineRenderer , id ) )
assertNull ( page )
assertArrayEquals ( new int [ ] { 0 , 0 } , range )
assertArrayEquals ( new int [ ] { 0 , 3 } , range )
assertArrayEquals ( new int [ ] { 0 , 0 } , range )
assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder ) )
assertEquals ( result1 . getOccupiedArea ( ) , result2 . getOccupiedArea ( ) )
assertEquals ( "NotoSans" , pdfFont . getFontProgram ( ) . getFontNames ( ) . getFontName ( ) )
fail ( "PdfAConformanceException expected" )
assertNull ( url )
assertEquals ( oid , DigestAlgorithms . getDigest ( oid ) )
assertNull ( DigestAlgorithms . getAllowedDigest ( "" ) )
assertThrows ( IllegalArgumentException . class , ( ) -> DigestAlgorithms . getAllowedDigest ( null ) )
assertEquals ( 0 , blankSign . length )
assertNull ( verification . getParent ( null , new Certificate [ 0 ] ) )
assertTrue ( verifier . verifyRootCertificate )
assertTrue ( new Rectangle ( 0 , 0 ) . equalsWithEpsilon ( xObject . getBBox ( ) . toRectangle ( ) ) )
assertEquals ( PdfAConformanceLevel . PDF_A_1A , ( ( PdfAAgnosticPdfDocument ) signer . getDocument ( ) ) . getConformanceLevel ( ) )
assertNull ( SignatureMechanisms . getAlgorithm ( null ) )
assertEquals ( "RSA" , SignatureMechanisms . getAlgorithm ( "1.2.840.113549.1.1.1" ) )
assertEquals ( " " , SignatureMechanisms . getAlgorithm ( " " ) )
assertNotNull ( signatureUtil . extractRevision ( "Signature1" ) )
assertEquals ( infoBouncyCastle , clientBouncyCastle . tsaInfo )
assertEquals ( CRLVerifier . class . getName ( ) + ": Mock verification" , verificationOK . toString ( ) )
assertTrue ( signatureApp . getPdfObject ( ) . isDictionary ( ) )
assertNull ( verificationResult )
assertTrue ( verifyTest ( builder , certsSrc + "signCertRsaWithExpiredChain.pem" , caCert . getNotBefore ( ) ) )
assertTrue ( verifyRes )
assertEquals ( expectedCss , fontFaceRule . toString ( ) )
assertNull ( fontFace )
assertNotNull ( ruleSets )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( "" , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cssFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( 0 , pseudoElementNode . getAttributes ( ) . size ( ) )
assertEquals ( expected , beforePseudoElemName )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNotNull ( backgroundResolver )
assertNotNull ( backgroundResolver )
assertNotNull ( backgroundResolver )
assertNotNull ( borderRadiusResolver )
assertNotNull ( borderRadiusResolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertNotNull ( resolver )
assertTrue ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertTrue ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertTrue ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertFalse ( item . matches ( divNode ) )
assertTrue ( item . matches ( headNode ) )
assertFalse ( item . matches ( divNode ) )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertEquals ( expectedString , actualString )
assertTrue ( PortUtil . trimControlCodes ( str ) . isEmpty ( ) )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertTrue ( threw )
assertNotNull ( doc )
assertNotNull ( doc )
assertEquals ( " One=\"One\" Two=\"Two\"" , a . html ( ) )
assertEquals ( "#comment" , comment . nodeName ( ) )
assertEquals ( "Foo" , el . id ( ) )
assertEquals ( 8 , form . elements ( ) . size ( ) )
assertEquals ( "test=foo" , form . formData ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( "http://example.com/one/two.html" , a1 . absUrl ( "href" ) )
assertEquals ( "One <em>foo</em> three" , p . html ( ) )
assertEquals ( "<div><p><#text></#text></p></div>" , accum . toString ( ) )
assertEquals ( singletonAttributes ( ) , getAttributesCaseInsensitive ( inputElement ) )
assertEquals ( new String ( Character . toChars ( 135361 ) ) , t . outerHtml ( ) . trim ( ) )
assertEquals ( "&wr_id=123&mid-size=true&ok=&wr" , els . first ( ) . attr ( "href" ) )
assertEquals ( 0 , parser . getErrors ( ) . size ( ) )
assertEquals ( "hidden" , normalizedAttribute )
assertEquals ( "item" , normalizedAttributes . asList ( ) . get ( 0 ) . getKey ( ) )
assertEquals ( "One & Two" , s )
assertEquals ( body , Parser . unescapeEntities ( body , false ) )
assertNotEquals ( p1 , p2 )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "Three Two" , tq . remainder ( ) )
assertEquals ( 5 , errorList . get ( 0 ) . getPosition ( ) )
assertEquals ( Document . OutputSettings . Syntax . xml , doc . outputSettings ( ) . syntax ( ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<p>Nice</p><blockquote>Hello</blockquote>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">" , clean )
assertEquals ( "<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\"> \n<img>" , clean )
assertEquals ( "<p class=\"foo\"><a class=\"qux\">link</a></p>" , clean )
assertEquals ( "<p class=\"foo\">One</p>" , clean )
assertEquals ( "<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">" , clean )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "<a href=\"SOMETHING://x\"></a>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( 0 , doc . select ( "form" ) . textNodes ( ) . size ( ) )
assertThrows ( Selector . SelectorParseException . class , ( ) -> QueryParser . parse ( "section > a[href=\"]" ) )
assertEquals ( "span div" , parse . toString ( ) )
assertEquals ( 0 , doc . select ( "mixedCase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "lowercase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "mixedCase" ) . size ( ) )
assertEquals ( 0 , doc . select ( "lowercase" ) . size ( ) )
assertEquals ( "<div><p><#text></#text></p></div><div><#text></#text></div>" , accum . toString ( ) )
assertThrows ( ReadingByteLimitException . class , ( ) -> stream . read ( ) )
assertThrows ( ReadingByteLimitException . class , ( ) -> stream . read ( bytes , 0 , 100 ) )
assertEquals ( - 1 , stream . read ( ) )
assertEquals ( - 1 , stream . read ( bytes , 0 , 100 ) )
assertNotNull ( image )
assertNull ( cache . getImage ( "src" + i + ".jpg" ) )
assertEquals ( expectedUrl , resolver . resolveAgainstBaseUri ( relativePath ) . toExternalForm ( ) )
assertEquals ( absolutePathRoot + "%25homepath%25" , resolver . getBaseUri ( ) )
assertTrue ( equal )
assertTrue ( equal )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "unusedXObjectIntegrationTest1.pdf" , destinationFolder + "unusedXObjectIntegrationTest2.pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( output , cmp_file , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + name + ".pdf" , sourceFolder + "cmp_" + name + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + destName + ".pdf" , destinationFolder , "diff_" ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . drawOnDocument ( ( String ) null , doc , 1 ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . drawOnPage ( ( InputStream ) null , page ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . drawOnPage ( ( String ) null , null ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . drawOnCanvas ( ( String ) null , null ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . convertToXObject ( ( String ) null , doc ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . convertToXObject ( is , null ) )
assertThrows ( SvgProcessingException . class , ( ) -> SvgConverter . parse ( ( String ) null ) )
assertEquals ( 0 , doc . getLastPage ( ) . getResources ( ) . getPdfObject ( ) . size ( ) )
assertEquals ( 0 , doc . getLastPage ( ) . getResources ( ) . getPdfObject ( ) . size ( ) )
assertEquals ( "#testid" , attr . get ( "xlink:href" ) )
assertEquals ( "white" , resolvedStyles . get ( SvgConstants . Attributes . STROKE ) )
assertTrue ( popped . toString ( ) . equals ( "test" ) && testProcessorState . empty ( ) )
assertTrue ( result )
assertTrue ( result )
assertEquals ( expected , actual )
assertNull ( actual )
assertEquals ( "Courier" , info . getFontName ( ) )
assertEquals ( parentRenderer , childRenderer . getParent ( ) )
if ( assertionErrorsThrown . size ( ) != 0 ) Assert . fail ( "At least one compare file was not identical with the result" )
assertThrows ( NoSuchElementException . class , ( ) -> context . getCurrentCanvas ( ) )
assertEquals ( expected , actual )
assertEquals ( 0 , cv . getContentStream ( ) . getBytes ( ) . length )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertTrue ( result . getNamedObjects ( ) . get ( "circle1" ) instanceof CircleSvgNodeRenderer )
assertNull ( renderer . getObjectBoundingBox ( context ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertEquals ( expected , actual , 0f )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertEquals ( new Point ( 210 , 310 ) , end )
assertEquals ( new Point ( 210 , 310 ) , end )
assertEquals ( new Point ( 220 , 320 ) , end )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( context ) )
assertArrayEquals ( expected , actual , DELTA )
assertArrayEquals ( expected , actual , DELTA )
assertArrayEquals ( expected , actual , DELTA )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertEquals ( expected , actual , 1e-6f )
assertEquals ( expected , actual , 1e-6f )
assertEquals ( expected , actual , 1e-6f )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNull ( renderer . getObjectBoundingBox ( null ) )
assertNotNull ( mapper . getMapping ( ) . get ( "a" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "L" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "M" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "Q" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "S" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "s" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "V" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "z" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "T" ) )
assertNotNull ( mapper . getMapping ( ) . get ( "t" ) )
assertNull ( mapper . getMapping ( ) . get ( "3" ) )
assertNull ( mapper . getMapping ( ) . get ( "am" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual , EPS )
assertEquals ( "MarkerCircle" , SvgTextUtil . filterReferenceValue ( "url(#MarkerCircle)" ) )
assertThrows ( NumberFormatException . class , ( ) -> TransformUtils . parseTransform ( "matrix(a b c d e f)" ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
