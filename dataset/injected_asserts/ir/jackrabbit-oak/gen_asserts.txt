assertEquals ( "java.lang.Exception" , serEx . getMessage ( ) )
assertFalse ( conf . getDefault ( p . toString ( ) ) . equals ( "please" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertThat ( Bytes . copyFrom ( new byte [ ] { ( byte ) b } ) . hashCode ( ) ) . isNotEqualTo ( hashCode )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNull ( s . readToken ( null ) )
Assert . assertEquals ( "medication" , this . component . getName ( ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertNotNull ( service . generateNewStateValue ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertThat ( user . toString ( ) ) . isEqualTo ( "user" )
assertNull ( problem . getException ( ) )
assertEquals ( expectedResult , class1 . testCollectIteratorExp01 ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
assertEquals ( ImmutableMap . of ( FOO_KEY , FOO_OBJECT , BAR_KEY , BAR_OBJECT ) , context . asMap ( ) )
assertEquals ( name , definition . getName ( ) )
assertNotNull ( result )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( result )
assertNotNull ( result )
Assert . assertNull ( map . get ( "test" ) )
Assert . assertNull ( map . get ( "test" ) )
assertEquals ( "test" , txt . getData ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( result , description )
assertEquals ( result , description )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertThat ( provider . getRegistry ( ) ) . isEqualTo ( registry )
assertEquals ( "InvalidParameterValue" , e . getCode ( ) )
Assert . fail ( e . getMessage ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNull ( "DNS data returend" , result )
assertTrue ( list . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( to . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertTrue ( names . contains ( Constants . TABLE_MASTER_NAME ) )
assertFalse ( list . isEmpty ( ) )
assertThat ( tap . resourceExists ( new Properties ( ) ) , is ( true ) )
assertFalse ( new GmtTimeZone ( false , 0 , 0 ) . useDaylightTime ( ) )
assertEquals ( Ipv4 . parse ( "192.168.0.1" ) . asRange ( ) , Ipv4Range . parse ( "192.168.0.1-192.168.0.1" ) )
Assert . assertEquals ( "test" , pluginForEdFi . nameFromSchemaAttributeName ( qName ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertThatExceptionOfType ( NullPointerException . class ) . isThrownBy ( ( ) -> map . replace ( getKey ( ) , null ) )
assertNull ( HEADERS . get ( "name1" ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertTrue ( list . isEmpty ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( name ) . isEqualTo ( RolesEditorFieldDefinition . FIELD_TYPE . getTypeName ( ) )
Assert . assertEquals ( input , encoded )
Assert . assertEquals ( input , encoded )
assertNotNull ( validator )
Assert . assertEquals ( "Expected and actual value should be the same" , null , Buffers . wrap ( null ) )
Assertions . assertEquals ( "Test_CgLib" , variableName )
Assertions . assertEquals ( "Test_CgLib" , variableName )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( preciseIssue . cost ( ) ) . isEqualTo ( 5 )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertNotSame ( m1 , m2 )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( 1 , services . length )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertFalse ( buildFactory ( ) . isAccessibilityEnabled ( ) )
assertEquals ( 60 , exp )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertTrue ( root != null )
assertThat ( confluence . isAvailable ( ) , is ( false ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( "['s1', 's2']" , ToString . toStringOf ( array ( "s1" , "s2" ) ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertThat ( udf . mapKeys ( input ) , empty ( ) )
assertThat ( ConfigurationSnapshot . EMPTY . getOptional ( Collections . singleton ( "foo" ) , TypeLiteral . of ( String . class ) ) ) . isNotNull ( ) . isNotPresent ( )
assertEquals ( getCommentManager ( ) , commentManager . getClass ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
Assertions . assertEquals ( "HandlerManager" , name )
assertTrue ( error . getMessage ( ) . length ( ) > 0 )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertTrue ( tree . exists ( ) )
assertFalse ( vs . exists ( ) )
assertNotNull ( table . getTree ( ) )
assertNotNull ( sink . createWriteOperation ( ) )
assertNotNull ( sink . createWriteOperation ( ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertNull ( Cli . getResultFile ( ( Command ) new HelpCommand ( ) ) )
assertNotNull ( filter )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertNotNull ( mock . iMethodsReturningMethod ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertFalse ( ps . exists ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertThat ( javaTestClasspath . getElements ( ) ) . isEmpty ( )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertNotNull ( interceptor )
Assert . assertEquals ( 0 , NullColumn . INSTANCE . size ( ) )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
assertEquals ( "abc" , Strings . append ( "c" ) . to ( "ab" ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
org . junit . Assert . fail ( "junit 4: single method failed" )
assertThat ( r . isDisabled ( ) , is ( false ) )
assertEquals ( "HTTP URL" , new DescriptiveUrl ( URI . create ( "http://me" ) ) . getHelp ( ) )
assertEquals ( "HTTP URL" , new DescriptiveUrl ( URI . create ( "http://me" ) ) . getHelp ( ) )
assertEquals ( person , serializer . deserialize ( serializer . serialize ( person ) ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( I18nUtil . tr ( null ) , is ( "" ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertArrayEquals ( DATA , v . get ( ) )
assertArrayEquals ( DATA , v . get ( ) )
assertTrue ( tree . exists ( ) )
assertTrue ( tree . exists ( ) )
assertFalse ( vs . exists ( ) )
assertFalse ( realmIds . contains ( realm . getRealmId ( ) ) )
assertEquals ( PreconditionMessage . ERR_WRITE_BUFFER_NULL . toString ( ) , e . getMessage ( ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertEquals ( "java.lang.NullPointerException\n" , Exceptions . trimToCauseString ( exception ) )
assertNull ( inStream . nextEntry ( ) )
assertEquals ( blobSize , mk . getLength ( id ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( allZoneIds . size ( ) ) . isGreaterThan ( 1 )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertThat ( new IntStack ( 4 ) . size ( ) , is ( 0 ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( expectedNames , fileNames )
Assert . assertEquals ( 20 , result )
assertThat ( profile . getPrefix ( ) , is ( equalTo ( FsPath . create ( "/valid/absolute/path" ) ) ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( 4 , systemUnderTestDao . getAllRunners ( ) . size ( ) )
assertEquals ( "PASSED" , pom . getValue ( "properties/interpolatedProperty" ) )
assertEquals ( 1000 , dbs . getDataStore ( ) . getMinRecordLength ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
assertThat ( query . count ( ) , is ( 1 ) )
assertEquals ( 3 , schemaBasedDynamicDestinations . getSideInputs ( ) . size ( ) )
assertEquals ( "name" , font . getBitmaps ( ) . get ( 0 ) )
assertEquals ( "SNMPWrapper Error: SNMP client is null" , e . getMessage ( ) )
assertEquals ( "" , s )
assertEquals ( 20 , stringsToSearch . size ( ) )
assertNotNull ( baos )
Assert . assertEquals ( "foo" , Charsetfunctions . stringAscii ( new byte [ ] { 102 , 111 , 111 } ) )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
assertEquals ( "Inputstream to string" , fileContent . toString ( ) )
assertThat ( map . get ( new String ( entry . getKey ( ) ) ) ) . isEqualTo ( entry . getValue ( ) )
assertNotNull ( result )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( 0 , message . getNavigationalStatus ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( 10 , test . getUnchecked ( 1 ) . intValue ( ) )
Assert . assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
Assert . assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
Assert . assertNotNull ( "new bean must be created" , messageContext . getProperty ( VAR_NAME ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( NODE_TEXT , DomUtils . getTextContent ( mockNode , DEFAULT_TEXT ) )
assertEquals ( "name" , FileColumn . NAME . getTextValue ( file ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertFalse ( arrayType . canCreateSubtypes ( ) )
Assert . assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( clusterId , standByMaster . getClusterId ( ) )
assertThat ( result , is ( testObj ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
assertThat ( parse ( "xxx" ) . directives ( ) ) . isEmpty ( )
assertThat ( retrieved . getFileName ( ) ) . isEqualTo ( fileName )
Assert . assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
Assert . assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertEquals ( "RefTypeTest" , refType . getName ( ) )
Assert . assertEquals ( "value" , userConfiguration . getString ( "key" ) )
assertThat ( config . getOutputDirectory ( ) . getName ( ) , is ( "out" ) )
assertThat ( environmentVariables . getProperty ( "a.property" ) , is ( "value" ) )
assertThat ( parseArguments ( InterfaceWithNoGetPrefix . class , "--name" , "value" ) . name ( ) , equalTo ( "value" ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
assertNull ( npMapper . getOakPath ( jcrPath ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertNull ( p )
assertFalse ( n . exists ( ) )
assertFalse ( n . exists ( ) )
assertNull ( p )
Assert . assertEquals ( "Hola mundo" , result . asString ( ) )
assertThat ( builder . asMap ( ) . get ( uncuried ( "foo" ) ) ) . isInstanceOf ( String . class )
assertEquals ( initial , after )
assertTrue ( list . isEmpty ( ) )
assertThat ( calvalusProcessor . getTitle ( ) , equalTo ( "dummyProcessorName" ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertTrue ( exists ( 1 ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( result , list )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( subscribed . get ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( Classes . name ( ) , "java.io.IOException" )
assertNull ( conf . getString ( "test.imaginarykey" ) )
assertThat ( Configuration . EMPTY . get ( "foo" , Boolean . class ) ) . isNull ( )
assertEquals ( test , new NFCNormalizer ( ) . normalize ( test ) . toString ( ) )
assertThat ( underTest . getValueOrNull ( ) ) . isNull ( )
assertTrue ( cache . getSize ( ) < N )
assertEquals ( null , Timestamp . forDateZ ( null ) )
assertEquals ( ConstantFilter . EXCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertEquals ( ConstantFilter . INCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertEquals ( ConstantFilter . EXCLUDE_ALL , condition . createFilter ( EMPTY_NODE , EMPTY_NODE , "/" ) )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertFalse ( p . apply ( createWithProperty ( name , value ) ) )
assertEquals ( nodeC , selector . select ( filter , null , null ) )
assertTrue ( root . isRoot ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "WIDE01018888" , WideFileInputInterpreter . toWideID ( "WIDE-01-01-8888" ) )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertThat ( map . toString ( ) , is ( notNullValue ( ) ) )
assertEquals ( wordCap . toString ( ) , "WordCap{word='aWord', isCapitalized=false}" )
assertEquals ( 6 , i )
assertNull ( manager . getCurrentRequestToken ( ) )
assertThat ( this . mockFaceletContext . getAttribute ( "foo" ) ) . isSameAs ( object )
assertEquals ( record , result )
assertEquals ( "Zipkin ContextResolverFactory" , victim . getName ( ) )
assertEquals ( name , definition . getName ( ) )
assertThat ( human . getName ( ) ) . isNull ( )
assertEquals ( "" , result )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( "userid must be correct" , "admin" , cs . getAuthInfo ( ) . getUserID ( ) )
assertNull ( "Login should have failed." , cs )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "null" , mock . oneArray ( nullArray ) )
assertThat ( ex . getMessage ( ) ) . isEqualTo ( Errors . USER_NAME_DUPLICATE )
assertEquals ( name , definition . getName ( ) )
assertThat ( new SQLTranslatorRule ( expected ) . getConfiguration ( ) , is ( expected ) )
assertEquals ( parent , handle . parent ( ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertFalse ( root . getTree ( tokenNodePath ) . exists ( ) )
assertEquals ( sc . getUserID ( ) , cs . getAuthInfo ( ) . getUserID ( ) )
assertThat ( Functions . request ( ) , is ( notNullValue ( ) ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertTrue ( authentication . authenticate ( new TokenCredentials ( info . getToken ( ) ) ) )
assertThat ( new EventIdConverter ( ) . marshal ( eventId ) ) . isEqualTo ( UUID )
Assert . assertTrue ( tree . getRoot ( ) . getChildren ( ) . size ( ) > 1 )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( rootUri , mFileSystemMaster . getPath ( rootId ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( "OakConstraint0053: Invalid privilege bits for aggregated privilege definition." , e . getMessage ( ) )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( 10 , p0 . distance ( p1 ) , 0 )
Assert . assertEquals ( 0 , table . get ( new BooleanHashSet ( ) ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertNull ( BrightnessMode . toEnum ( "invalid raw value" ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( empty ( ) , getErrorCode ( e ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( lhs + " + " + rhs , expr . toString ( ) )
assertTrue ( mdxBaseComponent . init ( ) )
Assert . assertFalse ( new Header ( ) . reset ( ) )
assertEquals ( "2002:11:27 18:00:35" , directory . getString ( ExifIFD0Directory . TAG_DATETIME ) )
assertEquals ( privilege , p )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertTrue ( stdoutWithNewlines ( ) . contains ( StellarShell . WELCOME ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( nameValue , val )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( 1 , entries . length )
assertEquals ( - 3 , mockedMain ( ) . parseArguments ( new String [ ] { "-X" , "--nu" , "admin" } ) )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( config . shouldInstrument ( wrap ( "com.google.android.apps.Foo" ) ) ) . isFalse ( )
assertThat ( "On Write Possible" , _owp . get ( ) , greaterThanOrEqualTo ( 1 ) )
assertEquals ( 1 , policies . length )
assertThat ( forwarder . spanStore ( ) ) . isEqualTo ( spanStore )
Assert . assertEquals ( integerRangeArr [ i ] , iterator . next ( ) )
assertThat ( fixture . selectFiles ( files ) ) . isSameAs ( fixture )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( test , enabledStore . getServerAdminData ( ) )
assertEquals ( "" , getMetaphone ( "WHY" ) )
assertThat ( timeouts ( ) . withParsers ( timeoutParser ) . getTimeoutInSecs ( story ) , is ( 1L ) )
assertNull ( issueType . getObject ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( "abcd" , Joiner . on ( "" ) . join ( Lists . newArrayList ( iter ) ) )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertTrue ( actionServiceRegistered )
assertTrue ( linkedHashSet . isEmpty ( ) )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertNull ( a . getPropertyStatus ( TreeConstants . OAK_CHILD_ORDER ) )
assertNull ( a . getProperty ( propName ) )
assertNull ( a . getPropertyStatus ( propName ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertThat ( p . getNext ( ) ) . isNull ( )
assertNull ( a . getProperty ( "aProp" ) )
assertFalse ( vs . exists ( ) )
assertThat ( r . width ( ) ) . isEqualTo ( 10 )
assertTrue ( tree . exists ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertTrue ( found )
assertThat ( target . readValue ( value ) , is ( false ) )
assertTrue ( tree . exists ( ) )
assertEquals ( fileName , fileUploadPopupPresenter . getFileName ( ) )
assertThat ( authenticator . authenticate ( SimplePrincipal . of ( "CN=disabled" ) , true ) ) . isEmpty ( )
assertThat ( THE_OBJECT , should ( is ( THE_OBJECT ) ) . after ( pageRefresh ( driver ) ) )
assertTrue ( entityListenersService . isEmpty ( repoFullName ) )
assertEquals ( "['s1', 's2']" , ToString . toStringOf ( array ( "s1" , "s2" ) ) )
Assert . assertTrue ( this . entityAccess . updateCollaborators ( collaborators ) )
Assert . assertEquals ( "Object.property" , property . toString ( ) )
Assert . assertEquals ( "medication" , this . component . getName ( ) )
assertEquals ( 0 , es . size ( ) )
assertThat ( lhs . isEmpty ( ) , is ( true ) )
assertFalse ( ps . exists ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( localDate , DataConverter . toLocalDate ( localDate ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3.141592\n" ) )
Assertions . assertEquals ( "pluck" , transformer . name ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( modifiers , metadata . getModifiers ( ) )
assertEquals ( 5 , supplier . get ( ) , 0.1 )
assertNotNull ( query . fetchFirst ( ) )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
assertEquals ( record , result )
assertEquals ( editorConfiguration , defaultEditorAdapter . getConfiguration ( ) )
Assertions . assertEquals ( name , person . getName ( ) )
Assert . assertTrue ( obj . getService ( ) . equals ( "tcp://10.0.0.1:8080" ) || obj . getService ( ) . contains ( "tcp://10.0.0.2:8080" ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( size , result . size ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertEquals ( basePath , wrapper . getBasePath ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( basePath , wrapper . getBasePath ( ) )
assertEquals ( 1 , presenter . getValue ( ) . size ( ) )
assertEquals ( NoTableNameAnnotation . class . getSimpleName ( ) . toLowerCase ( ) , tableInfo . getTableName ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertFalse ( vs . exists ( ) )
assertEquals ( 0 , toTest . size ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( name , definition . getName ( ) )
Assert . assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertNull ( property )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertNull ( result )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertEquals ( name , definition . getName ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "hello, baobao" , content )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertNull ( a . getProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertThat ( nestedAttribute . toString ( ) ) . isEqualTo ( "Attribute1.Attribute*2.Attribute-3" )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertThat ( cacheManager . getCache ( "cache" ) , sameInstance ( cache ) )
assertThat ( function . apply ( Flux . just ( "foo" ) ) . blockFirst ( ) ) . isEqualTo ( "FOO" )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertThat ( mock . size ( ) ) . isNotEqualTo ( finalList . size ( ) )
assertEquals ( nullLocation , rootLocation . getParent ( ) )
assertEquals ( "dtableVerifier" , new DecisionTableVerifierWebWorkerProvider ( ) . getId ( ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertThat ( bean . getMostRecentException ( ) ) . isEqualTo ( "com.jamonapi.Exceptions" )
assertEquals ( PipelineExecution . Status . KILLED , pe . getStatus ( ) )
assertEquals ( getBitsProvider ( ) . getBits ( PrivilegeConstants . JCR_READ ) , ace . getPrivilegeBits ( ) )
assertNull ( "DNS data returend" , result )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( InSetPredicate . none ( ) . toSet ( ) ) . isEmpty ( )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertThat ( write ( Link . of ( "location" , "something" ) ) ) . isEqualTo ( REFERENCE )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertThat ( console . isDiagnosticsEnabled ( ) , is ( true ) )
assertEquals ( 404 , backfillSecretHmac ( secretName ) . code ( ) )
assertNull ( testMock )
assertNull ( testMock )
assertNull ( testMock )
assertTrue ( list . isEmpty ( ) )
assertThat ( cmmnRuntimeService . createPlanItemInstanceQuery ( ) . caseInstanceId ( caseInstanceId ) . list ( ) ) . hasSize ( 4 )
assertThat ( generator . generateAssertionsEntryPointClassContentFor ( null , assertionsEntryPointType , null ) ) . isEmpty ( )
assertEquals ( testSize , set . size ( ) )
assertTrue ( true )
assertNull ( testMock )
assertNotNull ( factory . createEntityAcl ( ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertNotNull ( factory . createEntityAcl ( ) )
Assert . assertTrue ( tradeService . cancelOrder ( new DefaultCancelOrderParamId ( ) ) )
assertEquals ( "ZA83R" , msg . getCallSign ( ) )
assertEquals ( globalCountries . size ( ) , 3 )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "hello, baobao" , content )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( "0b0da3" , rfAddress )
Assert . assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
Assert . assertTrue ( authUser . getId ( ) . equals ( user . getId ( ) ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( 60 , exp )
assertNull ( result )
assertNull ( result )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
Assert . assertNotNull ( jcoder )
assertEquals ( List . of ( ) , parser . parseBookmarks ( VirtualValues . EMPTY_LIST ) )
assertEquals ( List . of ( ) , parser . parseBookmarks ( VirtualValues . EMPTY_LIST ) )
assertThat ( confluence . isAvailable ( ) , is ( false ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( StringEscapeUtilities . unescapeChar ( "\\a\\bcde\\a\\a\\ac\\a\\a\\a\\a" , 'a' ) , "a\\bcdeaaacaaaa" )
assertEquals ( "hehe" , StringUtils . toAscii ( s ) )
assertEquals ( "name2" , inputItem . getFilename ( ) )
assertEquals ( "name2" , inputItem . getFilename ( ) )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertFalse ( vs . exists ( ) )
assertTrue ( "Simple permission mapper should be created" , ops . exists ( TEST_SIMPLE_PERMISSION_MAPPER_ADDRESS ) )
Assertions . assertEquals ( RestConst . REST , instance . getName ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( true , msg . getOffPositionIndicator ( ) )
assertEquals ( "" , buf . toString ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertEquals ( test , Preconditions . checkNotNull ( test , "test" ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertThat ( user . getId ( ) , is ( getTestUser ( ) . getId ( ) ) )
Assert . assertEquals ( "user1" , echoValue )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertNull ( userTree . getProperty ( UserConstants . REP_PASSWORD ) )
assertEquals ( expected , actual )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( 1 , policies . length )
assertThat ( oozieJobInfo . getId ( ) , is ( id ) )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( 1 , msg . getTypeOfEPFD ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertEquals ( 2 , log . count )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertThat ( avroSerDeTransformation . getAvroSchemaFileName ( dummyUri ) , is ( "avro.avsc" ) )
assertNull ( tested . getMediators ( ) )
assertThat ( output . toString ( "UTF-8" ) , equalTo ( CHANNEL_DATA ) )
assertThat ( new Greeter ( ) . apply ( "World" ) ) . isEqualTo ( "Hello World" )
assertEquals ( bytesUtilShim , hBaseConnectionWrapper . getBytesUtil ( ) )
assertEquals ( ImmutableMap . of ( FOO_KEY , FOO_OBJECT , BAR_KEY , BAR_OBJECT ) , context . asMap ( ) )
assertEquals ( Util . convertToIndependentLineDelimiter ( MARKDOWN_0 ) , Util . convertToIndependentLineDelimiter ( result ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertThat ( zp . getName ( ) , is ( "TZDB" ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertThat ( new Greeter ( ) . apply ( "World" ) ) . isEqualTo ( "Hello World" )
assertEquals ( "FSTreeTest\n" , tree . toString ( ) )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( new Integer ( "2147483647" ) , result )
assertEquals ( expected , op . apply ( value ) )
assertThat ( sut . getDiagnosis ( ) . diagnostic ( ) , equalTo ( "Unexpected application failure" ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertFalse ( ps . exists ( ) )
assertFalse ( ps . exists ( ) )
assertNotNull ( str )
assertThatFactory ( factory ) . createsSinglePostProcessor ( TestEnvironmentPostProcessor . class )
assertEquals ( expected , actual )
assertEquals ( defaultValue , config . get ( Integer . class , KEY_PREFIX , defaultValue ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertEquals ( StringEscapeUtilities . removeEscapedChars ( "\\a\\b\\cdea\\a\\ac\\a\\a\\a\\a" , "ab" . toCharArray ( ) ) , "\\cdeac" )
assertThat ( isEmpty ( Paths . get ( "invalid-addr" ) ) ) . isFalse ( )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( privilege , p )
assertNull ( "Should not have returned providerMetadata JsonObject" , result )
assertEquals ( "default" , object . getString ( "foo" , "default" ) )
assertEquals ( "new name" , e . getName ( ) )
assertEquals ( "1.3.0-SNAPSHOT" , pom . getValue ( "build/plugins[1]/version" ) )
assertEquals ( 1 , workbook . getNumCellStyles ( ) )
assertEquals ( "name" , name )
assertTrue ( root . move ( "/s" , "/s" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertThat ( getQueryParamMap ( "switchyard://SomeService?foo" ) . isEmpty ( ) , is ( true ) )
assertTrue ( cache . isRequested ( 1 ) )
assertEquals ( "file:////host/site/test-child" , pom . getValue ( "distributionManagement/site/url" ) )
assertEquals ( "file:////host/site/test-child" , pom . getValue ( "distributionManagement/site/url" ) )
assertEquals ( "nicechart" , CodecUtils . filenameEncode ( "nicechart" ) )
assertNull ( a . getPropertyStatus ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( "k=" + k , NEW , x . getChild ( "added" ) . getStatus ( ) )
assertEquals ( req . getClusterId ( ) , id )
Assert . assertNotNull ( nats )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( 1 , aces . length )
assertThat ( this . context . getBean ( ServletContextAwareEmbeddedConfiguration . class ) . getServletContext ( ) ) . isNull ( )
assertThat ( flattened . collect ( toList ( ) ) ) . containsExactly ( 1 )
assertEquals ( "/a/c" , path . toString ( ) )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( base , root . getBaseState ( ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertThat ( regionParser . getParentName ( mockElement ) ) . isNull ( )
assertEquals ( result , description )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( e instanceof IllegalArgumentException )
assertNull ( property , "void methods should not be accepted as property" )
assertTrue ( e instanceof IllegalArgumentException )
assertThat ( CharStreams . toString ( new StringReader ( s ) ) ) . isEqualTo ( s )
assertTrue ( e instanceof IllegalArgumentException )
assertNotNull ( node )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertTrue ( e instanceof IllegalArgumentException )
assertEquals ( path , nf . getPath ( groupNode ) )
assertEquals ( path , nf . getPath ( groupNode ) )
assertNull ( testMock )
assertNull ( routingRuleCache . getRoutingRule ( repository ) )
assertTrue ( name . equals ( node . getName ( ) ) )
assertEquals ( "bar2" , parent . getProperty ( "foo" ) . getString ( ) )
assertEquals ( repositoryFileBundle . getPath ( ) , PATH )
assertThat ( tableAClient1 . get ( "KeyClient2" ) ) . isEqualTo ( 2 )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( "ARCO AVON" , msg . getName ( ) )
assertEquals ( uri , instance . getURI ( ) )
assertEquals ( 10 , cacheManager . getMaximumSizeMB ( ) , 1e-9 )
assertEquals ( uri , instance . getURI ( ) )
Assert . assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertThat ( score > 0.0f , is ( true ) )
assertEquals ( "car:Car" , car . getPrimaryNodeType ( ) . getName ( ) )
assertEquals ( "jcr:read" , privileges [ 0 ] . getName ( ) )
assertEquals ( "Invalid to have null byte array in KeyValue." , iae . getMessage ( ) )
assertEquals ( Normal , Orientation . fromMetadataOrientation ( null ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertThat ( spans ) . isEmpty ( )
assertEquals ( "property" , theProperty . getName ( ) )
assertTrue ( e . getMessage ( ) . contains ( DalAnnotationValidator . VALIDATION_MSG ) )
assertEquals ( "cmis" , root . getName ( ) )
assertThat ( node , is ( notNullValue ( ) ) )
assertNotNull ( node )
assertEquals ( "cmis" , root . getName ( ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( filter , filterRepository . getFilterByName ( "EMPTY" ) )
Assert . assertFalse ( true , "didn't find FakeDriver" )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertEquals ( System . getProperty ( "user.home" ) + File . separator , cache1 . getPath ( ) )
assertThat ( user . getName ( ) ) . isEqualTo ( "John" )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertEquals ( globalCountries . size ( ) , 3 )
Assert . assertEquals ( "iterator loses records" , BaseStreamTest . tenRowsTwoDuplicateRecords . size ( ) , numElements )
assertEquals ( it . next ( ) , q . take ( ) )
assertEquals ( it . next ( ) , q . take ( ) )
assertTrue ( found )
assertNotNull ( "Stateless Session always uses a new instance for method call, therefore should never callback, but was null." , ejb1 )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
Assert . assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( USER_ID , authInfo . getUserID ( ) )
assertEquals ( "foo" , featureId . getID ( ) )
assertNotNull ( "testUser must exist on 2nd cluster node" , userManager2 . getAuthorizable ( "testUser" ) )
assertEquals ( parameter . getParameterId ( ) , id )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( "unknown" , name )
assertTrue ( ( ( Integer ) db . getLastValue ( "TestMetric" ) ) == 19 )
Assert . assertEquals ( new String ( content ) , new String ( read ) )
assertTrue ( "There should be wsdls to compare" , files != null && files . length > 0 )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertThat ( getCuriedObjectMapper ( ) . writeValueAsString ( resources ) ) . isEqualTo ( CURIED_DOCUMENT )
assertNull ( classLoader . getResource ( RESOURCE_PATH ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( l . launch ( ) ) . isEqualTo ( 15 )
assertThat ( l . launch ( ) ) . isEqualTo ( 15 )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertEquals ( "cheese" , built . getString ( ) )
assertEquals ( expected , stormAdminService . stopIndexingTopology ( "random_access_indexing" , false ) )
assertThat ( property . getName ( ) ) . isEqualTo ( "var_name_with_underscores" )
Assert . assertEquals ( Optional . ofNullable ( proxy1 . getId ( ) ) , Optional . ofNullable ( proxyUriIdMap . get ( proxy1 . getUri ( ) ) ) )
Assert . assertTrue ( obj . getService ( ) . equals ( "tcp://10.0.0.1:8080" ) || obj . getService ( ) . contains ( "tcp://10.0.0.2:8080" ) )
Assert . assertEquals ( Optional . ofNullable ( proxy1 . getId ( ) ) , Optional . ofNullable ( proxyUriIdMap . get ( proxy1 . getUri ( ) ) ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( repeat ( "a" , 506 ) + NL + " " + repeat ( "a" , 7 ) , getMainAttributeValue ( manifest , "test" ) )
assertEquals ( childNames [ index ++ ] , child . getName ( ) )
assertEquals ( inetAddress , sslSocketAdapter . getLocalAddress ( ) )
assertEquals ( "WMT_MS_Capabilities" , e . getLocalName ( ) )
assertThat ( applicationHome . getDir ( ) ) . isEqualTo ( app )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( arrExpected . get ( i ) , email . getFromAddress ( ) )
assertThat ( e . getMessage ( ) , is ( String . format ( EXPECTED_ERROR_MESSAGE , value ) ) )
assertEquals ( "someInterface" , name )
assertEquals ( target . size ( ) , 4 )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( "NULL" , outputter . asSqlString ( null ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertTrue ( result instanceof OSelectStatement )
Assert . assertEquals ( "Incorrect count returned!" , 3 , i )
Assert . assertEquals ( "Incorrect count returned!" , 3 , i )
assertThat ( OptionalBoolean . empty ( ) , isEmpty ( ) )
assertThat ( OptionalBoolean . empty ( ) , isEmpty ( ) )
assertEquals ( pk . getObjectIdentifier ( ) , TAObjectIdentifier . id_TA_ECDSA_SHA_512 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( "OakConstraint0043: Next bits not updated" , e . getMessage ( ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertThat ( process ( messageProcessor , getTestEventUsingFlow ( "0" ) ) , is ( nullValue ( ) ) )
assertFalse ( list . isEmpty ( ) )
assertThat ( simpleLanguage ( ) . locale ( ) , equalTo ( simpleLocale ( ) ) )
assertEquals ( "My_Folder-0-0" , name )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertThat ( XASupport . toString ( flags ) , is ( expectedResult ) )
assertEquals ( strip ( collectionText ( ) ) , writer . toString ( ) )
assertTrue ( document . getElementsByClass ( "vcard" ) . isEmpty ( ) )
assertEquals ( dto , pass ( dto , DeleteMeterResult . class ) )
assertEquals ( 0 , source . getEstimatedSizeBytes ( null ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( "Unknown request type: " + requestType , knownRequestTypes . contains ( requestType ) )
Assert . fail ( "Should throw an exception here" )
assertEquals ( "" , s )
assertEquals ( System . getProperty ( "user.dir" ) , value )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( 81 , options . getOptions ( ) . port )
assertTrue ( is instanceof ByteArrayInputStream )
assertEquals ( "bar" , result )
assertEquals ( toString ( dest ) , data . substring ( 0 , halfDataLength ) )
assertThat ( commandLineIO . getResultHandler ( ) , equalTo ( resultHandler ) )
assertEquals ( Architecture . ARMv6 , Architecture . getFromCpuInfo ( info ) )
assertEquals ( inventory . get ( i + 5 ) , subList . get ( i ) )
Assertions . assertTrue ( count <= 2 , "Some temp files from old tests are found" )
assertThat ( cache . ms . contains ( "aaa" ) , is ( false ) )
assertNotNull ( connection . createChannel ( 1 ) )
Assert . assertEquals ( translator . getTranslation ( originalText ) , originalText )
assertEquals ( "foo" , configuration . getParameter ( ) . get ( getRequestKey ( API_VERSION ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertNotNull ( result )
assertEquals ( "bar" , searchAction . getParameter ( ) . get ( getRequestKey ( ACTION_SEARCH ) ) )
assertEquals ( path , nf . getPath ( groupNode ) )
Assert . assertEquals ( "baz" , manipulation . getColumnToRemove ( ) )
assertEquals ( 0 , refInt . get ( ) )
assertEquals ( RestartPolicy . parse ( "always" ) , RestartPolicy . alwaysRestart ( ) )
assertEquals ( "Retrieved value should match entered value" , value , retrievedValue )
assertThat ( node . getText ( ) ) . isEqualTo ( "foo" )
assertThat ( jarCommand . getMode ( ) ) . isEqualTo ( ProcessingMode . packaged )
assertNull ( attributes . get ( 0 ) . getValue ( ) )
assertTrue ( true )
assertThat ( statements . deleteAll ( ) . getStatement ( ) ) . isEqualTo ( "MATCH (n) OPTIONAL MATCH (n)-[r0]-() DELETE r0" )
assertThat ( new InstrumentedType . Frozen ( TypeDescription . ForLoadedType . of ( String . class ) , loadedTypeInitializer ) . getLoadedTypeInitializer ( ) , is ( loadedTypeInitializer ) )
assertEquals ( list . get ( i ++ ) , x )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertNotNull ( session . getNode ( "/preconfiguredProjection" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( name , definition . getName ( ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( "db.val1" , config . getProperty ( "db.key1" ) )
assertFalse ( mWebUfs . isFile ( mWebUfsRoot ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertThat ( fixture . clientProperty ( "name" ) ) . isEqualTo ( "Yoda" )
assertEquals ( ",,,,,," , key . toString ( ) )
assertEquals ( null , result )
assertEquals ( WORKER_EXCEPTION , operation . getType ( ) )
assertThat ( subject . get ( MP3_FILE_NAME ) , is ( equalTo ( EMPTY_BUFFER ) ) )
assertEquals ( "subdir/file" , relativize ( "c:/path/to/dir" , "c:/path/to/dir/subdir/file" ) )
assertEquals ( "subdir/file" , relativize ( "c:/path/to/dir" , "c:/path/to/dir/subdir/file" ) )
assertTrue ( DateTimeUtils . getLocaleByCountry ( "en" , "us" ) . equals ( Locale . US ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertNull ( TestStringEnum . fromString ( null ) )
assertEquals ( name , definition . getName ( ) )
assertThat ( underTest . getOnboardingItems ( ) . size ( ) , is ( 0 ) )
assertEquals ( 10L , element . value ( ) )
assertArrayEquals ( testArray , options . getConfigValue ( "test" , null , String [ ] . class ) )
assertEquals ( options . buildQueryParameters ( ) . get ( "marker" ) , ImmutableList . of ( "test" ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( getCommentManager ( ) , commentManager . getClass ( ) )
assertEquals ( record , result )
assertEquals ( name , definition . getName ( ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertTrue ( "testCreateSharedDurableExpiry_B_SecOff failed" , testResult )
assertFalse ( loginModule . abort ( ) )
assertFalse ( loginModule . abort ( ) )
Assert . assertEquals ( credentials , provider . getCredentials ( ) )
assertEquals ( GROUPS [ 0 ] , getSubject ( ) . getEnabledGroup ( ) )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( true ) )
assertThat ( new TestSnapshotServiceAdapter ( ) . exceptionSuppressingClose ( mockCloseable ) , is ( true ) )
Assert . assertEquals ( EXAMPLE , connectionManager . getLookupKey ( EXAMPLE ) )
assertEquals ( localDate , DataConverter . toLocalDate ( localDate ) )
assertEquals ( returnResult . get ( RESPONSE_HEADERS ) , "" )
assertThat ( suiteFile . getRobotParserFile ( ) ) . hasName ( "abc.robot" )
assertEquals ( 255 , s . available ( ) )
assertEquals ( 255 , s . available ( ) )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertThat ( new EventId ( uuid ) . asBaseType ( ) ) . isEqualTo ( uuid )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertEquals ( new Path ( "/horseheads" ) , that . getOutputPath ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertEquals ( "/foobar" , Decoder . path ( "/foobar" ) )
Assertions . assertTrue ( builder . build ( ) . isReturn ( ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>" , output )
Assertions . assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
Assertions . assertEquals ( ServiceType . UNKNOWN , dataSourceMonitorWrapper . getServiceType ( ) )
assertTrue ( to . isEmpty ( ) )
assertThat ( this . spannerKeyProperty . getSpelExpression ( ) ) . isNull ( )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertThat ( this . spannerKeyProperty . getSpelExpression ( ) ) . isNull ( )
assertFalse ( this . marker . remove ( null ) )
Assert . assertNotNull ( rb )
assertEquals ( "" , result )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertEquals ( Sort . SET0 , Prelude . FIN . getSort ( ) )
assertNull ( decoder . frameListener ( ) )
assertThat ( presentation . getImage ( someObject ) ) . isNull ( )
assertArrayEquals ( DATA , v . get ( ) )
assertThat ( bc . getUserId ( ) ) . isNull ( )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( "sha-1" , command . getName ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertNotNull ( list . getActionMap ( ) . getParent ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( msg , e . getMessage ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( nameValue , val )
assertNull ( vs )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( ace , ace2 )
assertEquals ( nameValue , val )
assertThat ( new Plugin . Engine . Source . Compound ( Collections . < Plugin . Engine . Source > emptyList ( ) ) . read ( ) , sameInstance ( ( Plugin . Engine . Source . Origin ) Plugin . Engine . Source . Empty . INSTANCE ) )
Assertions . assertNotNull ( cs . getEndpoint ( ) )
assertNull ( reader . readDefinition ( "nonexisting" ) )
assertEquals ( privilege , p )
assertTrue ( wb1 . equals ( wb1 ) )
assertThat ( logger . getName ( ) , equalTo ( LOGGER_NAME ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( string , caselessString . getString ( ) )
assertEquals ( value , 1000000000L )
assertEquals ( "[A, B, E, C, F, D]" , list . toString ( ) )
ARMSTRONG_MAP . forEach ( ( number , result ) -> assertEquals ( result , ArmstrongNumberUtil . isArmstrong ( number ) ) )
assertTrue ( to . isEmpty ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
assertEquals ( VERSION_STRING , VERSION . toString ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertTrue ( simpleRequestContext . getResponse ( ) instanceof CommittingAwareResponse )
assertEquals ( price ( ) . apply ( item ) , price )
assertEquals ( "test" , getFirst ( Collections . singletonList ( "test" ) , "test" ) )
assertFalse ( "JavaPOSIX isNative should be false" , posix . isNative ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( principal , p )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( blockBuilder . build ( ) . getEncodingName ( ) , RunLengthBlockEncoding . NAME )
Assert . assertEquals ( dao . getCollectionUUIDByName ( "Asia" ) , "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1" )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( excelSheetReader . getName ( ) , "test" )
assertEquals ( name , definition . getName ( ) )
assertTrue ( prefs . getPathExport ( ) . isEmpty ( ) )
assertEquals ( expected , CoreUtils . getApplicationId ( clientOptions , logOptions ) )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertFalse ( vs . exists ( ) )
Assert . assertEquals ( "not matched" , null , isBlank ( input ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertNotNull ( query . fetchFirst ( ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertThrows ( UnsupportedOperationException . class , ( ) -> assertThat ( stream ) . isEqualTo ( stream ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( state . get ( "admin.password.file" ) , nullValue ( ) )
assertThat ( state . get ( "admin.password.file" ) , nullValue ( ) )
assertTrue ( catalogNames . contains ( getSession ( ) . getCatalog ( ) . get ( ) ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
Assert . assertTrue ( Integer . toString ( i ) , Double . isNaN ( Gamma . gamma ( i ) ) )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertTrue ( everyone . hashCode ( ) == EveryonePrincipal . getInstance ( ) . hashCode ( ) )
assertEquals ( name , npMapper . getOakName ( name ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertNotNull ( str )
assertEquals ( userId , workspaceInfo . getUserId ( ) )
assertNotNull ( result )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( "passed" , ConfigUtils . getString ( config , "default" , "no-string" , "some-string" ) )
Assert . assertNull ( map . get ( "test" ) )
assertNotNull ( dataSource . getConnection ( "" , "" ) )
assertNotNull ( builder )
assertNotNull ( builder )
assertThat ( aList , is ( List . of ( ) ) )
Assert . assertNull ( SegmentId . tryParse ( "datasource" , "datasource_invalid_interval_version" ) )
assertEquals ( name , definition . getName ( ) )
assertEquals ( "JDBC" , result )
assertEquals ( "1.3.0-SNAPSHOT" , pom . getValue ( "build/plugins[1]/version" ) )
assertThat ( map . size ( ) ) . isEqualTo ( 0 )
assertEquals ( Country . class , VocabularyUtils . lookupVocabulary ( Country . class . getName ( ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertNull ( BranchUtils . getLastLog ( "test_branch" , repo ) )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "hello" , PropertyExpander . expandProperties ( context , "${#test#//value/text()}" ) )
assertEquals ( "{there=22, hi=5}" , m1 . toString ( ) )
assertEquals ( "{there=22, hi=5}" , m1 . toString ( ) )
assertNull ( store . retrieve ( cp ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertTrue ( "By default should return true" , getTransactionAdapter ( ) . run ( null ) )
assertEquals ( "test" , SidUtils . getStringValue ( sid ) )
assertFalse ( message . isAccurate ( ) )
Assert . assertEquals ( "?var2=value-of-var2{&var1}" , partiallyExpanded )
assertEquals ( expectedCounterDateValues , result [ i ] . getDateList ( ) . size ( ) )
assertEquals ( 0 , result )
assertEquals ( 0 , result )
assertEquals ( i , new ReadOnlyOneBitSet ( i ) . cardinality ( ) )
assertEquals ( serverList . get ( i ) , result . get ( i ) )
assertEquals ( - 1 , instance . peekUnsignedByte ( 0 ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertTrue ( excelSheetReader . hasColNames ( ) )
assertEquals ( excelSheetReader . getNrRows ( ) , 5 )
assertEquals ( "@javax.validation.constraints.NotNull" , w . toString ( ) . trim ( ) )
assertEquals ( 3 , instance . readSequence ( ) . length ( ) )
assertTrue ( p . apply ( createWithProperty ( name , value ) ) )
assertEquals ( Integer . valueOf ( 1 ) , future . get ( 2 , TimeUnit . SECONDS ) )
assertEquals ( expectedStrings . length , result . size ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( "{}" , ADAPTER . serialize ( map , SerializerEncoding . JSON ) )
assertThat ( delegate . getEntity ( ) . getContentType ( ) ) . isEqualTo ( ContentType . TEXT_PLAIN . toString ( ) )
assertEquals ( 12345l , ctx . getCreateTimestamp ( ) )
Assert . fail ( )
assertEquals ( in , out )
assertEquals ( "bar" , conf . getString ( "foo" ) )
assertEquals ( "{\"async\":true}" , writer . getBuffer ( ) . toString ( ) )
Assert . assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
Assert . assertEquals ( "DEF" , conf . getProperty ( "worker.publicKey" ) )
Assert . assertEquals ( n . normalize ( "AbC" ) , "abc" )
assertEquals ( "entity-MyEntityTypeId" , toType ( entityType ) )
assertEquals ( expectedTableName , getTableName ( entityType ) )
assertEquals ( expectedIdentifier , testSubject . getTokenStoreIdentifier ( ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertEquals ( integerListFilter . jdkList ( ) . size ( ) , integerListFilter . jdkListParallel ( ) . size ( ) )
assertEquals ( new Local ( "/private/tmp" ) , new FinderLocal ( "/tmp" ) . getSymlinkTarget ( ) )
assertEquals ( expected , target . data ( "joe" , "bloggs" ) . data ( ) )
assertFalse ( wasCalled . get ( ) )
assertEquals ( UnavailableContent . class , is . readContent ( ) . getClass ( ) )
assertEquals ( bs1 , bs2 )
assertEquals ( expected , b )
assertThat ( e . getMessage ( ) , is ( "token must not be null" ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertThat ( response ) . isEqualTo ( Response . failure ( "Invalid argument: 'INVALID_COIN'" ) )
assertArrayEquals ( expectedSorted , data )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNull ( LdapUtils . extractBaseDn ( dn ) )
assertNotNull ( NetUtils . getHostName ( "127.0.0.1" ) )
Assert . assertEquals ( "my-bucket" , step . getBucket ( ) )
assertEquals ( TEST_STRING , readString ( buf ) )
assertEquals ( repeat ( "\n" , 512 ) , make512Safe ( repeat ( "\n" , 512 ) ) )
assertEquals ( 1584 , length )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( Integer . toString ( 1 ) , id . toString ( ) )
assertEquals ( 4 , UUID . fromString ( run . getID ( ) ) . version ( ) )
assertThat ( Configuration . EMPTY . get ( "foo" ) ) . isNull ( )
Assert . assertEquals ( "hdfs" , mHdfsUnderFileSystem . getUnderFSType ( ) )
assertThat ( sut . value ( ) , equalTo ( VALUE ) )
assertTrue ( new MessageKeepAlive ( ) . toString ( ) . contains ( MessageKeepAlive . class . getSimpleName ( ) ) , "toString doesn't contain class name" )
assertEquals ( 0 , toTest . size ( ) )
assertTrue ( serviceQueue < 10 )
assertEquals ( "[\"less_than\",1]" , serialized . toString ( ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
Assert . fail ( "CloudifyMachine validation failed: " + e . getMessage ( ) )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertThat ( SerializationUtils . clone ( obj ) , equalTo ( obj ) )
assertTrue ( super . ds . create ( Collection . NODES , Collections . singletonList ( up ) ) )
assertEquals ( "item0" , described . get ( "someList" ) )
assertEquals ( blobSize , mk . getLength ( id ) )
Assertions . assertEquals ( new URI ( "/1.0/images/n1%3Alatest/get" ) , new URI ( builder . getImage ( new ImageName ( "n1:latest" ) ) ) )
assertEquals ( builder . toString ( ) , "@Id(name=\"foobar\")" , "Unexpected annotations built by JPAAnnotationBuilder." )
assertEquals ( null , replaceFilter ( null , null , null , false ) )
Assert . fail ( )
assertEquals ( RequestHelper . forHandlerInput ( getHandlerInputForRequest ( testIntentRequest ) ) . getLocale ( ) , "FooLocale" )
assertEquals ( "{\"branchVisible\":{},\"regular\":{},\":childNodeCount\":2}" , nodes )
assertNotNull ( e . getMessage ( ) )
assertThat ( builder . toString ( ) ) . isEqualTo ( "/foo/bar" )
assertNotNull ( bulk )
assertEquals ( "SUCCESS" , future . get ( ) )
assertEquals ( Type . APPLICATION , registry . getType ( ) )
assertEquals ( "Wrong property value after merge" , expectedNode , mergedNode )
assertEquals ( "2014-12-24" , info . getFormattedRevision ( ) )
assertEquals ( "2014-12-24" , info . getFormattedRevision ( ) )
assertEquals ( "Wrong initial state." , CircuitBreakerState . CircuitState . CLOSED , state . getCircuitState ( ) )
assertEquals ( 3 , state . getPropertyCount ( ) )
assertThat ( e . getMessage ( ) , is ( "algorithm must not be null" ) )
Assert . assertFalse ( ctx . datanode . getBlockScanner ( ) . isEnabled ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( "[\"aa\"]" , t0 . getName ( ) )
assertThat ( delegate . beginTransaction ( ) , is ( notNullValue ( ) ) )
assertEquals ( MBTileSet . class , mbtiles . type ( ) )
assertEquals ( "SUCCESS" , future . get ( ) )
assertEquals ( price ( ) . apply ( item ) , price )
assertThat ( model . getSize ( ) , is ( 0 ) )
assertEquals ( Pmd . getScale ( i ) , jdbcPmd . getScale ( i ) )
assertEquals ( expected , built )
assertEquals ( expected , Utils . byte2Hex ( b ) )
assertEquals ( "Action not supported: PUT" , e . getMessage ( ) )
assertEquals ( "Action not supported: PUT" , e . getMessage ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( path , doc . getMainPath ( ) )
assertEquals ( expectedFiles , files )
assertEquals ( value , v . toString ( ) )
assertEquals ( "" , p . process ( "${system-allow-fail;mostidioticcommandthatwillsurelyfail}" ) )
assertThat ( udf . mapValues ( input ) , empty ( ) )
Assert . assertEquals ( 1607639411945L , map . get ( "timestamp" ) )
Assert . assertTrue ( i == next )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertEquals ( "foo" , getQuoteContents ( "\"foo\"" ) )
assertEquals ( 3 , bundleContext . getServiceReferences ( ArtifactInstaller . class . getName ( ) , null ) . length )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( list . isEmpty ( ) )
assertEquals ( expected , paths )
assertThat ( c . toString ( ) ) . isNotNull ( )
assertThat ( c . toString ( ) ) . isNotNull ( )
assertTrue ( result . isEmpty ( ) )
assertEquals ( expected , paths )
assertEquals ( "ProducibleConfig [steps=1, width=2, height=3]" , producible . toString ( ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , newArray )
Assert . assertArrayEquals ( answer , goodKL . getDomain ( ) . toArray ( ) )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertTrue ( failedAsExpected )
assertEquals ( matchAllQuery , result . getQueryBuilder ( ) )
assertThat ( amt . abs ( ) ) . isSameAs ( amt )
assertEquals ( TEST_2007_07_15_PONE , t )
assertThat ( unit . getRequestUri ( ) ) . hasToString ( "http://localhost/" )
assertTrue ( 10 != connection . createChannel ( ) . getChannelNumber ( ) )
assertEquals ( 3 , set . size ( ) )
assertNull ( store . getVerb ( "lalala" , "verb1" ) )
assertEquals ( "set [" + i + ']' , i == 2 ? 4.5 : values [ OFFSET + i ] , test . get ( i ) , EPSILON )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertTrue ( "Simple permission mapper should be created" , ops . exists ( TEST_SIMPLE_PERMISSION_MAPPER_ADDRESS ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertEquals ( "Manage only lists of scalar items" , e . getMessage ( ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( ( Predicate < Boolean > ) Configuration . EMPTY . get ( "foo" , TypeLiteral . of ( Boolean . class ) ) ) . isNull ( )
assertThat ( sortBuilders . size ( ) , is ( 1 ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertEquals ( "Defaulted" , person . getName ( ) )
assertThat ( cfg == cfg . builder ( ) . config ( ) ) . isTrue ( )
assertEquals ( RestartPolicy . parse ( "no" ) , RestartPolicy . noRestart ( ) )
assertEquals ( VERSION , Version . getVersion ( ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertTrue ( filter . apply ( createDependency ( "com.jamierf" , "test" , "1.0" ) ) )
assertEquals ( "K2" , v2 . getKey ( 1 ) )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertThat ( RedisPassword . of ( "" ) . toOptional ( ) ) . isEmpty ( )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( "1, 2, 3" , StringConverter . commaSeperatedStringList ( strList ) )
assertEquals ( expected , result )
assertThat ( key . name ( ) ) . isEqualTo ( "foo.bar.baz" )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
assertThat ( tracer . currentSpan ( ) ) . isNull ( )
assertTrue ( super . ds . create ( Collection . NODES , Collections . singletonList ( up ) ) )
assertEquals ( initialCacheSizeC1 + totalPaths - 2 , Iterables . size ( ds ( c1 ) . getCacheEntries ( ) ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertNull ( StringUtil . stripControlCharacters ( null ) )
assertTrue ( serviceQueue < 10 )
assertEquals ( c , c )
Assertions . assertThat ( new GlobalCommentBuilder ( config , null , QualityGate . newBuilder ( ) . status ( QualityGate . Status . OK ) . conditions ( Collections . emptyList ( ) ) . build ( ) , new Reporter ( config ) , new MarkDownUtils ( ) , analysisMode ) . buildForMarkdown ( ) ) . isEqualTo ( "SonarQube analysis indicates that quality gate is passed.\n" + "\n" + "SonarQube analysis reported no issues.\n" )
assertThat ( max ( LONG_DURATION , SHORT_DURATION ) , is ( LONG_DURATION ) )
assertEquals ( path , TuplePaths . create ( path . toString ( ) ) )
assertTrue ( subscribed . get ( ) )
assertEquals ( 1 , version . getMajorVersion ( ) )
assertThat ( custom . getFieldAsString ( STRING_FIELD_NAME ) ) . isEqualTo ( STRING )
assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , writer . toString ( ) )
assertEquals ( x . getBaseState ( ) , x . getNodeState ( ) )
assertFalse ( base . builder ( ) . remove ( ) )
assertThat ( node . insertNext ( next ) ) . isSameAs ( next )
assertEquals ( nameProperty , namePropertyFromValue )
assertEquals ( name , restriction . getDefinition ( ) . getName ( ) )
assertTrue ( "Failed to find properties" , stream != null )
assertTrue ( PropertiesFactory . EMPTY_PROPERTIES . isEmpty ( ) )
Assertions . assertTrue ( stack . isEmpty ( ) )
assertEquals ( fsInput . length ( ) , FILE_CONTENTS . length ( ) )
Assert . assertEquals ( - 5 , list . binarySearchBlock ( 0 , list . size ( ) , 2 , 20 ) )
assertNotNull ( set . getApplicationContext ( "base" ) )
assertThat ( id . toString ( ) , is ( "Mixed-Case-Id" ) )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
assertEquals ( tracker . findTid ( "/v2.0/6000/views" ) , "6000" )
