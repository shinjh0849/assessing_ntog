assertThat ( ConfigurationUtils . tryGetGlobalProperty ( TEST_PROPERTY_NAME ) ) . isEqualTo ( "MyNiceValue" )
assertNull ( operationResult . getEntity ( ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( method . getName ( ) , method . invoke ( session ) == null , method . invoke ( newSession ) == null )
assertEquals ( "a\nb" , roundtrip ( "a\rb" , false ) )
assertEquals ( "" , umpleClass . getPackageName ( ) )
assertEquals ( "" , Helper . getPackageName ( "SomeClass" ) )
assertEquals ( expectedUri , AccessPolicy . delete ( examplePolicyId ) . getUri ( ) )
assertThat ( ProviderAnnotations . getInterfaceName ( fixture ) , equalTo ( "tests/test" ) )
assertNotNull ( ds )
assertEquals ( "" , s )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertNotNull ( applicationContext . getEverrestConfiguration ( ) )
assertEquals ( "bar" , project . getProperty ( "bar" ) )
assertEquals ( "Axxxx" , result )
assertEquals ( "Axxxx" , result )
assertEquals ( "Axxxx" , result )
assertEquals ( null , actual )
assertThat ( ZipPaths . splitPath ( "name" ) , isSplitPath ( "" , "name" ) )
assertEquals ( WKT , out . toString ( ) )
assertEquals ( "Hello" , internalPlanetService . sayHello ( getServiceContext ( ) ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertNull ( endpoint . getBinding ( ) )
assertNotNull ( reader )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "Body" , reader . getLocalName ( ) )
assertNotNull ( reader )
assertEquals ( "Body" , reader . getLocalName ( ) )
assertNotNull ( reader )
assertThat ( writer . toString ( ) , is ( emptyString ( ) ) )
assertEquals ( "helloworld/HelloWorldService.componentType" , resourceExport . getURI ( ) )
assertEquals ( "Result should have been an empty string since the cookie name is null." , "" , result )
assertEquals ( tasks , counter . get ( ) )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertThat ( user . getUserId ( ) ) . isEqualTo ( User . UNKNOWN_USER_ID )
assertArrayEquals ( te . array , te2 . array )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertNotNull ( annotation )
assertNotNull ( annotation )
assertNotNull ( "ClassSpec not null" , result )
assertEquals ( 100 , counter . get ( ) )
assertEquals ( 100 , counter . get ( ) )
assertNotNull ( configuration . getParameters ( ) )
assertTrue ( 0 < TestUtilities . getSize ( azureResourceManager . storageAccounts ( ) . list ( ) ) )
assertEquals ( error , Futures . completionExceptionCause ( error ) )
assertNotNull ( result )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( options . size ( ) , is ( 0 ) )
assertNull ( arrayType . getParentClass ( ) )
assertNotNull ( operation )
assertEquals ( "invoke" , BeanHelper . invoke ( this , getName ) )
assertEquals ( "dbName" , HBaseVariantTableNameGenerator . getDBNameFromVariantsTableName ( "dbName_variants" ) )
assertThat ( actual , empty ( ) )
assertThat ( actual , empty ( ) )
assertThat ( actual , empty ( ) )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( event . unwrap ( Cache . Entry . class ) ) . isSameInstanceAs ( event )
assertThat ( DOT . token ( ) , is ( "." ) )
assertNotNull ( actual )
assertNotNull ( "Response is null." , response )
assertNotNull ( actual )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( false , result )
fail ( ex . toString ( ) )
fail ( ex . toString ( ) )
assertEquals ( expResult , result )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertEquals ( "parameterName" , ParameterClass . class . getMethod ( "method" , String . class ) . getParameters ( ) [ 0 ] . getName ( ) )
assertEquals ( "bar" , ctx . getNamespaceURI ( "foo" ) )
assertThat ( PortablePath . of ( "src" + fileSeparator + "test" + fileSeparator + "folder" , isWindowsSeparator ) . getFileName ( ) ) . isEqualTo ( "folder" )
assertEquals ( "\\u0000\\u0001\\u0002\\u0003\\u0004" , output . toString ( ) )
assertEquals ( LogLevel . INFO , victim . level ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( "2.1-SNAPSHOT" , testSubject . revisionOf ( Object . class ) )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertTrue ( true )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertTrue ( true )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertEquals ( messagesProperties . getProperty ( key ) , DataprepBundle . message ( key ) )
assertEquals ( "property" , theProperty . getName ( ) )

assertEquals ( "http://example.test/" , uri . resolve ( "http://example.test/" ) )
assertThat ( e . getOError ( ) . getCode ( ) , is ( "ServiceUnavailableException" ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertNull ( qualifiedName )
assertEquals ( VerwerkingsResultaat . GESLAAGD , VerwerkingsResultaat . parseNaam ( "Geslaagd" ) )
assertNotNull ( ds )
assertThat ( array . toString ( ) , equalTo ( "[\"1\",\"2\",\"3\"]" ) )
assertTrue ( new TerminalOptionsInputValidator ( new ProtocolFactory ( list ) ) . validate ( uri ) )
assertThat ( controller . paramValues ( "aaa" ) , is ( array ) )
assertNull ( results )
fail ( "Expected RuntimeException." )
assertNotSame ( m1 , m2 )
assertEquals ( annotationAttributes , result )
assertEquals ( "text" , converter . convert ( array , String . class ) )
assertTrue ( INSTANCE . userCountry ( ) . matches ( "[a-zA-Z].*" ) )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertEquals ( HttpURLConnection . HTTP_OK , login ( webConversation , getOrionTestName ( ) , getOrionTestName ( ) ) )
assertThat ( type . toString ( ) ) . isEqualTo ( "java.lang.String[]" )
assertThat ( Layout . getInstance ( ) ) . isSameAs ( Layout . getInstance ( ) )
assertEquals ( annotationAttributes , result )
assertThat ( ( String ) processBag . getProperty ( "test" ) , is ( String . valueOf ( id ) ) )
assertEquals ( "id\n\n" , new EventSourceMessage ( ) . id ( "" ) . build ( ) )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( MessageType . C , messageType )
assertNull ( message )
assertEquals ( REPLY_TO_ANONYMOUS , properties . getReplyTo ( ) . getAddress ( ) . getValue ( ) )
assertEquals ( event . getEventProperties ( ) , map )
assertNull ( message )
assertThat ( this . source . getOrigin ( "test" ) ) . isNull ( )
assertEquals ( ( Integer ) 123 , config )
assertThat ( connected , is ( true ) )
assertEquals ( property . getType ( ) , String . class )

assertThat ( actual , empty ( ) )
assertEquals ( RepositoryTest . class . getName ( ) . replace ( "." , "/" ) , actual )
assertEquals ( 0 , array . length )
assertEquals ( INSTANCE . getString1Arg ( "A" ) , func . apply ( INSTANCE , "A" ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertEquals ( "Player cannot be null." , e . getMessage ( ) )
assertNotNull ( ci )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( getContext ( ) )
assertThat ( driver . toString ( ) , is ( notNullValue ( ) ) )
assertNull ( new NotificationMessage ( ) . getPayloadString ( ENTRY_NAME ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( Arrays . asList ( 1 , 2 ) , Serialization . unmarshal ( "- 1\n- 2" , List . class ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertEquals ( "/lincoln/orders/24" , path . build ( map ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertFalse ( resourceRoot . write ( getMount ( ) + "/" , is , false ) )
assertEquals ( annotationAttributes , result )
assertEquals ( cc . toString ( ) , "no-cache,no-transform" )
assertEquals ( cc . toString ( ) , "no-transform" )
assertTrue ( cc . toString ( ) . contains ( "private=\"a,b\"" ) )
assertTrue ( cc . toString ( ) . contains ( "no-cache=\"c,d\"" ) )
assertEquals ( DataModifiedTimeGenerator . generateModifiedTime ( date ) , new SimpleDateFormat ( "yyyyMMddHHmmssSSS" ) . format ( date ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertThat ( request . getHeader ( "aaa" ) , is ( "111" ) )
assertEquals ( VerwerkingsResultaat . GESLAAGD , VerwerkingsResultaat . parseNaam ( "Geslaagd" ) )
assertEquals ( null , SearchUtil . getFirstListValueFromMap ( Collections . singletonMap ( "someKey" , Collections . emptyList ( ) ) , "someKey" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( Locale . ENGLISH , reduced . locale ( ) )
assertEquals ( "val1" , m . getUserProperty ( "prop1" ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( Link . class , relationshipTypeRepresentationStrategy . getJavaType ( rel ( link ) ) )
assertEquals ( "check DOMs match" , expected , dom1Str )
assertEquals ( "MediaProcessors" , MediaProcessor . list ( ) . getUri ( ) )
assertEquals ( "MediaProcessors" , MediaProcessor . list ( ) . getUri ( ) )
assertEquals ( annotationAttributes , result )
assertNotNull ( output )
assertNotNull ( output )
assertEquals ( null , JsonUtils . parseDateRfc822 ( null ) )
assertEquals ( exp , parse )
assertEquals ( dateFormat . format ( date ) , dateFormat . format ( response . getLastModified ( ) ) )
assertEquals ( dateFormat . format ( date ) , dateFormat . format ( response . getLastModified ( ) ) )
assertEquals ( 405 , launcher . service ( "GET" , "/a" , "" , null , null , null ) . getStatus ( ) )
assertEquals ( 405 , launcher . service ( "GET" , "/a" , "" , null , null , null ) . getStatus ( ) )
assertEquals ( xStringList , list )
assertThat ( metadata . getClusterName ( ) ) . hasValue ( CcmBridge . CLUSTER_NAME )
assertThat ( metadata . getClusterName ( ) ) . hasValue ( CcmBridge . CLUSTER_NAME )
assertEquals ( "/cntrl" , r . toString ( ) )
assertEquals ( newArrayList ( tag ) , response . getHeaders ( ) . get ( "ETag" ) )
assertEquals ( "String returned from ClientRequest filter doesn't contain the expected value" , "42" , str )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertTrue ( writer . toString ( ) . indexOf ( "22222" ) < writer . toString ( ) . indexOf ( "11111" ) )
assertNotNull ( "Should not be null" , response . getEntity ( ) )
assertEquals ( HttpResponseCodes . SC_OK , response . getStatus ( ) )
assertEquals ( annotationAttributes , result )
assertEquals ( 1 , value )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertEquals ( "key of map should be case insensitive" , "nocache" , map . getFirst ( "caChe-CONTROL" ) )
assertNotNull ( build )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( "The validated array is empty" , ex . getMessage ( ) )
assertEquals ( "Hello world!" , messageComponent . getMessage ( ) )
assertEquals ( "h1v1" , headers . getFirst ( "h1" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertTrue ( ContextDataFactory . createContextData ( ) instanceof SortedArrayStringMap )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , template )
assertNull ( EventType . fromName ( "hmpf" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( event , listener . event )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertNull ( ShpFileType . DBF . toBase ( noExtension ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertNull ( this . producer . produce ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( uri , instance . getURI ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( "bar" , p . evaluate ( new MapFeature ( map ) ) )
assertNotNull ( managerFactory )
assertEquals ( "1" , event . getDataSourceId ( ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertEquals ( 2 , gremlinExecutor . eval ( "1+x" , "gremlin-groovy" , b ) . get ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertEquals ( purRepository , diConfig . getRepository ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( expected , updated )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( "ProducerKey" , producer . getProducerKey ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertNotNull ( uri )
assertEquals ( name , testName )
assertEquals ( event , listener . event )
assertEquals ( name , testName )
assertNotNull ( uri )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertNotNull ( actual )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertEquals ( new URI ( "http:///stuff?param=stuff#fragment" ) , result )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertNotNull ( uri )
assertTrue ( sup . get ( ) . isEmpty ( ) )
assertEquals ( name , testName )
assertEquals ( event , listener . event )
assertEquals ( name , testName )
assertNotNull ( uri )
assertEquals ( event , listener . event )
assertEquals ( event , listener . event )
assertEquals ( myFile . getPath ( ) , myVfFile . getPath ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertArrayEquals ( msg , EXPECTED_EMPTY , result )
assertNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertEquals ( "{scheme}://{host}/a/b%2Fc?{q}={v}#{fragment}" , builder . toTemplate ( ) )
assertEquals ( "https://localhost/a/b/c?test=hello#hello_fragment" , builder . toTemplate ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , result )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expected , result )
assertEquals ( expected , result )
assertEquals ( "No Filter" , Util . getMessage ( "no-filter" , "test" ) )
assertNotNull ( KettleVFS . getScheme ( schemes , vfsFilename ) )
assertEquals ( EmbeddedDatastore . class , provider . createDatastore ( unit ( "memory:///" ) ) . getClass ( ) )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNotSame ( testPath , path )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertEquals ( uri , new URI ( "/some/site/mypart" ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "first" , mockedList . get ( 0 ) )
assertThat ( queryParser . getQueryString ( query , ProductBean . class ) ) . isEqualTo ( "popularity:[* TO *]" )
assertThat ( queryParser . getQueryString ( query , ProductBean . class ) ) . isEqualTo ( "popularity:[* TO *]" )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertEquals ( "" , expressionLanguage . getValue ( ) )
assertEquals ( "" , expressionLanguage . getValue ( ) )
assertEquals ( "00" , StringUtils . padEnd ( null , 2 , '0' ) )
assertEquals ( "00" , StringUtils . padEnd ( null , 2 , '0' ) )
assertEquals ( null , result )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "SKIP_LINE" , converter . toString ( ParseState . SKIP_LINE ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( annotationAttributes , result )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertThat ( BackendExecutorContext . getInstance ( ) . getExecutorEngine ( ) , is ( BackendExecutorContext . getInstance ( ) . getExecutorEngine ( ) ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertTrue ( constructor == instantiator . getConstructor ( ) )
assertNotNull ( "Helper from AdWordsServices is null" , helper )
assertNotNull ( "Helper from AdWordsServices is null" , helper )
assertEquals ( 81 , options . getOptions ( ) . port )
assertArrayEquals ( actual , new Object [ ] { "a" , "b" , 5 } )
assertArrayEquals ( actual , new Object [ ] { "a" , "b" , 5 } )
assertEquals ( 81 , options . getOptions ( ) . port )
assertEquals ( witnessList , partList )
assertNotNull ( ec )
assertEquals ( "" , writer . getBuffer ( ) . toString ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertEquals ( expected , read )
assertThat ( iterator . next ( ) . getMessage ( ) ) . isEqualTo ( "abc" )
assertEquals ( "John Smith" , widget . name . getText ( ) )
assertEquals ( false , result )
assertThat ( findTargetTypeName ( new Annotation [ 0 ] , String . class ) , nullValue ( ) )
assertEquals ( "" , res )
assertEquals ( "" , res )
assertEquals ( "" , res )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( quote ( "2013-04-09T09:06:17+02:00" ) , mapper . writeValueAsString ( dt ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "hello world" , Escaper . escapeWithQuotesAsMakefileValueString ( "hello world" ) )
assertEquals ( "hello world" , Escaper . escapeWithQuotesAsMakefileValueString ( "hello world" ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "one ( ) \\" , TokenQueue . unescape ( "one \\( \\) \\\\" ) )
assertEquals ( "" , Property . createProperty ( "name" , null ) . getValue ( ) )
assertEquals ( "http://example.com/my/path?one=two&three=four" , builder . toString ( ) )
assertThat ( event . getMessage ( ) , Matchers . stringContainsInOrder ( "%s %d" , "a" ) )
assertThat ( visibilityCache . isVisible ( repo , walk , access , commitB . getId ( ) , known ) ) . isTrue ( )
assertEquals ( "result" , testBean . getResult ( ) )
assertEquals ( annotationAttributes , result )
assertArrayEquals ( te . array , te2 . array )
assertThat ( ReflectUtils . getName ( c ) , equalTo ( "(java.util.List,int[])" ) )
assertEquals ( a , address . getAddress ( ) )
assertEquals ( a , address . getAddress ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( event , listener . event )
assertEquals ( c , c )
assertTrue ( true )
assertEquals ( false , result )
assertEquals ( false , result )
assertThat ( provider . getServer ( ) , equalTo ( "demo-server" ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertNotNull ( locator . getFactory ( FactoryC . class ) )
assertEquals ( 99 , rangeSequence . itemAt ( 98 ) . toJavaObject ( Integer . class ) . intValue ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertEquals ( true , result )
assertTrue ( expressions . evaluateValueExpression ( "#{foo}" ) . equals ( "baz" ) )
assertEquals ( REPLY_TO_ANONYMOUS , properties . getReplyTo ( ) . getAddress ( ) . getValue ( ) )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertNotNull ( result )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "dir/file" , file . getPath ( ) )
assertTrue ( clientBundle . icon ( ) . transform ( ) instanceof DataResource )
assertEquals ( lastNum ( getSysOut ( ) ) , 24 )
assertEquals ( authenticator , aURL . getAuthenticator ( ) )
assertEquals ( val , result )
assertEquals ( annotationAttributes , result )
assertThat ( e . getSource ( ) , is ( application ) )
assertThat ( e . getSource ( ) , is ( application ) )
assertThat ( change . isBreakingChange ( aConnector ( ) . build ( ) ) ) . isFalse ( )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "('a', 'b')" , a . toString ( ) )
assertThat ( Window . Location . getProtocol ( ) ) . isEqualTo ( "http:" )
assertEquals ( "" , path . toString ( ) )
assertNotEquals ( "" , result )
assertEquals ( "" , path . toString ( ) )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertNull ( requestConfig )
assertEquals ( new SchemaLocation ( uri ( "http://example.org" ) , emptyList ( ) ) , actual )
assertThat ( lotsOfSpans ( ) . filter ( s -> sampler . isSampled ( s . traceId ( ) , false ) ) ) . isEmpty ( )
assertNotNull ( cseclientrequest . getHeaders ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( "2" , result . get ( 0 ) )
assertTrue ( true )
assertEquals ( "String returned from ClientRequest filter doesn't contain the expected value" , "42" , str )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertNull ( impl . handleRequest ( req , resp ) )
assertThat ( griffinResponse . getStatus ( ) ) . isEqualTo ( 201 )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertEquals ( "application/json" , delegate . toString ( new MediaType ( "application" , "json" ) ) )
assertThat ( evaluateExpression ( "ambiguous()" ) ) . isEqualTo ( "from-root" )
assertEquals ( 0 , byteBuffers . size ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( false , result )
assertThat ( doc . toString ( ) ) . isEqualTo ( name )
assertEquals ( false , result )
assertEquals ( "{\"immutablePrimitive\":true,\"mutablePrimitive\":true}" , os . toString ( "UTF-8" ) )
assertEquals ( "$foo" , s )
assertEquals ( s , s2 )
assertEquals ( s , s2 )
assertEquals ( "c" , evalExpression ( "[a b]" , ev ) )
assertEquals ( witness , t )
assertEquals ( expected , options . getOptions ( ) . url )
assertEquals ( 2 , listJobsResult . size ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertEquals ( "" , writer . toString ( ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertThat ( OutputStream . toByteArray ( ) , is ( emptyString ( ) . getBytes ( ) ) )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertThat ( m . getData ( ) ) . isEqualTo ( b )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( Boolean . TRUE , m . getValue ( new PropositionSymbol ( "P" ) ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( path , FileDownloadUtils . toUnixPath ( path ) )
assertEquals ( ArrayList . class , ReflectionUtil . newInstance ( ArrayList . class ) . getClass ( ) )
assertEquals ( "123" , new NumberSupport ( INT , "123" ) . getStringValue ( ) )
assertEquals ( "false" , property )
assertEquals ( "false" , property )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( IScaContentDescriber . INVALID , getIdDescriber ( ) . describe ( new Object ( ) ) )
assertNull ( ret )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertNull ( ret )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( 0 , query . getRadius ( ) , 0.0000001 )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "foo" , b . getFieldName ( ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertEquals ( "{\"date\":\"" + localizedFormattedDate ( ) + "\",\"fieldAccessOnly\":\"access-via-field\"}" , IO . slurp ( new URL ( base . toExternalForm ( ) + getClass ( ) . getSimpleName ( ) + "/test" ) ) )
assertNull ( ret )
assertNull ( ret )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( "[2,3,4]" , list . toString ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( "r_10:20" , t . generate ( ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertThat ( bindings . getCondition ( ) ) . hasToString ( "person.name = ?[$1] OR person.bar = ?[$2]" )
assertThat ( bindings . getCondition ( ) ) . hasToString ( "person.name = ?[$1] OR person.bar = ?[$2]" )
assertThat ( query . toDocument ( ) . get ( "num" ) ) . isNull ( )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( chord ( sequences ) ) . isEqualTo ( "foo\uE012\uE000" )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertThat ( templateStore . get ( "unkown template ID" ) ) . isNull ( )
assertNull ( operationResult . getEntity ( ) )
assertNull ( operationResult . getEntity ( ) )
assertNull ( filter ( null ) )
assertThat ( passwordAlgorithmFactory . defaultPasswordAlgorithm ( ) ) . isEqualTo ( defaultPasswordAlgorithm )
assertThat ( service . getInterface ( ) , equalTo ( DemoService . class . getName ( ) ) )
assertFalse ( filter . accept ( "the" ) )
assertThat ( invocations ) . startsWith ( "visitStart" ) . endsWith ( "visitEnd" ) . contains ( "visitFileHeader" )
assertThat ( invocations ) . startsWith ( "visitStart" ) . endsWith ( "visitEnd" ) . contains ( "visitFileHeader" )
assertFalse ( filter . accept ( "the" ) )
assertThat ( NestBean . class . getName ( ) , equalTo ( c . getName ( ) ) )
assertFalse ( filter . accept ( "the" ) )
assertEquals ( "localhost" , map . get ( "mail.server.host" ) )
assertThat ( map . get ( "different name" ) , nullValue ( ) )
assertNotNull ( JBBPParser . prepare ( "byte; align;" ) . parse ( new byte [ ] { 1 } ) )
assertThat ( x . getCause ( ) , instanceOf ( ConnectException . class ) )
assertEquals ( baseUri , m . getBaseURI ( ) . toString ( ) )
assertEquals ( 0 , new XWikiDBVersion ( 71506 ) . compareTo ( this . component . getVersion ( ) ) )
assertTrue ( response . getBodyAsString ( ) . contains ( "\"infoCache\":" ) )
assertTrue ( npe . getMessage ( ) . contains ( "Cannot create a literal from a null" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( "SOME_FOO" , Formatter . toUpperCase ( "some_foo" ) )
assertEquals ( 185 , res3 . getBody ( ) . getLength ( ) )
assertEquals ( "ja" , new Configuration ( new File ( "" ) , symbolTable , emptyList ( ) , "ja" , false ) . getKey ( ) )
assertEquals ( src , translate ( src ) )
assertEquals ( "ja" , new Configuration ( new File ( "" ) , symbolTable , emptyList ( ) , "ja" , false ) . getKey ( ) )
assertEquals ( "yes" , config . getString ( "default" , "expr" ) )
assertEquals ( null , articleId )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( 0.1 , crossover . crossoverProbability ( ) , EPSILON )
assertThat ( ex . getResponse ( ) . getStatus ( ) ) . isEqualTo ( Status . NOT_FOUND . getStatusCode ( ) )
assertEquals ( "abc" , html )
assertTrue ( "The client must be valid." , oauthClientStore . validateClient ( op2Client . getClientId ( ) , op2Client . getClientSecret ( ) ) )
assertEquals ( 1 , wizard . getPages ( ) . size ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot set the value of read-only property 'readOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertNotNull ( bulk )
assertEquals ( "image/png" , FileUtil . determineFileType ( file , "cc0.png" ) )
assertEquals ( "image/png" , FileUtil . determineFileType ( file , "cc0.png" ) )
assertEquals ( e , input )
assertEquals ( "Should have returned the matched route" , THE_MATCHED_ROUTE , request . matchedPath ( ) )
assertEquals ( "" , result )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertNull ( reader , "Expect null for the reader when no change set exists for the drift definition." )
assertEquals ( "Source null cannot be empty" , exception . getMessage ( ) )
assertEquals ( "" , result )
assertNull ( config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "{}" , writer . toString ( ) )
assertEquals ( "{\"name\": \"name_Value\"}" , writer . toString ( ) )
assertEquals ( EXPECTED_VALUE , test . toJSON ( IDENT ) )
assertEquals ( version . getVersion ( ) . hashCode ( ) , version . hashCode ( ) )
assertThat ( config . getPlatformAuthUrl ( ) , equalTo ( PLATFORM_AUTH_URL + OCS_PLATFORM_AUTH_DEFAULT_PATH ) )
assertTrue ( notified )
assertEquals ( false , msg . getDTEFlag ( ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertEquals ( false , msg . getDTEFlag ( ) )
assertEquals ( CAUSE_MESSAGE , result . getMessage ( ) )
assertNull ( exchange . getPhase ( ) )
assertNotNull ( mpd )
assertNull ( issueType . getObject ( ) )
assertThat ( ProfileVersion . V1P0 . versionAlt ( ) ) . isEqualTo ( "1.0" )
assertNotNull ( limit . getEndpoint ( ) )
assertEquals ( src , translate ( src ) )
assertEquals ( "01" , IOUtils . toString ( input , Charset . defaultCharset ( ) ) )
assertEquals ( "Could not find CloudSdkPreferenceResolver" , 1 , found )
assertEquals ( "Could not find CloudSdkPreferenceResolver" , 1 , found )
assertEquals ( strip ( collectionText ( true , false ) ) , fjson . toString ( collection ( ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertEquals ( doc , instance . getAnalyzingDocument ( ) )
assertNull ( CompressionPolicyBuilder . getAssertion ( m ) )
assertEquals ( location , emp1 . getLocation ( ) )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( true , result )
assertEquals ( "Use Fallback Repositories" , true , config . useFallbackRepositories ( ) )
fail ( "should failed parse the config from bytes" )
assertEquals ( "HandlerManager" , name )
assertNull ( TStr . join ( collection ) )
assertFalse ( result )
assertNotNull ( Elements . a ( ) )
assertNotEquals ( UniqueIdGenerator . newUniqueId ( ) , UniqueIdGenerator . newUniqueId ( ) )
assertNull ( format )
assertEquals ( c , c )
assertEquals ( control , swipeLayout . getOnTopControl ( ) )
assertTrue ( detector . isClassLoaded ( JBossDetectorTest . class . getName ( ) , inst ) )
assertEquals ( true , result )
assertFalse ( "Cought exception." , true )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "info" , adapter . getServerInfo ( ) )

assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( 2012 , msg . getUtcYear ( ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertTrue ( list . isEmpty ( ) )
assertEquals ( map , new SyntheticWorkflowStepImpl ( "test" , map ) . getMetadataMap ( ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( RESTRICTION_CATEGORY , actual )
assertEquals ( "Default VM URL in incorrect" , "failover:(vm://embedded-broker?create=false)" , instance . getVmURL ( ) )
assertEquals ( "create returns incorrect object." , "com.ibm.ws.security.javaeesec.identitystore.IdentityStoreHandlerImpl" , ishb . create ( cc ) . getClass ( ) . getName ( ) )
assertTrue ( _persistableSpi . canDecode ( document . getRootElement ( ) ) )
assertTrue ( _persistableSpi . canDecode ( document . getRootElement ( ) ) )
assertEquals ( "bye" , lwt . getMessage ( ) )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertTrue ( "Server 1 should be fenced and standby" , server1Fenced )
assertTrue ( "Server 1 should be fenced and standby" , server1Fenced )
assertEquals ( "" , result )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( FORBIDDEN_403 , response . getStatus ( ) )
assertThat ( response . getStatus ( ) ) . isEqualTo ( Http . OK )
assertNull ( test . toString ( ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( HttpStatus . SC_BAD_REQUEST , createFilePolicyResp . getStatus ( ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )


JSONAssert . assertEquals ( "{}" , node . toString ( ) , false )
assertEquals ( result [ i ] , testData [ i ] )
assertEquals ( result [ i ] , testData [ i ] )
assertThat ( association . getId ( ) , is ( equalTo ( COLLECTION_ID ) ) )
assertNotNull ( "Entity must not be null" , entityPrivacyPreferences )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( expected , ServiceAccountCredentials . getUriForSelfSignedJWT ( uri ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( expected , ServiceAccountCredentials . getUriForSelfSignedJWT ( uri ) )
assertEquals ( 404 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
Assert2 . assertEquals ( response . getStatus ( ) , HttpURLConnection . HTTP_UNAUTHORIZED )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( HELLO_WORLD , entity )
assertEquals ( HELLO_WORLD , entity )
assertThat ( value . get ( ) , is ( "configuredAsyncValue" ) )
assertEquals ( "hi rest!" , message )
assertEquals ( "hi rest!" , message )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertNotNull ( post )
assertEquals ( "Yeah Baby It rocks!" , res )
assertEquals ( "a" , s )
assertEquals ( "a" , s )
assertEquals ( "a" , s )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertEquals ( ERROR_MSG , "/test" , response . readEntity ( String . class ) )
assertEquals ( ERROR_MSG , "/test" , response . readEntity ( String . class ) )
assertEquals ( 307 , response . getStatus ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "name1" , webXml . getName ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertThat ( r . getStatus ( ) ) . isEqualTo ( 200 )
assertEquals ( valuableData , result )
assertEquals ( "ok" , stream )
assertEquals ( 307 , response . getStatus ( ) )
assertEquals ( HttpResponseCodes . SC_PRECONDITION_FAILED , response . getStatus ( ) )
assertEquals ( response , "OK" )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertNotNull ( ds )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "HELLO WORLD" , response . readEntity ( String . class ) )
assertEquals ( "a" , response . readEntity ( String . class ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 403 , response . getStatus ( ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( new JSON ( ) , new JSON ( ) . set ( "foo" , new JSON ( ) ) . getJSON ( "foo" ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "[\"1\",\"2\"]" , encode ( list ) )
assertEquals ( 500 , r . getStatus ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertThat ( BigDecimalUtil . toBigDecimal ( null ) , is ( nullValue ( ) ) )
assertEquals ( "http://localhost:9000/api/properties/sonar.core.version" , sonarDetector . buildPropertiesUrl ( url ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( APPLICATION_XML , result )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( john , entity )
assertEquals ( a , address . getAddress ( ) )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( APPLICATION_JSON , result )
assertEquals ( "provider" , response )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( mojo . getArtifactFile ( ) . getName ( ) , is ( "foo-1.0-SNAPSHOT.woapplication" ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "provider" , response )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertThat ( DateUtil . toDate ( date ) , is ( date ) )
assertEquals ( expected , TransformationErrorCode . AliasForMetamodelAlreadyExists . getFullyQualifiedCode ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "parameter 1 is not optional but null was provided" , e . getMessage ( ) )
assertEquals ( "parameter 1 is not optional but null was provided" , e . getMessage ( ) )
assertThat ( project . getId ( ) ) . isEqualTo ( "about-fedora" )
assertNotNull ( in )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( "" , result )
assertEquals ( "1,2,3" , testPm . listOfLongsWithoutHelperImpl . getValueAsString ( ) )
assertThat ( entity . getKey ( ) . getId ( ) , is ( not ( 0L ) ) )
assertEquals ( 200 , res . getStatus ( ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThat ( this . registeredBeanDefinition . getName ( ) , is ( this . name ) )
assertThat ( contentMimeType , equalTo ( ContentType . TEXT_HTML . getMimeType ( ) ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Hi REST!" , message )
assertEquals ( "Hello World!:EJB3Bean" , proxy . echo ( "Hello World!" ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "HELLO WORLD" , response . readEntity ( String . class ) )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( 503 , r . getStatus ( ) )
assertThat ( key . getKind ( ) ) . isEqualTo ( "Animal" )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( "property" , theProperty . getName ( ) )
assertEquals ( FooException . class . getName ( ) , response )
assertTrue ( "Known content was not found in .doc" , readAll ( result ) . contains ( "quick brown fox" ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "provider" , response )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertNull ( VOFinder . findByKey ( null , 2000 ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Expected HTTP 404 to be returned as process instance doesn't exist." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "ok" , stream )
assertEquals ( "JavaArchive should have given name" , archiveName , javaArchive . getName ( ) )
assertEquals ( "ok" , stream )
assertEquals ( JsonBindingProvider . called , Boolean . TRUE )
assertEquals ( "{\"value\":\"hi rest!\"}" , message )
assertEquals ( "ok" , stream )
assertEquals ( "hi rest!" , message )
assertEquals ( FooException . class . getName ( ) , response )
assertThat ( content . getBody ( ) ) . contains ( "/custom-" )
assertNotNull ( ds )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertNotEquals ( value , testBean . getSimpleReadOnly ( ) )
assertEquals ( "ok" , response )
assertEquals ( 503 , r . getStatus ( ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( FooException . class . getName ( ) , response )
assertNotNull ( in )
assertEquals ( "" , value )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( Long . valueOf ( 13 ) , databaseEntity . getId ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( "immediateResume" , str )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( response . readEntity ( String . class ) , OK_200 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertEquals ( "GET: Hello World!" , result )
assertTrue ( "Expected @Context injection of Providers to occur before @PostConstruct method invoked, but was not" , b )
assertTrue ( "Expected @Context injection of Providers to occur before @PostConstruct method invoked, but was not" , b )
assertEquals ( "immediateResume" , str )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( "Beginning Java EE 7" , book . getTitle ( ) )
assertEquals ( response . readEntity ( String . class ) , OK_200 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( status , protocoloInfo . getStatus ( ) )
assertNotNull ( ex . getMessage ( ) )
assertNotNull ( classLoader . loadClass ( DelegatingClassLoaderTest . class . getName ( ) ) )
assertEquals ( "hi foo!" , hello . hi ( "foo" ) )
assertEquals ( FooException . class . getName ( ) , response )
assertEquals ( FooException . class . getName ( ) , response )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertTrue ( doc . getProperty ( "dc:title" ) . isDirty ( ) )
assertNotNull ( "Response is null." , response )
assertEquals ( "Error" , error . toString ( ) )
assertTrue ( "The value ServletContext parameter 'testValue' is inconsistent" , testServicePortType . getServletContextParameter ( ) . equals ( "aaa" ) )
assertNull ( character )
assertEquals ( "Hi (including POJO interceptor)" , response )
assertNotNull ( resource )
assertEquals ( 1 , result )
assertEquals ( "Hello,      World!" , MessageUtils . getMessage ( ) )
assertTrue ( "Incorrect cause " + cause , cause instanceof TestException )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertThat ( meta . myIntegerList . isNotNull ( ) , is ( IsNotNullCriterion . class ) )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEqualsBlockLayout ( getBlockLayout ( blockSide , rows , cols ) , LAYOUT_2x2 )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( lines ) . containsExactly ( TEST_DATA [ 0 ] . trim ( ) , TEST_DATA [ 1 ] + TEST_DATA [ 2 ] . trim ( ) , TEST_DATA [ 3 ] . trim ( ) , TEST_DATA [ 4 ] + TEST_DATA [ 5 ] + TEST_DATA [ 6 ] )
assertEquals ( "Name is inconsistent!" , name , record . getName ( ) )
assertEquals ( s , s2 )
assertEquals ( s , s2 )
assertEquals ( "" , step . getPath ( ) )
assertEquals ( "<h1>Hello @ World!</h1>" , html )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "//in/name" , data . getFullPath ( ) )
assertEquals ( "myBean.sayHello" , expression . getExpression ( ) )
assertEquals ( "Error" , error . toString ( ) )
assertNotNull ( "Error message is empty" , npe . getMessage ( ) )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertTrue ( e . getMessage ( ) . contains ( "setter" ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertThat ( TemplateParser . DEFAULT . parse ( " {% if true == true %} true {% else %} false {% endif %} " ) . render ( ) , is ( "  true  " ) )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "resolved" ) ) )
assertThat ( convertedContextId . getId ( ) , is ( "metaId" ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNotNull ( test . getConnection ( ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertThat ( jarFile . getName ( ) ) . isNotNull ( )
assertEquals ( "instantiator java.lang.Object()" , instantiator . toString ( ) )
assertThat ( r . getStatus ( ) ) . isEqualTo ( 200 )
assertEquals ( valuableData , result )
assertEquals ( "ok" , stream )
assertNull ( john )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertThat ( protocol . getExtension ( ) , equalTo ( "extension" ) )
assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertNotNull ( "cannot find resource \"ajaxslt/test/xpath.html\"" , url )
fail ( "Expected RuntimeException." )
assertThat ( response . getStatus ( ) , is ( Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "value" , CollectionsUtil . getAnyFrom ( populatedList ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( context . route ( ) ) . isEqualTo ( route )
assertThat ( ( ( HasString ) test ) . getString ( ) ) . isEqualTo ( "a string" )
assertEquals ( "SecondFirstHi ejbthree1852" , result )
assertSame ( expected , definer . findLoadedClass ( expected . getClassLoader ( ) , expected . getName ( ) ) )
assertNotNull ( factory . createEntityAcl ( ) )
assertThat ( sut . get ( new Object ( ) ) , nullValue ( ) )
assertEquals ( "ok" , api . test ( ) )
assertThat ( loader . getResource ( "demo/Application.java" ) ) . isNotNull ( )
assertThat ( gtx . getId ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( "Hello user1 with roles and with attributes!" , proxy . sayHello ( ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
withCursor ( cursor -> assertEquals ( readByChunks ( cursor , bufferSize / 2 ) , data ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertEquals ( "instantiator java.lang.String(byte[])" , instantiator . toString ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( out . toString ( ) , parseJSONToString ( json ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertNull ( DiskCachedTile . getCacheFolder ( ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Cannot get the value of write-only property 'writeOnlyProperty' for <bean> of type " + Bean . class . getName ( ) + "." ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "ActAs WS-Trust Hello World!" , proxy . sayHello ( serviceURL . getHost ( ) , String . valueOf ( serviceURL . getPort ( ) ) ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertNull ( Preconditions . checkNotNull ( null , "test" ) )
assertEquals ( tsdata , new StreamedCollection < > ( hist :: stream ) )
assertEquals ( "wrong number of arguments" , e . getMessage ( ) )
assertEquals ( "" , a . encode ( num_to_hash ) )
assertThat ( String . valueOf ( LEFT ) ) . isEqualTo ( LEFT . subSequence ( 0 , 1 ) )
fail ( "Expected " + SOAPFaultException . class . getName ( ) )
fail ( "Expected " + SOAPFaultException . class . getName ( ) )
assertEquals ( "xx10.20.130.230" , regexp )
assertEquals ( "xx10.20.130.230" , regexp )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertThat ( Bindable . of ( String . class ) . withAnnotations ( annotation ) . getAnnotations ( ) ) . containsExactly ( annotation )
assertEquals ( "ValueSqlFragment:test" , test . toString ( ) )
assertEquals ( "Ville" , cp . getValue ( ) )
assertNotNull ( e . getMessage ( ) )
assertThat ( fromJson ( asJson ( request ) , BatchCreateOrUpdateSecretsRequestV2 . class ) ) . isEqualTo ( request )
assertNotNull ( "rel previous not found" , dummyUberNode . getFirstByRel ( Link . REL_PREVIOUS ) )
assertNotNull ( "rel previous not found" , dummyUberNode . getFirstByRel ( Link . REL_PREVIOUS ) )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertThat ( content ) . contains ( "Spring Boot Startup Script" )
assertEquals ( "png" , TestUtils . getFormatName ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) )
assertEquals ( null , ComparatorType . getByClassName ( null ) )
assertEquals ( PARENT_DIR_PATH + SEPARATOR_CHAR + BASENAME , FilenameUtils . removeExtension ( FILENAME_FULL_PATH ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "foo://bar" , l . getValue ( ) )
assertEquals ( "foo://bar" , l . getValue ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( "Usage: java -jar umplerun.jar <umple_file> <cmd_file>\nExample: java -jar umple.jar airline.ump airline.cmd" + System . getProperty ( "line.separator" ) , outErrIntercept . toString ( ) )
assertEquals ( quote ( "2013-04-09T09:06:17+02:00" ) , mapper . writeValueAsString ( dt ) )
assertEquals ( EXIT_FAILURE , returnValue )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( ex . getCause ( ) instanceof ParseException )
assertNull ( "HCID was not null" , hcid )
assertTrue ( getBinaryDistribution ( ) . exists ( ) )
assertEquals ( workerAddress , operation . getWorkerAddress ( ) )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertTrue ( sqlSessionFactory . getConfiguration ( ) . hasMapper ( DummyMapper . class ) )
assertThatLineHasBeenDisplayed ( "Podaj nazwe pliku: " )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertNotNull ( operation )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( Can . < String > of ( "c" , "b" , "a" ) , Can . < String > of ( "a" , "b" , "c" ) . reverse ( ) )
assertEquals ( "Property stringProperty is mandatory but no value was provided" , e . getMessage ( ) )
assertThat ( response . getOutputAsString ( ) , is ( data ) )
assertThat ( response . getOutputAsString ( ) , is ( data ) )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertEquals ( "Parse Error: 'UNKNOWN' contains no valid operation" , e . getMessage ( ) )
assertTrue ( e . getMessage ( ) . indexOf ( "trombone" ) > - 1 )
assertThat ( e . getMessage ( ) , equalTo ( "Class AsmBackedClassGeneratorTest.PrivateBean is private." ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertThat ( reflector . invokeStatic ( Object . class , "" , new Object [ 0 ] ) , is ( Object . class ) )
assertTrue ( hit , "Did expect a MarkupNotFoundException" )
assertTrue ( e . getMessage ( ) . indexOf ( "trombone" ) > - 1 )
