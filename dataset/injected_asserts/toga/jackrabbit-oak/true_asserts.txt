assertNull ( ref )
assertFalse ( a . hasProperty ( propName ) )
assertFalse ( a . hasProperty ( propName ) )
assertFalse ( a . hasProperty ( propName ) )
assertTrue ( syncCtx . isExpired ( gr , syncConfig . group ( ) . getExpirationTime ( ) , "any" ) )
assertTrue ( syncCtx . isSameIDP ( userManager . getAuthorizable ( externalUser . getId ( ) ) ) )
assertTrue ( AutoMembershipConfig . EMPTY . getName ( ) . isEmpty ( ) )
assertTrue ( ctx instanceof DefaultSyncContext )
assertTrue ( monitor . getMonitorProperties ( ) . isEmpty ( ) )
assertFalse ( provider . isMember ( automembershipGroup1 , getTestUser ( ) , false ) )
assertTrue ( DynamicGroupUtil . getInheritedPrincipals ( new PrincipalImpl ( "test" ) , um ) . isEmpty ( ) )
assertTrue ( DynamicGroupUtil . getInheritedPrincipals ( new PrincipalImpl ( "test" ) , um ) . isEmpty ( ) )
assertTrue ( DynamicGroupUtil . getInheritedPrincipals ( new PrincipalImpl ( "test" ) , um ) . isEmpty ( ) )
assertTrue ( principals . isEmpty ( ) )
assertTrue ( principals . isEmpty ( ) )
assertTrue ( principals . isEmpty ( ) )
assertTrue ( result . isEmpty ( ) )
assertTrue ( result . isEmpty ( ) )
assertTrue ( Iterables . isEmpty ( tracker . getIdpNames ( "testSH" ) ) )
assertTrue ( Iterables . isEmpty ( tracker . getIdpNames ( "testSH" ) ) )
assertTrue ( Iterables . isEmpty ( tracker . getIdpNames ( "testSH" ) ) )
assertTrue ( Iterables . isEmpty ( tracker . getIdpNames ( "testSH" ) ) )
assertTrue ( Iterables . isEmpty ( tracker . getIdpNames ( "testSH" ) ) )
assertTrue ( props . isEmpty ( ) )
assertTrue ( provider . getDeclaredGroupRefs ( ref , AbstractLdapIdentityProviderTest . TEST_USER1_DN ) . isEmpty ( ) )
assertNull ( group )
assertTrue ( Iterables . isEmpty ( memberrefs ) )
assertTrue ( validator instanceof LookupLdapConnectionValidator )
assertFalse ( validator . validate ( connection ) )
assertFalse ( validator . validate ( connection ) )
assertFalse ( pp . isGranted ( root . getTree ( acPath ) , null , Permissions . READ ) )
assertTrue ( ntMgr . isNodeType ( root . getTree ( SUPPORTED_PATH ) , MIX_REP_CUG_MIXIN ) )
assertFalse ( cugAccessControlManager . defines ( InvalidCug . INSTANCE . getPath ( ) , InvalidCug . INSTANCE ) )
assertTrue ( permissionProvider instanceof CugPermissionProvider )
assertTrue ( pp instanceof CugPermissionProvider )
assertTrue ( acMgr instanceof CugAccessControlManager )
assertTrue ( acMgr instanceof CugAccessControlManager )
assertFalse ( testRoot . getTree ( "/content/rep:policy" ) . exists ( ) )
assertFalse ( importer . init ( s , root , getNamePathMapper ( ) , false , ImportUUIDBehavior . IMPORT_UUID_COLLISION_REMOVE_EXISTING , new ReferenceChangeTracker ( ) , getSecurityProvider ( ) ) )
assertTrue ( cugPermProvider . getPrivileges ( root . getTree ( p ) ) . isEmpty ( ) )
assertTrue ( cugPermProvider . getPrivileges ( null ) . isEmpty ( ) )
assertTrue ( createCugPolicy ( principals ) instanceof PrincipalSetPolicy )
assertFalse ( cug . addPrincipals ( getExcludedPrincipal ( ) ) )
assertTrue ( Iterables . contains ( cug . getPrincipalNames ( ) , excluded . getName ( ) ) )
assertFalse ( immutableRoot . getTree ( PathUtils . ROOT_PATH ) . hasProperty ( HIDDEN_NESTED_CUGS ) )
assertFalse ( tlp . contains ( p ) )
assertFalse ( testRoot . getTree ( VersionConstants . VERSION_STORE_PATH ) . exists ( ) )
assertTrue ( tp instanceof EmptyCugTreePermission )
assertTrue ( aggregationFilter . stop ( createPermissionProvider ( root , systemUserPrincipals . toArray ( new Principal [ 0 ] ) ) , systemUserPrincipals ) )
assertFalse ( aggregationFilter . stop ( createAccessControlManager ( root ) , ImmutableSet . of ( new PrincipalImpl ( "invalid" ) ) ) )
assertTrue ( CTX . definesContextRoot ( mockTree ( REP_PRINCIPAL_POLICY , NT_REP_PRINCIPAL_POLICY , true ) ) )
assertFalse ( filter . canHandle ( singleton ( getUserManager ( root ) . createGroup ( "group" ) . getPrincipal ( ) ) ) )
assertFalse ( filter . canHandle ( ImmutableSet . of ( getTestSystemUser ( ) . getPrincipal ( ) , getTestUser ( ) . getPrincipal ( ) ) ) )
assertTrue ( permissionProvider . getPrivileges ( mockReadOnlyTree ( TreeType . HIDDEN ) ) . isEmpty ( ) )
assertTrue ( permissionProvider . getPrivileges ( mockReadOnlyTree ( TreeType . INTERNAL ) ) . isEmpty ( ) )
assertEquals ( 0 , mgr . getApplicablePolicies ( validPrincipal ) . length )
assertEquals ( 0 , acMgr . getPolicies ( validPrincipal . getPath ( ) ) . length )
assertTrue ( new PrincipalBasedAuthorizationConfiguration ( ) . getCommitHooks ( "wspName" ) . isEmpty ( ) )
assertTrue ( pp instanceof PrincipalBasedPermissionProvider )
assertTrue ( acMgr instanceof PrincipalBasedAccessControlManager )
assertEquals ( 0 , emptyPolicy . size ( ) )
assertTrue ( init ( true , ImportUUIDBehavior . IMPORT_UUID_COLLISION_THROW ) )
assertFalse ( importer . handlePropInfo ( tree , mockPropInfo ( "wrongName" ) , mock ( PropertyDefinition . class ) ) )
assertFalse ( importer . handlePropInfo ( tree , mockPropInfo ( new PrincipalImpl ( "notFound" ) ) , mockPropertyDefinition ( getJcrName ( NT_REP_PRINCIPAL_POLICY ) ) ) )
assertTrue ( importer . handlePropInfo ( createPolicyTree ( user ) , mockPropInfo ( user . getPrincipal ( ) ) , mockPropertyDefinition ( getJcrName ( NT_REP_PRINCIPAL_POLICY ) ) ) )
assertFalse ( permissionProvider . getRepositoryPermission ( ) . isGranted ( Permissions . READ ) )
assertTrue ( permissionProvider . getRepositoryPermission ( ) . isGranted ( Permissions . NO_PERMISSION ) )
assertEquals ( 1 , acl . size ( ) )
assertFalse ( Utils . isPrincipalPolicyTree ( mockTree ( false , NT_REP_PRINCIPAL_POLICY , REP_PRINCIPAL_POLICY ) ) )
assertFalse ( Utils . isPrincipalPolicyTree ( mockTree ( true , REP_PRINCIPAL_POLICY , null ) ) )
assertFalse ( Utils . canHandle ( PRINCIPAL , mockFilter ( false ) , ImportBehavior . IGNORE ) )
assertTrue ( "file" . equals ( e . getMessage ( ) ) )
assertTrue ( "input" . equals ( e . getMessage ( ) ) )
assertTrue ( "input" . equals ( e . getMessage ( ) ) )
assertTrue ( "prefix" . equals ( e . getMessage ( ) ) )
assertTrue ( Sets . symmetricDifference ( cluster . blobStoreState . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertFalse ( pendingUploads . exists ( ) )
assertFalse ( pendingUploads . exists ( ) )
assertTrue ( Files . equal ( temp , uploader . read ( ID_PREFIX + 0 ) ) )
assertTrue ( noop . isEmpty ( ) )
assertNull ( uri )
assertTrue ( closed . get ( ) )
assertTrue ( loadTime <= cacheStats . getTotalLoadTime ( ) )
assertFalse ( getRegisteredTimeSeries ( statsProvider ) . contains ( "test" ) )
assertTrue ( child instanceof SecureNodeBuilder )
assertTrue ( secureNodeBuilder . exists ( ) )
assertTrue ( secureNodeBuilder . getChildNode ( NAME_ACCESSIBLE ) . exists ( ) )
assertTrue ( ns instanceof SecureNodeState )
assertTrue ( ns instanceof SecureNodeState )
assertTrue ( ns instanceof SecureNodeState )
assertEquals ( 2 , Iterables . size ( secureNodeBuilder . getProperties ( ) ) )
assertEquals ( 0 , Iterables . size ( secureNodeBuilder . getProperties ( ) ) )
assertEquals ( 0 , Iterables . size ( secureNodeBuilder . getNames ( "name" ) ) )
assertTrue ( secureNodeBuilder . hasProperty ( NAME_NON_ACCESSIBLE ) )
assertNull ( p )
assertFalse ( n . exists ( ) )
assertFalse ( ourRoot . getTree ( "/x" ) . exists ( ) )
assertNull ( p )
assertTrue ( ( ( ContextAwareCallback ) provider . callback ) . getIndexingContext ( ) . isAsync ( ) )
assertFalse ( provider . getContext ( indexPath ) . isReindexing ( ) )
assertTrue ( actual . isEmpty ( ) )
assertTrue ( idxBuilder . hasProperty ( "barIndexProp" ) )
assertTrue ( updater . getIndexPaths ( ) . contains ( "/a" ) )
assertTrue ( callbackInvoked . get ( ) )
assertTrue ( disabledIndexes . isEmpty ( ) )
assertTrue ( disabledIndexes . isEmpty ( ) )
assertEquals ( 5 , statsProvider . getRepoStats ( ) . getCounter ( Type . SESSION_COUNT ) . get ( ) )
assertTrue ( context . getService ( StatisticsProvider . class ) instanceof DefaultStatisticsProvider )
assertTrue ( Clock . ACCURATE . getTime ( ) - t0 >= 1000 )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( filter . includeAdd ( "q" , tree . getNodeState ( ) ) )
assertTrue ( p . test ( createWithProperty ( name , value ) ) )
assertFalse ( p . test ( createWithProperty ( name , value ) ) )
assertTrue ( immutable . isRoot ( ) )
assertTrue ( getHiddenTree ( immutable ) . exists ( ) )
assertTrue ( orderable . hasProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertEquals ( 2 , orderable . getPropertyCount ( ) )
assertTrue ( q . contains ( token ) )
assertTrue ( Maps . difference ( expected , authenticationConfiguration . getParameters ( ) ) . areEqual ( ) )
assertFalse ( authentication . authenticate ( creds ) )
assertTrue ( refresh )
assertTrue ( ctx instanceof TokenContext )
assertTrue ( info . remove ( ) )
assertFalse ( root . getTree ( tokenNodePath ) . exists ( ) )
assertNull ( info )
assertTrue ( getTokenTree ( info ) . exists ( ) )
assertTrue ( authorizationConfiguration . getWorkspaceInitializer ( ) instanceof AuthorizationInitializer )
assertTrue ( pp instanceof PermissionProviderImpl )
assertFalse ( AuthorizationContext . getInstance ( ) . definesContextRoot ( tree ) )
assertEquals ( 3 , acl . size ( ) )
assertFalse ( acl . addEntry ( testPrincipal , testPrivileges , true , Collections . emptyMap ( ) ) )
assertTrue ( acl . isEmpty ( ) )
assertFalse ( importer . init ( s , root , getNamePathMapper ( ) , false , ImportUUIDBehavior . IMPORT_UUID_COLLISION_THROW , new ReferenceChangeTracker ( ) , getSecurityProvider ( ) ) )
assertTrue ( importer . init ( mockJackrabbitSession ( ) , root , getNamePathMapper ( ) , isWorkspaceImport ( ) , ImportUUIDBehavior . IMPORT_UUID_COLLISION_THROW , new ReferenceChangeTracker ( ) , getSecurityProvider ( ) ) )
assertFalse ( importer . start ( aclTree ) )
assertFalse ( importer . start ( repoPolicy ) )
assertTrue ( policy instanceof ImmutableACL )
assertTrue ( acMgr . getApplicablePolicies ( testPath ) . hasNext ( ) )
assertTrue ( acMgr . getApplicablePolicies ( ( String ) null ) . hasNext ( ) )
assertTrue ( applicable [ 0 ] instanceof ACL )
assertNull ( val )
assertNull ( vs )
assertTrue ( ace . getRestrictions ( ) . isEmpty ( ) )
assertTrue ( found )
assertFalse ( Util . isACE ( t , ReadOnlyNodeTypeManager . getInstance ( root , getNamePathMapper ( ) ) ) )
assertFalse ( accessControlManager instanceof CompositeAccessControlManager )
assertFalse ( rp instanceof CompositeRestrictionProvider )
assertTrue ( rp instanceof CompositeRestrictionProvider )
assertTrue ( tp instanceof LimitedTreePermission )
assertFalse ( a . hasProperty ( TreeConstants . OAK_CHILD_ORDER ) )
assertFalse ( a . hasProperty ( propName ) )
assertEquals ( 0 , parent . getChildrenCount ( 1 ) )
assertFalse ( a . hasProperty ( "aProp" ) )
assertFalse ( vs . exists ( ) )
assertTrue ( empty . getEntries ( "/path" ) . isEmpty ( ) )
assertTrue ( noPermissions . getPrivileges ( tree ) . isEmpty ( ) )
assertNull ( entries )
assertTrue ( result . isEmpty ( ) )
assertFalse ( ps . exists ( ) )
assertTrue ( privilegeNames . isEmpty ( ) )
assertTrue ( tp instanceof RepoPolicyTreePermission )
assertFalse ( GlobPattern . create ( "/a/b/c/d" , "/*" ) . matches ( ) )
assertFalse ( sc . getParameters ( ) . containsKey ( "key" ) )
assertFalse ( sc . getParameters ( ) . containsKey ( "key" ) )
assertNull ( defaultConfig )
assertTrue ( principalProvider . getPrincipals ( testGroup . getID ( ) ) . isEmpty ( ) )
assertEquals ( 0 , Iterators . size ( result ) )
assertTrue ( aggregates . contains ( newPrivilege ) )
assertEquals ( 2 , names . size ( ) )
assertTrue ( pMgr instanceof PrivilegeManagerImpl )
assertTrue ( ctx . definesProperty ( mockTree ( "anyName" , ntName ) , property ) )
assertFalse ( ctx . definesTree ( treeProvider . createReadOnlyTree ( EmptyNodeState . EMPTY_NODE ) ) )
assertFalse ( ctx . definesTree ( mockTree ( PrivilegeConstants . REP_PRIVILEGES , ntName ) ) )
assertTrue ( properties . hasProperty ( "prop2" ) )
assertTrue ( properties . hasProperty ( "newPath/prop2" ) )
assertFalse ( getAuthorizableTree ( getTestUser ( ) ) . hasChild ( CacheConstants . REP_CACHE ) )
assertTrue ( predicate . apply ( testMember ) )
assertEquals ( 1 , Iterators . size ( group . getMembers ( ) ) )
assertEquals ( 1 , Iterators . size ( group . getMembers ( ) ) )
assertEquals ( 1 , Iterators . size ( member . memberOf ( ) ) )
assertEquals ( 1 , Iterators . size ( member . memberOf ( ) ) )
assertTrue ( dmp instanceof EveryoneMembershipProvider )
assertFalse ( everyoneGroup . addMember ( everyoneGroup ) )
assertTrue ( groups . contains ( everyoneGroup ) )
assertTrue ( groupPrincipal . isMember ( getTestUser ( ) ) )
assertFalse ( impersonation . getImpersonators ( ) . hasNext ( ) )
assertTrue ( impersonation . grantImpersonation ( getTestUser ( ) . getPrincipal ( ) ) )
assertFalse ( impersonation . allows ( createSubject ( groupPrincipal ) ) )
assertTrue ( impersonation . allows ( createSubject ( getAdminPrincipal ( ) ) ) )
assertTrue ( impersonation . allows ( createSubject ( ( AdminPrincipal ) ( ) -> "principalName" ) ) )
assertFalse ( impersonation . allows ( createSubject ( SystemPrincipal . INSTANCE ) ) )
assertTrue ( impersonation . allows ( createSubject ( impersonator . getPrincipal ( ) ) ) )
assertTrue ( authorizable . getPath ( ) . startsWith ( UserConstants . DEFAULT_USER_PATH + "/a/b/c" ) )
assertTrue ( authorizable . getPath ( ) . startsWith ( UserConstants . DEFAULT_USER_PATH + "/a/b/c" ) )
assertTrue ( mp . removeMember ( getTree ( gr ) , getTree ( member ) ) )
assertTrue ( failed . isEmpty ( ) )
assertFalse ( writer . addMember ( groupTree , contentId ) )
assertFalse ( getTree ( g ) . hasChild ( REP_MEMBERS_LIST ) )
assertTrue ( a . authenticate ( new SimpleCredentials ( userId , userId . toCharArray ( ) ) ) )
assertTrue ( a . authenticate ( new SimpleCredentials ( userId , userId . toCharArray ( ) ) ) )
assertTrue ( a . authenticate ( new SimpleCredentials ( userId , userId . toCharArray ( ) ) ) )
assertFalse ( root . getTree ( adminUser . getPath ( ) ) . getChild ( UserConstants . REP_PWD ) . exists ( ) )
assertFalse ( root . getTree ( user . getPath ( ) ) . hasChild ( REP_PWD ) )
assertEquals ( 10 , getHistory ( user ) . size ( ) )
assertFalse ( ph . updatePasswordHistory ( root . getTree ( u . getPath ( ) ) , "pw" ) )
assertTrue ( u . getPath ( ) . contains ( "/" + REL_PATH + "/" ) )
assertTrue ( createUser ( null ) instanceof SystemUserImpl )
assertFalse ( createUser ( null ) . isGroup ( ) )
assertFalse ( authentication . authenticate ( new SimpleCredentials ( userId , userId . toCharArray ( ) ) ) )
assertFalse ( authentication . authenticate ( creds ) )
assertFalse ( a . authenticate ( sc ) )
assertTrue ( authentication . authenticate ( new SimpleCredentials ( userId , userId . toCharArray ( ) ) ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , adminSession . getAuthInfo ( ) ) ) )
assertTrue ( authentication . authenticate ( new ImpersonationCredentials ( sc , mockAuthInfo ( userId ) ) ) )
assertTrue ( authentication . authenticate ( PreAuthenticatedLogin . PRE_AUTHENTICATED ) )
assertFalse ( ctx . definesProperty ( mockTree ( "anyName" , ntName ) , property ) )
assertTrue ( ctx . definesTree ( mockTree ( "anyName" , ntName ) ) )
assertFalse ( ctx . definesInternal ( mockTree ( "anyName" , ntName ) ) )
assertTrue ( getAdminUser ( ) . isAdmin ( ) )
assertTrue ( groupTree . hasProperty ( REP_MEMBERS ) )
assertTrue ( groupTree . hasProperty ( REP_MEMBERS ) )
assertFalse ( importer . init ( s , root , getNamePathMapper ( ) , false , ImportUUIDBehavior . IMPORT_UUID_COLLISION_THROW , new ReferenceChangeTracker ( ) , getSecurityProvider ( ) ) )
assertFalse ( importer . init ( mockJackrabbitSession ( ) , root , getNamePathMapper ( ) , false , ImportUUIDBehavior . IMPORT_UUID_COLLISION_REMOVE_EXISTING , new ReferenceChangeTracker ( ) , sp ) )
assertTrue ( importer . handlePropInfo ( userTree , createPropInfo ( REP_AUTHORIZABLE_ID , TEST_USER_ID ) , mockPropertyDefinition ( NT_REP_USER , false ) ) )
assertFalse ( importer . handlePropInfo ( groupTree , createPropInfo ( REP_PASSWORD , PasswordUtil . buildPasswordHash ( "pw" ) ) , mockPropertyDefinition ( NT_REP_USER , false ) ) )
assertTrue ( importer . handlePropInfo ( pwHistory , createPropInfo ( null , PasswordUtil . buildPasswordHash ( "pw" ) ) , pd ) )
assertFalse ( importer . handlePropInfo ( groupTree , createPropInfo ( REP_IMPERSONATORS , "impersonator1" ) , mockPropertyDefinition ( NT_REP_USER , true ) ) )
assertFalse ( importer . start ( createGroupTree ( ) ) )
assertTrue ( importer . start ( memberRefList ) )
assertFalse ( importer . start ( memberRefList ) )
assertFalse ( importer . start ( memberRefList ) )
assertTrue ( importer . start ( repMembers ) )
assertFalse ( importer . start ( repMembers ) )
assertFalse ( importer . start ( repMembers ) )
assertTrue ( principal instanceof TreeBasedPrincipal )
assertTrue ( gp . apply ( testMember ) )
assertFalse ( gp . apply ( a ) )
assertFalse ( ResultIterator . create ( ResultIterator . OFFSET_NONE , 0 , Iterators . singletonIterator ( "str" ) ) . hasNext ( ) )
assertTrue ( statement . toString ( ) . contains ( " and " ) )
assertFalse ( statement . toString ( ) . contains ( " and " ) )
assertTrue ( c instanceof Condition . And )
assertTrue ( pp . isGranted ( "/test/a" , Permissions . getString ( ThreeRolesConstants . SUPPORTED_PERMISSIONS ) ) )
assertFalse ( permissionStoreTree . exists ( ) )
assertTrue ( testRoot . getTree ( testPath ) . exists ( ) )
assertTrue ( cs . getLatestRoot ( ) . getTree ( readablePath ) . exists ( ) )
assertFalse ( contentRepository . getDescriptors ( ) . getValue ( JackrabbitRepository . OPTION_USER_MANAGEMENT_SUPPORTED ) . getBoolean ( ) )
assertFalse ( system . getChildNode ( DOCUMENT_NODE_STORE ) . exists ( ) )
assertTrue ( store . release ( checkpoint ) )
assertNull ( retrievedId )
assertTrue ( store . retrieve ( "r42-0-0" ) == null )
assertFalse ( nb . getChildNode ( "a" ) . isReplaced ( "foo" ) )
assertEquals ( 3 , state . getChildNodeCount ( 4 ) )
assertFalse ( uuid . equals ( node . getIdentifier ( ) ) )
assertTrue ( superuser . nodeExists ( n . getPath ( ) ) )
assertNull ( downloadURI )
assertNull ( upload )
assertNull ( downloadURI )
assertTrue ( type > PropertyType . UNDEFINED )
assertFalse ( childNodeNames . contains ( "nodeToDeny" ) )
assertTrue ( principalMgr . hasPrincipal ( memb . getName ( ) ) )
assertFalse ( user . hasProperty ( path ) )
assertTrue ( gr . getPath ( ) . startsWith ( path ) )
assertTrue ( user . getPath ( ) . startsWith ( path ) )
assertTrue ( memberOfEveryone )
assertFalse ( it . next ( ) . isGroup ( ) )
assertFalse ( uid . equals ( a . getID ( ) ) )
assertTrue ( authorizable . hasProperty ( relPath ) )
assertTrue ( authorizable instanceof User )
assertFalse ( c . getProperty ( "reindex" ) . getBoolean ( ) )
assertEquals ( 2 , stats . numDocs ( ) )
assertEquals ( 1 , stats . numDocs ( ) )
assertTrue ( assertionLogPresent ( logs , invalidJcrPrimaryTypeLog ( ) ) )
assertFalse ( assertionLogPresent ( logs , invalidJcrPrimaryTypeLog ( ) ) )
assertTrue ( ! idxDefn . getApplicableIndexingRule ( TestUtil . NT_TEST ) . getNullCheckEnabledProperties ( ) . isEmpty ( ) )
assertNull ( editor )
assertTrue ( editorProvider . getExtractedTextCache ( ) . isAlwaysUsePreExtractedCache ( ) )
assertEquals ( 1 , executionCount . get ( ) )
assertFalse ( dir . isEmpty ( ) )
assertTrue ( queue . add ( LuceneDoc . forDelete ( "/oak:index/fooIndex" , "bar" ) ) )
assertEquals ( 1 , index . getPrimaryReaderForTest ( ) . numDocs ( ) )
assertTrue ( Iterables . isEmpty ( ( ( IndexedPaths ) builder2 . build ( ) ) ) )
assertTrue ( readers . isEmpty ( ) )
assertFalse ( NodeStateUtils . getNode ( state , "/indexRules/nt:file/properties" ) . exists ( ) )
assertFalse ( writer . close ( 0 ) )
assertTrue ( writer . close ( 0 ) )
assertTrue ( sortStrategy instanceof TraverseWithSortStrategy )
assertTrue ( opts . getCommonOpts ( ) . isHelpRequested ( ) )
assertTrue ( EqualsDiff . equals ( builder . getNodeState ( ) , nodeState2 ) )
assertEquals ( 2 , files . count ( ) )
assertTrue ( output . contains ( "Last Successful Run" ) )
assertNull ( text )
assertTrue ( ! idxDefn . getApplicableIndexingRule ( TestUtil . NT_TEST ) . getNullCheckEnabledProperties ( ) . isEmpty ( ) )
assertTrue ( extractor . getTikaConfig ( ) . getServiceLoader ( ) . isDynamic ( ) )
assertTrue ( EqualsDiff . equals ( state , NodeStateCloner . cloneVisibleState ( state ) ) )
assertFalse ( nullLocation . exists ( ) )
assertTrue ( propertyLocation . exists ( ) )
assertTrue ( TreeUtil . getEffectiveType ( rootTree . getChild ( "x" ) , typeRoot ) . isEmpty ( ) )
assertTrue ( getConfigurations ( ) . isEmpty ( ) )
assertFalse ( params . getConfigValue ( "str" , null , Boolean . class ) )
assertFalse ( Context . DEFAULT . definesLocation ( TreeLocation . create ( tree ) ) )
assertTrue ( securityProvider . getConfiguration ( AuthorizationConfiguration . class ) instanceof OpenAuthorizationConfiguration )
assertTrue ( configuration . getCommitHooks ( "workspaceName" ) . isEmpty ( ) )
assertTrue ( configuration . getProtectedItemImporters ( ) . isEmpty ( ) )
assertFalse ( loginModule . logout ( ) )
assertTrue ( loginModule . logout ( null , Collections . emptySet ( ) ) )
assertTrue ( loginModule . abort ( ) )
assertTrue ( lm . getCredentials ( ) instanceof TestCredentials )
assertTrue ( principals . isEmpty ( ) )
assertTrue ( authInfo . getPrincipals ( ) . isEmpty ( ) )
assertTrue ( guestLoginModule . abort ( ) )
assertTrue ( SystemSubject . INSTANCE . getPublicCredentials ( ) . isEmpty ( ) )
assertTrue ( credentials . getAttributes ( ) . isEmpty ( ) )
assertFalse ( credentialsSupport . setAttributes ( new Credentials ( ) { } , ImmutableMap . of ( "a" , "value" ) ) )
assertTrue ( tp instanceof CompositeTokenProvider )
assertTrue ( ace . getRestrictions ( ) . isEmpty ( ) )
assertNull ( vs )
assertTrue ( ace . getRestrictions ( ) . isEmpty ( ) )
assertEquals ( 3 , acl . size ( ) )
assertTrue ( emptyProvider . getPrivileges ( tree ) . isEmpty ( ) )
assertTrue ( names . isEmpty ( ) )
assertTrue ( restrictions . isEmpty ( ) )
assertTrue ( rp instanceof CompositePattern )
assertTrue ( restriction . getDefinition ( ) . isMandatory ( ) )
assertTrue ( pMgr instanceof PrincipalManagerImpl )
assertTrue ( pMgr instanceof PrincipalManagerImpl )
assertTrue ( pMgr instanceof PrincipalManagerImpl )
assertTrue ( cpp . getMembershipPrincipals ( TestPrincipalProvider . UNKNOWN ) . isEmpty ( ) )
assertTrue ( principalProvider . getPrincipals ( "userId" ) . isEmpty ( ) )
assertTrue ( principalMgr . hasPrincipal ( pcpl . getName ( ) ) )
assertTrue ( principalMgr . hasPrincipal ( memb . getName ( ) ) )
assertFalse ( principalMgr . findPrincipals ( unknownHint , PrincipalManager . SEARCH_TYPE_NOT_GROUP ) . hasNext ( ) )
assertTrue ( pp . getMembershipPrincipals ( mock ( Principal . class ) ) . isEmpty ( ) )
assertTrue ( new ImmutablePrivilegeDefinition ( "name" , false , null ) . getDeclaredAggregateNames ( ) . isEmpty ( ) )
assertTrue ( JcrAllUtil . denotesDynamicJcrAll ( PropertyStates . createProperty ( "any" , Lists . newArrayList ( DYNAMIC_JCR_ALL_VALUE ) , Type . LONGS ) ) )
assertTrue ( names . isEmpty ( ) )
assertTrue ( Iterables . isEmpty ( bitsProvider . getAggregatedPrivilegeNames ( ) ) )
assertTrue ( Iterables . isEmpty ( result ) )
assertFalse ( PrivilegeBits . getInstance ( PrivilegeBits . NEXT_AFTER_BUILT_INS ) . isBuiltin ( ) )
assertFalse ( toTest . add ( bits ) . isBuiltin ( ) )
assertTrue ( PrivilegeBits . EMPTY . isEmpty ( ) )
assertTrue ( gr . removed . contains ( user ) )
assertTrue ( cap . getAuthorizableActions ( securityProvider ) . isEmpty ( ) )
assertFalse ( PasswordUtil . isSame ( PasswordUtil . buildPasswordHash ( "pw" ) , ( String ) null ) )
assertTrue ( propInfo . getValues ( PropertyType . LONG ) . isEmpty ( ) )
assertFalse ( EMPTY_STORE . containsSegment ( SegmentId . NULL ) )
assertFalse ( set . contains ( k ) )
assertEquals ( 0 , root . getChildNodeCount ( 1 ) )
assertEquals ( 0 , cacheStats . getLoadExceptionCount ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertEquals ( 3 , Manifest . load ( manifest ) . getStoreVersion ( 0 ) )
assertEquals ( 3 , Manifest . load ( manifest ) . getStoreVersion ( 0 ) )
assertTrue ( Iterables . contains ( n . getChildNodeNames ( ) , "references" ) )
assertEquals ( 0 , tarFiles . size ( ) )
assertEquals ( 1 , observer . communicationPartners . size ( ) )
assertEquals ( 1 , observer . communicationPartners . get ( 0 ) . getTransferredSegments ( ) )
assertEquals ( 100 , observer . communicationPartners . get ( 0 ) . getTransferredSegmentBytes ( ) )
assertEquals ( 100 , observer . communicationPartners . get ( 0 ) . getTransferredBinariesBytes ( ) )
assertEquals ( 0 , trace . size ( ) )
assertTrue ( super . ds . create ( Collection . JOURNAL , Collections . singletonList ( up ) ) )
assertFalse ( createInactive ( true ) . isInvisible ( ) )
assertTrue ( info . getLeaseEndTime ( ) < clock . getTime ( ) )
assertEquals ( 2 , ns . getPropertyCount ( ) )
assertTrue ( Arrays . equals ( includes , config . persistentCacheIncludes ( ) ) )
assertTrue ( jobScheduled )
assertEquals ( 5 , getMeter ( DocumentNodeStoreStats . BGR_NUM_CHANGES_RATE ) . getCount ( ) )
assertEquals ( 0 , counter . get ( ) )
assertTrue ( ns . getNodeChildrenCacheStats ( ) . getElementCount ( ) < 2 * DocumentMK . UPDATE_LIMIT )
assertTrue ( ns . getNodeCacheStats ( ) . getElementCount ( ) < 2 * NUM_CHILDREN )
assertTrue ( ns . getRoot ( ) . hasChildNode ( "bar" ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsAdded , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertTrue ( Sets . symmetricDifference ( state . blobsPresent , existingAfterGC ) . isEmpty ( ) )
assertFalse ( tds . paths . contains ( "/oak:index/prop-b/b1" ) )
assertTrue ( store . getRoot ( ) . hasChildNode ( "child" ) )
assertFalse ( sweepRev . equals ( ns2 . getSweepRevisions ( ) ) )
assertEquals ( 0 , gc ( ) . get ( ) . splitDocGCCount )
assertEquals ( 1 , store . findVersionGC . get ( ) )
assertEquals ( 0 , deletedOnceCountCalls . get ( ) )
assertTrue ( registry . getBundlors ( ) . isEmpty ( ) )
assertFalse ( bundlor . exists ( ) )
assertTrue ( result . isEmpty ( ) )
assertFalse ( pr . getPath ( ) . toString ( ) . contains ( "jcr:content/renditions" ) )
assertTrue ( configuredCompressor . indexOf ( CollectionCompressor . SNAPPY . getName ( ) ) > 0 )
assertTrue ( builder . createMissingLastRevSeeker ( ) instanceof MongoMissingLastRevSeeker )
assertTrue ( status . getVersion ( ) . matches ( "^\\d+\\.\\d+\\.\\d+$" ) )
assertFalse ( NodeStateUtils . getNode ( secondaryRoot ( ) , "/a/c" ) . exists ( ) )
assertFalse ( customizer . getLogs ( ) . isEmpty ( ) )
assertTrue ( closed . get ( ) )
assertEquals ( 0 , rv . getDimensions ( ) )
assertFalse ( x . exists ( ) )
assertFalse ( base . builder ( ) . remove ( ) )
assertTrue ( new MoveTracker ( ) . isEmpty ( ) )
assertTrue ( observers . isEmpty ( ) )
assertEquals ( 0 , session . getNode ( "/libs/sling/xss/config.xml/jcr:content" ) . getProperty ( "jcr:data" ) . getLength ( ) )
