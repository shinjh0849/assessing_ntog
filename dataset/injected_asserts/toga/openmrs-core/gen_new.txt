assertFalse ( ( session . load ( Patient . class , 2 ) ) . equals ( ( session . load ( Concept . class , 11 ) ) ) )
assertFalse ( newMember . isActive ( dateToTest ) )
assertFalse ( newMember . isActive ( dateToTest ) )
assertTrue ( term . equals ( term . getConceptReferenceTermMaps ( ) . iterator ( ) . next ( ) . getTermA ( ) ) )
assertFalse ( compatibleNames . contains ( name_en_UK ) )
assertNull ( conceptName )
assertTrue ( firstConceptSet . getSortWeight ( ) < secondConceptSet . getSortWeight ( ) )
assertEquals ( 0 , enc . getObs ( ) . size ( ) )
assertEquals ( 1 , enc . getObs ( ) . size ( ) )
assertTrue ( obs . getEncounter ( ) . equals ( encounter ) )
assertTrue ( order . getEncounter ( ) . equals ( encounter ) )
assertTrue ( condition . getEncounter ( ) . equals ( encounter ) )
assertTrue ( encounter . getProvidersByRole ( encounterRole ) . contains ( provider ) )
assertFalse ( encounter . hasDiagnosis ( diagnosis ) )
assertFalse ( obsService . getObs ( 7 ) . isDirty ( ) )
assertFalse ( obs . getValueAsBoolean ( ) )
assertTrue ( order . isActive ( dateStopped ) )
assertTrue ( ot . getConceptClasses ( ) . contains ( cc ) )
assertFalse ( active )
assertTrue ( result > 0 )
assertTrue ( result < 0 )
assertTrue ( result <= - 1 || result >= 1 )
assertTrue ( pa . getVoided ( ) )
assertTrue ( actualPersonAddress . getVoided ( ) )
assertTrue ( fetchedLocations . contains ( location ) )
assertTrue ( service . getCohort ( 2 ) . getDescription ( ) . equals ( modifiedCohortDescription ) )
assertEquals ( 1 , cohortToGet . getCohortId ( ) )
assertTrue ( service . getCohort ( 2 ) . contains ( 3 ) )
assertTrue ( cohort . contains ( patientId ) )
assertTrue ( concept . getConceptId ( ) . equals ( 5089 ) )
assertNull ( concept )
assertTrue ( drugs . contains ( drug ) )
assertNull ( result )
assertTrue ( currentWeight <= nextWeight )
assertNull ( drug )
assertEquals ( 1 , Context . getConceptService ( ) . getAllConceptAttributeTypes ( ) . size ( ) )
assertTrue ( voided )
assertFalse ( sourceEncounterAfterTransfer . getVoided ( ) )
assertEquals ( 3 , Context . getFormService ( ) . getFormsContainingConcept ( concept ) . size ( ) )
assertEquals ( 0 , Context . getLocationService ( ) . getLocations ( "Mansion" ) . size ( ) )
assertEquals ( 0 , ls . getLocationsByTag ( ls . getLocationTagByName ( "Retired" ) ) . size ( ) )
assertEquals ( 0 , Context . getLocationService ( ) . getLocationTags ( "!!!" ) . size ( ) )
assertEquals ( 2 , Context . getLocationService ( ) . getAllLocationAttributeTypes ( ) . size ( ) )
assertFalse ( tag . getRetired ( ) )
assertTrue ( obs . getVoided ( ) )
assertTrue ( oSaved . getObsId ( ) . equals ( o . getObsId ( ) ) )
assertFalse ( obsSaved . getObsId ( ) . equals ( obs . getObsId ( ) ) )
assertTrue ( obs . getVoided ( ) )
assertTrue ( obs . getVoided ( ) )
assertEquals ( 4 , orderService . getOrderFrequencyByConcept ( concept ) . getOrderFrequencyId ( ) . intValue ( ) )
assertEquals ( 4 , cs . getId ( ) . intValue ( ) )
assertTrue ( order . getOrderNumber ( ) . startsWith ( TimestampOrderNumberGenerator . ORDER_NUMBER_PREFIX ) )
assertNull ( orderType )
assertTrue ( allergy . getAllergen ( ) . isCoded ( ) )
assertFalse ( Context . getPersonService ( ) . getPerson ( 2 ) . getVoided ( ) )
assertNull ( patient )
assertNull ( identifierType )
assertNull ( voidedPatient )
assertNull ( person )
assertNull ( deletedRelationship )
assertNull ( personName )
assertFalse ( person . getVoided ( ) )
assertTrue ( person . getVoided ( ) )
assertNull ( p )
assertTrue ( providers . contains ( provider ) )
assertEquals ( 0 , service . getCountOfProviders ( "provider" ) . intValue ( ) )
assertTrue ( registeredComponent instanceof ExistingOrNewVisitAssignmentHandler )
assertTrue ( e . getMessage ( ) . startsWith ( Context . getMessageSourceService ( ) . getMessage ( "Scheduler.timer.task.only" , new Object [ ] { this . getClass ( ) . getName ( ) } , null ) ) )
assertTrue ( dao . isConceptMapTypeInUse ( Context . getConceptService ( ) . getConceptMapType ( 6 ) ) )
assertTrue ( dao . isConceptReferenceTermInUse ( Context . getConceptService ( ) . getConceptReferenceTerm ( 2 ) ) )
assertFalse ( dao . isConceptMapTypeInUse ( Context . getConceptService ( ) . getConceptMapType ( 3 ) ) )
assertFalse ( dao . isConceptReferenceTermInUse ( Context . getConceptService ( ) . getConceptReferenceTerm ( 11 ) ) )
assertNull ( personName )
assertTrue ( searchable )
assertEquals ( 3 , savedProgram . getOutcomesConcept ( ) . getId ( ) . intValue ( ) )
assertTrue ( errors . hasFieldErrors ( "role" ) )
assertFalse ( p . getVoided ( ) )
assertTrue ( providers . get ( 1 ) . getRetired ( ) )
assertTrue ( patientSearchCriteria . isShortName ( "J" ) )
assertTrue ( providers . get ( 1 ) . getRetired ( ) )
assertTrue ( retireable . getRetired ( ) )
assertEquals ( 10 , retireable . getRetiredBy ( ) . getId ( ) . intValue ( ) )
assertFalse ( retireable . getRetired ( ) )
assertFalse ( retireable . getRetired ( ) )
assertTrue ( voidable . getVoided ( ) )
assertFalse ( voidable . getVoided ( ) )
assertTrue ( voidable . getVoided ( ) )
assertEquals ( 2 , voidable . getVoidedBy ( ) . getId ( ) . intValue ( ) )
assertTrue ( person . getPersonVoided ( ) )
assertFalse ( person . getPersonVoided ( ) )
assertTrue ( person . getPersonVoided ( ) )
assertEquals ( 4 , person . getPersonVoidedBy ( ) . getId ( ) . intValue ( ) )
assertTrue ( drugs . contains ( conceptService . getDrug ( drugName ) ) )
assertTrue ( drug . getRetired ( ) )
assertFalse ( drug . getRetired ( ) )
assertTrue ( locales . contains ( localeToSearch ) )
assertFalse ( actual )
assertTrue ( actual )
assertTrue ( actual )
assertTrue ( ModuleFactory . getLoadedModules ( ) . contains ( test2 ) )
assertNull ( nullURL )
assertNull ( td )
assertTrue ( r1 . contains ( d ) )
assertTrue ( localesInOrder . contains ( ENGLISH ) )
assertFalse ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertFalse ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertFalse ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInNormalNumericRange ( 5.64f , concept ) )
assertFalse ( OpenmrsUtil . isInCriticalNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInCriticalNumericRange ( 5.67f , concept ) )
assertFalse ( OpenmrsUtil . isInCriticalNumericRange ( 2.67f , concept ) )
assertTrue ( OpenmrsUtil . isInCriticalNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInCriticalNumericRange ( 5.64f , concept ) )
assertFalse ( OpenmrsUtil . isInAbsoluteNumericRange ( 5.67f , concept ) )
assertFalse ( OpenmrsUtil . isInAbsoluteNumericRange ( 5.67f , concept ) )
assertTrue ( OpenmrsUtil . isInAbsoluteNumericRange ( 4.34f , concept ) )
assertTrue ( OpenmrsUtil . isValidNumericValue ( 5.67f , concept ) )
assertFalse ( OpenmrsUtil . isValidNumericValue ( 15.67f , concept ) )
assertTrue ( OpenmrsUtil . isInAbsoluteNumericRange ( 4.34f , concept ) )
assertTrue ( OpenmrsUtil . isInAbsoluteNumericRange ( 4.34f , concept ) )
assertTrue ( fields . contains ( normalClassField ) )
assertTrue ( errors . hasFieldErrors ( "memberships" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "code" ) )
assertFalse ( errors . hasFieldErrors ( "code" ) )
assertFalse ( errors . hasFieldErrors ( "conceptSource" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "conceptReferenceTermMaps[0].conceptMapType" ) )
assertFalse ( errors . hasFieldErrors ( "conceptReferenceTermMaps[0].termB" ) )
assertFalse ( errors . hasFieldErrors ( "encounter" ) )
assertFalse ( errors . hasFieldErrors ( "diagnosis" ) )
assertFalse ( errors . hasFieldErrors ( "certainty" ) )
assertFalse ( errors . hasFieldErrors ( "rank" ) )
assertFalse ( errors . hasFieldErrors ( "asNeeded" ) )
assertFalse ( errors . hasFieldErrors ( "drug" ) )
assertFalse ( errors . hasFieldErrors ( "doseUnits" ) )
assertFalse ( errors . hasFieldErrors ( "frequency" ) )
assertFalse ( errors . hasFieldErrors ( "quantityUnits" ) )
assertFalse ( errors . hasFieldErrors ( "concept" ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertFalse ( errors . hasFieldErrors ( "drugReferenceMaps[0].drug" ) )
assertTrue ( errors . hasFieldErrors ( "drugReferenceMaps[0].conceptMapType.name" ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertFalse ( errors . hasFieldErrors ( "patient" ) )
assertFalse ( errors . hasFieldErrors ( "encounterDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "encounterDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "encounterType" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "retired" ) )
assertFalse ( errors . hasFieldErrors ( "retireReason" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "retireReason" ) )
assertFalse ( errors . hasFieldErrors ( "parentLocation" ) )
assertFalse ( errors . hasFieldErrors ( "valueText" ) )
assertFalse ( errors . hasFieldErrors ( "valueDrug" ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertFalse ( errors . hasFieldErrors ( "concept" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "encounter" ) )
assertFalse ( errors . hasFieldErrors ( "dateActivated" ) )
assertFalse ( errors . hasFieldErrors ( "action" ) )
assertTrue ( errors . hasFieldErrors ( "orderType" ) )
assertFalse ( errors . hasFieldErrors ( "patient" ) )
assertFalse ( errors . hasFieldErrors ( "states" ) )
assertFalse ( errors . hasFieldErrors ( "states" ) )
assertTrue ( errors . hasFieldErrors ( "states" ) )
assertFalse ( errors . hasFieldErrors ( "dateCompleted" ) )
assertFalse ( errors . hasFieldErrors ( "dateEnrolled" ) )
assertFalse ( errors . hasFieldErrors ( "dateCompleted" ) )
assertFalse ( errors . hasFieldErrors ( "voidReason" ) )
assertFalse ( errors . hasFieldErrors ( "gender" ) )
assertFalse ( errors . hasFieldErrors ( ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "format" ) )
assertFalse ( errors . hasFieldErrors ( "personMergeLogData" ) )
assertTrue ( errors . hasFieldErrors ( ) )
assertFalse ( errors . hasFieldErrors ( "voidReason" ) )
assertFalse ( errors . hasFieldErrors ( "deathDate" ) )
assertFalse ( errors . hasFieldErrors ( "names" ) )
assertFalse ( errors . hasFieldErrors ( "gender" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertTrue ( errors . hasFieldErrors ( "identifier" ) )
assertFalse ( errors . hasFieldErrors ( "activeAttributes" ) )
assertFalse ( errors . hasFieldErrors ( "voidReason" ) )
assertFalse ( errors . hasFieldErrors ( "role" ) )
assertFalse ( errors . hasFieldErrors ( "concept" ) )
assertFalse ( errors . hasFieldErrors ( "programWorkflowState" ) )
assertFalse ( errors . hasFieldErrors ( "username" ) )
assertTrue ( true )
assertFalse ( errors . hasFieldErrors ( "email" ) )
assertTrue ( errors . hasFieldErrors ( "email" ) )
assertFalse ( errors . hasFieldErrors ( "name" ) )
assertFalse ( errors . hasFieldErrors ( "patient" ) )
assertFalse ( errors . hasFieldErrors ( "visitType" ) )
assertFalse ( errors . hasFieldErrors ( "startDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "stopDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "attributes" ) )
assertFalse ( errors . hasFieldErrors ( "startDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "stopDatetime" ) )
assertFalse ( errors . hasFieldErrors ( "stopDatetime" ) )
assertTrue ( errors . hasFieldErrors ( "voidReason" ) )
assertFalse ( errors . hasFieldErrors ( "voidReason" ) )
assertTrue ( schemaOnlyTuner . readResource ( FILE_WITH_LICENSE_HEADER_MD ) . contains ( HTTP_OPENMRS_ORG_LICENSE ) )
assertTrue ( new UpdateFilter ( ) . isSuperUser ( getConnection ( ) , 1 ) )
assertFalse ( new UpdateFilter ( ) . isSuperUser ( getConnection ( ) , 502 ) )
