assertTrue ( exception . getMessage ( ) . contains ( "TLS" ) )
assertTrue ( StringUtils . isNotEmpty ( properties . getProperty ( "nifi.sensitive.props.key" ) ) )
assertEquals ( 0 , validationIssues . size ( ) )
assertTrue ( securityPropertiesSchema . isValid ( ) )
assertEquals ( 0 , sourceRelationshipNames . size ( ) )
assertTrue ( result )
assertTrue ( result )
assertTrue ( configSchema . isValid ( ) )
assertEquals ( 1 , dtoSchemaFunction . apply ( dto ) . getValidationIssues ( ) . size ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "[" + DEFAULT_VALUE + "]" ) )
assertTrue ( message . contains ( REFERENCE_CLASS . getName ( ) ) )
assertEquals ( 0 , parameterParser . parseTokens ( input ) . toList ( ) . size ( ) )
assertEquals ( 0 , parameterParser . parseTokens ( input ) . toList ( ) . size ( ) )
assertTrue ( exception . getMessage ( ) . contains ( UNKNOWN ) )
assertTrue ( DataTypeUtils . isCompatibleDataType ( testMap , RecordFieldType . RECORD . getDataType ( ) ) )
assertNull ( timestamp )
assertTrue ( keyIds . contains ( KEY_ID ) )
assertTrue ( keyIds . contains ( KEY_ID ) )
assertNull ( transaction )
assertTrue ( e . getMessage ( ) . contains ( "Failed to determine the identifier of port" ) )
assertTrue ( e instanceof SocketTimeoutException )
assertEquals ( 5 , runner . getProcessContext ( ) . getMaxConcurrentTasks ( ) )
assertNull ( response )
assertTrue ( ( ( MockProcessContext ) runner . getProcessContext ( ) ) . isYieldCalled ( ) )
assertEquals ( 2 , hook . getMessages ( ) . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertFalse ( result . isValid ( ) )
assertTrue ( ( ( ITProcessor ) runner . getProcessor ( ) ) . blobMetadataApplied )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertTrue ( passed )
assertFalse ( condition . evaluate ( facts ) )
assertTrue ( passed )
assertEquals ( 1 , checkedRules . size ( ) )
assertEquals ( 0 , splits . size ( ) )
assertTrue ( filenames . contains ( "nifiDrop.svg" ) )
assertTrue ( results . size ( ) == 1 )
assertEquals ( 10 , binaryReader . getPosition ( ) )
assertTrue ( Boolean . parseBoolean ( new BooleanTypeNode ( testBinaryReaderBuilder . putDWord ( 1 ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) ) )
assertFalse ( isDynamicCSVFormat )
assertTrue ( isDynamicCSVFormat )
assertTrue ( isDynamicCSVFormat )
assertEquals ( 2 , testSubject . getHandleChunkCalls ( ) . size ( ) )
assertFalse ( event . isValid ( ) )
assertFalse ( result )
assertTrue ( result )
assertEquals ( 0 , policies . size ( ) )
assertTrue ( Result . Approved . equals ( result . getResult ( ) ) )
assertFalse ( Result . Approved . equals ( result . getResult ( ) ) )
assertEquals ( 0 , users . size ( ) )
assertEquals ( 0 , handler . getMessages ( ) . size ( ) )
assertTrue ( unmarshalled instanceof NodeConnectionStatusRequestMessage )
assertTrue ( pg . getControllerServices ( true ) . isEmpty ( ) )
assertTrue ( bogus . delete ( ) )
assertFalse ( replaced )
assertFalse ( exOccurred )
assertEquals ( 0 , validationErrors . size ( ) )
assertNull ( extensionMapping )
assertTrue ( ioException . getMessage ( ) . contains ( "Received a BadChecksum response" ) )
assertNull ( authentication )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , matches . size ( ) )
assertEquals ( 0 , mappings . size ( ) )
assertEquals ( 3 , mappings . size ( ) )
assertEquals ( 0 , groups . size ( ) )
assertTrue ( userDetails . getNiFiUser ( ) . isAnonymous ( ) )
assertTrue ( userDetails . getNiFiUser ( ) . isAnonymous ( ) )
assertFalse ( result . hasErrors ( ) )
assertNull ( authRequest )
assertNull ( shouldNotExistRequest )
assertNull ( request )
assertNull ( object )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 2 , integer . get ( ) )
assertTrue ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( result )
assertFalse ( reloginTried )
assertEquals ( 0 , flowFiles . size ( ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 1 , flowFiles . size ( ) )
assertFalse ( new NotificationEventPathFilter ( Pattern . compile ( "" ) , true ) . accept ( null ) )
assertTrue ( result )
assertFalse ( result )
assertEquals ( 0 , runner . getProvenanceEvents ( ) . size ( ) )
assertNull ( deserialized )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertFalse ( runner . getLogger ( ) . getErrorMessages ( ) . isEmpty ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 1 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 5 , ldapUserGroupProvider . getGroups ( ) . size ( ) )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 1 , runner . getLogger ( ) . getErrorMessages ( ) . size ( ) )
assertEquals ( 4 , propertyValues . size ( ) )
assertTrue ( e . getMessage ( ) . contains ( "Invalid Packet Length" ) )
assertEquals ( 1 , closeCount . get ( ) )
assertEquals ( 1 , results . size ( ) )
assertTrue ( ( ( MockProcessContext ) runner . getProcessContext ( ) ) . isYieldCalled ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( 0 , task . dataSent . size ( ) )
assertEquals ( 0 , task . dataSent . size ( ) )
assertTrue ( shareAccessSet . contains ( SMB2ShareAccess . FILE_SHARE_READ ) )
assertEquals ( 0 , rows . size ( ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( e . getMessage ( ) . contains ( "forced by org.apache.nifi.processors.standard.DebugFlow" ) )
assertTrue ( out . getAttribute ( "xpath.result1" ) . contains ( "Hello" ) )
assertTrue ( outXml . contains ( "<name xmlns:ns=\"http://namespace/1\">apple</name>" ) )
assertTrue ( proc . isClosed )
assertEquals ( 2 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertEquals ( 3 , runner . getQueueSize ( ) . getObjectCount ( ) )
assertFalse ( rs . next ( ) )
assertFalse ( validationResult . isValid ( ) )
assertEquals ( 0 , subDirectories . size ( ) )
assertEquals ( 3 , frames . size ( ) )
assertNull ( result )
assertNull ( result )
assertNull ( result )
assertEquals ( 1 , callCounter . get ( ) )
assertTrue ( e . getLocalizedMessage ( ) . equals ( "JOLT Chainr expects a JSON array of objects - Malformed spec." ) )
assertTrue ( e . getMessage ( ) . contains ( "contained an external entity. To prevent XXE vulnerabilities, NiFi has external entity processing disabled." ) )
assertTrue ( val . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( result . isValid ( ) )
assertTrue ( e . getMessage ( ) . contains ( "org.apache.nifi.processor.exception.ProcessException" ) )
assertTrue ( e . toString ( ) . contains ( "'server-url-path' is invalid because Must starts with" ) )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 0 , flowFiles . size ( ) )
assertNull ( existingKey )
assertNull ( entity )
assertNull ( entity )
assertNull ( retrievedPolicy )
assertNull ( updatedUser1 )
assertNull ( updatedGroup1 )
assertEquals ( 5 , ldapUserGroupProvider . getGroups ( ) . size ( ) )
assertNull ( entity )
assertNull ( keyStoreProvider )
assertTrue ( getNifiClient ( ) . getProcessorClient ( ) . getProcessor ( generate . getId ( ) ) . getComponent ( ) . getExtensionMissing ( ) )
assertEquals ( 0 , candidates . size ( ) )
assertEquals ( 0 , candidates . size ( ) )
assertTrue ( tlsToolkitMain . getDescription ( TlsToolkitMainTest . class ) . startsWith ( TlsToolkitMain . UNABLE_TO_GET_DESCRIPTION ) )
assertTrue ( e . getMessage ( ) . startsWith ( TlsCertificateSigningRequestPerformer . RECEIVED_RESPONSE_CODE + statusCode ) )
