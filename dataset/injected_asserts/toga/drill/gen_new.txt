assertTrue ( e . getMessage ( ) . contains ( "Could not open sheet " ) )
assertNull ( results )
assertTrue ( e . getMessage ( ) . contains ( "Error reading HTTPD file " ) )
assertTrue ( e . getMessage ( ) . contains ( "Regex property is required" ) )
assertTrue ( e . getMessage ( ) . contains ( "Regex property has no groups" ) )
assertEquals ( 0 , queryBuilder ( ) . sql ( "SELECT * FROM cp.`emptylines.ltsv`" ) . run ( ) . recordCount ( ) )
assertTrue ( e . getMessage ( ) . contains ( "DATA_READ ERROR: Empty key detected at line [0] position [49]" ) )
assertNull ( table )
assertTrue ( e . getMessage ( ) . contains ( "Tab not found at index 5" ) )
assertTrue ( insertResults . succeeded ( ) )
assertEquals ( 1 , cache . addOrGet ( columns ) )
assertEquals ( 1 , cache . addOrGet ( Lists . newArrayList ( columns ) ) )
assertTrue ( e . getMessage ( ) . contains ( "API Query with URL Parameters must be populated." ) )
assertNull ( results )
assertNull ( results )
assertNull ( results )
assertNull ( results )
assertTrue ( e . getMessage ( ) . contains ( "Default URL parameters must have a value." ) )
assertTrue ( e . getMessage ( ) . contains ( "You do not have valid credentials for this API." ) )
assertTrue ( result . succeeded ( ) )
assertEquals ( 1 , queryBuilder ( ) . physical ( plan ) . run ( ) . recordCount ( ) )
assertEquals ( 1 , queryBuilder ( ) . physical ( plan ) . run ( ) . recordCount ( ) )
assertEquals ( 1 , queryBuilder ( ) . physical ( plan ) . run ( ) . recordCount ( ) )
assertEquals ( 1 , queryBuilder ( ) . physical ( plan ) . run ( ) . recordCount ( ) )
assertEquals ( 1 , queryBuilder ( ) . physical ( plan ) . run ( ) . recordCount ( ) )
assertTrue ( e . getMessage ( ) . contains ( "VALIDATION ERROR: Table [none_shall_pass] not found" ) )
assertTrue ( e . getMessage ( ) . contains ( "DATA_WRITE ERROR: Drill does not support writing complex fields to JDBC data sources." ) )
assertTrue ( e . getMessage ( ) . contains ( "VALIDATION ERROR: Table [none_shall_pass] not found" ) )
assertTrue ( e . getMessage ( ) . contains ( "VALIDATION ERROR: Unable to create or drop objects. Schema [pg_unwritable.public] is immutable." ) )
assertTrue ( e . getMessage ( ) . contains ( "VALIDATION ERROR: Table [none_shall_pass] not found" ) )
assertTrue ( re . getMessage ( ) . contains ( "DATA_READ ERROR: Table 'invalid-topic' does not exist" ) )
assertTrue ( messageReader instanceof JsonMessageReader )
assertEquals ( 1 , runQuery ( query ) )
assertEquals ( 1 , queryBuilder ( ) . sql ( "SHOW TABLES LIKE '%REGION%'" ) . run ( ) . recordCount ( ) )
assertEquals ( 100 , queryBuilder ( ) . sql ( "DESCRIBE phoenix123.v1.NATION" ) . run ( ) . recordCount ( ) )
assertTrue ( e . getMessage ( ) . contains ( "SPL cannot be empty when querying spl table" ) )
assertTrue ( e . getMessage ( ) . contains ( "[BAD_DATE] is not a valid time statement. Expecting: " + Arrays . asList ( DateConversionUtils . TimeInterval . values ( ) ) ) )
assertTrue ( e instanceof DrillException )
assertTrue ( e instanceof DrillException )
assertTrue ( e instanceof DrillException )
assertTrue ( application . getConfig ( ) . isEmpty ( ) )
assertFalse ( application . getConfig ( ) . isEmpty ( ) )
assertTrue ( count > 0 )
assertTrue ( topNBatch . next ( ) == RecordBatch . IterOutcome . NONE )
assertTrue ( scanProj . projectAll ( ) )
assertTrue ( e . getMessage ( ) . contains ( "wrong type" ) )
assertTrue ( e . getMessage ( ) . contains ( "references an undefined implicit column" ) )
assertTrue ( e . getMessage ( ) . contains ( "references an undefined implicit column type" ) )
assertNull ( handler )
assertTrue ( schemaTracker instanceof ProjectionSchemaTracker )
assertEquals ( 1 , vector1 . getBuffer ( ) . capacity ( ) )
assertTrue ( e . getMessage ( ) . contains ( "overflow called" ) )
assertTrue ( resourceManager instanceof DefaultResourceManager )
assertTrue ( resourceManager instanceof DefaultResourceManager )
assertTrue ( resourceManager instanceof DefaultResourceManager )
assertTrue ( e instanceof NullPointerException )
assertNull ( plugins )
assertTrue ( tupleMetadata . isEquivalent ( AvroSchemaUtil . convert ( schema ) ) )
assertTrue ( tupleMetadata . isEquivalent ( AvroSchemaUtil . convert ( schema ) ) )
assertTrue ( tupleMetadata . isEquivalent ( AvroSchemaUtil . convert ( schema ) ) )
assertNull ( selection )
assertTrue ( e . getMessage ( ) . contains ( "outer array support is not enabled" ) )
assertTrue ( e . getMessage ( ) . contains ( "must define at least one header" ) )
assertTrue ( e . getMessage ( ) . contains ( "Error parsing JSON - Non-standard token 'NaN'" ) )
assertNull ( formattedValue )
assertNull ( formattedValue )
assertTrue ( rs . next ( ) )
assertTrue ( rs . next ( ) )
assertTrue ( rowCount > 0 )
assertTrue ( rowCount > 0 )
assertNull ( tableMetadata )
assertTrue ( requestMetadata . columns ( ) . isEmpty ( ) )
assertEquals ( 4 , requestMetadata . metadataTypes ( ) . size ( ) )
