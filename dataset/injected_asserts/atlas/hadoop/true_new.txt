assertEquals ( tokenStr , token . toString ( ) )
assertEquals ( authenticator , aURL . getAuthenticator ( ) )
assertEquals ( getExpectedType ( ) , handler . getType ( ) )
assertNull ( handler . authenticate ( request , response ) )
assertEquals ( PseudoAuthenticationHandler . TYPE , handler . getType ( ) )
assertEquals ( AuthenticationToken . ANONYMOUS , token )
assertNull ( token )
fail ( "Exception should have been thrown" )
fail ( "Exception should have been thrown" )
assertEquals ( "" , sw . toString ( ) )
assertEquals ( "42" , intVar )
assertEquals ( "this  contains a comment" , conf . get ( "my.comment" ) )
assertEquals ( "''''" , conf . get ( "my.comment" ) )
assertEquals ( expectedOutput , conf . toString ( ) )
assertEquals ( "hello" , conf . get ( "newkey" ) )
assertThat ( StorageUnit . BYTES . toKBs ( entry . getKey ( ) ) , is ( entry . getValue ( ) ) )
assertThat ( StorageUnit . BYTES . toGBs ( entry . getKey ( ) ) , is ( entry . getValue ( ) ) )
assertThat ( StorageUnit . BYTES . toTBs ( entry . getKey ( ) ) , is ( entry . getValue ( ) ) )
assertThat ( StorageUnit . BYTES . toPBs ( entry . getKey ( ) ) , is ( entry . getValue ( ) ) )
assertThat ( StorageUnit . BYTES . toEBs ( entry . getKey ( ) ) , is ( entry . getValue ( ) ) )
assertEquals ( "A" , kp . getConf ( ) . get ( "a" ) )
assertEquals ( "new token should be selected when both exist" , token , t )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
fail ( "Should throw FileNotFoundException" )
assertEquals ( 0 , filteredPaths . length )
fail ( "Mkdir with non existing parent dir should have failed" )
fail ( "Create with non existing parent dir should have failed" )
assertEquals ( 0 , filteredPaths . length )
assertEquals ( 0 , filteredPaths . length )
assertArrayEquals ( data , bb )
assertArrayEquals ( data , bb )
fail ( "Should throw FileNotFoundException" )
assertTrue ( localFs . mkdirs ( dstPath ) )
assertEquals ( header , ContentSummary . getHeader ( true ) )
assertEquals ( expected , contentSummary . toString ( false ) )
assertEquals ( expected , contentSummary . toString ( true , true ) )
assertEquals ( expected , contentSummary . toString ( false , true ) )
assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( fileStatus1 , fileStatus2 )
assertEquals ( stat , deser )
assertNotSame ( fsU1 , fsU2 )
assertEquals ( 0 , result )
assertEquals ( "" , result )
assertEquals ( "" , result )
assertArrayEquals ( write , read )
assertEquals ( write , read )
assertEquals ( lfs , ffs . getRawFileSystem ( ) )
assertEquals ( LocalFileSystem . class , flfs . getRawFileSystem ( ) . getClass ( ) )
assertTrue ( err . toString ( ) . contains ( "(Permission denied)" ) )
assertThat ( harfs . getFileChecksum ( p ) ) . isNull ( )
assertTrue ( hfs . getMetadata ( ) == harFileSystem . getMetadata ( ) )
assertTrue ( fc1 != fc )
assertNotNull ( bis . getFileDescriptor ( ) )
assertEquals ( header , QuotaUsage . getHeader ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertEquals ( expected , quotaUsage . toString ( ) )
assertTrue ( trash . getTrashPolicy ( ) . getClass ( ) . equals ( TestTrashPolicy . class ) )
assertFalse ( "Source file not deleted" , Files . exists ( file . toPath ( ) ) )
assertFalse ( "Directory not deleted" , Files . exists ( source . toPath ( ) ) )
assertEquals ( 0 , getFileSystem ( ) . listStatus ( f , NO_PATHS ) . length )
assertTrue ( fs . mkdirs ( path ) )
assertNotNull ( "could not find contract resource" , url )
assertEquals ( "/foo" , req . getPath ( ) )
assertEquals ( checksum1 , checksum2 )
assertTrue ( "atomicBoolean set to true?" , atomicBoolean . get ( ) )
assertEquals ( i , FsPermission . valueOf ( b . toString ( ) ) . toShort ( ) )
assertEquals ( stat , stat2 )
assertEquals ( "Count.getCommandName" , expected , actual )
assertEquals ( "Count.getReplacementCommand" , expected , actual )
assertEquals ( "Count.getName" , expected , actual )
assertEquals ( "Ls.isDeprecated" , expected , actual )
assertEquals ( "Ls.getName" , expected , actual )
fail ( "Should throw IOException" )
assertArrayEquals ( usage , test . getUsage ( ) )
assertEquals ( precedence , test . getPrecedence ( ) )
assertEquals ( pathList , argsList )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( expected , expression . toString ( ) )
assertEquals ( one , two )
assertThat ( fn . apply ( 1 ) ) . isEqualTo ( 0 )
assertThat ( summary . getMean ( ) ) . isNull ( )
assertEquals ( chrootedTo . toUri ( ) , uri )
assertTrue ( interceptor == null )
assertNull ( interceptor )
assertEquals ( sourcePath , interceptor . interceptSource ( sourcePath ) )
assertNull ( serviceName )
assertEquals ( testString , lViewIs . readUTF ( ) )
assertTrue ( lViewFS . exists ( fileOnRoot ) )
assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( expectedTrash , fsView2 . getTrashRoot ( testPath ) )
fail ( "Did not throw!" )
assertTrue ( ffe . getCause ( ) . getMessage ( ) . contains ( "Access denied" ) )
assertTrue ( ioe . getCause ( ) instanceof IllegalStateException )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertNotNull ( "testDeleteFile error !!!" , writer )
assertEquals ( text , claimedText )
assertEquals ( foo , generic . get ( ) )
assertEquals ( "/tmp/abc.txt" , returnedEx . getPath ( ) . toString ( ) )
assertEquals ( new IntWritable ( ( SIZE - 1 ) / 2 ) , reader . midKey ( ) )
assertEquals ( "{5=value}" , map . toString ( ) )
assertEquals ( before , readModifiedUTF ( UTF8 . getBytes ( before ) ) )
assertEquals ( s , new String ( dob . getData ( ) , 2 , dob . getLength ( ) - 2 , "UTF-8" ) )
assertTrue ( e . getMessage ( ) . contains ( "File blocks missing" ) )
assertTrue ( "Got mismatched ZlibCompressor" , c2 != CodecPool . getCompressor ( gzc ) )
assertNull ( coders )
fail ( "Cannot read before closing the writer." )
fail ( "Error on handling invalid compression codecs." )
fail ( "Error on handling empty files." )
fail ( "Error on handling out of order keys." )
fail ( "Error on handling negative offset." )
fail ( "Error on handling negative offset." )
fail ( "Error on handling negative length." )
fail ( "Failed to catch unsupported comparator names" )
assertTrue ( "Multiple close should have no effect." , true )
assertThat ( Utils . readVLong ( in ) ) . isEqualTo ( data [ i ] )
assertTrue ( e . getCause ( ) instanceof PathIOException )
assertEquals ( "impl1" , e . getMessage ( ) )
assertEquals ( RetryDecision . FAIL , caughtRetryAction . action )
assertEquals ( before , after )
assertEquals ( before , after )
assertEquals ( 0 , scheduler . getPriorityLevel ( mockCall ( "A" ) ) )
assertNull ( fcq . poll ( ) )
assertEquals ( username , identity )
assertEquals ( addr , RPC . getServerAddress ( proxy ) )
assertEquals ( expectedCost , actualCost )
assertEquals ( expectedCost , actualCost )
fail ( "Expected an exception, got " + pauseMonitor )
assertEquals ( counter , jmxCounter )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertNotNull ( hostname )
assertNotNull ( getLocalIPAddr ( ) )
assertEquals ( null , wrapped . getMessage ( ) )
assertEquals ( "scheme://:123/path" , uri . toString ( ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertTrue ( frequency . get ( key ) > 0 || key == dataNodes [ 0 ] )
assertNull ( "Expected an empty list" , result )
assertEquals ( groupsUpper , groupsMapping . getGroups ( "admin" ) )
assertEquals ( 1 , shell . init ( new String [ 0 ] ) )
assertTrue ( checkEqual ( sourceToken , destToken ) )
assertNull ( ugi )
assertTrue ( "listener not registered" , unregister ( ) )
assertFalse ( ex . getMessage ( ) . contains ( "cause" ) )
assertNotNull ( "null service from " + launcher , service )
assertNotNull ( e )
assertArrayEquals ( crcBytesByCell , digest )
assertArrayEquals ( crcBytesByCell , digest )
assertTrue ( info . value ( ) > 0 )
fail ( "Should throw NoSuchFileException" )
assertTrue ( new File ( jar ) . exists ( ) )
assertEquals ( "Failed to unmarshall: " + wire , source , unmarshalled )
assertEquals ( source , unmarshalled )
assertTrue ( Arrays . equals ( uuid , header . getClientId ( ) . toByteArray ( ) ) )
assertEquals ( NoSuchMethodException . class , rte . getCause ( ) . getClass ( ) )
assertEquals ( timersBefore , timersAfter )
assertArrayEquals ( expectedCommand , checkProcessAliveCommand )
assertThat ( stringWriter . toString ( ) ) . contains ( "<root" )
assertEquals ( t1 , t2 )
assertEquals ( "drwho" , whoami )
assertEquals ( 1 , events . getCount ( ) )
assertNotNull ( getRealm ( ) )
assertEquals ( "wrong name" , "26.172.in-addr.arpa." , name . toString ( ) )
assertEquals ( 0 , longStat . getValue ( ) )
fail ( "Did not renew lease at all!" )
assertEquals ( e , exc )
assertEquals ( server . getStatus ( ) , Server . Status . ADMIN )
assertEquals ( server . getConfig ( ) . get ( "testserver.a" ) , "sysprop" )
assertEquals ( Check . notNull ( "value" , "name" ) , "value" )
assertEquals ( "val1" , conf . get ( "key1" ) )
assertEquals ( new Short ( ( short ) 01777 ) , param . parse ( "01777" ) )
assertEquals ( "" , mountTable . getDefaultNamespace ( ) )
assertTrue ( disableResp . getStatus ( ) )
assertTrue ( err . toString ( ) . contains ( "Invalid argument : check" ) )
assertEquals ( "RouterAdmin should succeed" , 0 , exitCode )
assertTrue ( ret )
assertFalse ( routerFS . exists ( dstPath . getParent ( ) ) )
assertTrue ( routerFS . mkdirs ( dstPath . getParent ( ) ) )
assertFalse ( router . getStateStore ( ) . isDriverReady ( ) )
assertTrue ( isDirAll )
assertTrue ( isDirAll )
assertFalse ( isDirAll )
assertEquals ( permission , file . getPermission ( ) )
assertTrue ( status . getLen ( ) > TEST_STRING . length ( ) )
assertArrayEquals ( group , result )
assertFalse ( result )
assertTrue ( saveNamespace )
assertNotNull ( RouterWebHDFSContract . getCluster ( ) )
assertEquals ( HdfsConstants . StoragePolicy . WARM . name ( ) , policy )
assertEquals ( this . qopValue , new String ( secret ) )
assertNull ( in . getCurrentBlock ( ) )
assertTrue ( out . getWrappedStream ( ) instanceof DFSStripedOutputStream )
assertEquals ( "nn1" , DFSUtil . getNamenodeNameServiceId ( conf ) )
assertEquals ( "nn1" , DFSUtil . getNamenodeNameServiceId ( conf ) )
assertEquals ( "nn1" , DFSUtil . getBackupNameServiceId ( conf ) )
assertEquals ( "nn1" , DFSUtil . getSecondaryNameServiceId ( conf ) )
assertEquals ( ( data [ i ] & 0XFF ) , in . read ( ) )
assertEquals ( ecPolicy . getName ( ) , contentSummary . getErasureCodingPolicy ( ) )
assertEquals ( policy , fs . getErasureCodingPolicy ( fooFile ) )
assertEquals ( "No such interface bogus-interface" , e . getMessage ( ) )
assertEquals ( 0L , currentFileLength )
assertNull ( cluster . getFileSystem ( ) . getClient ( ) . getLocatedBlockRefresher ( ) )
assertEquals ( clientState , lastWrittenId )
assertEquals ( suite . getDefaultPolicy ( ) , fs . getStoragePolicy ( foo ) )
assertEquals ( 0 , stat )
assertEquals ( b , b2 )
assertTrue ( logs . getOutput ( ) . contains ( "batch of edits was too large" ) )
fail ( "NPE should not be thrown" )
assertTrue ( tracker . getSlowDiskReportAsJsonString ( ) == null )
assertNotNull ( u )
assertEquals ( clientAddr , getRemoteAddr ( clientAddr , null , false ) )
assertTrue ( opts instanceof ReaderOptions )
assertEquals ( "create #1\n" , log . toString ( ) )
assertEquals ( 2 , volumeFailures )
assertTrue ( f . exists ( ) )
assertThat ( cluster . getNamesystem ( ) . getNumDeadDataNodes ( ) , is ( 1 ) )
assertThat ( status . getStoragePolicy ( ) , not ( LAZY_PERSIST_POLICY_ID ) )
assertThat ( status . getStoragePolicy ( ) , is ( LAZY_PERSIST_POLICY_ID ) )
assertNull ( "unexpected X-FRAME-OPTION in header" , xfoHeader )
assertEquals ( EXPECTED_PATH , testParser . path ( ) )
assertEquals ( originalString , parsedString )
assertEquals ( 10L , value )
assertTrue ( status . getResult ( ) == NO_PLAN )
assertEquals ( NO_PLAN , status . getResult ( ) )
assertTrue ( mockMoverHelper . getBlockMover ( ) . getRunCount ( ) == 1 )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertNotNull ( savedSd )
assertEquals ( dnd3 . getNetworkLocation ( ) , clientRack )
assertEquals ( defaultBlockType , BlockType . CONTIGUOUS )
assertNotNull ( nsInfo . getState ( ) )
assertNotEquals ( holder , lm . getInternalLeaseHolder ( ) )
assertNotNull ( nn . metricsLoggerTimer )
assertEquals ( 1 , numBlocks )
fail ( "testConcat - expected exception is not thrown" )
fail ( "testCreateSymlink - expected exception is not thrown" )
fail ( "testRename 2 expected exception is not thrown" )
assertNull ( getZoneStatus ( zone . toString ( ) ) )
assertTrue ( kmsAcl . exists ( ) )
assertEquals ( 1 , inf . getBlocks ( ) . length )
assertTrue ( prevTmp . mkdirs ( ) )
assertEquals ( nns , nns2 )
assertNotEquals ( err . toString ( ) . trim ( ) , 0 , exitCode )
assertNotEquals ( err . toString ( ) . trim ( ) , 0 , exitCode )
assertEquals ( 0 , runTool ( "-getAllServiceState" ) )
assertEquals ( 0 , runTool ( "-failover" , "nn1" , "nn2" ) )
assertFalse ( p . getFileSystem ( conf ) . exists ( p ) )
assertEquals ( excludeFile . toUri ( ) . getPath ( ) , ret . trim ( ) )
assertEquals ( - 1 , ret )
assertEquals ( 0 , ret )
assertEquals ( 0 , ret )
assertEquals ( 0 , status )
assertNull ( objSet . getElement ( new TestObject ( "not in set" ) ) )
assertEquals ( TEST_MD5 , computedDigest )
assertEquals ( BlockType . STRIPED , lsb . getBlockType ( ) )
assertNull ( webHdfs . getDelegationToken ( null ) )
assertEquals ( expectedPath . toUri ( ) . getPath ( ) , trashPath . toUri ( ) . getPath ( ) )
fail ( "should have thrown UnSupportedOperationException." )
assertEquals ( WebHdfsFileSystem . PATH_PREFIX + path , url . getPath ( ) )
fail ( "The filter fails to block the request" )
assertTrue ( webhdfs . delete ( FILE , false ) )
assertTrue ( webhdfs . truncate ( FILE , 0L ) )
assertEquals ( null , p . getValue ( ) )
assertEquals ( null , p . getValue ( ) )
assertEquals ( null , p . getValue ( ) )
assertNull ( userParam . getValue ( ) )
assertNotNull ( userParam . getValue ( ) )
assertNotNull ( userParam . getValue ( ) )
assertEquals ( expected , computed . getValue ( ) )
assertEquals ( p . getXAttrName ( ) , "user.a1" )
assertEquals ( s , param . getValue ( ) )
assertTrue ( frequency . get ( key ) > 0 || key == dataNodes [ 0 ] )
assertEquals ( System . getProperty ( "user.name" ) , job . getUserName ( ) )
assertEquals ( ctx . getApplicationID ( ) . toString ( ) , controller . get ( APP_ID , "" ) )
assertEquals ( expectedGroups , groups )
assertEquals ( "Input splits are not correct" , 1 , splits . length )
assertTrue ( "acls off so anyone should have access" , val )
assertEquals ( "test" , configuration . get ( MRJobConfig . TASK_PROFILE_PARAMS ) )
assertEquals ( retryAttempts + 1 , FailServlet . calledTimes )
assertTrue ( "Threw exception:" + e , false )
assertTrue ( e instanceof IllegalArgumentException )
assertTrue ( re . getCause ( ) instanceof IOException )
assertEquals ( workPath , FileOutputFormat . getWorkOutputPath ( context ) )
assertNull ( sc . getOutputPath ( ) )
assertNull ( sc . getOutputPath ( ) )
assertNull ( conf . get ( MRJobConfig . MAPREDUCE_JOB_CREDENTIALS_BINARY ) )
assertEquals ( - 1 , exitCode )
assertFalse ( dfsCluster . getFileSystem ( ) . isInSafeMode ( ) )
assertNotNull ( lfs )
assertEquals ( "Exit code should be 0 but was: " + exitCode , 0 , exitCode )
assertEquals ( ctx . getApplicationID ( ) . toString ( ) , controller . get ( APP_ID , "" ) )
assertNotNull ( jobStatus )
assertEquals ( i , ifis . read ( ) )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertEquals ( 0 , result . length )
assertNull ( client . getJob ( id ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertEquals ( null , mr . getHistoryServer ( ) )
assertTrue ( result )
assertEquals ( JobStatus . FAILED , rJob . getJobState ( ) )
assertEquals ( conf , deser )
assertEquals ( conf , deser )
assertTrue ( job . getClassLoader ( ) instanceof Fake_ClassLoader )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertTrue ( "Empty job should work" , success )
assertEquals ( expected , readOutputFile ( conf ) )
assertTrue ( partition1 != partition2 )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertNull ( runJob )
assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertThat ( handler . onCall ( new Command ( - 1 ) , null ) ) . isNull ( )
assertEquals ( 100L , result . readLong ( ) )
assertTrue ( key . length + value . length > kvLength )
assertEquals ( mean , wr . read ( INPUT ) , 0.0 )
assertEquals ( stddev , wr . read ( INPUT ) , 0.0 )
assertEquals ( originalPaths , harPaths )
assertEquals ( originalPaths , harPaths )
assertTrue ( "Reading in temp data" , l > 0 )
assertEquals ( SOME_VALUE , v )
assertTrue ( "not found: " + tmp , tmp . exists ( ) )
assertTrue ( getFileSystem ( ) . mkdirs ( pathABC ) )
assertTrue ( "mkdirs failed" , getFileSystem ( ) . mkdirs ( pathABC ) )
assertEquals ( ACTIVE_RETRY_LIMIT , counter . get ( ) )
assertNotNull ( ex . getMessage ( ) )
assertEquals ( SSE_C , getAlgorithm ( SSE_C , "sseckey" ) )
assertEquals ( NONE , getMethod ( " " ) )
assertEquals ( "etag1" , tracker . getRevisionId ( ) )
assertEquals ( c , c2 )
assertEquals ( SESSION_TOKEN_KIND , identifier . getKind ( ) )
assertEquals ( suffix , getRelativePath ( BASE , path ) )
assertEquals ( "Not at the end of the file" , - 1 , future . get ( ) . read ( ) )
assertTrue ( tokenProvider instanceof RefreshTokenBasedTokenProvider )
assertTrue ( tokenProvider instanceof SdkTokenProviderAdapter )
assertEquals ( permission , status . getPermission ( ) )
assertFalse ( renameResult )
assertFalse ( deleteResult )
assertNotNull ( "lease ID" , lease . getLeaseID ( ) != null )
assertTrue ( fs . exists ( new Path ( "testFolder3/a/input/file" ) ) )
assertEquals ( FILE_SIZE , readInputStream ( new Path ( "/testWasb.txt" ) ) )
assertTrue ( fs . createNewFile ( testFile1 ) )
assertEquals ( 1 , result )
assertEquals ( TEST_BYTE , inputStream . read ( ) )
assertArrayEquals ( readBuffer , writeBuffer )
assertEquals ( "root listing" , 0 , rootls . length )
assertEquals ( "length of test files" , 1 , testFiles . length )
assertEquals ( permission . applyUMask ( DEFAULT_UMASK_PERMISSION ) , status . getPermission ( ) )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertArrayEquals ( new AclEntry [ ] { } , returned )
assertFalse ( "UnsupportedOperationException is expected" , false )
assertEquals ( expected [ i ] , Long . toHexString ( crc64 . compute ( testStr [ i ] . getBytes ( ) ) ) )
assertEquals ( key + "=" + value , qp . serialize ( ) )
assertNull ( cachedToken )
assertEquals ( src , dst )
assertTrue ( fs . exists ( target ) )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "build listing failure" )
fail ( "Both source listing & source paths allowed" )
assertEquals ( 2 , shouldCopyCount )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 0 , deletedFiles . get ( ) )
assertEquals ( 0 , deletedFiles . get ( ) )
assertThat ( DistCpUtils . getRelativePath ( root , child ) ) . isEqualTo ( "/a" )
assertTrue ( ( parser . parseLine ( line ) . isEmpty ( ) ) )
assertEquals ( expected , parser . parse ( in , Function . identity ( ) ) )
assertEquals ( expected , parser . parse ( in , Function . identity ( ) ) )
assertEquals ( expected , parser . parse ( in , Function . identity ( ) ) )
assertEquals ( expected , parser . parse ( in , Function . identity ( ) ) )
assertEquals ( context , trashProcedure . getContext ( ) )
assertEquals ( recurrenceIdTest , jobMetaData . getRecurrenceId ( ) )
assertTrue ( SingleTask . first )
assertEquals ( outputExpect , output )
assertEquals ( outputExpect , output )
assertEquals ( 0 , ret )
assertEquals ( outputExpect , output )
assertEquals ( tbw , readTbw )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertEquals ( result , actual )
assertEquals ( result , actual )
assertEquals ( expected . getStatus ( ) , actual . getStatus ( ) )
assertEquals ( expected . getStatus ( ) , actual . getStatus ( ) )
assertEquals ( expected . getStatus ( ) , actual . getStatus ( ) )
assertEquals ( expected . getStatus ( ) , actual . getStatus ( ) )
assertEquals ( result , actual )
assertEquals ( expected . getStatus ( ) , actual . getStatus ( ) )
assertTrue ( result )
assertNotNull ( challenge )
assertNotNull ( "upgrade did not complete" , response )
fail ( NO_EXCEPTION_PREFIX + e . getMessage ( ) )
fail ( )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNull ( "The path is not null!" , newURL )
assertEquals ( inputChecksumSHA256 , client . getFileChecksum ( file ) )
assertEquals ( "rm/localhost@EXAMPLE.COM" , client . timelineDTRenewer )
assertEquals ( 0 , rc )
assertEquals ( 0 , rc )
assertNotSame ( "should return non-zero exit code." , 0 , exitCode )
assertNotNull ( ctx . getResource ( ) )
assertEquals ( ex . getClass ( ) , pb . deSerialize ( ) . getClass ( ) )
assertEquals ( 0 , response . getErrors ( ) . size ( ) )
assertEquals ( expectedPath , actualPath )
assertEquals ( date , instant )
assertEquals ( TEST_FLOW_NAME , flowName )
assertEquals ( 50000 , port )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 0 , h . nestLevel )
assertEquals ( 5 , h . indents )
assertNotSame ( bar , injector . getInstance ( Bar . class ) )
assertEquals ( entry . getValue ( ) , uri )
assertNotNull ( client . getSSLFactory ( ) )
assertEquals ( "fake-csi-identity-service" , response . getName ( ) )
assertEquals ( "Application History" , controller . get ( TITLE , "unknown" ) )
assertNull ( copy . getNodeLabels ( ) )
assertNull ( request1 . getNodeLabels ( ) )
assertEquals ( nodeId , copy . getNodeId ( ) )
assertNull ( response )
assertEquals ( subClusterId1 , subClusterId2 )
assertEquals ( sc1 , sc2 )
assertEquals ( this . nodeHttpAddress , address )
assertNotNull ( registerResponse )
assertNotNull ( registerResponse )
fail ( "Expect InvalidToken exception" )
assertNotNull ( registerResponse )
assertEquals ( USER , deletionTask . getUser ( ) )
assertNull ( cGroupsBlkioResourceHandlerImpl . teardown ( ) )
assertNull ( ret )
assertNull ( cGroupsCpuResourceHandler . postComplete ( mockContainerId ) )
assertNull ( cGroupsCpuResourceHandler . teardown ( ) )
fail ( "Caught unexpected ResourceHandlerException!" )
fail ( "Caught unexpected ResourceHandlerException!" )
fail ( "Caught unexpected ResourceHandlerException!" )
assertEquals ( "Hash value" , EXPECTED_HASH , device . getAocxHash ( ) )
assertTrue ( "preStart should throw exception" , exception )
assertNull ( numaResourceHandler . preStart ( mockContainer ) )
assertNull ( numaResourceHandler . preStart ( mockContainer ) )
assertTrue ( runtime instanceof DefaultLinuxContainerRuntime )
fail ( "Expected a pid host disabled container failure." )
fail ( "Expected a privileged launch container failure." )
fail ( "Expected a launch container failure due to NUL in mount." )
fail ( "Expected a launch container failure due to invalid mount." )
fail ( "Expected a launch container failure due to invalid mount." )
assertEquals ( "images" , dockerImagesCommand . getCommandOption ( ) )
assertEquals ( "inspect" , dockerInspectCommand . getCommandOption ( ) )
assertEquals ( "kill" , dockerKillCommand . getCommandOption ( ) )
assertEquals ( "load" , dockerLoadCommand . getCommandOption ( ) )
assertEquals ( "pull" , dockerPullCommand . getCommandOption ( ) )
assertEquals ( "rm" , dockerRmCommand . getCommandOption ( ) )
assertEquals ( "run" , dockerRunCommand . getCommandOption ( ) )
assertEquals ( "start" , dockerStartCommand . getCommandOption ( ) )
assertEquals ( "stop" , dockerStopCommand . getCommandOption ( ) )
assertFalse ( spied . call ( ) )
assertEquals ( - 1L , interval )
assertEquals ( 2700L , interval )
assertTrue ( "Cannot set executable flag" , scriptPath . toFile ( ) . canExecute ( ) )
assertEquals ( container , context . getContainer ( ) )
assertTrue ( ! metrics . containerAssignedPerSecond . changed ( ) )
assertEquals ( "Move not supported" , ex . getMessage ( ) )
assertEquals ( AccessControlException . class , ex . getCause ( ) . getCause ( ) . getClass ( ) )
assertEquals ( NodeState . LOST , node . getState ( ) )
assertNotNull ( ni . getHealthReport ( ) )
assertEquals ( NodeAction . NORMAL , response . getNodeAction ( ) )
assertEquals ( 0 , ClusterMetrics . getMetrics ( ) . getUnhealthyNMs ( ) )
assertTrue ( matcher . match ( variables ) )
fail ( e . getMessage ( ) )
fail ( "Bad profile '" + file + "' is not valid" )
assertEquals ( RMAppAttemptState . RUNNING , attempt . getState ( ) )
assertEquals ( "a1" , app . getQueue ( ) . getQueueName ( ) )
fail ( )
assertTrue ( "queue initialization failed for non-existent q" , fail )
assertFalse ( "Audit Log is not disabled" , logKeyPresent )
assertNull ( "Failed to Disable Audit Logs" , data )
assertTrue ( request . getAllocationRequestId ( ) > prevAllocId )
assertEquals ( ancestorQueue , queue1 )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( "Number of rules" , 1 , description . getRules ( ) . size ( ) )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( expectedRequest , request )
assertEquals ( "Applications" , c . get ( TITLE , "unknown" ) )
assertEquals ( "<memory:10, vCores:1>" , res . toString ( ) )
assertNull ( "Unexpected X-FRAME-OPTION in header" , xfoHeader )
assertEquals ( 0 , response . getNodeToLabels ( ) . size ( ) )
assertEquals ( 2 , response . getResourceTypeInfo ( ) . size ( ) )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( getRealm ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertEquals ( BAD_REQUEST , response . getStatus ( ) )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertNull ( response )
assertNotNull ( response )
assertNotNull ( response )
assertNotNull ( store , "LevelDBCacheTimelineStore failed to instantiate" )
assertEquals ( APPLICATION_ID , rowKey . getAppId ( ) )
assertNull ( separator . encode ( null ) )
assertFalse ( auxService . hasApplication ( appAttemptId . getApplicationId ( ) ) )
assertEquals ( appNotFoundExceptionMsg , e . getMessage ( ) )
assertEquals ( expected , result )
assertNull ( ProxyUriUtils . getUriFromTrackingPlugins ( id , list ) )
assertNotNull ( result )
