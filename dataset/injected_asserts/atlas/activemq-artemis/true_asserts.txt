Assert . assertEquals ( ConnectionAbstract . DEFAULT_BROKER_URL , connectionAbstract . getBrokerURL ( ) )
Assert . assertEquals ( "127.0.0.1" , fc . getNetworkCheckList ( ) )
assertTrue ( ret instanceof IllegalStateException )
Assert . fail ( "Exception expected" )
assertEquals ( 3 , parts . length )
assertTrue ( e . getMessage ( ) . contains ( "Found unexpected parameters" ) )
Assert . assertTrue ( "just because one took a lot of time, it doesn't mean we can accumulate many, we got " + count + " executions" , count . get ( ) < 5 )
Assert . assertTrue ( latch . await ( 10 , TimeUnit . SECONDS ) )
Assert . assertEquals ( 33 , buffer . capacity ( ) )
Assert . assertEquals ( element , e )
assertTrue ( codec instanceof DefaultSensitiveStringCodec )
Assert . assertTrue ( check . check ( ) )
assertTrue ( codec instanceof DefaultSensitiveStringCodec )
Assert . assertEquals ( randomStart , simpleFuture . get ( ) . longValue ( ) )
Assert . assertTrue ( failed )
assertTrue ( e instanceof IndexOutOfBoundsException )
Assert . assertFalse ( searchProperty ( SimpleString . toSimpleString ( "" ) , buf , 0 ) )
Assert . assertFalse ( error . get ( ) )
Assert . assertNull ( chunkedList . get ( 0 ) )
Assert . assertFalse ( testSet . contains ( Long . valueOf ( i ) ) )
Assert . assertFalse ( testSet . remove ( 0L ) )
Assert . assertNotEquals ( testSet , other )
Assert . assertNotEquals ( testSet , other )
assertNull ( map . get ( "hello" ) )
Assert . assertEquals ( "" , result )
Assert . assertEquals ( expected , truncated )
Assert . assertEquals ( input , notTruncated )
assertEquals ( testResourceAddressName , ResourceNames . getRetroactiveResourceAddressName ( prefix , delimiter , testAddress ) . toString ( ) )
assertEquals ( 0 , channel . getCache ( ) . size ( ) )
Assert . assertEquals ( TEXT , TextMessageUtil . readBodyText ( decodedMessage . getReadOnlyBodyBuffer ( ) ) . toString ( ) )
assertNotNull ( OpenSSLContextFactoryProvider . getOpenSSLContextFactory ( ) )
Assert . assertEquals ( "foo" , XMLUtil . getTextContent ( e ) )
Assert . assertEquals ( "somedata" , stripped )
assertTrue ( "bytes read should be < 0" , bytes < 0 )
assertEquals ( "Couldn't access org.postgresql.largeobject.LargeObjectManager" , ex . getCause ( ) . getMessage ( ) )
Assert . assertTrue ( ActiveMQXAQueueConnectionFactory . class . getName ( ) . equals ( factory . getClass ( ) . getName ( ) ) )
Assert . assertTrue ( ActiveMQQueueConnectionFactory . class . getName ( ) . equals ( factory . getClass ( ) . getName ( ) ) )
Assert . assertTrue ( ActiveMQJMSConnectionFactory . class . getName ( ) . equals ( factory . getClass ( ) . getName ( ) ) )
Assert . assertTrue ( ActiveMQJMSConnectionFactory . class . getName ( ) . equals ( factory . getClass ( ) . getName ( ) ) )
Assert . assertTrue ( ActiveMQJMSConnectionFactory . class . getName ( ) . equals ( factory . getClass ( ) . getName ( ) ) )
Assert . assertEquals ( isDirect , pool . borrow ( 0 , zeroed ) . isDirect ( ) )
Assert . assertNotSame ( buffer , differentBuffer )
Assert . assertSame ( big , pool . borrow ( big . capacity ( ) , zeroed ) )
Assert . assertNotSame ( readOnlyBuffer , pool . borrow ( size , zeroed ) )
Assert . assertNotSame ( buffer , executor . submit ( ( ) -> pool . borrow ( size , zeroed ) ) . get ( ) )
Assert . assertNotNull ( consumer . receive ( 5000 ) )
Assert . assertEquals ( "TST1: Test" , SimpleBundle . MESSAGES . simpleTest ( ) )
Assert . assertEquals ( new Exception ( "TST4: EX-" + uuid ) . toString ( ) , SimpleBundle . MESSAGES . someExceptionParameter ( uuid ) . toString ( ) )
Assert . assertEquals ( "TST10: A B C D" , SimpleBundle . MESSAGES . objectsAbcd ( new MyObject ( "A" ) , new MyObject ( "B" ) , new MyObject ( "C" ) , new MyObject ( "D" ) ) )
Assert . assertNotNull ( SimpleBundle . MESSAGES . getLogger ( ) )
assertNotNull ( "can get anon with empty list" , connectionCallback . getServerSASL ( AnonymousServerSASL . NAME ) )
assertEquals ( null , decoded . getConnectionID ( ) )
assertEquals ( null , decoded . getDuplicateProperty ( ) )
assertEquals ( ADDRESS , decoded . getAddressSimpleString ( ) . toString ( ) )
assertTrue ( decoded . isDurable ( ) )
assertFalse ( decoded . isDurable ( ) )
assertFalse ( decoded . isDurable ( ) )
assertNull ( decoded . getRoutingType ( ) )
assertEquals ( RoutingType . ANYCAST , decoded . getRoutingType ( ) )
assertEquals ( RoutingType . MULTICAST , decoded . getRoutingType ( ) )
assertEquals ( RoutingType . ANYCAST , decoded . getRoutingType ( ) )
assertEquals ( RoutingType . MULTICAST , decoded . getRoutingType ( ) )
assertEquals ( RoutingType . MULTICAST , decoded . getRoutingType ( ) )
assertEquals ( GROUP_ID , decoded . getGroupID ( ) . toString ( ) )
assertNull ( decoded . getGroupID ( ) )
assertNull ( decoded . getGroupID ( ) )
assertEquals ( REPLY_TO , decoded . getReplyTo ( ) . toString ( ) )
assertNull ( decoded . getReplyTo ( ) )
assertEquals ( USER_NAME , decoded . getAMQPUserID ( ) )
assertNull ( decoded . getAMQPUserID ( ) )
assertEquals ( expirationTime . getTime ( ) , decoded . getExpiration ( ) )
assertEquals ( expirationTime . getTime ( ) , decoded . getExpiration ( ) )
assertEquals ( timestamp . getTime ( ) , decoded . getTimestamp ( ) )
assertEquals ( scheduledTime , decoded . getScheduledDeliveryTime ( ) . longValue ( ) )
assertEquals ( scheduledTime , decoded . getScheduledDeliveryTime ( ) . longValue ( ) )
assertTrue ( decoded . getScheduledDeliveryTime ( ) . longValue ( ) > System . currentTimeMillis ( ) )
assertEquals ( 0 , decoded . getScheduledDeliveryTime ( ) . longValue ( ) )
assertEquals ( result , stringResult )
assertNotSame ( decoded , protonMessage . getHeader ( ) )
assertNotSame ( decoded , protonMessage . getProperties ( ) )
assertNotSame ( decoded , protonMessage . getApplicationProperties ( ) )
assertEquals ( decoded . getAnnotation ( TEST_ANNOTATION ) , "value-2" )
assertNotNull ( buffer )
Assert . assertEquals ( persister . getEncodeSize ( message ) , buffer . writerIndex ( ) )
assertEquals ( text , textMessage . getText ( ) )
assertNotNull ( AMQPMessageSupport . getSymbol ( "x-opt-something-or-other" ) )
assertNotNull ( AMQPMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
assertNull ( AMQPMessageSupport . getMessageAnnotation ( "x-opt-test" , message ) )
Assert . assertEquals ( ( Long ) deliveryTime , coreMessage . getScheduledDeliveryTime ( ) )
Assert . assertEquals ( ( Long ) deliveryTime , amqpMessage . getScheduledDeliveryTime ( ) )
assertNull ( amqp . getBody ( ) )
assertEquals ( 100 , buffer . capacity ( ) )
assertEquals ( buffer . capacity ( ) , writable . limit ( ) )
assertTrue ( messageDispatch . getMessage ( ) . getProperty ( bytesPropertyKey ) instanceof String )
Assert . assertSame ( manager . getDistributedLock ( "a" ) , manager . getDistributedLock ( "a" ) )
Assert . assertNotSame ( closedLock , manager . getDistributedLock ( "a" ) )
Assert . assertNotNull ( lock )
Assert . assertTrue ( "Created XPath expression" , filter instanceof XPathExpression )
Assert . assertEquals ( 25 * 1024 , configuration . getGlobalMaxSize ( ) )
Assert . assertEquals ( "vv-" , configuration . getName ( ) )
assertTrue ( "must have been org.xml.sax.SAXParseException" , cause instanceof org . xml . sax . SAXParseException )
assertEquals ( 0 , server . locateQueue ( SimpleString . toSimpleString ( "q" ) ) . getMaxConsumers ( ) )
Assert . assertEquals ( 123 , config . getAddressSettings ( ) . get ( "foo" ) . getRedistributionDelay ( ) )
Assert . assertEquals ( 0 , config . getIDCacheSize ( ) )
Assert . assertNull ( list . poll ( ) )
Assert . assertEquals ( bodyText , cd . get ( "text" ) )
assertEquals ( le . getMessage ( ) , "Password does not match for user: first" )
assertEquals ( le . getMessage ( ) , "Password does not match for user: first" )
assertEquals ( "FOO" , principal . getName ( ) )
assertEquals ( "FOO" , principal . getName ( ) )
Assert . assertEquals ( queueConfig . name ( ) , queueConfig . address ( ) )
assertEquals ( "Incorrect number of sent datagrams" , 1 , befi . sent )
Assert . assertEquals ( CACHE_ENTRY_VALUE , cache . get ( CACHE_ENTRY_KEY ) )
Assert . assertEquals ( selectedTarget , targets . get ( 0 ) )
assertNotNull ( instance . resolve ( ConsistentHashPolicy . NAME ) )
Assert . assertNull ( selectedTarget )
Assert . assertEquals ( myString , s . toString ( ) )
Assert . assertSame ( expectedPooled , pool . getOrCreate ( s ) )
Assert . assertEquals ( MessageLoadBalancingType . OFF_WITH_REDISTRIBUTION , configuration . getMessageLoadBalancingType ( ) )
assertNull ( consumer . receive ( 1000 ) )
Assert . assertEquals ( "Expected message count not correct" , expectedReceiveCount ( ) , receivedMessageCount . get ( ) )
Assert . assertNotNull ( "we got the message" , consumer . receive ( 20000 ) )
Assert . assertEquals ( 0 , ( ( PostOfficeImpl ) server . getPostOffice ( ) ) . getDuplicateIDCaches ( ) . size ( ) )
Assert . assertNotNull ( consumer . receive ( 1000 ) )
assertFalse ( server . queueQuery ( new SimpleString ( queueName ) ) . isExists ( ) )
assertFalse ( server . queueQuery ( queueName ) . isExists ( ) )
assertFalse ( server . queueQuery ( queueName ) . isExists ( ) )
assertFalse ( server . queueQuery ( queueName ) . isExists ( ) )
assertNotNull ( server . getManagementService ( ) . getResource ( ResourceNames . ADDRESS + "test" ) )
assertNotNull ( message )
Assert . assertNotNull ( consumer . receiveImmediate ( ) )
Assert . assertNotNull ( message )
Assert . assertNotNull ( message )
Assert . assertNotNull ( message )
Assert . assertEquals ( 0 , errors . get ( ) )
Assert . assertNull ( consumer . receiveImmediate ( ) )
Assert . assertNotNull ( consumer . receive ( 500 ) )
Assert . assertNull ( message2 )
Assert . assertTrue ( "TotalTime = " + ( end - start ) , end - start >= 1000 )
assertEquals ( timeout , bootstrap . register ( ) . channel ( ) . config ( ) . getConnectTimeoutMillis ( ) )
Assert . assertNotNull ( cc . receive ( ) )
Assert . assertFalse ( q . isDurable ( ) )
Assert . assertTrue ( q . isDurable ( ) )
Assert . assertTrue ( q . isTemporary ( ) )
Assert . assertEquals ( q . getFilter ( ) . getFilterString ( ) , filterString )
Assert . assertTrue ( binding . getBindable ( ) instanceof LastValueQueue )
Assert . assertNotNull ( consumer )
assertTrue ( "Expected a failure on setting ACK Handler" , failed )
Wait . assertEquals ( MSG_COUNT , ( ) -> count . get ( ) , 2000 , 100 )
Wait . assertEquals ( MSG_COUNT , ( ) -> count . get ( ) , 2000 , 100 )
Wait . assertEquals ( MSG_COUNT , ( ) -> count . get ( ) , 2000 , 100 )
Assert . assertTrue ( listener . getLatch ( ) . await ( 5 , TimeUnit . SECONDS ) )
Assert . assertEquals ( ( byte ) 99 , clientMessage . getType ( ) )
assertNotNull ( nodeId )
assertEquals ( e . getType ( ) , ActiveMQExceptionType . OBJECT_CLOSED )
assertNotNull ( consumer . receive ( 500 ) )
assertNotNull ( message )
assertTrue ( "should throw ActiveMQClusterSecurityException" , e instanceof ActiveMQClusterSecurityException )
assertEquals ( n_msgs , ( ( QueueControl ) liveServer . getServer ( ) . getManagementService ( ) . getResource ( ResourceNames . QUEUE + ADDRESS . toString ( ) ) ) . removeAllMessages ( ) )
assertFalse ( liveServer . isStarted ( ) )
Assert . fail ( "Exception was expected" )
Assert . assertEquals ( 70 , process . waitFor ( ) )
Assert . assertTrue ( server . isStarted ( ) )
Assert . assertFalse ( server . isStarted ( ) )
Assert . assertNull ( message )
Assert . assertNull ( message )
Assert . assertEquals ( JMSFactoryType . XA_CF . intValue ( ) , connectionFactory . getFactoryType ( ) )
Assert . assertEquals ( JMSFactoryType . TOPIC_CF . intValue ( ) , connectionFactory . getFactoryType ( ) )
Assert . assertEquals ( true , cf . isHA ( ) )
Assert . assertTrue ( destination instanceof Queue )
Assert . assertTrue ( destination instanceof Topic )
assertFalse ( ( ( ActiveMQConnectionFactory ) connectionFactory ) . getServerLocator ( ) . getUseTopologyForLoadBalancing ( ) )
Assert . assertNotNull ( receive ( consumer1 ) )
assertFalse ( failed . get ( ) )
Assert . assertNull ( m )
Assert . assertNull ( m )
Assert . assertNotNull ( txt )
Assert . assertNotNull ( receivedMessage )
Assert . assertNotNull ( receivedMessage )
assertNotNull ( msg )
assertEquals ( randomStr , receiveMsg . getText ( ) )
Assert . assertEquals ( "id's must match because the connection is shared" , id , context2 . getClientID ( ) )
assertEquals ( - 2 , server . getActiveMQServer ( ) . getConfiguration ( ) . getGracefulShutdownTimeout ( ) )
Assert . assertEquals ( factory . getAlignment ( ) , buff . limit ( ) )
Assert . assertEquals ( OK , process . waitFor ( ) )
assertEquals ( 9 , journal . getCurrentFile ( ) . getNegCount ( journal . getDataFiles ( ) [ 0 ] ) )
Assert . assertFalse ( createManagementControl ( ) . isReplicaSync ( ) )
assertEquals ( 0 , serverControl . getDivertNames ( ) . length )
Assert . assertEquals ( address . toString ( ) , addressControl . getAddress ( ) )
Assert . assertTrue ( addressControl . isRetroactiveResource ( ) )
Assert . assertEquals ( 0 , count )
Assert . assertEquals ( 0 , getMessageCount ( queueControl ) )
Assert . assertNotNull ( history )
Wait . assertTrue ( ( ) -> server . locateQueue ( SimpleString . toSimpleString ( queueName ) ) == null , 5000 , 10 )
Assert . assertEquals ( "testXX" + i , txt . getText ( ) )
assertNull ( transaction )
assertNull ( transaction )
assertNull ( consumer . receive ( 1000 ) )
assertNotNull ( m )
assertNotNull ( message )
Assert . assertNotNull ( server . getPostOffice ( ) . getBinding ( new SimpleString ( "trash" ) ) )
assertFalse ( pubishDoneToQeueuB . await ( 2 , TimeUnit . SECONDS ) )
Assert . assertNull ( server . getPagingManager ( ) )
Assert . assertEquals ( origFileSize , fileSize )
Assert . assertEquals ( origFileSize + align , fileSize )
assertNull ( mcf . getResourceRecovery ( ) )
assertNotNull ( mcf . getResourceRecovery ( ) )
Assert . assertNotNull ( msg )
Assert . assertEquals ( 0 , server . getActiveMQServerControl ( ) . listRemoteAddresses ( ) . length )
Assert . fail ( "Exception was expected" )
assertTrue ( latch . await ( 3000 , TimeUnit . MILLISECONDS ) )
assertNotNull ( server . locateQueue ( prefix . concat ( addressA ) . concat ( AddressSettings . DEFAULT_DEAD_LETTER_QUEUE_SUFFIX ) ) )
assertNotNull ( server . locateQueue ( prefix . concat ( addressA ) . concat ( suffix ) ) )
assertNotNull ( context . createConsumer ( context . createQueue ( fqqn ) ) . receive ( 2000 ) )
Wait . assertTrue ( ( ) -> server . locateQueue ( prefix . concat ( addressA ) . concat ( AddressSettings . DEFAULT_EXPIRY_QUEUE_SUFFIX ) ) != null , 2000 , 100 )
Wait . assertTrue ( ( ) -> server . locateQueue ( prefix . concat ( addressA ) . concat ( suffix ) ) != null , 2000 , 100 )
assertNotNull ( context . createConsumer ( context . createQueue ( fqqn ) ) . receive ( 2000 ) )
assertTrue ( e instanceof ActiveMQNotConnectedException )
assertTrue ( latch . await ( 3000 , TimeUnit . MILLISECONDS ) )
assertNotEquals ( 10 , ( long ) server . locateQueue ( queue ) . getQueueConfiguration ( ) . getRingSize ( ) )
assertNotNull ( msg )
assertTrue ( latch . await ( 60 , TimeUnit . SECONDS ) )
assertNotNull ( e )
Assert . assertEquals ( Stomp . Responses . ERROR , frame . getCommand ( ) )
Assert . assertEquals ( Stomp . Responses . ERROR , response . getCommand ( ) )
Assert . assertFalse ( consumer . failed )
assertEquals ( "CONNECTED" , conn . connect ( defUser , defPass , "MyClientID" ) . getCommand ( ) )
assertTrue ( frame . getCommand ( ) . equals ( Stomp . Responses . CONNECTED ) )
Assert . assertNull ( message )
Assert . assertNotNull ( message )
Assert . assertNotNull ( message )
Assert . assertNull ( message )
Assert . assertNotNull ( message )
Assert . assertNotNull ( message )
Assert . assertTrue ( f . getCommand ( ) . equals ( Stomp . Responses . ERROR ) )
Assert . assertTrue ( "Should have received the real message but got: " + frame , frame . getBody ( ) . equals ( "Real message" ) )
Assert . assertTrue ( frame . getHeader ( Stomp . Headers . Ack . SUBSCRIPTION ) != null )
assertFalse ( p . matcher ( subscribe ( conn , null ) . toString ( ) ) . find ( ) )
Assert . assertNull ( message )
Assert . assertEquals ( 0 , t . errors . get ( ) )
Wait . assertTrue ( ( ) -> server . locateQueue ( queueName ) == null )
Assert . assertNull ( message )
assertNotNull ( "Send went through an invalid XA Session" , cons . receiveImmediate ( ) )
ProxyAssertSupport . assertEquals ( testClientId , c . getClientID ( ) )
ProxyAssertSupport . assertNull ( c . getClientID ( ) )
ProxyAssertSupport . assertEquals ( "message one" , rm . getText ( ) )
ProxyAssertSupport . assertEquals ( "message one" , rm . getText ( ) )
ProxyAssertSupport . assertEquals ( "CLACK" , m . getText ( ) )
ProxyAssertSupport . assertEquals ( selector , topicConsumer . getMessageSelector ( ) )
ProxyAssertSupport . assertEquals ( ActiveMQServerTestCase . topic1 , t )
ProxyAssertSupport . assertEquals ( queue1 , q )
ProxyAssertSupport . assertNull ( msg )
ProxyAssertSupport . assertNotNull ( m )
ProxyAssertSupport . assertEquals ( "message one" , bm . getText ( ) )
ProxyAssertSupport . assertTrue ( instance instanceof ActiveMQConnectionFactory )
Assert . assertTrue ( ( ( ActiveMQConnectionFactory ) cf ) . isCompressLargeMessage ( ) )
ProxyAssertSupport . assertEquals ( "Invalid ClientID" , "dilbert-id" , clientID )
ProxyAssertSupport . assertEquals ( "something" , rm . getText ( ) )
ProxyAssertSupport . assertEquals ( "Topic1" , topic . getTopicName ( ) )
ProxyAssertSupport . assertTrue ( thrown )
ProxyAssertSupport . assertNull ( cons . receiveNoWait ( ) )
ProxyAssertSupport . assertNull ( cons . receiveNoWait ( ) )
ProxyAssertSupport . assertEquals ( queue1 , m . getJMSDestination ( ) )
ProxyAssertSupport . assertNull ( queueConsumer . receiveNoWait ( ) )
ProxyAssertSupport . assertFalse ( "ID:something" . equals ( m . getJMSMessageID ( ) ) )
ProxyAssertSupport . assertEquals ( tempQ , m . getJMSReplyTo ( ) )
ProxyAssertSupport . assertEquals ( originalType , gotType )
ProxyAssertSupport . assertEquals ( null , queueConsumer . receive ( 1000 ) . getJMSType ( ) )
ProxyAssertSupport . assertNull ( rm . readString ( ) )
ProxyAssertSupport . assertEquals ( "something" , rm . getText ( ) )
Assert . assertEquals ( "sec. 3.11.1 Clearing a message's body does not clear its property entries.\n" , "foo" , message . getStringProperty ( "prop" ) )
Assert . assertTrue ( "The message should be an instance of StreamMessage.\n" , msg instanceof StreamMessage )
Assert . assertTrue ( "The message should be an instance of MapMessage.\n" , msg instanceof MapMessage )
Assert . assertTrue ( "The message should be an instance of ObjectMessage.\n" , msg instanceof ObjectMessage )
Assert . assertTrue ( "sec. 3.4.3 When a message is sent this value is ignored.\n" , ! message . getJMSMessageID ( ) . equals ( "ID:foo" ) )
Assert . assertEquals ( "3.14159" , message . getStringProperty ( "pi" ) )
Assert . fail ( "sec. 3.5.4 The String to numeric conversions must throw the java.lang.NumberFormatException " + " if the numeric's valueOf() method does not accept the String value as a valid representation.\n" )
Assert . assertEquals ( 3.14159 , message . getDoubleProperty ( "pi" ) , 0 )
Assert . assertEquals ( 3.14159F , message . getFloatProperty ( "pi" ) , 0 )
Assert . fail ( "sec. 3.5.4 The String to numeric conversions must throw the java.lang.NumberFormatException " + " if the numeric's valueOf() method does not accept the String value as a valid representation.\n" )
Assert . assertEquals ( 0L , message . getLongProperty ( "prop" ) )
Assert . fail ( "sec. 3.5.4 The String to numeric conversions must throw the java.lang.NumberFormatException " + " if the numeric's valueOf() method does not accept the String value as a valid representation.\n" )
Assert . assertEquals ( ( short ) 0 , message . getShortProperty ( "prop" ) )
Assert . assertEquals ( true , message . getBooleanProperty ( "prop" ) )
Assert . assertEquals ( "127.0" , message . getStringProperty ( "prop" ) )
Assert . assertEquals ( 127.0 , message . getDoubleProperty ( "prop" ) , 0 )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . assertEquals ( "127.0" , message . getStringProperty ( "prop" ) )
Assert . assertEquals ( 127.0F , message . getFloatProperty ( "prop" ) , 0 )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . assertEquals ( 127L , message . getLongProperty ( "prop" ) )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . assertEquals ( 127L , message . getLongProperty ( "prop" ) )
Assert . assertEquals ( 127 , message . getIntProperty ( "prop" ) )
Assert . assertEquals ( "127" , message . getStringProperty ( "prop" ) )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . assertEquals ( 127L , message . getLongProperty ( "prop" ) )
Assert . assertEquals ( ( short ) 127 , message . getShortProperty ( "prop" ) )
Assert . assertEquals ( "true" , message . getStringProperty ( "prop" ) )
Assert . fail ( "sec. 3.5.4 The unmarked cases [of Table 0-4] should raise a JMS MessageFormatException.\n" )
Assert . assertEquals ( true , message . getBooleanProperty ( "prop" ) )
Assert . assertEquals ( "sec. 3.5.5 A null value is returned [by the getStringProperty method] if a property by the specified " + "name does not exits.\n" , null , message . getStringProperty ( "prop" ) )
Assert . fail ( "Should raise a NumberFormatException.\n" )
Assert . assertEquals ( false , message . getBooleanProperty ( "prop" ) )
Assert . assertEquals ( "sec. 3.5.7 A message's properties are deleted by the clearProperties method.\n" , null , message . getStringProperty ( "prop" ) )
Assert . fail ( "FALSE is not a valid identifier" )
Assert . fail ( "OR is not a valid identifier" )
Assert . fail ( "IS is not a valid identifier" )
Assert . assertEquals ( "testIdentifierConversion:2" , msg . getText ( ) )
Assert . assertEquals ( "testGreaterThan:2" , msg . getText ( ) )
Assert . assertEquals ( "testEquals:2" , msg . getText ( ) )
assertEquals ( message , m . getText ( ) )
assertEquals ( textMessage , msgReceived . getBodyBuffer ( ) . readString ( ) )
assertEquals ( textMessage , messageReceived . getText ( ) )
assertEquals ( expectedBrandImage , loginPage . getBrandImage ( DEFAULT_TIMEOUT ) )
Assert . fail ( "Exception was expected here" )
Assert . assertEquals ( str , newstr )
Assert . assertNotNull ( element )
assertTrue ( connectorsService . getConnectors ( ) . size ( ) == 1 )
Assert . fail ( "Expected IllegalArgumentException" )
Assert . assertEquals ( 3 , id )
Assert . fail ( "Exception expected" )
Assert . fail ( "Exception expected" )
Assert . fail ( "Should throw exception" )
Assert . fail ( "Unexpected exception: " + e . toString ( ) )
assertEquals ( 1 , count . get ( ) )
assertEquals ( 1 , countMatchingWildcards ( SimpleString . toSimpleString ( "test.0.168" ) ) )
assertEquals ( 1 , fake . routedCount . get ( ) )
assertEquals ( 0 , fake . routedCount . get ( ) )
assertEquals ( "Exception happened during the process" , 0 , errors )
Assert . assertNull ( putAndGetNullableString ( null ) )
ActiveMQTestBase . assertEqualsByteArrays ( b . length , bytes , b )
Assert . assertTrue ( wrapper . readNullableBoolean ( ) )
Assert . assertFalse ( wrapper . readNullableBoolean ( ) )
Assert . assertEquals ( l , wrapper . readNullableLong ( ) )
Assert . assertEquals ( size , buff . capacity ( ) )
Assert . fail ( )
Assert . fail ( )
Assert . assertEquals ( name , queue . getName ( ) )
Assert . assertTrue ( rate <= 10.0f )
Assert . assertEquals ( getMessagesAdded ( queue ) , 3 )
Assert . assertEquals ( queue . getReference ( 2 ) , messageReference2 )
Assert . assertNull ( queue . getReference ( 5 ) )
Assert . assertTrue ( destination instanceof Destination )
Assert . fail ( "Caught NPE!" )
Assert . assertEquals ( ActiveMQMapMessage . TYPE , message . getType ( ) )
Assert . assertEquals ( Float . valueOf ( value ) . doubleValue ( ) , message . getDouble ( itemName ) , 0.000001 )
Assert . assertEquals ( Byte . toString ( value ) , message . getString ( itemName ) )
Assert . assertEquals ( Short . toString ( value ) , message . getString ( itemName ) )
Assert . assertEquals ( Integer . toString ( value ) , message . getString ( itemName ) )
Assert . assertEquals ( Long . toString ( value ) , message . getString ( itemName ) )
Assert . assertNull ( message . getString ( itemName ) )
ActiveMQTestBase . assertEqualsByteArrays ( value , message . getBytes ( itemName ) )
Assert . assertEquals ( ActiveMQStreamMessage . TYPE , message . getType ( ) )
ActiveMQTestBase . assertEqualsByteArrays ( value , v )
Assert . assertEquals ( Boolean . toString ( value ) , message . readString ( ) )
Assert . assertEquals ( Character . toString ( value ) , message . readString ( ) )
Assert . assertEquals ( Byte . toString ( value ) , message . readString ( ) )
Assert . assertEquals ( value , message . readString ( ) )
Assert . assertEquals ( Integer . toString ( value ) , message . readString ( ) )
Assert . assertEquals ( Long . toString ( value ) , message . readString ( ) )
Assert . assertEquals ( Float . toString ( value ) , message . readString ( ) )
Assert . assertNull ( message . readString ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
ActiveMQTestBase . assertEqualsByteArrays ( value , v )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( value , message . readObject ( ) )
Assert . assertEquals ( factory , factory2 )
Assert . assertNotSame ( factory , defaultFactory )
assertNotNull ( iter )
assertEquals ( javaId . toString ( ) , nativeId . toString ( ) )
