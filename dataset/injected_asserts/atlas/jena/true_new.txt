assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , v )
assertEquals ( x , obj )
assertNull ( auth . getAuthScheme ( ) )
assertEquals ( "" , query . getCommandText ( ) )
assertEquals ( "http://example.org" , query . getBaseUri ( ) )
assertEquals ( r . asNode ( ) , query . getParam ( "s" ) )
assertEquals ( prefixes . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"test\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"A tabby\\tstring\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"A test\\'s test\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"test a\\\\b\" . }" , query . toString ( ) )
assertEquals ( "http://example.org" , copy . getNsPrefixURI ( "ex" ) )
assertFalse ( "http://example.org" . equals ( copy . getNsPrefixURI ( "ex" ) ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"test\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { \"with ? mark\" <http://predicate> \"test\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { \"with ? mark\" \"with ? mark\" \"test\" . }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"test\". }" , query . toString ( ) )
assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"test\", ?o . }" , query . toString ( ) )
assertEquals ( 1 , count )
assertEquals ( 3 , count )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertEquals ( exp , res )
assertTrue ( hasNG ( x , node ( "g" ) ) )
assertEquals ( 4 , c )
assertEquals ( 2 , count ( rdfs , ANY , ANY , ANY ) )
assertEquals ( 3 , count ( rdfs , ANY , ANY , ANY ) )
assertEquals ( 5 , count ( rdfs , ANY , ANY , ANY ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( APP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( APP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( APP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( EXAMPLE_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( EXAMPLE_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( HTTP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( HTTP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( HTTP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( JENA_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( JENA_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( SSH_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( X_MADEUP_BASE ) ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( X_MADEUP_BASE ) ) )
assertNotNull ( in )
assertNull ( "Found non-existant file: " + filenameNonExistent , in )
assertNotNull ( in )
assertNotNull ( in )
assertTrue ( n . isBlank ( ) )
assertEquals ( n1 , n2 )
assertNotNull ( n )
assertTrue ( "The " + ext + " file extensions in " + lang1 + " was already used" , lang2 == null || lang1 == lang2 )
assertTrue ( lang + " default extension not in file extensions list" , lang . getFileExtensions ( ) . contains ( lang . getFileExtensions ( ) . get ( 0 ) ) )
assertNotNull ( l + " can not be parsed by name" , RDFLanguages . shortnameToLang ( l . getName ( ) ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( t2 , t )
assertEquals ( t2 , t )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertNotEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertEquals ( b1 , b2 )
assertTrue ( "Models not isomorphic" , IsoMatcher . isomorphic ( m1 . getGraph ( ) , m2 . getGraph ( ) ) )
assertEquals ( lang , RDFPROTO )
assertNotNull ( writer )
assertNotNull ( writer )
assertNotNull ( writer )
assertNotNull ( writer )
assertEquals ( "http://example/x" , x )
assertNull ( x )
assertEquals ( "http://elsewhere/ns#x" , x )
assertNull ( x )
assertNull ( x )
assertEquals ( "ns100:x" , x )
assertEquals ( expectedNewStyle , result )
assertEquals ( n , n1 )
assertEquals ( v , v1 )
assertEquals ( t , t1 )
assertEquals ( lang , RDFTHRIFT )
assertTrue ( b )
assertTrue ( b )
assertEquals ( Node . ANY , n )
assertNotEquals ( x0 , x1 )
assertTrue ( "Not isomorphic" , b )
assertTrue ( result [ 1 ] . toString ( ) . contains ( "BIND" ) )
assertEquals ( query , query2 )
assertEquals ( "(table empty)" , x )
assertEquals ( "Initial binding didn't restrict query properly" , 1 , count )
assertTrue ( "Initial setting not set correctly now" , qSoln . getLiteral ( "z" ) . getLexicalForm ( ) . equals ( "zzz" ) )
assertTrue ( result )
assertTrue ( IsoMatcher . isomorphic ( expected . asDatasetGraph ( ) , result . asDatasetGraph ( ) ) )
assertTrue ( IsoMatcher . isomorphic ( d . asDatasetGraph ( ) , result . asDatasetGraph ( ) ) )
AssertExtra . assertEqualsUnordered ( "find(g)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(p)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(gs)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(gp)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(sp)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(po)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(gso)" , quads1 , quads2 )
AssertExtra . assertEqualsUnordered ( "find(spo)" , quads1 , quads2 )
assertTrue ( b )
assertTrue ( model1 . isIsomorphicWith ( ds . getDefaultModel ( ) ) )
assertNull ( dsg . getGraph ( gn ) )
assertFalse ( dataset . asDatasetGraph ( ) . find ( ) . hasNext ( ) )
assertTrue ( IsoMatcher . isomorphic ( dsgData , dataset . asDatasetGraph ( ) ) )
assertTrue ( correctAnswers . contains ( chooseFrom ( sample ) ) )
assertTrue ( "Lock was not handed over to waiting thread!" , writeLockCaptured . get ( ) )
assertEquals ( 1 , rows )
assertNotNull ( qe )
assertEquals ( q , q2 )
assertEquals ( q , q2 )
assertEquals ( op2 , op )
assertTrue ( NodeFunctions . sameTerm ( n1 , n2 ) )
assertFalse ( NodeFunctions . sameTerm ( n1 , n2 ) )
assertFalse ( NodeFunctions . sameTerm ( n1 , n2 ) )
assertEquals ( "56" , s . getString ( ) )
assertEquals ( NodeValue . TRUE , r )
assertEquals ( NodeValue . TRUE , r )
assertEquals ( NodeValue . FALSE , r )
assertEquals ( NodeValue . FALSE , r )
assertEquals ( "abc" , n . getLiteralLexicalForm ( ) )
assertTrue ( "Not same integer: " + v1 + " & " + v2 , v1 . getInteger ( ) . equals ( v2 . getInteger ( ) ) )
assertTrue ( Expr . CMP_EQUAL == res )
assertEquals ( "Wrong lexical form length" , 26 , x . length ( ) )
assertEquals ( n , nv . getNode ( ) )
assertNotNull ( nv )
assertEquals ( nvx , nv )
assertNotNull ( nv )
assertEquals ( nvx , nv )
assertNotNull ( factory )
assertNotNull ( pmap . getNsPrefixURI ( "ex" ) )
assertEquals ( uri + "foo" , pmap . expandPrefix ( "ex:foo" ) )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 1 , x )
assertEquals ( 1 , x )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 3 , x )
assertEquals ( 1 , x )
assertEquals ( 3 , x )
assertEquals ( 1 , x )
assertEquals ( 0 , x )
assertEquals ( 2 , x )
assertTrue ( graphEmpty ( gStore . getDefaultGraph ( ) ) )
assertTrue ( graphContains ( gStore . getGraph ( graphIRI ) , triple1 ) )
assertTrue ( "Not empty" , graphEmpty ( gStore . getDefaultGraph ( ) ) )
assertTrue ( graphEmpty ( gStore . getDefaultGraph ( ) ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , Triple . create ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , Triple . create ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertTrue ( g . isIsomorphicWith ( gStore . getDefaultGraph ( ) ) )
assertTrue ( graphContains ( gStore . getGraph ( graphIRI ) , Triple . create ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertFalse ( dsg . getDefaultGraph ( ) . isEmpty ( ) )
assertFalse ( dsg . getDefaultGraph ( ) . isEmpty ( ) )
assertEquals ( 0 , Iter . count ( gs . find ( ) ) )
assertEquals ( 0 , Iter . count ( gs . find ( ) ) )
assertEquals ( 0 , Iter . count ( gs . find ( ) ) )
assertTrue ( b )
assertEquals ( Arrays . asList ( "c" ) , rs . getResultVars ( ) )
assertEquals ( 5.0 , d , 0 )
assertEquals ( 5 , d , 0 )
assertEquals ( 5 , d , 0 )
assertEquals ( - 1 , d , 0 )
assertEquals ( 5 , d , 0 )
assertEquals ( 5 , d , 0 )
assertEquals ( 10 , d , 0 )
assertEquals ( 10 , d , 0 )
assertEquals ( 1 , d , 0 )
assertEquals ( - 1 , d , 0 )
assertEquals ( 3 , d , 0 )
assertEquals ( 2 , d , 0 )
assertEquals ( bgp , bgp2 )
assertEquals ( bgp2 , bgp )
assertEquals ( bgp2 , bgp )
assertEquals ( 1 , i )
assertEquals ( 23 , i )
assertEquals ( 23 , i )
assertTrue ( e instanceof E_SameTerm )
assertNull ( item )
ThreadAction other = ThreadTxn . threadTxnRead ( dsg , ( ) -> Assert . assertTrue ( dsg . isEmpty ( ) ) )
assertFalse ( b )
assertTrue ( f . get ( 4 , TimeUnit . SECONDS ) )
assertFalse ( b )
assertEquals ( "<n1> <n2> \"l3\"" , stringForTriple ( getTriple ( ) ) )
assertEquals ( "<n1>" , stringForRDFNode ( new LiteralImpl ( aNode ( ) , null ) ) )
assertEquals ( "\"2\"^^<http://www.w3.org/2001/XMLSchema#int>" , FmtUtils . stringForLiteral ( nl , getContext ( ) ) )
assertEquals ( "2.4" , FmtUtils . stringForLiteral ( nl , getContext ( ) ) )
assertEquals ( "zz:abs" , stringForRDFNode ( rdfNod , getContext ( ) ) )
assertEquals ( "?tt" , FmtUtils . stringForNode ( NodeFactory . createVariable ( "tt" ) ) )
assertEquals ( "<zz:ü_fe-zz>",
assertTrue ( b )
assertEquals ( 4 , x )
assertEquals ( 56 , x )
assertEquals ( "x" , x )
assertEquals ( "abc" , x )
assertEquals ( "abcdefghijklmnopqrstuvwxyzXYZ" , x )
assertEquals ( "test" , x )
assertEquals ( x . length ( ) , 8194 )
assertEquals ( 5000 , x . length ( ) )
assertEquals ( fn1 , fn2 )
assertEquals ( "file.ttl" , fn2 )
assertEquals ( "a/b/file.ttl" , fn2 )
assertEquals ( "hello" , b . asString ( ) )
assertEquals ( "  0x0001\n  XX" , b . asString ( ) )
assertEquals ( "    1 ABCD\n    2 XYZ" , b . asString ( ) )
assertEquals ( "  1 ABCD\n  2 XYZ\n" , b . asString ( ) )
assertEquals ( 0 , x )
assertEquals ( "0000" , s )
assertTrue ( b )
assertTrue ( b )
assertEquals ( "a" , peek . peek ( ) )
assertEquals ( 0 , n )
assertEquals ( 1 , n )
assertEquals ( 0 , n )
assertEquals ( null , iter . peek ( 0 ) )
assertEquals ( 0 , count . get ( ) )
assertEquals ( - 1 , idx )
assertTrue ( BitsInt . test ( v , false , 0 ) )
assertTrue ( BitsInt . test ( v , true , 31 ) )
assertTrue ( BitsLong . test ( v , false , 0 ) )
assertTrue ( BitsLong . test ( v , true , 63 ) )
assertEquals ( 0xF1F2F3F4 , i )
assertEquals ( "1" , str )
assertEquals ( "a" , oneElt ( x ) )
assertEquals ( "file:///D.ttl" , iri )
assertEquals ( ( Integer ) 456 , trie . longestMatch ( "testingly" ) )
assertEquals ( newHashSet ( testObject1 , testObject2 ) , testSet . stream ( ) . collect ( toSet ( ) ) )
assertEquals ( tuple1 , tuple2 )
assertEquals ( expected , mapped )
assertNotNull ( holder . get ( ) )
assertEquals ( List . of ( "ruleWithBuiltin" ) , rules . stream ( ) . map ( Rule :: getName ) . collect ( Collectors . toList ( ) ) )
assertFalse ( "Multiple writers were allowed!" , secondWriterHasLock . get ( ) )
assertEquals ( 0 , file . length ( ) )
assertEquals ( blkSize , x )
assertEquals ( fn , lock . getPath ( ) . toString ( ) )
assertEquals ( v , 1234 )
assertNotNull ( r )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertNull ( x1 )
assertNull ( x )
assertNull ( x2 )
assertTrue ( Record . keyEQ ( r , RecordLib . intToRecord ( 10 ) ) )
assertTrue ( r + " != " + RecordLib . intToRecord ( 10 ) , Record . keyEQ ( r , RecordLib . intToRecord ( 10 ) ) )
assertEquals ( "After txn" , outerRootIdx1 , outerRootIdx2 )
assertEquals ( str , str2 )
assertEquals ( str , s )
assertEquals ( "two" , s )
assertNotEquals ( 0 , locn )
assertEquals ( 1 , counter1 . get ( ) )
assertFalse ( b )
assertTrue ( b )
assertTrue ( b )
assertTrue ( b )
assertTrue ( b )
assertTrue ( b )
assertFalse ( b )
assertTrue ( b )
assertNotNull ( id1 )
assertEquals ( "After W and R" , x1 , x2 )
assertEquals ( InitValue + 1 , x )
assertTrue ( e instanceof E_Random )
assertTrue ( e instanceof E_UUID )
assertTrue ( e instanceof E_Now )
assertTrue ( e instanceof E_Datatype )
assertTrue ( e instanceof E_DateTimeHours )
assertTrue ( e instanceof E_DateTimeMonth )
assertTrue ( e instanceof E_DateTimeTimezone )
assertTrue ( e instanceof E_DateTimeYear )
assertTrue ( e instanceof E_IsBlank )
assertTrue ( e instanceof E_IsLiteral )
assertTrue ( e instanceof E_Lang )
assertTrue ( e instanceof E_NumAbs )
assertTrue ( e instanceof E_NumFloor )
assertTrue ( e instanceof E_Str )
assertTrue ( e instanceof E_StrLength )
assertTrue ( e instanceof E_StrUpperCase )
assertTrue ( e instanceof E_UnaryPlus )
assertTrue ( e instanceof E_SHA1 )
assertTrue ( e instanceof E_SHA256 )
assertTrue ( e instanceof E_SHA512 )
assertTrue ( e instanceof E_GreaterThanOrEqual )
assertTrue ( e instanceof E_LessThan )
assertTrue ( e instanceof E_LogicalAnd )
assertTrue ( e instanceof E_StrAfter )
assertTrue ( e instanceof E_StrContains )
assertTrue ( e instanceof E_StrEndsWith )
assertTrue ( e instanceof E_StrStartsWith )
assertTrue ( e instanceof E_Function )
assertTrue ( e instanceof E_StrConcat )
assertTrue ( e instanceof E_StrSubstring )
assertTrue ( e instanceof E_Exists )
assertTrue ( e instanceof ExprVar )
assertTrue ( e instanceof ExprNone )
assertTrue ( wb . toString ( ) . contains ( "VALUES ?s { <http://example.org#subject> }" ) )
assertTrue ( wv . matching )
assertTrue ( wv . matching )
assertTrue ( wv . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( wv . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertTrue ( visitor . matching )
assertEquals ( 4 , rows )
assertEquals ( 4 , rows )
assertEquals ( 10 , rows )
assertEquals ( evalRowCount , cachedRowCount )
assertEquals ( 9 , rows )
assertEquals ( 9 , actualRowCount )
assertEquals ( 6 , actualRowCount )
assertEquals ( expectedStr , op3 . toString ( ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( 3 , x )
assertNotNull ( x )
assertNotNull ( x )
assertNotNull ( x )
assertNotNull ( x )
assertNotNull ( in )
assertNotNull ( in )
assertEquals ( 1 , x )
assertEquals ( "SERVLET: 1" , x )
assertTrue ( result )
assertTrue ( x != 0 )
assertTrue ( x != 0 )
assertNotNull ( in )
assertNotNull ( in )
assertEquals ( results , results2 )
assertEquals ( results , results2 )
assertNotNull ( x )
assertNotNull ( x )
assertEquals ( 3 , c )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResults , results )
assertEquals ( expResults , results )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( geo , expResult )
assertEquals ( geo , expResult )
assertEquals ( geo , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( expResult , not ( result ) )
assertThat ( expResult , not ( result ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( geo , expResult )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( dataset )
assertNotNull ( graph )
assertEquals ( 3 , Iter . count ( dsg . find ( ) ) )
assertNotNull ( graph )
assertNotNull ( graph )
assertEquals ( "ABC" , t . getObject ( ) . getBlankNodeLabel ( ) )
assertEquals ( "789" , obj . getBlankNodeLabel ( ) )
assertNull ( x )
assertFalse ( dsg . find ( ) . hasNext ( ) )
assertEquals ( 2 , Iter . count ( iter ) )
assertEquals ( 2 , Iter . count ( dataset . find ( ) ) )
assertTrue ( b )
assertTrue ( b )
assertNotNull ( ds )
assertEquals ( "Removal of a registration failed" , sizeBefore , sizeAfter )
assertEquals ( 3 , x )
assertEquals ( 0 , batchResults . length )
assertEquals ( 5 , batchResults . length )
assertNotNull ( conn . getCatalog ( ) )
assertNull ( conn . getWarnings ( ) )
assertNull ( stmt . getMetaData ( ) )
assertTrue ( pss . toString ( ) . contains ( "\"value\"" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "12.3" ) )
assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertTrue ( pss . toString ( ) . contains ( XSDDatatype . XSDdate . getURI ( ) ) )
assertTrue ( pss . toString ( ) . contains ( XSDDatatype . XSDtime . getURI ( ) ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertTrue ( pss . toString ( ) . contains ( "\"http://example.org\"" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertTrue ( pss . toString ( ) . contains ( "12.3" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "<urn:x-arq:DefaultGraph>" ) )
assertTrue ( pss . toString ( ) . contains ( "<urn:x-arq:DefaultGraph>" ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . YEAR ) ) ) )
assertTrue ( pss . toString ( ) . contains ( "00:00:00" ) )
assertTrue ( pss . toString ( ) . contains ( Integer . toString ( Calendar . getInstance ( ) . get ( Calendar . YEAR ) ) ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . HOUR_OF_DAY ) ) ) )
assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . HOUR_OF_DAY ) ) ) )
assertTrue ( pss . toString ( ) . contains ( "00:00:00" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertTrue ( pss . toString ( ) . contains ( "test" ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( pss . toString ( ) . contains ( "123.4" ) )
assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertEquals ( "Should have placed RDFNode in secured securedModel" , securedModel , rdfNode2 . getModel ( ) )
assertEquals ( actual , getBaseRDFNode ( ) . as ( RDFList . class ) . getHead ( ) )
assertTrue ( "Model should have been secured" , m2 instanceof SecuredModel )
assertEquals ( baseStatement . getAlt ( ) , alt . getBaseItem ( ) )
assertEquals ( baseStatement . getSeq ( ) , seq . getBaseItem ( ) )
assertEquals ( 8 , count )
assertEquals ( 2 , counter . get ( ) )
assertTrue ( b )
assertEquals ( 2 , counter . get ( ) )
assertEquals ( 0 , output . length )
assertNotNull ( mout . latestFilename ( ) )
assertEquals ( g1 , base )
assertNotSame ( dgBase1 , dgBase2 )
assertFalse ( "Expect false before any creation attempted" , b )
assertFalse ( "Expected false for a unique memory location" , b )
assertEquals ( 0 , file . length ( ) )
assertFalse ( x1 == x2 )
assertNotEquals ( "Node Ids" , id1 , id2 )
assertNull ( x )
assertEquals ( "http://foo/" , uri )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , x )
assertEquals ( expected , mapped )
assertEquals ( hash ( x1 ) , hash ( x2 ) )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEquals ( 2 , x )
assertEquals ( x , base1 + "x" )
assertEquals ( "http://host/bar0" , g1 . getPrefixMapping ( ) . getNsPrefixURI ( "foo0" ) )
ds . executeRead ( ( ) -> assertEquals ( "http://example/" , m1 . getNsPrefixURI ( "ex" ) ) )
assertEquals ( 1 , dsg . getDefaultGraph ( ) . size ( ) )
assertEquals ( "http://example/" , uri )
assertEquals ( 37L , nodeId . getId ( ) )
assertEquals ( 0 , n )
assertNotNull ( sConn )
assertEqualsStoreParams ( StoreParams . getDftStoreParams ( ) , sp )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertEquals ( x , base1 + "x" )
ds . executeRead ( ( ) -> assertEquals ( "http://example/" , m1 . getNsPrefixURI ( "ex" ) ) )
assertEquals ( 1 , n )
assertEquals ( false , b )
assertNotSame ( dg1 , dg2 )
assertTrue ( scores . get ( RESOURCE_BASE + "brownfox" ) > scores . get ( RESOURCE_BASE + "redfox" ) )
assertEquals ( SPEC1_DEFAULT_FIELD , entityDef . getPrimaryField ( ) )
assertEquals ( StandardAnalyzer . class , entityDef . getAnalyzer ( SPEC1_DEFAULT_FIELD ) . getClass ( ) )
assertEquals ( LowerCaseKeywordAnalyzer . class , entityDef . getAnalyzer ( SPEC1_DEFAULT_FIELD ) . getClass ( ) )
assertEquals ( before , after )
assertTrue ( dataset . getContext ( ) . get ( TextQuery . textIndex ) instanceof TextIndexLucene )
assertNotNull ( index )
assertTrue ( index . getDirectory ( ) instanceof ByteBuffersDirectory )
