Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
assertEquals ( "blob" , PhysicalNetwork . IsolationMethod . getIsolationMethod ( "bla" ) . getProvider ( ) )
assertEquals ( PhysicalNetwork . IsolationMethod . UNKNOWN_PROVIDER , PhysicalNetwork . IsolationMethod . getIsolationMethod ( "bla" ) . getProvider ( ) )
Assert . assertEquals ( AutoScalePolicy . Action . SCALEUP , action )
Assert . assertNull ( action )
Assert . assertEquals ( Account . Type . getFromValue ( accountType . ordinal ( ) ) , accountType )
Assert . assertEquals ( Account . Type . getFromValue ( null ) , null )
Assert . assertEquals ( RoleType . fromString ( roleType . name ( ) ) , roleType )
Assert . assertEquals ( rule . toString ( ) , "someString" )
Assert . assertNull ( cmd . getDetails ( ) )
Assert . assertEquals ( failureResponse . second ( ) , e . getMessage ( ) )
Assert . assertTrue ( "Received exception as the mock accountService createUser returns null user" , true )
assertEquals ( "Failed to Update vlan ip range" , ex . getMessage ( ) )
Assert . assertEquals ( "Failed to add cluster" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to add cluster" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to add host" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to add host" , exception . getDescription ( ) )
Assert . assertNull ( exception . getDescription ( ) )
assertEquals ( "Failed to add secondary storage" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to add vpn user" , exception . getDescription ( ) )
Assert . assertEquals ( createSnapshotCmd . getTags ( ) , expectedTags )
assertEquals ( "Failed to add Region" , exception . getDescription ( ) )
Assert . assertEquals ( values1 , result )
Assert . fail ( "Received exception when success expected " + e . getMessage ( ) )
Assert . assertEquals ( "Empty configuration name provided" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to update config" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to update config" , exception . getDescription ( ) )
Assert . assertEquals ( "Failed to update ip address on vm NIC. Refer to server logs for details." , exception . getDescription ( ) )
Assert . assertEquals ( createSnapshotPolicyCmd . getTags ( ) , expectedTags )
Assert . assertEquals ( ( Long ) 1L , registerTemplateCmdByAdmin . getZoneIds ( ) . get ( 0 ) )
Assert . assertEquals ( ( Long ) 1L , registerTemplateCmd . getZoneIds ( ) . get ( 0 ) )
Assert . assertEquals ( cmd . getResponseObject ( ) . getClass ( ) , SuccessResponse . class )
Assert . assertEquals ( response , cmd . getResponseObject ( ) )
Assert . assertEquals ( userDataResponse , actualResponse . getResponses ( ) . get ( 0 ) )
Assert . assertEquals ( response , cmd . getResponseObject ( ) )
assertEquals ( null , hostResponse . getDetails ( ) )
Assert . assertEquals ( expected , statsResponseMock . diskIopsTotal )
Assert . assertEquals ( expected , statsResponseMock . diskIopsTotal )
assertEquals ( aclList . get ( i ) . getNumber ( ) , i + 1 )
Assert . assertEquals ( received , answer )
Assert . assertEquals ( received , answer )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertEquals ( "https://console.example.com" , url )
assertEquals ( "//1-2-3-4.example.com:8888" , url )
assertTrue ( "Failed download" , bytes > 0 )
Assert . assertEquals ( actualSize , processor . getVirtualSize ( mockFile ) )
Assert . assertEquals ( actualSize , processor . getVirtualSize ( mockFile ) )
Assert . assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
Assert . assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
Assert . assertEquals ( expectedVirtualSizeBytes , actualVirtualSizeBytes )
assertTrue ( b )
Assert . assertEquals ( aic , after )
assertTrue ( b )
assertEquals ( expected , dcId )
assertEquals ( expected , vId )
assertTrue ( 123456789L == s )
assertTrue ( b )
assertTrue ( r )
assertTrue ( b )
assertNotNull ( h )
assertTrue ( 101L == id )
assertTrue ( s == Status . Up )
assertTrue ( spped == 2000000000L )
assertTrue ( pID == 16L )
assertTrue ( size == 100000000000L )
assertTrue ( msID == 2L )
assertTrue ( cID == 3L )
assertEquals ( expected , dcId )
assertEquals ( expected , vId )
Assert . assertTrue ( type instanceof BaseImage )
Assert . assertTrue ( type instanceof Iso )
Assert . assertTrue ( type instanceof RootDisk )
Assert . assertTrue ( type instanceof VolumeTypeBase )
Assert . assertTrue ( actual )
assertFalse ( actual )
Assert . assertTrue ( returnedValue )
assertFalse ( returnedValue )
Assert . assertEquals ( listAutoScaleVmGroupVOMock , result )
Assert . assertEquals ( listAutoScaleVmGroupVOMock , result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertTrue ( result )
Assert . assertEquals ( state , autoScaleVmGroupStatisticsVO . getState ( ) )
Assert . assertEquals ( 6 , result )
Assert . assertEquals ( listAutoScaleVmGroupVmMapVOMock , result )
Assert . assertTrue ( result )
Assert . assertTrue ( result )
Assert . assertEquals ( 2 , result )
Assert . assertFalse ( result )
Assert . assertFalse ( result )
assertEquals ( "2.0.0" , hierarchy . getRecentVersion ( CloudStackVersion . parse ( "2.2.2" ) ) . toString ( ) )
assertEquals ( "0.0.5" , hierarchy . getRecentVersion ( CloudStackVersion . parse ( "1.0.0.0" ) ) . toString ( ) )
assertEquals ( EXPECTED_RESULT_SQL_STORAGE_TAGS , primaryDataStoreDao . getSqlValuesFromStorageTags ( STORAGE_TAGS_ARRAY ) )
Assert . assertEquals ( "Y29udGVudA==" , returnedContentInBase64 )
Assert . assertEquals ( expectedTemplateUuid , templateUuid )
assertEquals ( StrategyPriority . CANT_HANDLE , priority )
assertEquals ( StrategyPriority . HYPERVISOR , priority )
assertEquals ( StrategyPriority . HYPERVISOR , priority )
assertTrue ( strategy . canHandle ( volumeObjectSource , dataObjectDestination ) == StrategyPriority . CANT_HANDLE )
assertTrue ( strategy . isStoragePoolTypeInList ( StoragePoolType . SharedMountPoint , listTypes ) )
assertFalse ( strategy . isStoragePoolTypeInList ( StoragePoolType . SharedMountPoint , listTypes ) )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
assertEquals ( "Panic!" , e . getMessage ( ) )
Assert . assertEquals ( test , context . getResult ( ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( input , result )
Assert . assertEquals ( obfuscatedInput , result )
Assert . assertEquals ( noPassword , result )
assertTrue ( quotaAlertManager . lockAccount ( accountVO . getId ( ) ) )
Assert . assertNull ( result )
Assert . assertEquals ( expected , result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertNull ( result )
Assert . assertEquals ( presetVariablesMock , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertNull ( result . getProject ( ) )
Assert . assertEquals ( domain . getPath ( ) , result . getPath ( ) )
Assert . assertEquals ( expected . getTags ( ) , result . getTags ( ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected . isCustomized ( ) , result . isCustomized ( ) )
Assert . assertEquals ( expected . getValue ( ) , result . get ( expected . getKey ( ) ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected . toString ( ) , result . toString ( ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( 0 , expected )
assertNotNull ( set . getApplicationContext ( "base" ) )
assertTrue ( e . getMessage ( ) . contains ( "Missing name property" ) )
assertTrue ( apiAccessCheckerSpy . checkAccess ( getTestUser ( ) , "anyApi" ) )
Assert . assertEquals ( true , status )
Assert . assertTrue ( provider . revokeCertificate ( CertUtils . generateRandomBigInt ( ) , "anyString" ) )
Assert . assertEquals ( expectedNextDate , nextDate )
Assert . assertTrue ( e . getMessage ( ) . contains ( "No Dedicated Resource available to release" ) )
Assert . assertTrue ( ans . getDetails ( ) , ans . getResult ( ) )
Assert . assertTrue ( ans . getDetails ( ) , ans . getResult ( ) )
Assert . assertEquals ( expectedPortName , driver . getNextDpdkPort ( ) )
Assert . assertEquals ( DpdkHelper . VHostUserMode . CLIENT , dpdKvHostUserMode )
Assert . assertEquals ( expected , lcr . diskUuidToSerial ( uuid ) )
Assert . assertEquals ( 100 , memoryFreeInKBs )
Assert . assertEquals ( - 1 , memoryFreeInKBs )
Assert . assertEquals ( - 1 , memoryFreeInKBs )
assertTrue ( ans instanceof UnsupportedAnswer )
Assert . assertEquals ( valueExpected , result )
Assert . assertNotEquals ( IoDriverPolicy . IO_URING , diskDef . getIoDriver ( ) )
Assert . assertEquals ( 2000 , cpuShares )
Assert . assertNull ( diskPath )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( expected , result )
assertEquals ( expected , ifDef . toString ( ) )
assertEquals ( xmlDef , expectedXml )
Assert . assertEquals ( expectedToString . toString ( ) , new LibvirtVmMemoryDeviceDef ( memorySize ) . toString ( ) )
assertEquals ( 1 , ips [ 0 ] . getNicDevId ( ) . intValue ( ) )
Assert . assertEquals ( expectedResult , result )
Assert . assertTrue ( result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertEquals ( 2350L , KVMHostInfo . getCpuSpeedFromHostCapabilities ( capabilities ) )
Assert . assertEquals ( kvmHostInfo . getCpuSpeed ( ) , manualSpeed )
assertNull ( hypervisor . getCurrentStatus ( 1L ) )
assertNull ( hypervisor . getCurrentStatus ( 1L ) )
assertNotNull ( start )
assertNull ( hypervisor . getVmState ( vmName ) )
Assert . assertNull ( vmwareDatacenter )
assertEquals ( macSequence , "02:00:65:b5:00:03|01:23:45:67:89:AB" )
assertTrue ( "The strategy is only supposed to handle vmware hosts" , canHandle == StrategyPriority . HYPERVISOR )
Assert . assertEquals ( expected , guestOsType )
Assert . assertEquals ( expected , guestOsType )
Assert . assertEquals ( platformEmulator , guestOsType )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
Assert . assertEquals ( patch , patchFilePath )
assertNotNull ( wrapper )
assertNotNull ( wrapper )
assertTrue ( answer . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( String . format ( "0%s00 Ghz" , decimalSeparator ) , hostResponse . getCpuAllocatedGhz ( ) )
assertEquals ( _api . getControllerData ( ) . isPrimary ( ) , true )
assertEquals ( _api . getControllerData ( ) . isPrimary ( ) , false )
assertTrue ( ping == null )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( ans . getResult ( ) )
assertFalse ( ans . getResult ( ) )
assertTrue ( designednetwork == null )
assertTrue ( ping == null )
assertTrue ( ping == null )
assertTrue ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertTrue ( answer . getResult ( ) )
assertTrue ( result )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertNull ( actual )
assertEquals ( true , answer . getResult ( ) )
assertEquals ( "Wrong provider is returned" , pr . getName ( ) , Provider . InternalLbVm . getName ( ) )
assertTrue ( "Wrong value is returned by validateLBRule method" , result )
assertTrue ( "Rules failed to apply to vm in Stopped state" , result )
assertTrue ( "Rules failed to apply to vm in Running state" , result )
assertNotNull ( "Internal LB vm is null which means it failed to start " + vr , vr )
assertNotNull ( "Internal LB vm is null which means it failed to stop " + vr , vr )
assertFalse ( vnModel . compare ( controller , vnModel1 ) )
assertFalse ( vnModel2 . compare ( controller , vnModel3 ) )
assertThat ( executionCounter . getValue ( ) , equalTo ( 2 ) )
assertTrue ( ping == null )
assertTrue ( clsa . getResult ( ) )
assertFalse ( clsa . getResult ( ) )
assertTrue ( dlsa . getResult ( ) )
assertFalse ( clspa . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertFalse ( flspa . getResult ( ) )
assertFalse ( clra . getResult ( ) )
assertFalse ( dlspa . getResult ( ) )
assertFalse ( answer . getResult ( ) )
assertThat ( answer . getResult ( ) , equalTo ( false ) )
Assert . assertNull ( returnValue )
assertTrue ( httpGet == newHttpGet )
assertTrue ( httpPut == newHttpPut )
Assert . assertNotNull ( resp . getError ( ) )
assertEquals ( 0 , ( ( ListResponse ) ldapListUsersCmd . getResponseObject ( ) ) . getResponses ( ) . size ( ) )
assertNotEquals ( 0 , ( ( ListResponse ) ldapListUsersCmd . getResponseObject ( ) ) . getResponses ( ) . size ( ) )
assertEquals ( "ldapuserresponse" , commandName )
assertFalse ( result )
assertEquals ( 3 , ( ( ListResponse ) ldapListUsersCmd . getResponseObject ( ) ) . getResponses ( ) . size ( ) )
assertEquals ( 2 , ( ( ListResponse ) ldapListUsersCmd . getResponseObject ( ) ) . getResponses ( ) . size ( ) )
assertEquals ( "authentication should be set to simple" , "simple" , authentication )
assertEquals ( "The result holds the same value configDao did" , "cn=cloudstack,cn=users,dc=cloudstack,dc=org" , result )
assertEquals ( "The result is password" , "password" , result )
assertTrue ( "x dude" , userManager instanceof OpenLdapUserManagerImpl )
Assert . assertTrue ( pair . first ( ) )
Assert . assertTrue ( new GetServiceProviderMetaDataCmd ( ) . getAPIType ( ) == APIAuthenticationType . READONLY_API )
assertEquals ( saml2AuthManager . getToken ( "someAuthnID" ) , randomToken )
assertTrue ( saml2AuthManager . isSAMLPluginEnabled ( ) )
Assert . assertTrue ( new SAML2UserAuthenticator ( ) . encode ( "random String" ) . length ( ) > 0 )
assertTrue ( SAMLUtils . generateSecureRandomId ( ) . length ( ) > 0 )
Assert . assertTrue ( new ListAndSwitchSAMLAccountCmd ( ) . getAPIType ( ) == APIAuthenticationType . READONLY_API )
Assert . assertTrue ( new SAML2LoginAPIAuthenticatorCmd ( ) . getAPIType ( ) == APIAuthenticationType . LOGIN_API )
assertTrue ( response . getIpAddr ( ) . equals ( "ipv4" ) )
assertEquals ( 0 , ( ( Integer ) virtualMachineCount . get ( securityGroupResponse ) ) . intValue ( ) )
assertEquals ( 2 , ( ( Integer ) virtualMachineCount . get ( securityGroupResponse ) ) . intValue ( ) )
Assert . assertNull ( testVariable )
Assert . assertNull ( testVariable )
Assert . assertEquals ( "a valid site local IP address" , testVariable )
Assert . assertEquals ( "a valid instance name (instance names cannot contain hyphens, spaces or plus signs)" , testVariable )
Assert . assertNull ( testVariable )
Assert . assertEquals ( "a valid domain name" , testVariable )
Assert . assertEquals ( "7" , configurationMgr . getVlanNumberFromUri ( "vlan://7" ) )
Assert . assertEquals ( expectedResult , result )
assertNull ( "DataCenter is in avoid set, destination should be null! " , dest )
Assert . assertEquals ( result , o )
Assert . assertNull ( event )
assertTrue ( highAvailabilityManager . investigate ( 1l ) == Status . Down )
Assert . assertFalse ( fencer . fenceOff ( virtualMachine , host ) )
Assert . assertEquals ( new Pair < > ( maxMemory , maxCpuCores ) , result )
Assert . assertEquals ( new Pair < > ( maxMemory , maxCpuCores ) , result )
Assert . assertEquals ( platformEmulator , virtualMachineTo . getPlatformEmulator ( ) )
Assert . assertEquals ( "Other" , virtualMachineTo . getPlatformEmulator ( ) )
Assert . assertNull ( clusterId )
Assert . assertEquals ( DpdkHelper . VHostUserMode . CLIENT , mode )
Assert . assertEquals ( expected , nic . getIPv6Address ( ) )
Assert . assertEquals ( ipv6Address , assignedNic . getIPv6Address ( ) )
Assert . fail ( String . format ( "failure with exception: %s" , e . getMessage ( ) ) )
assertEquals ( "524-530" , argumentCaptor . getValue ( ) )
Assert . assertEquals ( counterMock , counter )
Assert . assertEquals ( countersMock , counters )
Assert . assertTrue ( success )
Assert . assertEquals ( conditionMock , condition )
Assert . assertTrue ( success )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertEquals ( asVmGroupMock , vmGroup )
Assert . assertEquals ( asVmGroupMock , vmGroup )
Assert . assertEquals ( dataDiskSize , result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
assertTrue ( _configDrivesNetworkElement . release ( network , nicp , profile , null ) )
assertThat ( _configDrivesNetworkElement . getCapabilities ( ) , hasEntry ( Network . Service . UserData , null ) )
assertTrue ( guru . canHandle ( offering , dc , physicalNetwork ) )
assertNotNull ( guru . design ( offering , plan , network , owner ) )
Assert . assertNull ( result )
Assert . assertEquals ( Network . Provider . VirtualRouter , provider )
Assert . assertNotEquals ( networkAclItemVoMock , returnedNetworkAclItemVo )
Assert . assertNull ( networkACLItemVOReceived )
Assert . assertNull ( networkACLItemVOReceived )
assertEquals ( "VpcOffering should be created for Region Level Vpc" , true , result )
Assert . assertTrue ( enterMaintenanceMode )
assertNull ( amount )
Assert . assertTrue ( result . first ( ) )
Assert . assertEquals ( DEFAULT_DATABASE_NAME , dbName )
Assert . assertTrue ( snapshot . getState ( ) == Snapshot . State . BackedUp )
assertEquals ( NFS_VERSION , nfsVersion )
assertEquals ( NFS_VERSION_DEFAULT , nfsVersion )
assertEquals ( NFS_VERSION_DEFAULT , nfsVersion )
assertEquals ( NFS_VERSION , nfsVersion )
assertEquals ( NFS_VERSION_DEFAULT , nfsVersion )
assertEquals ( NFS_VERSION_DEFAULT , globalDefaultNfsVersion )
Assert . assertNotNull ( volumeApiServiceImpl . getVolumeNameFromCommand ( createVol ) )
Assert . assertNotNull ( volumeApiServiceImpl . getVolumeNameFromCommand ( createVol ) )
Assert . assertNull ( returnedStoragePoolTags )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertFalse ( result )
Assert . assertTrue ( result )
Assert . assertEquals ( "Unable to detach volume, cannot detach volume from a VM that has backups. First remove the VM from the backup offering or set the global configuration 'backup.enable.attach.detach.of.volumes' to true." , e . getMessage ( ) )
Assert . assertEquals ( "Unable to attach volume, please specify a VM that does not have any backups or set the global configuration 'backup.enable.attach.detach.of.volumes' to true." , e . getMessage ( ) )
Assert . assertNull ( snapshot )
Assert . assertEquals ( expectedResult , result )
Assert . assertNull ( dataStore )
Assert . assertEquals ( template , resultTemplate )
Assert . assertTrue ( accountManagerImpl . disableAccount ( 42 ) )
Assert . assertEquals ( userVoMock , receivedUser )
Assert . assertTrue ( UuidUtils . isUuid ( domainVo . getUuid ( ) ) )
Assert . assertTrue ( UuidUtils . isUuid ( domainVo . getUuid ( ) ) )
assertTrue ( "Operation should be successful!" , result )
assertTrue ( "Validate network offering: Test passed: the offering is valid for vpc creation" , result )
Assert . assertNull ( returnedRole )
Assert . assertNull ( returnedRole )
assertNotNull ( "Affinity group 'group1' of type 'mock' failed to create " , group )
assertNotNull ( "Affinity group 'group1' of type 'mock' failed to create " , group )
Assert . assertEquals ( new Long ( 1 ) , domainIdBasedOnDomainLevel )
Assert . assertEquals ( msList , listToSend )
assertEquals ( "Unable to find Backup Offering with id: [null]." , e . getMessage ( ) )
Assert . assertTrue ( task . getDelay ( ) == CAManager . CABackgroundJobDelay . value ( ) * 1000L )
Assert . assertTrue ( caManager . revokeCertificate ( crl . getCertSerial ( ) , crl . getCertCn ( ) , null ) )
assertEquals ( "New account owner not properly set" , newAccountOwner , deployment . owner )
assertEquals ( "New account shouldn't have been updated" , mockOwner , deployment . owner )
assertEquals ( "SourceNatIp returned by the VpcManager was not correctly set" , publicIp , deployment . sourceNatIp )
Assert . assertEquals ( "Failed to create private gateway" , exception . getDescription ( ) )
Assert . assertEquals ( "Region with name: APAC already exists" , e . getMessage ( ) )
Assert . assertTrue ( regionManager . getId ( ) != 0 )
assertEquals ( "Expected errors not found" , expectedErrors , actualErrors )
assertEquals ( str , time . toString ( ) , dtParsed . toString ( ) )
assertEquals ( str , time . toString ( ) , dtParsed . toString ( ) )
assertEquals ( str , time . toString ( ) , dtParsed . toString ( ) )
assertEquals ( str , time . toString ( ) , dtParsed . toString ( ) )
Assert . assertEquals ( "Failed to scp files to system VM" , e . getMessage ( ) )
assertEquals ( "{}" , getHumanReadableBytesJson ( "{}" ) )
Assert . assertEquals ( "b" , properties . get ( "a" ) )
Assert . assertEquals ( "/bin/echo foo " , script . toString ( ) )
Assert . assertNull ( output )
assertEquals ( expected , output )
assertEquals ( expected , result )
Assert . assertTrue ( pf . getDuration ( ) == sleepTimeNano )
Assert . assertTrue ( backoff . wakeup ( thread . getName ( ) ) )
assertThatTheTraceListDoesNotContainsCgLibLogs ( exceptions )
assertEquals ( "Minimal address not created" , "0.0.0.0" , min . addr ( ) )
assertEquals ( new BigInteger ( "2" ) , NetUtils . countIp6InRange ( "1234:5678::1-1234:5678::2" ) )
assertEquals ( new BigInteger ( "1" ) , NetUtils . countIp6InRange ( "1234:5678::2" ) )
assertEquals ( "pvlan://123-p123" , NetUtils . generateUriForPvlan ( "123" , "123" , "promiscuous" ) . toString ( ) )
Assert . assertEquals ( script , result )
Assert . assertEquals ( value , jsInterpreterSpy . variables . get ( key ) )
assertTrue ( props . getUseStartTLS ( ) )
assertFalse ( props . getDebugMode ( ) )
assertFalse ( props . getDebugMode ( ) )
assertNull ( smtpMailSender . sessionProps . getTimeout ( ) )
assertEquals ( "TEST2 <test2@test2.com>" , message . getFrom ( ) [ 0 ] . toString ( ) )
assertNull ( returnOfPropertyThatDoesNotExist )
Assert . assertEquals ( oobAddress , result )
Assert . assertEquals ( expectedResult , result )
Assert . assertNotEquals ( CertUtils . generateRandomBigInt ( ) , CertUtils . generateRandomBigInt ( ) )
Assert . assertEquals ( SHA256_CHECKSUM , result )
Assert . assertEquals ( MD5_CHECKSUM , result )
Assert . assertEquals ( ZERO_PADDED_SHA256_CHECKSUM , result )
Assert . assertEquals ( vmDiskInfo . getControllerFromDeviceBusName ( ) , null )
assertEquals ( "cloud.public.untagged" , publicNetworkPrefix )
assertEquals ( "cloud.public.1234." , publicNetworkPrefix )
Assert . assertEquals ( "vmx-08" , vmxHwVersion )
