assertThat ( testee . getCurrentVersion ( ) ) . contains ( CURRENT_VERSION )
assertThat ( testee . addListener ( KEY_1 , listener ) . isFirstListener ( ) ) . isTrue ( )
assertThat ( testee . addListener ( KEY_1 , listener2 ) . isFirstListener ( ) ) . isFalse ( )
assertThat ( registration . unregister ( ) . lastListenerRemoved ( ) ) . isFalse ( )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThatListenerReceiveOneEvent ( listener )
assertThat ( dispatchingFailureEvents ( ) ) . containsOnly ( EVENT )
assertThat ( Mono . from ( mailboxManager . hasInbox ( session ) ) . block ( ) ) . isFalse ( )
assertThat ( Mono . from ( mailboxManager . hasInbox ( session ) ) . block ( ) ) . isTrue ( )
assertThatCode ( ( ) -> mailboxManager . renameMailbox ( mailboxId , MailboxPath . forUser ( USER_1 , mailboxName ) , session ) ) . doesNotThrowAnyException ( )
assertThatCode ( ( ) -> mailboxManager . renameMailbox ( originPath , MailboxPath . forUser ( USER_1 , mailboxName ) , session ) ) . doesNotThrowAnyException ( )
assertThat ( mailboxManager . getAllAnnotations ( inbox , session ) ) . containsOnly ( privateAnnotationUpdate )
assertThat ( Mono . from ( mailboxManager . mailboxExists ( new MailboxPath ( inbox , "INBOX.Test" ) , session ) ) . block ( ) ) . isFalse ( )
assertThat ( Mono . from ( mailboxManager . mailboxExists ( inboxSubMailbox , session ) ) . block ( ) ) . isTrue ( )
assertThat ( Mono . from ( mailboxManager . mailboxExists ( trash , session ) ) . block ( ) ) . isTrue ( )
assertThat ( Mono . from ( mailboxManager . mailboxExists ( nestedFolder , session ) ) . block ( ) ) . isTrue ( )
assertThat ( testee . getValue ( ) ) . contains ( bufferContent )
assertThat ( cassandraACLMapper ( ) . getACL ( MAILBOX_ID ) . blockOptional ( ) ) . isEmpty ( )
assertThat ( result ) . containsOnly ( id1 )
assertThat ( result ) . hasSize ( 5 )
assertThat ( UserQuotaThresholds . Id . fromKey ( id . asAggregateKey ( ) ) ) . isEqualTo ( id )
assertThatThrownBy ( ( ) -> UserQuotaThresholds . Id . fromKey ( "1/2/3/4" ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( lessThanQuery . getQuotaBoundary ( ) ) . isEqualTo ( _50 )
assertThat ( messageManager2 . getMessageCount ( session ) ) . isEqualTo ( 1 )
assertThat ( messageIdManager . getMessage ( messageId , FetchGroup . MINIMAL , session ) ) . hasSize ( 1 )
assertThat ( messageManager2 . getMetaData ( RESET , session , MessageManager . MailboxMetaData . FetchGroup . FIRST_UNSEEN ) . getHighestModSeq ( ) . asLong ( ) ) . isNotNegative ( )
assertThat ( Flux . from ( messageManager1 . search ( searchQuery , session ) ) . toStream ( ) ) . isEmpty ( )
assertThat ( messageMailboxIds ) . containsOnly ( aliceMailbox1 . getMailboxId ( ) , aliceMailbox3 . getMailboxId ( ) )
assertThat ( messageIdManager . getMessage ( messageId , FetchGroup . MINIMAL , bobSession ) ) . hasSize ( 1 )
assertThat ( actual . getACL ( ) . getEntries ( ) ) . containsKeys ( MailboxACL . EntryKey . createUserEntryKey ( BOB ) , MailboxACL . EntryKey . createUserEntryKey ( CEDRIC ) )
assertThat ( iterator . next ( ) ) . isNotNull ( )
assertThat ( annotationMapper . getAllAnnotations ( mailboxId ) ) . containsOnly ( PRIVATE_ANNOTATION_WITH_KEY_UPPER )
assertThat ( benwaInboxMailbox . getMailboxId ( ) ) . isNotNull ( )
assertThat ( mailboxMapper . findMailboxById ( mailboxId ) . block ( ) ) . isEqualTo ( benwaWorkMailbox )
assertThat ( sut . find ( ImmutableList . of ( ) , FetchType . FULL ) ) . isEmpty ( )
assertThat ( messageMapper . getMailboxCounters ( benwaInboxMailbox ) . getUnseen ( ) ) . isEqualTo ( 5 )
assertThat ( messageMapper . getMailboxCounters ( benwaInboxMailbox ) . getUnseen ( ) ) . isEqualTo ( 4 )
assertThat ( messageMapper . findRecentMessageUidsInMailbox ( benwaInboxMailbox ) ) . containsOnly ( message1 . getUid ( ) )
assertThat ( messageMapper . retrieveMessagesMarkedForDeletion ( benwaInboxMailbox , MessageRange . all ( ) ) ) . isEmpty ( )
assertThat ( messageMapper . getLastUid ( benwaInboxMailbox ) . get ( ) ) . isGreaterThan ( uid )
assertThat ( messageMapper . getMailboxCounters ( benwaInboxMailbox ) . getUnseen ( ) ) . isEqualTo ( expectedUnseenMessages )
assertThat ( message . getSubType ( ) ) . isEqualTo ( subType )
assertThat ( movedMessageMetaData . get ( 0 ) . getSaveDate ( ) ) . isNotEqualTo ( originalMessage . getSaveDate ( ) )
assertThat ( retrieveMessageFromStorage ( benwaWorkMailbox , message1 ) . getUid ( ) ) . isEqualTo ( message1 . getUid ( ) )
assertThat ( retrievedMessageIterator . next ( ) . getAttachments ( ) ) . isEmpty ( )
assertThat ( retrievedMessageIterator . next ( ) . getAttachments ( ) ) . isEmpty ( )
assertThat ( maxQuotaManager . getMaxStorage ( QUOTA_ROOT ) ) . contains ( QuotaSizeLimit . size ( 111 ) )
assertThat ( maxQuotaManager . getDomainMaxStorage ( DOMAIN ) ) . contains ( QuotaSizeLimit . size ( 36 ) )
assertThat ( actual ) . containsOnly ( m6 . getMessageId ( ) )
assertThat ( actual ) . containsOnly ( mOther . getMessageId ( ) , m8 . getMessageId ( ) )
assertThat ( results ) . containsOnly ( subscription )
assertThat ( information . failures ( ) . mailboxFailures ( ) ) . containsExactly ( mailbox . getId ( ) )
assertThat ( information . failures ( ) . mailboxFailures ( ) ) . containsExactly ( mailbox . getId ( ) )
assertThat ( mailet . getMailetInfo ( ) ) . isEqualTo ( "AmqpForwardAttribute" )
assertThat ( mail . attributes ( ) ) . isEmpty ( )
assertThat ( mail . attributesMap ( ) ) . isEqualTo ( ImmutableMap . of ( ATTRIBUTE_NAME_1 , ATTRIBUTE_1 ) )
assertThat ( mail . getAttribute ( KEY ) ) . isNull ( )
assertThat ( mail . getAttribute ( KEY ) ) . isEqualTo ( NEW_VALUE )
assertThat ( mail . getAttribute ( KEY ) ) . isNull ( )
assertThat ( testee . getMailetInfo ( ) ) . isEqualTo ( "ICALToJson Mailet" )
assertThat ( mailet . getMailetInfo ( ) ) . isEqualTo ( "ContactExtractor Mailet" )
assertThat ( mail . getRecipients ( ) ) . containsOnly ( postmaster )
assertThat ( mailet . getMailetInfo ( ) ) . isEqualTo ( "Remove All Mail Attributes Mailet" )
assertThat ( mailet . getMailetInfo ( ) ) . isEqualTo ( "ReplaceContent" )
assertThat ( message . getSubject ( ) ) . isEqualTo ( expectedSubject )
assertNull ( matchedRecipients )
assertThat ( actual ) . containsOnly ( RECIPIENT1 )
assertThat ( testee . match ( mail ) ) . containsAll ( mail . getRecipients ( ) )
assertThat ( testee . match ( mail ) ) . containsAll ( mail . getRecipients ( ) )
assertThat ( matcher . match ( mockedMail ) ) . containsAll ( mockedMail . getRecipients ( ) )
assertThat ( matcher . getMatcherConfig ( ) ) . isNotNull ( )
assertNull ( matchedRecipients )
assertThat ( matcher . match ( mail ) ) . hasSize ( 2 )
assertThat ( testee . match ( mail ) ) . containsOnly ( mailAddress1 )
assertThat ( testee . match ( FakeMail . defaultFakeMail ( ) ) ) . isEmpty ( )
assertThat ( results ) . containsOnly ( recipient )
assertNull ( matchedRecipients )
assertThat ( senderHosts ) . containsOnly ( Domain . of ( "james.apache.org" ) )
assertThat ( ImapFeatures . of ( ) . supportedFeatures ( ) ) . isEmpty ( )
assertThat ( ImapFeatures . of ( Feature . NAMESPACE_SUPPORT ) . supports ( Feature . NAMESPACE_SUPPORT ) ) . isTrue ( )
assertThat ( selectedMailbox . getApplicableFlags ( ) . getUserFlags ( ) ) . containsOnly ( CUSTOM_FLAG )
assertThat ( HookReturnCode . deny ( ) ) . describedAs ( "Rejected.. To many recipients" ) . isEqualTo ( resp )
assertThat ( HookReturnCode . declined ( ) ) . describedAs ( "Not blocked cause its a nullsender" ) . isEqualTo ( response )
assertThatServerStartCorrectly ( server )
assertThatServerStartCorrectly ( server )
assertThatServerStartCorrectly ( server )
assertThat ( CmdType . lookup ( "adduser" ) ) . isEqualTo ( CmdType . ADDUSER )
assertThat ( CmdType . lookup ( "adddomain" ) ) . isEqualTo ( CmdType . ADDDOMAIN )
assertThat ( CmdType . lookup ( "listdomains" ) ) . isEqualTo ( CmdType . LISTDOMAINS )
assertThat ( CmdType . lookup ( "addaddressmapping" ) ) . isEqualTo ( CmdType . ADDADDRESSMAPPING )
assertThat ( CmdType . lookup ( "removeregexmapping" ) ) . isEqualTo ( CmdType . REMOVEREGEXMAPPING )
assertThat ( CmdType . lookup ( "deleteusermailboxes" ) ) . isEqualTo ( CmdType . DELETEUSERMAILBOXES )
assertThat ( CmdType . lookup ( "deletemailbox" ) ) . isEqualTo ( CmdType . DELETEMAILBOX )
assertThat ( CmdType . lookup ( "getglobalmaxmessagecountquota" ) ) . isEqualTo ( CmdType . GETGLOBALMAXMESSAGECOUNTQUOTA )
assertThat ( CmdType . lookup ( "getmaxstoragequota" ) ) . isEqualTo ( CmdType . GETMAXSTORAGEQUOTA )
assertThat ( CmdType . lookup ( "getmessagecountquota" ) ) . isEqualTo ( CmdType . GETMESSAGECOUNTQUOTA )
assertThat ( CmdType . lookup ( "getsievequota" ) ) . isEqualTo ( CmdType . GETSIEVEQUOTA )
assertThat ( CmdType . lookup ( "setsieveuserquota" ) ) . isEqualTo ( CmdType . SETSIEVEUSERQUOTA )
assertThat ( CmdType . lookup ( "addactivesievescript" ) ) . isEqualTo ( CmdType . ADDACTIVESIEVESCRIPT )
assertThat ( CmdType . lookup ( null ) ) . isNull ( )
assertThat ( imapClient . login ( DockerLdapSingleton . JAMES_USER . asString ( ) , DockerLdapSingleton . PASSWORD ) ) . isTrue ( )
assertThat ( mail . getMessage ( ) . getMessageID ( ) ) . isEqualTo ( emptyMessage . getMessageID ( ) )
assertThatThrownBy ( ( ) -> MailImpl . deriveNewName ( called6Times ) ) . isInstanceOf ( MessagingException . class )
assertThat ( testee . getInputStream ( ) ) . hasSameContentAs ( new ZeroedInputStream ( _1M ) )
assertThat ( getCleanedMessageSource ( m ) ) . isEqualTo ( getSimpleMessageCleanedSource ( ) )
assertThatThrownBy ( ( ) -> mw . getSubject ( ) ) . isInstanceOf ( IllegalStateException . class )
assertThat ( new SimpleUrl ( "" ) . getSimplified ( ) ) . isEmpty ( )
assertThat ( new SimpleUrl ( "/abcd/ef/gh" ) . getSimplified ( ) ) . isEqualTo ( "/abcd/ef/gh" )
assertThat ( new SimpleUrl ( "file:///home/user/./foo/../.bar/baz" ) . getSimplified ( ) ) . isEqualTo ( "file:///home/user/.bar/baz" )
assertThat ( new SimpleUrl ( "file:../.././foo/../.bar/baz" ) . getSimplified ( ) ) . isEqualTo ( "file:../../.bar/baz" )
assertThat ( file . getPath ( ) ) . isEmpty ( )
assertThat ( sut . get ( ) ) . hasSize ( 1 )
assertThat ( guiceProbeProvider . getProbe ( GuiceProbe1 . class ) ) . isEqualTo ( guiceProbe1 )
assertThat ( atomicBoolean . get ( ) ) . isFalse ( )
assertThat ( mapperFactory . createMailboxMapper ( session ) . list ( ) . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( mapperFactory . createMailboxMapper ( session ) . list ( ) . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( mailboxManagerManagement . listMailboxes ( USER . asString ( ) ) ) . containsOnly ( "name2" , "name4" , "INBOX" , "INBOX.toto" )
assertThat ( mapperFactory . createMailboxMapper ( session ) . list ( ) . collectList ( ) . block ( ) ) . containsOnly ( mailbox )
assertThat ( mapperFactory . createMailboxMapper ( session ) . list ( ) . collectList ( ) . block ( ) ) . containsOnly ( mailbox )
assertThat ( FunctionalUtils . identityPredicate ( ) . test ( true ) ) . isTrue ( )
assertThat ( recordedExceptions ) . hasSize ( 1 )
assertThat ( canceled . get ( ) ) . isTrue ( )
assertThat ( canceled . get ( ) ) . isTrue ( )
assertThat ( canceled . get ( ) ) . isTrue ( )
assertThatThrownBy ( ( ) -> DLPConfigurationItem . Id . of ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThat ( Mapping . address ( "a@b" ) . hasDomain ( ) ) . isTrue ( )
assertThat ( Mapping . address ( "abc" ) . hasDomain ( ) ) . isFalse ( )
assertThatThrownBy ( ( ) -> Mapping . address ( "abc@d" ) . appendDomainIfNone ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThat ( Mapping . domain ( Domain . of ( "abc" ) ) . getType ( ) ) . isEqualTo ( Mapping . Type . Domain )
assertThat ( Mapping . group ( "abc" ) . getType ( ) ) . isEqualTo ( Mapping . Type . Group )
assertThat ( Mapping . domain ( Domain . of ( "value" ) ) . asMailAddress ( ) ) . isEmpty ( )
assertThat ( separator ) . isEqualTo ( "," )
assertThat ( ImmutableList . copyOf ( usersLDAPRepository . list ( ) ) ) . isEmpty ( )
assertThat ( testee ( ) . isAdministrator ( testSystem . getAdmin ( ) ) ) . isTrue ( )
assertThat ( usersRepository . contains ( Username . of ( "unknown@" + DOMAIN ) ) ) . isFalse ( )
assertThat ( domainList . getDefaultDomain ( ) ) . isEqualTo ( Domain . of ( expectedDefaultDomain ) )
assertThat ( domainList . getDomains ( ) ) . containsOnly ( domain )
assertThat ( domainList . getDomains ( ) ) . contains ( Domain . of ( detected ) )
assertThat ( domainList . containsDomain ( Domain . of ( detected ) ) ) . isTrue ( )
assertThat ( domainList . containsDomain ( Domain . of ( envDomain ) ) ) . isTrue ( )
assertThat ( actual ) . containsOnly ( Mapping . address ( "value" ) )
assertThat ( actual ) . containsOnly ( Mapping . address ( "value1" ) )
assertThat ( actual ) . containsOnly ( Mapping . address ( "value1" ) , Mapping . address ( "" ) , Mapping . address ( "value2" ) )
assertThat ( actual ) . containsOnly ( Mapping . address ( "value1" ) , Mapping . address ( "value2" ) )
assertThat ( actual ) . containsOnly ( Mapping . address ( "value1:value1" ) , Mapping . address ( "value2" ) )
assertThat ( actual ) . containsOnly ( Mapping . domain ( Domain . of ( "test" ) ) )
assertThat ( actual ) . containsOnly ( Mapping . regex ( "test" ) )
assertThat ( MappingsImpl . empty ( ) ) . isEmpty ( )
assertThat ( mappings . exclude ( Mapping . Type . Address ) ) . isEqualTo ( MappingsImpl . empty ( ) )
assertThat ( mappingsImpl ) . containsOnly ( expectedMapping )
assertThat ( testIMAPClient . readFirstMessage ( ) ) . isNotNull ( )
assertThat ( testIMAPClient . readFirstMessage ( ) ) . containsSequence ( "Crypted content" )
assertThat ( bounce . getMailetInfo ( ) ) . isEqualTo ( "Bounce Mailet" )
assertThat ( dsnBounce . getMailetInfo ( ) ) . isEqualTo ( "DSNBounce Mailet" )
assertThat ( mail . getState ( ) ) . isEqualTo ( Mail . GHOST )
assertThat ( mail . getState ( ) ) . isNull ( )
assertThat ( forward . getMailetInfo ( ) ) . isEqualTo ( "Forward Mailet" )
assertThat ( mailSample . getState ( ) ) . isEqualTo ( "newState" )
assertThat ( mail . getAttribute ( RESULT_ATTRIBUTE ) . isEmpty ( ) ) . isTrue ( )
assertThat ( mail . getState ( ) ) . isEqualTo ( Mail . GHOST )
assertThat ( Delay . from ( "36" ) ) . isEqualTo ( new Delay ( Delay . DEFAULT_ATTEMPTS , Duration . ofMillis ( 36 ) ) )
assertThat ( Delay . from ( "2 * 36 s" ) ) . isEqualTo ( new Delay ( 2 , Duration . ofSeconds ( 36 ) ) )
assertThat ( executionResult ) . isEqualTo ( ExecutionResult . temporaryFailure ( sfe ) )
assertThat ( executionResult ) . isEqualTo ( ExecutionResult . permanentFailure ( sfe ) )
assertThat ( executionResult . getExecutionState ( ) ) . isEqualTo ( ExecutionResult . ExecutionState . TEMPORARY_FAILURE )
assertThat ( executionResult . getExecutionState ( ) ) . isEqualTo ( ExecutionResult . ExecutionState . TEMPORARY_FAILURE )
assertThat ( executionResult . getExecutionState ( ) ) . isEqualTo ( ExecutionResult . ExecutionState . TEMPORARY_FAILURE )
assertThat ( executionResult . getExecutionState ( ) ) . isEqualTo ( ExecutionResult . ExecutionState . PERMANENT_FAILURE )
assertThat ( executionResult . getExecutionState ( ) ) . isEqualTo ( ExecutionResult . ExecutionState . PERMANENT_FAILURE )
assertThat ( original . getSubject ( ) ) . isEqualTo ( subject )
assertThat ( condition ) . isEqualTo ( new Condition . OperatorCondition ( Operator . CONTAINS , "matchme" ) )
assertThatJson ( json ) . isEqualTo ( "{\"operator\":\"contains\", \"matchingValue\":\"matchme\"}" )
assertThat ( response ) . isEqualTo ( new Response ( Response . SMTPStatusCode . of ( 250 ) , "OK" ) )
assertThatJson ( json ) . isEqualTo ( "{\"code\":250, \"message\":\"OK\"}" )
assertThat ( testee . store ( URL , KEY_1 ) . block ( ) ) . isTrue ( )
assertThat ( tokenManager . getValidity ( pirateContinuationToken ) ) . isEqualTo ( TokenStatus . INVALID )
assertThat ( tokenManager . getValidity ( pirateContinuationToken ) ) . isEqualTo ( TokenStatus . INVALID )
assertThat ( tokenManager . getValidity ( continuationToken ) ) . isEqualTo ( TokenStatus . EXPIRED )
assertThat ( result . getDate ( ) ) . isEqualToIgnoringMillis ( Date . from ( now ) )
assertThat ( result . getBody ( ) ) . isEqualToComparingOnlyGivenFields ( expected , "content" , "charset" )
assertThat ( sut . requestChanged ( Optional . < String > empty ( ) , Optional . empty ( ) ) ) . isFalse ( )
assertThat ( sut . requestChanged ( Optional . of ( "any" ) , Optional . of ( "other" ) ) ) . isTrue ( )
assertThatThrownBy ( ( ) -> sut . assertIsUserOwnerOfMailboxes ( ImmutableList . of ( mailboxId ) , session ) . block ( ) )
assertThat ( tested . isInlinedWithCid ( ) ) . isTrue ( )
assertThatThrownBy ( ( ) -> BlobId . of ( "" ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( sut . validate ( ) ) . extracting ( ValidationResult :: getErrorMessage ) . contains ( "no recipient address set" )
assertThat ( sut . validate ( ) ) . isEmpty ( )
assertThat ( filterCondition . getInMailboxes ( ) ) . contains ( ImmutableList . of ( "1" , "2" ) )
assertThatThrownBy ( ( ) -> Header . builder ( ) . header ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThatThrownBy ( ( ) -> Header . builder ( ) . build ( ) ) . isInstanceOf ( IllegalStateException . class )
assertThat ( keyword . getFlagName ( ) ) . isEqualTo ( maxLengthFlagName )
assertThatThrownBy ( ( ) -> HeaderProperty . valueOf ( "ProP" ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( HeaderProperty . valueOf ( "headers.prop" ) ) . isNotEqualTo ( HeaderProperty . valueOf ( "headers.other" ) )
assertThatThrownBy ( ( ) -> MethodCallId . of ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThat ( emptyBuilder . build ( ) ) . isEqualToComparingFieldByField ( testee )
assertThatThrownBy ( ( ) -> MailboxCreateRequest . builder ( ) . role ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThatThrownBy ( ( ) -> MailboxCreateRequest . builder ( ) . sortOrder ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThatThrownBy ( ( ) -> MailboxCreateRequest . builder ( ) . name ( null ) ) . isInstanceOf ( NullPointerException . class )
assertThat ( mailbox . getParentId ( ) ) . isEmpty ( )
assertThat ( mailbox . getTotalMessages ( ) ) . isEqualTo ( Number . ZERO )
assertThatThrownBy ( ( ) -> SortOrder . of ( - 1 ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( actual . getMail ( ) . getName ( ) ) . isEqualTo ( NAME )
assertThat ( criteria ) . containsExactly ( SearchQuery . address ( AddressType . From , from ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . hasAttachment ( ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . attachmentContains ( attachments ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . sentDateAfter ( Date . from ( after . toInstant ( ) ) , DateResolution . Second ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . flagIsSet ( Flag . FLAGGED ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . flagIsUnSet ( Flag . ANSWERED ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . flagIsUnSet ( Flag . DRAFT ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . flagIsSet ( Flag . SEEN ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . sizeLessThan ( maxSize ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . headerExists ( headerName ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . headerContains ( headerName , headerValue ) )
assertThat ( criteria ) . containsExactly ( SearchQuery . flagIsSet ( Flag . FLAGGED ) )
assertThat ( textExtractor . toPlainText ( textWithoutHtml ) ) . isEqualTo ( textWithoutHtml )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( textExtractor . toPlainText ( html ) ) . isEqualTo ( expectedPlainText )
assertThat ( mailboxManager . list ( session ) ) . contains ( MailboxPath . forUser ( USERNAME , DefaultMailboxes . SPAM ) )
assertThat ( results ) . containsOnly ( recipient )
assertThat ( testServer . isEnabled ( ) ) . isFalse ( )
assertThat ( testIMAPClient . getMessageCount ( MailboxConstants . INBOX ) ) . isEqualTo ( 1 )
assertThat ( guiceJamesServer . getProbe ( MailboxProbeImpl . class ) . listUserMailboxes ( USERNAME ) ) . isEmpty ( )
assertThatThrownBy ( ( ) -> jsonExtractor . parse ( "{\"field1\":\"\",\"field2\":\"any\"}" ) ) . isInstanceOf ( JsonExtractException . class )
assertThat ( Flux . from ( delegationStore . authorizedUsers ( ALICE ) ) . collectList ( ) . block ( ) ) . containsOnly ( BOB )
assertThat ( Flux . from ( delegationStore . authorizedUsers ( ALICE ) ) . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( maxQuotaManager . getDomainMaxMessage ( FOUND_LOCAL ) ) . contains ( QuotaCountLimit . unlimited ( ) )
assertThat ( maxQuotaManager . getDomainMaxStorage ( FOUND_LOCAL ) ) . contains ( QuotaSizeLimit . unlimited ( ) )
assertThat ( deadLetters . failedIds ( new EventBusTestFixture . GroupA ( ) ) . collectList ( ) . block ( ) ) . isEmpty ( )
assertThat ( maxQuotaManager . getGlobalMaxMessage ( ) ) . contains ( QuotaCountLimit . unlimited ( ) )
assertThat ( maxQuotaManager . getMaxMessage ( userQuotaRootResolver . forUser ( BOB ) ) ) . contains ( QuotaCountLimit . unlimited ( ) )
assertThat ( maxQuotaManager . getMaxStorage ( userQuotaRootResolver . forUser ( BOB ) ) ) . contains ( QuotaSizeLimit . size ( 42 ) )
assertThat ( maxQuotaManager . getMaxStorage ( userQuotaRootResolver . forUser ( BOB ) ) ) . isEmpty ( )
assertThat ( Files . getFileExtension ( getFileUrl ( ) ) ) . isEqualTo ( FileExtension . ZIP . getExtension ( ) )
assertThat ( actual ) . containsOnly ( FIRST_QUEUE . asString ( ) )
assertThat ( Mono . from ( testee . check ( ) ) . block ( ) . isUnHealthy ( ) ) . isTrue ( )
assertThat ( queue2 . get ( ) ) . isSameAs ( queue1 )
assertThat ( actual . getSliceWindow ( ) ) . isEqualTo ( Duration . ofMinutes ( 20 ) )
Assertions . assertThatThrownBy ( ( ) -> TaskType . of ( null ) ) . isInstanceOf ( IllegalArgumentException . class )
assertThat ( taskManager ( HOSTNAME_2 ) . getExecutionDetails ( taskId ) . getStatus ( ) ) . isEqualTo ( CANCELLED )
assertThat ( mailet . requiredProcessingState ( ) ) . containsOnly ( new ProcessingState ( "virus" ) )
assertThat ( analysisResult . hasVirus ( ) ) . isTrue ( )
assertThat ( result . getHits ( ) ) . isNotEqualTo ( SpamAssassinResult . NO_RESULT )
